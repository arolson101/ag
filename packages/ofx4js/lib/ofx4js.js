/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var ofx4js;
(function (ofx4js) {
    /**
     * Base exception class.
     *
     * @author Ryan Heaton
     */
    var OFXException = (function (_super) {
        __extends(OFXException, _super);
        function OFXException(message, e) {
            if (message === void 0) { message = null; }
            if (e === void 0) { e = null; }
            _super.call(this, message);
            this.innerError = e;
        }
        return OFXException;
    })(Error);
    ofx4js.OFXException = OFXException;
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='OFXException'/>
var ofx4js;
(function (ofx4js) {
    /**
     * @author Ryan Heaton
     */
    var OFXRuntimeException = (function (_super) {
        __extends(OFXRuntimeException, _super);
        function OFXRuntimeException(message) {
            if (message === void 0) { message = null; }
            _super.call(this, message);
        }
        return OFXRuntimeException;
    })(ofx4js.OFXException);
    ofx4js.OFXRuntimeException = OFXRuntimeException;
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    var meta;
    (function (meta) {
        /**
         * Annotation for a method that returns an OFX aggregate.
         *
         * @author Ryan Heaton
         */
        var Aggregate = (function () {
            function Aggregate(value) {
                this._value = value;
            }
            /**
             * The name of the aggregate.
             *
             * @return The name of the aggregate.
             */
            Aggregate.prototype.value = function () {
                return this._value;
            };
            return Aggregate;
        })();
        meta.Aggregate = Aggregate;
    })(meta = ofx4js.meta || (ofx4js.meta = {}));
})(ofx4js || (ofx4js = {}));
var ofx4js;
(function (ofx4js) {
    var meta;
    (function (meta) {
        /**
         * convenience function to supply a default value if the given value is not specified
         */
        function _default(value, defaultValue) {
            return (typeof value !== 'undefined') ? value : defaultValue;
        }
        meta._default = _default;
        function isAssignableFrom(entryType, assignableTo) {
            return (assignableTo === entryType) || ((typeof entryType === "function") && (assignableTo.prototype instanceof entryType));
        }
        meta.isAssignableFrom = isAssignableFrom;
        ;
        /**
         * an interface to read and write a value into an object
         */
        var PropertyDescriptor = (function () {
            function PropertyDescriptor(params) {
                this.propertyType = params.type;
                this.readMethod = params.read;
                this.writeMethod = params.write;
            }
            PropertyDescriptor.prototype.getPropertyType = function () {
                return this.propertyType;
            };
            PropertyDescriptor.prototype.getReadMethod = function () {
                return this.readMethod;
            };
            PropertyDescriptor.prototype.getWriteMethod = function () {
                return this.writeMethod;
            };
            return PropertyDescriptor;
        })();
        meta.PropertyDescriptor = PropertyDescriptor;
    })(meta = ofx4js.meta || (ofx4js.meta = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='PropertyDescriptor'/>
var ofx4js;
(function (ofx4js) {
    var meta;
    (function (meta) {
        /**
         * Marks a method as providing a child aggregate (or set of them to a top-level aggregate).
         *
         * @author Ryan Heaton
         */
        var ChildAggregate = (function (_super) {
            __extends(ChildAggregate, _super);
            function ChildAggregate(params) {
                _super.call(this, params);
                this._order = params.order;
                this._name = meta._default(params.name, "##not_specified##");
                this._required = meta._default(params.required, false);
                this._collectionEntryType = meta._default(params.collectionEntryType, null);
            }
            /**
             * Used to specify the name of the aggregate in its context as a child aggregate.
             *
             * @return Used to specify the name of the aggregate in its context as a child aggregate.
             */
            ChildAggregate.prototype.name = function () {
                return this._name;
            };
            /**
             * Whether this aggregate is required.
             *
             * @return Whether this aggregate is required.
             */
            ChildAggregate.prototype.required = function () {
                return this._required;
            };
            /**
             * The order this child aggregate comes in its parent aggregate.
             *
             * @return The order this child aggregate comes in its parent aggregate.
             */
            ChildAggregate.prototype.order = function () {
                return this._order;
            };
            /**
             * If the type is a collection, return the type of the elements of the collection (otherwise null)
             */
            ChildAggregate.prototype.collectionEntryType = function () {
                return this._collectionEntryType;
            };
            return ChildAggregate;
        })(meta.PropertyDescriptor);
        meta.ChildAggregate = ChildAggregate;
    })(meta = ofx4js.meta || (ofx4js.meta = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='PropertyDescriptor'/>
var ofx4js;
(function (ofx4js) {
    var meta;
    (function (meta) {
        /**
         * An OFX element, applied to a javabean property.
         *
         * @author Ryan Heaton
         */
        var Header = (function (_super) {
            __extends(Header, _super);
            function Header(params) {
                _super.call(this, params);
                this._name = params.name;
            }
            /**
             * The name of the element.
             *
             * @return The name of the element.
             */
            Header.prototype.name = function () {
                return this._name;
            };
            return Header;
        })(meta.PropertyDescriptor);
        meta.Header = Header;
    })(meta = ofx4js.meta || (ofx4js.meta = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='PropertyDescriptor'/>
var ofx4js;
(function (ofx4js) {
    var meta;
    (function (meta) {
        /**
         * An OFX element, applied to a javabean property.
         *
         * @author Ryan Heaton
         */
        var Element = (function (_super) {
            __extends(Element, _super);
            function Element(params) {
                _super.call(this, params);
                this._name = params.name;
                this._required = meta._default(params.required, false);
                this._order = params.order;
            }
            /**
             * The name of the element.
             *
             * @return The name of the element.
             */
            Element.prototype.name = function () {
                return this._name;
            };
            /**
             * Whether this element is required.
             *
             * @return Whether this element is required.
             */
            Element.prototype.required = function () {
                return this._required;
            };
            /**
             * The order this element comes in its parent aggregate.
             *
             * @return The order this element comes in its parent aggregate.
             */
            Element.prototype.order = function () {
                return this._order;
            };
            return Element;
        })(meta.PropertyDescriptor);
        meta.Element = Element;
    })(meta = ofx4js.meta || (ofx4js.meta = {}));
})(ofx4js || (ofx4js = {}));
var ofx4js;
(function (ofx4js) {
    var log;
    (function (log) {
        var Log = (function () {
            function Log() {
                this.infoEnabled = false;
                this.debugEnabled = false;
            }
            Log.prototype.setInfoEnabled = function (value) {
                this.infoEnabled = value;
            };
            Log.prototype.isInfoEnabled = function () {
                return this.infoEnabled;
            };
            Log.prototype.info = function () {
                var texts = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    texts[_i - 0] = arguments[_i];
                }
                if (this.isInfoEnabled()) {
                    console.log(texts);
                }
            };
            Log.prototype.setDebugEnabled = function (value) {
                this.debugEnabled = value;
            };
            Log.prototype.isDebugEnabled = function () {
                return this.debugEnabled;
            };
            Log.prototype.debug = function () {
                var texts = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    texts[_i - 0] = arguments[_i];
                }
                if (this.isDebugEnabled()) {
                    console.log(texts);
                }
            };
            Log.prototype.warning = function () {
                var texts = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    texts[_i - 0] = arguments[_i];
                }
                console.log(texts);
            };
            Log.prototype.error = function () {
                var texts = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    texts[_i - 0] = arguments[_i];
                }
                console.log(texts);
            };
            return Log;
        })();
        log.Log = Log;
        var LogFactory = (function () {
            function LogFactory() {
            }
            LogFactory.getLog = function (clazz) {
                if (!clazz.Log) {
                    clazz.Log = new Log();
                }
                return clazz.Log;
            };
            return LogFactory;
        })();
        log.LogFactory = LogFactory;
    })(log = ofx4js.log || (ofx4js.log = {}));
})(ofx4js || (ofx4js = {}));
var ofx4js;
(function (ofx4js) {
    var collections;
    (function (collections) {
        var SortedSet = (function () {
            function SortedSet(compareFcn) {
                this.valueArray = [];
                this.compareFcn = compareFcn;
            }
            SortedSet.prototype.values = function () {
                if (!this.isSorted) {
                    console.assert(!!this.compareFcn);
                    this.valueArray.sort(this.compareFcn);
                    this.isSorted = true;
                }
                return this.valueArray;
            };
            SortedSet.prototype.insert = function (element) {
                var index = this.valueArray.indexOf(element);
                if (index == -1) {
                    this.isSorted = false;
                    this.valueArray.push(element);
                }
            };
            SortedSet.prototype.push = function (element) {
                this.insert(element);
            };
            SortedSet.prototype.remove = function (element) {
                var index = this.valueArray.indexOf(element);
                if (index == -1) {
                    return false;
                }
                this.valueArray = this.valueArray.splice(index, 1);
            };
            SortedSet.prototype.count = function () {
                return this.valueArray.length;
            };
            return SortedSet;
        })();
        collections.SortedSet = SortedSet;
    })(collections = ofx4js.collections || (ofx4js.collections = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../meta/ChildAggregate'/>
///<reference path='../meta/Element'/>
///<reference path='../meta/PropertyDescriptor'/>
///<reference path='../collections/SortedSet'/>
///<reference path='AggregateInfo'/>
var ofx4js;
(function (ofx4js) {
    var io;
    (function (io) {
        var SortedSet = ofx4js.collections.SortedSet;
        var ChildAggregate = ofx4js.meta.ChildAggregate;
        var Element = ofx4js.meta.Element;
        //import Log = org.apache.commons.logging.Log;
        //import LogFactory = org.apache.commons.logging.LogFactory;
        (function (AggregateAttributeType) {
            AggregateAttributeType[AggregateAttributeType["CHILD_AGGREGATE"] = 0] = "CHILD_AGGREGATE";
            AggregateAttributeType[AggregateAttributeType["ELEMENT"] = 1] = "ELEMENT";
        })(io.AggregateAttributeType || (io.AggregateAttributeType = {}));
        var AggregateAttributeType = io.AggregateAttributeType;
        /**
         * A generic descriptor for an attribute of an OFX aggregate.
         *
         * @author Ryan Heaton
         */
        var AggregateAttribute = (function () {
            function AggregateAttribute(arg) {
                if (arg instanceof Element) {
                    this.AggregateAttributeFromElement(arg);
                }
                else if (arg instanceof ChildAggregate) {
                    this.AggregateAttributeFromChildAggregate(arg);
                }
                else {
                    throw new ofx4js.Error("invalid type");
                }
            }
            AggregateAttribute.prototype.AggregateAttributeFromElement = function (elementInfo) {
                this.readMethod = elementInfo.getReadMethod();
                this.writeMethod = elementInfo.getWriteMethod();
                if (this.readMethod == null) {
                    throw new ofx4js.Error("Illegal property for aggregate: no read method.");
                }
                else if (this.writeMethod == null) {
                    throw new ofx4js.Error("Illegal property for aggregate: no write method.");
                }
                this.attributeType = elementInfo.getPropertyType();
                this.collectionEntryType = null;
                this.name = elementInfo.name();
                this.order = elementInfo.order();
                this.required = elementInfo.required();
                this.type = 1 /* ELEMENT */;
                this.toString_ = "Element '" + this.name + "'";
                this.collection = false;
                //todo: validate known/supported element types here?
            };
            AggregateAttribute.prototype.AggregateAttributeFromChildAggregate = function (childAggregate) {
                this.readMethod = childAggregate.getReadMethod();
                this.writeMethod = childAggregate.getWriteMethod();
                if (this.readMethod == null) {
                    throw new ofx4js.Error("Illegal property for aggregate: no read method.");
                }
                else if (this.writeMethod == null) {
                    throw new ofx4js.Error("Illegal property for aggregate: no write method.");
                }
                this.attributeType = childAggregate.getPropertyType();
                this.collection = false;
                if (childAggregate.collectionEntryType()) {
                    this.collection = true;
                    this.name = null;
                    this.collectionEntryType = childAggregate.collectionEntryType();
                }
                else if ("##not_specified##" === childAggregate.name()) {
                    var aggregateInfo = io.AggregateIntrospector.getAggregateInfo(this.attributeType);
                    if (aggregateInfo == null) {
                        throw new ofx4js.Error("Illegal child aggregate type '" + childAggregate.getPropertyType() + "': no aggregate information available.");
                    }
                    this.name = aggregateInfo.getName();
                    if ("##not_specified##" === this.name) {
                        throw new ofx4js.Error("Illegal child aggregate type '" + childAggregate.getPropertyType() + "': a child aggregate name must be specified.");
                    }
                    this.collectionEntryType = null;
                }
                else {
                    this.name = childAggregate.name();
                    this.collectionEntryType = null;
                }
                this.order = childAggregate.order();
                this.required = childAggregate.required();
                this.type = 0 /* CHILD_AGGREGATE */;
                this.toString_ = "ChildAggregate '" + this.name + "'";
            };
            AggregateAttribute.prototype.get = function (instance) {
                return this.readMethod.call(instance);
            };
            AggregateAttribute.prototype.set = function (value, instance) {
                if (this.collection) {
                    var collection = this.get(instance);
                    if (collection == null) {
                        if (this.attributeType === SortedSet) {
                            console.assert("contentCompare" in this.collectionEntryType);
                            collection = new SortedSet(this.collectionEntryType.contentCompare);
                        }
                        else {
                            collection = new this.attributeType();
                        }
                    }
                    collection.push(value);
                    value = collection;
                }
                this.writeMethod.call(instance, value);
            };
            AggregateAttribute.prototype.getAttributeType = function () {
                return this.attributeType;
            };
            AggregateAttribute.prototype.getArrayEntryType = function () {
                return this.collectionEntryType;
            };
            AggregateAttribute.prototype.getName = function () {
                return this.name;
            };
            AggregateAttribute.prototype.isRequired = function () {
                return this.required;
            };
            AggregateAttribute.prototype.getOrder = function () {
                return this.order;
            };
            AggregateAttribute.prototype.getType = function () {
                return this.type;
            };
            AggregateAttribute.contentCompare = function (left, right) {
                return left.order - right.order;
            };
            //  public int compareTo(other: AggregateAttribute) {
            //    return this.order - other.order;
            //  }
            AggregateAttribute.prototype.isArray = function () {
                return this.collection;
            };
            //@Override
            AggregateAttribute.prototype.toString = function () {
                return this.toString_;
            };
            return AggregateAttribute;
        })();
        io.AggregateAttribute = AggregateAttribute;
    })(io = ofx4js.io || (ofx4js.io = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../project.d.ts'/>
///<reference path='../collections/SortedSet'/>
///<reference path='../meta/Aggregate'/>
///<reference path='../meta/ChildAggregate'/>
///<reference path='../meta/Element'/>
///<reference path='../meta/Header'/>
///<reference path='../meta/PropertyDescriptor'/>
///<reference path='AggregateInfo'/>
///<reference path='AggregateAttribute'/>
var ofx4js;
(function (ofx4js) {
    var io;
    (function (io) {
        var SortedSet = ofx4js.collections.SortedSet;
        var isAssignableFrom = ofx4js.meta.isAssignableFrom;
        /**
         * Holder for meta information about an aggregate class.
         *
         * @author Ryan Heaton
         */
        var AggregateInfo = (function () {
            function AggregateInfo(name, owner, parentInfo) {
                this.name = name;
                this.owner = owner;
                this.headers = {};
                this.attributes = new SortedSet(io.AggregateAttribute.contentCompare);
                if (parentInfo) {
                    for (var header in parentInfo.headers) {
                        this.headers[header] = parentInfo.headers[header];
                    }
                    var parentAttributes = parentInfo.attributes.values();
                    for (var i in parentAttributes) {
                        var attribute = parentAttributes[i];
                        this.attributes.insert(attribute);
                    }
                }
            }
            /**
             * The name of the aggregate.
             *
             * @return The name of the aggregate.
             */
            AggregateInfo.prototype.getName = function () {
                return this.name;
            };
            AggregateInfo.prototype.setName = function (name) {
                this.name = name;
            };
            AggregateInfo.prototype.getOwner = function () {
                return this.owner;
            };
            /**
             * The attributes.
             *
             * @return The attributes.
             */
            AggregateInfo.prototype.getAttributes = function () {
                return this.attributes;
            };
            /**
             * Get the attribute by the specified name.
             *
             * @param name The name of the attribute.
             * @param orderHint The order at which the attribute should come after in case there are more than one candidates.
             * @param assignableTo The class this attribute must be assignable to
             * @return The attribute by the specified name,
             * or if there are more than one by that name,
             * the first one after the specified order,
             * or if there are none then the first collection that
             * comes after the order hint, or the latest if there
             * are none that come after the order hint, or null.
             */
            AggregateInfo.prototype.getAttribute = function (name, orderHint, assignableTo) {
                if (assignableTo === void 0) { assignableTo = null; }
                var candidates = new Array();
                var collectionBucket = null;
                for (var i in this.attributes.values()) {
                    var attribute = this.attributes.values()[i];
                    if (name === attribute.getName()) {
                        candidates.push(attribute);
                    }
                    else if (attribute.isArray()) {
                        if (assignableTo != null) {
                            // Verify it's the right generic type.
                            var entryType = attribute.getArrayEntryType();
                            if (entryType != null && !isAssignableFrom(entryType, assignableTo)) {
                                continue;
                            }
                        }
                        if (collectionBucket == null || collectionBucket.getOrder() < orderHint) {
                            //the default is the first collection that comes after the order hint, or the latest if there are none that come after the order hint.
                            collectionBucket = attribute;
                        }
                    }
                }
                if (candidates.length != 0) {
                    if (candidates.length == 1) {
                        return candidates[0];
                    }
                    else {
                        for (var candidate_ in candidates) {
                            var candidate = candidate_;
                            if (candidate.getOrder() >= orderHint) {
                                return candidate;
                            }
                        }
                    }
                }
                return collectionBucket;
            };
            /**
             * Whether this aggregate has headers.
             *
             * @return Whether this aggregate has headers.
             */
            AggregateInfo.prototype.hasHeaders = function () {
                return this.headers != {};
            };
            /**
             * Get the headers defined by the specific aggregate instance.
             *
             * @param instance The aggregate instance.
             * @return The headers.
             */
            AggregateInfo.prototype.getHeaders = function (instance) {
                var headers = {};
                for (var headerKey in this.headers) {
                    var header = this.headers[headerKey];
                    var headerValue = header.getReadMethod().call(instance);
                    headers[header.name()] = headerValue;
                }
                return headers;
            };
            /**
             * The type of the specified header.
             *
             * @param name The header name.
             * @return The header type, or null if no header by the specified name exists.
             */
            AggregateInfo.prototype.getHeaderType = function (name) {
                return (name in this.headers) ? this.headers[name].getPropertyType() : null;
            };
            /**
             * Set the header value for the specified instance.
             *
             * @param instance The instance.
             * @param name     The name of the header.
             * @param value    the value of the header.
             */
            AggregateInfo.prototype.setHeader = function (instance, name, value) {
                if (name in this.headers) {
                    this.headers[name].getWriteMethod().call(instance, value);
                }
            };
            AggregateInfo.prototype.addChildAggregate = function (childAggregate) {
                var attribute = new io.AggregateAttribute(childAggregate);
                this.attributes.insert(attribute);
            };
            AggregateInfo.prototype.addElement = function (element) {
                var attribute = new io.AggregateAttribute(element);
                this.attributes.insert(attribute);
            };
            AggregateInfo.prototype.addHeader = function (header) {
                console.assert(header.name());
                this.headers[header.name()] = header;
            };
            return AggregateInfo;
        })();
        io.AggregateInfo = AggregateInfo;
    })(io = ofx4js.io || (ofx4js.io = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../meta/Aggregate'/>
///<reference path='../meta/ChildAggregate'/>
///<reference path='../meta/Header'/>
///<reference path='../meta/Element'/>
///<reference path='../log/Log'/>
///<reference path='AggregateInfo'/>
var ofx4js;
(function (ofx4js) {
    var io;
    (function (io) {
        var LogFactory = ofx4js.log.LogFactory;
        //import Log = org.apache.commons.logging.Log;
        //import LogFactory = org.apache.commons.logging.LogFactory;
        var LOG;
        /**
         * Introspector for aggregate information.
         *
         * @author Ryan Heaton
         */
        var AggregateIntrospector = (function () {
            function AggregateIntrospector() {
            }
            /**
             * Get the aggregate meta information for the specified class.
             *
             * @param clazz the aggregate class.
             * @return The aggregate meta information, or null if the class isn't an aggregate.
             */
            AggregateIntrospector.getAggregateInfo = function (clazz) {
                var aggregate = clazz.Aggregate;
                if (aggregate != null && aggregate.getOwner() === clazz) {
                    return aggregate;
                }
                else {
                    return null;
                }
            };
            AggregateIntrospector.getAncestorAggregateInfo = function (clazz) {
                for (var proto = clazz.prototype; proto; proto = Object.getPrototypeOf(proto)) {
                    if (proto.constructor && proto.constructor.Aggregate) {
                        return proto.constructor.Aggregate;
                    }
                }
                return null;
            };
            /**
             * Find the aggregate class by name.
             *
             * @param aggregateName The name of the aggregate.
             * @return The aggregate class.
             */
            AggregateIntrospector.findAggregateByName = function (aggregateName) {
                return AggregateIntrospector.AGGREGATE_CLASSES_BY_NAME[aggregateName];
            };
            AggregateIntrospector.addAggregate = function (clazz, name) {
                AggregateIntrospector.AGGREGATE_CLASSES_BY_NAME[name] = clazz;
                var aggregateInfo = AggregateIntrospector.getAggregateInfo(clazz);
                if (aggregateInfo) {
                    console.assert(aggregateInfo.getName() === AggregateIntrospector.placeholderName);
                    aggregateInfo.setName(name);
                }
                else {
                    var parentInfo = AggregateIntrospector.getAncestorAggregateInfo(clazz);
                    clazz.Aggregate = new io.AggregateInfo(name, clazz, parentInfo);
                }
            };
            AggregateIntrospector.addChildAggregate = function (clazz, childAggregate) {
                var aggregateInfo = AggregateIntrospector.getAggregateInfo(clazz);
                if (!aggregateInfo) {
                    var parentInfo = AggregateIntrospector.getAncestorAggregateInfo(clazz);
                    aggregateInfo = clazz.Aggregate = new io.AggregateInfo(AggregateIntrospector.placeholderName, clazz, parentInfo);
                }
                console.assert(aggregateInfo != null);
                if (aggregateInfo) {
                    aggregateInfo.addChildAggregate(childAggregate);
                }
            };
            AggregateIntrospector.addElement = function (clazz, element) {
                var aggregateInfo = AggregateIntrospector.getAggregateInfo(clazz);
                if (!aggregateInfo) {
                    var parentInfo = AggregateIntrospector.getAncestorAggregateInfo(clazz);
                    aggregateInfo = clazz.Aggregate = new io.AggregateInfo(AggregateIntrospector.placeholderName, clazz, parentInfo);
                }
                console.assert(aggregateInfo != null);
                if (aggregateInfo) {
                    aggregateInfo.addElement(element);
                }
            };
            AggregateIntrospector.addHeader = function (clazz, header) {
                var aggregateInfo = AggregateIntrospector.getAggregateInfo(clazz);
                if (!aggregateInfo) {
                    var parentInfo = AggregateIntrospector.getAncestorAggregateInfo(clazz);
                    aggregateInfo = clazz.Aggregate = new io.AggregateInfo(AggregateIntrospector.placeholderName, clazz, parentInfo);
                }
                console.assert(aggregateInfo != null);
                if (aggregateInfo) {
                    aggregateInfo.addHeader(header);
                }
            };
            AggregateIntrospector.AGGREGATE_CLASSES_BY_NAME = {};
            AggregateIntrospector.placeholderName = "##PLACEHOLDER##";
            return AggregateIntrospector;
        })();
        io.AggregateIntrospector = AggregateIntrospector;
        LOG = LogFactory.getLog(AggregateIntrospector);
    })(io = ofx4js.io || (ofx4js.io = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../io/AggregateIntrospector'/>
var ofx4js;
(function (ofx4js) {
    var meta;
    (function (meta) {
        var AggregateIntrospector = ofx4js.io.AggregateIntrospector;
        function Aggregate_add(clazz, value) {
            if (value === void 0) { value = "#NOT_SET#"; }
            AggregateIntrospector.addAggregate(clazz, value);
        }
        meta.Aggregate_add = Aggregate_add;
    })(meta = ofx4js.meta || (ofx4js.meta = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../io/AggregateIntrospector'/>
///<reference path='PropertyDescriptor'/>
var ofx4js;
(function (ofx4js) {
    var meta;
    (function (meta) {
        var AggregateIntrospector = ofx4js.io.AggregateIntrospector;
        function Element_add(clazz, params) {
            console.assert(params.type != null);
            AggregateIntrospector.addElement(clazz, new meta.Element(params));
        }
        meta.Element_add = Element_add;
    })(meta = ofx4js.meta || (ofx4js.meta = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='Status'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var common;
            (function (common) {
                /**
                 * @author Ryan Heaton
                 */
                var StatusCode = (function () {
                    function StatusCode() {
                    }
                    StatusCode.prototype.getCode = function () {
                        throw new ofx4js.Error("abstract");
                    };
                    StatusCode.prototype.getMessage = function () {
                        throw new ofx4js.Error("abstract");
                    };
                    StatusCode.prototype.getDefaultSeverity = function () {
                        throw new ofx4js.Error("abstract");
                    };
                    return StatusCode;
                })();
                common.StatusCode = StatusCode;
            })(common = data.common || (data.common = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/Element_add'/>
///<reference path='StatusCode'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var common;
            (function (common) {
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                /**
                 * Severity of the status.
                 */
                (function (Severity) {
                    Severity[Severity["INFO"] = 0] = "INFO";
                    Severity[Severity["WARN"] = 1] = "WARN";
                    Severity[Severity["ERROR"] = 2] = "ERROR";
                })(common.Severity || (common.Severity = {}));
                var Severity = common.Severity;
                /**
                 * Known status codes.
                 */
                var KnownCode = (function (_super) {
                    __extends(KnownCode, _super);
                    function KnownCode(code, message, defaultSeverity) {
                        _super.call(this);
                        this.code = code;
                        this.message = message;
                        this.defaultSeverity = defaultSeverity;
                    }
                    KnownCode.prototype.getCode = function () {
                        return this.code;
                    };
                    KnownCode.prototype.getMessage = function () {
                        return this.message;
                    };
                    KnownCode.prototype.getDefaultSeverity = function () {
                        return this.defaultSeverity;
                    };
                    KnownCode.fromCode = function (code) {
                        for (var i in KnownCode.KnownCodes) {
                            var value = KnownCode.KnownCodes[i];
                            if (value.getCode() == code) {
                                return value;
                            }
                        }
                        return null;
                    };
                    //@Override
                    KnownCode.prototype.toString = function () {
                        return this.code.toString();
                    };
                    KnownCode.SUCCESS = new KnownCode(0, "Success", 0 /* INFO */);
                    KnownCode.CLIENT_UP_TO_DATE = new KnownCode(1, "Client is up-to-date", 0 /* INFO */);
                    KnownCode.GENERAL_ERROR = new KnownCode(2000, "General error.", 2 /* ERROR */);
                    KnownCode.GENERAL_ACCOUNT_ERROR = new KnownCode(2002, "General account error.", 2 /* ERROR */);
                    KnownCode.ACCOUNT_NOT_FOUND = new KnownCode(2003, "Account not found.", 2 /* ERROR */);
                    KnownCode.ACCOUNT_CLOSED = new KnownCode(2004, "Account closed.", 2 /* ERROR */);
                    KnownCode.ACCOUNT_NOT_AUTHORIZED = new KnownCode(2005, "Account not authorized.", 2 /* ERROR */);
                    KnownCode.DATE_TOO_SOON = new KnownCode(2014, "Date too soon", 2 /* ERROR */);
                    KnownCode.DUPLICATE_REQUEST = new KnownCode(2019, "Duplicate request.", 2 /* ERROR */);
                    KnownCode.UNSUPPORTED_VERSION = new KnownCode(2021, "Unsupported version", 2 /* ERROR */);
                    KnownCode.INVALID_TAN = new KnownCode(2022, "Invalid transaction authorization number.", 2 /* ERROR */);
                    KnownCode.MFA_CHALLENGE_REQUIRED = new KnownCode(3000, "Further authentication required.", 2 /* ERROR */);
                    KnownCode.MFA_CHALLENGE_FAILED = new KnownCode(3001, "MFA failed.", 2 /* ERROR */);
                    KnownCode.PASSWORD_CHANGE_REQUIRED = new KnownCode(15000, "Password change required.", 0 /* INFO */);
                    KnownCode.SIGNON_INVALID = new KnownCode(15500, "Invalid signon", 2 /* ERROR */);
                    KnownCode.CUSTOMER_ACCOUNT_IN_USE = new KnownCode(15501, "Customer account in use.", 2 /* ERROR */);
                    KnownCode.PASSWORD_LOCKED = new KnownCode(15502, "Password locked.", 2 /* ERROR */);
                    KnownCode.INVALID_CLIENT_UID = new KnownCode(15510, "Invalid client UID.", 2 /* ERROR */);
                    KnownCode.CONTACT_FI = new KnownCode(15511, "User must contact FI.", 2 /* ERROR */);
                    KnownCode.AUTHTOKEN_REQUIRED = new KnownCode(15512, "Auth token required.", 2 /* ERROR */);
                    KnownCode.INVALID_AUTHTOKEN = new KnownCode(15513, "Invalid auth token.", 2 /* ERROR */);
                    KnownCode.NO_DATA = new KnownCode(14701, "No Tax Data for Account.", 2 /* ERROR */);
                    KnownCode.DB_EXCEPTION = new KnownCode(14702, "Database error has occured.", 2 /* ERROR */);
                    KnownCode.NO_TAXSUPPORT = new KnownCode(14703, "This Tax Year is not supported.", 2 /* ERROR */);
                    KnownCode.KnownCodes = [
                        KnownCode.SUCCESS,
                        KnownCode.CLIENT_UP_TO_DATE,
                        KnownCode.GENERAL_ERROR,
                        KnownCode.GENERAL_ACCOUNT_ERROR,
                        KnownCode.ACCOUNT_NOT_FOUND,
                        KnownCode.ACCOUNT_CLOSED,
                        KnownCode.ACCOUNT_NOT_AUTHORIZED,
                        KnownCode.DATE_TOO_SOON,
                        KnownCode.DUPLICATE_REQUEST,
                        KnownCode.UNSUPPORTED_VERSION,
                        KnownCode.INVALID_TAN,
                        KnownCode.MFA_CHALLENGE_REQUIRED,
                        KnownCode.MFA_CHALLENGE_FAILED,
                        KnownCode.PASSWORD_CHANGE_REQUIRED,
                        KnownCode.SIGNON_INVALID,
                        KnownCode.CUSTOMER_ACCOUNT_IN_USE,
                        KnownCode.PASSWORD_LOCKED,
                        KnownCode.INVALID_CLIENT_UID,
                        KnownCode.CONTACT_FI,
                        KnownCode.AUTHTOKEN_REQUIRED,
                        KnownCode.INVALID_AUTHTOKEN,
                        KnownCode.NO_DATA,
                        KnownCode.DB_EXCEPTION,
                        KnownCode.NO_TAXSUPPORT,
                    ];
                    return KnownCode;
                })(common.StatusCode);
                common.KnownCode = KnownCode;
                /**
                 * Transaction status element.
                 *
                 * @author Ryan Heaton
                 * @see "Section 3.1.4, OFX Spec"
                 */
                var Status = (function () {
                    function Status() {
                        this.code = KnownCode.SUCCESS;
                        this.severity = undefined;
                    }
                    /**
                     * Status code.
                     *
                     * @return The status code.
                     */
                    Status.prototype.getCode = function () {
                        return this.code;
                    };
                    /**
                     * Status code.
                     *
                     * @param code Status code.
                     */
                    Status.prototype.setCode = function (code) {
                        this.code = code;
                        if (typeof this.severity === 'undefined') {
                            this.severity = code.getDefaultSeverity();
                        }
                    };
                    /**
                     * The severity.
                     *
                     * @return The severity.
                     */
                    Status.prototype.getSeverity = function () {
                        return this.severity;
                    };
                    /**
                     * The severity.
                     *
                     * @param severity The severity.
                     */
                    Status.prototype.setSeverity = function (severity) {
                        this.severity = severity;
                    };
                    /**
                     * Server-supplied message.
                     *
                     * @return Server-supplied message.
                     */
                    Status.prototype.getMessage = function () {
                        return this.message;
                    };
                    /**
                     * Server-supplied message.
                     *
                     * @param message Server-supplied message.
                     */
                    Status.prototype.setMessage = function (message) {
                        this.message = message;
                    };
                    return Status;
                })();
                common.Status = Status;
                Aggregate_add(Status, "STATUS");
                Element_add(Status, { name: "CODE", required: true, order: 0, type: common.StatusCode, read: Status.prototype.getCode, write: Status.prototype.setCode });
                Element_add(Status, { name: "SEVERITY", required: true, order: 10, type: Severity, read: Status.prototype.getSeverity, write: Status.prototype.setSeverity });
                Element_add(Status, { name: "MESSAGE", order: 20, type: String, read: Status.prototype.getMessage, write: Status.prototype.setMessage });
            })(common = data.common || (data.common = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='domain/data/common/Status'/>
var ofx4js;
(function (ofx4js) {
    /**
     * Exception based on a StatusCode response
     *
     * @author Michael Mosseri
     */
    var OFXStatusException = (function (_super) {
        __extends(OFXStatusException, _super);
        function OFXStatusException(status, message) {
            _super.call(this, message);
            this.status = status;
        }
        OFXStatusException.prototype.getStatus = function () {
            return this.status;
        };
        return OFXStatusException;
    })(ofx4js.OFXException);
    ofx4js.OFXStatusException = OFXStatusException;
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    /**
     * @author Ryan Heaton
     */
    var OFXTransactionException = (function (_super) {
        __extends(OFXTransactionException, _super);
        function OFXTransactionException(message) {
            if (message === void 0) { message = null; }
            _super.call(this, message);
        }
        return OFXTransactionException;
    })(ofx4js.OFXException);
    ofx4js.OFXTransactionException = OFXTransactionException;
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    /**
     * Thrown for unsupported OFX security type.
     *
     * @author Ryan Heaton
     */
    var UnsupportedOFXSecurityTypeException = (function (_super) {
        __extends(UnsupportedOFXSecurityTypeException, _super);
        function UnsupportedOFXSecurityTypeException(message) {
            _super.call(this, message);
        }
        return UnsupportedOFXSecurityTypeException;
    })(ofx4js.OFXException);
    ofx4js.UnsupportedOFXSecurityTypeException = UnsupportedOFXSecurityTypeException;
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/Element_add'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var common;
            (function (common) {
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                /**
                 * @author Ryan Heaton
                 */
                var BalanceInfo = (function () {
                    function BalanceInfo() {
                    }
                    /**
                     * The amount.
                     *
                     * @return The amount.
                     */
                    BalanceInfo.prototype.getAmount = function () {
                        return this.amount;
                    };
                    /**
                     * The amount.
                     *
                     * @param amount The amount.
                     */
                    BalanceInfo.prototype.setAmount = function (amount) {
                        this.amount = amount;
                    };
                    /**
                     * The as-of date.
                     *
                     * @return The as-of date.
                     */
                    BalanceInfo.prototype.getAsOfDate = function () {
                        return this.asOfDate;
                    };
                    /**
                     * The as-of date.
                     *
                     * @param asOfDate The as-of date.
                     */
                    BalanceInfo.prototype.setAsOfDate = function (asOfDate) {
                        this.asOfDate = asOfDate;
                    };
                    return BalanceInfo;
                })();
                common.BalanceInfo = BalanceInfo;
                Aggregate_add(BalanceInfo);
                Element_add(BalanceInfo, { name: "BALAMT", required: true, order: 0, type: Number, read: BalanceInfo.prototype.getAmount, write: BalanceInfo.prototype.setAmount });
                Element_add(BalanceInfo, { name: "DTASOF", required: true, order: 10, type: Date, read: BalanceInfo.prototype.getAsOfDate, write: BalanceInfo.prototype.setAsOfDate });
            })(common = data.common || (data.common = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../io/AggregateIntrospector'/>
///<reference path='PropertyDescriptor'/>
var ofx4js;
(function (ofx4js) {
    var meta;
    (function (meta) {
        var AggregateIntrospector = ofx4js.io.AggregateIntrospector;
        function ChildAggregate_add(clazz, params) {
            console.assert(params.type != null);
            AggregateIntrospector.addChildAggregate(clazz, new meta.ChildAggregate(params));
        }
        meta.ChildAggregate_add = ChildAggregate_add;
    })(meta = ofx4js.meta || (ofx4js.meta = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var banking;
            (function (banking) {
                /**
                 * @author Ryan Heaton
                 *
                 * @see "OFX Spec, Section 11.3.1.1"
                 */
                (function (AccountType) {
                    AccountType[AccountType["CHECKING"] = 0] = "CHECKING";
                    AccountType[AccountType["SAVINGS"] = 1] = "SAVINGS";
                    AccountType[AccountType["MONEYMRKT"] = 2] = "MONEYMRKT";
                    AccountType[AccountType["CREDITLINE"] = 3] = "CREDITLINE";
                })(banking.AccountType || (banking.AccountType = {}));
                var AccountType = banking.AccountType;
            })(banking = data.banking || (data.banking = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/Element_add'/>
///<reference path='../common/AccountDetails'/>
///<reference path='AccountType'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var banking;
            (function (banking) {
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                /**
                 * Base bank account details.
                 *
                 * @author Ryan Heaton
                 * @see "OFX Spec, Section 11.3.1"
                 */
                var BankAccountDetails = (function () {
                    function BankAccountDetails() {
                    }
                    /**
                     * The routing and transit number.
                     *
                     * @return The routing and transit number.
                     */
                    BankAccountDetails.prototype.getBankId = function () {
                        return this.bankId;
                    };
                    /**
                     * The routing and transit number.
                     *
                     * @param bankId The routing and transit number.
                     */
                    BankAccountDetails.prototype.setBankId = function (bankId) {
                        this.bankId = bankId;
                    };
                    /**
                     * The routing and transit number.
                     *
                     * @return The routing and transit number.
                     */
                    BankAccountDetails.prototype.getRoutingNumber = function () {
                        return this.getBankId();
                    };
                    /**
                     * The routing and transit number.
                     *
                     * @param routingNumber The routing and transit number.
                     */
                    BankAccountDetails.prototype.setRoutingNumber = function (routingNumber) {
                        this.setBankId(routingNumber);
                    };
                    /**
                     * The branch id.
                     *
                     * @return The branch id.
                     */
                    BankAccountDetails.prototype.getBranchId = function () {
                        return this.branchId;
                    };
                    /**
                     * The branch id.
                     *
                     * @param branchId The branch id.
                     */
                    BankAccountDetails.prototype.setBranchId = function (branchId) {
                        this.branchId = branchId;
                    };
                    /**
                     * The account number.
                     *
                     * @return The account number.
                     */
                    BankAccountDetails.prototype.getAccountNumber = function () {
                        return this.accountNumber;
                    };
                    /**
                     * The account number.
                     *
                     * @param accountNumber The account number.
                     */
                    BankAccountDetails.prototype.setAccountNumber = function (accountNumber) {
                        this.accountNumber = accountNumber;
                    };
                    /**
                     * The account type.
                     *
                     * @return The account type.
                     */
                    BankAccountDetails.prototype.getAccountType = function () {
                        return this.accountType;
                    };
                    /**
                     * The account type.
                     *
                     * @param accountType The account type.
                     */
                    BankAccountDetails.prototype.setAccountType = function (accountType) {
                        this.accountType = accountType;
                    };
                    /**
                     * The account key.
                     *
                     * @return The account key.
                     */
                    BankAccountDetails.prototype.getAccountKey = function () {
                        return this.accountKey;
                    };
                    /**
                     * The account key.
                     *
                     * @param accountKey The account key.
                     */
                    BankAccountDetails.prototype.setAccountKey = function (accountKey) {
                        this.accountKey = accountKey;
                    };
                    return BankAccountDetails;
                })();
                banking.BankAccountDetails = BankAccountDetails;
                Aggregate_add(BankAccountDetails);
                Element_add(BankAccountDetails, { name: "BANKID", required: true, order: 0, type: String, read: BankAccountDetails.prototype.getBankId, write: BankAccountDetails.prototype.setBankId });
                Element_add(BankAccountDetails, { name: "BRANCHID", order: 10, type: String, read: BankAccountDetails.prototype.getBranchId, write: BankAccountDetails.prototype.setBranchId });
                Element_add(BankAccountDetails, { name: "ACCTID", required: true, order: 20, type: String, read: BankAccountDetails.prototype.getAccountNumber, write: BankAccountDetails.prototype.setAccountNumber });
                Element_add(BankAccountDetails, { name: "ACCTTYPE", required: true, order: 30, type: banking.AccountType, read: BankAccountDetails.prototype.getAccountType, write: BankAccountDetails.prototype.setAccountType });
                Element_add(BankAccountDetails, { name: "ACCTKEY", order: 40, type: String, read: BankAccountDetails.prototype.getAccountKey, write: BankAccountDetails.prototype.setAccountKey });
            })(banking = data.banking || (data.banking = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/Element_add'/>
///<reference path='../common/AccountDetails'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var creditcard;
            (function (creditcard) {
                var Element_add = ofx4js.meta.Element_add;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                /**
                 * @author Ryan Heaton
                 *
                 * @see "OFX Spec, Section 11.3.2"
                 */
                var CreditCardAccountDetails = (function () {
                    function CreditCardAccountDetails() {
                    }
                    /**
                     * The account number.
                     *
                     * @return The account number.
                     */
                    CreditCardAccountDetails.prototype.getAccountNumber = function () {
                        return this.accountNumber;
                    };
                    /**
                     * The account number.
                     *
                     * @param accountNumber The account number.
                     */
                    CreditCardAccountDetails.prototype.setAccountNumber = function (accountNumber) {
                        this.accountNumber = accountNumber;
                    };
                    /**
                     * The account key.
                     *
                     * @return The account key.
                     */
                    CreditCardAccountDetails.prototype.getAccountKey = function () {
                        return this.accountKey;
                    };
                    /**
                     * The account key.
                     *
                     * @param accountKey The account key.
                     */
                    CreditCardAccountDetails.prototype.setAccountKey = function (accountKey) {
                        this.accountKey = accountKey;
                    };
                    return CreditCardAccountDetails;
                })();
                creditcard.CreditCardAccountDetails = CreditCardAccountDetails;
                Aggregate_add(CreditCardAccountDetails);
                Element_add(CreditCardAccountDetails, { name: "ACCTID", required: true, order: 0, type: String, read: CreditCardAccountDetails.prototype.getAccountNumber, write: CreditCardAccountDetails.prototype.setAccountNumber });
                Element_add(CreditCardAccountDetails, { name: "ACCKEY", order: 10, type: String, read: CreditCardAccountDetails.prototype.getAccountKey, write: CreditCardAccountDetails.prototype.setAccountKey });
            })(creditcard = data.creditcard || (data.creditcard = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var common;
            (function (common) {
                /**
                 * @author Ryan Heaton
                 */
                (function (CorrectionAction) {
                    CorrectionAction[CorrectionAction["REPLACE"] = 0] = "REPLACE";
                    CorrectionAction[CorrectionAction["DELETE"] = 1] = "DELETE";
                })(common.CorrectionAction || (common.CorrectionAction = {}));
                var CorrectionAction = common.CorrectionAction;
            })(common = data.common || (data.common = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/Element_add'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var common;
            (function (common) {
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                /**
                 * @author Ryan Heaton
                 * @see "Section 5.2, OFX Spec"
                 */
                var Currency = (function () {
                    function Currency() {
                        this.code = "USD"; //java.util.Currency.getInstance(Locale.US).getCurrencyCode().toUpperCase();
                    }
                    /**
                     * The currency code.
                     *
                     * @return The currency code.
                     * @see java.util.Currency#getCurrencyCode()
                     */
                    Currency.prototype.getCode = function () {
                        return this.code;
                    };
                    /**
                     * The currency code
                     *
                     * @param code The currency code
                     */
                    Currency.prototype.setCode = function (code) {
                        this.code = code;
                    };
                    /**
                     * The exchange rate.
                     *
                     * @return The exchange rate.
                     */
                    Currency.prototype.getExchangeRate = function () {
                        return this.exchangeRate;
                    };
                    /**
                     * The exchange rate.
                     *
                     * @param exchangeRate The exchange rate.
                     */
                    Currency.prototype.setExchangeRate = function (exchangeRate) {
                        this.exchangeRate = exchangeRate;
                    };
                    return Currency;
                })();
                common.Currency = Currency;
                Aggregate_add(Currency, "CURRENCY");
                Element_add(Currency, { name: "CURSYM", required: true, order: 0, type: String, read: Currency.prototype.getCode, write: Currency.prototype.setCode });
                Element_add(Currency, { name: "CURRATE", required: true, order: 10, type: Number, read: Currency.prototype.getExchangeRate, write: Currency.prototype.setExchangeRate });
            })(common = data.common || (data.common = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/Element_add'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var common;
            (function (common) {
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                /**
                 * @author Ryan Heaton
                 */
                var Payee = (function () {
                    function Payee() {
                    }
                    /**
                     * The name of the payee.
                     *
                     * @return The name of the payee.
                     */
                    Payee.prototype.getName = function () {
                        return this.name;
                    };
                    /**
                     * The name of the payee.
                     *
                     * @param name The name of the payee.
                     */
                    Payee.prototype.setName = function (name) {
                        this.name = name;
                    };
                    /**
                     * The address of the payee.
                     *
                     * @return The address of the payee.
                     */
                    Payee.prototype.getAddress1 = function () {
                        return this.address1;
                    };
                    /**
                     * The address of the payee.
                     *
                     * @param address1 The address of the payee.
                     */
                    Payee.prototype.setAddress1 = function (address1) {
                        this.address1 = address1;
                    };
                    /**
                     * The address of the payee.
                     *
                     * @return The address of the payee.
                     */
                    Payee.prototype.getAddress2 = function () {
                        return this.address2;
                    };
                    /**
                     * The address of the payee.
                     *
                     * @param address2 The address of the payee.
                     */
                    Payee.prototype.setAddress2 = function (address2) {
                        this.address2 = address2;
                    };
                    /**
                     * The address of the payee.
                     *
                     * @return The address of the payee.
                     */
                    Payee.prototype.getAddress3 = function () {
                        return this.address3;
                    };
                    /**
                     * The address of the payee.
                     *
                     * @param address3 The address of the payee.
                     */
                    Payee.prototype.setAddress3 = function (address3) {
                        this.address3 = address3;
                    };
                    /**
                     * The city of the payee.
                     *
                     * @return The city of the payee.
                     */
                    Payee.prototype.getCity = function () {
                        return this.city;
                    };
                    /**
                     * The city of the payee.
                     *
                     * @param city The city of the payee.
                     */
                    Payee.prototype.setCity = function (city) {
                        this.city = city;
                    };
                    /**
                     * The state of this payee.
                     *
                     * @return The state of this payee.
                     */
                    Payee.prototype.getState = function () {
                        return this.state;
                    };
                    /**
                     * The state of this payee.
                     *
                     * @param state The state of this payee.
                     */
                    Payee.prototype.setState = function (state) {
                        this.state = state;
                    };
                    /**
                     * The postal code of this payee.
                     *
                     * @return The postal code of this payee.
                     */
                    Payee.prototype.getZip = function () {
                        return this.zip;
                    };
                    /**
                     * The postal code of this payee.
                     *
                     * @param zip The postal code of this payee.
                     */
                    Payee.prototype.setZip = function (zip) {
                        this.zip = zip;
                    };
                    /**
                     * The country code for this payee.
                     *
                     * @return The country code for this payee.
                     * @see java.util.Locale#getISO3Country()
                     */
                    Payee.prototype.getCountry = function () {
                        return this.country;
                    };
                    /**
                     * The country code for this payee.
                     *
                     * @param country The country code for this payee.
                     */
                    Payee.prototype.setCountry = function (country) {
                        this.country = country;
                    };
                    /**
                     * The phone number.
                     *
                     * @return The phone number.
                     */
                    Payee.prototype.getPhone = function () {
                        return this.phone;
                    };
                    /**
                     * The phone number.
                     *
                     * @param phone The phone number.
                     */
                    Payee.prototype.setPhone = function (phone) {
                        this.phone = phone;
                    };
                    return Payee;
                })();
                common.Payee = Payee;
                Aggregate_add(Payee, "PAYEE");
                Element_add(Payee, { name: "NAME", order: 30, type: String, read: Payee.prototype.getName, write: Payee.prototype.setName });
                Element_add(Payee, { name: "ADDR1", required: true, order: 40, type: String, read: Payee.prototype.getAddress1, write: Payee.prototype.setAddress1 });
                Element_add(Payee, { name: "ADDR2", order: 50, type: String, read: Payee.prototype.getAddress2, write: Payee.prototype.setAddress2 });
                Element_add(Payee, { name: "ADDR3", order: 60, type: String, read: Payee.prototype.getAddress3, write: Payee.prototype.setAddress3 });
                Element_add(Payee, { name: "CITY", required: true, order: 70, type: String, read: Payee.prototype.getCity, write: Payee.prototype.setCity });
                Element_add(Payee, { name: "STATE", required: true, order: 80, type: String, read: Payee.prototype.getState, write: Payee.prototype.setState });
                Element_add(Payee, { name: "POSTALCODE", required: true, order: 90, type: String, read: Payee.prototype.getZip, write: Payee.prototype.setZip });
                Element_add(Payee, { name: "COUNTRY", required: true, order: 100, type: String, read: Payee.prototype.getCountry, write: Payee.prototype.setCountry });
                Element_add(Payee, { name: "PHONE", order: 110, type: String, read: Payee.prototype.getPhone, write: Payee.prototype.setPhone });
            })(common = data.common || (data.common = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var common;
            (function (common) {
                /**
                 * @author Ryan Heaton
                 */
                (function (TransactionType) {
                    /**
                     * generic credit.
                     */
                    TransactionType[TransactionType["CREDIT"] = 0] = "CREDIT";
                    /**
                     * genertic debit.
                     */
                    TransactionType[TransactionType["DEBIT"] = 1] = "DEBIT";
                    /**
                     * interest earned.
                     */
                    TransactionType[TransactionType["INT"] = 2] = "INT";
                    /**
                     * dividend.
                     */
                    TransactionType[TransactionType["DIV"] = 3] = "DIV";
                    /**
                     * bank fee.
                     */
                    TransactionType[TransactionType["FEE"] = 4] = "FEE";
                    /**
                     * service charge.
                     */
                    TransactionType[TransactionType["SRVCHG"] = 5] = "SRVCHG";
                    /**
                     * deposit.
                     */
                    TransactionType[TransactionType["DEP"] = 6] = "DEP";
                    /**
                     * ATM transaction.
                     */
                    TransactionType[TransactionType["ATM"] = 7] = "ATM";
                    /**
                     * point of sale
                     */
                    TransactionType[TransactionType["POS"] = 8] = "POS";
                    /**
                     * transfer
                     */
                    TransactionType[TransactionType["XFER"] = 9] = "XFER";
                    /**
                     * check
                     */
                    TransactionType[TransactionType["CHECK"] = 10] = "CHECK";
                    /**
                     * electronic payment
                     */
                    TransactionType[TransactionType["PAYMENT"] = 11] = "PAYMENT";
                    /**
                     * cash.
                     */
                    TransactionType[TransactionType["CASH"] = 12] = "CASH";
                    /**
                     * direct deposit.
                     */
                    TransactionType[TransactionType["DIRECTDEP"] = 13] = "DIRECTDEP";
                    /**
                     * merchant-initiated debit
                     */
                    TransactionType[TransactionType["DIRECTDEBIT"] = 14] = "DIRECTDEBIT";
                    /**
                     * repeating payment.
                     */
                    TransactionType[TransactionType["REPEATPMT"] = 15] = "REPEATPMT";
                    /**
                     * other
                     */
                    TransactionType[TransactionType["OTHER"] = 16] = "OTHER";
                })(common.TransactionType || (common.TransactionType = {}));
                var TransactionType = common.TransactionType;
            })(common = data.common || (data.common = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../project.d.ts'/>
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/Element_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../banking/BankAccountDetails'/>
///<reference path='../creditcard/CreditCardAccountDetails'/>
///<reference path='CorrectionAction'/>
///<reference path='Currency'/>
///<reference path='Payee'/>
///<reference path='TransactionType'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var common;
            (function (common) {
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                var BankAccountDetails = ofx4js.domain.data.banking.BankAccountDetails;
                var CreditCardAccountDetails = ofx4js.domain.data.creditcard.CreditCardAccountDetails;
                /**
                 * @author Ryan Heaton
                 */
                var Transaction = (function () {
                    function Transaction() {
                    }
                    /**
                     * The transaction type.
                     *
                     * @return The transaction type.
                     */
                    Transaction.prototype.getTransactionType = function () {
                        return this.transactionType;
                    };
                    /**
                     * The transaction type.
                     *
                     * @param transactionType The transaction type.
                     */
                    Transaction.prototype.setTransactionType = function (transactionType) {
                        this.transactionType = transactionType;
                    };
                    /**
                     * The date the transaction was posted.
                     *
                     * @return The date the transaction was posted.
                     */
                    Transaction.prototype.getDatePosted = function () {
                        return this.datePosted;
                    };
                    /**
                     * The date the transaction was posted.
                     *
                     * @param datePosted The date the transaction was posted.
                     */
                    Transaction.prototype.setDatePosted = function (datePosted) {
                        this.datePosted = datePosted;
                    };
                    /**
                     * The date the transaction was initiated.
                     *
                     * @return The date the transaction was initiated.
                     */
                    Transaction.prototype.getDateInitiated = function () {
                        return this.dateInitiated;
                    };
                    /**
                     * The date the transaction was initiated.
                     *
                     * @param dateInitiated The date the transaction was initiated.
                     */
                    Transaction.prototype.setDateInitiated = function (dateInitiated) {
                        this.dateInitiated = dateInitiated;
                    };
                    /**
                     * The date the funds are available.
                     *
                     * @return The date the funds are available.
                     */
                    Transaction.prototype.getDateAvailable = function () {
                        return this.dateAvailable;
                    };
                    /**
                     * The date the funds are available.
                     *
                     * @param dateAvailable The date the funds are available.
                     */
                    Transaction.prototype.setDateAvailable = function (dateAvailable) {
                        this.dateAvailable = dateAvailable;
                    };
                    /**
                     * The transaction amount.
                     *
                     * @return The transaction amount.
                     */
                    Transaction.prototype.getAmount = function () {
                        return this.amount;
                    };
                    /**
                     * The transaction amount.
                     *
                     * @param amount The transaction amount.
                     */
                    Transaction.prototype.setAmount = function (amount) {
                        this.amount = amount;
                    };
                    /**
                     * The transaction amount.
                     *
                     * @return The transaction amount.
                     */
                    Transaction.prototype.getBigDecimalAmount = function () {
                        return this.amount;
                    };
                    /**
                     * The transaction amount.
                     *
                     * @param amount The transaction amount.
                     */
                    Transaction.prototype.setBigDecimalAmount = function (amount) {
                        this.amount = amount;
                    };
                    /**
                     * The transaction id (server-assigned).
                     *
                     * @return The transaction id (server-assigned).
                     */
                    Transaction.prototype.getId = function () {
                        return this.id;
                    };
                    /**
                     * The transaction id (server-assigned).
                     *
                     * @param id The transaction id (server-assigned).
                     */
                    Transaction.prototype.setId = function (id) {
                        this.id = id;
                    };
                    /**
                     * The id of the transaction that this is correcting.
                     *
                     * @return The id of the transaction that this is correcting.
                     */
                    Transaction.prototype.getCorrectionId = function () {
                        return this.correctionId;
                    };
                    /**
                     * The id of the transaction that this is correcting.
                     *
                     * @param correctionId The id of the transaction that this is correcting.
                     */
                    Transaction.prototype.setCorrectionId = function (correctionId) {
                        this.correctionId = correctionId;
                    };
                    /**
                     * The action to take on the {@link #getCorrectionId() corrected transaction}.
                     *
                     * @return The action to take on the {@link #getCorrectionId() corrected transaction}.
                     */
                    Transaction.prototype.getCorrectionAction = function () {
                        return this.correctionAction;
                    };
                    /**
                     * The action to take on the {@link #getCorrectionId() corrected transaction}.
                     *
                     * @param correctionAction The action to take on the {@link #getCorrectionId() corrected transaction}.
                     */
                    Transaction.prototype.setCorrectionAction = function (correctionAction) {
                        this.correctionAction = correctionAction;
                    };
                    /**
                     * The server-assigned temporary id for client-initiated transactions.
                     *
                     * @return The server-assigned temporary id for client-initiated transactions.
                     */
                    Transaction.prototype.getTempId = function () {
                        return this.tempId;
                    };
                    /**
                     * The server-assigned temporary id for client-initiated transactions.
                     *
                     * @param tempId The server-assigned temporary id for client-initiated transactions.
                     */
                    Transaction.prototype.setTempId = function (tempId) {
                        this.tempId = tempId;
                    };
                    /**
                     * The check number.
                     *
                     * @return The check number.
                     */
                    Transaction.prototype.getCheckNumber = function () {
                        return this.checkNumber;
                    };
                    /**
                     * The check number.
                     *
                     * @param checkNumber The check number.
                     */
                    Transaction.prototype.setCheckNumber = function (checkNumber) {
                        this.checkNumber = checkNumber;
                    };
                    /**
                     * The reference number.
                     *
                     * @return The reference number.
                     */
                    Transaction.prototype.getReferenceNumber = function () {
                        return this.referenceNumber;
                    };
                    /**
                     * The reference number.
                     *
                     * @param referenceNumber The reference number.
                     */
                    Transaction.prototype.setReferenceNumber = function (referenceNumber) {
                        this.referenceNumber = referenceNumber;
                    };
                    /**
                     * The standard industrial code.
                     *
                     * @return The standard industrial code.
                     */
                    Transaction.prototype.getStandardIndustrialCode = function () {
                        return this.standardIndustrialCode;
                    };
                    /**
                     * The standard industrial code.
                     *
                     * @param standardIndustrialCode The standard industrial code.
                     */
                    Transaction.prototype.setStandardIndustrialCode = function (standardIndustrialCode) {
                        this.standardIndustrialCode = standardIndustrialCode;
                    };
                    /**
                     * The payee id.
                     *
                     * @return The payee id.
                     */
                    Transaction.prototype.getPayeeId = function () {
                        return this.payeeId;
                    };
                    /**
                     * The payee id.
                     *
                     * @param payeeId The payee id.
                     */
                    Transaction.prototype.setPayeeId = function (payeeId) {
                        this.payeeId = payeeId;
                    };
                    /**
                     * The name (description) or the transaction.
                     *
                     * @return The name (description) or the transaction.
                     */
                    Transaction.prototype.getName = function () {
                        return this.name;
                    };
                    /**
                     * The name (description) or the transaction.
                     *
                     * @param name The name (description) or the transaction.
                     */
                    Transaction.prototype.setName = function (name) {
                        this.name = name;
                    };
                    /**
                     * The payee.
                     *
                     * @return The payee.
                     */
                    Transaction.prototype.getPayee = function () {
                        return this.payee;
                    };
                    /**
                     * The payee.
                     *
                     * @param payee The payee.
                     */
                    Transaction.prototype.setPayee = function (payee) {
                        this.payee = payee;
                    };
                    /**
                     * The bank account the transfer was to.
                     *
                     * @return The bank account the transfer was to.
                     */
                    Transaction.prototype.getBankAccountTo = function () {
                        return this.bankAccountTo;
                    };
                    /**
                     * The bank account the transfer was to.
                     *
                     * @param bankAccountTo The bank account the transfer was to.
                     */
                    Transaction.prototype.setBankAccountTo = function (bankAccountTo) {
                        this.bankAccountTo = bankAccountTo;
                    };
                    /**
                     * The credit-card account the transfer was to.
                     *
                     * @return The credit-card account the transfer was to.
                     */
                    Transaction.prototype.getCreditCardAccountTo = function () {
                        return this.creditCardAccountTo;
                    };
                    /**
                     * The credit-card account the transfer was to.
                     *
                     * @param creditCardAccountTo The credit-card account the transfer was to.
                     */
                    Transaction.prototype.setCreditCardAccountTo = function (creditCardAccountTo) {
                        this.creditCardAccountTo = creditCardAccountTo;
                    };
                    /**
                     * Notes.
                     *
                     * @return Notes.
                     */
                    Transaction.prototype.getMemo = function () {
                        return this.memo;
                    };
                    /**
                     * Notes.
                     *
                     * @param memo Notes.
                     */
                    Transaction.prototype.setMemo = function (memo) {
                        this.memo = memo;
                    };
                    /**
                     * The currency.
                     *
                     * @return The currency.
                     */
                    Transaction.prototype.getCurrency = function () {
                        return this.currency;
                    };
                    /**
                     * The currency.
                     *
                     * @param currency The currency.
                     */
                    Transaction.prototype.setCurrency = function (currency) {
                        this.currency = currency;
                    };
                    /**
                     * The original currency.
                     *
                     * @return The original currency.
                     */
                    Transaction.prototype.getOriginalCurrency = function () {
                        return this.originalCurrency;
                    };
                    /**
                     * The original currency.
                     *
                     * @param originalCurrency The original currency.
                     */
                    Transaction.prototype.setOriginalCurrency = function (originalCurrency) {
                        this.originalCurrency = originalCurrency;
                    };
                    return Transaction;
                })();
                common.Transaction = Transaction;
                Aggregate_add(Transaction, "STMTTRN");
                Element_add(Transaction, { name: "TRNTYPE", required: true, order: 0, type: common.TransactionType, read: Transaction.prototype.getTransactionType, write: Transaction.prototype.setTransactionType });
                Element_add(Transaction, { name: "DTPOSTED", required: true, order: 10, type: Date, read: Transaction.prototype.getDatePosted, write: Transaction.prototype.setDatePosted });
                Element_add(Transaction, { name: "DTUSER", order: 20, type: Date, read: Transaction.prototype.getDateInitiated, write: Transaction.prototype.setDateInitiated });
                Element_add(Transaction, { name: "DTAVAIL", order: 30, type: Date, read: Transaction.prototype.getDateAvailable, write: Transaction.prototype.setDateAvailable });
                Element_add(Transaction, { name: "TRNAMT", required: true, order: 40, type: Number, read: Transaction.prototype.getBigDecimalAmount, write: Transaction.prototype.setBigDecimalAmount });
                Element_add(Transaction, { name: "FITID", required: true, order: 50, type: String, read: Transaction.prototype.getId, write: Transaction.prototype.setId });
                Element_add(Transaction, { name: "CORRECTFITID", order: 60, type: String, read: Transaction.prototype.getCorrectionId, write: Transaction.prototype.setCorrectionId });
                Element_add(Transaction, { name: "CORRECTACTION", order: 70, type: common.CorrectionAction, read: Transaction.prototype.getCorrectionAction, write: Transaction.prototype.setCorrectionAction });
                Element_add(Transaction, { name: "SRVRTID", order: 80, type: String, read: Transaction.prototype.getTempId, write: Transaction.prototype.setTempId });
                Element_add(Transaction, { name: "CHECKNUM", order: 90, type: String, read: Transaction.prototype.getCheckNumber, write: Transaction.prototype.setCheckNumber });
                Element_add(Transaction, { name: "REFNUM", order: 100, type: String, read: Transaction.prototype.getReferenceNumber, write: Transaction.prototype.setReferenceNumber });
                Element_add(Transaction, { name: "SIC", order: 110, type: String, read: Transaction.prototype.getStandardIndustrialCode, write: Transaction.prototype.setStandardIndustrialCode });
                Element_add(Transaction, { name: "PAYEEID", order: 120, type: String, read: Transaction.prototype.getPayeeId, write: Transaction.prototype.setPayeeId });
                Element_add(Transaction, { name: "NAME", order: 130, type: String, read: Transaction.prototype.getName, write: Transaction.prototype.setName });
                ChildAggregate_add(Transaction, { order: 140, type: common.Payee, read: Transaction.prototype.getPayee, write: Transaction.prototype.setPayee });
                ChildAggregate_add(Transaction, { name: "BANKACCTTO", order: 150, type: BankAccountDetails, read: Transaction.prototype.getBankAccountTo, write: Transaction.prototype.setBankAccountTo });
                ChildAggregate_add(Transaction, { name: "CCACCTTO", order: 160, type: CreditCardAccountDetails, read: Transaction.prototype.getCreditCardAccountTo, write: Transaction.prototype.setCreditCardAccountTo });
                Element_add(Transaction, { name: "MEMO", order: 170, type: String, read: Transaction.prototype.getMemo, write: Transaction.prototype.setMemo });
                ChildAggregate_add(Transaction, { order: 180, type: common.Currency, read: Transaction.prototype.getCurrency, write: Transaction.prototype.setCurrency });
                ChildAggregate_add(Transaction, { name: "ORIGCURRENCY", order: 190, type: common.Currency, read: Transaction.prototype.getOriginalCurrency, write: Transaction.prototype.setOriginalCurrency });
            })(common = data.common || (data.common = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/Element_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='Transaction'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var common;
            (function (common) {
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                //import java.util.Date;
                //import java.util.List;
                /**
                 * @author Ryan Heaton
                 */
                var TransactionList = (function () {
                    function TransactionList() {
                    }
                    /**
                     * The start date.
                     *
                     * @return The start date.
                     */
                    TransactionList.prototype.getStart = function () {
                        return this.start;
                    };
                    /**
                     * The start date.
                     *
                     * @param start The start date.
                     */
                    TransactionList.prototype.setStart = function (start) {
                        this.start = start;
                    };
                    /**
                     * The end date.
                     *
                     * @return The end date.
                     */
                    TransactionList.prototype.getEnd = function () {
                        return this.end;
                    };
                    /**
                     * The end date.
                     *
                     * @param end The end date.
                     */
                    TransactionList.prototype.setEnd = function (end) {
                        this.end = end;
                    };
                    /**
                     * The transaction list.
                     *
                     * @return The transaction list.
                     */
                    TransactionList.prototype.getTransactions = function () {
                        return this.transactions;
                    };
                    /**
                     * The transaction list.
                     *
                     * @param transactions The transaction list.
                     */
                    TransactionList.prototype.setTransactions = function (transactions) {
                        this.transactions = transactions;
                    };
                    return TransactionList;
                })();
                common.TransactionList = TransactionList;
                Aggregate_add(TransactionList, "BANKTRANLIST");
                Element_add(TransactionList, { name: "DTSTART", required: true, order: 0, type: Date, read: TransactionList.prototype.getStart, write: TransactionList.prototype.setStart });
                Element_add(TransactionList, { name: "DTEND", required: true, order: 10, type: Date, read: TransactionList.prototype.getEnd, write: TransactionList.prototype.setEnd });
                ChildAggregate_add(TransactionList, { order: 20, type: Array, collectionEntryType: common.Transaction, read: TransactionList.prototype.getTransactions, write: TransactionList.prototype.setTransactions });
            })(common = data.common || (data.common = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../domain/data/common/BalanceInfo'/>
///<reference path='../domain/data/common/TransactionList'/>
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../OFXException'/>
///<reference path='AccountStatement'/>
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../domain/data/banking/BankAccountDetails'/>
///<reference path='FinancialInstitutionAccount'/>
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../domain/data/creditcard/CreditCardAccountDetails'/>
///<reference path='FinancialInstitutionAccount'/>
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
///<reference path='../../common/AccountDetails'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var accounts;
                (function (accounts) {
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * Aggregate for the details that identifity a brokerage account.
                     *
                     * @author Jon Perlow
                     * @see "OFX Spec, Section 13.6.1"
                     */
                    var InvestmentAccountDetails = (function () {
                        function InvestmentAccountDetails() {
                        }
                        /**
                         * Gets the broker id.
                         *
                         * @return the id of the broker
                         */
                        InvestmentAccountDetails.prototype.getBrokerId = function () {
                            return this.brokerId;
                        };
                        /**
                         * Sets the broker id.
                         *
                         * @param brokerId the id of the broker
                         */
                        InvestmentAccountDetails.prototype.setBrokerId = function (brokerId) {
                            this.brokerId = brokerId;
                        };
                        /**
                         * Gets the account number.
                         *
                         * @return the account number
                         */
                        InvestmentAccountDetails.prototype.getAccountNumber = function () {
                            return this.accountNumber;
                        };
                        /**
                         * Sets the account number.
                         *
                         * @param accountNumber the account number
                         */
                        InvestmentAccountDetails.prototype.setAccountNumber = function (accountNumber) {
                            this.accountNumber = accountNumber;
                        };
                        /**
                         * Gets the account key.
                         *
                         * @return the account key
                         */
                        InvestmentAccountDetails.prototype.getAccountKey = function () {
                            return this.accountKey;
                        };
                        /**
                         * Sets the account key.
                         *
                         * @param accountKey the account key
                         */
                        InvestmentAccountDetails.prototype.setAccountKey = function (accountKey) {
                            this.accountKey = accountKey;
                        };
                        return InvestmentAccountDetails;
                    })();
                    accounts.InvestmentAccountDetails = InvestmentAccountDetails;
                    Aggregate_add(InvestmentAccountDetails);
                    Element_add(InvestmentAccountDetails, { name: "BROKERID", required: true, order: 0, type: String, read: InvestmentAccountDetails.prototype.getBrokerId, write: InvestmentAccountDetails.prototype.setBrokerId });
                    Element_add(InvestmentAccountDetails, { name: "ACCTID", required: true, order: 20, type: String, read: InvestmentAccountDetails.prototype.getAccountNumber, write: InvestmentAccountDetails.prototype.setAccountNumber });
                    Element_add(InvestmentAccountDetails, { name: "ACCTKEY", order: 40, type: String, read: InvestmentAccountDetails.prototype.getAccountKey, write: InvestmentAccountDetails.prototype.setAccountKey });
                })(accounts = investment.accounts || (investment.accounts = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='AccountDetails'/>
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var accounts;
                (function (accounts) {
                    /**
                     * Type of investment account.
                     *
                     * @author Jon Perlow
                     * @see "OFX Spec, Section 13.6.2"
                     */
                    (function (AccountType) {
                        AccountType[AccountType["INDIVIDUAL"] = 0] = "INDIVIDUAL";
                        AccountType[AccountType["JOINT"] = 1] = "JOINT";
                        AccountType[AccountType["TRUST"] = 2] = "TRUST";
                        AccountType[AccountType["CORPORATE"] = 3] = "CORPORATE";
                    })(accounts.AccountType || (accounts.AccountType = {}));
                    var AccountType = accounts.AccountType;
                    function AccountType_fromOfx(ofxVal) {
                        if ("INDIVIDUAL" === ofxVal) {
                            return 0 /* INDIVIDUAL */;
                        }
                        else if ("JOINT" === ofxVal) {
                            return 1 /* JOINT */;
                        }
                        else if ("CORPORATE" === ofxVal) {
                            return 3 /* CORPORATE */;
                        }
                        else if ("CORPORATE" === ofxVal) {
                            return 3 /* CORPORATE */;
                        }
                        else {
                            return null;
                        }
                    }
                    accounts.AccountType_fromOfx = AccountType_fromOfx;
                })(accounts = investment.accounts || (investment.accounts = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var accounts;
                (function (accounts) {
                    /**
                     * Activation status of an account.
                     * @see "Section 13.6.2, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    (function (ActivationStatus) {
                        ActivationStatus[ActivationStatus["ACTIVE"] = 0] = "ACTIVE";
                        ActivationStatus[ActivationStatus["PENDING"] = 1] = "PENDING";
                        ActivationStatus[ActivationStatus["AVAILABLE"] = 2] = "AVAILABLE";
                    })(accounts.ActivationStatus || (accounts.ActivationStatus = {}));
                    var ActivationStatus = accounts.ActivationStatus;
                    function ActivationStatus_fromOfx(ofxVal) {
                        if ("ACTIVE" === ofxVal) {
                            return 0 /* ACTIVE */;
                        }
                        else if ("PEND" === ofxVal) {
                            return 1 /* PENDING */;
                        }
                        else if ("AVAIL" === ofxVal) {
                            return 2 /* AVAILABLE */;
                        }
                        else {
                            return null;
                        }
                    }
                    accounts.ActivationStatus_fromOfx = ActivationStatus_fromOfx;
                })(accounts = investment.accounts || (investment.accounts = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var accounts;
                (function (accounts) {
                    //import java.util.HashMap;
                    //import java.util.Map;
                    /**
                     * @author Jon Perlow
                     * @see "OFX Spec, Section 13.6.2.1"
                     */
                    (function (UnitedStatesAccountType) {
                        /** A 401(k) retirement account */
                        UnitedStatesAccountType[UnitedStatesAccountType["R401K"] = 0] = "R401K";
                        /** A 403(B) retirement account */
                        UnitedStatesAccountType[UnitedStatesAccountType["R403B"] = 1] = "R403B";
                        /** An IRA retirement account */
                        UnitedStatesAccountType[UnitedStatesAccountType["IRA"] = 2] = "IRA";
                        /** Keough (money purchase/profit sharing) account */
                        UnitedStatesAccountType[UnitedStatesAccountType["KEOUGH"] = 3] = "KEOUGH";
                        /** Other account type */
                        UnitedStatesAccountType[UnitedStatesAccountType["OTHER"] = 4] = "OTHER";
                        /** Salary Reduction Employer Pension Plan */
                        UnitedStatesAccountType[UnitedStatesAccountType["SARSEP"] = 5] = "SARSEP";
                        /** Savings Incentive Match Plan for Employees*/
                        UnitedStatesAccountType[UnitedStatesAccountType["SIMPLE"] = 6] = "SIMPLE";
                        /** Regular investment account */
                        UnitedStatesAccountType[UnitedStatesAccountType["NORMAL"] = 7] = "NORMAL";
                        /** Tax Deferred Annuity */
                        UnitedStatesAccountType[UnitedStatesAccountType["TDA"] = 8] = "TDA";
                        /** Trust (including UTMA) */
                        UnitedStatesAccountType[UnitedStatesAccountType["TRUST"] = 9] = "TRUST";
                        /** Custodial account */
                        UnitedStatesAccountType[UnitedStatesAccountType["UGMA"] = 10] = "UGMA";
                    })(accounts.UnitedStatesAccountType || (accounts.UnitedStatesAccountType = {}));
                    var UnitedStatesAccountType = accounts.UnitedStatesAccountType;
                    var ofxMapping = {
                        "401K": 0 /* R401K */,
                        "403B": 1 /* R403B */,
                        "IRA": 2 /* IRA */,
                        "KEOUGH": 3 /* KEOUGH */,
                        "OTHER": 4 /* OTHER */,
                        "SARSEP": 5 /* SARSEP */,
                        "SIMPLE": 6 /* SIMPLE */,
                        "NORMAL": 7 /* NORMAL */,
                        "TDA": 8 /* TDA */,
                        "TRUST": 9 /* TRUST */,
                        "UGMA": 10 /* UGMA */,
                    };
                    function UnitedStatesAccountType_fromOfx(ofxVal) {
                        return ofxVal == null ? null : ofxMapping[ofxVal];
                    }
                    accounts.UnitedStatesAccountType_fromOfx = UnitedStatesAccountType_fromOfx;
                })(accounts = investment.accounts || (investment.accounts = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
///<reference path='../../common/AccountDetails'/>
///<reference path='../../common/AccountInfo'/>
///<reference path='AccountType'/>
///<reference path='ActivationStatus'/>
///<reference path='InvestmentAccountDetails'/>
///<reference path='UnitedStatesAccountType'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var accounts;
                (function (accounts) {
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * Aggregate for the info about a brokerage account.
                     *
                     * @author Jon Perlow
                     * @see "OFX Spec, Section 13.6.2"
                     */
                    var InvestmentAccountInfo = (function () {
                        function InvestmentAccountInfo() {
                        }
                        /**
                         * Gets the investment account this information is referencing.
                         *
                         * @return the investment account this information is referencing
                         */
                        InvestmentAccountInfo.prototype.getInvestmentAccount = function () {
                            return this.investmentAccount;
                        };
                        /**
                         * Sets the investment account this information is referencing. This is a required field
                         * according to the OFX spec.
                         *
                         * @param investmentAccount the investment account this information is referencing
                         */
                        InvestmentAccountInfo.prototype.setInvestmentAccount = function (investmentAccount) {
                            this.investmentAccount = investmentAccount;
                        };
                        // Inherited.
                        InvestmentAccountInfo.prototype.getAccountDetails = function () {
                            return this.getInvestmentAccount();
                        };
                        /**
                         * Gets the United States account type. This is a required field according to the OFX spec.
                         * @see "OFX Spec, Section 13.6.1"
                         *
                         * @return the United States account type
                         */
                        InvestmentAccountInfo.prototype.getUnitedStatesAccountType = function () {
                            return this.unitedStatesAccountType;
                        };
                        /**
                         * Sets United States account type. This is a required field according to the OFX spec.
                         * @see "OFX Spec, Section 13.6.1"
                         *
                         * @param unitedStatesAccountType the United States account type
                         */
                        InvestmentAccountInfo.prototype.setUnitedStatesAccountType = function (unitedStatesAccountType) {
                            this.unitedStatesAccountType = unitedStatesAccountType;
                        };
                        /**
                         * Gets the United States account type as one of the well-known types.
                         *
                         * @return the account type or null if it's not one of the well-known types
                         */
                        InvestmentAccountInfo.prototype.getUnitedStatesAccountTypeEnum = function () {
                            return accounts.UnitedStatesAccountType_fromOfx(this.unitedStatesAccountType);
                        };
                        /**
                         * Gets whether the account supports checking. This is a required field according to the OFX spec.
                         * @see "OFX Spec, Section 13.6.1"
                         *
                         * @return whether the account supports checking
                         */
                        InvestmentAccountInfo.prototype.getSupportsChecking = function () {
                            return this.supportsChecking;
                        };
                        /**
                         * Sets whether the account supports checking. This is a required field according to the OFX spec.
                         * @see "OFX Spec, Section 13.6.1"
                         *
                         * @param supportsChecking whether the account supports checking
                         */
                        InvestmentAccountInfo.prototype.setSupportsChecking = function (supportsChecking) {
                            this.supportsChecking = supportsChecking;
                        };
                        /**
                         * Gets the activation status for investment statement download. This is a required field
                         * according to the OFX spec.
                         *
                         * @return the activation status
                         */
                        InvestmentAccountInfo.prototype.getActivationStatus = function () {
                            return this.activationStatus;
                        };
                        /**
                         * Sets the activation status for investment statement download. This is a required field
                         * according to the OFX spec.
                         *
                         * @param activationStatus the activation status
                         */
                        InvestmentAccountInfo.prototype.setActivationStatus = function (activationStatus) {
                            this.activationStatus = activationStatus;
                        };
                        /**
                         * Gets the activation status as one of the well-known types.
                         *
                         * @return the activation status or null if it wasn't one of the well known types
                         */
                        InvestmentAccountInfo.prototype.getActivationStatusEnum = function () {
                            return accounts.ActivationStatus_fromOfx(this.getActivationStatus());
                        };
                        /**
                         * Gets the type of investment account. One of "INDIVIDUAL", "JOINT", "TRUST", or "CORPORATE".
                         * This is an optional field according to the OFX spec.
                         *
                         * @return the type of account
                         */
                        InvestmentAccountInfo.prototype.getInvestmentAccountType = function () {
                            return this.investmentAccountType;
                        };
                        /**
                         * Sets the type of investment account. One of "INDIVIDUAL", "JOINT", "TRUST", or "CORPORATE".
                         * This is an optional field according to the OFX spec.
                         *
                         * @param investmentAccountType the type of account
                         */
                        InvestmentAccountInfo.prototype.setInvestmentAccountType = function (investmentAccountType) {
                            this.investmentAccountType = investmentAccountType;
                        };
                        /**
                         * Gets the type of investment account as one of the well-known types.
                         *
                         * @return the type of investment account or null if it's not one of the well-known types
                         */
                        InvestmentAccountInfo.prototype.getInvestmentAccountTypeEnum = function () {
                            return accounts.AccountType_fromOfx(this.getInvestmentAccountType());
                        };
                        /**
                         * Gets the description of option trading privileges. * This is an optional field according to
                         * the OFX spec.
                         *
                         * @return the description of option trading privileges.
                         */
                        InvestmentAccountInfo.prototype.getOptionLevel = function () {
                            return this.optionLevel;
                        };
                        /**
                         * Sets the description of option trading privileges. * This is an optional field according to
                         * the OFX spec.
                         *
                         * @param optionLevel the description of option trading privileges.
                         */
                        InvestmentAccountInfo.prototype.setOptionLevel = function (optionLevel) {
                            this.optionLevel = optionLevel;
                        };
                        return InvestmentAccountInfo;
                    })();
                    accounts.InvestmentAccountInfo = InvestmentAccountInfo;
                    Aggregate_add(InvestmentAccountInfo, "INVACCTINFO");
                    ChildAggregate_add(InvestmentAccountInfo, { name: "INVACCTFROM", required: true, order: 0, type: accounts.InvestmentAccountDetails, read: InvestmentAccountInfo.prototype.getInvestmentAccount, write: InvestmentAccountInfo.prototype.setInvestmentAccount });
                    Element_add(InvestmentAccountInfo, { name: "USPRODUCTTYPE", required: true, order: 10, type: String, read: InvestmentAccountInfo.prototype.getUnitedStatesAccountType, write: InvestmentAccountInfo.prototype.setUnitedStatesAccountType });
                    Element_add(InvestmentAccountInfo, { name: "CHECKING", required: true, order: 20, type: Boolean, read: InvestmentAccountInfo.prototype.getSupportsChecking, write: InvestmentAccountInfo.prototype.setSupportsChecking });
                    Element_add(InvestmentAccountInfo, { name: "SVCSTATUS", required: true, order: 30, type: String, read: InvestmentAccountInfo.prototype.getActivationStatus, write: InvestmentAccountInfo.prototype.setActivationStatus });
                    Element_add(InvestmentAccountInfo, { name: "INVACCTTYPE", order: 40, type: String, read: InvestmentAccountInfo.prototype.getInvestmentAccountType, write: InvestmentAccountInfo.prototype.setInvestmentAccountType });
                    Element_add(InvestmentAccountInfo, { name: "OPTIONLEVEL", order: 50, type: String, read: InvestmentAccountInfo.prototype.getOptionLevel, write: InvestmentAccountInfo.prototype.setOptionLevel });
                })(accounts = investment.accounts || (investment.accounts = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var common;
            (function (common) {
                /**
                 * @author Ryan Heaton
                 */
                (function (AccountStatus) {
                    /**
                     * Available, but not yet requested.
                     */
                    AccountStatus[AccountStatus["AVAIL"] = 0] = "AVAIL";
                    /**
                     * Requested, but not yet available.
                     */
                    AccountStatus[AccountStatus["PEND"] = 1] = "PEND";
                    /**
                     * Active.
                     */
                    AccountStatus[AccountStatus["ACTIVE"] = 2] = "ACTIVE";
                })(common.AccountStatus || (common.AccountStatus = {}));
                var AccountStatus = common.AccountStatus;
            })(common = data.common || (data.common = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../../../meta/Element_add'/>
///<reference path='../common/AccountDetails'/>
///<reference path='../common/AccountInfo'/>
///<reference path='../common/AccountStatus'/>
///<reference path='BankAccountDetails'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var banking;
            (function (banking) {
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var AccountStatus = ofx4js.domain.data.common.AccountStatus;
                /**
                 * @author Ryan Heaton
                 */
                var BankAccountInfo = (function () {
                    function BankAccountInfo() {
                    }
                    /**
                     * The bank account this information is referencing.
                     *
                     * @return The bank account this information is referencing.
                     */
                    BankAccountInfo.prototype.getBankAccount = function () {
                        return this.bankAccount;
                    };
                    /**
                     * The bank account this information is referencing.
                     *
                     * @param bankAccount The bank account this information is referencing.
                     */
                    BankAccountInfo.prototype.setBankAccount = function (bankAccount) {
                        this.bankAccount = bankAccount;
                    };
                    // Inherited.
                    BankAccountInfo.prototype.getAccountDetails = function () {
                        return this.getBankAccount();
                    };
                    /**
                     * Whether this account supports download of transaction details.
                     *
                     * @return Whether this account supports download of transaction details.
                     */
                    BankAccountInfo.prototype.getSupportsTransactionDetailOperations = function () {
                        return this.supportsTransactionDetailOperations;
                    };
                    /**
                     * Whether this account supports download of transaction details.
                     *
                     * @param supportsTransactionDetailOperations Whether this account supports download of transaction details.
                     */
                    BankAccountInfo.prototype.setSupportsTransactionDetailOperations = function (supportsTransactionDetailOperations) {
                        this.supportsTransactionDetailOperations = supportsTransactionDetailOperations;
                    };
                    /**
                     * Whether this account supports transfer operations to other accounts.
                     *
                     * @return Whether this account supports transfer operations to other accounts.
                     */
                    BankAccountInfo.prototype.getSupportsTransferToOtherAccountOperations = function () {
                        return this.supportsTransferToOtherAccountOperations;
                    };
                    /**
                     * Whether this account supports transfer operations to other accounts.
                     *
                     * @param supportsTransferToOtherAccountOperations Whether this account supports transfer operations to other accounts.
                     */
                    BankAccountInfo.prototype.setSupportsTransferToOtherAccountOperations = function (supportsTransferToOtherAccountOperations) {
                        this.supportsTransferToOtherAccountOperations = supportsTransferToOtherAccountOperations;
                    };
                    /**
                     * Whether this account supports transfer operations from other accounts.
                     *
                     * @return Whether this account supports transfer operations from other accounts.
                     */
                    BankAccountInfo.prototype.getSupportsTransferFromOtherAccountOperations = function () {
                        return this.supportsTransferFromOtherAccountOperations;
                    };
                    /**
                     * Whether this account supports transfer operations from other accounts.
                     *
                     * @param supportsTransferFromOtherAccountOperations Whether this account supports transfer operations from other accounts.
                     */
                    BankAccountInfo.prototype.setSupportsTransferFromOtherAccountOperations = function (supportsTransferFromOtherAccountOperations) {
                        this.supportsTransferFromOtherAccountOperations = supportsTransferFromOtherAccountOperations;
                    };
                    /**
                     * The account status.
                     *
                     * @return The account status.
                     */
                    BankAccountInfo.prototype.getStatus = function () {
                        return this.status;
                    };
                    /**
                     * The account status.
                     *
                     * @param status The account status.
                     */
                    BankAccountInfo.prototype.setStatus = function (status) {
                        this.status = status;
                    };
                    return BankAccountInfo;
                })();
                banking.BankAccountInfo = BankAccountInfo;
                Aggregate_add(BankAccountInfo, "BANKACCTINFO");
                ChildAggregate_add(BankAccountInfo, { name: "BANKACCTFROM", required: true, order: 0, type: banking.BankAccountDetails, read: BankAccountInfo.prototype.getBankAccount, write: BankAccountInfo.prototype.setBankAccount });
                Element_add(BankAccountInfo, { name: "SUPTXDL", required: true, order: 10, type: Boolean, read: BankAccountInfo.prototype.getSupportsTransactionDetailOperations, write: BankAccountInfo.prototype.setSupportsTransactionDetailOperations });
                Element_add(BankAccountInfo, { name: "XFERSRC", required: true, order: 20, type: Boolean, read: BankAccountInfo.prototype.getSupportsTransferToOtherAccountOperations, write: BankAccountInfo.prototype.setSupportsTransferToOtherAccountOperations });
                Element_add(BankAccountInfo, { name: "XFERDEST", required: true, order: 30, type: Boolean, read: BankAccountInfo.prototype.getSupportsTransferFromOtherAccountOperations, write: BankAccountInfo.prototype.setSupportsTransferFromOtherAccountOperations });
                Element_add(BankAccountInfo, { name: "SVCSTATUS", required: true, order: 40, type: AccountStatus, read: BankAccountInfo.prototype.getStatus, write: BankAccountInfo.prototype.setStatus });
            })(banking = data.banking || (data.banking = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../../../meta/Element_add'/>
///<reference path='../common/AccountStatus'/>
///<reference path='../common/AccountInfo'/>
///<reference path='../common/AccountDetails'/>
///<reference path='CreditCardAccountDetails'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var creditcard;
            (function (creditcard) {
                var AccountStatus = ofx4js.domain.data.common.AccountStatus;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                /**
                 * @author Ryan Heaton
                 */
                var CreditCardAccountInfo = (function () {
                    function CreditCardAccountInfo() {
                    }
                    /**
                     * The credit card account this information is referencing.
                     *
                     * @return The credit card account this information is referencing.
                     */
                    CreditCardAccountInfo.prototype.getCreditCardAccount = function () {
                        return this.creditCardAccount;
                    };
                    /**
                     * The credit card account this information is referencing.
                     *
                     * @param creditCardAccount The credit card account this information is referencing.
                     */
                    CreditCardAccountInfo.prototype.setCreditCardAccount = function (creditCardAccount) {
                        this.creditCardAccount = creditCardAccount;
                    };
                    // Inherited.
                    CreditCardAccountInfo.prototype.getAccountDetails = function () {
                        return this.getCreditCardAccount();
                    };
                    /**
                     * Whether this account supports download of transaction details.
                     *
                     * @return Whether this account supports download of transaction details.
                     */
                    CreditCardAccountInfo.prototype.getSupportsTransactionDetailOperations = function () {
                        return this.supportsTransactionDetailOperations;
                    };
                    /**
                     * Whether this account supports download of transaction details.
                     *
                     * @param supportsTransactionDetailOperations Whether this account supports download of transaction details.
                     */
                    CreditCardAccountInfo.prototype.setSupportsTransactionDetailOperations = function (supportsTransactionDetailOperations) {
                        this.supportsTransactionDetailOperations = supportsTransactionDetailOperations;
                    };
                    /**
                     * Whether this account supports transfer operations to other accounts.
                     *
                     * @return Whether this account supports transfer operations to other accounts.
                     */
                    CreditCardAccountInfo.prototype.getSupportsTransferToOtherAccountOperations = function () {
                        return this.supportsTransferToOtherAccountOperations;
                    };
                    /**
                     * Whether this account supports transfer operations to other accounts.
                     *
                     * @param supportsTransferToOtherAccountOperations Whether this account supports transfer operations to other accounts.
                     */
                    CreditCardAccountInfo.prototype.setSupportsTransferToOtherAccountOperations = function (supportsTransferToOtherAccountOperations) {
                        this.supportsTransferToOtherAccountOperations = supportsTransferToOtherAccountOperations;
                    };
                    /**
                     * Whether this account supports transfer operations from other accounts.
                     *
                     * @return Whether this account supports transfer operations from other accounts.
                     */
                    CreditCardAccountInfo.prototype.getSupportsTransferFromOtherAccountOperations = function () {
                        return this.supportsTransferFromOtherAccountOperations;
                    };
                    /**
                     * Whether this account supports transfer operations from other accounts.
                     *
                     * @param supportsTransferFromOtherAccountOperations Whether this account supports transfer operations from other accounts.
                     */
                    CreditCardAccountInfo.prototype.setSupportsTransferFromOtherAccountOperations = function (supportsTransferFromOtherAccountOperations) {
                        this.supportsTransferFromOtherAccountOperations = supportsTransferFromOtherAccountOperations;
                    };
                    /**
                     * The account status.
                     *
                     * @return The account status.
                     */
                    CreditCardAccountInfo.prototype.getStatus = function () {
                        return this.status;
                    };
                    /**
                     * The account status.
                     *
                     * @param status The account status.
                     */
                    CreditCardAccountInfo.prototype.setStatus = function (status) {
                        this.status = status;
                    };
                    return CreditCardAccountInfo;
                })();
                creditcard.CreditCardAccountInfo = CreditCardAccountInfo;
                Aggregate_add(CreditCardAccountInfo, "CCACCTINFO");
                ChildAggregate_add(CreditCardAccountInfo, { name: "CCACCTFROM", required: true, order: 0, type: creditcard.CreditCardAccountDetails, read: CreditCardAccountInfo.prototype.getCreditCardAccount, write: CreditCardAccountInfo.prototype.setCreditCardAccount });
                Element_add(CreditCardAccountInfo, { name: "SUPTXDL", required: true, order: 10, type: Boolean, read: CreditCardAccountInfo.prototype.getSupportsTransactionDetailOperations, write: CreditCardAccountInfo.prototype.setSupportsTransactionDetailOperations });
                Element_add(CreditCardAccountInfo, { name: "XFERSRC", required: true, order: 20, type: Boolean, read: CreditCardAccountInfo.prototype.getSupportsTransferToOtherAccountOperations, write: CreditCardAccountInfo.prototype.setSupportsTransferToOtherAccountOperations });
                Element_add(CreditCardAccountInfo, { name: "XFERDEST", required: true, order: 30, type: Boolean, read: CreditCardAccountInfo.prototype.getSupportsTransferFromOtherAccountOperations, write: CreditCardAccountInfo.prototype.setSupportsTransferFromOtherAccountOperations });
                Element_add(CreditCardAccountInfo, { name: "SVCSTATUS", required: true, order: 40, type: AccountStatus, read: CreditCardAccountInfo.prototype.getStatus, write: CreditCardAccountInfo.prototype.setStatus });
            })(creditcard = data.creditcard || (data.creditcard = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../../../meta/Element_add'/>
///<reference path='../investment/accounts/InvestmentAccountInfo'/>
///<reference path='../banking/BankAccountInfo'/>
///<reference path='../creditcard/CreditCardAccountInfo'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var signup;
            (function (signup) {
                var InvestmentAccountInfo = ofx4js.domain.data.investment.accounts.InvestmentAccountInfo;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                var BankAccountInfo = ofx4js.domain.data.banking.BankAccountInfo;
                var CreditCardAccountInfo = ofx4js.domain.data.creditcard.CreditCardAccountInfo;
                /**
                 * @author Ryan Heaton
                 */
                var AccountProfile = (function () {
                    function AccountProfile() {
                    }
                    /**
                     * Description of the account.
                     *
                     * @return The description of the account.
                     */
                    AccountProfile.prototype.getDescription = function () {
                        return this.description;
                    };
                    /**
                     * The description of the account.
                     *
                     * @param description The description of the account.
                     */
                    AccountProfile.prototype.setDescription = function (description) {
                        this.description = description;
                    };
                    /**
                     * Phone number for the account.
                     *
                     * @return Phone number for the account.
                     */
                    AccountProfile.prototype.getPhone = function () {
                        return this.phone;
                    };
                    /**
                     * Phone number for the account.
                     *
                     * @param phone Phone number for the account.
                     */
                    AccountProfile.prototype.setPhone = function (phone) {
                        this.phone = phone;
                    };
                    /**
                     * Account specifics.
                     *
                     * @return Account specifics.
                     */
                    AccountProfile.prototype.getSpecifics = function () {
                        if (this.getBankSpecifics() != null && this.getCreditCardSpecifics() != null) {
                            throw new ofx4js.Error("Only one account specifics aggregate can be set at a time.");
                        }
                        else if (this.getBankSpecifics() != null) {
                            return this.getBankSpecifics();
                        }
                        else if (this.getInvestmentSpecifics() != null) {
                            return this.getInvestmentSpecifics();
                        }
                        else {
                            return this.getCreditCardSpecifics();
                        }
                    };
                    /**
                     * Account specifics.
                     *
                     * @param specifics Account specifics.
                     */
                    AccountProfile.prototype.setSpecifics = function (specifics) {
                        if (specifics instanceof BankAccountInfo) {
                            this.setBankSpecifics(specifics);
                        }
                        else if (specifics instanceof CreditCardAccountInfo) {
                            this.setCreditCardSpecifics(specifics);
                        }
                        else if (specifics instanceof InvestmentAccountInfo) {
                            this.setInvestmentSpecifics(specifics);
                        }
                        else {
                            throw new ofx4js.Error("Unknown specifics type: " + specifics);
                        }
                    };
                    /**
                     * Bank-specific info.
                     *
                     * @return Bank-specific info.
                     */
                    AccountProfile.prototype.getBankSpecifics = function () {
                        return this.bankSpecifics;
                    };
                    /**
                     * Bank-specific info.
                     *
                     * @param bankSpecifics Bank-specific info.
                     */
                    AccountProfile.prototype.setBankSpecifics = function (bankSpecifics) {
                        this.creditCardSpecifics = null;
                        this.investSpecifics = null;
                        this.bankSpecifics = bankSpecifics;
                    };
                    /**
                     * Credit-card account info.
                     *
                     * @return Credit-card account info.
                     */
                    AccountProfile.prototype.getCreditCardSpecifics = function () {
                        return this.creditCardSpecifics;
                    };
                    /**
                     * Credit-card account info.
                     *
                     * @param creditCardSpecifics Credit-card account info.
                     */
                    AccountProfile.prototype.setCreditCardSpecifics = function (creditCardSpecifics) {
                        this.bankSpecifics = null;
                        this.investSpecifics = null;
                        this.creditCardSpecifics = creditCardSpecifics;
                    };
                    /**
                     * Investment account info.
                     *
                     * @return Investment account info.
                     */
                    AccountProfile.prototype.getInvestmentSpecifics = function () {
                        return this.investSpecifics;
                    };
                    /**
                     * Investment account info.
                     *
                     * @param investSpecifics Investment account info.
                     */
                    AccountProfile.prototype.setInvestmentSpecifics = function (investSpecifics) {
                        this.bankSpecifics = null;
                        this.creditCardSpecifics = null;
                        this.investSpecifics = investSpecifics;
                    };
                    return AccountProfile;
                })();
                signup.AccountProfile = AccountProfile;
                Aggregate_add(AccountProfile, "ACCTINFO");
                Element_add(AccountProfile, { name: "DESC", order: 0, type: String, read: AccountProfile.prototype.getDescription, write: AccountProfile.prototype.setDescription });
                Element_add(AccountProfile, { name: "PHONE", order: 10, type: String, read: AccountProfile.prototype.getPhone, write: AccountProfile.prototype.setPhone });
                ChildAggregate_add(AccountProfile, { order: 20, type: BankAccountInfo, read: AccountProfile.prototype.getBankSpecifics, write: AccountProfile.prototype.setBankSpecifics });
                ChildAggregate_add(AccountProfile, { order: 30, type: CreditCardAccountInfo, read: AccountProfile.prototype.getCreditCardSpecifics, write: AccountProfile.prototype.setCreditCardSpecifics });
                ChildAggregate_add(AccountProfile, { order: 40, type: InvestmentAccountInfo, read: AccountProfile.prototype.getInvestmentSpecifics, write: AccountProfile.prototype.setInvestmentSpecifics });
            })(signup = data.signup || (data.signup = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../project.d.ts'/>
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                /**
                 * @author Ryan Heaton
                 * @see "Section 7.2.1, OFX Spec"
                 */
                (function (SynchronizationCapability) {
                    SynchronizationCapability[SynchronizationCapability["FULL"] = 0] = "FULL";
                    SynchronizationCapability[SynchronizationCapability["LITE"] = 1] = "LITE";
                })(profile.SynchronizationCapability || (profile.SynchronizationCapability = {}));
                var SynchronizationCapability = profile.SynchronizationCapability;
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            /**
             * @author Ryan Heaton
             * @see "Section 4, OFX spec"
             */
            (function (ApplicationSecurity) {
                ApplicationSecurity[ApplicationSecurity["NONE"] = 0] = "NONE";
                ApplicationSecurity[ApplicationSecurity["TYPE1"] = 1] = "TYPE1";
            })(data.ApplicationSecurity || (data.ApplicationSecurity = {}));
            var ApplicationSecurity = data.ApplicationSecurity;
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='profile/SynchronizationCapability'/>
///<reference path='ApplicationSecurity'/>
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            /**
             * The message set type, used to define message set order in the envelope.
             *
             * @author Ryan Heaton
             * @see "Section 2.4.5.2, OFX spec"
             */
            (function (MessageSetType) {
                MessageSetType[MessageSetType["signon"] = 0] = "signon";
                MessageSetType[MessageSetType["signup"] = 1] = "signup";
                MessageSetType[MessageSetType["banking"] = 2] = "banking";
                MessageSetType[MessageSetType["creditcard"] = 3] = "creditcard";
                MessageSetType[MessageSetType["investment"] = 4] = "investment";
                MessageSetType[MessageSetType["interbank_transfer"] = 5] = "interbank_transfer";
                MessageSetType[MessageSetType["wire_transfer"] = 6] = "wire_transfer";
                MessageSetType[MessageSetType["payments"] = 7] = "payments";
                MessageSetType[MessageSetType["email"] = 8] = "email";
                MessageSetType[MessageSetType["investment_security"] = 9] = "investment_security";
                MessageSetType[MessageSetType["profile"] = 10] = "profile";
                MessageSetType[MessageSetType["tax1099"] = 11] = "tax1099";
            })(data.MessageSetType || (data.MessageSetType = {}));
            var MessageSetType = data.MessageSetType;
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                /**
                 * @author Ryan Heaton
                 * @see "Section 7.2.2, OFX Spec"
                 */
                (function (CharacterType) {
                    CharacterType[CharacterType["ALPHAONLY"] = 0] = "ALPHAONLY";
                    CharacterType[CharacterType["NUMERICONLY"] = 1] = "NUMERICONLY";
                    CharacterType[CharacterType["ALPHAORNUMERIC"] = 2] = "ALPHAORNUMERIC";
                    CharacterType[CharacterType["ALPHAANDNUMERIC"] = 3] = "ALPHAANDNUMERIC";
                })(profile.CharacterType || (profile.CharacterType = {}));
                var CharacterType = profile.CharacterType;
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='profile/CharacterType'/>
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../domain/data/MessageSetProfile'/>
///<reference path='../domain/data/MessageSetType'/>
///<reference path='../domain/data/SignonProfile'/>
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../OFXException'/>
///<reference path='../domain/data/banking/BankAccountDetails'/>
///<reference path='../domain/data/creditcard/CreditCardAccountDetails'/>
///<reference path='../domain/data/investment/accounts/InvestmentAccountDetails'/>
///<reference path='../domain/data/signup/AccountProfile'/>
///<reference path='BankAccount'/>
///<reference path='CreditCardAccount'/>
///<reference path='FinancialInstitutionData'/>
///<reference path='FinancialInstitutionProfile'/>
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='FinancialInstitutionData'/>
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='FinancialInstitution'/>
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            /**
             * A message applicable to a response message set.
             *
             * @author Ryan Heaton
             */
            var ResponseMessage = (function () {
                function ResponseMessage() {
                }
                /**
                 * The name of the response message.
                 *
                 * @return The name of the response message.
                 */
                ResponseMessage.prototype.getResponseMessageName = function () {
                    throw new ofx4js.Error("abstract");
                };
                return ResponseMessage;
            })();
            data.ResponseMessage = ResponseMessage;
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../../../meta/Element_add'/>
///<reference path='../ResponseMessage'/>
///<reference path='../../../client/AccountStatement'/>
///<reference path='BalanceInfo'/>
///<reference path='TransactionList'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var common;
            (function (common) {
                var ResponseMessage = ofx4js.domain.data.ResponseMessage;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                //import java.util.Locale;
                /**
                 * @author Ryan Heaton
                 */
                var StatementResponse = (function (_super) {
                    __extends(StatementResponse, _super);
                    function StatementResponse() {
                        _super.call(this);
                        this.currencyCode = "USD"; //java.util.Currency.getInstance(Locale.US).getCurrencyCode().toUpperCase();
                    }
                    /**
                     * The currency code.
                     *
                     * @return The currency code.
                     * @see java.util.Currency#getCurrencyCode()
                     */
                    StatementResponse.prototype.getCurrencyCode = function () {
                        return this.currencyCode;
                    };
                    /**
                     * The currency code.
                     *
                     * @param currencyCode The currency code.
                     */
                    StatementResponse.prototype.setCurrencyCode = function (currencyCode) {
                        this.currencyCode = currencyCode;
                    };
                    /**
                     * The transaction list.
                     *
                     * @return The transaction list.
                     */
                    StatementResponse.prototype.getTransactionList = function () {
                        return this.transactionList;
                    };
                    /**
                     * The transaction list.
                     *
                     * @param transactionList The transaction list.
                     */
                    StatementResponse.prototype.setTransactionList = function (transactionList) {
                        this.transactionList = transactionList;
                    };
                    /**
                     * The ledger balance.
                     *
                     * @return The ledger balance.
                     */
                    StatementResponse.prototype.getLedgerBalance = function () {
                        return this.ledgerBalance;
                    };
                    /**
                     * The ledger balance.
                     *
                     * @param ledgerBalance The ledger balance.
                     */
                    StatementResponse.prototype.setLedgerBalance = function (ledgerBalance) {
                        this.ledgerBalance = ledgerBalance;
                    };
                    /**
                     * The available balance.
                     *
                     * @return The available balance.
                     */
                    StatementResponse.prototype.getAvailableBalance = function () {
                        return this.availableBalance;
                    };
                    /**
                     * The available balance.
                     *
                     * @param availableBalance The available balance.
                     */
                    StatementResponse.prototype.setAvailableBalance = function (availableBalance) {
                        this.availableBalance = availableBalance;
                    };
                    /**
                     * Marketing information. (?)
                     *
                     * @return Marketing information.
                     */
                    StatementResponse.prototype.getMarketingInfo = function () {
                        return this.marketingInfo;
                    };
                    /**
                     * Marketing information. (?)
                     *
                     * @param marketingInfo Marketing information.
                     */
                    StatementResponse.prototype.setMarketingInfo = function (marketingInfo) {
                        this.marketingInfo = marketingInfo;
                    };
                    return StatementResponse;
                })(ResponseMessage);
                common.StatementResponse = StatementResponse;
                Element_add(StatementResponse, { name: "CURDEF", required: true, order: 0, type: String, read: StatementResponse.prototype.getCurrencyCode, write: StatementResponse.prototype.setCurrencyCode });
                ChildAggregate_add(StatementResponse, { order: 20, type: common.TransactionList, read: StatementResponse.prototype.getTransactionList, write: StatementResponse.prototype.setTransactionList });
                ChildAggregate_add(StatementResponse, { name: "LEDGERBAL", order: 30, type: common.BalanceInfo, read: StatementResponse.prototype.getLedgerBalance, write: StatementResponse.prototype.setLedgerBalance });
                ChildAggregate_add(StatementResponse, { name: "AVAILBAL", order: 40, type: common.BalanceInfo, read: StatementResponse.prototype.getAvailableBalance, write: StatementResponse.prototype.setAvailableBalance });
                Element_add(StatementResponse, { name: "MKTGINFO", order: 50, type: String, read: StatementResponse.prototype.getMarketingInfo, write: StatementResponse.prototype.setMarketingInfo });
            })(common = data.common || (data.common = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var accounts;
                (function (accounts) {
                    /**
                     * Types of well-known sub-accounts.
                     * @see "Section 13.9.2.4.2, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    (function (SubAccountType) {
                        SubAccountType[SubAccountType["CASH"] = 0] = "CASH";
                        SubAccountType[SubAccountType["MARGIN"] = 1] = "MARGIN";
                        SubAccountType[SubAccountType["SHORT"] = 2] = "SHORT";
                        SubAccountType[SubAccountType["OTHER"] = 3] = "OTHER";
                    })(accounts.SubAccountType || (accounts.SubAccountType = {}));
                    var SubAccountType = accounts.SubAccountType;
                    function SubAccountType_fromOfx(ofxVal) {
                        if ("CASH" === ofxVal) {
                            return 0 /* CASH */;
                        }
                        else if ("MARGIN" === ofxVal) {
                            return 1 /* MARGIN */;
                        }
                        else if ("SHORT" === ofxVal) {
                            return 2 /* SHORT */;
                        }
                        else if ("OTHER" === ofxVal) {
                            return 3 /* OTHER */;
                        }
                        else {
                            return null;
                        }
                    }
                    accounts.SubAccountType_fromOfx = SubAccountType_fromOfx;
                })(accounts = investment.accounts || (investment.accounts = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/Element_add'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var seclist;
            (function (seclist) {
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                /**
                 * Identifier for a security.
                 * @see "Section 13.8.1, OFX Spec"
                 *
                 * @author Jon Perlow
                 */
                var SecurityId = (function () {
                    function SecurityId() {
                    }
                    /**
                     * Gets the unique id for the security. This is a required field according to the OFX spec.
                     *
                     * @return the unique id
                     */
                    SecurityId.prototype.getUniqueId = function () {
                        return this.uniqueId;
                    };
                    /**
                     * Sets the unique id for the security. This is a required field according to the OFX spec.
                     *
                     * @param uniqueId the unique id
                     */
                    SecurityId.prototype.setUniqueId = function (uniqueId) {
                        this.uniqueId = uniqueId;
                    };
                    /**
                     * Gets the type of unique id.
                     *
                     * @return the type of unique id
                     */
                    SecurityId.prototype.getUniqueIdType = function () {
                        return this.uniqueIdType;
                    };
                    /**
                     * Sets the type of unique id.
                     *
                     * @param uniqueIdType the type of unique id
                     */
                    SecurityId.prototype.setUniqueIdType = function (uniqueIdType) {
                        this.uniqueIdType = uniqueIdType;
                    };
                    return SecurityId;
                })();
                seclist.SecurityId = SecurityId;
                Aggregate_add(SecurityId, "SECID");
                Element_add(SecurityId, { name: "UNIQUEID", required: true, order: 10, type: String, read: SecurityId.prototype.getUniqueId, write: SecurityId.prototype.setUniqueId });
                Element_add(SecurityId, { name: "UNIQUEIDTYPE", required: true, order: 20, type: String, read: SecurityId.prototype.getUniqueIdType, write: SecurityId.prototype.setUniqueIdType });
            })(seclist = data.seclist || (data.seclist = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
///<reference path='BasePosition'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var positions;
                (function (positions) {
                    var SubAccountType_fromOfx = ofx4js.domain.data.investment.accounts.SubAccountType_fromOfx;
                    var SecurityId = ofx4js.domain.data.seclist.SecurityId;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * Class for the investment position aggregate.
                     * @see "Section 13.9.2.6.1, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var InvestmentPosition = (function () {
                        function InvestmentPosition() {
                        }
                        /**
                         * Gets the security id for the position. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.6.1, OFX Spec"
                         *
                         * @return the security id for the position
                         */
                        InvestmentPosition.prototype.getSecurityId = function () {
                            return this.securityId;
                        };
                        /**
                         * Sets the security id for the position. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.6.1, OFX Spec"
                         *
                         * @param securityId the security id for the position
                         */
                        InvestmentPosition.prototype.setSecurityId = function (securityId) {
                            this.securityId = securityId;
                        };
                        /**
                         * Gets the sub-account type. One of "CASH", "MARGIN", "SHORT", "OTHER". This is a required field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.6.1, OFX Spec"
                         *
                         * @return the sub-account type
                         */
                        InvestmentPosition.prototype.getHeldInAccount = function () {
                            return this.heldInAccount;
                        };
                        /**
                         * Sets the sub-account type. One of "CASH", "MARGIN", "SHORT", "OTHER". This is a required field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.6.1, OFX Spec"
                         *
                         * @param heldInAccount the sub-account type
                         */
                        InvestmentPosition.prototype.setHeldInAccount = function (heldInAccount) {
                            this.heldInAccount = heldInAccount;
                        };
                        /**
                         * Gets the sub-account type as one of the well-known types.
                         * @see "Section 13.9.2.6.1, OFX Spec"
                         *
                         * @return the sub-account type or null if it's not one of the well-known types
                         */
                        InvestmentPosition.prototype.getHeldInAccountEnum = function () {
                            return SubAccountType_fromOfx(this.getHeldInAccount());
                        };
                        /**
                         * Gets the position type. One of SHORT or LONG. This is a required field according to the OFX
                         * spec.
                         * @see "Section 13.9.2.6.1, OFX Spec"
                         *
                         * @return the position type
                         */
                        InvestmentPosition.prototype.getPositionType = function () {
                            return this.positionType;
                        };
                        /**
                         * Sets the position type. One of SHORT or LONG. This is a required field according to the OFX
                         * spec.
                         * @see "Section 13.9.2.6.1, OFX Spec"
                         *
                         * @param positionType the position type
                         */
                        InvestmentPosition.prototype.setPositionType = function (positionType) {
                            this.positionType = positionType;
                        };
                        /**
                         * Gets the position type as one of the well-known types.
                         * @see "Section 13.9.2.6.1, OFX Spec"
                         *
                         * @return the position type or null if it's not one of the well-known types
                         */
                        InvestmentPosition.prototype.getPositionTypeEnum = function () {
                            return positions.PositionType_fromOfx(this.getPositionType());
                        };
                        /**
                         * Gets the number of units in the position. For stocks, mutual funds, and others, this
                         * is the number of shares. For bonds, this is the face value. For options, this is the number of
                         * contacts. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.6.1, OFX Spec"
                         *
                         * @return the number of units in the position
                         */
                        InvestmentPosition.prototype.getUnits = function () {
                            return this.units;
                        };
                        /**
                         * Sets the number of units in the position. For stocks, mutual funds, and others, this
                         * is the number of shares. For bonds, this is the face value. For options, this is the number of
                         * contacts. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.6.1, OFX Spec"
                         *
                         * @param units the number of units in the position
                         */
                        InvestmentPosition.prototype.setUnits = function (units) {
                            this.units = units;
                        };
                        /**
                         * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
                         * share price. For bonds, this is the percentage of par. For options, this is the per share (not
                         * per contact) price. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.6.1, OFX Spec"
                         *
                         * @return the per unit price
                         */
                        InvestmentPosition.prototype.getUnitPrice = function () {
                            return this.unitPrice;
                        };
                        /**
                         * Sets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
                         * share price. For bonds, this is the percentage of par. For options, this is the per share (not
                         * per contact) price. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.6.1, OFX Spec"
                         *
                         * @param unitPrice the per unit price
                         */
                        InvestmentPosition.prototype.setUnitPrice = function (unitPrice) {
                            this.unitPrice = unitPrice;
                        };
                        /**
                         * Gets the market value of this position. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.6.1, OFX Spec"
                         *
                         * @return the market value of the position
                         */
                        InvestmentPosition.prototype.getMarketValue = function () {
                            return this.marketValue;
                        };
                        /**
                         * Sets the market value of this position. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.6.1, OFX Spec"
                         *
                         * @param marketValue the market value of the position
                         */
                        InvestmentPosition.prototype.setMarketValue = function (marketValue) {
                            this.marketValue = marketValue;
                        };
                        /**
                         * Gets the date and time of the unit price and market value. This is a required field according
                         * to the OFX spec.
                         * @see "Section 13.9.2.6.1, OFX Spec"
                         *
                         * @return the market value date
                         */
                        InvestmentPosition.prototype.getMarketValueDate = function () {
                            return this.marketValueDate;
                        };
                        /**
                         * Sets the date and time of the unit price and market value. This is a required field according
                         * to the OFX spec.
                         * @see "Section 13.9.2.6.1, OFX Spec"
                         *
                         * @param marketValueDate the market value date
                         */
                        InvestmentPosition.prototype.setMarketValueDate = function (marketValueDate) {
                            this.marketValueDate = marketValueDate;
                        };
                        /**
                         * Gets the currency code of the position. This is an optional field according to the OFX spec.
                         * If not present, it's the default currency of the account.
                         * @see "Section 13.9.2.6.1, OFX Spec"
                         *
                         * @return the currency code of the position or null for the default currency
                         */
                        InvestmentPosition.prototype.getCurrencyCode = function () {
                            return this.currencyCode;
                        };
                        /**
                         * Sets the currency code of the position. This is an optional field according to the OFX spec.
                         * If not present, it's the default currency of the account.
                         * @see "Section 13.9.2.6.1, OFX Spec"
                         *
                         * @param currencyCode the currency code of the position or null for the default currency
                         */
                        InvestmentPosition.prototype.setCurrencyCode = function (currencyCode) {
                            this.currencyCode = currencyCode;
                        };
                        /**
                         * Gets the memo associated with the position. This is an optional field according to the OFX
                         * spec.
                         * @see "Section 13.9.2.6.1, OFX Spec"
                         *
                         * @return the memo
                         */
                        InvestmentPosition.prototype.getMemo = function () {
                            return this.memo;
                        };
                        /**
                         * Sets the memo associated with the position. This is an optional field according to the OFX
                         * spec.
                         * @see "Section 13.9.2.6.1, OFX Spec"
                         *
                         * @param memo the memo
                         */
                        InvestmentPosition.prototype.setMemo = function (memo) {
                            this.memo = memo;
                        };
                        /**
                         * Gets the 401K source for the sale. Should be one of "PRETAX", "AFTERTAX", "MATCH",
                         * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the 401k source
                         */
                        InvestmentPosition.prototype.get401kSource = function () {
                            return this.inv401kSource;
                        };
                        /**
                         * Sets the 401K source for the sale. Should be one of "PRETAX", "AFTERTAX", "MATCH",
                         * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param inv401kSource the 401k source
                         */
                        InvestmentPosition.prototype.set401kSource = function (inv401kSource) {
                            this.inv401kSource = inv401kSource;
                        };
                        /**
                         * Gets the 401k source as one of the well-known types.
                         *
                         * @return the 401k source or null if it's not one of the well-known types
                         */
                        InvestmentPosition.prototype.get401kSourceEnum = function () {
                            return positions.Inv401KSource_fromOfx(this.get401kSource());
                        };
                        return InvestmentPosition;
                    })();
                    positions.InvestmentPosition = InvestmentPosition;
                    Aggregate_add(InvestmentPosition, "INVPOS");
                    ChildAggregate_add(InvestmentPosition, { required: true, order: 10, type: SecurityId, read: InvestmentPosition.prototype.getSecurityId, write: InvestmentPosition.prototype.setSecurityId });
                    Element_add(InvestmentPosition, { name: "HELDINACCT", required: true, order: 20, type: String, read: InvestmentPosition.prototype.getHeldInAccount, write: InvestmentPosition.prototype.setHeldInAccount });
                    Element_add(InvestmentPosition, { name: "POSTYPE", required: true, order: 30, type: String, read: InvestmentPosition.prototype.getPositionType, write: InvestmentPosition.prototype.setPositionType });
                    Element_add(InvestmentPosition, { name: "UNITS", required: true, order: 40, type: Number, read: InvestmentPosition.prototype.getUnits, write: InvestmentPosition.prototype.setUnits });
                    Element_add(InvestmentPosition, { name: "UNITPRICE", required: true, order: 50, type: Number, read: InvestmentPosition.prototype.getUnitPrice, write: InvestmentPosition.prototype.setUnitPrice });
                    Element_add(InvestmentPosition, { name: "MKTVAL", required: true, order: 60, type: Number, read: InvestmentPosition.prototype.getMarketValue, write: InvestmentPosition.prototype.setMarketValue });
                    Element_add(InvestmentPosition, { name: "DTPRICEASOF", required: true, order: 70, type: Date, read: InvestmentPosition.prototype.getMarketValueDate, write: InvestmentPosition.prototype.setMarketValueDate });
                    Element_add(InvestmentPosition, { name: "CURRENCY", order: 80, type: String, read: InvestmentPosition.prototype.getCurrencyCode, write: InvestmentPosition.prototype.setCurrencyCode });
                    Element_add(InvestmentPosition, { name: "MEMO", order: 90, type: String, read: InvestmentPosition.prototype.getMemo, write: InvestmentPosition.prototype.setMemo });
                    Element_add(InvestmentPosition, { name: "INV401KSOURCE", order: 100, type: String, read: InvestmentPosition.prototype.get401kSource, write: InvestmentPosition.prototype.set401kSource });
                })(positions = investment.positions || (investment.positions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var positions;
                (function (positions) {
                    /**
                     * Types of 401(k) sources.
                     * @see "Section 13.9.2.4.2, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    (function (Inv401KSource) {
                        Inv401KSource[Inv401KSource["PRETAX"] = 0] = "PRETAX";
                        Inv401KSource[Inv401KSource["AFTER_TAX"] = 1] = "AFTER_TAX";
                        Inv401KSource[Inv401KSource["MATCH"] = 2] = "MATCH";
                        Inv401KSource[Inv401KSource["PROFIT_SHARING"] = 3] = "PROFIT_SHARING";
                        Inv401KSource[Inv401KSource["ROLLOVER"] = 4] = "ROLLOVER";
                        Inv401KSource[Inv401KSource["OTHER_VEST"] = 5] = "OTHER_VEST";
                        Inv401KSource[Inv401KSource["OTHER_NONVEST"] = 6] = "OTHER_NONVEST";
                    })(positions.Inv401KSource || (positions.Inv401KSource = {}));
                    var Inv401KSource = positions.Inv401KSource;
                    var ofxMapping = {
                        "PRETAX": 0 /* PRETAX */,
                        "AFTERTAX": 1 /* AFTER_TAX */,
                        "MATCH": 2 /* MATCH */,
                        "PROFITSHARING": 3 /* PROFIT_SHARING */,
                        "ROLLOVER": 4 /* ROLLOVER */,
                        "OTHERVEST": 5 /* OTHER_VEST */,
                        "OTHERNONVEST": 6 /* OTHER_NONVEST */,
                    };
                    function Inv401KSource_fromOfx(ofxVal) {
                        return ofxVal == null ? null : ofxMapping[ofxVal];
                    }
                    positions.Inv401KSource_fromOfx = Inv401KSource_fromOfx;
                })(positions = investment.positions || (investment.positions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var positions;
                (function (positions) {
                    /**
                     * Type of position.
                     * @see "Section 13.9.2.4.4, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    (function (PositionType) {
                        PositionType[PositionType["LONG"] = 0] = "LONG";
                        PositionType[PositionType["SHORT"] = 1] = "SHORT";
                    })(positions.PositionType || (positions.PositionType = {}));
                    var PositionType = positions.PositionType;
                    function PositionType_fromOfx(ofxVal) {
                        if ("LONG" === ofxVal) {
                            return 0 /* LONG */;
                        }
                        else if ("SHORT" === ofxVal) {
                            return 1 /* SHORT */;
                        }
                        else {
                            return null;
                        }
                    }
                    positions.PositionType_fromOfx = PositionType_fromOfx;
                })(positions = investment.positions || (investment.positions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../accounts/SubAccountType'/>
///<reference path='../../seclist/SecurityId'/>
///<reference path='InvestmentPosition'/>
///<reference path='Inv401KSource'/>
///<reference path='PositionType'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var positions;
                (function (positions) {
                    var SubAccountType_fromOfx = ofx4js.domain.data.investment.accounts.SubAccountType_fromOfx;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    /**
                     * Base class for the various types of positions.
                     * <br>
                     * This class exposes a read-only view of the flattened aggregates that are
                     * common to all positions as a convenience to application
                     * developers who may not find the ofx aggregation model intuitive.
                     *
                     * @author Jon Perlow
                     */
                    var BasePosition = (function () {
                        function BasePosition() {
                        }
                        /**
                         * Gets the investment position child aggregate.
                         *
                         * @return the investment position child aggregate
                         */
                        BasePosition.prototype.getInvestmentPosition = function () {
                            return this.investmentPosition;
                        };
                        /**
                         * Sets the investment position child aggregate.
                         *
                         * @param investmentPosition the investment position child aggregate
                         */
                        BasePosition.prototype.setInvestmentPosition = function (investmentPosition) {
                            this.investmentPosition = investmentPosition;
                        };
                        /**
                         * Gets the security id for the position. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.6.1, OFX Spec"
                         *
                         * @return the security id for the position
                         */
                        BasePosition.prototype.getSecurityId = function () {
                            return this.getInvestmentPosition().getSecurityId();
                        };
                        /**
                         * Gets the sub-account type. One of "CASH", "MARGIN", "SHORT", "OTHER". This is a required field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.6.1, OFX Spec"
                         *
                         * @return the sub-account type
                         */
                        BasePosition.prototype.getHeldInAccount = function () {
                            return this.getInvestmentPosition().getHeldInAccount();
                        };
                        /**
                         * Gets the sub-account type as one of the well-known types.
                         * @see "Section 13.9.2.6.1, OFX Spec"
                         *
                         * @return the sub-account type or null if it's not one of the well-known types
                         */
                        BasePosition.prototype.getHeldInAccountEnum = function () {
                            return SubAccountType_fromOfx(this.getHeldInAccount());
                        };
                        /**
                         * Gets the position type. One of SHORT or LONG. This is a required field according to the OFX
                         * spec.
                         * @see "Section 13.9.2.6.1, OFX Spec"
                         *
                         * @return the position type
                         */
                        BasePosition.prototype.getPositionType = function () {
                            return this.getInvestmentPosition().getPositionType();
                        };
                        /**
                         * Gets the position type as one of the well-known types.
                         * @see "Section 13.9.2.6.1, OFX Spec"
                         *
                         * @return the position type or null if it's not one of the well-known types
                         */
                        BasePosition.prototype.getPositionTypeEnum = function () {
                            return positions.PositionType_fromOfx(this.getPositionType());
                        };
                        /**
                         * Gets the number of units in the position. For stocks, mutual funds, and others, this
                         * is the number of shares. For bonds, this is the face value. For options, this is the number of
                         * contacts. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.6.1, OFX Spec"
                         *
                         * @return the number of units in the position
                         */
                        BasePosition.prototype.getUnits = function () {
                            return this.getInvestmentPosition().getUnits();
                        };
                        /**
                         * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
                         * share price. For bonds, this is the percentage of par. For options, this is the per share (not
                         * per contact) price. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.6.1, OFX Spec"
                         *
                         * @return the per unit price
                         */
                        BasePosition.prototype.getUnitPrice = function () {
                            return this.getInvestmentPosition().getUnitPrice();
                        };
                        /**
                         * Gets the market value of this position. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.6.1, OFX Spec"
                         *
                         * @return the market value of the position
                         */
                        BasePosition.prototype.getMarketValue = function () {
                            return this.getInvestmentPosition().getMarketValue();
                        };
                        /**
                         * Gets the date and time of the unit price and market value. This is a required field according
                         * to the OFX spec.
                         * @see "Section 13.9.2.6.1, OFX Spec"
                         *
                         * @return the market value date
                         */
                        BasePosition.prototype.getMarketValueDate = function () {
                            return this.getInvestmentPosition().getMarketValueDate();
                        };
                        /**
                         * Gets the currency code of the position. This is an optional field according to the OFX spec.
                         * If not present, it's the default currency of the account.
                         * @see "Section 13.9.2.6.1, OFX Spec"
                         *
                         * @return the currency code of the position or null for the default currency
                         */
                        BasePosition.prototype.getCurrencyCode = function () {
                            return this.getInvestmentPosition().getCurrencyCode();
                        };
                        /**
                         * Gets the memo associated with the position. This is an optional field according to the OFX
                         * spec.
                         * @see "Section 13.9.2.6.1, OFX Spec"
                         *
                         * @return the memo
                         */
                        BasePosition.prototype.getMemo = function () {
                            return this.getInvestmentPosition().getMemo();
                        };
                        /**
                         * Gets the 401K source for the sale. Should be one of "PRETAX", "AFTERTAX", "MATCH",
                         * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the 401k source
                         */
                        BasePosition.prototype.get401kSource = function () {
                            return this.getInvestmentPosition().get401kSource();
                        };
                        /**
                         * Gets the 401k source as one of the well-known types.
                         *
                         * @return the 401k source or null if it's not one of the well-known types
                         */
                        BasePosition.prototype.get401kSourceEnum = function () {
                            return positions.Inv401KSource_fromOfx(this.get401kSource());
                        };
                        return BasePosition;
                    })();
                    positions.BasePosition = BasePosition;
                    ChildAggregate_add(BasePosition, { required: true, order: 10, type: positions.InvestmentPosition, read: BasePosition.prototype.getInvestmentPosition, write: BasePosition.prototype.setInvestmentPosition });
                })(positions = investment.positions || (investment.positions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='BasePosition'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var positions;
                (function (_positions) {
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    /**
                     * Aggregate for a list of invesment positions.
                     * @see "Section 13.9.2.2, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var InvestmentPositionList = (function () {
                        function InvestmentPositionList() {
                        }
                        /**
                         * Gets the list of positions
                         *
                         * @return the list of positions
                         */
                        InvestmentPositionList.prototype.getPositions = function () {
                            return this.positions;
                        };
                        /**
                         * Sets the list of positions.
                         *
                         * @param positions the list of positions
                         */
                        InvestmentPositionList.prototype.setPositions = function (positions) {
                            this.positions = positions;
                        };
                        return InvestmentPositionList;
                    })();
                    _positions.InvestmentPositionList = InvestmentPositionList;
                    Aggregate_add(InvestmentPositionList, "INVPOSLIST");
                    ChildAggregate_add(InvestmentPositionList, { order: 10, type: Array, collectionEntryType: _positions.BasePosition, read: InvestmentPositionList.prototype.getPositions, write: InvestmentPositionList.prototype.setPositions });
                })(positions = investment.positions || (investment.positions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../../../meta/Element_add'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var seclist;
            (function (seclist) {
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                /**
                 * Info about a security.
                 * @see "Section 13.8.5.1, OFX Spec"
                 *
                 * @author Jon Perlow
                 */
                var SecurityInfo = (function () {
                    function SecurityInfo() {
                    }
                    /**
                     * Gets the unique security id for the security. This is a required field according to the OFX
                     * spec.
                     *
                     * @return the security id
                     */
                    SecurityInfo.prototype.getSecurityId = function () {
                        return this.securityId;
                    };
                    /**
                     * Sets the unique security id for the security. This is a required field according to the OFX
                     * spec.
                     *
                     * @param securityId the security id
                     */
                    SecurityInfo.prototype.setSecurityId = function (securityId) {
                        this.securityId = securityId;
                    };
                    /**
                     * Gets the full name of the security. This is a required field according to the OFX spec.
                     *
                     * @return the full name of the security
                     */
                    SecurityInfo.prototype.getSecurityName = function () {
                        return this.securityName;
                    };
                    /**
                     * Sets the full name of the security. This is a required field according to the OFX spec.
                     *
                     * @param securityName the full name of the security
                     */
                    SecurityInfo.prototype.setSecurityName = function (securityName) {
                        this.securityName = securityName;
                    };
                    /**
                     * Gets the ticker symbol for the security. This is an optional field according to the OFX spec.
                     *
                     * @return the ticket symbol or null if there's no ticker symbol
                     */
                    SecurityInfo.prototype.getTickerSymbol = function () {
                        return this.tickerSymbol;
                    };
                    /**
                     * Sets the ticker symbol for the security. This is an optional field according to the OFX spec.
                     *
                     * @param tickerSymbol the ticket symbol or null if there's no ticker symbol
                     */
                    SecurityInfo.prototype.setTickerSymbol = function (tickerSymbol) {
                        this.tickerSymbol = tickerSymbol;
                    };
                    /**
                     * Gets the FI ID number for the security. This is an optional field according to the OFX spec.
                     *
                     * @return the FI ID number for the security
                     */
                    SecurityInfo.prototype.getFiId = function () {
                        return this.fiId;
                    };
                    /**
                     * Sets the FI ID number for the security. This is an optional field according to the OFX spec.
                     *
                     * @param fiId the FI ID number for the security
                     */
                    SecurityInfo.prototype.setFiId = function (fiId) {
                        this.fiId = fiId;
                    };
                    /**
                     * Gets the rating of the security. This is an optional field according to the OFX spec.
                     *
                     * @return the rating
                     */
                    SecurityInfo.prototype.getRating = function () {
                        return this.rating;
                    };
                    /**
                     * Sets the rating of the security. This is an optional field according to the OFX spec.
                     *
                     * @param rating the rating
                     */
                    SecurityInfo.prototype.setRating = function (rating) {
                        this.rating = rating;
                    };
                    /**
                     * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
                     * share price. For bonds, this is the percentage of par. For options, this is the per share (not
                     * per contact) price. This is a noptional field according to the OFX spec.
                     * @see "Section 13.9.2.4.3, OFX Spec"
                     *
                     * @return the per unit price
                     */
                    SecurityInfo.prototype.getUnitPrice = function () {
                        return this.unitPrice;
                    };
                    /**
                     * Sets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
                     * share price. For bonds, this is the percentage of par. For options, this is the per share (not
                     * per contact) price. This is an optional field according to the OFX spec.
                     * @see "Section 13.9.2.4.3, OFX Spec"
                     *
                     * @param unitPrice the per unit price
                     */
                    SecurityInfo.prototype.setUnitPrice = function (unitPrice) {
                        this.unitPrice = unitPrice;
                    };
                    /**
                     * Gets the date as-of for the unit price. This is an optional field according to the OFX spec.
                     *
                     * @return the date as-of for the unit price
                     */
                    SecurityInfo.prototype.getUnitPriceAsOfDate = function () {
                        return this.marketValueDate;
                    };
                    /**
                     * Sets the date as-of for the unit price. This is an optional field according to the OFX spec.
                     *
                     * param marketValueDate the date as-of for the unit price
                     */
                    SecurityInfo.prototype.setUnitPriceAsOfDate = function (marketValueDate) {
                        this.marketValueDate = marketValueDate;
                    };
                    /**
                     * Gets the overriding currency code for the security. If not set, implies the default currency.
                     * This is an optional field according to the OFX spec.
                     *
                     * @return the overriding currency code or null to mean the default currency
                     */
                    SecurityInfo.prototype.getCurrencyCode = function () {
                        return this.currencyCode;
                    };
                    /**
                     * Sets the overriding currency code for the security. If not set, implies the default currency.
                     * This is an optional field according to the OFX spec.
                     *
                     * @param currencyCode the overriding currency code or null to mean the default currency
                     */
                    SecurityInfo.prototype.setCurrencyCode = function (currencyCode) {
                        this.currencyCode = currencyCode;
                    };
                    /**
                     * Gets any memo associated with the security. This is an optional field according to the OFX
                     * spec.
                     *
                     * @return the memo
                     */
                    SecurityInfo.prototype.getMemo = function () {
                        return this.memo;
                    };
                    /**
                     * Sets any memo associated with the security. This is an optional field according to the OFX
                     * spec.
                     *
                     * @param memo the memo
                     */
                    SecurityInfo.prototype.setMemo = function (memo) {
                        this.memo = memo;
                    };
                    return SecurityInfo;
                })();
                seclist.SecurityInfo = SecurityInfo;
                Aggregate_add(SecurityInfo, "SECINFO");
                ChildAggregate_add(SecurityInfo, { required: true, order: 10, type: seclist.SecurityId, read: SecurityInfo.prototype.getSecurityId, write: SecurityInfo.prototype.setSecurityId });
                Element_add(SecurityInfo, { name: "SECNAME", required: true, order: 20, type: String, read: SecurityInfo.prototype.getSecurityName, write: SecurityInfo.prototype.setSecurityName });
                Element_add(SecurityInfo, { name: "TICKER", order: 30, type: String, read: SecurityInfo.prototype.getTickerSymbol, write: SecurityInfo.prototype.setTickerSymbol });
                Element_add(SecurityInfo, { name: "FIID", order: 40, type: String, read: SecurityInfo.prototype.getFiId, write: SecurityInfo.prototype.setFiId });
                Element_add(SecurityInfo, { name: "RATING", order: 50, type: String, read: SecurityInfo.prototype.getRating, write: SecurityInfo.prototype.setRating });
                Element_add(SecurityInfo, { name: "UNITPRICE", order: 60, type: Number, read: SecurityInfo.prototype.getUnitPrice, write: SecurityInfo.prototype.setUnitPrice });
                Element_add(SecurityInfo, { name: "DTASOF", order: 70, type: Date, read: SecurityInfo.prototype.getUnitPriceAsOfDate, write: SecurityInfo.prototype.setUnitPriceAsOfDate });
                Element_add(SecurityInfo, { name: "CURRENCY", order: 80, type: String, read: SecurityInfo.prototype.getCurrencyCode, write: SecurityInfo.prototype.setCurrencyCode });
                Element_add(SecurityInfo, { name: "MEMO", order: 90, type: String, read: SecurityInfo.prototype.getMemo, write: SecurityInfo.prototype.setMemo });
            })(seclist = data.seclist || (data.seclist = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='SecurityInfo'/>
///<reference path='SecurityId'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var seclist;
            (function (seclist) {
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                /**
                 * Base class for info about the various types of securities.
                 * @see "Section 13.8.5.1, OFX Spec"
                 * <br>
                 * This class exposes a read-only view of the flattened aggregates that are
                 * common to all security info as a convenience to application
                 * developers who may not find the ofx aggregation model intuitive.
                 *
                 * @author Jon Perlow
                 */
                var BaseSecurityInfo = (function () {
                    function BaseSecurityInfo() {
                    }
                    /**
                     * Gets the security info aggregate.
                     *
                     * @return the security info aggregate.
                     */
                    BaseSecurityInfo.prototype.getSecurityInfo = function () {
                        return this.securityInfo;
                    };
                    /**
                     * Sets the security info aggregate.
                     *
                     * @param securityInfo the security info aggregate.
                     */
                    BaseSecurityInfo.prototype.setSecurityInfo = function (securityInfo) {
                        this.securityInfo = securityInfo;
                    };
                    /**
                     * Gets the unique security id for the security. This is a required field according to the OFX
                     * spec.
                     *
                     * @return the security id
                     */
                    BaseSecurityInfo.prototype.getSecurityId = function () {
                        return this.getSecurityInfo().getSecurityId();
                    };
                    /**
                     * Gets the full name of the security. This is a required field according to the OFX spec.
                     *
                     * @return the full name of the security.
                     */
                    BaseSecurityInfo.prototype.getSecurityName = function () {
                        return this.getSecurityInfo().getSecurityName();
                    };
                    /**
                     * Gets the ticker symbol for the security. This is an optional field according to the OFX spec.
                     *
                     * @return the ticket symbol or null if there's no ticker symbol
                     */
                    BaseSecurityInfo.prototype.getTickerSymbol = function () {
                        return this.getSecurityInfo().getTickerSymbol();
                    };
                    /**
                     * Gets the FI ID number for the security. This is an optional field according to the OFX spec.
                     *
                     * @return the FI ID number for the security
                     */
                    BaseSecurityInfo.prototype.getFiId = function () {
                        return this.getSecurityInfo().getFiId();
                    };
                    /**
                     * Gets the rating of the security. This is an optional field according to the OFX spec.
                     *
                     * @return the rating
                     */
                    BaseSecurityInfo.prototype.getRating = function () {
                        return this.getSecurityInfo().getRating();
                    };
                    /**
                     * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
                     * share price. For bonds, this is the percentage of par. For options, this is the per share (not
                     * per contact) price. This is a noptional field according to the OFX spec.
                     * @see "Section 13.9.2.4.3, OFX Spec"
                     *
                     * @return the per unit price
                     */
                    BaseSecurityInfo.prototype.getUnitPrice = function () {
                        return this.getSecurityInfo().getUnitPrice();
                    };
                    /**
                     * Gets the date as-of for the unit price. This is an optional field according to the OFX spec.
                     *
                     * @return the date as-of for the unit price
                     */
                    BaseSecurityInfo.prototype.getUnitPriceAsOfDate = function () {
                        return this.getSecurityInfo().getUnitPriceAsOfDate();
                    };
                    /**
                     * Gets the overriding currency code for the security. If not set, implies the default currency.
                     * This is an optional field according to the OFX spec.
                     *
                     * @return the overriding currency code or null to mean the default currency
                     */
                    BaseSecurityInfo.prototype.getCurrencyCode = function () {
                        return this.getSecurityInfo().getCurrencyCode();
                    };
                    /**
                     * Gets any memo associated with the security. This is an optional field according to the OFX
                     * spec.
                     *
                     * @return the memo
                     */
                    BaseSecurityInfo.prototype.getMemo = function () {
                        return this.getSecurityInfo().getMemo();
                    };
                    return BaseSecurityInfo;
                })();
                seclist.BaseSecurityInfo = BaseSecurityInfo;
                ChildAggregate_add(BaseSecurityInfo, { required: true, order: 10, type: seclist.SecurityInfo, read: BaseSecurityInfo.prototype.getSecurityInfo, write: BaseSecurityInfo.prototype.setSecurityInfo });
            })(seclist = data.seclist || (data.seclist = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/Element_add'/>
///<reference path='BaseSecurityInfo'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var seclist;
            (function (seclist) {
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                /**
                 * Aggregate for a list of securities.
                 * @see "Section 13.8.4, OFX Spec"
                 *
                 * @author Jon Perlow
                 */
                var SecurityList = (function () {
                    function SecurityList() {
                    }
                    SecurityList.prototype.getSecurityInfos = function () {
                        return this.securityInfos;
                    };
                    SecurityList.prototype.setSecurityInfos = function (securityInfos) {
                        this.securityInfos = securityInfos;
                    };
                    return SecurityList;
                })();
                seclist.SecurityList = SecurityList;
                Aggregate_add(SecurityList, "SECLIST");
                ChildAggregate_add(SecurityList, { order: 10, type: Array, collectionEntryType: seclist.BaseSecurityInfo, read: SecurityList.prototype.getSecurityInfos, write: SecurityList.prototype.setSecurityInfos });
            })(seclist = data.seclist || (data.seclist = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../ResponseMessage'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var seclist;
            (function (seclist) {
                var ResponseMessage = ofx4js.domain.data.ResponseMessage;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                /**
                 * Security list response. This is an empty aggregate. The actual security information is included
                 * in the "SECLIST" aggregate.
                 * @see "Section 13.8.3, OFX Spec"
                 *
                 * @author Jon Perlow
                 */
                var SecurityListResponse = (function (_super) {
                    __extends(SecurityListResponse, _super);
                    function SecurityListResponse() {
                        _super.apply(this, arguments);
                    }
                    SecurityListResponse.prototype.getResponseMessageName = function () {
                        return "security list";
                    };
                    return SecurityListResponse;
                })(ResponseMessage);
                seclist.SecurityListResponse = SecurityListResponse;
                Aggregate_add(SecurityListResponse, "SECLISTRS");
            })(seclist = data.seclist || (data.seclist = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var transactions;
                (function (transactions) {
                    /**
                     * Type of investment transaction.
                     * @see "Section 13.9.2.4.4, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    (function (TransactionType) {
                        TransactionType[TransactionType["BUY_DEBT"] = 0] = "BUY_DEBT";
                        TransactionType[TransactionType["BUY_MUTUAL_FUND"] = 1] = "BUY_MUTUAL_FUND";
                        TransactionType[TransactionType["BUY_OPTION"] = 2] = "BUY_OPTION";
                        TransactionType[TransactionType["BUY_OTHER"] = 3] = "BUY_OTHER";
                        TransactionType[TransactionType["BUY_STOCK"] = 4] = "BUY_STOCK";
                        TransactionType[TransactionType["CLOSE_OPTION"] = 5] = "CLOSE_OPTION";
                        TransactionType[TransactionType["INCOME"] = 6] = "INCOME";
                        TransactionType[TransactionType["INVESTMENT_EXPENSE"] = 7] = "INVESTMENT_EXPENSE";
                        TransactionType[TransactionType["JOURNAL_FUND"] = 8] = "JOURNAL_FUND";
                        TransactionType[TransactionType["JOURNAL_SECURITY"] = 9] = "JOURNAL_SECURITY";
                        TransactionType[TransactionType["MARGIN_INTEREST"] = 10] = "MARGIN_INTEREST";
                        TransactionType[TransactionType["REINVEST_INCOME"] = 11] = "REINVEST_INCOME";
                        TransactionType[TransactionType["RETURN_OF_CAPITAL"] = 12] = "RETURN_OF_CAPITAL";
                        TransactionType[TransactionType["SELL_DEBT"] = 13] = "SELL_DEBT";
                        TransactionType[TransactionType["SELL_MUTUAL_FUND"] = 14] = "SELL_MUTUAL_FUND";
                        TransactionType[TransactionType["SELL_OPTION"] = 15] = "SELL_OPTION";
                        TransactionType[TransactionType["SELL_OTHER"] = 16] = "SELL_OTHER";
                        TransactionType[TransactionType["SELL_STOCK"] = 17] = "SELL_STOCK";
                        TransactionType[TransactionType["SPLIT"] = 18] = "SPLIT";
                        TransactionType[TransactionType["TRANSFER"] = 19] = "TRANSFER";
                    })(transactions.TransactionType || (transactions.TransactionType = {}));
                    var TransactionType = transactions.TransactionType;
                })(transactions = investment.transactions || (investment.transactions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='TransactionType'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var transactions;
                (function (transactions) {
                    /**
                     * Base class for all investment transactions.
                     * <br>
                     * This class exposes a read-only view of the flattened aggregates that are
                     * common to all investment transactions as a convenience to application
                     * developers who may not find the ofx aggregation model intuitive.
                     *
                     * @author Jon Perlow
                     */
                    var BaseInvestmentTransaction = (function () {
                        function BaseInvestmentTransaction(transactionType) {
                            this.transactionType = transactionType;
                        }
                        /**
                         * Gets the type of transaction.
                         *
                         * @return the type of transaction
                         */
                        BaseInvestmentTransaction.prototype.getTransactionType = function () {
                            return this.transactionType;
                        };
                        /**
                         * Gets the {@link InvestmentTransaction} aggregate.
                         *
                         * @return the {@link InvestmentTransaction} aggregate
                         */
                        BaseInvestmentTransaction.prototype.getInvestmentTransaction = function () {
                            throw new ofx4js.Error("abstract");
                        };
                        /**
                         * Gets the unique financial institution assigned transaction id. This is a
                         * required field according to the OFX spec.
                         * @see "Section 13.9.2.4.1, OFX Spec"
                         *
                         * @return the financial institution asssigned transaction id
                         */
                        BaseInvestmentTransaction.prototype.getTransactionId = function () {
                            return this.getInvestmentTransaction().getTransactionId();
                        };
                        /**
                         * Gets the server assigned transaction id. This is an optional field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.4.1, OFX Spec"
                         *
                         * @return the server assigned transaction id
                         */
                        BaseInvestmentTransaction.prototype.getServerId = function () {
                            return this.getInvestmentTransaction().getServerId();
                        };
                        /**
                         * Gets the trade date of the transaction. For stock splits, this is the
                         * day of record. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.4.1, OFX Spec"
                         *
                         * @return the trade date
                         */
                        BaseInvestmentTransaction.prototype.getTradeDate = function () {
                            return this.getInvestmentTransaction().getTradeDate();
                        };
                        /**
                         * Gets the settlement date of the transaction. For stock splits, this is the
                         * day of of execution. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.1, OFX Spec"
                         *
                         * @return the trade date
                         */
                        BaseInvestmentTransaction.prototype.getSettlementDate = function () {
                            return this.getInvestmentTransaction().getSettlementDate();
                        };
                        /**
                         * For a reveral transaction, gets the financial institution assigned
                         * transaction id for the transaction being revesed.
                         * @see "Section 13.9.2.4.1, OFX Spec"
                         *
                         * @return the transaction id of the transaction being reversed
                         */
                        BaseInvestmentTransaction.prototype.getReversalTransactionId = function () {
                            return this.getInvestmentTransaction().getReversalTransactionId();
                        };
                        /**
                         * Gets the memo associated with the transaction. This is an optional field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.4.1, OFX Spec"
                         *
                         * @return the memo
                         */
                        BaseInvestmentTransaction.prototype.getMemo = function () {
                            return this.getInvestmentTransaction().getMemo();
                        };
                        return BaseInvestmentTransaction;
                    })();
                    transactions.BaseInvestmentTransaction = BaseInvestmentTransaction;
                })(transactions = investment.transactions || (investment.transactions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var transactions;
                (function (transactions) {
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * Investment transaction aggregate ("INVTRAN").
                     * @see "Section 13.9.2.4.1, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var InvestmentTransaction = (function () {
                        function InvestmentTransaction() {
                        }
                        /**
                         * Gets the unique financial institution assigned transaction id. This is a
                         * required field according to the OFX spec.
                         * @see "Section 13.9.2.4.1, OFX Spec"
                         *
                         * @return the financial institution asssigned transaction id
                         */
                        InvestmentTransaction.prototype.getTransactionId = function () {
                            return this.transactionId;
                        };
                        /**
                         * Sets the unique financial institution assigned transaction id. This is a
                         * required field according to the OFX spec.
                         * @see "Section 13.9.2.4.1, OFX Spec"
                         *
                         * @param transactionId the financial institution asssigned transaction id
                         */
                        InvestmentTransaction.prototype.setTransactionId = function (transactionId) {
                            this.transactionId = transactionId;
                        };
                        /**
                         * Gets the server assigned transaction id. This is an optional field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.4.1, OFX Spec"
                         *
                         * @return the server assigned transaction id
                         */
                        InvestmentTransaction.prototype.getServerId = function () {
                            return this.serverId;
                        };
                        /**
                         * Sets the server assigned transaction id. This is an optional field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.4.1, OFX Spec"
                         *
                         * @param serverId the server assigned transaction id
                         */
                        InvestmentTransaction.prototype.setServerId = function (serverId) {
                            this.serverId = serverId;
                        };
                        /**
                         * Gets the trade date of the transaction. For stock splits, this is the
                         * day of record. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.4.1, OFX Spec"
                         *
                         * @return the trade date
                         */
                        InvestmentTransaction.prototype.getTradeDate = function () {
                            return this.tradeDate;
                        };
                        /**
                         * Sets the trade date of the transaction. For stock splits, this is the
                         * day of record. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.4.1, OFX Spec"
                         *
                         * @param tradeDate the trade date
                         */
                        InvestmentTransaction.prototype.setTradeDate = function (tradeDate) {
                            this.tradeDate = tradeDate;
                        };
                        /**
                         * Gets the settlement date of the transaction. For stock splits, this is the
                         * day of of execution. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.1, OFX Spec"
                         *
                         * @return the trade date
                         */
                        InvestmentTransaction.prototype.getSettlementDate = function () {
                            return this.settlementDate;
                        };
                        /**
                         * Sets the settlement date of the transaction. For stock splits, this is the
                         * day of of execution. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.1, OFX Spec"
                         *
                         * @param settlementDate the trade date
                         */
                        InvestmentTransaction.prototype.setSettlementDate = function (settlementDate) {
                            this.settlementDate = settlementDate;
                        };
                        /**
                         * For a reveral transaction, gets the financial institution assigned
                         * transaction id for the transaction being revesed.
                         * @see "Section 13.9.2.4.1, OFX Spec"
                         *
                         * @return the transaction id of the transaction being reversed
                         */
                        InvestmentTransaction.prototype.getReversalTransactionId = function () {
                            return this.reversalTransactionId;
                        };
                        /**
                         * For a reveral transaction, gets the financial institution assigned
                         * transaction id for the transaction being revesed.
                         * @see "Section 13.9.2.4.1, OFX Spec"
                         *
                         * @param reversalTransactionId the transaction id of the transaction being reversed
                         */
                        InvestmentTransaction.prototype.setReversalTransactionId = function (reversalTransactionId) {
                            this.reversalTransactionId = reversalTransactionId;
                        };
                        /**
                         * Gets the memo associated with the transaction. This is an optional field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.4.1, OFX Spec"
                         *
                         * @return the memo
                         */
                        InvestmentTransaction.prototype.getMemo = function () {
                            return this.memo;
                        };
                        /**
                         * Sets the memo associated with the transaction. This is an optional field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.4.1, OFX Spec"
                         *
                         * @param memo the memo
                         */
                        InvestmentTransaction.prototype.setMemo = function (memo) {
                            this.memo = memo;
                        };
                        return InvestmentTransaction;
                    })();
                    transactions.InvestmentTransaction = InvestmentTransaction;
                    Aggregate_add(InvestmentTransaction, "INVTRAN");
                    Element_add(InvestmentTransaction, { name: "FITID", required: true, order: 0, type: String, read: InvestmentTransaction.prototype.getTransactionId, write: InvestmentTransaction.prototype.setTransactionId });
                    Element_add(InvestmentTransaction, { name: "SRVRTID", order: 10, type: String, read: InvestmentTransaction.prototype.getServerId, write: InvestmentTransaction.prototype.setServerId });
                    Element_add(InvestmentTransaction, { name: "DTTRADE", required: true, order: 20, type: Date, read: InvestmentTransaction.prototype.getTradeDate, write: InvestmentTransaction.prototype.setTradeDate });
                    Element_add(InvestmentTransaction, { name: "DTSETTLE", order: 30, type: Date, read: InvestmentTransaction.prototype.getSettlementDate, write: InvestmentTransaction.prototype.setSettlementDate });
                    Element_add(InvestmentTransaction, { name: "REVERSALFITID", order: 40, type: String, read: InvestmentTransaction.prototype.getReversalTransactionId, write: InvestmentTransaction.prototype.setReversalTransactionId });
                    Element_add(InvestmentTransaction, { name: "MEMO", order: 50, type: String, read: InvestmentTransaction.prototype.getMemo, write: InvestmentTransaction.prototype.setMemo });
                })(transactions = investment.transactions || (investment.transactions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='BaseInvestmentTransaction'/>
///<reference path='InvestmentTransaction'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var transactions;
                (function (transactions) {
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    /**
                     * Base class for investment transactions that aren't buys or sales..
                     * <br>
                     * This class exposes a read-only view of the flattened aggregates that are
                     * common to all investment transactions as a convenience to application
                     * developers who may not find the ofx aggregation model intuitive.
                     *
                     * @author Jon Perlow
                     */
                    var BaseOtherInvestmentTransaction = (function (_super) {
                        __extends(BaseOtherInvestmentTransaction, _super);
                        function BaseOtherInvestmentTransaction(transactionType) {
                            _super.call(this, transactionType);
                        }
                        /**
                         * Gets the {@link InvestmentTransaction} aggregate.
                         *
                         * @return the {@link InvestmentTransaction} aggregate
                         */
                        // @Override
                        BaseOtherInvestmentTransaction.prototype.getInvestmentTransaction = function () {
                            return this.investmentTransaction;
                        };
                        /**
                         * Sets the {@link InvestmentTransaction} aggregate.
                         *
                         * @param investmentTransaction the {@link InvestmentTransaction} aggregate
                         */
                        BaseOtherInvestmentTransaction.prototype.setInvestmentTransaction = function (investmentTransaction) {
                            this.investmentTransaction = investmentTransaction;
                        };
                        return BaseOtherInvestmentTransaction;
                    })(transactions.BaseInvestmentTransaction);
                    transactions.BaseOtherInvestmentTransaction = BaseOtherInvestmentTransaction;
                    ChildAggregate_add(BaseOtherInvestmentTransaction, { order: 10, type: transactions.InvestmentTransaction, read: BaseOtherInvestmentTransaction.prototype.getInvestmentTransaction, write: BaseOtherInvestmentTransaction.prototype.setInvestmentTransaction });
                })(transactions = investment.transactions || (investment.transactions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
///<reference path='../../investment/accounts/SubAccountType'/>
///<reference path='../../common/Transaction'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var transactions;
                (function (transactions) {
                    var Transaction = ofx4js.domain.data.common.Transaction;
                    var SubAccountType_fromOfx = ofx4js.domain.data.investment.accounts.SubAccountType_fromOfx;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * Bank transactions that are part of an investment account statement. Wraps a {@link Transaction}.
                     * @see "Section 13.9.2.3, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var InvestmentBankTransaction = (function () {
                        function InvestmentBankTransaction() {
                        }
                        /**
                         * Gets the wrapped transaction aggregate.
                         * @return the wrapped transaction
                         */
                        InvestmentBankTransaction.prototype.getTransaction = function () {
                            return this.transaction;
                        };
                        /**
                         * Sets the wrapped transaction aggregate.
                         * @param transaction the wrapped transaction
                         */
                        InvestmentBankTransaction.prototype.setTransaction = function (transaction) {
                            this.transaction = transaction;
                        };
                        /**
                         * Gets the sub account type that the security is from (e.g. CASH, MARGIN, SHORT, OTHER).
                         * @see "Section 13.9.2.4.2, OFX Spec"
                         *
                         * @return the sub account fund for the transaction
                         */
                        InvestmentBankTransaction.prototype.getSubAccountFund = function () {
                            return this.subAccountFund;
                        };
                        /**
                         * Sets the sub account type that the security is from (e.g. CASH, MARGIN, SHORT, OTHER).
                         * @see "Section 13.9.2.4.2, OFX Spec"
                         *
                         * @param subAccountFund the sub account fund for the transaction
                         */
                        InvestmentBankTransaction.prototype.setSubAccountFund = function (subAccountFund) {
                            this.subAccountFund = subAccountFund;
                        };
                        /**
                         * Gets the result of getSubAccountFund as one of the well-known types.
                         *
                         * @return the type of null if it wasn't one of the well known types
                         */
                        InvestmentBankTransaction.prototype.getSubAccountFundEnum = function () {
                            return SubAccountType_fromOfx(this.getSubAccountFund());
                        };
                        return InvestmentBankTransaction;
                    })();
                    transactions.InvestmentBankTransaction = InvestmentBankTransaction;
                    Aggregate_add(InvestmentBankTransaction, "INVBANKTRAN");
                    ChildAggregate_add(InvestmentBankTransaction, { order: 10, type: Transaction, read: InvestmentBankTransaction.prototype.getTransaction, write: InvestmentBankTransaction.prototype.setTransaction });
                    Element_add(InvestmentBankTransaction, { name: "SUBACCTFUND", required: true, order: 20, type: String, read: InvestmentBankTransaction.prototype.getSubAccountFund, write: InvestmentBankTransaction.prototype.setSubAccountFund });
                })(transactions = investment.transactions || (investment.transactions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
///<reference path='BaseOtherInvestmentTransaction'/>
///<reference path='InvestmentBankTransaction'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var transactions;
                (function (_transactions) {
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * The transaction list aggregate.
                     * @see "Section 13.9.1.2, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var InvestmentTransactionList = (function () {
                        function InvestmentTransactionList() {
                        }
                        /**
                         * Gets the start date. This is a required field according to the OFX spec.
                         *
                         * @return The start date
                         */
                        InvestmentTransactionList.prototype.getStart = function () {
                            return this.start;
                        };
                        /**
                         * Sets the start date. This is a required field according to the OFX spec.
                         *
                         * @param start The start date
                         */
                        InvestmentTransactionList.prototype.setStart = function (start) {
                            this.start = start;
                        };
                        /**
                         * Gets the end date. This is a required field according to the OFX spec.
                         *
                         * @return he end date
                         */
                        InvestmentTransactionList.prototype.getEnd = function () {
                            return this.end;
                        };
                        /**
                         * Sets the end date. This is a required field according to the OFX spec.
                         *
                         * @param end the end date
                         */
                        InvestmentTransactionList.prototype.setEnd = function (end) {
                            this.end = end;
                        };
                        /**
                         * Gets the investment transaction list. This is a heterogenous list of different types of
                         * transactions returned in the order the brokerage provides them.
                         *
                         * @return the investment transaction list
                         */
                        InvestmentTransactionList.prototype.getInvestmentTransactions = function () {
                            return this.transactions;
                        };
                        /**
                         * Sets the investment transaction list. This is a heterogenous list of different types of
                         * transactions returned in the order the brokerage provides them.
                         *
                         * @param transactions the investment transaction list
                         */
                        InvestmentTransactionList.prototype.setInvestmentTransactions = function (transactions) {
                            this.transactions = transactions;
                        };
                        /**
                         * Gets the bank transaction list.
                         *
                         * @return the bank transaction list
                         */
                        InvestmentTransactionList.prototype.getBankTransactions = function () {
                            return this.bankTransactions;
                        };
                        /**
                         * Sets the bank transaction list.
                         *
                         * @param bankTransactions the bank transaction list
                         */
                        InvestmentTransactionList.prototype.setBankTransactions = function (bankTransactions) {
                            this.bankTransactions = bankTransactions;
                        };
                        return InvestmentTransactionList;
                    })();
                    _transactions.InvestmentTransactionList = InvestmentTransactionList;
                    Aggregate_add(InvestmentTransactionList, "INVTRANLIST");
                    Element_add(InvestmentTransactionList, { name: "DTSTART", required: true, order: 0, type: Date, read: InvestmentTransactionList.prototype.getStart, write: InvestmentTransactionList.prototype.setStart });
                    Element_add(InvestmentTransactionList, { name: "DTEND", required: true, order: 10, type: Date, read: InvestmentTransactionList.prototype.getEnd, write: InvestmentTransactionList.prototype.setEnd });
                    ChildAggregate_add(InvestmentTransactionList, { order: 20, type: Array, collectionEntryType: _transactions.BaseInvestmentTransaction, read: InvestmentTransactionList.prototype.getInvestmentTransactions, write: InvestmentTransactionList.prototype.setInvestmentTransactions });
                    ChildAggregate_add(InvestmentTransactionList, { order: 30, type: Array, collectionEntryType: _transactions.InvestmentBankTransaction, read: InvestmentTransactionList.prototype.getBankTransactions, write: InvestmentTransactionList.prototype.setBankTransactions });
                })(transactions = investment.transactions || (investment.transactions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../../../meta/Element_add'/>
///<reference path='Currency'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var common;
            (function (common) {
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                (function (BalanceRecordType) {
                    BalanceRecordType[BalanceRecordType["DOLLAR"] = 0] = "DOLLAR";
                    BalanceRecordType[BalanceRecordType["PERCENT"] = 1] = "PERCENT";
                    BalanceRecordType[BalanceRecordType["NUMBER"] = 2] = "NUMBER";
                })(common.BalanceRecordType || (common.BalanceRecordType = {}));
                var BalanceRecordType = common.BalanceRecordType;
                /**
                 * @author Ryan Heaton
                 * @see "Section 3.1.3, OFX Spec"
                 */
                var BalanceRecord = (function () {
                    function BalanceRecord() {
                    }
                    /**
                     * Name of the balance.
                     *
                     * @return Name of the balance.
                     */
                    BalanceRecord.prototype.getName = function () {
                        return name;
                    };
                    /**
                     * Name of the balance.
                     *
                     * @param name Name of the balance.
                     */
                    BalanceRecord.prototype.setName = function (name) {
                        this.name = name;
                    };
                    /**
                     * Description of the balance.
                     *
                     * @return Description of the balance.
                     */
                    BalanceRecord.prototype.getDescription = function () {
                        return this.description;
                    };
                    /**
                     * Description of the balance.
                     *
                     * @param description Description of the balance.
                     */
                    BalanceRecord.prototype.setDescription = function (description) {
                        this.description = description;
                    };
                    /**
                     * Type of the balance.
                     *
                     * @return Type of the balance.
                     */
                    BalanceRecord.prototype.getType = function () {
                        return this.type;
                    };
                    /**
                     * Type of the balance.
                     *
                     * @param type Type of the balance.
                     */
                    BalanceRecord.prototype.setType = function (type) {
                        this.type = type;
                    };
                    /**
                     * The value of the balance.
                     *
                     * @return The value of the balance.
                     */
                    BalanceRecord.prototype.getValue = function () {
                        return this.value;
                    };
                    /**
                     * The value of the balance.
                     *
                     * @param value The value of the balance.
                     */
                    BalanceRecord.prototype.setValue = function (value) {
                        this.value = value;
                    };
                    /**
                     * Timestamp of the balance.
                     *
                     * @return Timestamp of the balance.
                     */
                    BalanceRecord.prototype.getTimestamp = function () {
                        return this.timestamp;
                    };
                    /**
                     * Timestamp of the balance.
                     *
                     * @param timestamp Timestamp of the balance.
                     */
                    BalanceRecord.prototype.setTimestamp = function (timestamp) {
                        this.timestamp = timestamp;
                    };
                    /**
                     * Currency.
                     *
                     * @return Currency.
                     */
                    BalanceRecord.prototype.getCurrency = function () {
                        return this.currency;
                    };
                    /**
                     * Currency.
                     *
                     * @param currency Currency.
                     */
                    BalanceRecord.prototype.setCurrency = function (currency) {
                        this.currency = currency;
                    };
                    return BalanceRecord;
                })();
                common.BalanceRecord = BalanceRecord;
                Aggregate_add(BalanceRecord, "BAL");
                Element_add(BalanceRecord, { name: "NAME", required: true, order: 0, type: String, read: BalanceRecord.prototype.getName, write: BalanceRecord.prototype.setName });
                Element_add(BalanceRecord, { name: "DESC", required: true, order: 10, type: String, read: BalanceRecord.prototype.getDescription, write: BalanceRecord.prototype.setDescription });
                Element_add(BalanceRecord, { name: "BALTYPE", required: true, order: 20, type: BalanceRecordType, read: BalanceRecord.prototype.getType, write: BalanceRecord.prototype.setType });
                Element_add(BalanceRecord, { name: "VALUE", required: true, order: 30, type: String, read: BalanceRecord.prototype.getValue, write: BalanceRecord.prototype.setValue });
                Element_add(BalanceRecord, { name: "DTASOF", order: 40, type: Date, read: BalanceRecord.prototype.getTimestamp, write: BalanceRecord.prototype.setTimestamp });
                ChildAggregate_add(BalanceRecord, { order: 50, type: common.Currency, read: BalanceRecord.prototype.getCurrency, write: BalanceRecord.prototype.setCurrency });
            })(common = data.common || (data.common = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
///<reference path='../../common/BalanceRecord'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var statements;
                (function (statements) {
                    var BalanceRecord = ofx4js.domain.data.common.BalanceRecord;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    /**
                     * Aggregate for the investment balance list.
                     * @see "Section 13.9.2.7, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var BalanceList = (function () {
                        function BalanceList() {
                        }
                        /**
                         * Gets the list of balance records.
                         *
                         * @return the list of balance records.
                         */
                        BalanceList.prototype.getBalanceRecords = function () {
                            return this.balanceRecords;
                        };
                        /**
                         * Sets the list of balance records.
                         *
                         * @param balanceRecords the list of balance records.
                         */
                        BalanceList.prototype.setBalanceRecords = function (balanceRecords) {
                            this.balanceRecords = balanceRecords;
                        };
                        return BalanceList;
                    })();
                    statements.BalanceList = BalanceList;
                    Aggregate_add(BalanceList, "BALLIST");
                    ChildAggregate_add(BalanceList, { order: 10, type: Array, collectionEntryType: BalanceRecord, read: BalanceList.prototype.getBalanceRecords, write: BalanceList.prototype.setBalanceRecords });
                })(statements = investment.statements || (investment.statements = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
///<reference path='BalanceList'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var statements;
                (function (statements) {
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * Aggregate for the investment balance.
                     * @see "Section 13.9.2.7, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var InvestmentBalance = (function () {
                        function InvestmentBalance() {
                        }
                        /**
                         * Gets the available cash balance across all sub-accounts, including sweep funds. This is
                         * required field according to the OFX spec.
                         *
                         * @return the available cash balance
                         */
                        InvestmentBalance.prototype.getAvailableCash = function () {
                            return this.availableCash;
                        };
                        /**
                         * Sets the available cash balance across all sub-accounts, including sweep funds. This is
                         * required field according to the OFX spec.
                         *
                         * @param availableCash the available cash balance
                         */
                        InvestmentBalance.prototype.setAvailableCash = function (availableCash) {
                            this.availableCash = availableCash;
                        };
                        /**
                         * Gets the margin account balance. A positive balance indicates a positive cash balance, while
                         * a negative balance indicates the customer borrowed funds. This is a required field according
                         * to the OFX spec.
                         *
                         * @return the margin account balance
                         */
                        InvestmentBalance.prototype.getMarginBalance = function () {
                            return this.marginBalance;
                        };
                        /**
                         * Sets the margin account balance. A positive balance indicates a positive cash balance, while
                         * a negative balance indicates the customer borrowed funds. This is a required field according
                         * to the OFX spec.
                         *
                         * @param marginBalance the margin account balance
                         */
                        InvestmentBalance.prototype.setMarginBalance = function (marginBalance) {
                            this.marginBalance = marginBalance;
                        };
                        /**
                         * Gets the market value of all short positions. This is a positive balance. This is a required
                         * field according to the OFX spec.
                         *
                         * @return the market value of all short positions
                         */
                        InvestmentBalance.prototype.getShortBalance = function () {
                            return this.shortBalance;
                        };
                        /**
                         * Sets the market value of all short positions. This is a positive balance. This is a required
                         * field according to the OFX spec.
                         *
                         * @param shortBalance the market value of all short positions
                         */
                        InvestmentBalance.prototype.setShortBalance = function (shortBalance) {
                            this.shortBalance = shortBalance;
                        };
                        /**
                         * Gets the buying power amount. This is an optional field according to the OFX spec.
                         *
                         * @return the buying power
                         */
                        InvestmentBalance.prototype.getBuyingPower = function () {
                            return this.buyingPower;
                        };
                        /**
                         * Sets the buying power amount. This is an optional field according to the OFX spec.
                         *
                         * @param buyingPower the buying power
                         */
                        InvestmentBalance.prototype.setBuyingPower = function (buyingPower) {
                            this.buyingPower = buyingPower;
                        };
                        /**
                         * Gets the investment balance list. This is an optional field according to the OFX spec.
                         *
                         * @return the investment balance list
                         */
                        InvestmentBalance.prototype.getBalanceList = function () {
                            return this.balanceList;
                        };
                        /**
                         * Sets the investment balance list. This is an optional field according to the OFX spec.
                         *
                         * @param balanceList the investment balance list
                         */
                        InvestmentBalance.prototype.setBalanceList = function (balanceList) {
                            this.balanceList = balanceList;
                        };
                        return InvestmentBalance;
                    })();
                    statements.InvestmentBalance = InvestmentBalance;
                    Aggregate_add(InvestmentBalance, "INVBAL");
                    Element_add(InvestmentBalance, { name: "AVAILCASH", required: true, order: 10, type: Number, read: InvestmentBalance.prototype.getAvailableCash, write: InvestmentBalance.prototype.setAvailableCash });
                    Element_add(InvestmentBalance, { name: "MARGINBALANCE", required: true, order: 20, type: Number, read: InvestmentBalance.prototype.getMarginBalance, write: InvestmentBalance.prototype.setMarginBalance });
                    Element_add(InvestmentBalance, { name: "SHORTBALANCE", required: true, order: 30, type: Number, read: InvestmentBalance.prototype.getShortBalance, write: InvestmentBalance.prototype.setShortBalance });
                    Element_add(InvestmentBalance, { name: "BUYPOWER", order: 40, type: Number, read: InvestmentBalance.prototype.getBuyingPower, write: InvestmentBalance.prototype.setBuyingPower });
                    ChildAggregate_add(InvestmentBalance, { order: 50, type: statements.BalanceList, read: InvestmentBalance.prototype.getBalanceList, write: InvestmentBalance.prototype.setBalanceList });
                })(statements = investment.statements || (investment.statements = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
///<reference path='../../common/StatementResponse'/>
///<reference path='../../investment/accounts/InvestmentAccountDetails'/>
///<reference path='../../investment/positions/InvestmentPositionList'/>
///<reference path='../../seclist/SecurityList'/>
///<reference path='../../seclist/SecurityListResponse'/>
///<reference path='../../investment/transactions/InvestmentTransactionList'/>
///<reference path='InvestmentBalance'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var statements;
                (function (statements) {
                    var StatementResponse = ofx4js.domain.data.common.StatementResponse;
                    var InvestmentAccountDetails = ofx4js.domain.data.investment.accounts.InvestmentAccountDetails;
                    var InvestmentPositionList = ofx4js.domain.data.investment.positions.InvestmentPositionList;
                    var InvestmentTransactionList = ofx4js.domain.data.investment.transactions.InvestmentTransactionList;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * Aggregate for the investment statement download response.
                     * @see "Section 13.9.2.2, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var InvestmentStatementResponse = (function (_super) {
                        __extends(InvestmentStatementResponse, _super);
                        function InvestmentStatementResponse() {
                            _super.apply(this, arguments);
                        }
                        /**
                         * Gets the name of the response message.
                         *
                         * @return the name of the response message
                         */
                        //@Override
                        InvestmentStatementResponse.prototype.getResponseMessageName = function () {
                            return "investment statement";
                        };
                        /**
                         * Gets the date and time for the statement download. This is a required field according to the
                         * OFX spec.
                         *
                         * @return the date and time for the statement download
                         */
                        InvestmentStatementResponse.prototype.getDateOfStatement = function () {
                            return this.dateOfStatement;
                        };
                        /**
                         * Sets the date and time for the statement download. This is a required field according to the
                         * OFX spec.
                         *
                         * @param dateOfStatement the date and time for the statement download
                         */
                        InvestmentStatementResponse.prototype.setDateOfStatement = function (dateOfStatement) {
                            this.dateOfStatement = dateOfStatement;
                        };
                        /**
                         * Gets the account for the statement. This is a required field according to the OFX spec.
                         *
                         * @return the account for the statement
                         */
                        InvestmentStatementResponse.prototype.getAccount = function () {
                            return this.account;
                        };
                        /**
                         * Sets the account for the statement. This is a required field according to the OFX spec.
                         *
                         * @param account the account for the statement
                         */
                        InvestmentStatementResponse.prototype.setAccount = function (account) {
                            this.account = account;
                        };
                        /**
                         * Gets the transaction list aggregate. This is an optional field according to the OFX spec.
                         *
                         * @return the transaction list aggregate
                         */
                        InvestmentStatementResponse.prototype.getInvestmentTransactionList = function () {
                            return this.investmentTransactionList;
                        };
                        /**
                         * Sets the transaction list aggregate. This is an optional field according to the OFX spec.
                         *
                         * @param transactionList the transaction list aggregate
                         */
                        InvestmentStatementResponse.prototype.setInvestmentTransactionList = function (transactionList) {
                            this.investmentTransactionList = transactionList;
                        };
                        /**
                         * Gets the position list aggreate. This is an optional field according to the OFX spec.
                         *
                         * @return the position list aggregate
                         */
                        InvestmentStatementResponse.prototype.getPositionList = function () {
                            return this.positionList;
                        };
                        /**
                         * Sets the position list aggreate. This is an optional field according to the OFX spec.
                         *
                         * @param positionList the position list aggregate
                         */
                        InvestmentStatementResponse.prototype.setPositionList = function (positionList) {
                            this.positionList = positionList;
                        };
                        /**
                         * Gets the account balance. This is an optional field according to the OFX spec.
                         *
                         * @return the account balance
                         */
                        InvestmentStatementResponse.prototype.getAccountBalance = function () {
                            return this.accountBalance;
                        };
                        /**
                         * Sets the account balance. This is an optional field according to the OFX spec.
                         *
                         * @param accountBalance the account balance
                         */
                        InvestmentStatementResponse.prototype.setAccountBalance = function (accountBalance) {
                            this.accountBalance = accountBalance;
                        };
                        /**
                         * Gets the security list aggregate.
                         * <br>
                         * This is not actually technically part of the investment statement responsr aggregate, but
                         * according to Section 13.8.4, OFX spec, this aggregate can appear the overall response and
                         * we provide it here for convenience.
                         *
                         * @return the security list aggregate
                         */
                        InvestmentStatementResponse.prototype.getSecurityList = function () {
                            return this.securityList;
                        };
                        /**
                         * Sets the security list aggregate.
                         * <br>
                         * This is not actually technically part of the investment statement responsr aggregate, but
                         * according to Section 13.8.4, OFX spec, this aggregate can appear the overall response and
                         * we provide it here for convenience.
                         *
                         * @param securityList the security list aggregate
                         */
                        InvestmentStatementResponse.prototype.setSecurityList = function (securityList) {
                            this.securityList = securityList;
                        };
                        return InvestmentStatementResponse;
                    })(StatementResponse);
                    statements.InvestmentStatementResponse = InvestmentStatementResponse;
                    Aggregate_add(InvestmentStatementResponse, "INVSTMTRS");
                    Element_add(InvestmentStatementResponse, { name: "DTASOF", required: true, order: 60, type: Date, read: InvestmentStatementResponse.prototype.getDateOfStatement, write: InvestmentStatementResponse.prototype.setDateOfStatement });
                    ChildAggregate_add(InvestmentStatementResponse, { name: "INVACCTFROM", required: true, order: 10, type: InvestmentAccountDetails, read: InvestmentStatementResponse.prototype.getAccount, write: InvestmentStatementResponse.prototype.setAccount });
                    ChildAggregate_add(InvestmentStatementResponse, { order: 70, type: InvestmentTransactionList, read: InvestmentStatementResponse.prototype.getInvestmentTransactionList, write: InvestmentStatementResponse.prototype.setInvestmentTransactionList });
                    ChildAggregate_add(InvestmentStatementResponse, { order: 80, type: InvestmentPositionList, read: InvestmentStatementResponse.prototype.getPositionList, write: InvestmentStatementResponse.prototype.setPositionList });
                    ChildAggregate_add(InvestmentStatementResponse, { order: 90, type: statements.InvestmentBalance, read: InvestmentStatementResponse.prototype.getAccountBalance, write: InvestmentStatementResponse.prototype.setAccountBalance });
                })(statements = investment.statements || (investment.statements = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/Element_add'/>
///<reference path='SecurityId'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var seclist;
            (function (seclist) {
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                /**
                 * Security request aggregate.
                 * @see "Section 13.8.2.2, OFX Spec"
                 *
                 * @author Jon Perlow
                 */
                var SecurityRequest = (function () {
                    function SecurityRequest() {
                    }
                    SecurityRequest.prototype.getSecurityId = function () {
                        return this.securityId;
                    };
                    SecurityRequest.prototype.setSecurityId = function (securityId) {
                        this.securityId = securityId;
                        this.tickerSymbol = null;
                        this.fiId = null;
                    };
                    SecurityRequest.prototype.getTickerSymbol = function () {
                        return this.tickerSymbol;
                    };
                    SecurityRequest.prototype.setTickerSymbol = function (tickerSymbol) {
                        this.tickerSymbol = tickerSymbol;
                        this.securityId = null;
                        this.fiId = null;
                    };
                    SecurityRequest.prototype.getFiId = function () {
                        return this.fiId;
                    };
                    SecurityRequest.prototype.setFiId = function (fiId) {
                        this.fiId = fiId;
                        this.securityId = null;
                        this.tickerSymbol = null;
                    };
                    return SecurityRequest;
                })();
                seclist.SecurityRequest = SecurityRequest;
                Aggregate_add(SecurityRequest, "SECRQ");
                Element_add(SecurityRequest, { name: "SECID", order: 10, type: seclist.SecurityId, read: SecurityRequest.prototype.getSecurityId, write: SecurityRequest.prototype.setSecurityId });
                Element_add(SecurityRequest, { name: "TICKER", order: 20, type: String, read: SecurityRequest.prototype.getTickerSymbol, write: SecurityRequest.prototype.setTickerSymbol });
                Element_add(SecurityRequest, { name: "FIID", order: 30, type: String, read: SecurityRequest.prototype.getFiId, write: SecurityRequest.prototype.setFiId });
            })(seclist = data.seclist || (data.seclist = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../OFXException'/>
///<reference path='../domain/data/investment/accounts/InvestmentAccountDetails'/>
///<reference path='../domain/data/investment/statements/InvestmentStatementResponse'/>
///<reference path='../domain/data/seclist/SecurityList'/>
///<reference path='../domain/data/seclist/SecurityListResponse'/>
///<reference path='../domain/data/seclist/SecurityRequest'/>
///<reference path='FinancialInstitutionAccount'/>
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../OFXException'/>
var ofx4js;
(function (ofx4js) {
    var client;
    (function (client) {
        var OFXException = ofx4js.OFXException;
        /**
         * @author Ryan Heaton
         */
        var NoOFXResponseException = (function (_super) {
            __extends(NoOFXResponseException, _super);
            function NoOFXResponseException(message) {
                if (message === void 0) { message = null; }
                _super.call(this, message);
            }
            return NoOFXResponseException;
        })(OFXException);
        client.NoOFXResponseException = NoOFXResponseException;
    })(client = ofx4js.client || (ofx4js.client = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='OFXApplicationContext'/>
var ofx4js;
(function (ofx4js) {
    var client;
    (function (client) {
        var context;
        (function (context) {
            /**
             * Default application context.
             *
             * @author Ryan Heaton
             */
            var DefaultApplicationContext = (function () {
                function DefaultApplicationContext(appId, appVersion) {
                    this.appId = appId;
                    this.appVersion = appVersion;
                }
                DefaultApplicationContext.prototype.getAppId = function () {
                    return this.appId;
                };
                DefaultApplicationContext.prototype.getAppVersion = function () {
                    return this.appVersion;
                };
                return DefaultApplicationContext;
            })();
            context.DefaultApplicationContext = DefaultApplicationContext;
        })(context = client.context || (client.context = {}));
    })(client = ofx4js.client || (ofx4js.client = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='OFXApplicationContext'/>
///<reference path='DefaultApplicationContext'/>
var ofx4js;
(function (ofx4js) {
    var client;
    (function (client) {
        var context;
        (function (_context) {
            /**
             * @author Ryan Heaton
             */
            var OFXApplicationContextHolder = (function () {
                function OFXApplicationContextHolder() {
                }
                /**
                 * Get the current (thread-safe) context.
                 *
                 * @return The thread-safe context.
                 */
                OFXApplicationContextHolder.getCurrentContext = function () {
                    //todo: implement a strategy (perhaps for thread-local access or something)?
                    return this.CURRENT_CONTEXT;
                };
                /**
                 * Set the current context.
                 *
                 * @param context The context.
                 */
                OFXApplicationContextHolder.setCurrentContext = function (context) {
                    this.CURRENT_CONTEXT = context;
                };
                OFXApplicationContextHolder.CURRENT_CONTEXT = new _context.DefaultApplicationContext("Money", "1600"); //some apps fail unless you're Quicken or Money...
                return OFXApplicationContextHolder;
            })();
            _context.OFXApplicationContextHolder = OFXApplicationContextHolder;
        })(context = client.context || (client.context = {}));
    })(client = ofx4js.client || (ofx4js.client = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            /**
             * A message applicable to a request message set.
             *
             * @author Ryan Heaton
             */
            var RequestMessage = (function () {
                function RequestMessage() {
                }
                return RequestMessage;
            })();
            data.RequestMessage = RequestMessage;
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/Element_add'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var common;
            (function (common) {
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                /**
                 * @author Ryan Heaton
                 */
                var StatementRange = (function () {
                    function StatementRange() {
                        this.includeTransactions = true;
                    }
                    /**
                     * The start of the statement range.
                     *
                     * @return The start of the statement range.
                     */
                    StatementRange.prototype.getStart = function () {
                        return this.start;
                    };
                    /**
                     * The start of the statement range.
                     *
                     * @param start The start of the statement range.
                     */
                    StatementRange.prototype.setStart = function (start) {
                        this.start = start;
                    };
                    /**
                     * The end of the statement range.
                     *
                     * @return The end of the statement range.
                     */
                    StatementRange.prototype.getEnd = function () {
                        return this.end;
                    };
                    /**
                     * The end of the statement range.
                     *
                     * @param end The end of the statement range.
                     */
                    StatementRange.prototype.setEnd = function (end) {
                        this.end = end;
                    };
                    /**
                     * Whether to include transactions.
                     *
                     * @return Whether to include transactions.
                     */
                    StatementRange.prototype.getIncludeTransactions = function () {
                        return this.includeTransactions;
                    };
                    /**
                     * Whether to include transactions.
                     *
                     * @param includeTransactions Whether to include transactions.
                     */
                    StatementRange.prototype.setIncludeTransactions = function (includeTransactions) {
                        this.includeTransactions = includeTransactions;
                    };
                    return StatementRange;
                })();
                common.StatementRange = StatementRange;
                Aggregate_add(StatementRange, "INCTRAN");
                Element_add(StatementRange, { name: "DTSTART", order: 0, type: Date, read: StatementRange.prototype.getStart, write: StatementRange.prototype.setStart });
                Element_add(StatementRange, { name: "DTEND", order: 10, type: Date, read: StatementRange.prototype.getEnd, write: StatementRange.prototype.setEnd });
                Element_add(StatementRange, { name: "INCLUDE", required: true, order: 20, type: Boolean, read: StatementRange.prototype.getIncludeTransactions, write: StatementRange.prototype.setIncludeTransactions });
            })(common = data.common || (data.common = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../RequestMessage'/>
///<reference path='StatementRange'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var common;
            (function (common) {
                var RequestMessage = ofx4js.domain.data.RequestMessage;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                /**
                 * @author Ryan Heaton
                 */
                var StatementRequest = (function (_super) {
                    __extends(StatementRequest, _super);
                    function StatementRequest() {
                        _super.apply(this, arguments);
                    }
                    /**
                     * The statement range.
                     *
                     * @return The statement range.
                     */
                    StatementRequest.prototype.getStatementRange = function () {
                        return this.statementRange;
                    };
                    /**
                     * The statement range.
                     *
                     * @param statementRange The statement range.
                     */
                    StatementRequest.prototype.setStatementRange = function (statementRange) {
                        this.statementRange = statementRange;
                    };
                    return StatementRequest;
                })(RequestMessage);
                common.StatementRequest = StatementRequest;
                Aggregate_add(StatementRequest, "STMTRQ");
                ChildAggregate_add(StatementRequest, { name: "INCTRAN", required: false, order: 10, type: common.StatementRange, read: StatementRequest.prototype.getStatementRange, write: StatementRequest.prototype.setStatementRange });
            })(common = data.common || (data.common = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='ResponseMessage'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            /**
             * A message set enclosed in a response envelope.
             *
             * @author Ryan Heaton
             */
            var ResponseMessageSet = (function () {
                function ResponseMessageSet() {
                    this.version = "1";
                }
                ResponseMessageSet.prototype.getType = function () {
                    throw new ofx4js.Error("abstract");
                };
                /**
                 * The version of this message set.
                 *
                 * @return The version of this message set.
                 */
                ResponseMessageSet.prototype.getVersion = function () {
                    return this.version;
                };
                /**
                 * The version of this message set.
                 *
                 * @param version The version of this message set.
                 */
                ResponseMessageSet.prototype.setVersion = function (version) {
                    this.version = version;
                };
                /**
                 * The list of response messages.
                 *
                 * @return The list of response messages.
                 */
                ResponseMessageSet.prototype.getResponseMessages = function () {
                    throw new ofx4js.Error("abstract");
                };
                /*
                  // Inherited.
                  public compareTo(o: ResponseMessageSet): number {
                    return getType().compareTo(o.getType());
                  }
                */
                ResponseMessageSet.contentCompare = function (left, right) {
                    return left.getType() - right.getType();
                };
                return ResponseMessageSet;
            })();
            data.ResponseMessageSet = ResponseMessageSet;
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='Status'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var common;
            (function (common) {
                function instanceof_StatusHolder(obj) {
                    return (obj instanceof Object && (typeof obj.getStatusHolderName === 'function') && (typeof obj.getStatus === 'function'));
                }
                common.instanceof_StatusHolder = instanceof_StatusHolder;
            })(common = data.common || (data.common = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../meta/Aggregate_add'/>
///<reference path='../../meta/ChildAggregate_add'/>
///<reference path='../../meta/Element_add'/>
///<reference path='../../io/AggregateInfo'/>
///<reference path='common/Status'/>
///<reference path='common/StatusHolder'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var Status = ofx4js.domain.data.common.Status;
            var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
            var Element_add = ofx4js.meta.Element_add;
            /**
             * A response message wrapped in a transaction.
             *
             * @author Ryan Heaton
             * @see "Section 2.4.6, OFX Spec"
             */
            var TransactionWrappedResponseMessage = (function (_super) {
                __extends(TransactionWrappedResponseMessage, _super);
                function TransactionWrappedResponseMessage() {
                    _super.apply(this, arguments);
                }
                /**
                 * UID of this transaction.
                 *
                 * @return UID of this transaction.
                 */
                TransactionWrappedResponseMessage.prototype.getUID = function () {
                    return this.UID;
                };
                /**
                 * UID of this transaction.
                 *
                 * @param UID UID of this transaction.
                 */
                TransactionWrappedResponseMessage.prototype.setUID = function (UID) {
                    this.UID = UID;
                };
                /**
                 * Client cookie (echoed back by the response).
                 *
                 * @return Client cookie (echoed back by the response).
                 */
                TransactionWrappedResponseMessage.prototype.getClientCookie = function () {
                    return this.clientCookie;
                };
                /**
                 * Client cookie (echoed back by the response).
                 *
                 * @param clientCookie Client cookie (echoed back by the response).
                 */
                TransactionWrappedResponseMessage.prototype.setClientCookie = function (clientCookie) {
                    this.clientCookie = clientCookie;
                };
                // Inherited.
                TransactionWrappedResponseMessage.prototype.getStatusHolderName = function () {
                    return this.getResponseMessageName();
                };
                // Inherited.
                TransactionWrappedResponseMessage.prototype.getResponseMessageName = function () {
                    var name = "transaction response";
                    if (this.getWrappedMessage() != null) {
                        name = this.getWrappedMessage().getResponseMessageName() + " transaction";
                    }
                    //    else if ((<any>(<Object>this).constructor).Aggregate) {
                    //      // TODO- does this work?
                    //      var aggregate: AggregateInfo = (<any>(<Object>this).constructor).Aggregate;
                    //      name = aggregate.getName() + " transaction";
                    //    }
                    return name;
                };
                /**
                 * Status of the transaction.
                 *
                 * @return Status of the transaction.
                 */
                TransactionWrappedResponseMessage.prototype.getStatus = function () {
                    return this.status;
                };
                /**
                 * Status of the transaction.
                 *
                 * @param status Status of the transaction.
                 */
                TransactionWrappedResponseMessage.prototype.setStatus = function (status) {
                    this.status = status;
                };
                /**
                 * Get the wrapped message.
                 *
                 * @return The wrapped message.
                 */
                TransactionWrappedResponseMessage.prototype.getWrappedMessage = function () {
                    throw new ofx4js.Error("abstract");
                };
                return TransactionWrappedResponseMessage;
            })(data.ResponseMessage);
            data.TransactionWrappedResponseMessage = TransactionWrappedResponseMessage;
            Element_add(TransactionWrappedResponseMessage, { name: "TRNUID", required: true, order: 0, type: String, read: TransactionWrappedResponseMessage.prototype.getUID, write: TransactionWrappedResponseMessage.prototype.setUID });
            Element_add(TransactionWrappedResponseMessage, { name: "CLTCOOKIE", order: 20, type: String, read: TransactionWrappedResponseMessage.prototype.getClientCookie, write: TransactionWrappedResponseMessage.prototype.setClientCookie });
            ChildAggregate_add(TransactionWrappedResponseMessage, { required: true, order: 10, type: Status, read: TransactionWrappedResponseMessage.prototype.getStatus, write: TransactionWrappedResponseMessage.prototype.setStatus });
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../common/StatementResponse'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var banking;
            (function (banking) {
                var StatementResponse = ofx4js.domain.data.common.StatementResponse;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                /**
                 * @author Ryan Heaton
                 */
                var BankStatementResponse = (function (_super) {
                    __extends(BankStatementResponse, _super);
                    function BankStatementResponse() {
                        _super.apply(this, arguments);
                    }
                    BankStatementResponse.prototype.getResponseMessageName = function () {
                        return "bank statement";
                    };
                    /**
                     * The account for the statement.
                     *
                     * @return The account for the statement.
                     */
                    BankStatementResponse.prototype.getAccount = function () {
                        return this.account;
                    };
                    /**
                     * The account for the statement.
                     *
                     * @param account The account for the statement.
                     */
                    BankStatementResponse.prototype.setAccount = function (account) {
                        this.account = account;
                    };
                    return BankStatementResponse;
                })(StatementResponse);
                banking.BankStatementResponse = BankStatementResponse;
                Aggregate_add(BankStatementResponse, "STMTRS");
                ChildAggregate_add(BankStatementResponse, { name: "BANKACCTFROM", order: 10, type: banking.BankAccountDetails, read: BankStatementResponse.prototype.getAccount, write: BankStatementResponse.prototype.setAccount });
            })(banking = data.banking || (data.banking = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../TransactionWrappedResponseMessage'/>
///<reference path='BankStatementResponse'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var banking;
            (function (banking) {
                var TransactionWrappedResponseMessage = ofx4js.domain.data.TransactionWrappedResponseMessage;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                /**
                 * @author Ryan Heaton
                 */
                var BankStatementResponseTransaction = (function (_super) {
                    __extends(BankStatementResponseTransaction, _super);
                    function BankStatementResponseTransaction() {
                        _super.apply(this, arguments);
                    }
                    /**
                     * The message.
                     *
                     * @return The message.
                     */
                    BankStatementResponseTransaction.prototype.getMessage = function () {
                        return this.message;
                    };
                    /**
                     * The message.
                     *
                     * @param message The message.
                     */
                    BankStatementResponseTransaction.prototype.setMessage = function (message) {
                        this.message = message;
                    };
                    // Inherited.
                    BankStatementResponseTransaction.prototype.getWrappedMessage = function () {
                        return this.getMessage();
                    };
                    return BankStatementResponseTransaction;
                })(TransactionWrappedResponseMessage);
                banking.BankStatementResponseTransaction = BankStatementResponseTransaction;
                Aggregate_add(BankStatementResponseTransaction, "STMTTRNRS");
                ChildAggregate_add(BankStatementResponseTransaction, { required: true, order: 30, type: banking.BankStatementResponse, read: BankStatementResponseTransaction.prototype.getMessage, write: BankStatementResponseTransaction.prototype.setMessage });
            })(banking = data.banking || (data.banking = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../MessageSetType'/>
///<reference path='../ResponseMessage'/>
///<reference path='../ResponseMessageSet'/>
///<reference path='BankStatementResponseTransaction'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var banking;
            (function (banking) {
                var MessageSetType = ofx4js.domain.data.MessageSetType;
                var ResponseMessageSet = ofx4js.domain.data.ResponseMessageSet;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                /**
                 * @author Ryan Heaton
                 */
                var BankingResponseMessageSet = (function (_super) {
                    __extends(BankingResponseMessageSet, _super);
                    function BankingResponseMessageSet() {
                        _super.apply(this, arguments);
                    }
                    BankingResponseMessageSet.prototype.getType = function () {
                        return 2 /* banking */;
                    };
                    /**
                     * The statement response list.
                     *
                     * Most OFX files have a single statement response, except MT2OFX
                     * which outputs OFX with multiple statement responses
                     * in a single banking response message set.
                     *
                     * @return The statement response list.
                     */
                    BankingResponseMessageSet.prototype.getStatementResponses = function () {
                        return this.statementResponses;
                    };
                    /**
                     * The statement response.
                     *
                     * @param statementResponses The statement responses.
                     */
                    BankingResponseMessageSet.prototype.setStatementResponses = function (statementResponses) {
                        this.statementResponses = statementResponses;
                    };
                    // Inherited.
                    BankingResponseMessageSet.prototype.getResponseMessages = function () {
                        return this.statementResponses;
                    };
                    /**
                     * The first statement response.
                     *
                     * @return the first bank statement response.
                     * @deprecated Use getStatementResponses() because sometimes there are multiple responses
                     */
                    BankingResponseMessageSet.prototype.getStatementResponse = function () {
                        return this.statementResponses == null || this.statementResponses.length == 0 ? null : this.statementResponses[0];
                    };
                    BankingResponseMessageSet.prototype.setStatementResponse = function (statementResponse) {
                        this.statementResponses = [statementResponse];
                    };
                    return BankingResponseMessageSet;
                })(ResponseMessageSet);
                banking.BankingResponseMessageSet = BankingResponseMessageSet;
                Aggregate_add(BankingResponseMessageSet, "BANKMSGSRSV1");
                ChildAggregate_add(BankingResponseMessageSet, { order: 0, type: Array, collectionEntryType: banking.BankStatementResponseTransaction, read: BankingResponseMessageSet.prototype.getStatementResponses, write: BankingResponseMessageSet.prototype.setStatementResponses });
            })(banking = data.banking || (data.banking = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../common/StatementRequest'/>
///<reference path='BankAccountDetails'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var banking;
            (function (banking) {
                var StatementRequest = ofx4js.domain.data.common.StatementRequest;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                /**
                 * @author Ryan Heaton
                 */
                var BankStatementRequest = (function (_super) {
                    __extends(BankStatementRequest, _super);
                    function BankStatementRequest() {
                        _super.apply(this, arguments);
                    }
                    /**
                     * The account details.
                     *
                     * @return The account details.
                     */
                    BankStatementRequest.prototype.getAccount = function () {
                        return this.account;
                    };
                    /**
                     * The account details.
                     *
                     * @param account The account details.
                     */
                    BankStatementRequest.prototype.setAccount = function (account) {
                        this.account = account;
                    };
                    return BankStatementRequest;
                })(StatementRequest);
                banking.BankStatementRequest = BankStatementRequest;
                Aggregate_add(BankStatementRequest, "STMTRQ");
                ChildAggregate_add(BankStatementRequest, { name: "BANKACCTFROM", required: true, order: 0, type: banking.BankAccountDetails, read: BankStatementRequest.prototype.getAccount, write: BankStatementRequest.prototype.setAccount });
            })(banking = data.banking || (data.banking = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='MessageSetType'/>
///<reference path='RequestMessage'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            /**
             * A message set enclosed in an OFX request envelope.
             *
             * @author Ryan Heaton
             */
            var RequestMessageSet = (function () {
                function RequestMessageSet() {
                    this.version = "1";
                }
                RequestMessageSet.prototype.getType = function () {
                    throw new ofx4js.Error("abstract");
                };
                /**
                 * The version of this request message.
                 *
                 * @return The version of this request message.
                 */
                RequestMessageSet.prototype.getVersion = function () {
                    return this.version;
                };
                /**
                 * The version of this request message.
                 *
                 * @param version The version of this request message.
                 */
                RequestMessageSet.prototype.setVersion = function (version) {
                    this.version = version;
                };
                /**
                 * The request messages for this request message set.
                 *
                 * @return The request messages for this request message set.
                 */
                RequestMessageSet.prototype.getRequestMessages = function () {
                    throw new ofx4js.Error("abstract");
                };
                // Inherited.
                /*public compareTo(o: RequestMessageSet): number {
                  return getType().compareTo(o.getType());
                }*/
                RequestMessageSet.contentCompare = function (left, right) {
                    return left.getType() - right.getType();
                };
                return RequestMessageSet;
            })();
            data.RequestMessageSet = RequestMessageSet;
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../project.d.ts'/>
///<reference path='../../meta/Element_add'/>
///<reference path='RequestMessage'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var Element_add = ofx4js.meta.Element_add;
            var UUID = require("uuid");
            /**
             * A request message wrapped in a transaction.
             *
             * @author Ryan Heaton
             * @see "Section 2.4.6, OFX Spec"
             */
            var TransactionWrappedRequestMessage = (function (_super) {
                __extends(TransactionWrappedRequestMessage, _super);
                function TransactionWrappedRequestMessage(UID) {
                    if (UID === void 0) { UID = UUID.v1(); }
                    _super.call(this);
                    this.UID = UID;
                }
                /**
                 * UID of this transaction.
                 *
                 * @return UID of this transaction.
                 */
                TransactionWrappedRequestMessage.prototype.getUID = function () {
                    return this.UID;
                };
                /**
                 * UID of this transaction.
                 *
                 * @param UID UID of this transaction.
                 */
                TransactionWrappedRequestMessage.prototype.setUID = function (UID) {
                    this.UID = UID;
                };
                /**
                 * Client cookie (echoed back by the response).
                 *
                 * @return Client cookie (echoed back by the response).
                 */
                TransactionWrappedRequestMessage.prototype.getClientCookie = function () {
                    return this.clientCookie;
                };
                /**
                 * Client cookie (echoed back by the response).
                 *
                 * @param clientCookie Client cookie (echoed back by the response).
                 */
                TransactionWrappedRequestMessage.prototype.setClientCookie = function (clientCookie) {
                    this.clientCookie = clientCookie;
                };
                /**
                 * The transaction authorization number.
                 *
                 * @return The transaction authorization number.
                 */
                TransactionWrappedRequestMessage.prototype.getTransactionAuthorizationNumber = function () {
                    return this.transactionAuthorizationNumber;
                };
                /**
                 * The transaction authorization number.
                 *
                 * @param transactionAuthorizationNumber The transaction authorization number.
                 */
                TransactionWrappedRequestMessage.prototype.setTransactionAuthorizationNumber = function (transactionAuthorizationNumber) {
                    this.transactionAuthorizationNumber = transactionAuthorizationNumber;
                };
                /**
                 * Set the wrapped message.
                 *
                 * @param message The wrapped message.
                 */
                TransactionWrappedRequestMessage.prototype.setWrappedMessage = function (message) {
                    throw new ofx4js.Error("abstract");
                };
                return TransactionWrappedRequestMessage;
            })(data.RequestMessage);
            data.TransactionWrappedRequestMessage = TransactionWrappedRequestMessage;
            Element_add(TransactionWrappedRequestMessage, { name: "TRNUID", required: true, order: 0, type: String, read: TransactionWrappedRequestMessage.prototype.getUID, write: TransactionWrappedRequestMessage.prototype.setUID });
            Element_add(TransactionWrappedRequestMessage, { name: "CLTCOOKIE", order: 10, type: String, read: TransactionWrappedRequestMessage.prototype.getClientCookie, write: TransactionWrappedRequestMessage.prototype.setClientCookie });
            Element_add(TransactionWrappedRequestMessage, { name: "TAN", order: 20, type: String, read: TransactionWrappedRequestMessage.prototype.getTransactionAuthorizationNumber, write: TransactionWrappedRequestMessage.prototype.setTransactionAuthorizationNumber });
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../TransactionWrappedRequestMessage'/>
///<reference path='BankStatementRequest'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var banking;
            (function (banking) {
                var TransactionWrappedRequestMessage = ofx4js.domain.data.TransactionWrappedRequestMessage;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                /**
                 * @author Ryan Heaton
                 */
                var BankStatementRequestTransaction = (function (_super) {
                    __extends(BankStatementRequestTransaction, _super);
                    function BankStatementRequestTransaction() {
                        _super.apply(this, arguments);
                    }
                    /**
                     * The message.
                     *
                     * @return The message.
                     */
                    BankStatementRequestTransaction.prototype.getMessage = function () {
                        return this.message;
                    };
                    /**
                     * The message.
                     *
                     * @param message The message.
                     *
                     */
                    BankStatementRequestTransaction.prototype.setMessage = function (message) {
                        this.message = message;
                    };
                    // Inherited.
                    BankStatementRequestTransaction.prototype.setWrappedMessage = function (message) {
                        this.setMessage(message);
                    };
                    return BankStatementRequestTransaction;
                })(TransactionWrappedRequestMessage);
                banking.BankStatementRequestTransaction = BankStatementRequestTransaction;
                Aggregate_add(BankStatementRequestTransaction, "STMTTRNRQ");
                ChildAggregate_add(BankStatementRequestTransaction, { required: true, order: 30, type: banking.BankStatementRequest, read: BankStatementRequestTransaction.prototype.getMessage, write: BankStatementRequestTransaction.prototype.setMessage });
            })(banking = data.banking || (data.banking = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../MessageSetType'/>
///<reference path='../RequestMessageSet'/>
///<reference path='BankStatementRequestTransaction'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var banking;
            (function (banking) {
                var MessageSetType = ofx4js.domain.data.MessageSetType;
                var RequestMessageSet = ofx4js.domain.data.RequestMessageSet;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                /**
                 * @author Ryan Heaton
                 */
                var BankingRequestMessageSet = (function (_super) {
                    __extends(BankingRequestMessageSet, _super);
                    function BankingRequestMessageSet() {
                        _super.apply(this, arguments);
                    }
                    BankingRequestMessageSet.prototype.getType = function () {
                        return 2 /* banking */;
                    };
                    /**
                     * The statement request.
                     *
                     * @return The statement request.
                     */
                    BankingRequestMessageSet.prototype.getStatementRequest = function () {
                        return this.statementRequest;
                    };
                    /**
                     * The statement request.
                     *
                     * @param statementRequest The statement request.
                     */
                    BankingRequestMessageSet.prototype.setStatementRequest = function (statementRequest) {
                        this.statementRequest = statementRequest;
                    };
                    // Inherited.
                    BankingRequestMessageSet.prototype.getRequestMessages = function () {
                        var requestMessages = [];
                        if (this.getStatementRequest() != null) {
                            requestMessages.push(this.getStatementRequest());
                        }
                        return requestMessages;
                    };
                    return BankingRequestMessageSet;
                })(RequestMessageSet);
                banking.BankingRequestMessageSet = BankingRequestMessageSet;
                Aggregate_add(BankingRequestMessageSet, "BANKMSGSRQV1");
                ChildAggregate_add(BankingRequestMessageSet, { order: 0, type: banking.BankStatementRequestTransaction, read: BankingRequestMessageSet.prototype.getStatementRequest, write: BankingRequestMessageSet.prototype.setStatementRequest });
            })(banking = data.banking || (data.banking = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../OFXException'/>
///<reference path='../../client/AccountStatement'/>
///<reference path='../../client/FinancialInstitutionAccount'/>
///<reference path='../../domain/data/common/StatementRange'/>
///<reference path='../../domain/data/common/StatementRequest'/>
///<reference path='../../domain/data/common/StatementResponse'/>
///<reference path='../../domain/data/creditcard/CreditCardAccountDetails'/>
///<reference path='../../domain/data/investment/accounts/InvestmentAccountDetails'/>
///<reference path='../../domain/data/MessageSetType'/>
var ofx4js;
(function (ofx4js) {
    var client;
    (function (client) {
        var impl;
        (function (impl) {
            //import data.* = ofx4js.domain.data.*;
            var MessageSetType = ofx4js.domain.data.MessageSetType;
            var BankAccountDetails = ofx4js.domain.data.banking.BankAccountDetails;
            var StatementRange = ofx4js.domain.data.common.StatementRange;
            var CreditCardAccountDetails = ofx4js.domain.data.creditcard.CreditCardAccountDetails;
            var InvestmentAccountDetails = ofx4js.domain.data.investment.accounts.InvestmentAccountDetails;
            /**
             * Base account implementation. Supports banking and credit card accounts.
             *
             * @author Ryan Heaton
             */
            var BaseAccountImpl = (function () {
                function BaseAccountImpl(details, username, password, institution) {
                    this.details = details;
                    this.username = username;
                    this.password = password;
                    this.institution = institution;
                    this.messageType = this.getMessageSetType(details);
                }
                /**
                 * Get the message set type of the specified details.
                 *
                 * @param details The details.
                 * @return The message set type.
                 */
                BaseAccountImpl.prototype.getMessageSetType = function (details) {
                    var messageType;
                    if (details instanceof BankAccountDetails) {
                        messageType = 2 /* banking */;
                    }
                    else if (this.getDetails() instanceof CreditCardAccountDetails) {
                        messageType = 3 /* creditcard */;
                    }
                    else if (this.getDetails() instanceof InvestmentAccountDetails) {
                        messageType = 4 /* investment */;
                    }
                    else {
                        throw new ofx4js.Error("Illegal details");
                    }
                    return messageType;
                };
                BaseAccountImpl.prototype.readStatement = function (start, end) {
                    var range = new StatementRange();
                    range.setIncludeTransactions(true);
                    range.setStart(start);
                    range.setEnd(end);
                    var request = this.institution.createAuthenticatedRequest(this.username, this.password);
                    var requestTransaction = this.createTransaction();
                    requestTransaction.setWrappedMessage(this.createStatementRequest(this.getDetails(), range));
                    request.getMessageSets().insert(this.createRequestMessageSet(requestTransaction));
                    var self = this;
                    return self.institution.sendRequest(request).then(function (response) {
                        self.institution.doGeneralValidationChecks(request, response);
                        return self.unwrapStatementResponse(response);
                    });
                };
                /**
                 * Unwrap the statement response from the specified response envelope.
                 *
                 * @param response The response envelope to unwrap.
                 * @return The response.
                 */
                BaseAccountImpl.prototype.unwrapStatementResponse = function (response) {
                    throw new ofx4js.Error("abstract");
                };
                /**
                 * Create a request message set from the specified transaction.
                 *
                 * @param transaction The transaction.
                 * @return The request message set.
                 */
                BaseAccountImpl.prototype.createRequestMessageSet = function (transaction) {
                    throw new ofx4js.Error("abstract");
                };
                /**
                 * Create a transaction.
                 *
                 * @return The transaction.
                 */
                BaseAccountImpl.prototype.createTransaction = function () {
                    throw new ofx4js.Error("abstract");
                };
                /**
                 * Create a statement request.
                 *
                 * @param details The details.
                 * @param range the range.
                 * @return The statement request.
                 */
                BaseAccountImpl.prototype.createStatementRequest = function (details, range) {
                    throw new ofx4js.Error("abstract");
                };
                /**
                 * The details of this account.
                 *
                 * @return The details of this account.
                 */
                BaseAccountImpl.prototype.getDetails = function () {
                    return this.details;
                };
                /**
                 * The message set type.
                 *
                 * @return The message set type.
                 */
                BaseAccountImpl.prototype.getMessageType = function () {
                    return this.messageType;
                };
                return BaseAccountImpl;
            })();
            impl.BaseAccountImpl = BaseAccountImpl;
        })(impl = client.impl || (client.impl = {}));
    })(client = ofx4js.client || (ofx4js.client = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/Element_add'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var signon;
            (function (signon) {
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                /**
                 * @author Ryan Heaton
                 */
                var FinancialInstitution = (function () {
                    function FinancialInstitution() {
                    }
                    /**
                     * Financial institution id.
                     *
                     * @return Financial institution id.
                     */
                    FinancialInstitution.prototype.getId = function () {
                        return this.id;
                    };
                    /**
                     * Financial institution id.
                     *
                     * @param id Financial institution id.
                     */
                    FinancialInstitution.prototype.setId = function (id) {
                        this.id = id;
                    };
                    /**
                     * The organization.
                     *
                     * @return The organization.
                     */
                    FinancialInstitution.prototype.getOrganization = function () {
                        return this.organization;
                    };
                    /**
                     * The organization.
                     *
                     * @param organization The organization.
                     */
                    FinancialInstitution.prototype.setOrganization = function (organization) {
                        this.organization = organization;
                    };
                    return FinancialInstitution;
                })();
                signon.FinancialInstitution = FinancialInstitution;
                Aggregate_add(FinancialInstitution, "FI");
                Element_add(FinancialInstitution, { name: "FID", order: 10, type: String, read: FinancialInstitution.prototype.getId, write: FinancialInstitution.prototype.setId });
                Element_add(FinancialInstitution, { name: "ORG", required: true, order: 0, type: String, read: FinancialInstitution.prototype.getOrganization, write: FinancialInstitution.prototype.setOrganization });
            })(signon = data.signon || (data.signon = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../../../meta/Element_add'/>
///<reference path='../RequestMessage'/>
///<reference path='FinancialInstitution'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var signon;
            (function (signon) {
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                var RequestMessage = ofx4js.domain.data.RequestMessage;
                /**
                 * Sign-on request
                 *
                 * @author Ryan Heaton
                 * @see "Section 2.5.1.2, OFX Spec."
                 */
                var SignonRequest = (function (_super) {
                    __extends(SignonRequest, _super);
                    function SignonRequest() {
                        _super.call(this);
                        this.language = "ENG"; //Locale.US.getISO3Language().toUpperCase();
                        this.applicationId = "Money"; //many institutions just won't work with an unrecognized app id...
                        this.applicationVersion = "1600"; //many institutions just won't work with an unrecognized app id...
                    }
                    /**
                     * The date and time of the request.
                     *
                     * @return The date and time of the request.
                     */
                    SignonRequest.prototype.getTimestamp = function () {
                        return this.timestamp;
                    };
                    /**
                     * The date and time of the request.
                     *
                     * @param timestamp The date and time of the request.
                     */
                    SignonRequest.prototype.setTimestamp = function (timestamp) {
                        this.timestamp = timestamp;
                    };
                    /**
                     * The user id.
                     *
                     * @return The user id.
                     */
                    SignonRequest.prototype.getUserId = function () {
                        return this.userId;
                    };
                    /**
                     * The user id.
                     *
                     * @param userId The user id.
                     */
                    SignonRequest.prototype.setUserId = function (userId) {
                        this.userId = userId;
                    };
                    /**
                     * The password.
                     *
                     * @return The password.
                     */
                    SignonRequest.prototype.getPassword = function () {
                        return this.password;
                    };
                    /**
                     * The password.
                     *
                     * @param password The password.
                     */
                    SignonRequest.prototype.setPassword = function (password) {
                        this.password = password;
                    };
                    /**
                     * The user key provided by the server so as not to require further username/password authentication.
                     *
                     * @return The user key provided by the server so as not to require further username/password authentication.
                     */
                    SignonRequest.prototype.getUserKey = function () {
                        return this.userKey;
                    };
                    /**
                     * The user key provided by the server so as not to require further username/password authentication.
                     *
                     * @param userKey The user key provided by the server so as not to require further username/password authentication.
                     */
                    SignonRequest.prototype.setUserKey = function (userKey) {
                        this.userKey = userKey;
                    };
                    /**
                     * Whether to request the server to generate a user key.
                     *
                     * @return Whether to request the server to generate a user key.
                     */
                    SignonRequest.prototype.getGenerateUserKey = function () {
                        return this.generateUserKey;
                    };
                    /**
                     * Whether to request the server to generate a user key.
                     *
                     * @param generateUserKey Whether to request the server to generate a user key.
                     */
                    SignonRequest.prototype.setGenerateUserKey = function (generateUserKey) {
                        this.generateUserKey = generateUserKey;
                    };
                    /**
                     * The three-letter langauge code.
                     *
                     * @return The three-letter langauge code.
                     * @see java.util.Locale#getISO3Language()
                     */
                    SignonRequest.prototype.getLanguage = function () {
                        return this.language;
                    };
                    /**
                     * The three-letter langauge code.
                     *
                     * @param language The three-letter langauge code.
                     */
                    SignonRequest.prototype.setLanguage = function (language) {
                        this.language = language;
                    };
                    /**
                     * The financial institution.
                     *
                     * @return The financial institution.
                     */
                    SignonRequest.prototype.getFinancialInstitution = function () {
                        return this.financialInstitution;
                    };
                    /**
                     * The financial institution.
                     *
                     * @param financialInstitution The financial institution.
                     */
                    SignonRequest.prototype.setFinancialInstitution = function (financialInstitution) {
                        this.financialInstitution = financialInstitution;
                    };
                    /**
                     * The server-supplied session id.
                     *
                     * @return The server-supplied session id.
                     */
                    SignonRequest.prototype.getSessionId = function () {
                        return this.sessionId;
                    };
                    /**
                     * The server-supplied session id.
                     *
                     * @param sessionId The server-supplied session id.
                     */
                    SignonRequest.prototype.setSessionId = function (sessionId) {
                        this.sessionId = sessionId;
                    };
                    /**
                     * The application id.
                     *
                     * @return The application id.
                     */
                    SignonRequest.prototype.getApplicationId = function () {
                        return this.applicationId;
                    };
                    /**
                     * The application id.
                     *
                     * @param applicationId The application id.
                     */
                    SignonRequest.prototype.setApplicationId = function (applicationId) {
                        this.applicationId = applicationId;
                    };
                    /**
                     * The application version.
                     *
                     * @return The application version.
                     */
                    SignonRequest.prototype.getApplicationVersion = function () {
                        return this.applicationVersion;
                    };
                    /**
                     * The application version.
                     *
                     * @param applicationVersion The application version.
                     */
                    SignonRequest.prototype.setApplicationVersion = function (applicationVersion) {
                        this.applicationVersion = applicationVersion;
                    };
                    /**
                     * The client-supplied UID.
                     *
                     * @return The client-supplied UID.
                     */
                    SignonRequest.prototype.getClientUID = function () {
                        return this.clientUID;
                    };
                    /**
                     * The client-supplied UID.
                     *
                     * @param clientUID The client-supplied UID.
                     */
                    SignonRequest.prototype.setClientUID = function (clientUID) {
                        this.clientUID = clientUID;
                    };
                    /**
                     * Any additional credentials.
                     *
                     * @return Any additional credentials.
                     */
                    SignonRequest.prototype.getAdditionalCredentials1 = function () {
                        return this.additionalCredentials1;
                    };
                    /**
                     * Any additional credentials.
                     *
                     * @param additionalCredentials1 Any additional credentials.
                     */
                    SignonRequest.prototype.setAdditionalCredentials1 = function (additionalCredentials1) {
                        this.additionalCredentials1 = additionalCredentials1;
                    };
                    /**
                     * Any additional credentials.
                     *
                     * @return Any additional credentials.
                     */
                    SignonRequest.prototype.getAdditionalCredentials2 = function () {
                        return this.additionalCredentials2;
                    };
                    /**
                     * Any additional credentials.
                     *
                     * @param additionalCredentials2 Any additional credentials.
                     */
                    SignonRequest.prototype.setAdditionalCredentials2 = function (additionalCredentials2) {
                        this.additionalCredentials2 = additionalCredentials2;
                    };
                    /**
                     * The authentication token.
                     *
                     * @return The authentication token.
                     */
                    SignonRequest.prototype.getAuthToken = function () {
                        return this.authToken;
                    };
                    /**
                     * The authentication token.
                     *
                     * @param authToken The authentication token.
                     */
                    SignonRequest.prototype.setAuthToken = function (authToken) {
                        this.authToken = authToken;
                    };
                    /**
                     * The access key.
                     *
                     * @return The access key.
                     */
                    SignonRequest.prototype.getAccessKey = function () {
                        return this.accessKey;
                    };
                    /**
                     * The access key.
                     *
                     * @param accessKey The access key.
                     */
                    SignonRequest.prototype.setAccessKey = function (accessKey) {
                        this.accessKey = accessKey;
                    };
                    /**
                     * @see "Section 2.5.1"
                     */
                    SignonRequest.ANONYMOUS_USER = "anonymous00000000000000000000000";
                    return SignonRequest;
                })(RequestMessage);
                signon.SignonRequest = SignonRequest;
                Aggregate_add(SignonRequest, "SONRQ");
                Element_add(SignonRequest, { name: "DTCLIENT", required: true, order: 0, type: Date, read: SignonRequest.prototype.getTimestamp, write: SignonRequest.prototype.setTimestamp });
                Element_add(SignonRequest, { name: "USERID", order: 10, type: String, read: SignonRequest.prototype.getUserId, write: SignonRequest.prototype.setUserId });
                Element_add(SignonRequest, { name: "USERPASS", order: 20, type: String, read: SignonRequest.prototype.getPassword, write: SignonRequest.prototype.setPassword });
                Element_add(SignonRequest, { name: "USERKEY", order: 30, type: String, read: SignonRequest.prototype.getUserKey, write: SignonRequest.prototype.setUserKey });
                Element_add(SignonRequest, { name: "GENUSERKEY", order: 40, type: Boolean, read: SignonRequest.prototype.getGenerateUserKey, write: SignonRequest.prototype.setGenerateUserKey });
                Element_add(SignonRequest, { name: "LANGUAGE", required: true, order: 50, type: String, read: SignonRequest.prototype.getLanguage, write: SignonRequest.prototype.setLanguage });
                ChildAggregate_add(SignonRequest, { order: 60, type: signon.FinancialInstitution, read: SignonRequest.prototype.getFinancialInstitution, write: SignonRequest.prototype.setFinancialInstitution });
                Element_add(SignonRequest, { name: "SESSCOOKIE", order: 70, type: String, read: SignonRequest.prototype.getSessionId, write: SignonRequest.prototype.setSessionId });
                Element_add(SignonRequest, { name: "APPID", required: true, order: 80, type: String, read: SignonRequest.prototype.getApplicationId, write: SignonRequest.prototype.setApplicationId });
                Element_add(SignonRequest, { name: "APPVER", required: true, order: 90, type: String, read: SignonRequest.prototype.getApplicationVersion, write: SignonRequest.prototype.setApplicationVersion });
                Element_add(SignonRequest, { name: "CLIENTUID", order: 100, type: String, read: SignonRequest.prototype.getClientUID, write: SignonRequest.prototype.setClientUID });
                Element_add(SignonRequest, { name: "USERCRED1", order: 110, type: String, read: SignonRequest.prototype.getAdditionalCredentials1, write: SignonRequest.prototype.setAdditionalCredentials1 });
                Element_add(SignonRequest, { name: "USERCRED2", order: 120, type: String, read: SignonRequest.prototype.getAdditionalCredentials2, write: SignonRequest.prototype.setAdditionalCredentials2 });
                Element_add(SignonRequest, { name: "AUTHTOKEN", order: 130, type: String, read: SignonRequest.prototype.getAuthToken, write: SignonRequest.prototype.setAuthToken });
                Element_add(SignonRequest, { name: "ACCESSKEY", order: 140, type: String, read: SignonRequest.prototype.getAccessKey, write: SignonRequest.prototype.setAccessKey });
            })(signon = data.signon || (data.signon = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/Element_add'/>
///<reference path='../RequestMessage'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var signon;
            (function (signon) {
                var RequestMessage = ofx4js.domain.data.RequestMessage;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                /**
                 * Request to change a user password.
                 *
                 * @author Ryan Heaton
                 * @see "Section 2.5.2.1, OFX Spec."
                 */
                var PasswordChangeRequest = (function (_super) {
                    __extends(PasswordChangeRequest, _super);
                    function PasswordChangeRequest() {
                        _super.apply(this, arguments);
                    }
                    /**
                     * The id of the user changing password.
                     *
                     * @return The id of the user changing password.
                     */
                    PasswordChangeRequest.prototype.getUserId = function () {
                        return this.userId;
                    };
                    /**
                     * The id of the user changing password.
                     *
                     * @param userId The id of the user changing password.
                     */
                    PasswordChangeRequest.prototype.setUserId = function (userId) {
                        this.userId = userId;
                    };
                    /**
                     * The new password.
                     *
                     * @return The new password.
                     */
                    PasswordChangeRequest.prototype.getNewPassword = function () {
                        return this.newPassword;
                    };
                    /**
                     * The new password.
                     *
                     * @param newPassword The new password.
                     */
                    PasswordChangeRequest.prototype.setNewPassword = function (newPassword) {
                        this.newPassword = newPassword;
                    };
                    return PasswordChangeRequest;
                })(RequestMessage);
                signon.PasswordChangeRequest = PasswordChangeRequest;
                Aggregate_add(PasswordChangeRequest, "PINCHRQ");
                Element_add(PasswordChangeRequest, { name: "USERID", required: true, order: 0, type: String, read: PasswordChangeRequest.prototype.getUserId, write: PasswordChangeRequest.prototype.setUserId });
                Element_add(PasswordChangeRequest, { name: "NEWUSERPASS", required: true, order: 10, type: String, read: PasswordChangeRequest.prototype.getNewPassword, write: PasswordChangeRequest.prototype.setNewPassword });
            })(signon = data.signon || (data.signon = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../TransactionWrappedRequestMessage'/>
///<reference path='PasswordChangeRequest'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var signon;
            (function (signon) {
                var TransactionWrappedRequestMessage = ofx4js.domain.data.TransactionWrappedRequestMessage;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                /**
                 * @author Ryan Heaton
                 */
                var PasswordChangeRequestTransaction = (function (_super) {
                    __extends(PasswordChangeRequestTransaction, _super);
                    function PasswordChangeRequestTransaction() {
                        _super.apply(this, arguments);
                    }
                    /**
                     * The wrapped message.
                     *
                     * @return The wrapped message.
                     */
                    PasswordChangeRequestTransaction.prototype.getMessage = function () {
                        return this.message;
                    };
                    /**
                     * The wrapped message.
                     *
                     * @param message The wrapped message.
                     */
                    PasswordChangeRequestTransaction.prototype.setMessage = function (message) {
                        this.message = message;
                    };
                    // Inherited.
                    PasswordChangeRequestTransaction.prototype.setWrappedMessage = function (message) {
                        this.setMessage(message);
                    };
                    return PasswordChangeRequestTransaction;
                })(TransactionWrappedRequestMessage);
                signon.PasswordChangeRequestTransaction = PasswordChangeRequestTransaction;
                Aggregate_add(PasswordChangeRequestTransaction, "PINCHTRNRQ");
                ChildAggregate_add(PasswordChangeRequestTransaction, { required: true, order: 30, type: signon.PasswordChangeRequest, read: PasswordChangeRequestTransaction.prototype.getMessage, write: PasswordChangeRequestTransaction.prototype.setMessage });
            })(signon = data.signon || (data.signon = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../MessageSetType'/>
///<reference path='../RequestMessageSet'/>
///<reference path='../RequestMessage'/>
///<reference path='SignonRequest'/>
///<reference path='PasswordChangeRequestTransaction'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var signon;
            (function (signon) {
                var MessageSetType = ofx4js.domain.data.MessageSetType;
                var RequestMessageSet = ofx4js.domain.data.RequestMessageSet;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                /**
                 * The sign-on request message set.
                 *
                 * @author Ryan Heaton
                 * @see "Section 2.5, OFX Spec."
                 */
                var SignonRequestMessageSet = (function (_super) {
                    __extends(SignonRequestMessageSet, _super);
                    function SignonRequestMessageSet() {
                        _super.apply(this, arguments);
                    }
                    SignonRequestMessageSet.prototype.getType = function () {
                        return 0 /* signon */;
                    };
                    /**
                     * The message for this message set.
                     *
                     * @return The message for this message set.
                     */
                    SignonRequestMessageSet.prototype.getSignonRequest = function () {
                        return this.signonRequest;
                    };
                    /**
                     * The message for this message set.
                     *
                     * @param signonRequest The message for this message set.
                     */
                    SignonRequestMessageSet.prototype.setSignonRequest = function (signonRequest) {
                        this.signonRequest = signonRequest;
                    };
                    /**
                     * The password change request.
                     *
                     * @return The password change request.
                     */
                    SignonRequestMessageSet.prototype.getPasswordChangeRequest = function () {
                        return this.passwordChangeRequest;
                    };
                    /**
                     * The password change request.
                     *
                     * @param passwordChangeRequest The password change request.
                     */
                    SignonRequestMessageSet.prototype.setPasswordChangeRequest = function (passwordChangeRequest) {
                        this.passwordChangeRequest = passwordChangeRequest;
                    };
                    //todo: challenge request/response
                    // Inherited.
                    SignonRequestMessageSet.prototype.getRequestMessages = function () {
                        var requestMessages = new Array();
                        if (this.getSignonRequest() != null) {
                            requestMessages.push(this.getSignonRequest());
                        }
                        if (this.getPasswordChangeRequest() != null) {
                            requestMessages.push(this.getPasswordChangeRequest());
                        }
                        return requestMessages;
                    };
                    return SignonRequestMessageSet;
                })(RequestMessageSet);
                signon.SignonRequestMessageSet = SignonRequestMessageSet;
                Aggregate_add(SignonRequestMessageSet, "SIGNONMSGSRQV1");
                ChildAggregate_add(SignonRequestMessageSet, { required: true, order: 0, type: signon.SignonRequest, read: SignonRequestMessageSet.prototype.getSignonRequest, write: SignonRequestMessageSet.prototype.setSignonRequest });
                ChildAggregate_add(SignonRequestMessageSet, { order: 10, type: signon.PasswordChangeRequestTransaction, read: SignonRequestMessageSet.prototype.getPasswordChangeRequest, write: SignonRequestMessageSet.prototype.setPasswordChangeRequest });
            })(signon = data.signon || (data.signon = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/Element_add'/>
///<reference path='../RequestMessage'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var signup;
            (function (signup) {
                var RequestMessage = ofx4js.domain.data.RequestMessage;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                /**
                 * @author Ryan Heaton
                 */
                var AccountInfoRequest = (function (_super) {
                    __extends(AccountInfoRequest, _super);
                    function AccountInfoRequest() {
                        _super.call(this);
                        this.lastUpdated = new Date(0); //default is never updated.
                    }
                    /**
                     * When the account info was last updated.
                     *
                     * @return When the account info was last updated.
                     */
                    AccountInfoRequest.prototype.getLastUpdated = function () {
                        return this.lastUpdated;
                    };
                    /**
                     * When the account info was last updated.
                     *
                     * @param lastUpdated When the account info was last updated.
                     */
                    AccountInfoRequest.prototype.setLastUpdated = function (lastUpdated) {
                        this.lastUpdated = lastUpdated;
                    };
                    return AccountInfoRequest;
                })(RequestMessage);
                signup.AccountInfoRequest = AccountInfoRequest;
                Aggregate_add(AccountInfoRequest, "ACCTINFORQ");
                Element_add(AccountInfoRequest, { name: "DTACCTUP", required: true, order: 0, type: Date, read: AccountInfoRequest.prototype.getLastUpdated, write: AccountInfoRequest.prototype.setLastUpdated });
            })(signup = data.signup || (data.signup = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../TransactionWrappedRequestMessage'/>
///<reference path='AccountInfoRequest'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var signup;
            (function (signup) {
                var TransactionWrappedRequestMessage = ofx4js.domain.data.TransactionWrappedRequestMessage;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                /**
                 * @author Ryan Heaton
                 */
                var AccountInfoRequestTransaction = (function (_super) {
                    __extends(AccountInfoRequestTransaction, _super);
                    function AccountInfoRequestTransaction() {
                        _super.apply(this, arguments);
                    }
                    /**
                     * The wrapped message.
                     *
                     * @return The wrapped message.
                     */
                    AccountInfoRequestTransaction.prototype.getMessage = function () {
                        return this.message;
                    };
                    /**
                     * The wrapped message.
                     *
                     * @param message The wrapped message.
                     */
                    AccountInfoRequestTransaction.prototype.setMessage = function (message) {
                        this.message = message;
                    };
                    // Inherited.
                    AccountInfoRequestTransaction.prototype.setWrappedMessage = function (message) {
                        this.setMessage(message);
                    };
                    return AccountInfoRequestTransaction;
                })(TransactionWrappedRequestMessage);
                signup.AccountInfoRequestTransaction = AccountInfoRequestTransaction;
                Aggregate_add(AccountInfoRequestTransaction, "ACCTINFOTRNRQ");
                ChildAggregate_add(AccountInfoRequestTransaction, { required: true, order: 30, type: signup.AccountInfoRequest, read: AccountInfoRequestTransaction.prototype.getMessage, write: AccountInfoRequestTransaction.prototype.setMessage });
            })(signup = data.signup || (data.signup = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../RequestMessageSet'/>
///<reference path='AccountInfoRequestTransaction'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var signup;
            (function (signup) {
                var RequestMessageSet = ofx4js.domain.data.RequestMessageSet;
                var MessageSetType = ofx4js.domain.data.MessageSetType;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                /**
                 * @author Ryan Heaton
                 */
                var SignupRequestMessageSet = (function (_super) {
                    __extends(SignupRequestMessageSet, _super);
                    function SignupRequestMessageSet() {
                        _super.apply(this, arguments);
                    }
                    SignupRequestMessageSet.prototype.getType = function () {
                        return 1 /* signup */;
                    };
                    /**
                     * The account info request.
                     *
                     * @return The account info request.
                     */
                    SignupRequestMessageSet.prototype.getAccountInfoRequest = function () {
                        return this.accountInfoRequest;
                    };
                    /**
                     * The account info request.
                     *
                     * @param accountInfoRequest The account info request.
                     */
                    SignupRequestMessageSet.prototype.setAccountInfoRequest = function (accountInfoRequest) {
                        this.accountInfoRequest = accountInfoRequest;
                    };
                    /**
                     * The request messages.
                     *
                     * @return The request messages.
                     */
                    SignupRequestMessageSet.prototype.getRequestMessages = function () {
                        var messages = new Array();
                        if (this.getAccountInfoRequest() != null) {
                            messages.push(this.getAccountInfoRequest());
                        }
                        return messages;
                    };
                    return SignupRequestMessageSet;
                })(RequestMessageSet);
                signup.SignupRequestMessageSet = SignupRequestMessageSet;
                Aggregate_add(SignupRequestMessageSet, "SIGNUPMSGSRQV1");
                ChildAggregate_add(SignupRequestMessageSet, { order: 0, type: signup.AccountInfoRequestTransaction, read: SignupRequestMessageSet.prototype.getAccountInfoRequest, write: SignupRequestMessageSet.prototype.setAccountInfoRequest });
            })(signup = data.signup || (data.signup = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../../../meta/Element_add'/>
///<reference path='../ResponseMessage'/>
///<reference path='AccountProfile'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var signup;
            (function (signup) {
                var ResponseMessage = ofx4js.domain.data.ResponseMessage;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                /**
                 * @author Ryan Heaton
                 */
                var AccountInfoResponse = (function (_super) {
                    __extends(AccountInfoResponse, _super);
                    function AccountInfoResponse() {
                        _super.call(this);
                        this.lastUpdated = new Date(0); //default is never updated.
                    }
                    AccountInfoResponse.prototype.getResponseMessageName = function () {
                        return "account info";
                    };
                    /**
                     * When the account info was last updated.
                     *
                     * @return When the account info was last updated.
                     */
                    AccountInfoResponse.prototype.getLastUpdated = function () {
                        return this.lastUpdated;
                    };
                    /**
                     * When the account info was last updated.
                     *
                     * @param lastUpdated When the account info was last updated.
                     */
                    AccountInfoResponse.prototype.setLastUpdated = function (lastUpdated) {
                        this.lastUpdated = lastUpdated;
                    };
                    /**
                     * The accounts.
                     *
                     * @return The accounts.
                     */
                    AccountInfoResponse.prototype.getAccounts = function () {
                        return this.accounts;
                    };
                    /**
                     * The accounts.
                     *
                     * @param accounts The accounts.
                     */
                    AccountInfoResponse.prototype.setAccounts = function (accounts) {
                        this.accounts = accounts;
                    };
                    return AccountInfoResponse;
                })(ResponseMessage);
                signup.AccountInfoResponse = AccountInfoResponse;
                Aggregate_add(AccountInfoResponse, "ACCTINFORS");
                Element_add(AccountInfoResponse, { name: "DTACCTUP", required: true, order: 0, type: Date, read: AccountInfoResponse.prototype.getLastUpdated, write: AccountInfoResponse.prototype.setLastUpdated });
                ChildAggregate_add(AccountInfoResponse, { order: 10, type: Array, collectionEntryType: signup.AccountProfile, read: AccountInfoResponse.prototype.getAccounts, write: AccountInfoResponse.prototype.setAccounts });
            })(signup = data.signup || (data.signup = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../TransactionWrappedResponseMessage'/>
///<reference path='AccountInfoResponse'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var signup;
            (function (signup) {
                var TransactionWrappedResponseMessage = ofx4js.domain.data.TransactionWrappedResponseMessage;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                /**
                 * @author Ryan Heaton
                 */
                var AccountInfoResponseTransaction = (function (_super) {
                    __extends(AccountInfoResponseTransaction, _super);
                    function AccountInfoResponseTransaction() {
                        _super.apply(this, arguments);
                    }
                    /**
                     * The wrapped message.
                     *
                     * @return The wrapped message.
                     */
                    AccountInfoResponseTransaction.prototype.getMessage = function () {
                        return this.message;
                    };
                    /**
                     * The wrapped message.
                     *
                     * @param message The wrapped message.
                     */
                    AccountInfoResponseTransaction.prototype.setMessage = function (message) {
                        this.message = message;
                    };
                    // Inherited.
                    AccountInfoResponseTransaction.prototype.getWrappedMessage = function () {
                        return this.getMessage();
                    };
                    return AccountInfoResponseTransaction;
                })(TransactionWrappedResponseMessage);
                signup.AccountInfoResponseTransaction = AccountInfoResponseTransaction;
                Aggregate_add(AccountInfoResponseTransaction, "ACCTINFOTRNRS");
                ChildAggregate_add(AccountInfoResponseTransaction, { required: true, order: 30, type: signup.AccountInfoResponse, read: AccountInfoResponseTransaction.prototype.getMessage, write: AccountInfoResponseTransaction.prototype.setMessage });
            })(signup = data.signup || (data.signup = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../ResponseMessageSet'/>
///<reference path='../MessageSetType'/>
///<reference path='AccountInfoResponseTransaction'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var signup;
            (function (signup) {
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                /**
                 * @author Ryan Heaton
                 */
                var SignupResponseMessageSet = (function (_super) {
                    __extends(SignupResponseMessageSet, _super);
                    function SignupResponseMessageSet() {
                        _super.apply(this, arguments);
                    }
                    SignupResponseMessageSet.prototype.getType = function () {
                        return 1 /* signup */;
                    };
                    /**
                     * The account info response.
                     *
                     * @return The account info response.
                     */
                    SignupResponseMessageSet.prototype.getAccountInfoResponse = function () {
                        return this.accountInfoResponse;
                    };
                    /**
                     * The account info response.
                     *
                     * @param accountInfoResponse The account info response.
                     */
                    SignupResponseMessageSet.prototype.setAccountInfoResponse = function (accountInfoResponse) {
                        this.accountInfoResponse = accountInfoResponse;
                    };
                    /**
                     * The response messages.
                     *
                     * @return The response messages.
                     */
                    SignupResponseMessageSet.prototype.getResponseMessages = function () {
                        var messages = new Array();
                        if (this.getAccountInfoResponse() != null) {
                            messages.push(this.getAccountInfoResponse());
                        }
                        return messages;
                    };
                    return SignupResponseMessageSet;
                })(data.ResponseMessageSet);
                signup.SignupResponseMessageSet = SignupResponseMessageSet;
                Aggregate_add(SignupResponseMessageSet, "SIGNUPMSGSRSV1");
                ChildAggregate_add(SignupResponseMessageSet, { order: 0, type: signup.AccountInfoResponseTransaction, read: SignupResponseMessageSet.prototype.getAccountInfoResponse, write: SignupResponseMessageSet.prototype.setAccountInfoResponse });
            })(signup = data.signup || (data.signup = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                /**
                 * @author Ryan Heaton
                 * @see "Section 7.1.5, OFX Spec"
                 */
                (function (ClientRoutingCapability) {
                    ClientRoutingCapability[ClientRoutingCapability["NONE"] = 0] = "NONE";
                    ClientRoutingCapability[ClientRoutingCapability["SERVICE"] = 1] = "SERVICE";
                    ClientRoutingCapability[ClientRoutingCapability["MESSAGE_SET"] = 2] = "MESSAGE_SET";
                })(profile.ClientRoutingCapability || (profile.ClientRoutingCapability = {}));
                var ClientRoutingCapability = profile.ClientRoutingCapability;
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/Element_add'/>
///<reference path='../RequestMessage'/>
///<reference path='ClientRoutingCapability'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                var RequestMessage = ofx4js.domain.data.RequestMessage;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                /**
                 * @author Ryan Heaton
                 * @see "Section 7.1.5, OFX Spec"
                 */
                var ProfileRequest = (function (_super) {
                    __extends(ProfileRequest, _super);
                    function ProfileRequest() {
                        _super.call(this);
                        this.routingCapability = 0 /* NONE */;
                    }
                    /**
                     * The client routing capability.
                     *
                     * @return The client routing capability.
                     */
                    ProfileRequest.prototype.getRoutingCapability = function () {
                        return this.routingCapability;
                    };
                    /**
                     * The client routing capability.
                     *
                     * @param routingCapability The client routing capability.
                     */
                    ProfileRequest.prototype.setRoutingCapability = function (routingCapability) {
                        this.routingCapability = routingCapability;
                    };
                    /**
                     * The date the profile was last updated.
                     *
                     * @return The date the profile was last updated.
                     */
                    ProfileRequest.prototype.getProfileLastUpdated = function () {
                        return this.profileLastUpdated;
                    };
                    /**
                     * The date the profile was last updated.
                     *
                     * @param profileLastUpdated The date the profile was last updated.
                     */
                    ProfileRequest.prototype.setProfileLastUpdated = function (profileLastUpdated) {
                        this.profileLastUpdated = profileLastUpdated;
                    };
                    return ProfileRequest;
                })(RequestMessage);
                profile.ProfileRequest = ProfileRequest;
                Aggregate_add(ProfileRequest, "PROFRQ");
                Element_add(ProfileRequest, { name: "CLIENTROUTING", order: 0, type: profile.ClientRoutingCapability, read: ProfileRequest.prototype.getRoutingCapability, write: ProfileRequest.prototype.setRoutingCapability });
                Element_add(ProfileRequest, { name: "DTPROFUP", order: 10, type: Date, read: ProfileRequest.prototype.getProfileLastUpdated, write: ProfileRequest.prototype.setProfileLastUpdated });
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../TransactionWrappedRequestMessage'/>
///<reference path='ProfileRequest'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                var TransactionWrappedRequestMessage = ofx4js.domain.data.TransactionWrappedRequestMessage;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                /**
                 * @author Ryan Heaton
                 */
                var ProfileRequestTransaction = (function (_super) {
                    __extends(ProfileRequestTransaction, _super);
                    function ProfileRequestTransaction() {
                        _super.apply(this, arguments);
                    }
                    /**
                     * The wrapped message.
                     *
                     * @return The wrapped message.
                     */
                    ProfileRequestTransaction.prototype.getMessage = function () {
                        return this.message;
                    };
                    /**
                     * The wrapped message.
                     *
                     * @param message The wrapped message.
                     */
                    ProfileRequestTransaction.prototype.setMessage = function (message) {
                        this.message = message;
                    };
                    // Inherited.
                    ProfileRequestTransaction.prototype.setWrappedMessage = function (message) {
                        this.setMessage(message);
                    };
                    return ProfileRequestTransaction;
                })(TransactionWrappedRequestMessage);
                profile.ProfileRequestTransaction = ProfileRequestTransaction;
                Aggregate_add(ProfileRequestTransaction, "PROFTRNRQ");
                ChildAggregate_add(ProfileRequestTransaction, { required: true, order: 30, type: profile.ProfileRequest, read: ProfileRequestTransaction.prototype.getMessage, write: ProfileRequestTransaction.prototype.setMessage });
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../MessageSetType'/>
///<reference path='../RequestMessageSet'/>
///<reference path='ProfileRequestTransaction'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                var MessageSetType = ofx4js.domain.data.MessageSetType;
                var RequestMessageSet = ofx4js.domain.data.RequestMessageSet;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                /**
                 * @author Ryan Heaton
                 * @see "Section 7 OFX Spec"
                 */
                var ProfileRequestMessageSet = (function (_super) {
                    __extends(ProfileRequestMessageSet, _super);
                    function ProfileRequestMessageSet() {
                        _super.apply(this, arguments);
                    }
                    ProfileRequestMessageSet.prototype.getType = function () {
                        return 10 /* profile */;
                    };
                    /**
                     * The profile request.
                     *
                     * @return The profile request.
                     */
                    ProfileRequestMessageSet.prototype.getProfileRequest = function () {
                        return this.profileRequest;
                    };
                    /**
                     * The profile request.
                     *
                     * @param profileRequest The profile request.
                     */
                    ProfileRequestMessageSet.prototype.setProfileRequest = function (profileRequest) {
                        this.profileRequest = profileRequest;
                    };
                    // Inherited.
                    ProfileRequestMessageSet.prototype.getRequestMessages = function () {
                        var requestMessages = new Array();
                        if (this.getProfileRequest() != null) {
                            requestMessages.push(this.getProfileRequest());
                        }
                        return requestMessages;
                    };
                    return ProfileRequestMessageSet;
                })(RequestMessageSet);
                profile.ProfileRequestMessageSet = ProfileRequestMessageSet;
                Aggregate_add(ProfileRequestMessageSet, "PROFMSGSRQV1");
                ChildAggregate_add(ProfileRequestMessageSet, { required: true, order: 0, type: profile.ProfileRequestTransaction, read: ProfileRequestMessageSet.prototype.getProfileRequest, write: ProfileRequestMessageSet.prototype.setProfileRequest });
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/Element_add'/>
///<reference path='../ApplicationSecurity'/>
///<reference path='SynchronizationCapability'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                var ApplicationSecurity = ofx4js.domain.data.ApplicationSecurity;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                /**
                 * Core information about a specific version of a specific message set.
                 *
                 * @author Ryan Heaton
                 * @see "Section 7.2.1, OFX Spec"
                 */
                var CoreMessageSetInfo = (function () {
                    function CoreMessageSetInfo() {
                        this.version = "1";
                        this.language = "ENG"; //Locale.US.getISO3Language();
                    }
                    /**
                     * Version of the message set.
                     *
                     * @return The version of the message set.
                     */
                    CoreMessageSetInfo.prototype.getVersion = function () {
                        return this.version;
                    };
                    /**
                     * The version of the message set.
                     *
                     * @param version The version of the message set.
                     */
                    CoreMessageSetInfo.prototype.setVersion = function (version) {
                        this.version = version;
                    };
                    /**
                     * The name of the service provider (sometimes the message set processing is outsourced).
                     *
                     * @return The name of the service provider (sometimes the message set processing is outsourced).
                     */
                    CoreMessageSetInfo.prototype.getServiceProviderName = function () {
                        return this.serviceProviderName;
                    };
                    /**
                     * The name of the service provider (sometimes the message set processing is outsourced).
                     *
                     * @param serviceProviderName The name of the service provider (sometimes the message set processing is outsourced).
                     */
                    CoreMessageSetInfo.prototype.setServiceProviderName = function (serviceProviderName) {
                        this.serviceProviderName = serviceProviderName;
                    };
                    /**
                     * The URL at which the message set is processed.
                     *
                     * @return The URL at which the message set is processed.
                     */
                    CoreMessageSetInfo.prototype.getUrl = function () {
                        return this.url;
                    };
                    /**
                     * The URL at which the message set is processed.
                     *
                     * @param url The URL at which the message set is processed.
                     */
                    CoreMessageSetInfo.prototype.setUrl = function (url) {
                        this.url = url;
                    };
                    /**
                     * The application-level security required for this message set.
                     *
                     * @return The application-level security required for this message set.
                     */
                    CoreMessageSetInfo.prototype.getSecurity = function () {
                        return this.security;
                    };
                    /**
                     * The application-level security required for this message set.
                     *
                     * @param security The application-level security required for this message set.
                     */
                    CoreMessageSetInfo.prototype.setSecurity = function (security) {
                        this.security = security;
                    };
                    /**
                     * Whether transport-level security is required for this message set.
                     *
                     * @return Whether transport-level security is required for this message set.
                     */
                    CoreMessageSetInfo.prototype.getSslRequired = function () {
                        return this.sslRequired;
                    };
                    /**
                     * Whether transport-level security is required for this message set.
                     *
                     * @param sslRequired Whether transport-level security is required for this message set.
                     */
                    CoreMessageSetInfo.prototype.setSslRequired = function (sslRequired) {
                        this.sslRequired = sslRequired;
                    };
                    /**
                     * The sign-on realm.
                     *
                     * @return The sign-on realm.
                     */
                    CoreMessageSetInfo.prototype.getRealm = function () {
                        return this.realm;
                    };
                    /**
                     * The sign-on realm.
                     *
                     * @param realm The sign-on realm.
                     */
                    CoreMessageSetInfo.prototype.setRealm = function (realm) {
                        this.realm = realm;
                    };
                    /**
                     * The language.
                     *
                     * @return The language.
                     * @see java.util.Locale#getISO3Language()
                     */
                    CoreMessageSetInfo.prototype.getLanguage = function () {
                        return this.language;
                    };
                    /**
                     * The language.
                     *
                     * @param language The language.
                     */
                    CoreMessageSetInfo.prototype.setLanguage = function (language) {
                        this.language = language;
                    };
                    /**
                     * The synchronization capability for this message set.
                     *
                     * @return The synchronization capability for this message set.
                     */
                    CoreMessageSetInfo.prototype.getSyncCapability = function () {
                        return this.syncCapability;
                    };
                    /**
                     * The synchronization capability for this message set.
                     *
                     * @param syncCapability The synchronization capability for this message set.
                     */
                    CoreMessageSetInfo.prototype.setSyncCapability = function (syncCapability) {
                        this.syncCapability = syncCapability;
                    };
                    /**
                     * Whether there exists support for resposne-file based error recovery.
                     *
                     * @return Whether there exists support for resposne-file based error recovery.
                     */
                    CoreMessageSetInfo.prototype.getFileBasedErrorRecoverySupport = function () {
                        return this.fileBasedErrorRecoverySupport;
                    };
                    /**
                     * Whether there exists support for resposne-file based error recovery.
                     *
                     * @param fileBasedErrorRecoverySupport Whether there exists support for resposne-file based error recovery.
                     */
                    CoreMessageSetInfo.prototype.setFileBasedErrorRecoverySupport = function (fileBasedErrorRecoverySupport) {
                        this.fileBasedErrorRecoverySupport = fileBasedErrorRecoverySupport;
                    };
                    /**
                     * Gets the "INTU.TIMEOUT" field. There's no public documentation of this field but E*TRADE sends
                     * it. It likely is some type of timeout in seconds.
                     *
                     * @return the "INTU.TIMEOUT" property
                     */
                    CoreMessageSetInfo.prototype.getIntuTimeout = function () {
                        return this.timeout;
                    };
                    /**
                     * Sets the "INTU.TIMEOUT" field. There's no public documentation of this field but E*TRADE sends
                     * it. It likely is some type of timeout in seconds.
                     *
                     * @param timeout the "INTU.TIMEOUT" property
                     */
                    CoreMessageSetInfo.prototype.setIntuTimeout = function (timeout) {
                        this.timeout = timeout;
                    };
                    return CoreMessageSetInfo;
                })();
                profile.CoreMessageSetInfo = CoreMessageSetInfo;
                Aggregate_add(CoreMessageSetInfo, "MSGSETCORE");
                Element_add(CoreMessageSetInfo, { name: "VER", required: true, order: 0, type: String, read: CoreMessageSetInfo.prototype.getVersion, write: CoreMessageSetInfo.prototype.setVersion });
                Element_add(CoreMessageSetInfo, { name: "SPNAME", order: 10, type: String, read: CoreMessageSetInfo.prototype.getServiceProviderName, write: CoreMessageSetInfo.prototype.setServiceProviderName });
                Element_add(CoreMessageSetInfo, { name: "URL", required: true, order: 20, type: String, read: CoreMessageSetInfo.prototype.getUrl, write: CoreMessageSetInfo.prototype.setUrl });
                Element_add(CoreMessageSetInfo, { name: "OFXSEC", required: true, order: 30, type: ApplicationSecurity, read: CoreMessageSetInfo.prototype.getSecurity, write: CoreMessageSetInfo.prototype.setSecurity });
                Element_add(CoreMessageSetInfo, { name: "TRANSPSEC", required: true, order: 40, type: Boolean, read: CoreMessageSetInfo.prototype.getSslRequired, write: CoreMessageSetInfo.prototype.setSslRequired });
                Element_add(CoreMessageSetInfo, { name: "SIGNONREALM", required: true, order: 50, type: String, read: CoreMessageSetInfo.prototype.getRealm, write: CoreMessageSetInfo.prototype.setRealm });
                Element_add(CoreMessageSetInfo, { name: "LANGUAGE", required: true, order: 60, type: String, read: CoreMessageSetInfo.prototype.getLanguage, write: CoreMessageSetInfo.prototype.setLanguage });
                Element_add(CoreMessageSetInfo, { name: "SYNCMODE", required: true, order: 70, type: profile.SynchronizationCapability, read: CoreMessageSetInfo.prototype.getSyncCapability, write: CoreMessageSetInfo.prototype.setSyncCapability });
                Element_add(CoreMessageSetInfo, { name: "RESPFILEER", required: true, order: 80, type: Boolean, read: CoreMessageSetInfo.prototype.getFileBasedErrorRecoverySupport, write: CoreMessageSetInfo.prototype.setFileBasedErrorRecoverySupport });
                Element_add(CoreMessageSetInfo, { name: "INTU.TIMEOUT", order: 90, type: Number, read: CoreMessageSetInfo.prototype.getIntuTimeout, write: CoreMessageSetInfo.prototype.setIntuTimeout });
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../MessageSetProfile'/>
///<reference path='../MessageSetType'/>
///<reference path='CoreMessageSetInfo'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                /**
                 * Information specific to a version of a message set.
                 *
                 * @author Ryan Heaton
                 * @see "Section 7.2.1, OFX Spec"
                 */
                var VersionSpecificMessageSetInfo = (function () {
                    function VersionSpecificMessageSetInfo() {
                    }
                    /**
                     * The information core.
                     *
                     * @return The information core.
                     */
                    VersionSpecificMessageSetInfo.prototype.getCore = function () {
                        return this.core;
                    };
                    /**
                     * The information core.
                     *
                     * @param core The information core.
                     */
                    VersionSpecificMessageSetInfo.prototype.setCore = function (core) {
                        this.core = core;
                    };
                    /**
                     * The message set type.
                     *
                     * @return The message set type.
                     */
                    VersionSpecificMessageSetInfo.prototype.getMessageSetType = function () {
                        throw new ofx4js.Error("abstract");
                    };
                    VersionSpecificMessageSetInfo.prototype.getVersion = function () {
                        return this.core != null ? this.core.getVersion() : null;
                    };
                    VersionSpecificMessageSetInfo.prototype.getServiceProviderName = function () {
                        return this.core != null ? this.core.getServiceProviderName() : null;
                    };
                    VersionSpecificMessageSetInfo.prototype.getUrl = function () {
                        return this.core != null ? this.core.getUrl() : null;
                    };
                    VersionSpecificMessageSetInfo.prototype.getSecurity = function () {
                        return this.core != null ? this.core.getSecurity() : null;
                    };
                    VersionSpecificMessageSetInfo.prototype.isSslRequired = function () {
                        return this.core != null && this.core.getSslRequired() != null ? this.core.getSslRequired() : true;
                    };
                    VersionSpecificMessageSetInfo.prototype.getRealm = function () {
                        return this.core != null ? this.core.getRealm() : null;
                    };
                    VersionSpecificMessageSetInfo.prototype.getLanguage = function () {
                        return this.core != null ? this.core.getLanguage() : null;
                    };
                    VersionSpecificMessageSetInfo.prototype.getSyncCapability = function () {
                        return this.core != null ? this.core.getSyncCapability() : null;
                    };
                    VersionSpecificMessageSetInfo.prototype.hasFileBasedErrorRecoverySupport = function () {
                        return this.core != null && this.core.getFileBasedErrorRecoverySupport() != null ? this.core.getFileBasedErrorRecoverySupport() : false;
                    };
                    return VersionSpecificMessageSetInfo;
                })();
                profile.VersionSpecificMessageSetInfo = VersionSpecificMessageSetInfo;
                ChildAggregate_add(VersionSpecificMessageSetInfo, { order: 0, type: profile.CoreMessageSetInfo, read: VersionSpecificMessageSetInfo.prototype.getCore, write: VersionSpecificMessageSetInfo.prototype.setCore });
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='VersionSpecificMessageSetInfo'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                /**
                 * Information about a message set.
                 *
                 * @author Ryan Heaton
                 * @see "Section 7.2.1, OFX Spec"
                 */
                var AbstractMessageSetInfo = (function () {
                    function AbstractMessageSetInfo() {
                    }
                    /**
                     * List of information about a message set for each version supported.
                     *
                     * @return List of information about a message set for each version supported.
                     */
                    AbstractMessageSetInfo.prototype.getVersionSpecificInformationList = function () {
                        return this.versionSpecificInformationList;
                    };
                    /**
                     * List of information about a message set for each version supported.
                     *
                     * @param versionSpecificInformationList List of information about a message set for each version supported.
                     */
                    AbstractMessageSetInfo.prototype.setVersionSpecificInformationList = function (versionSpecificInformationList) {
                        this.versionSpecificInformationList = versionSpecificInformationList;
                    };
                    return AbstractMessageSetInfo;
                })();
                profile.AbstractMessageSetInfo = AbstractMessageSetInfo;
                ChildAggregate_add(AbstractMessageSetInfo, { order: 0, type: Array, collectionEntryType: profile.VersionSpecificMessageSetInfo, read: AbstractMessageSetInfo.prototype.getVersionSpecificInformationList, write: AbstractMessageSetInfo.prototype.setVersionSpecificInformationList });
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='AbstractMessageSetInfo'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                /**
                 * @author Ryan Heaton
                 * @see "Section 7.2, OFX Spec"
                 */
                var MessageSetInfoList = (function () {
                    function MessageSetInfoList() {
                    }
                    /**
                     * The list of information for each message set.
                     *
                     * @return The list of information for each message set.
                     */
                    MessageSetInfoList.prototype.getInformationList = function () {
                        return this.informationList;
                    };
                    /**
                     * The list of information for each message set.
                     *
                     * @param informationList The list of information for each message set.
                     */
                    MessageSetInfoList.prototype.setInformationList = function (informationList) {
                        this.informationList = informationList;
                    };
                    return MessageSetInfoList;
                })();
                profile.MessageSetInfoList = MessageSetInfoList;
                Aggregate_add(MessageSetInfoList, "MSGSETLIST");
                ChildAggregate_add(MessageSetInfoList, { order: 0, type: Array, collectionEntryType: profile.AbstractMessageSetInfo, read: MessageSetInfoList.prototype.getInformationList, write: MessageSetInfoList.prototype.setInformationList });
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/Element_add'/>
///<reference path='../SignonProfile'/>
///<reference path='CharacterType'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                /**
                 * Sign-on information
                 *
                 * @author Ryan Heaton
                 * @see "Section 7.2.2, OFX Spec"
                 */
                var SignonInfo = (function () {
                    function SignonInfo() {
                        this.passwordCaseSensitive = true;
                        this.passwordSpecialCharsAllowed = true;
                        this.passwordSpacesAllowed = true;
                    }
                    /**
                     * The name of the sign-on realm.
                     *
                     * @return The name of the sign-on realm.
                     */
                    SignonInfo.prototype.getRealm = function () {
                        return this.realm;
                    };
                    /**
                     * The name of the sign-on realm.
                     *
                     * @param realm The name of the sign-on realm.
                     */
                    SignonInfo.prototype.setRealm = function (realm) {
                        this.realm = realm;
                    };
                    /**
                     * The minimum number of password characters.
                     *
                     * @return The minimum number of password characters.
                     */
                    SignonInfo.prototype.getMinPasswordCharacters = function () {
                        return this.minPasswordCharacters;
                    };
                    /**
                     * The minimum number of password characters.
                     *
                     * @param minPasswordCharacters The minimum number of password characters.
                     */
                    SignonInfo.prototype.setMinPasswordCharacters = function (minPasswordCharacters) {
                        this.minPasswordCharacters = minPasswordCharacters;
                    };
                    /**
                     * The maximum number of password characters.
                     *
                     * @return The maximum number of password characters.
                     */
                    SignonInfo.prototype.getMaxPasswordCharacters = function () {
                        return this.maxPasswordCharacters;
                    };
                    /**
                     * The maximum number of password characters.
                     *
                     * @param maxPasswordCharacters The maximum number of password characters.
                     */
                    SignonInfo.prototype.setMaxPasswordCharacters = function (maxPasswordCharacters) {
                        this.maxPasswordCharacters = maxPasswordCharacters;
                    };
                    /**
                     * The type of password characters supported.
                     *
                     * @return The type of password characters supported.
                     */
                    SignonInfo.prototype.getPasswordCharacterType = function () {
                        return this.passwordCharacterType;
                    };
                    /**
                     * The type of password characters supported.
                     *
                     * @param passwordCharacterType The type of password characters supported.
                     */
                    SignonInfo.prototype.setPasswordCharacterType = function (passwordCharacterType) {
                        this.passwordCharacterType = passwordCharacterType;
                    };
                    /**
                     * Whether the password is case-sensitive.
                     *
                     * @return Whether the password is case-sensitive.
                     */
                    SignonInfo.prototype.getPasswordCaseSensitive = function () {
                        return this.passwordCaseSensitive;
                    };
                    /**
                     * Whether the password is case-sensitive.
                     *
                     * @param passwordCaseSensitive Whether the password is case-sensitive.
                     */
                    SignonInfo.prototype.setPasswordCaseSensitive = function (passwordCaseSensitive) {
                        this.passwordCaseSensitive = passwordCaseSensitive;
                    };
                    /**
                     * Whether special characters are allowed in the password.
                     *
                     * @return Whether special characters are allowed in the password.
                     */
                    SignonInfo.prototype.getPasswordSpecialCharsAllowed = function () {
                        return this.passwordSpecialCharsAllowed;
                    };
                    /**
                     * Whether special characters are allowed in the password.
                     *
                     * @param passwordSpecialCharsAllowed Whether special characters are allowed in the password.
                     */
                    SignonInfo.prototype.setPasswordSpecialCharsAllowed = function (passwordSpecialCharsAllowed) {
                        this.passwordSpecialCharsAllowed = passwordSpecialCharsAllowed;
                    };
                    /**
                     * Whether spaces are allowed in the password.
                     *
                     * @return Whether spaces are allowed in the password.
                     */
                    SignonInfo.prototype.getPasswordSpacesAllowed = function () {
                        return this.passwordSpacesAllowed;
                    };
                    /**
                     * Whether spaces are allowed in the password.
                     *
                     * @param passwordSpacesAllowed Whether spaces are allowed in the password.
                     */
                    SignonInfo.prototype.setPasswordSpacesAllowed = function (passwordSpacesAllowed) {
                        this.passwordSpacesAllowed = passwordSpacesAllowed;
                    };
                    /**
                     * Whether the server can process a password change request for this realm.
                     *
                     * @return Whether the server can process a password change request for this realm.
                     */
                    SignonInfo.prototype.getChangePasswordSupported = function () {
                        return this.changePasswordSupported;
                    };
                    /**
                     * Whether the server can process a password change request for this realm.
                     *
                     * @param changePasswordSupported Whether the server can process a password change request for this realm.
                     */
                    SignonInfo.prototype.setChangePasswordSupported = function (changePasswordSupported) {
                        this.changePasswordSupported = changePasswordSupported;
                    };
                    /**
                     * Whether the server requires the user to change their password as part of their first signon.
                     *
                     * @return Whether the server requires the user to change their password as part of their first signon.
                     */
                    SignonInfo.prototype.getChangePasswordFirstRequired = function () {
                        return this.changePasswordFirstRequired;
                    };
                    /**
                     * Whether the server requires the user to change their password as part of their first signon.
                     *
                     * @param changePasswordFirstRequired Whether the server requires the user to change their password as part of their first signon.
                     */
                    SignonInfo.prototype.setChangePasswordFirstRequired = function (changePasswordFirstRequired) {
                        this.changePasswordFirstRequired = changePasswordFirstRequired;
                    };
                    /**
                     * Label for a set of additional credentials that the user must supply.
                     *
                     * @return Label for a set of additional credentials that the user must supply.
                     */
                    SignonInfo.prototype.getAdditionalCredientialsLabel1 = function () {
                        return this.additionalCredientialsLabel1;
                    };
                    /**
                     * Label for a set of additional credentials that the user must supply.
                     *
                     * @param additionalCredientialsLabel1 Label for a set of additional credentials that the user must supply.
                     */
                    SignonInfo.prototype.setAdditionalCredientialsLabel1 = function (additionalCredientialsLabel1) {
                        this.additionalCredientialsLabel1 = additionalCredientialsLabel1;
                    };
                    /**
                     * Label for a set of additional credentials that the user must supply.
                     *
                     * @return Label for a set of additional credentials that the user must supply.
                     */
                    SignonInfo.prototype.getAdditionalCredientialsLabel2 = function () {
                        return this.additionalCredientialsLabel2;
                    };
                    /**
                     * Label for a set of additional credentials that the user must supply.
                     *
                     * @param additionalCredientialsLabel2 Label for a set of additional credentials that the user must supply.
                     */
                    SignonInfo.prototype.setAdditionalCredientialsLabel2 = function (additionalCredientialsLabel2) {
                        this.additionalCredientialsLabel2 = additionalCredientialsLabel2;
                    };
                    /**
                     * Whether a client UID is required for teh sign-on.
                     *
                     * @return Whether a client UID is required for teh sign-on.
                     */
                    SignonInfo.prototype.getClientUIDRequired = function () {
                        return this.clientUIDRequired;
                    };
                    /**
                     * Whether a client UID is required for teh sign-on.
                     *
                     * @param clientUIDRequired Whether a client UID is required for teh sign-on.
                     */
                    SignonInfo.prototype.setClientUIDRequired = function (clientUIDRequired) {
                        this.clientUIDRequired = clientUIDRequired;
                    };
                    /**
                     * Whether an auth token is required for the sign-on.
                     *
                     * @return Whether an auth token is required for the sign-on.
                     */
                    SignonInfo.prototype.getAuthTokenRequiredForFirstSignon = function () {
                        return this.authTokenRequiredForFirstSignon;
                    };
                    /**
                     * Whether an auth token is required for the sign-on.
                     *
                     * @param authTokenRequiredForFirstSignon
                     *         Whether an auth token is required for the sign-on.
                     */
                    SignonInfo.prototype.setAuthTokenRequiredForFirstSignon = function (authTokenRequiredForFirstSignon) {
                        this.authTokenRequiredForFirstSignon = authTokenRequiredForFirstSignon;
                    };
                    /**
                     * The label of the auth token.
                     *
                     * @return The label of the auth token.
                     */
                    SignonInfo.prototype.getAuthTokenLabel = function () {
                        return this.authTokenLabel;
                    };
                    /**
                     * The label of the auth token.
                     *
                     * @param authTokenLabel The label of the auth token.
                     */
                    SignonInfo.prototype.setAuthTokenLabel = function (authTokenLabel) {
                        this.authTokenLabel = authTokenLabel;
                    };
                    /**
                     * The URL for the auth token information.
                     *
                     * @return The URL for the auth token information.
                     */
                    SignonInfo.prototype.getAuthTokenInfoURL = function () {
                        return this.authTokenInfoURL;
                    };
                    /**
                     * The URL for the auth token information.
                     *
                     * @param authTokenInfoURL The URL for the auth token information.
                     */
                    SignonInfo.prototype.setAuthTokenInfoURL = function (authTokenInfoURL) {
                        this.authTokenInfoURL = authTokenInfoURL;
                    };
                    /**
                     * Whether MFA is supported.
                     *
                     * @return Whether MFA is supported.
                     */
                    SignonInfo.prototype.getMfaSupported = function () {
                        return this.mfaSupported;
                    };
                    /**
                     * Whether MFA is supported.
                     *
                     * @param mfaSupported Whether MFA is supported.
                     */
                    SignonInfo.prototype.setMfaSupported = function (mfaSupported) {
                        this.mfaSupported = mfaSupported;
                    };
                    /**
                     * Whether an MFA challenge request is required for the first sign-on into this realm.
                     *
                     * @return Whether an MFA challenge request is required for the first sign-on into this realm.
                     */
                    SignonInfo.prototype.getMfaChallengeRequiredForFirstSignon = function () {
                        return this.mfaChallengeRequiredForFirstSignon;
                    };
                    /**
                     * Whether an MFA challenge request is required for the first sign-on into this realm.
                     *
                     * @param mfaChallengeRequiredForFirstSignon
                     *         Whether an MFA challenge request is required for the first sign-on into this realm.
                     */
                    SignonInfo.prototype.setMfaChallengeRequiredForFirstSignon = function (mfaChallengeRequiredForFirstSignon) {
                        this.mfaChallengeRequiredForFirstSignon = mfaChallengeRequiredForFirstSignon;
                    };
                    return SignonInfo;
                })();
                profile.SignonInfo = SignonInfo;
                Aggregate_add(SignonInfo, "SIGNONINFO");
                Element_add(SignonInfo, { name: "SIGNONREALM", required: true, order: 0, type: String, read: SignonInfo.prototype.getRealm, write: SignonInfo.prototype.setRealm });
                Element_add(SignonInfo, { name: "MIN", required: true, order: 10, type: Number, read: SignonInfo.prototype.getMinPasswordCharacters, write: SignonInfo.prototype.setMinPasswordCharacters });
                Element_add(SignonInfo, { name: "MAX", required: true, order: 20, type: Number, read: SignonInfo.prototype.getMaxPasswordCharacters, write: SignonInfo.prototype.setMaxPasswordCharacters });
                Element_add(SignonInfo, { name: "CHARTYPE", required: true, order: 30, type: profile.CharacterType, read: SignonInfo.prototype.getPasswordCharacterType, write: SignonInfo.prototype.setPasswordCharacterType });
                Element_add(SignonInfo, { name: "CASESEN", required: true, order: 40, type: Boolean, read: SignonInfo.prototype.getPasswordCaseSensitive, write: SignonInfo.prototype.setPasswordCaseSensitive });
                Element_add(SignonInfo, { name: "SPECIAL", required: true, order: 50, type: Boolean, read: SignonInfo.prototype.getPasswordSpecialCharsAllowed, write: SignonInfo.prototype.setPasswordSpecialCharsAllowed });
                Element_add(SignonInfo, { name: "SPACES", required: true, order: 60, type: Boolean, read: SignonInfo.prototype.getPasswordSpacesAllowed, write: SignonInfo.prototype.setPasswordSpacesAllowed });
                Element_add(SignonInfo, { name: "PINCH", required: true, order: 70, type: Boolean, read: SignonInfo.prototype.getChangePasswordSupported, write: SignonInfo.prototype.setChangePasswordSupported });
                Element_add(SignonInfo, { name: "CHGPINFIRST", required: true, order: 80, type: Boolean, read: SignonInfo.prototype.getChangePasswordFirstRequired, write: SignonInfo.prototype.setChangePasswordFirstRequired });
                Element_add(SignonInfo, { name: "USERCRED1LABEL", order: 90, type: String, read: SignonInfo.prototype.getAdditionalCredientialsLabel1, write: SignonInfo.prototype.setAdditionalCredientialsLabel1 });
                Element_add(SignonInfo, { name: "USERCRED2LABEL", order: 100, type: String, read: SignonInfo.prototype.getAdditionalCredientialsLabel2, write: SignonInfo.prototype.setAdditionalCredientialsLabel2 });
                Element_add(SignonInfo, { name: "CLIENTUIDREQ", order: 110, type: Boolean, read: SignonInfo.prototype.getClientUIDRequired, write: SignonInfo.prototype.setClientUIDRequired });
                Element_add(SignonInfo, { name: "AUTHTOKENFIRST", order: 120, type: Boolean, read: SignonInfo.prototype.getAuthTokenRequiredForFirstSignon, write: SignonInfo.prototype.setAuthTokenRequiredForFirstSignon });
                Element_add(SignonInfo, { name: "AUTHTOKENLABEL", order: 130, type: String, read: SignonInfo.prototype.getAuthTokenLabel, write: SignonInfo.prototype.setAuthTokenLabel });
                Element_add(SignonInfo, { name: "AUTHTOKENINFOURL", order: 140, type: String, read: SignonInfo.prototype.getAuthTokenInfoURL, write: SignonInfo.prototype.setAuthTokenInfoURL });
                Element_add(SignonInfo, { name: "MFACHALLENGESUPT", order: 150, type: Boolean, read: SignonInfo.prototype.getMfaSupported, write: SignonInfo.prototype.setMfaSupported });
                Element_add(SignonInfo, { name: "MFACHALLENGEFIRST", order: 160, type: Boolean, read: SignonInfo.prototype.getMfaChallengeRequiredForFirstSignon, write: SignonInfo.prototype.setMfaChallengeRequiredForFirstSignon });
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='SignonInfo'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                /**
                 * List of signon information.
                 *
                 * @author Ryan Heaton
                 * @see "Section 7.2.2, OFX Spec"
                 */
                var SignonInfoList = (function () {
                    function SignonInfoList() {
                    }
                    /**
                     * List of sign-on information.
                     *
                     * @return List of sign-on information.
                     */
                    SignonInfoList.prototype.getInfoList = function () {
                        return this.infoList;
                    };
                    /**
                     * List of sign-on information.
                     *
                     * @param infoList List of sign-on information.
                     */
                    SignonInfoList.prototype.setInfoList = function (infoList) {
                        this.infoList = infoList;
                    };
                    return SignonInfoList;
                })();
                profile.SignonInfoList = SignonInfoList;
                Aggregate_add(SignonInfoList, "SIGNONINFOLIST");
                ChildAggregate_add(SignonInfoList, { order: 0, type: Array, collectionEntryType: profile.SignonInfo, read: SignonInfoList.prototype.getInfoList, write: SignonInfoList.prototype.setInfoList });
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../../../meta/Element_add'/>
///<reference path='../MessageSetProfile'/>
///<reference path='../MessageSetType'/>
///<reference path='../ResponseMessage'/>
///<reference path='../SignonProfile'/>
///<reference path='../../../client/FinancialInstitutionProfile'/>
///<reference path='MessageSetInfoList'/>
///<reference path='SignonInfoList'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (_profile) {
                var ResponseMessage = ofx4js.domain.data.ResponseMessage;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                //import java.net.URL;
                /**
                 * @author Ryan Heaton
                 * @see "Section 7.2 OFX Spec"
                 */
                var ProfileResponse = (function (_super) {
                    __extends(ProfileResponse, _super);
                    function ProfileResponse() {
                        _super.apply(this, arguments);
                    }
                    /**
                     * List of message set information.
                     * @return List of message set information.
                     */
                    ProfileResponse.prototype.getMessageSetList = function () {
                        return this.messageSetList;
                    };
                    /**
                     * List of message set information.
                     *
                     * @param messageSetList List of message set information.
                     */
                    ProfileResponse.prototype.setMessageSetList = function (messageSetList) {
                        this.messageSetList = messageSetList;
                    };
                    /**
                     * List of signon information.
                     *
                     * @return List of signon information.
                     */
                    ProfileResponse.prototype.getSignonInfoList = function () {
                        return this.signonInfoList;
                    };
                    /**
                     * List of signon information.
                     *
                     * @param signonInfoList List of signon information.
                     */
                    ProfileResponse.prototype.setSignonInfoList = function (signonInfoList) {
                        this.signonInfoList = signonInfoList;
                    };
                    // Inherited.
                    ProfileResponse.prototype.getResponseMessageName = function () {
                        return "profile";
                    };
                    // Inherited.
                    ProfileResponse.prototype.getLastUpdated = function () {
                        return this.getTimestamp();
                    };
                    /**
                     * The timestamp of this profile update.
                     *
                     * @return The timestamp of this profile update.
                     */
                    ProfileResponse.prototype.getTimestamp = function () {
                        return this.timestamp;
                    };
                    /**
                     * The timestamp of this profile update.
                     *
                     * @param timestamp The timestamp of this profile update.
                     */
                    ProfileResponse.prototype.setTimestamp = function (timestamp) {
                        this.timestamp = timestamp;
                    };
                    /**
                     * The name of the financial institution.
                     *
                     * @return The name of the financial institution.
                     */
                    ProfileResponse.prototype.getFinancialInstitutionName = function () {
                        return this.financialInstitutionName;
                    };
                    /**
                     * The name of the financial institution.
                     *
                     * @param financialInstitutionName The name of the financial institution.
                     */
                    ProfileResponse.prototype.setFinancialInstitutionName = function (financialInstitutionName) {
                        this.financialInstitutionName = financialInstitutionName;
                    };
                    /**
                     * The address of the financial institution.
                     *
                     * @return The address of the financial institution.
                     */
                    ProfileResponse.prototype.getAddress1 = function () {
                        return this.address1;
                    };
                    /**
                     * The address of the financial institution.
                     *
                     * @param address1 The address of the financial institution.
                     */
                    ProfileResponse.prototype.setAddress1 = function (address1) {
                        this.address1 = address1;
                    };
                    /**
                     * The address of the financial institution.
                     *
                     * @return The address of the financial institution.
                     */
                    ProfileResponse.prototype.getAddress2 = function () {
                        return this.address2;
                    };
                    /**
                     * The address of the financial institution.
                     *
                     * @param address2 The address of the financial institution.
                     */
                    ProfileResponse.prototype.setAddress2 = function (address2) {
                        this.address2 = address2;
                    };
                    /**
                     * The address of the financial institution.
                     *
                     * @return The address of the financial institution.
                     */
                    ProfileResponse.prototype.getAddress3 = function () {
                        return this.address3;
                    };
                    /**
                     * The address of the financial institution.
                     *
                     * @param address3 The address of the financial institution.
                     */
                    ProfileResponse.prototype.setAddress3 = function (address3) {
                        this.address3 = address3;
                    };
                    /**
                     * The city of the financial institution.
                     *
                     * @return The city of the financial institution.
                     */
                    ProfileResponse.prototype.getCity = function () {
                        return this.city;
                    };
                    /**
                     * The city of the financial institution.
                     *
                     * @param city The city of the financial institution.
                     */
                    ProfileResponse.prototype.setCity = function (city) {
                        this.city = city;
                    };
                    /**
                     * The state of this financial institution.
                     *
                     * @return The state of this financial institution.
                     */
                    ProfileResponse.prototype.getState = function () {
                        return this.state;
                    };
                    /**
                     * The state of this financial institution.
                     *
                     * @param state The state of this financial institution.
                     */
                    ProfileResponse.prototype.setState = function (state) {
                        this.state = state;
                    };
                    /**
                     * The postal code of this financial institution.
                     *
                     * @return The postal code of this financial institution.
                     */
                    ProfileResponse.prototype.getZip = function () {
                        return this.zip;
                    };
                    /**
                     * The postal code of this financial institution.
                     *
                     * @param zip The postal code of this financial institution.
                     */
                    ProfileResponse.prototype.setZip = function (zip) {
                        this.zip = zip;
                    };
                    /**
                     * The country code for this financial institution.
                     *
                     * @return The country code for this financial institution.
                     * @see java.util.Locale#getISO3Country()
                     */
                    ProfileResponse.prototype.getCountry = function () {
                        return this.country;
                    };
                    /**
                     * The country code for this financial institution.
                     *
                     * @param country The country code for this financial institution.
                     */
                    ProfileResponse.prototype.setCountry = function (country) {
                        this.country = country;
                    };
                    /**
                     * The phone number to customer service.
                     *
                     * @return The phone number to customer service.
                     */
                    ProfileResponse.prototype.getCustomerServicePhone = function () {
                        return this.customerServicePhone;
                    };
                    /**
                     * The phone number to customer service.
                     *
                     * @param customerServicePhone The phone number to customer service.
                     */
                    ProfileResponse.prototype.setCustomerServicePhone = function (customerServicePhone) {
                        this.customerServicePhone = customerServicePhone;
                    };
                    /**
                     * The phone number to tech support.
                     *
                     * @return The phone number to tech support.
                     */
                    ProfileResponse.prototype.getTechnicalSupportPhone = function () {
                        return this.technicalSupportPhone;
                    };
                    /**
                     * The phone number to tech support.
                     *
                     * @param technicalSupportPhone The phone number to tech support.
                     */
                    ProfileResponse.prototype.setTechnicalSupportPhone = function (technicalSupportPhone) {
                        this.technicalSupportPhone = technicalSupportPhone;
                    };
                    /**
                     * The fax number.
                     *
                     * @return The fax number.
                     */
                    ProfileResponse.prototype.getFax = function () {
                        return this.fax;
                    };
                    /**
                     * The fax number.
                     *
                     * @param fax The fax number.
                     */
                    ProfileResponse.prototype.setFax = function (fax) {
                        this.fax = fax;
                    };
                    /**
                     * URL for the financial institution.
                     *
                     * @return URL for the financial institution.
                     */
                    ProfileResponse.prototype.getSiteURL = function () {
                        return this.siteURL;
                    };
                    /**
                     * URL for the financial institution.
                     *
                     * @param siteURL URL for the financial institution.
                     */
                    ProfileResponse.prototype.setSiteURL = function (siteURL) {
                        this.siteURL = siteURL;
                    };
                    /**
                     * The email for this FI
                     *
                     * @return The email for this FI
                     */
                    ProfileResponse.prototype.getEmail = function () {
                        return this.email;
                    };
                    /**
                     * The email for this FI
                     *
                     * @param email The email for this FI
                     */
                    ProfileResponse.prototype.setEmail = function (email) {
                        this.email = email;
                    };
                    ProfileResponse.prototype.getMessageSetProfile = function (type, version) {
                        if (version === void 0) { version = null; }
                        return (version === null) ? this.getMessageSetProfile_noversion(type) : this.getMessageSetProfile_version(type, version);
                    };
                    ProfileResponse.prototype.getMessageSetProfile_noversion = function (type) {
                        var profiles = this.getProfiles(type);
                        if (profiles.length > 1) {
                            throw new ofx4js.Error("More than one profile of type " + type);
                        }
                        else if (profiles.length == 0) {
                            return null;
                        }
                        else {
                            return profiles[0];
                        }
                    };
                    /**
                     * Get all the profiles of the specified type.
                     *
                     * @param type The type.
                     * @return The profiles.
                     */
                    ProfileResponse.prototype.getProfiles = function (type) {
                        var profiles = new Array();
                        if (this.getMessageSetList() != null && this.getMessageSetList().getInformationList() != null) {
                            for (var info_ in this.getMessageSetList().getInformationList()) {
                                var info = info_;
                                if (info.getVersionSpecificInformationList() != null) {
                                    for (var versionSpecificInfo_ in info.getVersionSpecificInformationList()) {
                                        var versionSpecificInfo = versionSpecificInfo_;
                                        if (versionSpecificInfo.getMessageSetType() == type) {
                                            profiles.push(versionSpecificInfo);
                                        }
                                    }
                                }
                            }
                        }
                        return profiles;
                    };
                    ProfileResponse.prototype.getMessageSetProfile_version = function (type, version) {
                        for (var profile_ in this.getProfiles(type)) {
                            var profile = profile_;
                            if (version == null) {
                                if (profile.getVersion() == null) {
                                    return profile;
                                }
                            }
                            else if (version === profile.getVersion()) {
                                return profile;
                            }
                        }
                        return null;
                    };
                    ProfileResponse.prototype.getSignonProfile = function (messageSet) {
                        if (this.getSignonInfoList() != null && this.getSignonInfoList().getInfoList() != null) {
                            for (var signonInfo_ in this.getSignonInfoList().getInfoList()) {
                                var signonInfo = signonInfo_;
                                if (messageSet.getRealm() == null) {
                                    if (signonInfo.getRealm() == null) {
                                        return signonInfo;
                                    }
                                }
                                else if (messageSet.getRealm() === signonInfo.getRealm()) {
                                    return signonInfo;
                                }
                            }
                        }
                        return null;
                    };
                    return ProfileResponse;
                })(ResponseMessage);
                _profile.ProfileResponse = ProfileResponse;
                Aggregate_add(ProfileResponse, "PROFRS");
                ChildAggregate_add(ProfileResponse, { order: 0, type: _profile.MessageSetInfoList, read: ProfileResponse.prototype.getMessageSetList, write: ProfileResponse.prototype.setMessageSetList });
                ChildAggregate_add(ProfileResponse, { order: 10, type: _profile.SignonInfoList, read: ProfileResponse.prototype.getSignonInfoList, write: ProfileResponse.prototype.setSignonInfoList });
                Element_add(ProfileResponse, { name: "DTPROFUP", order: 20, type: Date, read: ProfileResponse.prototype.getTimestamp, write: ProfileResponse.prototype.setTimestamp });
                Element_add(ProfileResponse, { name: "FINAME", order: 30, type: String, read: ProfileResponse.prototype.getFinancialInstitutionName, write: ProfileResponse.prototype.setFinancialInstitutionName });
                Element_add(ProfileResponse, { name: "ADDR1", required: true, order: 40, type: String, read: ProfileResponse.prototype.getAddress1, write: ProfileResponse.prototype.setAddress1 });
                Element_add(ProfileResponse, { name: "ADDR2", order: 50, type: String, read: ProfileResponse.prototype.getAddress2, write: ProfileResponse.prototype.setAddress2 });
                Element_add(ProfileResponse, { name: "ADDR3", order: 60, type: String, read: ProfileResponse.prototype.getAddress3, write: ProfileResponse.prototype.setAddress3 });
                Element_add(ProfileResponse, { name: "CITY", required: true, order: 70, type: String, read: ProfileResponse.prototype.getCity, write: ProfileResponse.prototype.setCity });
                Element_add(ProfileResponse, { name: "STATE", required: true, order: 80, type: String, read: ProfileResponse.prototype.getState, write: ProfileResponse.prototype.setState });
                Element_add(ProfileResponse, { name: "POSTALCODE", required: true, order: 90, type: String, read: ProfileResponse.prototype.getZip, write: ProfileResponse.prototype.setZip });
                Element_add(ProfileResponse, { name: "COUNTRY", required: true, order: 100, type: String, read: ProfileResponse.prototype.getCountry, write: ProfileResponse.prototype.setCountry });
                Element_add(ProfileResponse, { name: "CSPHONE", order: 110, type: String, read: ProfileResponse.prototype.getCustomerServicePhone, write: ProfileResponse.prototype.setCustomerServicePhone });
                Element_add(ProfileResponse, { name: "TSPHONE", order: 120, type: String, read: ProfileResponse.prototype.getTechnicalSupportPhone, write: ProfileResponse.prototype.setTechnicalSupportPhone });
                Element_add(ProfileResponse, { name: "FAXPHONE", order: 130, type: String, read: ProfileResponse.prototype.getFax, write: ProfileResponse.prototype.setFax });
                Element_add(ProfileResponse, { name: "URL", order: 140, type: String, read: ProfileResponse.prototype.getSiteURL, write: ProfileResponse.prototype.setSiteURL });
                Element_add(ProfileResponse, { name: "EMAIL", order: 150, type: String, read: ProfileResponse.prototype.getEmail, write: ProfileResponse.prototype.setEmail });
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../TransactionWrappedResponseMessage'/>
///<reference path='ProfileResponse'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                var TransactionWrappedResponseMessage = ofx4js.domain.data.TransactionWrappedResponseMessage;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                /**
                 * @author Ryan Heaton
                 */
                var ProfileResponseTransaction = (function (_super) {
                    __extends(ProfileResponseTransaction, _super);
                    function ProfileResponseTransaction() {
                        _super.apply(this, arguments);
                    }
                    /**
                     * The message.
                     *
                     * @return The message.
                     */
                    ProfileResponseTransaction.prototype.getMessage = function () {
                        return this.message;
                    };
                    /**
                     * The message.
                     *
                     * @param message The message.
                     */
                    ProfileResponseTransaction.prototype.setMessage = function (message) {
                        this.message = message;
                    };
                    // Inherited.
                    ProfileResponseTransaction.prototype.getWrappedMessage = function () {
                        return this.getMessage();
                    };
                    return ProfileResponseTransaction;
                })(TransactionWrappedResponseMessage);
                profile.ProfileResponseTransaction = ProfileResponseTransaction;
                Aggregate_add(ProfileResponseTransaction, "PROFTRNRS");
                ChildAggregate_add(ProfileResponseTransaction, { required: true, order: 30, type: profile.ProfileResponse, read: ProfileResponseTransaction.prototype.getMessage, write: ProfileResponseTransaction.prototype.setMessage });
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../MessageSetType'/>
///<reference path='../ResponseMessageSet'/>
///<reference path='ProfileResponseTransaction'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                var MessageSetType = ofx4js.domain.data.MessageSetType;
                var ResponseMessageSet = ofx4js.domain.data.ResponseMessageSet;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                /**
                 * @author Ryan Heaton
                 * @see "Section 7 OFX Spec"
                 */
                var ProfileResponseMessageSet = (function (_super) {
                    __extends(ProfileResponseMessageSet, _super);
                    function ProfileResponseMessageSet() {
                        _super.apply(this, arguments);
                    }
                    ProfileResponseMessageSet.prototype.getType = function () {
                        return 10 /* profile */;
                    };
                    /**
                     * The profile response.
                     *
                     * @return The profile response.
                     */
                    ProfileResponseMessageSet.prototype.getProfileResponse = function () {
                        return this.profileResponse;
                    };
                    /**
                     * The profile response.
                     *
                     * @param profileResponse The profile response.
                     */
                    ProfileResponseMessageSet.prototype.setProfileResponse = function (profileResponse) {
                        this.profileResponse = profileResponse;
                    };
                    // Inherited.
                    ProfileResponseMessageSet.prototype.getResponseMessages = function () {
                        var messages = new Array();
                        if (this.getProfileResponse() != null) {
                            messages.push(this.getProfileResponse());
                        }
                        return messages;
                    };
                    return ProfileResponseMessageSet;
                })(ResponseMessageSet);
                profile.ProfileResponseMessageSet = ProfileResponseMessageSet;
                Aggregate_add(ProfileResponseMessageSet, "PROFMSGSRSV1");
                ChildAggregate_add(ProfileResponseMessageSet, { required: true, order: 0, type: profile.ProfileResponseTransaction, read: ProfileResponseMessageSet.prototype.getProfileResponse, write: ProfileResponseMessageSet.prototype.setProfileResponse });
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../io/AggregateIntrospector'/>
var ofx4js;
(function (ofx4js) {
    var meta;
    (function (meta) {
        var AggregateIntrospector = ofx4js.io.AggregateIntrospector;
        function Header_add(clazz, params) {
            console.assert(params.type != null);
            AggregateIntrospector.addHeader(clazz, new meta.Header(params));
        }
        meta.Header_add = Header_add;
    })(meta = ofx4js.meta || (ofx4js.meta = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../project.d.ts'/>
///<reference path='../../collections/SortedSet'/>
///<reference path='../../meta/Aggregate_add'/>
///<reference path='../../meta/ChildAggregate_add'/>
///<reference path='../../meta/Header_add'/>
///<reference path='ApplicationSecurity'/>
///<reference path='RequestMessageSet'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var SortedSet = ofx4js.collections.SortedSet;
            var Aggregate_add = ofx4js.meta.Aggregate_add;
            var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
            var Header_add = ofx4js.meta.Header_add;
            var UUID = require("uuid");
            // import java.util.SortedSet;
            // import java.util.UUID;
            /**
             * Envelope for enclosing an OFX request.
             *
             * @author Ryan Heaton
             * @see "Section 2.4.3, OFX Spec"
             */
            var RequestEnvelope = (function () {
                function RequestEnvelope(UID) {
                    if (UID === void 0) { UID = UUID.v1(); }
                    this.security = 0 /* NONE */;
                    this.UID = UID;
                }
                /**
                 * The security of this envelope.
                 *
                 * @return The security of this envelope.
                 * @see "Section 2.2, OFX spec"
                 */
                RequestEnvelope.prototype.getSecurity = function () {
                    return this.security;
                };
                /**
                 * The security of this envelope.
                 *
                 * @param security The security of this envelope.
                 * @see "Section 2.2, OFX spec"
                 */
                RequestEnvelope.prototype.setSecurity = function (security) {
                    this.security = security;
                };
                /**
                 * The UID for the envelope.
                 *
                 * @return The UID for the envelope.
                 * @see "Section 2.2, OFX spec"
                 */
                RequestEnvelope.prototype.getUID = function () {
                    return this.UID;
                };
                /**
                 * The UID for the envelope.
                 *
                 * @param UID The UID for the envelope.
                 * @see "Section 2.2, OFX spec"
                 */
                RequestEnvelope.prototype.setUID = function (UID) {
                    this.UID = UID;
                };
                /**
                 * The UID of the last-processed request/response (used for file-based error recovery).
                 *
                 * @return The UID of the last-processed request/response (used for file-based error recovery).
                 * @see "Section 2.2, OFX spec"
                 */
                RequestEnvelope.prototype.getLastProcessedUID = function () {
                    return this.lastProcessedUID;
                };
                /**
                 * The UID of the last-processed request/response (used for file-based error recovery).
                 *
                 * @param lastProcessedUID The UID of the last-processed request/response (used for file-based error recovery).
                 * @see "Section 2.2, OFX spec"
                 */
                RequestEnvelope.prototype.setLastProcessedUID = function (lastProcessedUID) {
                    this.lastProcessedUID = lastProcessedUID;
                };
                /**
                 * The message sets that make up the content of this request.
                 *
                 * @return The message sets that make up the content of this request.
                 * @see "Section 2.4.5, OFX Spec"
                 */
                RequestEnvelope.prototype.getMessageSets = function () {
                    return this.messageSets;
                };
                /**
                 * The message sets that make up the content of this request.
                 *
                 * @param messageSets The message sets that make up the content of this request.
                 * @see "Section 2.4.5, OFX Spec"
                 */
                RequestEnvelope.prototype.setMessageSets = function (messageSets) {
                    this.messageSets = messageSets;
                };
                return RequestEnvelope;
            })();
            data.RequestEnvelope = RequestEnvelope;
            Aggregate_add(RequestEnvelope, "OFX");
            Header_add(RequestEnvelope, { name: "SECURITY", type: data.ApplicationSecurity, read: RequestEnvelope.prototype.getSecurity, write: RequestEnvelope.prototype.setSecurity });
            Header_add(RequestEnvelope, { name: "NEWFILEUID", type: String, read: RequestEnvelope.prototype.getUID, write: RequestEnvelope.prototype.setUID });
            Header_add(RequestEnvelope, { name: "OLDFILEUID", type: String, read: RequestEnvelope.prototype.getLastProcessedUID, write: RequestEnvelope.prototype.setLastProcessedUID });
            ChildAggregate_add(RequestEnvelope, { order: 1, type: SortedSet, collectionEntryType: data.RequestMessageSet, read: RequestEnvelope.prototype.getMessageSets, write: RequestEnvelope.prototype.setMessageSets });
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/Element_add'/>
///<reference path='../ResponseMessage'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var signon;
            (function (signon) {
                var ResponseMessage = ofx4js.domain.data.ResponseMessage;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                /**
                 * Response to a change a user password request.
                 *
                 * @author Ryan Heaton
                 * @see "Section 2.5.2.2, OFX Spec."
                 */
                var PasswordChangeResponse = (function (_super) {
                    __extends(PasswordChangeResponse, _super);
                    function PasswordChangeResponse() {
                        _super.apply(this, arguments);
                    }
                    /**
                     * The id of the user changing password.
                     *
                     * @return The id of the user changing password.
                     */
                    PasswordChangeResponse.prototype.getUserId = function () {
                        return this.userId;
                    };
                    // Inherited.
                    PasswordChangeResponse.prototype.getResponseMessageName = function () {
                        return "password change";
                    };
                    /**
                     * The id of the user changing password.
                     *
                     * @param userId The id of the user changing password.
                     */
                    PasswordChangeResponse.prototype.setUserId = function (userId) {
                        this.userId = userId;
                    };
                    /**
                     * The timestamp of the password change.
                     *
                     * @return The timestamp of the password change.
                     */
                    PasswordChangeResponse.prototype.getChangeTimestamp = function () {
                        return this.changeTimestamp;
                    };
                    /**
                     * The timestamp of the password change.
                     *
                     * @param changeTimestamp The timestamp of the password change.
                     */
                    PasswordChangeResponse.prototype.setChangeTimestamp = function (changeTimestamp) {
                        this.changeTimestamp = changeTimestamp;
                    };
                    return PasswordChangeResponse;
                })(ResponseMessage);
                signon.PasswordChangeResponse = PasswordChangeResponse;
                Aggregate_add(PasswordChangeResponse, "PINCHRQ");
                Element_add(PasswordChangeResponse, { name: "USERID", required: true, order: 0, type: String, read: PasswordChangeResponse.prototype.getUserId, write: PasswordChangeResponse.prototype.setUserId });
                Element_add(PasswordChangeResponse, { name: "DTCHANGED", order: 10, type: Date, read: PasswordChangeResponse.prototype.getChangeTimestamp, write: PasswordChangeResponse.prototype.setChangeTimestamp });
            })(signon = data.signon || (data.signon = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../TransactionWrappedResponseMessage'/>
///<reference path='PasswordChangeResponse'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var signon;
            (function (signon) {
                var TransactionWrappedResponseMessage = ofx4js.domain.data.TransactionWrappedResponseMessage;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                /**
                 * @author Ryan Heaton
                 */
                var PasswordChangeResponseTransaction = (function (_super) {
                    __extends(PasswordChangeResponseTransaction, _super);
                    function PasswordChangeResponseTransaction() {
                        _super.apply(this, arguments);
                    }
                    /**
                     * The message.
                     *
                     * @return The message.
                     */
                    PasswordChangeResponseTransaction.prototype.getMessage = function () {
                        return this.message;
                    };
                    /**
                     * The message.
                     *
                     * @param message The message.
                     */
                    PasswordChangeResponseTransaction.prototype.setMessage = function (message) {
                        this.message = message;
                    };
                    // Inherited.
                    PasswordChangeResponseTransaction.prototype.getWrappedMessage = function () {
                        return this.getMessage();
                    };
                    return PasswordChangeResponseTransaction;
                })(TransactionWrappedResponseMessage);
                signon.PasswordChangeResponseTransaction = PasswordChangeResponseTransaction;
                Aggregate_add(PasswordChangeResponseTransaction, "PINCHTRNRS");
                ChildAggregate_add(PasswordChangeResponseTransaction, { required: true, order: 30, type: signon.PasswordChangeResponse, read: PasswordChangeResponseTransaction.prototype.getMessage, write: PasswordChangeResponseTransaction.prototype.setMessage });
            })(signon = data.signon || (data.signon = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../common/Status'/>
///<reference path='../common/StatusHolder'/>
///<reference path='FinancialInstitution'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var signon;
            (function (signon) {
                var Status = ofx4js.domain.data.common.Status;
                var ResponseMessage = ofx4js.domain.data.ResponseMessage;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                /**
                 * The signon response message.
                 *
                 * @author Ryan Heaton
                 * @see "Section 2.5.1.2, OFX Spec."
                 */
                var SignonResponse = (function (_super) {
                    __extends(SignonResponse, _super);
                    function SignonResponse() {
                        _super.call(this);
                        this.language = "ENG"; //Locale.US.getISO3Language();
                    }
                    SignonResponse.prototype.getResponseMessageName = function () {
                        return "signon";
                    };
                    SignonResponse.prototype.getStatusHolderName = function () {
                        return this.getResponseMessageName();
                    };
                    /**
                     * The signon response status.
                     *
                     * @return The signon response status.
                     */
                    SignonResponse.prototype.getStatus = function () {
                        return this.status;
                    };
                    /**
                     * The signon response status.
                     *
                     * @param status The signon response status.
                     */
                    SignonResponse.prototype.setStatus = function (status) {
                        this.status = status;
                    };
                    /**
                     * The timestamp of this response.
                     *
                     * @return The timestamp of this response.
                     */
                    SignonResponse.prototype.getTimestamp = function () {
                        return this.timestamp;
                    };
                    /**
                     * The timestamp of this response.
                     *
                     * @param timestamp The timestamp of this response.
                     */
                    SignonResponse.prototype.setTimestamp = function (timestamp) {
                        this.timestamp = timestamp;
                    };
                    /**
                     * The userkey that can be used instead of the username/password.
                     *
                     * @return The userkey that can be used instead of the username/password.
                     */
                    SignonResponse.prototype.getUserKey = function () {
                        return this.userKey;
                    };
                    /**
                     * The userkey that can be used instead of the username/password.
                     *
                     * @param userKey The userkey that can be used instead of the username/password.
                     */
                    SignonResponse.prototype.setUserKey = function (userKey) {
                        this.userKey = userKey;
                    };
                    /**
                     * The date/time of the expiration of the user key.
                     *
                     * @return The date/time of the expiration of the user key.
                     */
                    SignonResponse.prototype.getUserKeyExpiration = function () {
                        return this.userKeyExpiration;
                    };
                    /**
                     * The date/time of the expiration of the user key.
                     *
                     * @param userKeyExpiration The date/time of the expiration of the user key.
                     */
                    SignonResponse.prototype.setUserKeyExpiration = function (userKeyExpiration) {
                        this.userKeyExpiration = userKeyExpiration;
                    };
                    /**
                     * The three-letter langauge code.
                     *
                     * @return The three-letter langauge code.
                     * @see java.util.Locale#getISO3Language()
                     */
                    SignonResponse.prototype.getLanguage = function () {
                        return this.language;
                    };
                    /**
                     * The three-letter langauge code.
                     *
                     * @param language The three-letter langauge code.
                     */
                    SignonResponse.prototype.setLanguage = function (language) {
                        this.language = language;
                    };
                    /**
                     * The date/time that the FI profile was last updated.
                     *
                     * @return The date/time that the FI profile was last updated.
                     */
                    SignonResponse.prototype.getProfileLastUpdated = function () {
                        return this.profileLastUpdated;
                    };
                    /**
                     * The date/time that the FI profile was last updated.
                     *
                     * @param profileLastUpdated The date/time that the FI profile was last updated.
                     */
                    SignonResponse.prototype.setProfileLastUpdated = function (profileLastUpdated) {
                        this.profileLastUpdated = profileLastUpdated;
                    };
                    /**
                     * The date/time that the user's account information was updated.
                     *
                     * @return The date/time that the user's account information was updated.
                     */
                    SignonResponse.prototype.getAccountLastUpdated = function () {
                        return this.accountLastUpdated;
                    };
                    /**
                     * The date/time that the user's account information was updated.
                     *
                     * @param accountLastUpdated The date/time that the user's account information was updated.
                     */
                    SignonResponse.prototype.setAccountLastUpdated = function (accountLastUpdated) {
                        this.accountLastUpdated = accountLastUpdated;
                    };
                    /**
                     * The financial instutution identity information.
                     *
                     * @return The financial instutution identity information.
                     */
                    SignonResponse.prototype.getFinancialInstitution = function () {
                        return this.financialInstitution;
                    };
                    /**
                     * The financial instutution identity information.
                     *
                     * @param financialInstitution The financial instutution identity information.
                     */
                    SignonResponse.prototype.setFinancialInstitution = function (financialInstitution) {
                        this.financialInstitution = financialInstitution;
                    };
                    /**
                     * The session id for the client.
                     *
                     * @return The session id for the client.
                     */
                    SignonResponse.prototype.getSessionId = function () {
                        return this.sessionId;
                    };
                    /**
                     * The session id for the client.
                     *
                     * @param sessionId The session id for the client.
                     */
                    SignonResponse.prototype.setSessionId = function (sessionId) {
                        this.sessionId = sessionId;
                    };
                    /**
                     * The access key that the client should return in the next sign-on requuest.
                     *
                     * @return The access key that the client should return in the next sign-on requuest.
                     */
                    SignonResponse.prototype.getAccessKey = function () {
                        return this.accessKey;
                    };
                    /**
                     * The access key that the client should return in the next sign-on requuest.
                     *
                     * @param accessKey The access key that the client should return in the next sign-on requuest.
                     */
                    SignonResponse.prototype.setAccessKey = function (accessKey) {
                        this.accessKey = accessKey;
                    };
                    return SignonResponse;
                })(ResponseMessage);
                signon.SignonResponse = SignonResponse;
                Aggregate_add(SignonResponse, "SONRS");
                ChildAggregate_add(SignonResponse, { required: true, order: 0, type: Status, read: SignonResponse.prototype.getStatus, write: SignonResponse.prototype.setStatus });
                Element_add(SignonResponse, { name: "DTSERVER", required: true, order: 10, type: Date, read: SignonResponse.prototype.getTimestamp, write: SignonResponse.prototype.setTimestamp });
                Element_add(SignonResponse, { name: "USERKEY", order: 20, type: String, read: SignonResponse.prototype.getUserKey, write: SignonResponse.prototype.setUserKey });
                Element_add(SignonResponse, { name: "TSKEYEXPIRE", order: 30, type: Date, read: SignonResponse.prototype.getUserKeyExpiration, write: SignonResponse.prototype.setUserKeyExpiration });
                Element_add(SignonResponse, { name: "LANGUAGE", required: true, order: 40, type: String, read: SignonResponse.prototype.getLanguage, write: SignonResponse.prototype.setLanguage });
                Element_add(SignonResponse, { name: "DTPROFUP", order: 50, type: Date, read: SignonResponse.prototype.getProfileLastUpdated, write: SignonResponse.prototype.setProfileLastUpdated });
                Element_add(SignonResponse, { name: "DTACCTUP", order: 60, type: Date, read: SignonResponse.prototype.getAccountLastUpdated, write: SignonResponse.prototype.setAccountLastUpdated });
                ChildAggregate_add(SignonResponse, { order: 70, type: signon.FinancialInstitution, read: SignonResponse.prototype.getFinancialInstitution, write: SignonResponse.prototype.setFinancialInstitution });
                Element_add(SignonResponse, { name: "SESSCOOKIE", order: 80, type: String, read: SignonResponse.prototype.getSessionId, write: SignonResponse.prototype.setSessionId });
                Element_add(SignonResponse, { name: "ACCESSKEY", order: 90, type: String, read: SignonResponse.prototype.getAccessKey, write: SignonResponse.prototype.setAccessKey });
            })(signon = data.signon || (data.signon = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../MessageSetType'/>
///<reference path='../ResponseMessageSet'/>
///<reference path='../ResponseMessage'/>
///<reference path='PasswordChangeResponseTransaction'/>
///<reference path='SignonResponse'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var signon;
            (function (signon) {
                var MessageSetType = ofx4js.domain.data.MessageSetType;
                var ResponseMessageSet = ofx4js.domain.data.ResponseMessageSet;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                /**
                 * The sign-on response message set.
                 *
                 * @author Ryan Heaton
                 * @see "Section 2.5, OFX Spec."
                 */
                var SignonResponseMessageSet = (function (_super) {
                    __extends(SignonResponseMessageSet, _super);
                    function SignonResponseMessageSet() {
                        _super.apply(this, arguments);
                    }
                    SignonResponseMessageSet.prototype.getType = function () {
                        return 0 /* signon */;
                    };
                    /**
                     * The message for this message set.
                     *
                     * @return The message for this message set.
                     */
                    SignonResponseMessageSet.prototype.getSignonResponse = function () {
                        return this.signonResponse;
                    };
                    /**
                     * The message for this message set.
                     *
                     * @param signonResponse The message for this message set.
                     */
                    SignonResponseMessageSet.prototype.setSignonResponse = function (signonResponse) {
                        this.signonResponse = signonResponse;
                    };
                    /**
                     * The password change response.
                     *
                     * @return The password change response.
                     */
                    SignonResponseMessageSet.prototype.getPasswordChangeResponse = function () {
                        return this.passwordChangeResponse;
                    };
                    /**
                     * The password change response.
                     *
                     * @param passwordChangeResponse The password change response.
                     */
                    SignonResponseMessageSet.prototype.setPasswordChangeResponse = function (passwordChangeResponse) {
                        this.passwordChangeResponse = passwordChangeResponse;
                    };
                    //todo: challenge request/response
                    // Inherited.
                    SignonResponseMessageSet.prototype.getResponseMessages = function () {
                        var messages = new Array();
                        if (this.getSignonResponse() != null) {
                            messages.push(this.getSignonResponse());
                        }
                        return messages;
                    };
                    return SignonResponseMessageSet;
                })(ResponseMessageSet);
                signon.SignonResponseMessageSet = SignonResponseMessageSet;
                Aggregate_add(SignonResponseMessageSet, "SIGNONMSGSRSV1");
                ChildAggregate_add(SignonResponseMessageSet, { order: 0, type: signon.SignonResponse, read: SignonResponseMessageSet.prototype.getSignonResponse, write: SignonResponseMessageSet.prototype.setSignonResponse });
                ChildAggregate_add(SignonResponseMessageSet, { order: 10, type: signon.PasswordChangeResponseTransaction, read: SignonResponseMessageSet.prototype.getPasswordChangeResponse, write: SignonResponseMessageSet.prototype.setPasswordChangeResponse });
            })(signon = data.signon || (data.signon = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../project.d.ts'/>
///<reference path='../../collections/SortedSet'/>
///<reference path='../../meta/Aggregate_add'/>
///<reference path='../../meta/ChildAggregate_add'/>
///<reference path='../../meta/Header_add'/>
///<reference path='signon/SignonResponseMessageSet'/>
///<reference path='signon/SignonResponse'/>
///<reference path='ApplicationSecurity'/>
///<reference path='ApplicationSecurity'/>
///<reference path='MessageSetType'/>
///<reference path='ResponseMessageSet'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var SortedSet = ofx4js.collections.SortedSet;
            var Aggregate_add = ofx4js.meta.Aggregate_add;
            var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
            var Header_add = ofx4js.meta.Header_add;
            //import java.util.SortedSet;
            /**
             * Envelope for enclosing an OFX response.
             *
             * @author Ryan Heaton
             * @see "Section 2.4.3, OFX Spec"
             */
            var ResponseEnvelope = (function () {
                function ResponseEnvelope() {
                }
                /**
                 * The security of this envelope.
                 *
                 * @return The security of this envelope.
                 * @see "Section 2.2, OFX spec"
                 */
                ResponseEnvelope.prototype.getSecurity = function () {
                    return this.security;
                };
                /**
                 * The security of this envelope.
                 *
                 * @param security The security of this envelope.
                 * @see "Section 2.2, OFX spec"
                 */
                ResponseEnvelope.prototype.setSecurity = function (security) {
                    this.security = security;
                };
                /**
                 * The UID for the envelope.
                 *
                 * @return The UID for the envelope.
                 * @see "Section 2.2, OFX spec"
                 */
                ResponseEnvelope.prototype.getUID = function () {
                    return this.UID;
                };
                /**
                 * The UID for the envelope.
                 *
                 * @param UID The UID for the envelope.
                 * @see "Section 2.2, OFX spec"
                 */
                ResponseEnvelope.prototype.setUID = function (UID) {
                    this.UID = UID;
                };
                /**
                 * The message sets that make up the content of this response.
                 *
                 * @return The message sets that make up the content of this response.
                 * @see "Section 2.4.5, OFX Spec"
                 */
                ResponseEnvelope.prototype.getMessageSets = function () {
                    return this.messageSets;
                };
                /**
                 * The message sets that make up the content of this response.
                 *
                 * @param messageSets The message sets that make up the content of this response.
                 * @see "Section 2.4.5, OFX Spec"
                 */
                ResponseEnvelope.prototype.setMessageSets = function (messageSets) {
                    this.messageSets = messageSets;
                };
                /**
                 * Helper method for looking up the signon response.
                 *
                 * @return The signon response, or null if none found.
                 */
                ResponseEnvelope.prototype.getSignonResponse = function () {
                    var type = 0 /* signon */;
                    var message = this.getMessageSet(type);
                    if (message != null) {
                        return message.getSignonResponse();
                    }
                    else {
                        return null;
                    }
                };
                /**
                 * Get the message set of the specified type.
                 *
                 * @param type The type.
                 * @return The message set, or null.
                 */
                ResponseEnvelope.prototype.getMessageSet = function (type) {
                    var message = null;
                    if (this.messageSets != null) {
                        for (var i in this.messageSets.values()) {
                            var messageSet = this.messageSets.values()[i];
                            if (messageSet.getType() == type) {
                                message = messageSet;
                                break;
                            }
                        }
                    }
                    return message;
                };
                return ResponseEnvelope;
            })();
            data.ResponseEnvelope = ResponseEnvelope;
            Aggregate_add(ResponseEnvelope, "OFX");
            Header_add(ResponseEnvelope, { name: "SECURITY", type: data.ApplicationSecurity, read: ResponseEnvelope.prototype.getSecurity, write: ResponseEnvelope.prototype.setSecurity });
            Header_add(ResponseEnvelope, { name: "NEWFILEUID", type: String, read: ResponseEnvelope.prototype.getUID, write: ResponseEnvelope.prototype.setUID });
            ChildAggregate_add(ResponseEnvelope, { order: 1, type: SortedSet, collectionEntryType: data.ResponseMessageSet, read: ResponseEnvelope.prototype.getMessageSets, write: ResponseEnvelope.prototype.setMessageSets });
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../domain/data/RequestEnvelope'/>
///<reference path='../../domain/data/ResponseEnvelope'/>
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../OFXException'/>
var ofx4js;
(function (ofx4js) {
    var client;
    (function (client) {
        var net;
        (function (net) {
            var OFXException = ofx4js.OFXException;
            /**
             * Error with a particular OFX connection.
             *
             * @author Ryan Heaton
             */
            var OFXConnectionException = (function (_super) {
                __extends(OFXConnectionException, _super);
                function OFXConnectionException(message, e) {
                    if (e === void 0) { e = null; }
                    _super.call(this, message, e);
                }
                return OFXConnectionException;
            })(OFXException);
            net.OFXConnectionException = OFXConnectionException;
        })(net = client.net || (client.net = {}));
    })(client = ofx4js.client || (ofx4js.client = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var statements;
                (function (statements) {
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * Aggreate to indicate whether position information is requested as part of the statement
                     * @see "Section 13.9.1.2, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var IncludePosition = (function () {
                        function IncludePosition() {
                            this.includePositions = true;
                        }
                        /**
                         * Gets the date that the position should be sent down for. This is an optional field according
                         * to the OFX spec.
                         *
                         * @return the date for the position
                         */
                        IncludePosition.prototype.getDateSentDown = function () {
                            return this.sentDownDate;
                        };
                        /**
                         * Sets the date that the position should be sent down for. This is an optional field according
                         * to the OFX spec.
                         *
                         * @param sentDownDate the date for the position
                         */
                        IncludePosition.prototype.setDateSentDown = function (sentDownDate) {
                            this.sentDownDate = sentDownDate;
                        };
                        /**
                         * Gets whether to include positions in the statement download.
                         *
                         * @return whether to include positions in the statement download
                         */
                        IncludePosition.prototype.getIncludePositions = function () {
                            return this.includePositions;
                        };
                        /**
                         * Sets whether to include positions in the statement download.
                         *
                         * @param includePositions whether to include positions in the statement download
                         */
                        IncludePosition.prototype.setIncludePositions = function (includePositions) {
                            this.includePositions = includePositions;
                        };
                        return IncludePosition;
                    })();
                    statements.IncludePosition = IncludePosition;
                    Aggregate_add(IncludePosition, "INCPOS");
                    Element_add(IncludePosition, { name: "DTASOF", order: 0, type: Date, read: IncludePosition.prototype.getDateSentDown, write: IncludePosition.prototype.setDateSentDown });
                    Element_add(IncludePosition, { name: "INCLUDE", order: 10, type: Boolean, read: IncludePosition.prototype.getIncludePositions, write: IncludePosition.prototype.setIncludePositions });
                })(statements = investment.statements || (investment.statements = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
///<reference path='../../common/StatementRequest'/>
///<reference path='../../investment/accounts/InvestmentAccountDetails'/>
///<reference path='IncludePosition'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var statements;
                (function (statements) {
                    var StatementRequest = ofx4js.domain.data.common.StatementRequest;
                    var InvestmentAccountDetails = ofx4js.domain.data.investment.accounts.InvestmentAccountDetails;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * Aggregate for the investment statement download request.
                     * @see "Section 13.9.1.1, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var InvestmentStatementRequest = (function (_super) {
                        __extends(InvestmentStatementRequest, _super);
                        function InvestmentStatementRequest() {
                            _super.call(this);
                            this.includeOpenOrders = false;
                            this.includeBalance = true;
                        }
                        /**
                         * The account details.
                         *
                         * @return The account details.
                         */
                        InvestmentStatementRequest.prototype.getAccount = function () {
                            return this.account;
                        };
                        /**
                         * The account details.
                         *
                         * @param account The account details.
                         */
                        InvestmentStatementRequest.prototype.setAccount = function (account) {
                            this.account = account;
                        };
                        /**
                         * Gets whether to include open orders. This is an optional field according to the OFX spec.
                         * <br>
                         * Note, open orders are not yet implemented.
                         *
                         * @return whether to include open orders
                         */
                        InvestmentStatementRequest.prototype.getIncludeOpenOrders = function () {
                            return this.includeOpenOrders;
                        };
                        /**
                         * Sets whether to include open orders. This is an optional field according to the OFX spec.
                         * <br>
                         * Note, open orders are not yet implemented.
                         *
                         * @param includeOpenOrders whether to include open orders
                         */
                        InvestmentStatementRequest.prototype.setIncludeOpenOrders = function (includeOpenOrders) {
                            this.includeOpenOrders = includeOpenOrders;
                        };
                        /**
                         * Gets the include position child aggregate. This is a required field according to the OFX spec.
                         *
                         * @return the include position child aggregate
                         */
                        InvestmentStatementRequest.prototype.getIncludePosition = function () {
                            return this.includePosition;
                        };
                        /**
                         * Gets the include position child aggregate. This is a required field according to the OFX spec.
                         *
                         * @param includePosition the include position child aggregate
                         */
                        InvestmentStatementRequest.prototype.setIncludePosition = function (includePosition) {
                            this.includePosition = includePosition;
                        };
                        /**
                         * Gets whether to include balance info in the response. This is a required field according to
                         * the OFX spec.
                         *
                         * @return whether to include balance info in the response
                         */
                        InvestmentStatementRequest.prototype.getIncludeBalance = function () {
                            return this.includeBalance;
                        };
                        /**
                         * Sets whether to include balance info in the response. This is a required field according to
                         * the OFX spec.
                         *
                         * @param includeBalance whether to include balance info in the response
                         */
                        InvestmentStatementRequest.prototype.setIncludeBalance = function (includeBalance) {
                            this.includeBalance = includeBalance;
                        };
                        return InvestmentStatementRequest;
                    })(StatementRequest);
                    statements.InvestmentStatementRequest = InvestmentStatementRequest;
                    Aggregate_add(InvestmentStatementRequest, "INVSTMTRQ");
                    ChildAggregate_add(InvestmentStatementRequest, { name: "INVACCTFROM", required: true, order: 0, type: InvestmentAccountDetails, read: InvestmentStatementRequest.prototype.getAccount, write: InvestmentStatementRequest.prototype.setAccount });
                    Element_add(InvestmentStatementRequest, { name: "INCOO", order: 20, type: Boolean, read: InvestmentStatementRequest.prototype.getIncludeOpenOrders, write: InvestmentStatementRequest.prototype.setIncludeOpenOrders });
                    ChildAggregate_add(InvestmentStatementRequest, { name: "INCPOS", required: true, order: 30, type: statements.IncludePosition, read: InvestmentStatementRequest.prototype.getIncludePosition, write: InvestmentStatementRequest.prototype.setIncludePosition });
                    Element_add(InvestmentStatementRequest, { name: "INCBAL", required: true, order: 40, type: Boolean, read: InvestmentStatementRequest.prototype.getIncludeBalance, write: InvestmentStatementRequest.prototype.setIncludeBalance });
                })(statements = investment.statements || (investment.statements = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../TransactionWrappedRequestMessage'/>
///<reference path='InvestmentStatementRequest'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var statements;
                (function (statements) {
                    var TransactionWrappedRequestMessage = ofx4js.domain.data.TransactionWrappedRequestMessage;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    /**
                     * Investment statement transaction request.
                     * @see "Section 13.9.1.1, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var InvestmentStatementRequestTransaction = (function (_super) {
                        __extends(InvestmentStatementRequestTransaction, _super);
                        function InvestmentStatementRequestTransaction() {
                            _super.apply(this, arguments);
                        }
                        /**
                         * Gets the the statement request message.
                         *
                         * @return the statement request message.
                         */
                        InvestmentStatementRequestTransaction.prototype.getMessage = function () {
                            return this.message;
                        };
                        /**
                         * Sets the the statement request message.
                         *
                         * @param message the statement request message.
                         */
                        InvestmentStatementRequestTransaction.prototype.setMessage = function (message) {
                            this.message = message;
                        };
                        // Inherited.
                        InvestmentStatementRequestTransaction.prototype.setWrappedMessage = function (message) {
                            this.setMessage(message);
                        };
                        return InvestmentStatementRequestTransaction;
                    })(TransactionWrappedRequestMessage);
                    statements.InvestmentStatementRequestTransaction = InvestmentStatementRequestTransaction;
                    Aggregate_add(InvestmentStatementRequestTransaction, "INVSTMTTRNRQ");
                    ChildAggregate_add(InvestmentStatementRequestTransaction, { required: true, order: 30, type: statements.InvestmentStatementRequest, read: InvestmentStatementRequestTransaction.prototype.getMessage, write: InvestmentStatementRequestTransaction.prototype.setMessage });
                })(statements = investment.statements || (investment.statements = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../MessageSetType'/>
///<reference path='../../RequestMessage'/>
///<reference path='../../RequestMessageSet'/>
///<reference path='InvestmentStatementRequestTransaction'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var statements;
                (function (statements) {
                    var MessageSetType = ofx4js.domain.data.MessageSetType;
                    var RequestMessageSet = ofx4js.domain.data.RequestMessageSet;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    /**
                     * Investment statement request message set.
                     * @see "Section 13.7.1.2.1, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var InvestmentStatementRequestMessageSet = (function (_super) {
                        __extends(InvestmentStatementRequestMessageSet, _super);
                        function InvestmentStatementRequestMessageSet() {
                            _super.apply(this, arguments);
                        }
                        InvestmentStatementRequestMessageSet.prototype.getType = function () {
                            return 4 /* investment */;
                        };
                        /**
                         * Gets the statement request.
                         *
                         * @return the request
                         */
                        InvestmentStatementRequestMessageSet.prototype.getStatementRequest = function () {
                            return this.statementRequest;
                        };
                        /**
                         * Sets the statement request.
                         *
                         * @param statementRequest the request
                         */
                        InvestmentStatementRequestMessageSet.prototype.setStatementRequest = function (statementRequest) {
                            this.statementRequest = statementRequest;
                        };
                        // Inherited.
                        InvestmentStatementRequestMessageSet.prototype.getRequestMessages = function () {
                            var requestMessages = new Array();
                            if (this.getStatementRequest() != null) {
                                requestMessages.push(this.getStatementRequest());
                            }
                            return requestMessages;
                        };
                        return InvestmentStatementRequestMessageSet;
                    })(RequestMessageSet);
                    statements.InvestmentStatementRequestMessageSet = InvestmentStatementRequestMessageSet;
                    Aggregate_add(InvestmentStatementRequestMessageSet, "INVSTMTMSGSRQV1");
                    ChildAggregate_add(InvestmentStatementRequestMessageSet, { order: 0, type: statements.InvestmentStatementRequestTransaction, read: InvestmentStatementRequestMessageSet.prototype.getStatementRequest, write: InvestmentStatementRequestMessageSet.prototype.setStatementRequest });
                })(statements = investment.statements || (investment.statements = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../TransactionWrappedResponseMessage'/>
///<reference path='InvestmentStatementResponse'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var statements;
                (function (statements) {
                    var TransactionWrappedResponseMessage = ofx4js.domain.data.TransactionWrappedResponseMessage;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    /**
                     * Investment statement transaction response.
                     * @see "Section 13.9.2.1, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var InvestmentStatementResponseTransaction = (function (_super) {
                        __extends(InvestmentStatementResponseTransaction, _super);
                        function InvestmentStatementResponseTransaction() {
                            _super.apply(this, arguments);
                        }
                        /**
                         * Gets the the statement response message.
                         *
                         * @return the statement response message.
                         */
                        InvestmentStatementResponseTransaction.prototype.getMessage = function () {
                            return this.message;
                        };
                        /**
                         * Sets the the statement response message.
                         *
                         * @param message the statement response message.
                         */
                        InvestmentStatementResponseTransaction.prototype.setMessage = function (message) {
                            this.message = message;
                        };
                        // Inherited.
                        InvestmentStatementResponseTransaction.prototype.getWrappedMessage = function () {
                            return this.getMessage();
                        };
                        return InvestmentStatementResponseTransaction;
                    })(TransactionWrappedResponseMessage);
                    statements.InvestmentStatementResponseTransaction = InvestmentStatementResponseTransaction;
                    Aggregate_add(InvestmentStatementResponseTransaction, "INVSTMTTRNRS");
                    ChildAggregate_add(InvestmentStatementResponseTransaction, { required: true, order: 30, type: statements.InvestmentStatementResponse, read: InvestmentStatementResponseTransaction.prototype.getMessage, write: InvestmentStatementResponseTransaction.prototype.setMessage });
                })(statements = investment.statements || (investment.statements = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../MessageSetType'/>
///<reference path='../../ResponseMessage'/>
///<reference path='../../ResponseMessageSet'/>
///<reference path='InvestmentStatementResponseTransaction'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var statements;
                (function (statements) {
                    var MessageSetType = ofx4js.domain.data.MessageSetType;
                    var ResponseMessageSet = ofx4js.domain.data.ResponseMessageSet;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    /**
                     * Investment statement response message set.
                     * @see "Section 13.7.1.2.2, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var InvestmentStatementResponseMessageSet = (function (_super) {
                        __extends(InvestmentStatementResponseMessageSet, _super);
                        function InvestmentStatementResponseMessageSet() {
                            _super.apply(this, arguments);
                        }
                        InvestmentStatementResponseMessageSet.prototype.getType = function () {
                            return 4 /* investment */;
                        };
                        /**
                         * Gets the statement response list. Most OFX files have a single statement response.
                         *
                         * @return the statement response list
                         */
                        InvestmentStatementResponseMessageSet.prototype.getStatementResponses = function () {
                            return this.statementResponses;
                        };
                        /**
                         * Sets the statement reponse list. Most OFX files have a single statement response.
                         *
                         * @param statementResponses the statement response list
                         */
                        InvestmentStatementResponseMessageSet.prototype.setStatementResponses = function (statementResponses) {
                            this.statementResponses = statementResponses;
                        };
                        /**
                         * Gets the first statement response. Use getStatementResponses() if you are expecting multiple
                         * responses.
                         *
                         * @return the first investment statement response.
                         */
                        InvestmentStatementResponseMessageSet.prototype.getStatementResponse = function () {
                            return this.statementResponses == null || this.statementResponses.length == 0 ? null : this.statementResponses[0];
                        };
                        /**
                         * Sets the statement response if there is a single response.
                         *
                         * @param statementResponse The statement response.
                         */
                        InvestmentStatementResponseMessageSet.prototype.setStatementResponse = function (statementResponse) {
                            this.statementResponses = [statementResponse];
                        };
                        // Inherited.
                        InvestmentStatementResponseMessageSet.prototype.getResponseMessages = function () {
                            return this.statementResponses;
                        };
                        return InvestmentStatementResponseMessageSet;
                    })(ResponseMessageSet);
                    statements.InvestmentStatementResponseMessageSet = InvestmentStatementResponseMessageSet;
                    Aggregate_add(InvestmentStatementResponseMessageSet, "INVSTMTMSGSRSV1");
                    ChildAggregate_add(InvestmentStatementResponseMessageSet, { order: 0, type: Array, collectionEntryType: statements.InvestmentStatementResponseTransaction, read: InvestmentStatementResponseMessageSet.prototype.getStatementResponses, write: InvestmentStatementResponseMessageSet.prototype.setStatementResponses });
                })(statements = investment.statements || (investment.statements = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../RequestMessage'/>
///<reference path='SecurityRequest'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var seclist;
            (function (seclist) {
                var RequestMessage = ofx4js.domain.data.RequestMessage;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                /**
                 * Request aggregate for the security list.
                 * @see "Section 13.8.2.2, OFX Spec"
                 *
                 * @author Jon Perlow
                 */
                var SecurityListRequest = (function (_super) {
                    __extends(SecurityListRequest, _super);
                    function SecurityListRequest() {
                        _super.apply(this, arguments);
                    }
                    SecurityListRequest.prototype.getSecurityRequests = function () {
                        return this.securityRequests;
                    };
                    SecurityListRequest.prototype.setSecurityRequests = function (securityRequests) {
                        this.securityRequests = securityRequests;
                    };
                    return SecurityListRequest;
                })(RequestMessage);
                seclist.SecurityListRequest = SecurityListRequest;
                Aggregate_add(SecurityListRequest, "SECLISTRQ");
                ChildAggregate_add(SecurityListRequest, { required: true, order: 10, type: Array, collectionEntryType: seclist.SecurityRequest, read: SecurityListRequest.prototype.getSecurityRequests, write: SecurityListRequest.prototype.setSecurityRequests });
            })(seclist = data.seclist || (data.seclist = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../TransactionWrappedRequestMessage'/>
///<reference path='SecurityListRequest'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var seclist;
            (function (seclist) {
                var TransactionWrappedRequestMessage = ofx4js.domain.data.TransactionWrappedRequestMessage;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                /**
                 * Security list transaction request.
                 * @see "Section 13.8.2.1, OFX Spec"
                 *
                 * @author Jon Perlow
                 */
                var SecurityListRequestTransaction = (function (_super) {
                    __extends(SecurityListRequestTransaction, _super);
                    function SecurityListRequestTransaction() {
                        _super.apply(this, arguments);
                    }
                    /**
                     * The message.
                     *
                     * @return The message.
                     */
                    SecurityListRequestTransaction.prototype.getMessage = function () {
                        return this.message;
                    };
                    /**
                     * The message.
                     *
                     * @param message The message.
                     *
                     */
                    SecurityListRequestTransaction.prototype.setMessage = function (message) {
                        this.message = message;
                    };
                    // Inherited.
                    SecurityListRequestTransaction.prototype.setWrappedMessage = function (message) {
                        this.setMessage(message);
                    };
                    return SecurityListRequestTransaction;
                })(TransactionWrappedRequestMessage);
                seclist.SecurityListRequestTransaction = SecurityListRequestTransaction;
                Aggregate_add(SecurityListRequestTransaction, "SECLISTTRNRQ");
                ChildAggregate_add(SecurityListRequestTransaction, { required: true, order: 30, type: seclist.SecurityListRequest, read: SecurityListRequestTransaction.prototype.getMessage, write: SecurityListRequestTransaction.prototype.setMessage });
            })(seclist = data.seclist || (data.seclist = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../MessageSetType'/>
///<reference path='../RequestMessage'/>
///<reference path='../RequestMessageSet'/>
///<reference path='../investment/statements/InvestmentStatementRequestTransaction'/>
///<reference path='SecurityListRequestTransaction'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var seclist;
            (function (seclist) {
                var MessageSetType = ofx4js.domain.data.MessageSetType;
                var RequestMessageSet = ofx4js.domain.data.RequestMessageSet;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                /**
                 * Security list request message set.
                 * @see "Section 13.7.2.2.1, OFX Spec"
                 *
                 * @author Jon Perlow
                 */
                var SecurityListRequestMessageSet = (function (_super) {
                    __extends(SecurityListRequestMessageSet, _super);
                    function SecurityListRequestMessageSet() {
                        _super.apply(this, arguments);
                    }
                    SecurityListRequestMessageSet.prototype.getType = function () {
                        return 4 /* investment */;
                    };
                    /**
                     * Gets the security list request.
                     *
                     * @return the request
                     */
                    SecurityListRequestMessageSet.prototype.getSecurityListRequest = function () {
                        return this.securityListRequest;
                    };
                    /**
                     * Sets the security list request.
                     *
                     * @param statementRequest the request
                     */
                    SecurityListRequestMessageSet.prototype.setSecurityListRequest = function (statementRequest) {
                        this.securityListRequest = statementRequest;
                    };
                    // Inherited.
                    SecurityListRequestMessageSet.prototype.getRequestMessages = function () {
                        var requestMessages = new Array();
                        if (this.getSecurityListRequest() != null) {
                            requestMessages.push(this.getSecurityListRequest());
                        }
                        return requestMessages;
                    };
                    return SecurityListRequestMessageSet;
                })(RequestMessageSet);
                seclist.SecurityListRequestMessageSet = SecurityListRequestMessageSet;
                Aggregate_add(SecurityListRequestMessageSet, "SECLISTMSGSRQV1");
                ChildAggregate_add(SecurityListRequestMessageSet, { order: 0, type: seclist.SecurityListRequestTransaction, read: SecurityListRequestMessageSet.prototype.getSecurityListRequest, write: SecurityListRequestMessageSet.prototype.setSecurityListRequest });
            })(seclist = data.seclist || (data.seclist = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../TransactionWrappedResponseMessage'/>
///<reference path='SecurityListResponse'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var seclist;
            (function (seclist) {
                var TransactionWrappedResponseMessage = ofx4js.domain.data.TransactionWrappedResponseMessage;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                /**
                 * Security list transaction response.
                 * @see "Section 13.8.3.1, OFX Spec"
                 *
                 * @author Jon Perlow
                 */
                var SecurityListResponseTransaction = (function (_super) {
                    __extends(SecurityListResponseTransaction, _super);
                    function SecurityListResponseTransaction() {
                        _super.apply(this, arguments);
                    }
                    /**
                     * The message.
                     *
                     * @return The message.
                     */
                    SecurityListResponseTransaction.prototype.getMessage = function () {
                        return this.message;
                    };
                    /**
                     * The message.
                     *
                     * @param message The message.
                     */
                    SecurityListResponseTransaction.prototype.setMessage = function (message) {
                        this.message = message;
                    };
                    // Inherited.
                    SecurityListResponseTransaction.prototype.getWrappedMessage = function () {
                        return this.getMessage();
                    };
                    return SecurityListResponseTransaction;
                })(TransactionWrappedResponseMessage);
                seclist.SecurityListResponseTransaction = SecurityListResponseTransaction;
                Aggregate_add(SecurityListResponseTransaction, "SECLISTTRNRS");
                ChildAggregate_add(SecurityListResponseTransaction, { required: true, order: 30, type: seclist.SecurityListResponse, read: SecurityListResponseTransaction.prototype.getMessage, write: SecurityListResponseTransaction.prototype.setMessage });
            })(seclist = data.seclist || (data.seclist = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../MessageSetType'/>
///<reference path='../ResponseMessage'/>
///<reference path='../ResponseMessageSet'/>
///<reference path='SecurityList'/>
///<reference path='SecurityListResponseTransaction'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var seclist;
            (function (seclist) {
                var MessageSetType = ofx4js.domain.data.MessageSetType;
                var ResponseMessageSet = ofx4js.domain.data.ResponseMessageSet;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                /**
                 * @author Jon Perlow
                 */
                var SecurityListResponseMessageSet = (function (_super) {
                    __extends(SecurityListResponseMessageSet, _super);
                    function SecurityListResponseMessageSet() {
                        _super.apply(this, arguments);
                    }
                    SecurityListResponseMessageSet.prototype.getType = function () {
                        return 9 /* investment_security */;
                    };
                    /**
                     * The security list response list transaction.
                     *
                     * Most OFX files have a single security response.
                     *
                     * @return The security list response list.
                     */
                    SecurityListResponseMessageSet.prototype.getSecurityListResponse = function () {
                        return this.securityListResponse;
                    };
                    /**
                     * The security list response.
                     *
                     * @param securityListResponse The security list response.
                     */
                    SecurityListResponseMessageSet.prototype.setSecurityListResponse = function (securityListResponse) {
                        this.securityListResponse = securityListResponse;
                    };
                    SecurityListResponseMessageSet.prototype.getSecurityList = function () {
                        return this.securityList;
                    };
                    SecurityListResponseMessageSet.prototype.setSecurityList = function (securityList) {
                        this.securityList = securityList;
                    };
                    // Inherited.
                    SecurityListResponseMessageSet.prototype.getResponseMessages = function () {
                        var ret = new Array();
                        ret.push(this.securityListResponse);
                        return ret;
                    };
                    return SecurityListResponseMessageSet;
                })(ResponseMessageSet);
                seclist.SecurityListResponseMessageSet = SecurityListResponseMessageSet;
                Aggregate_add(SecurityListResponseMessageSet, "SECLISTMSGSRSV1");
                ChildAggregate_add(SecurityListResponseMessageSet, { order: 0, type: seclist.SecurityListResponseTransaction, read: SecurityListResponseMessageSet.prototype.getSecurityListResponse, write: SecurityListResponseMessageSet.prototype.setSecurityListResponse });
                ChildAggregate_add(SecurityListResponseMessageSet, { order: 10, type: seclist.SecurityList, read: SecurityListResponseMessageSet.prototype.getSecurityList, write: SecurityListResponseMessageSet.prototype.setSecurityList });
            })(seclist = data.seclist || (data.seclist = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../OFXException'/>
///<reference path='../../client/InvestmentAccount'/>
///<reference path='../../domain/data/RequestEnvelope'/>
///<reference path='../../domain/data/ResponseEnvelope'/>
///<reference path='../../domain/data/common/StatementRange'/>
///<reference path='../../domain/data/common/StatementRequest'/>
///<reference path='../../domain/data/investment/statements/InvestmentStatementRequest'/>
///<reference path='../../domain/data/investment/statements/InvestmentStatementRequestMessageSet'/>
///<reference path='../../domain/data/investment/statements/InvestmentStatementResponse'/>
///<reference path='../../domain/data/investment/statements/InvestmentStatementRequestTransaction'/>
///<reference path='../../domain/data/investment/statements/InvestmentStatementResponseMessageSet'/>
///<reference path='../../domain/data/investment/statements/IncludePosition'/>
///<reference path='../../domain/data/seclist/SecurityListRequestTransaction'/>
///<reference path='../../domain/data/seclist/SecurityRequest'/>
///<reference path='../../domain/data/seclist/SecurityListRequestMessageSet'/>
///<reference path='../../domain/data/seclist/SecurityListResponseMessageSet'/>
var ofx4js;
(function (ofx4js) {
    var client;
    (function (client) {
        var impl;
        (function (impl) {
            var OFXException = ofx4js.OFXException;
            var StatementRange = ofx4js.domain.data.common.StatementRange;
            // import .* = ofx4js.domain.data.seclist.*;
            // import .* = ofx4js.domain.data.investment.statements.*;
            var IncludePosition = ofx4js.domain.data.investment.statements.IncludePosition;
            var InvestmentStatementRequest = ofx4js.domain.data.investment.statements.InvestmentStatementRequest;
            var InvestmentStatementRequestMessageSet = ofx4js.domain.data.investment.statements.InvestmentStatementRequestMessageSet;
            var InvestmentStatementRequestTransaction = ofx4js.domain.data.investment.statements.InvestmentStatementRequestTransaction;
            var MessageSetType = ofx4js.domain.data.MessageSetType;
            var SecurityListRequestTransaction = ofx4js.domain.data.seclist.SecurityListRequestTransaction;
            var SecurityListRequest = ofx4js.domain.data.seclist.SecurityListRequest;
            var SecurityListRequestMessageSet = ofx4js.domain.data.seclist.SecurityListRequestMessageSet;
            /**
             * @author Jon Perlow
             */
            var InvestmentAccountImpl = (function () {
                function InvestmentAccountImpl(details, username, password, institution) {
                    this.details = details;
                    this.username = username;
                    this.password = password;
                    this.institution = institution;
                }
                InvestmentAccountImpl.prototype.readStatement = function (start, end) {
                    var range = new StatementRange();
                    range.setIncludeTransactions(true);
                    range.setStart(start);
                    range.setEnd(end);
                    var request = this.institution.createAuthenticatedRequest(this.username, this.password);
                    var requestTransaction = new InvestmentStatementRequestTransaction();
                    requestTransaction.setWrappedMessage(this.createStatementRequest(this.getDetails(), range));
                    request.getMessageSets().insert(this.createStatementRequestMessageSet(requestTransaction));
                    var self = this;
                    return self.institution.sendRequest(request).then(function (response) {
                        self.institution.doGeneralValidationChecks(request, response);
                        return self.unwrapStatementResponse(response);
                    });
                };
                InvestmentAccountImpl.prototype.readSecurityList = function (securities) {
                    var request = this.institution.createAuthenticatedRequest(this.username, this.password);
                    var requestTransaction = new SecurityListRequestTransaction();
                    requestTransaction.setWrappedMessage(this.createSecurityListRequest(securities));
                    request.getMessageSets().insert(this.createSecurityListRequestMessageSet(requestTransaction));
                    var self = this;
                    return self.institution.sendRequest(request).then(function (response) {
                        self.institution.doGeneralValidationChecks(request, response);
                        return self.unwrapSecurityList(response);
                    });
                };
                /**
                 * The details of this account.
                 *
                 * @return The details of this account.
                 */
                InvestmentAccountImpl.prototype.getDetails = function () {
                    return this.details;
                };
                InvestmentAccountImpl.prototype.unwrapStatementResponse = function (response) {
                    var investmentStatementSet = response.getMessageSet(4 /* investment */);
                    if (investmentStatementSet == null) {
                        throw new OFXException("No investment response message set.");
                    }
                    var statementTransactionResponse = investmentStatementSet.getStatementResponse();
                    if (statementTransactionResponse == null) {
                        throw new OFXException("No investment statement response transaction.");
                    }
                    var statement = statementTransactionResponse.getMessage();
                    if (statement == null) {
                        throw new OFXException("No investment statement in the transaction.");
                    }
                    // See if there's a security list -- often sent back with an account statement by servers.
                    var securityListMessageSet = response.getMessageSet(9 /* investment_security */);
                    if (securityListMessageSet != null) {
                        statement.setSecurityList(securityListMessageSet.getSecurityList());
                    }
                    return statement;
                };
                InvestmentAccountImpl.prototype.createStatementRequestMessageSet = function (transaction) {
                    var investmentStatementRequest = new InvestmentStatementRequestMessageSet();
                    investmentStatementRequest.setStatementRequest(transaction);
                    return investmentStatementRequest;
                };
                InvestmentAccountImpl.prototype.createStatementRequest = function (details, range) {
                    var investRequest = new InvestmentStatementRequest();
                    investRequest.setAccount(details);
                    investRequest.setStatementRange(range);
                    investRequest.setIncludePosition(new IncludePosition());
                    return investRequest;
                };
                InvestmentAccountImpl.prototype.createSecurityListRequestMessageSet = function (transaction) {
                    var securityListRequest = new SecurityListRequestMessageSet();
                    securityListRequest.setSecurityListRequest(transaction);
                    return securityListRequest;
                };
                InvestmentAccountImpl.prototype.createSecurityListRequest = function (securities) {
                    var securityListRequest = new SecurityListRequest();
                    securityListRequest.setSecurityRequests(securities);
                    return securityListRequest;
                };
                InvestmentAccountImpl.prototype.unwrapSecurityList = function (response) {
                    var securityListSet = response.getMessageSet(9 /* investment_security */);
                    if (securityListSet == null) {
                        throw new OFXException("No security list response message set.");
                    }
                    var securityList = securityListSet.getSecurityList();
                    if (securityList == null) {
                        throw new OFXException("No security list response transaction.");
                    }
                    return securityList;
                };
                return InvestmentAccountImpl;
            })();
            impl.InvestmentAccountImpl = InvestmentAccountImpl;
        })(impl = client.impl || (client.impl = {}));
    })(client = ofx4js.client || (ofx4js.client = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../collections/SortedSet'/>
///<reference path='../../OFXException'/>
///<reference path='../../OFXStatusException'/>
///<reference path='../../client/NoOFXResponseException'/>
///<reference path='../../UnsupportedOFXSecurityTypeException'/>
///<reference path='../../OFXTransactionException'/>
///<reference path='../context/OFXApplicationContextHolder'/>
///<reference path='../../domain/data/signon/SignonRequest'/>
///<reference path='../../domain/data/signon/SignonRequestMessageSet'/>
///<reference path='../../domain/data/signup/SignupRequestMessageSet'/>
///<reference path='../../domain/data/signup/SignupResponseMessageSet'/>
///<reference path='../../domain/data/common/StatusHolder'/>
///<reference path='../../domain/data/profile/ProfileRequestMessageSet'/>
///<reference path='../../domain/data/profile/ProfileRequestTransaction'/>
///<reference path='../../domain/data/profile/ProfileResponse'/>
///<reference path='../../domain/data/profile/ProfileResponseMessageSet'/>
///<reference path='../../domain/data/profile/ProfileResponseTransaction'/>
///<reference path='../../domain/data/signup/AccountProfile'/>
///<reference path='../../domain/data/signup/AccountInfoRequest'/>
///<reference path='../../domain/data/signup/AccountInfoResponse'/>
///<reference path='../../domain/data/ApplicationSecurity'/>
///<reference path='../../domain/data/RequestEnvelope'/>
///<reference path='../../domain/data/RequestMessageSet'/>
///<reference path='../../domain/data/ResponseMessageSet'/>
///<reference path='../net/OFXConnection'/>
///<reference path='../net/OFXConnectionException'/>
///<reference path='../BankAccount'/>
///<reference path='../FinancialInstitution'/>
///<reference path='BankingAccountImpl'/>
///<reference path='InvestmentAccountImpl'/>
var ofx4js;
(function (ofx4js) {
    var client;
    (function (client) {
        var impl;
        (function (impl) {
            var SortedSet = ofx4js.collections.SortedSet;
            var OFXException = ofx4js.OFXException;
            var OFXStatusException = ofx4js.OFXStatusException;
            var UnsupportedOFXSecurityTypeException = ofx4js.UnsupportedOFXSecurityTypeException;
            var OFXTransactionException = ofx4js.OFXTransactionException;
            var NoOFXResponseException = ofx4js.client.NoOFXResponseException;
            //import client.* = ofx4js.client.*;
            var OFXApplicationContextHolder = ofx4js.client.context.OFXApplicationContextHolder;
            //import data.* = ofx4js.domain.data.*;
            var MessageSetType = ofx4js.domain.data.MessageSetType;
            var RequestMessageSet = ofx4js.domain.data.RequestMessageSet;
            var TransactionWrappedRequestMessage = ofx4js.domain.data.TransactionWrappedRequestMessage;
            var TransactionWrappedResponseMessage = ofx4js.domain.data.TransactionWrappedResponseMessage;
            var AccountInfoRequest = ofx4js.domain.data.signup.AccountInfoRequest;
            var AccountInfoRequestTransaction = ofx4js.domain.data.signup.AccountInfoRequestTransaction;
            var ApplicationSecurity = ofx4js.domain.data.ApplicationSecurity;
            var RequestEnvelope = ofx4js.domain.data.RequestEnvelope;
            var ProfileRequest = ofx4js.domain.data.profile.ProfileRequest;
            var ProfileRequestMessageSet = ofx4js.domain.data.profile.ProfileRequestMessageSet;
            var ProfileRequestTransaction = ofx4js.domain.data.profile.ProfileRequestTransaction;
            var KnownCode = ofx4js.domain.data.common.KnownCode;
            var instanceof_StatusHolder = ofx4js.domain.data.common.instanceof_StatusHolder;
            var SignonRequest = ofx4js.domain.data.signon.SignonRequest;
            //import profile.* = ofx4js.domain.data.signon.SignonRequest;
            var SignonRequestMessageSet = ofx4js.domain.data.signon.SignonRequestMessageSet;
            var SignupRequestMessageSet = ofx4js.domain.data.signup.SignupRequestMessageSet;
            //import java.net.URL;
            /**
             * Base implementation for the financial institution.
             *
             * @author Ryan Heaton
             */
            var FinancialInstitutionImpl = (function () {
                function FinancialInstitutionImpl(data, connection) {
                    if (data == null) {
                        throw new ofx4js.Error("Data cannot be null");
                    }
                    if (connection == null) {
                        throw new ofx4js.Error("An OFX connection must be supplied");
                    }
                    this.data = data;
                    this.connection = connection;
                }
                // Inherited.
                FinancialInstitutionImpl.prototype.readProfile = function () {
                    var request = this.createAuthenticatedRequest(SignonRequest.ANONYMOUS_USER, SignonRequest.ANONYMOUS_USER);
                    var profileRequest = new ProfileRequestMessageSet();
                    profileRequest.setProfileRequest(this.createProfileTransaction());
                    request.getMessageSets().insert(profileRequest);
                    var self = this;
                    return self.sendRequest(request, this.getData().getOFXURL()).then(function (response) {
                        self.doGeneralValidationChecks(request, response);
                        return self.getProfile(response);
                    });
                };
                // Inherited.
                FinancialInstitutionImpl.prototype.readAccountProfiles = function (username, password) {
                    var request = this.createAuthenticatedRequest(username, password);
                    var signupRequest = new SignupRequestMessageSet();
                    signupRequest.setAccountInfoRequest(this.createAccountInfoTransaction());
                    request.getMessageSets().insert(signupRequest);
                    var self = this;
                    return this.sendRequest(request, this.getData().getOFXURL()).then(function (response) {
                        self.doGeneralValidationChecks(request, response);
                        return self.getAccountProfiles(response);
                    });
                };
                // Inherited.
                FinancialInstitutionImpl.prototype.loadBankAccount = function (details, username, password) {
                    return new impl.BankingAccountImpl(details, username, password, this);
                };
                // Inherited.
                FinancialInstitutionImpl.prototype.loadCreditCardAccount = function (details, username, password) {
                    return new impl.CreditCardAccountImpl(details, username, password, this);
                };
                // Inherited
                FinancialInstitutionImpl.prototype.loadInvestmentAccount = function (details, username, password) {
                    return new impl.InvestmentAccountImpl(details, username, password, this);
                };
                /**
                 * Create an authenticated request envelope.
                 *
                 * @param username The username.
                 * @param password The password.
                 * @return The request envelope.
                 */
                FinancialInstitutionImpl.prototype.createAuthenticatedRequest = function (username, password) {
                    var request = new RequestEnvelope();
                    var messageSets = new SortedSet(RequestMessageSet.contentCompare);
                    var signonRequest = new SignonRequestMessageSet();
                    signonRequest.setSignonRequest(this.createSignonRequest(username, password));
                    messageSets.insert(signonRequest);
                    request.setMessageSets(messageSets);
                    return request;
                };
                //  /**
                //   * Send a request.
                //   *
                //   * @param request The request.
                //   * @return The request.
                //   */
                //  protected sendRequest(request: RequestEnvelope) /*throws OFXConnectionException*/: ResponseEnvelope {
                //    return this.getConnection().sendRequest(request, getData().getOFXURL());
                //  }
                /**
                 * Send a request to a specific URL.
                 *
                 * @param request The request.
                 * @param url The url.
                 * @return The request.
                 */
                FinancialInstitutionImpl.prototype.sendRequest = function (request, url) {
                    if (url === void 0) { url = this.getData().getOFXURL(); }
                    return this.getConnection().sendRequest(request, url);
                };
                /**
                 * Open the specified response envelope and look for the profile.
                 *
                 * @param response The response envelope.
                 * @return The profile.
                 */
                FinancialInstitutionImpl.prototype.getProfile = function (response) {
                    var profileSet = response.getMessageSet(10 /* profile */);
                    if (profileSet == null) {
                        throw new OFXException("No profile response set.");
                    }
                    var transactionResponse = profileSet.getProfileResponse();
                    if (transactionResponse == null) {
                        throw new OFXException("No profile transaction wrapper.");
                    }
                    var message = transactionResponse.getMessage();
                    if (message == null) {
                        throw new OFXException("No profile message.");
                    }
                    return message;
                };
                /**
                 * General validation checks on the specified response.
                 *
                 * @param request The request.
                 * @param response Their response.
                 * @throws OFXException Upon invalid response.
                 */
                FinancialInstitutionImpl.prototype.doGeneralValidationChecks = function (request, response) {
                    if (response.getSecurity() != 0 /* NONE */) {
                        throw new UnsupportedOFXSecurityTypeException("Unable to participate in " + response.getSecurity() + " security.");
                    }
                    if (request.getUID() !== response.getUID()) {
                        throw new OFXException("Invalid transaction ID '" + response.getUID() + "' in response.  Expected: " + request);
                    }
                    for (var requestSet_ in request.getMessageSets()) {
                        var requestSet = requestSet_;
                        var responseSet = response.getMessageSet(requestSet.getType());
                        if (responseSet == null) {
                            throw new NoOFXResponseException("No response for the " + requestSet.getType() + " request.");
                        }
                        if (responseSet.getType() == 0 /* signon */) {
                            var signonResponse = responseSet.getSignonResponse();
                            if (signonResponse == null) {
                                throw new NoOFXResponseException("No signon response.");
                            }
                        }
                        var transactionIds = {};
                        for (var requestMessage_ in requestSet.getRequestMessages()) {
                            var requestMessage = requestMessage_;
                            if (requestMessage instanceof TransactionWrappedRequestMessage) {
                                transactionIds[requestMessage.getUID()] = true;
                            }
                        }
                        for (var responseMessage_ in responseSet.getResponseMessages()) {
                            var responseMessage = responseMessage_;
                            if (instanceof_StatusHolder(responseMessage)) {
                                this.validateStatus(responseMessage);
                            }
                            if (responseMessage instanceof TransactionWrappedResponseMessage) {
                                var uid = responseMessage.getUID();
                                if (uid == null) {
                                    throw new OFXTransactionException("Invalid response transaction: no UID.");
                                }
                                else if (!(uid in transactionIds)) {
                                    throw new OFXTransactionException("Response to an unknown transaction: " + uid + ".");
                                }
                                else {
                                    delete transactionIds[uid];
                                }
                            }
                        }
                        if (transactionIds != {}) {
                            throw new OFXTransactionException("No response to the following transactions: " + transactionIds);
                        }
                    }
                };
                /**
                 * Validate the status of the given status holder.
                 *
                 * @param statusHolder The status holder.
                 */
                FinancialInstitutionImpl.prototype.validateStatus = function (statusHolder) {
                    var status = statusHolder.getStatus();
                    if (status == null) {
                        throw new OFXException("Invalid OFX response: no status returned in the " + statusHolder.getStatusHolderName() + " response.");
                    }
                    if (KnownCode.SUCCESS != status.getCode()) {
                        var message = status.getMessage();
                        if (message == null) {
                            message = "No response status code.";
                            if (status.getCode() != null) {
                                message = status.getCode().getMessage();
                            }
                        }
                        throw new OFXStatusException(status, "Invalid " + statusHolder.getStatusHolderName() + ": " + message);
                    }
                };
                /**
                 * Create a transaction message for a profile request.
                 *
                 * @return The transaction message.
                 */
                FinancialInstitutionImpl.prototype.createProfileTransaction = function () {
                    var profileTx = new ProfileRequestTransaction();
                    profileTx.setMessage(this.createProfileRequest());
                    return profileTx;
                };
                /**
                 * Create a profile request.
                 *
                 * @return The profile request.
                 */
                FinancialInstitutionImpl.prototype.createProfileRequest = function () {
                    var profileRequest = new ProfileRequest();
                    profileRequest.setProfileLastUpdated(new Date(0));
                    return profileRequest;
                };
                /**
                 * Create a sign-on request for the specified user.
                 *
                 * @param username The username.
                 * @param password The password.
                 * @return The signon request.
                 */
                FinancialInstitutionImpl.prototype.createSignonRequest = function (username, password) {
                    var signonRequest = new SignonRequest();
                    signonRequest.setTimestamp(new Date());
                    var fi = new ofx4js.domain.data.signon.FinancialInstitution();
                    fi.setId(this.getData().getFinancialInstitutionId());
                    fi.setOrganization(this.getData().getOrganization());
                    signonRequest.setFinancialInstitution(fi);
                    signonRequest.setUserId(username);
                    signonRequest.setPassword(password);
                    signonRequest.setApplicationId(OFXApplicationContextHolder.getCurrentContext().getAppId());
                    signonRequest.setApplicationVersion(OFXApplicationContextHolder.getCurrentContext().getAppVersion());
                    return signonRequest;
                };
                /**
                 * Create a transaction for an account info request.
                 *
                 * @return The transaction.
                 */
                FinancialInstitutionImpl.prototype.createAccountInfoTransaction = function () {
                    var transaction = new AccountInfoRequestTransaction();
                    transaction.setMessage(this.createAccountInfoRequest());
                    return transaction;
                };
                /**
                 * Create an account info request.
                 *
                 * @return The account info request.
                 */
                FinancialInstitutionImpl.prototype.createAccountInfoRequest = function () {
                    return new AccountInfoRequest();
                };
                /**
                 * Get the account profiles for the specified response envelope.
                 *
                 * @param response The response envelope.
                 * @return The account profiles.
                 */
                FinancialInstitutionImpl.prototype.getAccountProfiles = function (response) {
                    var messageSet = response.getMessageSet(1 /* signup */);
                    if (messageSet == null) {
                        throw new OFXException("No signup response message set.");
                    }
                    var transaction = messageSet.getAccountInfoResponse();
                    if (transaction == null) {
                        throw new OFXException("No account info transaction in the signup response.");
                    }
                    var infoResponse = transaction.getMessage();
                    if (infoResponse == null) {
                        throw new OFXException("No account info response in the transaction.");
                    }
                    return infoResponse.getAccounts();
                };
                /**
                 * The connection used by this implementation.
                 *
                 * @return The connection used by this implementation.
                 */
                FinancialInstitutionImpl.prototype.getConnection = function () {
                    return this.connection;
                };
                /**
                 * The financial institution data.
                 *
                 * @return The financial institution data.
                 */
                FinancialInstitutionImpl.prototype.getData = function () {
                    return this.data;
                };
                return FinancialInstitutionImpl;
            })();
            impl.FinancialInstitutionImpl = FinancialInstitutionImpl;
        })(impl = client.impl || (client.impl = {}));
    })(client = ofx4js.client || (ofx4js.client = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../domain/data/common/StatementResponse'/>
///<reference path='../../domain/data/common/StatementRequest'/>
///<reference path='../../domain/data/banking/BankingResponseMessageSet'/>
///<reference path='../../domain/data/banking/BankStatementRequest'/>
///<reference path='../../domain/data/banking/BankingRequestMessageSet'/>
///<reference path='../../OFXException'/>
///<reference path='../../client/BankAccount'/>
///<reference path='BaseAccountImpl'/>
///<reference path='FinancialInstitutionImpl'/>
var ofx4js;
(function (ofx4js) {
    var client;
    (function (client) {
        var impl;
        (function (impl) {
            var MessageSetType = ofx4js.domain.data.MessageSetType;
            var BankStatementRequest = ofx4js.domain.data.banking.BankStatementRequest;
            var BankingRequestMessageSet = ofx4js.domain.data.banking.BankingRequestMessageSet;
            var BankStatementRequestTransaction = ofx4js.domain.data.banking.BankStatementRequestTransaction;
            var OFXException = ofx4js.OFXException;
            /**
             * @author Ryan Heaton
             */
            var BankingAccountImpl = (function (_super) {
                __extends(BankingAccountImpl, _super);
                function BankingAccountImpl(details, username, password, institution) {
                    _super.call(this, details, username, password, institution);
                }
                BankingAccountImpl.prototype.unwrapStatementResponse = function (response) {
                    var bankingSet = response.getMessageSet(2 /* banking */);
                    if (bankingSet == null) {
                        throw new OFXException("No banking response message set.");
                    }
                    var statementTransactionResponse = bankingSet.getStatementResponse();
                    if (statementTransactionResponse == null) {
                        throw new OFXException("No banking statement response transaction.");
                    }
                    var statement = statementTransactionResponse.getMessage();
                    if (statement == null) {
                        throw new OFXException("No banking statement in the transaction.");
                    }
                    return statement;
                };
                BankingAccountImpl.prototype.createRequestMessageSet = function (transaction) {
                    var bankingRequest = new BankingRequestMessageSet();
                    bankingRequest.setStatementRequest(transaction);
                    return bankingRequest;
                };
                BankingAccountImpl.prototype.createTransaction = function () {
                    return new BankStatementRequestTransaction();
                };
                BankingAccountImpl.prototype.createStatementRequest = function (details, range) {
                    var bankRequest = new BankStatementRequest();
                    bankRequest.setAccount(details);
                    bankRequest.setStatementRange(range);
                    return bankRequest;
                };
                return BankingAccountImpl;
            })(impl.BaseAccountImpl);
            impl.BankingAccountImpl = BankingAccountImpl;
        })(impl = client.impl || (client.impl = {}));
    })(client = ofx4js.client || (ofx4js.client = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../client/FinancialInstitutionData'/>
var ofx4js;
(function (ofx4js) {
    var client;
    (function (client) {
        var impl;
        (function (impl) {
            //import java.net.URL;
            /**
             * Base bean for FI data.
             *
             * @author Ryan Heaton
             */
            var BaseFinancialInstitutionData = (function () {
                function BaseFinancialInstitutionData(id) {
                    this.id = id;
                }
                BaseFinancialInstitutionData.prototype.getId = function () {
                    return this.id;
                };
                BaseFinancialInstitutionData.prototype.setId = function (id) {
                    this.id = id;
                };
                BaseFinancialInstitutionData.prototype.getFinancialInstitutionId = function () {
                    return this.fid;
                };
                BaseFinancialInstitutionData.prototype.setFinancialInstitutionId = function (id) {
                    this.fid = id;
                };
                BaseFinancialInstitutionData.prototype.getName = function () {
                    return name;
                };
                BaseFinancialInstitutionData.prototype.setName = function (name) {
                    this.name = name;
                };
                BaseFinancialInstitutionData.prototype.getOrganization = function () {
                    return this.organization;
                };
                BaseFinancialInstitutionData.prototype.setOrganization = function (organization) {
                    this.organization = organization;
                };
                BaseFinancialInstitutionData.prototype.getOFXURL = function () {
                    return this.ofxUrl;
                };
                BaseFinancialInstitutionData.prototype.setOFXURL = function (OFXURL) {
                    this.ofxUrl = OFXURL;
                };
                BaseFinancialInstitutionData.prototype.getBrokerId = function () {
                    return this.brokerId;
                };
                BaseFinancialInstitutionData.prototype.setBrokerId = function (brokerId) {
                    this.brokerId = brokerId;
                };
                return BaseFinancialInstitutionData;
            })();
            impl.BaseFinancialInstitutionData = BaseFinancialInstitutionData;
        })(impl = client.impl || (client.impl = {}));
    })(client = ofx4js.client || (ofx4js.client = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../common/StatementRequest'/>
///<reference path='CreditCardAccountDetails'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var creditcard;
            (function (creditcard) {
                var StatementRequest = ofx4js.domain.data.common.StatementRequest;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                /**
                 * @author Ryan Heaton
                 */
                var CreditCardStatementRequest = (function (_super) {
                    __extends(CreditCardStatementRequest, _super);
                    function CreditCardStatementRequest() {
                        _super.apply(this, arguments);
                    }
                    /**
                     * The account details.
                     *
                     * @return The account details.
                     */
                    CreditCardStatementRequest.prototype.getAccount = function () {
                        return this.account;
                    };
                    /**
                     * The account details.
                     *
                     * @param account The account details.
                     */
                    CreditCardStatementRequest.prototype.setAccount = function (account) {
                        this.account = account;
                    };
                    return CreditCardStatementRequest;
                })(StatementRequest);
                creditcard.CreditCardStatementRequest = CreditCardStatementRequest;
                Aggregate_add(CreditCardStatementRequest, "CCSTMTRQ");
                ChildAggregate_add(CreditCardStatementRequest, { name: "CCACCTFROM", required: true, order: 0, type: creditcard.CreditCardAccountDetails, read: CreditCardStatementRequest.prototype.getAccount, write: CreditCardStatementRequest.prototype.setAccount });
            })(creditcard = data.creditcard || (data.creditcard = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../TransactionWrappedRequestMessage'/>
///<reference path='CreditCardStatementRequest'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var creditcard;
            (function (creditcard) {
                var TransactionWrappedRequestMessage = ofx4js.domain.data.TransactionWrappedRequestMessage;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                /**
                 * @author Ryan Heaton
                 */
                var CreditCardStatementRequestTransaction = (function (_super) {
                    __extends(CreditCardStatementRequestTransaction, _super);
                    function CreditCardStatementRequestTransaction() {
                        _super.apply(this, arguments);
                    }
                    /**
                     * The message.
                     *
                     * @return The message.
                     */
                    CreditCardStatementRequestTransaction.prototype.getMessage = function () {
                        return this.message;
                    };
                    /**
                     * The message.
                     *
                     * @param message The message.
                     *
                     */
                    CreditCardStatementRequestTransaction.prototype.setMessage = function (message) {
                        this.message = message;
                    };
                    // Inherited.
                    CreditCardStatementRequestTransaction.prototype.setWrappedMessage = function (message) {
                        this.setMessage(message);
                    };
                    return CreditCardStatementRequestTransaction;
                })(TransactionWrappedRequestMessage);
                creditcard.CreditCardStatementRequestTransaction = CreditCardStatementRequestTransaction;
                Aggregate_add(CreditCardStatementRequestTransaction, "CCSTMTTRNRQ");
                ChildAggregate_add(CreditCardStatementRequestTransaction, { required: true, order: 30, type: creditcard.CreditCardStatementRequest, read: CreditCardStatementRequestTransaction.prototype.getMessage, write: CreditCardStatementRequestTransaction.prototype.setMessage });
            })(creditcard = data.creditcard || (data.creditcard = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../MessageSetType'/>
///<reference path='../RequestMessageSet'/>
///<reference path='CreditCardStatementRequestTransaction'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var creditcard;
            (function (creditcard) {
                var MessageSetType = ofx4js.domain.data.MessageSetType;
                var RequestMessageSet = ofx4js.domain.data.RequestMessageSet;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                //import java.util.List;
                //import java.util.ArrayList;
                /**
                 * @author Ryan Heaton
                 */
                var CreditCardRequestMessageSet = (function (_super) {
                    __extends(CreditCardRequestMessageSet, _super);
                    function CreditCardRequestMessageSet() {
                        _super.apply(this, arguments);
                    }
                    CreditCardRequestMessageSet.prototype.getType = function () {
                        return 3 /* creditcard */;
                    };
                    /**
                     * The request.
                     *
                     * @return The request.
                     */
                    CreditCardRequestMessageSet.prototype.getStatementRequest = function () {
                        return this.statementRequest;
                    };
                    /**
                     * The request.
                     *
                     * @param statementRequest The request.
                     */
                    CreditCardRequestMessageSet.prototype.setStatementRequest = function (statementRequest) {
                        this.statementRequest = statementRequest;
                    };
                    // Inherited.
                    CreditCardRequestMessageSet.prototype.getRequestMessages = function () {
                        var requestMessages = [];
                        if (this.getStatementRequest() != null) {
                            requestMessages.push(this.getStatementRequest());
                        }
                        return requestMessages;
                    };
                    return CreditCardRequestMessageSet;
                })(RequestMessageSet);
                creditcard.CreditCardRequestMessageSet = CreditCardRequestMessageSet;
                Aggregate_add(CreditCardRequestMessageSet, "CREDITCARDMSGSRQV1");
                ChildAggregate_add(CreditCardRequestMessageSet, { order: 0, type: creditcard.CreditCardStatementRequestTransaction, read: CreditCardRequestMessageSet.prototype.getStatementRequest, write: CreditCardRequestMessageSet.prototype.setStatementRequest });
            })(creditcard = data.creditcard || (data.creditcard = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../common/StatementResponse'/>
///<reference path='CreditCardAccountDetails'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var creditcard;
            (function (creditcard) {
                var StatementResponse = ofx4js.domain.data.common.StatementResponse;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                /**
                 * @author Ryan Heaton
                 */
                var CreditCardStatementResponse = (function (_super) {
                    __extends(CreditCardStatementResponse, _super);
                    function CreditCardStatementResponse() {
                        _super.apply(this, arguments);
                    }
                    CreditCardStatementResponse.prototype.getResponseMessageName = function () {
                        return "credit card statement";
                    };
                    /**
                     * The account for the statement.
                     *
                     * @return The account for the statement.
                     */
                    CreditCardStatementResponse.prototype.getAccount = function () {
                        return this.account;
                    };
                    /**
                     * The account for the statement.
                     *
                     * @param account The account for the statement.
                     */
                    CreditCardStatementResponse.prototype.setAccount = function (account) {
                        this.account = account;
                    };
                    return CreditCardStatementResponse;
                })(StatementResponse);
                creditcard.CreditCardStatementResponse = CreditCardStatementResponse;
                Aggregate_add(CreditCardStatementResponse, "CCSTMTRS");
                ChildAggregate_add(CreditCardStatementResponse, { name: "CCACCTFROM", order: 10, type: creditcard.CreditCardAccountDetails, read: CreditCardStatementResponse.prototype.getAccount, write: CreditCardStatementResponse.prototype.setAccount });
            })(creditcard = data.creditcard || (data.creditcard = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../TransactionWrappedResponseMessage'/>
///<reference path='CreditCardStatementResponse'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var creditcard;
            (function (creditcard) {
                var TransactionWrappedResponseMessage = ofx4js.domain.data.TransactionWrappedResponseMessage;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                /**
                 * @author Ryan Heaton
                 */
                var CreditCardStatementResponseTransaction = (function (_super) {
                    __extends(CreditCardStatementResponseTransaction, _super);
                    function CreditCardStatementResponseTransaction() {
                        _super.apply(this, arguments);
                    }
                    /**
                     * The message.
                     *
                     * @return The message.
                     */
                    CreditCardStatementResponseTransaction.prototype.getMessage = function () {
                        return this.message;
                    };
                    /**
                     * The message.
                     *
                     * @param message The message.
                     */
                    CreditCardStatementResponseTransaction.prototype.setMessage = function (message) {
                        this.message = message;
                    };
                    // Inherited.
                    CreditCardStatementResponseTransaction.prototype.getWrappedMessage = function () {
                        return this.getMessage();
                    };
                    return CreditCardStatementResponseTransaction;
                })(TransactionWrappedResponseMessage);
                creditcard.CreditCardStatementResponseTransaction = CreditCardStatementResponseTransaction;
                Aggregate_add(CreditCardStatementResponseTransaction, "CCSTMTTRNRS");
                ChildAggregate_add(CreditCardStatementResponseTransaction, { required: true, order: 30, type: creditcard.CreditCardStatementResponse, read: CreditCardStatementResponseTransaction.prototype.getMessage, write: CreditCardStatementResponseTransaction.prototype.setMessage });
            })(creditcard = data.creditcard || (data.creditcard = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../MessageSetType'/>
///<reference path='../ResponseMessage'/>
///<reference path='../ResponseMessageSet'/>
///<reference path='CreditCardStatementResponseTransaction'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var creditcard;
            (function (creditcard) {
                var MessageSetType = ofx4js.domain.data.MessageSetType;
                var ResponseMessageSet = ofx4js.domain.data.ResponseMessageSet;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                /**
                 * @author Ryan Heaton
                 */
                var CreditCardResponseMessageSet = (function (_super) {
                    __extends(CreditCardResponseMessageSet, _super);
                    function CreditCardResponseMessageSet() {
                        _super.apply(this, arguments);
                    }
                    CreditCardResponseMessageSet.prototype.getType = function () {
                        return 3 /* creditcard */;
                    };
                    /**
                     * The statement response list.
                     *
                     * Most OFX files have a single statement response, except MT2OFX
                     * which outputs OFX with multiple statement responses
                     * in a single banking response message set.
                     *
                     * @return The statement response list.
                     */
                    CreditCardResponseMessageSet.prototype.getStatementResponses = function () {
                        return this.statementResponses;
                    };
                    /**
                     * The statement reponse list.
                     *
                     * @param statementResponses The statement response list.
                     */
                    CreditCardResponseMessageSet.prototype.setStatementResponses = function (statementResponses) {
                        this.statementResponses = statementResponses;
                    };
                    /**
                     * The first statement response.
                     *
                     * @return the first bank statement response.
                     * @deprecated Use getStatementResponses() because sometimes there are multiple responses
                     */
                    CreditCardResponseMessageSet.prototype.getStatementResponse = function () {
                        return this.statementResponses == null || this.statementResponses.length == 0 ? null : this.statementResponses[0];
                    };
                    /**
                     * The statement response.
                     *
                     * @param statementResponse The statement response.
                     */
                    CreditCardResponseMessageSet.prototype.setStatementResponse = function (statementResponse) {
                        this.statementResponses = [statementResponse];
                    };
                    // Inherited.
                    CreditCardResponseMessageSet.prototype.getResponseMessages = function () {
                        return this.statementResponses;
                    };
                    return CreditCardResponseMessageSet;
                })(ResponseMessageSet);
                creditcard.CreditCardResponseMessageSet = CreditCardResponseMessageSet;
                Aggregate_add(CreditCardResponseMessageSet, "CREDITCARDMSGSRSV1");
                ChildAggregate_add(CreditCardResponseMessageSet, { order: 0, type: Array, collectionEntryType: creditcard.CreditCardStatementResponseTransaction, read: CreditCardResponseMessageSet.prototype.getStatementResponses, write: CreditCardResponseMessageSet.prototype.setStatementResponses });
            })(creditcard = data.creditcard || (data.creditcard = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../domain/data/common/StatementResponse'/>
///<reference path='../../domain/data/common/StatementRequest'/>
///<reference path='../../domain/data/common/StatementRange'/>
///<reference path='../../domain/data/ResponseEnvelope'/>
///<reference path='../../domain/data/creditcard/CreditCardStatementRequest'/>
///<reference path='../../domain/data/creditcard/CreditCardRequestMessageSet'/>
///<reference path='../../domain/data/creditcard/CreditCardResponseMessageSet'/>
///<reference path='../../domain/data/creditcard/CreditCardStatementResponse'/>
///<reference path='../../OFXException'/>
///<reference path='../CreditCardAccount'/>
///<reference path='BaseAccountImpl'/>
///<reference path='FinancialInstitutionImpl'/>
var ofx4js;
(function (ofx4js) {
    var client;
    (function (client) {
        var impl;
        (function (impl) {
            var MessageSetType = ofx4js.domain.data.MessageSetType;
            var CreditCardRequestMessageSet = ofx4js.domain.data.creditcard.CreditCardRequestMessageSet;
            var CreditCardStatementRequest = ofx4js.domain.data.creditcard.CreditCardStatementRequest;
            var CreditCardStatementRequestTransaction = ofx4js.domain.data.creditcard.CreditCardStatementRequestTransaction;
            var OFXException = ofx4js.OFXException;
            /**
             * @author Ryan Heaton
             */
            var CreditCardAccountImpl = (function (_super) {
                __extends(CreditCardAccountImpl, _super);
                function CreditCardAccountImpl(details, username, password, institution) {
                    _super.call(this, details, username, password, institution);
                }
                CreditCardAccountImpl.prototype.unwrapStatementResponse = function (response) {
                    var creditCardSet = response.getMessageSet(3 /* creditcard */);
                    if (creditCardSet == null) {
                        throw new OFXException("No credit card response message set.");
                    }
                    var statementTransactionResponse = creditCardSet.getStatementResponse();
                    if (statementTransactionResponse == null) {
                        throw new OFXException("No credit card statement response transaction.");
                    }
                    var statement = statementTransactionResponse.getMessage();
                    if (statement == null) {
                        throw new OFXException("No credit card statement in the transaction.");
                    }
                    return statement;
                };
                CreditCardAccountImpl.prototype.createRequestMessageSet = function (transaction) {
                    var creditCardRequest = new CreditCardRequestMessageSet();
                    creditCardRequest.setStatementRequest(transaction);
                    return creditCardRequest;
                };
                CreditCardAccountImpl.prototype.createTransaction = function () {
                    return new CreditCardStatementRequestTransaction();
                };
                CreditCardAccountImpl.prototype.createStatementRequest = function (details, range) {
                    var bankRequest = new CreditCardStatementRequest();
                    bankRequest.setAccount(details);
                    bankRequest.setStatementRange(range);
                    return bankRequest;
                };
                return CreditCardAccountImpl;
            })(impl.BaseAccountImpl);
            impl.CreditCardAccountImpl = CreditCardAccountImpl;
        })(impl = client.impl || (client.impl = {}));
    })(client = ofx4js.client || (ofx4js.client = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='OFXConnectionException'/>
var ofx4js;
(function (ofx4js) {
    var client;
    (function (client) {
        var net;
        (function (net) {
            /**
             * @author Ryan Heaton
             */
            var OFXServerException = (function (_super) {
                __extends(OFXServerException, _super);
                function OFXServerException(message, httpCode) {
                    _super.call(this, message);
                    this.httpCode = httpCode;
                }
                OFXServerException.prototype.getHttpCode = function () {
                    return this.httpCode;
                };
                return OFXServerException;
            })(net.OFXConnectionException);
            net.OFXServerException = OFXServerException;
        })(net = client.net || (client.net = {}));
    })(client = ofx4js.client || (ofx4js.client = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../OFXException'/>
var ofx4js;
(function (ofx4js) {
    var io;
    (function (io) {
        /**
         * @author Ryan Heaton
         */
        var OFXParseException = (function (_super) {
            __extends(OFXParseException, _super);
            function OFXParseException(message) {
                _super.call(this, message);
            }
            return OFXParseException;
        })(ofx4js.OFXException);
        io.OFXParseException = OFXParseException;
    })(io = ofx4js.io || (ofx4js.io = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='StatusCode'/>
///<reference path='Status'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var common;
            (function (common) {
                /**
                 * Holder for an unknown status code.
                 *
                 * @author Ryan Heaton
                 */
                var UnknownStatusCode = (function (_super) {
                    __extends(UnknownStatusCode, _super);
                    function UnknownStatusCode(code, message, defaultSeverity) {
                        _super.call(this);
                        this.code = code;
                        this.message = message;
                        this.defaultSeverity = defaultSeverity;
                    }
                    UnknownStatusCode.prototype.getCode = function () {
                        return this.code;
                    };
                    UnknownStatusCode.prototype.getMessage = function () {
                        return this.message;
                    };
                    UnknownStatusCode.prototype.getDefaultSeverity = function () {
                        return this.defaultSeverity;
                    };
                    //@Override
                    UnknownStatusCode.prototype.toString = function () {
                        return this.code.toString();
                    };
                    return UnknownStatusCode;
                })(common.StatusCode);
                common.UnknownStatusCode = UnknownStatusCode;
            })(common = data.common || (data.common = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../domain/data/common/Status'/>
///<reference path='../domain/data/common/StatusCode'/>
///<reference path='../domain/data/common/UnknownStatusCode'/>
///<reference path='../meta/PropertyDescriptor'/>
///<reference path='StringConversion'/>
var ofx4js;
(function (ofx4js) {
    var io;
    (function (io) {
        var StatusCode = ofx4js.domain.data.common.StatusCode;
        var Severity = ofx4js.domain.data.common.Severity;
        var KnownCode = ofx4js.domain.data.common.KnownCode;
        var UnknownStatusCode = ofx4js.domain.data.common.UnknownStatusCode;
        var isAssignableFrom = ofx4js.meta.isAssignableFrom;
        /**
         * Utility class for conversion to/from OFX strings.
         *
         * @author Ryan Heaton
         */
        var DefaultStringConversion = (function () {
            function DefaultStringConversion() {
            }
            DefaultStringConversion.prototype.toString = function (value) {
                if (!value) {
                    return null;
                }
                else if (value instanceof Boolean) {
                    return value ? "Y" : "N";
                }
                else if (value instanceof Date) {
                    return this.formatDate(value);
                }
                else if (typeof value === "number") {
                    return value + "";
                }
                else {
                    return value.toString();
                }
            };
            DefaultStringConversion.prototype.fromString = function (clazz, value) {
                if (!value) {
                    return null;
                }
                else if (clazz === StatusCode) {
                    var code = value;
                    var statusCode = KnownCode.fromCode(code);
                    if (!statusCode) {
                        statusCode = new UnknownStatusCode(code, "Unknown status code.", 2 /* ERROR */);
                    }
                    return statusCode;
                }
                else if (isAssignableFrom(Boolean, clazz)) {
                    return ("Y" === value.toUpperCase());
                }
                else if (isAssignableFrom(Date, clazz)) {
                    return this.parseDate(value);
                }
                else if (typeof clazz === "object") {
                    // enum
                    console.assert(value in clazz);
                    if (value in clazz) {
                        return clazz[value];
                    }
                }
                return value;
            };
            /**
             * Parses a date according to OFX.
             *
             * @param value The value of the date.
             * @return The date value.
             */
            DefaultStringConversion.prototype.parseDate = function (value) {
                var year = parseInt(value.substr(0, 4));
                var month = parseInt(value.substr(4, 2)) - 1; // javascript month numbers are zero-based
                var day = parseInt(value.substr(6, 2));
                var hour = parseInt(value.substr(8, 2));
                var minute = parseInt(value.substr(10, 2));
                var second = parseInt(value.substr(12, 2));
                var milli = parseInt(value.substr(15, 3));
                // add timezone offset
                var bracket = value.indexOf("[");
                if (bracket != -1) {
                    var close = value.indexOf(":");
                    if (close === -1) {
                        close = value.indexOf("]");
                    }
                    var gmtOffset = value.substring(bracket + 1, close);
                    hour -= 1.0 * gmtOffset;
                }
                // create date as UTC
                return new Date(Date.UTC(year, month, day, hour, minute, second, milli));
            };
            /**
             * Format the date according to the OFX spec.
             *
             * @param date The date.
             * @return The date format.
             */
            DefaultStringConversion.prototype.formatDate = function (date) {
                var gmt = new Date(date.valueOf() + date.getTimezoneOffset() * 60000);
                return this.pad(gmt.getFullYear(), 4) + this.pad(gmt.getMonth() + 1, 2) + this.pad(gmt.getDay(), 2) + this.pad(gmt.getHours(), 2) + this.pad(gmt.getMinutes(), 2) + this.pad(gmt.getSeconds(), 2) + "." + this.dpad(gmt.getMilliseconds(), 3);
            };
            /**
             * Pad a number with leading zeroes until it is of <tt>size</tt> length
             *
             * @param num number
             * @param size number of digits in final number
             * @return padded number
             */
            DefaultStringConversion.prototype.pad = function (num, size) {
                var s = num + "";
                while (s.length < size) {
                    s = "0" + s;
                }
                return s;
            };
            /**
             * Pad a number with trailing zeroes until it is of <tt>size</tt> length.
             * Intended for numbers after a decimal point to get a fixed number of decimals
             *
             * @param num number
             * @param size number of digits in final number
             * @return padded number
             */
            DefaultStringConversion.prototype.dpad = function (num, size) {
                var s = num + "";
                while (s.length < size) {
                    s = s + "0";
                }
                return s;
            };
            return DefaultStringConversion;
        })();
        io.DefaultStringConversion = DefaultStringConversion;
    })(io = ofx4js.io || (ofx4js.io = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../collections/SortedSet'/>
///<reference path='StringConversion'/>
///<reference path='DefaultStringConversion'/>
///<reference path='AggregateIntrospector'/>
///<reference path='AggregateInfo'/>
///<reference path='AggregateAttribute'/>
///<reference path='OFXWriter'/>
var ofx4js;
(function (ofx4js) {
    var io;
    (function (io) {
        var LogFactory = ofx4js.log.LogFactory;
        var LOG;
        /**
         * Marshaller for aggregate objects.
         *
         * @author Ryan Heaton
         */
        var AggregateMarshaller = (function () {
            function AggregateMarshaller() {
                this.conversion = new io.DefaultStringConversion();
            }
            /**
             * Marshal the specified aggregate object.
             *
             * @param aggregate The aggregate to marshal.
             * @param writer    The writer.
             */
            AggregateMarshaller.prototype.marshal = function (aggregate, writer) {
                var aggregateInfo = io.AggregateIntrospector.getAggregateInfo(aggregate.constructor);
                if (aggregateInfo == null) {
                    throw new ofx4js.Error("Unable to marshal object (no aggregate metadata found).");
                }
                if (aggregateInfo.hasHeaders()) {
                    var headerValues = aggregateInfo.getHeaders(aggregate);
                    var convertedValues = {};
                    for (var header_ in headerValues) {
                        var header = header;
                        convertedValues[header] = this.getConversion().toString(headerValues[header]);
                    }
                    writer.writeHeaders(convertedValues);
                }
                writer.writeStartAggregate(aggregateInfo.getName());
                var AggregateAttributes = aggregateInfo.getAttributes();
                this.writeAggregateAttributes(aggregate, writer, AggregateAttributes);
                writer.writeEndAggregate(aggregateInfo.getName());
            };
            /**
             * Write the aggregate attributes for the specified aggregate.
             *
             * @param aggregate           The aggregate.
             * @param writer              The writer.
             * @param aggregateAttributes The aggregate attributes.
             */
            AggregateMarshaller.prototype.writeAggregateAttributes = function (aggregate, writer, aggregateAttributes) {
                for (var i in aggregateAttributes.values()) {
                    var aggregateAttribute = aggregateAttributes.values()[i];
                    var childValue = null;
                    try {
                        childValue = aggregateAttribute.get(aggregate);
                    }
                    catch (e) {
                        LOG.error("Unable to get " + aggregateAttribute.toString(), e);
                    }
                    if (childValue != null) {
                        switch (aggregateAttribute.getType()) {
                            case 0 /* CHILD_AGGREGATE */:
                                var childValues;
                                if (childValue instanceof Array) {
                                    childValues = childValue;
                                }
                                else {
                                    childValues = [childValue];
                                }
                                for (var value_ in childValues) {
                                    var objValue = value_;
                                    var aggregateInfo = io.AggregateIntrospector.getAggregateInfo(objValue.constructor);
                                    if (aggregateInfo == null) {
                                        throw new ofx4js.Error("Unable to marshal object of type " + objValue.constructor.name + " (no aggregate metadata found).");
                                    }
                                    var attributeName = aggregateAttribute.getName();
                                    if (aggregateAttribute.isArray()) {
                                        attributeName = aggregateInfo.getName();
                                    }
                                    writer.writeStartAggregate(attributeName);
                                    this.writeAggregateAttributes(objValue, writer, aggregateInfo.getAttributes());
                                    writer.writeEndAggregate(attributeName);
                                }
                                break;
                            case 1 /* ELEMENT */:
                                var strValue = this.getConversion().toString(childValue);
                                if ((strValue != null) && ("" !== strValue.trim())) {
                                    writer.writeElement(aggregateAttribute.getName(), strValue);
                                }
                                break;
                            default:
                                throw new ofx4js.Error("Unknown aggregate attribute type: " + aggregateAttribute.getType());
                        }
                    }
                    else if (aggregateAttribute.isRequired()) {
                        throw new ofx4js.Error("Required " + aggregateAttribute.toString() + " is null or empty.");
                    }
                }
            };
            /**
             * The conversion.
             *
             * @return The conversion.
             */
            AggregateMarshaller.prototype.getConversion = function () {
                return this.conversion;
            };
            /**
             * The conversion.
             *
             * @param conversion The conversion.
             */
            AggregateMarshaller.prototype.setConversion = function (conversion) {
                this.conversion = conversion;
            };
            return AggregateMarshaller;
        })();
        io.AggregateMarshaller = AggregateMarshaller;
        LOG = LogFactory.getLog(AggregateMarshaller);
    })(io = ofx4js.io || (ofx4js.io = {}));
})(ofx4js || (ofx4js = {}));
var ofx4js;
(function (ofx4js) {
    var collections;
    (function (collections) {
        var Stack = (function () {
            function Stack() {
                this.values = [];
            }
            Stack.prototype.push = function () {
                var values = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    values[_i - 0] = arguments[_i];
                }
                return Array.prototype.push.apply(this.values, arguments);
            };
            Stack.prototype.pop = function () {
                return Array.prototype.pop.call(this.values);
            };
            Stack.prototype.peek = function () {
                if (this.values.length === 0) {
                    return null;
                }
                else {
                    return this.values[this.values.length - 1];
                }
            };
            Stack.prototype.isEmpty = function () {
                return this.values.length === 0;
            };
            return Stack;
        })();
        collections.Stack = Stack;
    })(collections = ofx4js.collections || (ofx4js.collections = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='OFXParseException'/>
var ofx4js;
(function (ofx4js) {
    var io;
    (function (io) {
        /**
         * @author Ryan Heaton
         */
        var OFXSyntaxException = (function (_super) {
            __extends(OFXSyntaxException, _super);
            function OFXSyntaxException(message) {
                _super.call(this, message);
            }
            return OFXSyntaxException;
        })(io.OFXParseException);
        io.OFXSyntaxException = OFXSyntaxException;
    })(io = ofx4js.io || (ofx4js.io = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../collections/Stack'/>
///<reference path='OFXHandler'/>
///<reference path='AggregateInfo'/>
///<reference path='AggregateAttribute'/>
///<reference path='OFXSyntaxException'/>
var ofx4js;
(function (ofx4js) {
    var io;
    (function (io) {
        var LogFactory = ofx4js.log.LogFactory;
        var Stack = ofx4js.collections.Stack;
        var LOG;
        var AggregateInfoHolder = (function () {
            function AggregateInfoHolder(arg1, arg2, arg3) {
                this.currentAttributeIndex = 0;
                switch (arguments.length) {
                    case 1:
                        this.AggregateInfoHolder1.apply(this, arguments);
                        break;
                    case 3:
                        this.AggregateInfoHolder3.apply(this, arguments);
                        break;
                    default:
                        throw new ofx4js.Error("invalid number of arguments");
                }
            }
            AggregateInfoHolder.prototype.AggregateInfoHolder1 = function (ignoredAggregateName) {
                this.aggregate = null;
                this.info = null;
                this.aggregateName = ignoredAggregateName;
            };
            AggregateInfoHolder.prototype.AggregateInfoHolder3 = function (aggregate, info, aggregateName) {
                this.aggregateName = aggregateName;
                this.aggregate = aggregate;
                this.info = info;
            };
            AggregateInfoHolder.prototype.isBeingSkipped = function () {
                return this.aggregate == null || this.info == null;
            };
            AggregateInfoHolder.prototype.isSkipping = function (aggregateName) {
                return this.isBeingSkipped() && aggregateName === this.aggregateName;
            };
            return AggregateInfoHolder;
        })();
        /**
         * Content handler that manages the aggregate using a stack-based implementation.
         *
         * @author Ryan Heaton
         */
        var AggregateStackContentHandler = (function () {
            function AggregateStackContentHandler(root, conversion) {
                this.stack = new Stack();
                this.parsingRoot = false;
                this.stack = new Stack();
                this.parsingRoot = false;
                var aggregateInfo = io.AggregateIntrospector.getAggregateInfo(root.constructor);
                if (aggregateInfo == null) {
                    throw new ofx4js.Error("Unable to marshal object of type '" + root.constructor.name + "' (no aggregate metadata found).");
                }
                this.stack.push(new AggregateInfoHolder(root, aggregateInfo, aggregateInfo.getName()));
                this.conversion = conversion;
            }
            AggregateStackContentHandler.prototype.onHeader = function (name, value) {
                var headerType = this.stack.peek().info.getHeaderType(name);
                if (headerType != null) {
                    this.stack.peek().info.setHeader(this.stack.peek().aggregate, name, this.conversion.fromString(headerType, value));
                }
            };
            AggregateStackContentHandler.prototype.onElement = function (name, value) {
                if (!this.stack.peek().isBeingSkipped()) {
                    var attribute = this.stack.peek().info.getAttribute(name, this.stack.peek().currentAttributeIndex);
                    if (attribute != null && attribute.getType() == 1 /* ELEMENT */) {
                        try {
                            attribute.set(this.conversion.fromString(attribute.getAttributeType(), value), this.stack.peek().aggregate);
                        }
                        catch (e) {
                            LOG.error("Unable to set " + attribute.toString(), e);
                        }
                        this.stack.peek().currentAttributeIndex = attribute.getOrder();
                    }
                    else if (LOG.isInfoEnabled()) {
                        LOG.info("Element " + name + " is not supported on aggregate " + this.stack.peek().info.getName() + " at index " + this.stack.peek().currentAttributeIndex);
                    }
                }
            };
            AggregateStackContentHandler.prototype.startAggregate = function (aggregateName) {
                if (this.stack.peek().isBeingSkipped()) {
                    this.stack.push(new AggregateInfoHolder(aggregateName));
                }
                else if (!this.parsingRoot) {
                    if (aggregateName !== this.stack.peek().info.getName()) {
                        throw new ofx4js.Error("Unexpected root element: " + aggregateName);
                    }
                    this.parsingRoot = true;
                }
                else {
                    var infoHolder;
                    var attribute = this.stack.peek().info.getAttribute(aggregateName, this.stack.peek().currentAttributeIndex);
                    if (attribute != null) {
                        if (attribute.getType() == 0 /* CHILD_AGGREGATE */) {
                            var aggregateType;
                            if (attribute.isArray()) {
                                aggregateType = io.AggregateIntrospector.findAggregateByName(aggregateName);
                            }
                            else {
                                aggregateType = attribute.getAttributeType();
                            }
                            if (aggregateType != null) {
                                var aggregateInfo = io.AggregateIntrospector.getAggregateInfo(aggregateType);
                                if (aggregateInfo == null) {
                                    throw new ofx4js.Error("Unable to locate aggregate info for type " + aggregateType.getName());
                                }
                                var aggregate = aggregate = new aggregateType();
                                infoHolder = new AggregateInfoHolder(aggregate, aggregateInfo, aggregateName);
                            }
                            else {
                                if (LOG.isInfoEnabled()) {
                                    LOG.info("Child aggregate " + aggregateName + " is not supported on aggregate " + this.stack.peek().info.getName() + ": name not assigned a type.");
                                }
                                //element not supported.  push a skipping aggregate on the stack.
                                infoHolder = new AggregateInfoHolder(aggregateName);
                            }
                            this.stack.peek().currentAttributeIndex = attribute.getOrder();
                        }
                        else {
                            if (LOG.isInfoEnabled()) {
                                LOG.info("Child aggregate " + aggregateName + " is not supported on aggregate " + this.stack.peek().info.getName() + ": no child aggregate, but there does exist an element by that name.");
                            }
                            //child aggregate not supported.  push a skipping aggregate on the stack.
                            infoHolder = new AggregateInfoHolder(aggregateName);
                        }
                    }
                    else {
                        if (LOG.isInfoEnabled()) {
                            LOG.info("Child aggregate " + aggregateName + " is not supported on aggregate " + this.stack.peek().info.getName() + ": no attributes found by that name after index " + this.stack.peek().currentAttributeIndex);
                        }
                        //child aggregate not supported.  push a skipping aggregate on the stack.
                        infoHolder = new AggregateInfoHolder(aggregateName);
                    }
                    this.stack.push(infoHolder);
                }
            };
            AggregateStackContentHandler.prototype.endAggregate = function (aggregateName) {
                var infoHolder = this.stack.pop();
                if (aggregateName !== infoHolder.aggregateName) {
                    throw new io.OFXSyntaxException("Unexpected end aggregate " + aggregateName + ". (Perhaps " + infoHolder.aggregateName + " is an element with an empty value, making it impossible to parse.)");
                }
                if (!this.stack.isEmpty()) {
                    if (!infoHolder.isSkipping(aggregateName)) {
                        //we're not skipping the top aggregate, so process it.
                        var attribute = this.stack.peek().info.getAttribute(aggregateName, this.stack.peek().currentAttributeIndex, infoHolder.aggregate.constructor);
                        try {
                            if (attribute != null) {
                                attribute.set(infoHolder.aggregate, this.stack.peek().aggregate);
                            }
                            else {
                                if (LOG.isInfoEnabled()) {
                                    LOG.info("Child aggregate " + aggregateName + " is not supported on aggregate " + this.stack.peek().info.getName() + ": no attributes found by that name after index " + this.stack.peek().currentAttributeIndex);
                                }
                            }
                        }
                        catch (e) {
                            LOG.error("Unable to set " + attribute.toString(), e);
                        }
                        if (attribute != null) {
                            this.stack.peek().currentAttributeIndex = attribute.getOrder();
                        }
                    }
                }
                else {
                }
            };
            return AggregateStackContentHandler;
        })();
        io.AggregateStackContentHandler = AggregateStackContentHandler;
        LOG = LogFactory.getLog(AggregateStackContentHandler);
    })(io = ofx4js.io || (ofx4js.io = {}));
})(ofx4js || (ofx4js = {}));
var ofx4js;
(function (ofx4js) {
    var io;
    (function (io) {
        var StringReader = (function () {
            function StringReader(text) {
                this._text = text;
                this._cursor = 0;
                this._mark = 0;
            }
            StringReader.prototype.read = function (cbuf, offset, length) {
                if (this._cursor >= this._text.length) {
                    return -1;
                }
                else {
                    if (arguments.length === 0) {
                        return this.readChar();
                    }
                    else {
                        offset = offset || 0;
                        length = length || cbuf.length;
                        length = Math.min(length, this._text.length - this._cursor);
                        for (var i = 0; i < length; i++) {
                            cbuf[offset + i] = this.readChar();
                        }
                        return length;
                    }
                }
            };
            StringReader.prototype.readChar = function () {
                console.assert(this._cursor < this._text.length);
                var ch = this._text[this._cursor];
                this._cursor++;
                return ch;
            };
            StringReader.prototype.close = function () {
                this._text = null;
                this._cursor = null;
                this._mark = null;
            };
            StringReader.prototype.mark = function () {
                this._mark = this._cursor;
            };
            StringReader.prototype.reset = function () {
                this._cursor = this._mark;
            };
            StringReader.prototype.remainder = function () {
                return this._text.substring(this._cursor);
            };
            return StringReader;
        })();
        io.StringReader = StringReader;
    })(io = ofx4js.io || (ofx4js.io = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='OFXHandler'/>
///<reference path='StringReader'/>
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='OFXHandler'/>
var ofx4js;
(function (ofx4js) {
    var io;
    (function (io) {
        /**
         * Default (no-op) implementation of an OFX handler.
         *
         * @author Ryan Heaton
         */
        var DefaultHandler = (function () {
            function DefaultHandler() {
            }
            DefaultHandler.prototype.onHeader = function (name, value) {
            };
            DefaultHandler.prototype.onElement = function (name, value) {
            };
            DefaultHandler.prototype.startAggregate = function (aggregateName) {
            };
            DefaultHandler.prototype.endAggregate = function (aggregateName) {
            };
            return DefaultHandler;
        })();
        io.DefaultHandler = DefaultHandler;
    })(io = ofx4js.io || (ofx4js.io = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    var io;
    (function (io) {
        (function (OFXParseEventType) {
            OFXParseEventType[OFXParseEventType["CHARACTERS"] = 0] = "CHARACTERS";
            OFXParseEventType[OFXParseEventType["ELEMENT"] = 1] = "ELEMENT";
        })(io.OFXParseEventType || (io.OFXParseEventType = {}));
        var OFXParseEventType = io.OFXParseEventType;
        /**
         * An event during OFX parsing.
         *
         * @author Ryan Heaton
         */
        var OFXParseEvent = (function () {
            function OFXParseEvent(eventType, eventValue) {
                this.eventType = eventType;
                this.eventValue = eventValue;
            }
            OFXParseEvent.prototype.getEventType = function () {
                return this.eventType;
            };
            OFXParseEvent.prototype.getEventValue = function () {
                return this.eventValue;
            };
            return OFXParseEvent;
        })();
        io.OFXParseEvent = OFXParseEvent;
    })(io = ofx4js.io || (ofx4js.io = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../collections/Stack'/>
///<reference path='OFXParseEvent'/>
///<reference path='OFXHandler'/>
var ofx4js;
(function (ofx4js) {
    var io;
    (function (io) {
        var LogFactory = ofx4js.log.LogFactory;
        var Stack = ofx4js.collections.Stack;
        var LOG;
        /**
         * @author Ryan Heaton
         */
        var OFXV2ContentHandler = (function () {
            function OFXV2ContentHandler(ofxHandler) {
                this.eventStack = new Stack();
                this.startedEvents = new Array();
                if (ofxHandler == null) {
                    throw new ofx4js.Error("An OFX handler must be supplied.");
                }
                this.ofxHandler = ofxHandler;
            }
            OFXV2ContentHandler.prototype.install = function (parser) {
                parser.ontext = this.ontext.bind(this);
                parser.onopentag = this.onopentag.bind(this);
                parser.onclosetag = this.onclosetag.bind(this);
            };
            OFXV2ContentHandler.prototype.onopentag = function (node) {
                var qName = node.name;
                if (LOG.isDebugEnabled()) {
                    LOG.debug("START ELEMENT: " + qName);
                }
                if ((!this.eventStack.isEmpty()) && (this.eventStack.peek().getEventType() == 1 /* ELEMENT */) && (!this.isAlreadyStarted(this.eventStack.peek()))) {
                    var eventValue = this.eventStack.peek().getEventValue();
                    if (LOG.isDebugEnabled()) {
                        LOG.debug("Element " + qName + " is starting aggregate " + eventValue);
                    }
                    //the last element started was not ended; we are assuming we've started a new aggregate.
                    this.ofxHandler.startAggregate(eventValue);
                    this.startedEvents.push(this.eventStack.peek());
                }
                this.eventStack.push(new io.OFXParseEvent(1 /* ELEMENT */, qName));
            };
            /**
             * Whether the specified element aggregate has already been started.
             *
             * @param event The event containing the start.
             * @return Whether the specified element aggregate has already been started.
             */
            OFXV2ContentHandler.prototype.isAlreadyStarted = function (event) {
                return this.startedEvents.indexOf(event) != -1;
            };
            OFXV2ContentHandler.prototype.onclosetag = function (qName) {
                if (LOG.isDebugEnabled()) {
                    LOG.debug("END ELEMENT: " + qName);
                }
                var eventToFinish = this.eventStack.pop();
                if (eventToFinish.getEventType() == 0 /* CHARACTERS */) {
                    var chars = eventToFinish.getEventValue().trim();
                    if (this.eventStack.isEmpty()) {
                        throw new ofx4js.Error("Illegal character data outside main OFX root element: \"" + chars + "\".");
                    }
                    else {
                        var elementEvent = this.eventStack.pop();
                        if (elementEvent.getEventType() != 1 /* ELEMENT */) {
                            throw new ofx4js.Error("Illegal OFX event before characters \"" + chars + "\" (" + elementEvent.getEventType() + ")!");
                        }
                        else {
                            var value = elementEvent.getEventValue();
                            if (LOG.isDebugEnabled()) {
                                LOG.debug("Element " + value + " processed with value " + chars);
                            }
                            this.ofxHandler.onElement(value, chars);
                        }
                    }
                }
                else if (eventToFinish.getEventType() == 1 /* ELEMENT */) {
                    //we're ending an aggregate (no character data on the stack).
                    if (qName === eventToFinish.getEventValue()) {
                        //the last element on the stack is ours; we're ending an OFX aggregate.
                        var value = eventToFinish.getEventValue();
                        if (LOG.isDebugEnabled()) {
                            LOG.debug("Ending aggregate " + value);
                        }
                        this.ofxHandler.endAggregate(value);
                        var i = this.startedEvents.indexOf(eventToFinish);
                        console.assert(i !== -1);
                        if (i > -1) {
                            this.startedEvents.splice(i, 1);
                        }
                    }
                    else {
                        throw new ofx4js.Error("Unexpected end tag: " + eventToFinish.getEventValue());
                    }
                }
                else {
                    throw new ofx4js.Error("Illegal OFX event: " + eventToFinish.getEventType());
                }
            };
            OFXV2ContentHandler.prototype.ontext = function (value) {
                if (value.trim().length > 0) {
                    var event;
                    if ((!this.eventStack.isEmpty()) && (this.eventStack.peek().getEventType() == 0 /* CHARACTERS */)) {
                        //append the characters...
                        event = new io.OFXParseEvent(0 /* CHARACTERS */, this.eventStack.pop().getEventValue() + value);
                    }
                    else {
                        event = new io.OFXParseEvent(0 /* CHARACTERS */, value);
                    }
                    this.eventStack.push(event);
                }
            };
            return OFXV2ContentHandler;
        })();
        io.OFXV2ContentHandler = OFXV2ContentHandler;
        LOG = LogFactory.getLog(OFXV2ContentHandler);
    })(io = ofx4js.io || (ofx4js.io = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../project.d.ts'/>
///<reference path='OFXHandler'/>
///<reference path='DefaultHandler'/>
///<reference path='OFXParseException'/>
///<reference path='OFXV2ContentHandler'/>
///<reference path='StringReader'/>
///<reference path='OFXReader'/>
var ofx4js;
(function (ofx4js) {
    var io;
    (function (io) {
        var LogFactory = ofx4js.log.LogFactory;
        var sax = require("sax");
        var LOG;
        function arraysEqual(a1, a2) {
            if (a1.length !== a2.length) {
                return false;
            }
            for (var i = 0; i < a1.length; i++) {
                if (a1[i] !== a2[i]) {
                    return false;
                }
            }
            return true;
        }
        /**
         * Base class for an OFX reader.  Parses the headers and determines whether we're parsing an
         * OFX v2 or OFX v1 element.  For OFX v2, uses a standard SAX library.
         *
         * @author Ryan Heaton
         */
        var BaseOFXReader = (function () {
            function BaseOFXReader() {
                this.contentHandler = new io.DefaultHandler();
            }
            /**
             * The content handler.
             *
             * @return The content handler.
             */
            BaseOFXReader.prototype.getContentHandler = function () {
                return this.contentHandler;
            };
            /**
             * The content handler.
             *
             * @param handler The content handler.
             */
            BaseOFXReader.prototype.setContentHandler = function (handler) {
                this.contentHandler = handler;
            };
            /**
             * Parse the reader, including the headers.
             *
             * @param reader The reader.
             */
            BaseOFXReader.prototype.parse = function (reader) {
                var header = "";
                var firstElementStart = this.getFirstElementStart();
                var buffer = new Array(firstElementStart.length);
                reader.mark();
                var ch = reader.read(buffer);
                while ((ch != -1) && (!arraysEqual(buffer, firstElementStart))) {
                    if (!this.contains(buffer, '<')) {
                        //if the buffer contains a '<', then we might already have marked the beginning.
                        reader.mark();
                    }
                    ch = reader.read();
                    var shifted = this.shiftAndAppend(buffer, ch);
                    header += shifted;
                }
                if (ch == -1) {
                    throw new io.OFXParseException("Invalid OFX: no root <OFX> element!");
                }
                else {
                    var matches = BaseOFXReader.OFX_2_PROCESSING_INSTRUCTION_PATTERN.exec(header);
                    if (matches) {
                        if (LOG.isInfoEnabled()) {
                            LOG.info("Processing OFX 2 header...");
                        }
                        this.processOFXv2Headers(matches[1]);
                        reader.reset();
                        this.parseV2FromFirstElement(reader.remainder());
                    }
                    else {
                        LOG.info("Processing OFX 1 headers...");
                        this.processOFXv1Headers(header);
                        reader.reset();
                        this.parseV1FromFirstElement(reader.remainder());
                    }
                }
            };
            /**
             * The first characters of the first OFX element, '<', 'O', 'F', 'X'
             *
             * @return The first characters of the OFX element.
             */
            BaseOFXReader.prototype.getFirstElementStart = function () {
                return ['<', 'O', 'F', 'X'];
            };
            /**
             * Whether the specified buffer contains the specified character.
             *
             * @param buffer The buffer.
             * @param c The character to search for.
             * @return Whether the specified buffer contains the specified character.
             */
            BaseOFXReader.prototype.contains = function (buffer, c) {
                for (var i = 0; i < buffer.length; i++) {
                    var ch = buffer[i];
                    if (ch === c) {
                        return true;
                    }
                }
                return false;
            };
            BaseOFXReader.prototype.shiftAndAppend = function (buffer, c) {
                var shifted = buffer[0];
                for (var i = 0; i + 1 < buffer.length; i++) {
                    buffer[i] = buffer[i + 1];
                }
                buffer[buffer.length - 1] = c;
                return shifted;
            };
            /**
             * Parse an OFX version 1 stream from the first OFX element (defined by the {@link #getFirstElementStart() first element characters}).
             *
             * @param text The text.
             */
            BaseOFXReader.prototype.parseV1FromFirstElement = function (text) {
                var strict = false;
                var parser = sax.parser(strict);
                var handler = new io.OFXV2ContentHandler(this.getContentHandler());
                handler.install(parser);
                parser.write(text);
            };
            /**
             * Parse an OFX version 2 stream from the first OFX element (defined by the {@link #getFirstElementStart() first element characters}).
             *
             * @param text The text.
             */
            BaseOFXReader.prototype.parseV2FromFirstElement = function (text) {
                var strict = true;
                var parser = sax.parser(strict);
                var handler = new io.OFXV2ContentHandler(this.getContentHandler());
                handler.install(parser);
                parser.write(text);
            };
            /**
             * Process the given characters as OFX version 1 headers.
             *
             * @param chars The characters to process.
             */
            BaseOFXReader.prototype.processOFXv1Headers = function (chars) {
                var lines = chars.split(/(\n|\r\n)/);
                for (var i = 0; i < lines.length; i++) {
                    var line = lines[i];
                    var colonIndex = line.indexOf(':');
                    if (colonIndex >= 0) {
                        var name = line.substring(0, colonIndex);
                        var value = line.length > colonIndex ? line.substring(colonIndex + 1) : "";
                        this.contentHandler.onHeader(name, value);
                    }
                }
            };
            /**
             * Process the given characters as OFX version 2 headers.
             *
             * @param chars The characters to process.
             */
            BaseOFXReader.prototype.processOFXv2Headers = function (chars) {
                var nameValuePairs = chars.split("\\s+");
                for (var nameValuePair_ in nameValuePairs) {
                    var nameValuePair = nameValuePair_;
                    var equalsIndex = nameValuePair.indexOf('=');
                    if (equalsIndex >= 0) {
                        var name = nameValuePair.substring(0, equalsIndex);
                        var value = nameValuePair.length > equalsIndex ? nameValuePair.substring(equalsIndex + 1) : "";
                        value = value.replace('"', ' ');
                        value = value.replace('\'', ' ');
                        value = value.trim();
                        this.contentHandler.onHeader(name, value);
                    }
                }
            };
            BaseOFXReader.OFX_2_PROCESSING_INSTRUCTION_PATTERN = /<\\?OFX ([^\\?]+)\\?>/;
            return BaseOFXReader;
        })();
        io.BaseOFXReader = BaseOFXReader;
        LOG = LogFactory.getLog(BaseOFXReader);
    })(io = ofx4js.io || (ofx4js.io = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='StringConversion'/>
///<reference path='DefaultStringConversion'/>
///<reference path='AggregateStackContentHandler'/>
///<reference path='OFXReader'/>
///<reference path='BaseOFXReader'/>
var ofx4js;
(function (ofx4js) {
    var io;
    (function (io) {
        /**
         * Unmarshaller for aggregate objects.
         *
         * @author Ryan Heaton
         */
        var AggregateUnmarshaller = (function () {
            function AggregateUnmarshaller(clazz) {
                this.clazz = clazz;
                this.conversion = new io.DefaultStringConversion();
            }
            AggregateUnmarshaller.prototype.unmarshal = function (arg) {
                var stream = (arg instanceof io.StringReader) ? arg : new io.StringReader(arg);
                var aggregate = new this.clazz();
                var reader = this.newReader();
                reader.setContentHandler(new io.AggregateStackContentHandler(aggregate, this.getConversion()));
                reader.parse(stream);
                return aggregate;
            };
            /**
             * New OFX reader.
             *
             * @return new OFX reader.
             */
            AggregateUnmarshaller.prototype.newReader = function () {
                return new io.BaseOFXReader();
            };
            /**
             * The conversion.
             *
             * @return The conversion.
             */
            AggregateUnmarshaller.prototype.getConversion = function () {
                return this.conversion;
            };
            /**
             * The conversion.
             *
             * @param conversion The conversion.
             */
            AggregateUnmarshaller.prototype.setConversion = function (conversion) {
                this.conversion = conversion;
            };
            return AggregateUnmarshaller;
        })();
        io.AggregateUnmarshaller = AggregateUnmarshaller;
    })(io = ofx4js.io || (ofx4js.io = {}));
})(ofx4js || (ofx4js = {}));
var ofx4js;
(function (ofx4js) {
    var io;
    (function (io) {
        var OutputBuffer = (function () {
            function OutputBuffer() {
                this.data = [];
            }
            OutputBuffer.prototype.toString = function (encoding) {
                return this.data.join('');
            };
            OutputBuffer.prototype.append = function (data) {
                this.data.push(data);
            };
            OutputBuffer.prototype.size = function () {
                return this.data.reduce(function (previousValue, currentValue) {
                    return currentValue.length;
                }, 0);
            };
            return OutputBuffer;
        })();
        io.OutputBuffer = OutputBuffer;
        var StreamWriter = (function () {
            function StreamWriter(out, encoding) {
                this.out = out;
                this.encoding = encoding;
            }
            StreamWriter.prototype.flush = function () {
            };
            StreamWriter.prototype.close = function () {
            };
            StreamWriter.prototype.write = function (data) {
                this.out.append(data);
                //TODO
                //Array.prototype.push.apply(this.out, data.split(''));
            };
            return StreamWriter;
        })();
        io.StreamWriter = StreamWriter;
    })(io = ofx4js.io || (ofx4js.io = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../project.d.ts'/>
///<reference path='../OFXWriter'/>
///<reference path='../StreamWriter'/>
var ofx4js;
(function (ofx4js) {
    var io;
    (function (io) {
        var v1;
        (function (v1) {
            //import Map = java.util.Map;
            /**
             * OFX writer to SGML, suitable for OFX versions < 2.0.
             *
             * @author Ryan Heaton
             */
            var OFXV1Writer = (function () {
                function OFXV1Writer(out) {
                    this.LINE_SEPARATOR = "\r\n";
                    this.headersWritten = false;
                    this.writeAttributesOnNewLine = false;
                    if (out instanceof io.StreamWriter) {
                        this.writer = out;
                    }
                    else if (out instanceof io.OutputBuffer) {
                        this.writer = this.newWriter(out);
                    }
                    else {
                        throw new ofx4js.Error("invalid parameter type");
                    }
                }
                OFXV1Writer.prototype.newWriter = function (out) {
                    return new io.StreamWriter(out, "ISO-8859-1");
                };
                OFXV1Writer.prototype.writeHeaders = function (headers) {
                    if (this.headersWritten) {
                        throw new ofx4js.Error("Headers have already been written!");
                    }
                    //write out the 1.0 headers
                    this.println("OFXHEADER:100");
                    this.println("DATA:OFXSGML");
                    this.println("VERSION:102");
                    this.print("SECURITY:");
                    var security = headers["SECURITY"];
                    if (security == null) {
                        security = "NONE";
                    }
                    this.println(security);
                    this.println("ENCODING:USASCII"); //too many ofx v1 servers don't read unicode...
                    this.println("CHARSET:1252"); //windows-compatible.
                    this.println("COMPRESSION:NONE");
                    this.print("OLDFILEUID:");
                    var olduid = headers["OLDFILEUID"];
                    if (olduid == null) {
                        olduid = "NONE";
                    }
                    this.println(olduid);
                    this.print("NEWFILEUID:");
                    var uid = headers["NEWFILEUID"];
                    if (uid == null) {
                        uid = "NONE";
                    }
                    this.println(uid);
                    this.println();
                    this.headersWritten = true;
                };
                OFXV1Writer.prototype.writeStartAggregate = function (aggregateName) {
                    this.print('<');
                    this.print(aggregateName);
                    this.print('>');
                    if (this.isWriteAttributesOnNewLine()) {
                        this.println();
                    }
                };
                OFXV1Writer.prototype.writeElement = function (name, value) {
                    if ((value == null) || ("" === value)) {
                        throw new ofx4js.Error("Illegal element value for element '" + name + "' (value must not be null or empty).");
                    }
                    //todo: optimize performance of the character escaping
                    if (value.indexOf('&') >= 0) {
                        value = value.replace(/\\&/g, "&amp;");
                    }
                    if (value.indexOf('<') >= 0) {
                        value = value.replace(/</g, "&lt;");
                    }
                    if (value.indexOf('>') >= 0) {
                        value = value.replace(/>/g, "&gt;");
                    }
                    this.print('<');
                    this.print(name);
                    this.print('>');
                    this.print(value);
                    if (this.isWriteAttributesOnNewLine()) {
                        this.println();
                    }
                };
                OFXV1Writer.prototype.writeEndAggregate = function (aggregateName) {
                    this.print("</");
                    this.print(aggregateName);
                    this.print('>');
                    if (this.isWriteAttributesOnNewLine()) {
                        this.println();
                    }
                };
                OFXV1Writer.prototype.isWriteAttributesOnNewLine = function () {
                    return this.writeAttributesOnNewLine;
                };
                OFXV1Writer.prototype.setWriteAttributesOnNewLine = function (writeAttributesOnNewLine) {
                    this.writeAttributesOnNewLine = writeAttributesOnNewLine;
                };
                OFXV1Writer.prototype.close = function () {
                    this.flush();
                    this.writer.close();
                };
                OFXV1Writer.prototype.flush = function () {
                    this.writer.flush();
                };
                /*protected*/ OFXV1Writer.prototype.println = function (line) {
                    if (line === void 0) { line = null; }
                    if (line != null) {
                        this.print(line);
                    }
                    this.writer.write(this.LINE_SEPARATOR);
                };
                /*protected*/ OFXV1Writer.prototype.print = function (line) {
                    this.writer.write(line == null ? "null" : line);
                };
                return OFXV1Writer;
            })();
            v1.OFXV1Writer = OFXV1Writer;
        })(v1 = io.v1 || (io.v1 = {}));
    })(io = ofx4js.io || (ofx4js.io = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../domain/data/RequestEnvelope'/>
///<reference path='../../domain/data/ResponseEnvelope'/>
///<reference path='../../io/OFXParseException'/>
///<reference path='../../io/OFXWriter'/>
///<reference path='../../io/AggregateMarshaller'/>
///<reference path='../../io/AggregateUnmarshaller'/>
///<reference path='../../io/v1/OFXV1Writer'/>
///<reference path='../../io/StreamWriter'/>
///<reference path='../../io/StringReader'/>
///<reference path='../../log/Log'/>
///<reference path='OFXConnection'/>
///<reference path='OFXConnectionException'/>
var ofx4js;
(function (ofx4js) {
    var client;
    (function (client) {
        var net;
        (function (net) {
            var ResponseEnvelope = ofx4js.domain.data.ResponseEnvelope;
            var AggregateMarshaller = ofx4js.io.AggregateMarshaller;
            var OFXV1Writer = ofx4js.io.v1.OFXV1Writer;
            var AggregateUnmarshaller = ofx4js.io.AggregateUnmarshaller;
            var StringReader = ofx4js.io.StringReader;
            var OutputBuffer = ofx4js.io.OutputBuffer;
            var LogFactory = ofx4js.log.LogFactory;
            // import java.io.*;
            // import java.net.HttpURLConnection;
            // import java.net.URL;
            // import org.apache.commons.logging.Log;
            // import org.apache.commons.logging.LogFactory;
            var LOG;
            /**
             * Base implementation for an OFX connection.
             *
             * @author Ryan Heaton
             */
            var OFXV1Connection = (function () {
                function OFXV1Connection() {
                    this.marshaller = new AggregateMarshaller();
                    this.unmarshaller = new AggregateUnmarshaller(ResponseEnvelope);
                }
                // Inherited.
                OFXV1Connection.prototype.sendRequest = function (request, url) {
                    //    if (!url.protocol().toLowerCase().startsWith("http")) {
                    //      throw new Error("Invalid URL: " + url + " only http(s) is supported.");
                    //    }
                    //marshal to memory so we can determine the size...
                    var outBuffer = new OutputBuffer();
                    var ofxWriter = this.newOFXWriter(outBuffer);
                    this.getMarshaller().marshal(request, ofxWriter);
                    ofxWriter.close();
                    this.logRequest(outBuffer);
                    var self = this;
                    return self.sendBuffer(url, outBuffer).then(function (in_) {
                        self.logResponse(in_);
                        return self.unmarshal(in_);
                    });
                };
                /**
                 * Log a request buffer.
                 *
                 * @param outBuffer The buffer to log.
                 */
                OFXV1Connection.prototype.logRequest = function (outBuffer) {
                    if (LOG.isInfoEnabled()) {
                        LOG.info("Marshalling " + outBuffer.size() + " bytes of the OFX request.");
                        if (LOG.isDebugEnabled()) {
                            LOG.debug(outBuffer.toString("utf-8"));
                        }
                    }
                };
                OFXV1Connection.prototype.logResponse = function (inBuffer) {
                    if (LOG.isInfoEnabled()) {
                        if (LOG.isDebugEnabled()) {
                            LOG.debug("Received OFX response:", inBuffer);
                        }
                    }
                };
                /**
                 * Send the specified buffer to the specified URL.
                 *
                 * @param url The URL.
                 * @param outBuffer The buffer.
                 * @return a promise that resolves with the response.
                 */
                OFXV1Connection.prototype.sendBuffer = function (url, outBuffer) {
                    var outText = outBuffer.toString();
                    var async = this.getAsync();
                    return new Promise(function (resolve, reject) {
                        var request = new XMLHttpRequest();
                        var onloadCalled = false;
                        request.open("POST", url, async);
                        request.setRequestHeader("Content-Type", "application/x-ofx");
                        request.setRequestHeader("Accept", "*/*, application/x-ofx");
                        request.onload = function () {
                            onloadCalled = true;
                            if (request.status >= 200 && request.status < 300) {
                                resolve(request.responseText);
                            }
                            else if (request.status >= 400 && request.status < 500) {
                                reject(new ofx4js.Error("Error " + request.status + " with client request: " + request.responseText));
                            }
                            else {
                                reject(new ofx4js.Error("Invalid response code from OFX server: " + request.status));
                            }
                        };
                        request.onerror = function () {
                            reject(new ofx4js.Error("Network error"));
                        };
                        request.send(outText);
                        if (!async && !onloadCalled) {
                            request.onload();
                        }
                    });
                };
                /**
                 * Unmarshal the input stream.
                 *
                 * @param in The input stream.
                 * @return The response envelope.
                 */
                OFXV1Connection.prototype.unmarshal = function (in_) {
                    try {
                        var reader = new StringReader(in_);
                        return this.getUnmarshaller().unmarshal(reader);
                    }
                    catch (e) {
                        throw new net.OFXConnectionException("Unable to parse the OFX response.", e);
                    }
                };
                /**
                 * Create a new OFX writer.
                 *
                 * @param out The output stream for the writer.
                 * @return The OFX writer.
                 */
                OFXV1Connection.prototype.newOFXWriter = function (out) {
                    return new OFXV1Writer(out);
                };
                /**
                 * The marshaller.
                 *
                 * @return The marshaller.
                 */
                OFXV1Connection.prototype.getMarshaller = function () {
                    return this.marshaller;
                };
                /**
                 * The marshaller.
                 *
                 * @param marshaller The marshaller.
                 */
                OFXV1Connection.prototype.setMarshaller = function (marshaller) {
                    this.marshaller = marshaller;
                };
                /**
                 * The unmarshaller.
                 *
                 * @return The unmarshaller.
                 */
                OFXV1Connection.prototype.getUnmarshaller = function () {
                    return this.unmarshaller;
                };
                /**
                 * The unmarshaller.
                 *
                 * @param unmarshaller The unmarshaller.
                 */
                OFXV1Connection.prototype.setUnmarshaller = function (unmarshaller) {
                    this.unmarshaller = unmarshaller;
                };
                /**
                 * Async mode
                 *
                 * @return {bool} Whether in async mode.
                 */
                OFXV1Connection.prototype.getAsync = function () {
                    return this.async;
                };
                /**
                 * Async mode
                 *
                 * @param {bool} async async mode.
                 */
                OFXV1Connection.prototype.setAsync = function (async) {
                    this.async = async;
                };
                return OFXV1Connection;
            })();
            net.OFXV1Connection = OFXV1Connection;
            LOG = LogFactory.getLog(OFXV1Connection);
        })(net = client.net || (client.net = {}));
    })(client = ofx4js.client || (ofx4js.client = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../v1/OFXV1Writer'/>
var ofx4js;
(function (ofx4js) {
    var io;
    (function (io) {
        var v2;
        (function (v2) {
            var OFXV1Writer = ofx4js.io.v1.OFXV1Writer;
            //import Map = java.util.Map;
            /**
             * OFX writer to XML, suitable for OFX version 2.0.
             *
             * @author Ryan Heaton
             */
            var OFXV2Writer = (function (_super) {
                __extends(OFXV2Writer, _super);
                function OFXV2Writer(out) {
                    _super.call(this, out);
                }
                //@Override
                OFXV2Writer.prototype.newWriter = function (out) {
                    return new io.StreamWriter(out, "UTF-8");
                };
                OFXV2Writer.prototype.writeHeaders = function (headers) {
                    if (this.headersWritten) {
                        throw new ofx4js.Error("Headers have already been written!");
                    }
                    //write out the XML PI
                    this.print("<?xml version=\"1.0\" encoding=\"utf-8\" ?>");
                    var security = headers["SECURITY"];
                    if (security == null) {
                        security = "NONE";
                    }
                    var olduid = headers["OLDFILEUID"];
                    if (olduid == null) {
                        olduid = "NONE";
                    }
                    // println(olduid);
                    var uid = headers["NEWFILEUID"];
                    if (uid == null) {
                        uid = "NONE";
                    }
                    this.print("<?OFX OFXHEADER=\"200\" VERSION=\"202\" SECURITY=\"" + security + "\" OLDFILEUID=\"" + olduid + "\" NEWFILEUID=\"" + uid + "\"?>");
                    this.headersWritten = true;
                };
                OFXV2Writer.prototype.writeElement = function (name, value) {
                    _super.prototype.writeElement.call(this, name, value);
                    this.print("</");
                    this.print(name);
                    this.print('>');
                };
                //@Override
                OFXV2Writer.prototype.isWriteAttributesOnNewLine = function () {
                    return false;
                };
                return OFXV2Writer;
            })(OFXV1Writer);
            v2.OFXV2Writer = OFXV2Writer;
        })(v2 = io.v2 || (io.v2 = {}));
    })(io = ofx4js.io || (ofx4js.io = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../io/OFXWriter'/>
///<reference path='../../io/v2/OFXV2Writer'/>
///<reference path='OFXV1Connection'/>
var ofx4js;
(function (ofx4js) {
    var client;
    (function (client) {
        var net;
        (function (net) {
            var OFXV2Writer = ofx4js.io.v2.OFXV2Writer;
            /**
             * @author Ryan Heaton
             */
            var OFXV2Connection = (function (_super) {
                __extends(OFXV2Connection, _super);
                function OFXV2Connection() {
                    _super.apply(this, arguments);
                }
                //@Override
                OFXV2Connection.prototype.newOFXWriter = function (out) {
                    return new OFXV2Writer(out);
                };
                return OFXV2Connection;
            })(net.OFXV1Connection);
            net.OFXV2Connection = OFXV2Connection;
        })(net = client.net || (client.net = {}));
    })(client = ofx4js.client || (ofx4js.client = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Copyright 2012 TheStash
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var common;
            (function (common) {
                /**
                 * Day of week used in "PROCDAYSOFF" lists.
                 *
                 * @author Scott Priddy
                 * @see "OFX Spec, Section 13.6.2"
                 */
                (function (ProcessorDayOff) {
                    ProcessorDayOff[ProcessorDayOff["MONDAY"] = 0] = "MONDAY";
                    ProcessorDayOff[ProcessorDayOff["TUESDAY"] = 1] = "TUESDAY";
                    ProcessorDayOff[ProcessorDayOff["WEDNESDAY"] = 2] = "WEDNESDAY";
                    ProcessorDayOff[ProcessorDayOff["THURSDAY"] = 3] = "THURSDAY";
                    ProcessorDayOff[ProcessorDayOff["FRIDAY"] = 4] = "FRIDAY";
                    ProcessorDayOff[ProcessorDayOff["SATURDAY"] = 5] = "SATURDAY";
                    ProcessorDayOff[ProcessorDayOff["SUNDAY"] = 6] = "SUNDAY";
                })(common.ProcessorDayOff || (common.ProcessorDayOff = {}));
                var ProcessorDayOff = common.ProcessorDayOff;
                function ProcessorDayOff_fromOfx(ofxVal) {
                    if ("MONDAY" === ofxVal) {
                        return 0 /* MONDAY */;
                    }
                    else if ("TUESDAY" === ofxVal) {
                        return 1 /* TUESDAY */;
                    }
                    else if ("WEDNESDAY" === ofxVal) {
                        return 2 /* WEDNESDAY */;
                    }
                    else if ("THURSDAY" === ofxVal) {
                        return 3 /* THURSDAY */;
                    }
                    else if ("FRIDAY" === ofxVal) {
                        return 4 /* FRIDAY */;
                    }
                    else if ("SATURDAY" === ofxVal) {
                        return 5 /* SATURDAY */;
                    }
                    else if ("SUNDAY" === ofxVal) {
                        return 6 /* SUNDAY */;
                    }
                    else {
                        return null;
                    }
                }
                common.ProcessorDayOff_fromOfx = ProcessorDayOff_fromOfx;
            })(common = data.common || (data.common = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../RequestMessage'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var common;
            (function (common) {
                var RequestMessage = ofx4js.domain.data.RequestMessage;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                /**
                 * @author Aparna Gawali
                 * aparna.gawali@sungard.com
                 */
                var T1099Request = (function (_super) {
                    __extends(T1099Request, _super);
                    function T1099Request() {
                        _super.apply(this, arguments);
                    }
                    return T1099Request;
                })(RequestMessage);
                common.T1099Request = T1099Request;
                Aggregate_add(T1099Request, "STMTRQ");
            })(common = data.common || (data.common = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../../../meta/Element_add'/>
///<reference path='../ResponseMessage'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var common;
            (function (common) {
                var ResponseMessage = ofx4js.domain.data.ResponseMessage;
                //import java.util.Locale;
                /**
                 * @author Aparna Gawali
                 * aparna.gawali@sungard.com
                 */
                var T1099Response = (function (_super) {
                    __extends(T1099Response, _super);
                    function T1099Response() {
                        _super.apply(this, arguments);
                    }
                    return T1099Response;
                })(ResponseMessage);
                common.T1099Response = T1099Response;
            })(common = data.common || (data.common = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../../../meta/Element_add'/>
///<reference path='../banking/BankAccountDetails'/>
///<reference path='../creditcard/CreditCardAccountDetails'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var common;
            (function (common) {
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                var BankAccountDetails = ofx4js.domain.data.banking.BankAccountDetails;
                var CreditCardAccountDetails = ofx4js.domain.data.creditcard.CreditCardAccountDetails;
                /**
                 * @author Ryan Heaton
                 */
                var TransferInfo = (function () {
                    function TransferInfo() {
                    }
                    /**
                     * The bank account to transfer from.
                     *
                     * @return The bank account to transfer from.
                     */
                    TransferInfo.prototype.getBankAccountFrom = function () {
                        return this.bankAccountFrom;
                    };
                    /**
                     * The bank account to transfer from.
                     *
                     * @param bankAccountFrom The bank account to transfer from.
                     */
                    TransferInfo.prototype.setBankAccountFrom = function (bankAccountFrom) {
                        this.creditCardAccountFrom = null;
                        this.bankAccountFrom = bankAccountFrom;
                    };
                    /**
                     * The account to transfer from.
                     *
                     * @param acct The account to transfer from.
                     */
                    TransferInfo.prototype.setAccountFrom = function (acct) {
                        if (acct instanceof BankAccountDetails) {
                            this.setBankAccountFrom(acct);
                        }
                        else {
                            this.setCreditCardAccountFrom(acct);
                        }
                    };
                    /**
                     * The credit card to transfer from.
                     *
                     * @return The credit card to transfer from.
                     */
                    TransferInfo.prototype.getCreditCardAccountFrom = function () {
                        return this.creditCardAccountFrom;
                    };
                    /**
                     * The credit card to transfer from.
                     *
                     * @param creditCardAccountFrom The credit card to transfer from.
                     */
                    TransferInfo.prototype.setCreditCardAccountFrom = function (creditCardAccountFrom) {
                        this.bankAccountFrom = null;
                        this.creditCardAccountFrom = creditCardAccountFrom;
                    };
                    /**
                     * The bank account to transfer to.
                     *
                     * @return The bank account to transfer to.
                     */
                    TransferInfo.prototype.getBankAccountTo = function () {
                        return this.bankAccountTo;
                    };
                    /**
                     * The bank account to transfer to.
                     *
                     * @param bankAccountTo The bank account to transfer to.
                     */
                    TransferInfo.prototype.setBankAccountTo = function (bankAccountTo) {
                        this.creditCardAccountTo = null;
                        this.bankAccountTo = bankAccountTo;
                    };
                    /**
                     * The bank or credit card account to transfer to.
                     *
                     * @param accountTo The account to transfer to.
                     */
                    TransferInfo.prototype.setAccountTo = function (accountTo) {
                        if (accountTo instanceof BankAccountDetails)
                            this.setBankAccountTo(accountTo);
                        else if (accountTo instanceof CreditCardAccountDetails)
                            this.setCreditCardAccountTo(accountTo);
                        else
                            throw new ofx4js.Error("invalid type");
                    };
                    /**
                     * The credit card account to transfer to.
                     *
                     * @return The credit card account to transfer to.
                     */
                    TransferInfo.prototype.getCreditCardAccountTo = function () {
                        return this.creditCardAccountTo;
                    };
                    /**
                     * The credit card account to transfer to.
                     *
                     * @param creditCardAccountTo The credit card account to transfer to.
                     */
                    TransferInfo.prototype.setCreditCardAccountTo = function (creditCardAccountTo) {
                        this.bankAccountTo = null;
                        this.creditCardAccountTo = creditCardAccountTo;
                    };
                    /**
                     * The amount.
                     *
                     * @return The amount.
                     */
                    TransferInfo.prototype.getAmount = function () {
                        return this.amount;
                    };
                    /**
                     * The amount.
                     *
                     * @param amount The amount.
                     */
                    TransferInfo.prototype.setAmount = function (amount) {
                        this.amount = amount;
                    };
                    /**
                     * The due date.
                     *
                     * @return The due date.
                     */
                    TransferInfo.prototype.getDue = function () {
                        return this.due;
                    };
                    /**
                     * The due date.
                     *
                     * @param due The due date.
                     */
                    TransferInfo.prototype.setDue = function (due) {
                        this.due = due;
                    };
                    return TransferInfo;
                })();
                common.TransferInfo = TransferInfo;
                Aggregate_add(TransferInfo, "XFERINFO");
                ChildAggregate_add(TransferInfo, { name: "BANKACCTFROM", order: 0, type: BankAccountDetails, read: TransferInfo.prototype.getBankAccountFrom, write: TransferInfo.prototype.setBankAccountFrom });
                ChildAggregate_add(TransferInfo, { name: "CCACCTFROM", order: 10, type: CreditCardAccountDetails, read: TransferInfo.prototype.getCreditCardAccountFrom, write: TransferInfo.prototype.setCreditCardAccountFrom });
                ChildAggregate_add(TransferInfo, { name: "BANKACCTTO", order: 20, type: BankAccountDetails, read: TransferInfo.prototype.getBankAccountTo, write: TransferInfo.prototype.setBankAccountTo });
                ChildAggregate_add(TransferInfo, { name: "CCACCTTO", order: 30, type: CreditCardAccountDetails, read: TransferInfo.prototype.getCreditCardAccountTo, write: TransferInfo.prototype.setCreditCardAccountTo });
                Element_add(TransferInfo, { name: "TRNAMT", required: true, order: 40, type: Number, read: TransferInfo.prototype.getAmount, write: TransferInfo.prototype.setAmount });
                Element_add(TransferInfo, { name: "DTDUE", order: 50, type: Date, read: TransferInfo.prototype.getDue, write: TransferInfo.prototype.setDue });
            })(common = data.common || (data.common = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var common;
            (function (common) {
                /**
                 * @author Ryan Heaton
                 */
                (function (TransferStatusEvent) {
                    TransferStatusEvent[TransferStatusEvent["WILLPROCESSON"] = 0] = "WILLPROCESSON";
                    TransferStatusEvent[TransferStatusEvent["POSTEDON"] = 1] = "POSTEDON";
                    TransferStatusEvent[TransferStatusEvent["NOFUNDSON"] = 2] = "NOFUNDSON";
                    TransferStatusEvent[TransferStatusEvent["CANCELEDON"] = 3] = "CANCELEDON";
                    TransferStatusEvent[TransferStatusEvent["FAILEDON"] = 4] = "FAILEDON";
                })(common.TransferStatusEvent || (common.TransferStatusEvent = {}));
                var TransferStatusEvent = common.TransferStatusEvent;
            })(common = data.common || (data.common = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/Element_add'/>
///<reference path='TransferStatusEvent'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var common;
            (function (common) {
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                /**
                 * @author Ryan Heaton
                 */
                var TransferStatus = (function () {
                    function TransferStatus() {
                    }
                    /**
                     * The event.
                     *
                     * @return The event.
                     */
                    TransferStatus.prototype.getEvent = function () {
                        return this.event;
                    };
                    /**
                     * The event.
                     *
                     * @param event The event.
                     */
                    TransferStatus.prototype.setEvent = function (event) {
                        this.event = event;
                    };
                    /**
                     * The date of the event.
                     *
                     * @return The date of the event.
                     */
                    TransferStatus.prototype.getDate = function () {
                        return this.date;
                    };
                    /**
                     * The date of the event.
                     *
                     * @param date The date of the event.
                     */
                    TransferStatus.prototype.setDate = function (date) {
                        this.date = date;
                    };
                    return TransferStatus;
                })();
                common.TransferStatus = TransferStatus;
                Aggregate_add(TransferStatus, "XFERPRCSTS");
                Element_add(TransferStatus, { name: "XFERPRCCODE", required: true, order: 0, type: common.TransferStatusEvent, read: TransferStatus.prototype.getEvent, write: TransferStatus.prototype.setEvent });
                Element_add(TransferStatus, { name: "DTXFERPRC", required: true, order: 10, type: Date, read: TransferStatus.prototype.getDate, write: TransferStatus.prototype.setDate });
            })(common = data.common || (data.common = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='BasePosition'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var positions;
                (function (positions) {
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    /**
                     * Represents a debt position.
                     * @see "Section 13.9.2.6.1, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var DebtPosition = (function (_super) {
                        __extends(DebtPosition, _super);
                        function DebtPosition() {
                            _super.apply(this, arguments);
                        }
                        return DebtPosition;
                    })(positions.BasePosition);
                    positions.DebtPosition = DebtPosition;
                    Aggregate_add(DebtPosition, "POSDEBT");
                })(positions = investment.positions || (investment.positions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
///<reference path='BasePosition'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var positions;
                (function (positions) {
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * Represents a mutual fund position.
                     * @see "Section 13.9.2.6.1, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var MutualFundPosition = (function (_super) {
                        __extends(MutualFundPosition, _super);
                        function MutualFundPosition() {
                            _super.apply(this, arguments);
                        }
                        /**
                         * Gets the number of units in the financial insititution's street name.
                         *
                         * @return the number of units in the financial insititution's street name.
                         */
                        MutualFundPosition.prototype.getUnitsStreet = function () {
                            return this.unitsStreet;
                        };
                        /**
                         * Sets the number of units in the financial insititution's street name.
                         *
                         * @param unitsStreet the number of units in the financial insititution's street name.
                         */
                        MutualFundPosition.prototype.setUnitsStreet = function (unitsStreet) {
                            this.unitsStreet = unitsStreet;
                        };
                        /**
                         * Gets the number of units in the user's name.
                         *
                         * @return the number of units in the user's name.
                         */
                        MutualFundPosition.prototype.getUnitsUser = function () {
                            return this.unitsUser;
                        };
                        /**
                         * Sets the number of units in the user's name.
                         *
                         * @param unitsUser the number of units in the user's name.
                         */
                        MutualFundPosition.prototype.setUnitsUser = function (unitsUser) {
                            this.unitsUser = unitsUser;
                        };
                        /**
                         * Gets whether dividends are automatically reinvested.
                         *
                         * @return whether dividends are automatically reinvested
                         */
                        MutualFundPosition.prototype.getReinvestDividends = function () {
                            return this.reinvestDividends;
                        };
                        /**
                         * Sets whether dividends are automatically reinvested.
                         *
                         * @param reinvestDividends whether dividends are automatically reinvested
                         */
                        MutualFundPosition.prototype.setReinvestDividends = function (reinvestDividends) {
                            this.reinvestDividends = reinvestDividends;
                        };
                        /**
                         * Gets whether capital gains are automatically reinvested.
                         *
                         * @return whether capital gains are automatically reinvested
                         */
                        MutualFundPosition.prototype.getReinvestCapitalGains = function () {
                            return this.reinvestCapitalGains;
                        };
                        /**
                         * Sets whether capital gains are automatically reinvested.
                         *
                         * @param reinvestCapitalGains whether capital gains are automatically reinvested
                         */
                        MutualFundPosition.prototype.setReinvestCapitalGains = function (reinvestCapitalGains) {
                            this.reinvestCapitalGains = reinvestCapitalGains;
                        };
                        return MutualFundPosition;
                    })(positions.BasePosition);
                    positions.MutualFundPosition = MutualFundPosition;
                    Aggregate_add(MutualFundPosition, "POSMF");
                    Element_add(MutualFundPosition, { name: "UNITSSTREET", order: 20, type: Number, read: MutualFundPosition.prototype.getUnitsStreet, write: MutualFundPosition.prototype.setUnitsStreet });
                    Element_add(MutualFundPosition, { name: "UNITSUSER", order: 30, type: Number, read: MutualFundPosition.prototype.getUnitsUser, write: MutualFundPosition.prototype.setUnitsUser });
                    Element_add(MutualFundPosition, { name: "REINVDIV", order: 50, type: Boolean, read: MutualFundPosition.prototype.getReinvestDividends, write: MutualFundPosition.prototype.setReinvestDividends });
                    Element_add(MutualFundPosition, { name: "REINVCG", order: 60, type: Boolean, read: MutualFundPosition.prototype.getReinvestCapitalGains, write: MutualFundPosition.prototype.setReinvestCapitalGains });
                })(positions = investment.positions || (investment.positions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var positions;
                (function (positions) {
                    /**
                     * How a short option is secured.
                     * @see "Section 13.9.2.4.4, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    (function (ShortOptionSecurity) {
                        ShortOptionSecurity[ShortOptionSecurity["NAKED"] = 0] = "NAKED";
                        ShortOptionSecurity[ShortOptionSecurity["COVERED"] = 1] = "COVERED";
                    })(positions.ShortOptionSecurity || (positions.ShortOptionSecurity = {}));
                    var ShortOptionSecurity = positions.ShortOptionSecurity;
                    function ShortOptionSecurity_fromOfx(ofxVal) {
                        if ("NAKED" === ofxVal) {
                            return 0 /* NAKED */;
                        }
                        else if ("COVERED" === ofxVal) {
                            return 1 /* COVERED */;
                        }
                        else {
                            return null;
                        }
                    }
                    positions.ShortOptionSecurity_fromOfx = ShortOptionSecurity_fromOfx;
                })(positions = investment.positions || (investment.positions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
///<reference path='BasePosition'/>
///<reference path='ShortOptionSecurity'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var positions;
                (function (positions) {
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * Represents an options position.
                     * @see "Section 13.9.2.6.1, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var OptionsPosition = (function (_super) {
                        __extends(OptionsPosition, _super);
                        function OptionsPosition() {
                            _super.apply(this, arguments);
                        }
                        /**
                         * Gets how the options position is secured (for short positions).
                         *
                         * @return how the options position is secured
                         */
                        OptionsPosition.prototype.getSecured = function () {
                            return this.secured;
                        };
                        /**
                         * Sets how the options position is secured (for short positions).
                         *
                         * @param secured how the options position is secured
                         */
                        OptionsPosition.prototype.setSecured = function (secured) {
                            this.secured = secured;
                        };
                        /**
                         * Gets how the options position is secured as a well-known type.
                         *
                         * @return how the option position is secured or null if it's not a well-known type
                         */
                        OptionsPosition.prototype.getSecuredEnum = function () {
                            return positions.ShortOptionSecurity_fromOfx(this.getSecured());
                        };
                        return OptionsPosition;
                    })(positions.BasePosition);
                    positions.OptionsPosition = OptionsPosition;
                    Aggregate_add(OptionsPosition, "POSOPT");
                    Element_add(OptionsPosition, { name: "SECURED", order: 20, type: String, read: OptionsPosition.prototype.getSecured, write: OptionsPosition.prototype.setSecured });
                })(positions = investment.positions || (investment.positions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='BasePosition'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var positions;
                (function (positions) {
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    /**
                     * Represents other types of positions.
                     * @see "Section 13.9.2.6.1, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var OtherPosition = (function (_super) {
                        __extends(OtherPosition, _super);
                        function OtherPosition() {
                            _super.apply(this, arguments);
                        }
                        return OtherPosition;
                    })(positions.BasePosition);
                    positions.OtherPosition = OtherPosition;
                    Aggregate_add(OtherPosition, "POSOTHER");
                })(positions = investment.positions || (investment.positions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
///<reference path='BasePosition'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var positions;
                (function (positions) {
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * Represents a stock position.
                     * @see "Section 13.9.2.6.1, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var StockPosition = (function (_super) {
                        __extends(StockPosition, _super);
                        function StockPosition() {
                            _super.apply(this, arguments);
                        }
                        /**
                         * Gets the number of units in the financial insititution's street name.
                         *
                         * @return the number of units in the financial insititution's street name.
                         */
                        StockPosition.prototype.getUnitsStreet = function () {
                            return this.unitsStreet;
                        };
                        /**
                         * Sets the number of units in the financial insititution's street name.
                         *
                         * @param unitsStreet the number of units in the financial insititution's street name.
                         */
                        StockPosition.prototype.setUnitsStreet = function (unitsStreet) {
                            this.unitsStreet = unitsStreet;
                        };
                        /**
                         * Gets the number of units in the user's name.
                         *
                         * @return the number of units in the user's name.
                         */
                        StockPosition.prototype.getUnitsUser = function () {
                            return this.unitsUser;
                        };
                        /**
                         * Sets the number of units in the user's name.
                         *
                         * @param unitsUser the number of units in the user's name.
                         */
                        StockPosition.prototype.setUnitsUser = function (unitsUser) {
                            this.unitsUser = unitsUser;
                        };
                        /**
                         * Gets whether dividends are automatically reinvested.
                         *
                         * @return whether dividends are automatically reinvested
                         */
                        StockPosition.prototype.getReinvestDividends = function () {
                            return this.reinvestDividends;
                        };
                        /**
                         * Sets whether dividends are automatically reinvested.
                         *
                         * @param reinvestDividends whether dividends are automatically reinvested
                         */
                        StockPosition.prototype.setReinvestDividends = function (reinvestDividends) {
                            this.reinvestDividends = reinvestDividends;
                        };
                        return StockPosition;
                    })(positions.BasePosition);
                    positions.StockPosition = StockPosition;
                    Aggregate_add(StockPosition, "POSSTOCK");
                    Element_add(StockPosition, { name: "UNITSSTREET", order: 20, type: Number, read: StockPosition.prototype.getUnitsStreet, write: StockPosition.prototype.setUnitsStreet });
                    Element_add(StockPosition, { name: "UNITSUSER", order: 30, type: Number, read: StockPosition.prototype.getUnitsUser, write: StockPosition.prototype.setUnitsUser });
                    Element_add(StockPosition, { name: "REINVDIV", order: 40, type: Boolean, read: StockPosition.prototype.getReinvestDividends, write: StockPosition.prototype.setReinvestDividends });
                })(positions = investment.positions || (investment.positions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../seclist/SecurityId'/>
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var transactions;
                (function (transactions) {
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * Original currency aggregate ("ORIGCURRENCY"). For investment transactions in other currencies,
                     * the financial institution can report the transaction as converted into the default currency
                     * and then include this child aggregate to report what the original currency was and what the
                     * rate of conversion was.
                     * @see "Section 5.2, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var OriginalCurrency = (function () {
                        function OriginalCurrency() {
                        }
                        /**
                         * Gets the rate of currency conversion. This is the ratio of "CURDEF" (the default currency in
                         * the transaction response) to "CURSYM" (the original currency code below).
                         *
                         * @return the currency rate
                         */
                        OriginalCurrency.prototype.getCurrencyRate = function () {
                            return this.currencyRate;
                        };
                        /**
                         * Sets the rate of currency conversion. This is the ratio of "CURDEF" (the default currency in
                         * the transaction response) to "CURSYM" (the original currency code below).
                         *
                         * @param currencyRate the currency rate
                         */
                        OriginalCurrency.prototype.setCurrencyRate = function (currencyRate) {
                            this.currencyRate = currencyRate;
                        };
                        /**
                         * Gets the ISO-4217 3-letter currency identifier of the original currency.
                         * @see java.util.Currency#getCurrencyCode()
                         *
                         * @return the currency code
                         */
                        OriginalCurrency.prototype.getCurrencyCode = function () {
                            return this.currencyCode;
                        };
                        /**
                         * Sets the ISO-4217 3-letter currency identifier of the original currency.
                         * @see java.util.Currency#getCurrencyCode()
                         *
                         * @param currencyCode the currency code
                         */
                        OriginalCurrency.prototype.setCurrencyCode = function (currencyCode) {
                            this.currencyCode = currencyCode;
                        };
                        return OriginalCurrency;
                    })();
                    transactions.OriginalCurrency = OriginalCurrency;
                    Aggregate_add(OriginalCurrency, "ORIGCURRENCY");
                    Element_add(OriginalCurrency, { name: "CURRATE", required: true, order: 10, type: Number, read: OriginalCurrency.prototype.getCurrencyRate, write: OriginalCurrency.prototype.setCurrencyRate });
                    Element_add(OriginalCurrency, { name: "CURSYM", required: true, order: 20, type: String, read: OriginalCurrency.prototype.getCurrencyCode, write: OriginalCurrency.prototype.setCurrencyCode });
                })(transactions = investment.transactions || (investment.transactions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../investment/accounts/SubAccountType'/>
///<reference path='BaseBuyInvestmentTransaction'/>
///<reference path='OriginalCurrency'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var transactions;
                (function (transactions) {
                    var SubAccountType_fromOfx = ofx4js.domain.data.investment.accounts.SubAccountType_fromOfx;
                    var SecurityId = ofx4js.domain.data.seclist.SecurityId;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * Buy investment transaction aggregate ("INVBUY").
                     * @see "Section 13.9.2.4.3, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var BuyInvestmentTransaction = (function () {
                        function BuyInvestmentTransaction() {
                        }
                        /**
                         * Gets the investment transaction child aggregate.
                         *
                         * @return the investment transaction child aggregate
                         */
                        BuyInvestmentTransaction.prototype.getInvestmentTransaction = function () {
                            return this.investmentTransaction;
                        };
                        /**
                         * Sets the investment transaction child aggregate.
                         *
                         * @param investmentTransaction the investment transaction child aggregate
                         */
                        BuyInvestmentTransaction.prototype.setInvestmentTransaction = function (investmentTransaction) {
                            this.investmentTransaction = investmentTransaction;
                        };
                        /**
                         * Gets the id of the security that was bought. This is a required field according to the OFX
                         * spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the security id of the security that was bought
                         */
                        BuyInvestmentTransaction.prototype.getSecurityId = function () {
                            return this.securityId;
                        };
                        /**
                         * Sets the id of the security that was bought. This is a required field according to the OFX
                         * spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param securityId the security id of the security that was bought
                         */
                        BuyInvestmentTransaction.prototype.setSecurityId = function (securityId) {
                            this.securityId = securityId;
                        };
                        /**
                         * Gets the number of units of the security that was bought. For security-based actions other
                         * than stock splits, this is the quantity bought. For stocks, mutual funds, and others, this
                         * is the number of shares. For bonds, this is the face value. For options, this is the number of
                         * contacts. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the number of units purchased.
                         */
                        BuyInvestmentTransaction.prototype.getUnits = function () {
                            return this.units;
                        };
                        /**
                         * Sets the number of units of the security that was bought. For security-based actions other
                         * than stock splits, this is the quantity bought. For stocks, mutual funds, and others, this
                         * is the number of shares. For bonds, this is the face value. For options, this is the number of
                         * contacts. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param units the number of units purchased.
                         */
                        BuyInvestmentTransaction.prototype.setUnits = function (units) {
                            this.units = units;
                        };
                        /**
                         * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
                         * share price. For bonds, this is the percentage of par. For options, this is the per share (not
                         * per contact) price. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the per unit price
                         */
                        BuyInvestmentTransaction.prototype.getUnitPrice = function () {
                            return this.unitPrice;
                        };
                        /**
                         * Sets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
                         * share price. For bonds, this is the percentage of par. For options, this is the per share (not
                         * per contact) price. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param unitPrice the per unit price
                         */
                        BuyInvestmentTransaction.prototype.setUnitPrice = function (unitPrice) {
                            this.unitPrice = unitPrice;
                        };
                        /**
                         * Gets the portion of the unit price that is attributed to the dealer markup. This is an
                         * optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the per unit markeup price
                         */
                        BuyInvestmentTransaction.prototype.getMarkup = function () {
                            return this.markup;
                        };
                        /**
                         * Sets the portion of the unit price that is attributed to the dealer markup. This is an
                         * optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param markup the per unit markeup price
                         */
                        BuyInvestmentTransaction.prototype.setMarkup = function (markup) {
                            this.markup = markup;
                        };
                        /**
                         * Gets the transaction commission for the purchase. This is an optional field according to the
                         * OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the transaction commision
                         */
                        BuyInvestmentTransaction.prototype.getCommission = function () {
                            return this.commission;
                        };
                        /**
                         * Sets the transaction commission for the purchase. This is an optional field according to the
                         * OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param commission the transaction commision
                         */
                        BuyInvestmentTransaction.prototype.setCommission = function (commission) {
                            this.commission = commission;
                        };
                        /**
                         * Gets the taxes for the purchase. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the transaction taxes
                         */
                        BuyInvestmentTransaction.prototype.getTaxes = function () {
                            return this.taxes;
                        };
                        /**
                         * Sets the taxes for the purchase. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param taxes the transaction taxes
                         */
                        BuyInvestmentTransaction.prototype.setTaxes = function (taxes) {
                            this.taxes = taxes;
                        };
                        /**
                         * Gets the fees for the purchase. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the transaction fees
                         */
                        BuyInvestmentTransaction.prototype.getFees = function () {
                            return this.fees;
                        };
                        /**
                         * Sets the fees for the purchase. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param fees the transaction fees
                         */
                        BuyInvestmentTransaction.prototype.setFees = function (fees) {
                            this.fees = fees;
                        };
                        /**
                         * Gets the load for the purchase. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the load
                         */
                        BuyInvestmentTransaction.prototype.getLoad = function () {
                            return this.load;
                        };
                        /**
                         * Sets the load for the purchase. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param load the load
                         */
                        BuyInvestmentTransaction.prototype.setLoad = function (load) {
                            this.load = load;
                        };
                        /**
                         * Gets the total for the purchase. Should be equal to
                         * (units * (unitPrice + markup)) + (commision + fees + taxes) according to the OFX
                         * spec. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the total
                         */
                        BuyInvestmentTransaction.prototype.getTotal = function () {
                            return this.total;
                        };
                        /**
                         * Sets the total for the purchase. Should be equal to
                         * (units * (unitPrice + markup)) + (commision + fees + taxes) according to the OFX
                         * spec. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param total the total
                         */
                        BuyInvestmentTransaction.prototype.setTotal = function (total) {
                            this.total = total;
                        };
                        /**
                         * Gets the currency code for the transaction. Only one of currency code or original currency
                         * info should be set according to the OFX spec. If neither are set, means the default currency.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the currency code for the transaction.
                         */
                        BuyInvestmentTransaction.prototype.getCurrencyCode = function () {
                            return this.currencyCode;
                        };
                        /**
                         * Sets the currency code for the transaction. Only one of currency code or original currency
                         * info may be set according to the OFX spec. If neither are set, means the default currency.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param currencyCode the currency code for the transaction.
                         */
                        BuyInvestmentTransaction.prototype.setCurrencyCode = function (currencyCode) {
                            this.currencyCode = currencyCode;
                            this.originalCurrencyInfo = null;
                        };
                        /**
                         * Gets the original currency info for the transaction.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the original currency info for the transaction
                         */
                        BuyInvestmentTransaction.prototype.getOriginalCurrencyInfo = function () {
                            return this.originalCurrencyInfo;
                        };
                        /**
                         * Sets the original currency info for the transaction
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param originalCurrencyInfo the original currency info for the transaction
                         */
                        BuyInvestmentTransaction.prototype.setOriginalCurrencyInfo = function (originalCurrencyInfo) {
                            this.originalCurrencyInfo = originalCurrencyInfo;
                            this.currencyCode = null;
                        };
                        /**
                          * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
                          * @see "Section 13.9.2.4.3, OFX Spec"
                          *
                          * @return the sub account type
                          */
                        BuyInvestmentTransaction.prototype.getSubAccountSecurity = function () {
                            return this.subAccountSecurity;
                        };
                        /**
                          * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
                          * @see "Section 13.9.2.4.3, OFX Spec"
                          *
                          * @param subAccountSecurity the sub account type
                          */
                        BuyInvestmentTransaction.prototype.setSubAccountSecurity = function (subAccountSecurity) {
                            this.subAccountSecurity = subAccountSecurity;
                        };
                        /**
                         * Gets the result of getSubAccountSecurity as one of the well-known types.
                         *
                         * @return the type of null if it wasn't one of the well known types.
                         */
                        BuyInvestmentTransaction.prototype.getSubAccountSecurityEnum = function () {
                            return SubAccountType_fromOfx(this.getSubAccountSecurity());
                        };
                        /**
                         * Gets the sub account type that the money came from. (e.g. CASH, MARGIN, SHORT, OTHER).
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the sub account fund
                         */
                        BuyInvestmentTransaction.prototype.getSubAccountFund = function () {
                            return this.subAccountFund;
                        };
                        /**
                         * Sets the sub account type that the money came from. (e.g. CASH, MARGIN, SHORT, OTHER).
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param subAcctFund the sub account fund
                         */
                        BuyInvestmentTransaction.prototype.setSubAccountFund = function (subAcctFund) {
                            this.subAccountFund = subAcctFund;
                        };
                        /**
                         * Gets the result of getSubAccountFund as one of the well-known types.
                         *
                         * @return the type or null if it wasn't one of the well known types.
                         */
                        BuyInvestmentTransaction.prototype.getSubAccountFundEnum = function () {
                            return SubAccountType_fromOfx(this.getSubAccountFund());
                        };
                        return BuyInvestmentTransaction;
                    })();
                    transactions.BuyInvestmentTransaction = BuyInvestmentTransaction;
                    Aggregate_add(BuyInvestmentTransaction, "INVBUY");
                    ChildAggregate_add(BuyInvestmentTransaction, { order: 10, type: transactions.InvestmentTransaction, read: BuyInvestmentTransaction.prototype.getInvestmentTransaction, write: BuyInvestmentTransaction.prototype.setInvestmentTransaction });
                    ChildAggregate_add(BuyInvestmentTransaction, { required: true, order: 20, type: SecurityId, read: BuyInvestmentTransaction.prototype.getSecurityId, write: BuyInvestmentTransaction.prototype.setSecurityId });
                    Element_add(BuyInvestmentTransaction, { name: "UNITS", required: true, order: 30, type: Number, read: BuyInvestmentTransaction.prototype.getUnits, write: BuyInvestmentTransaction.prototype.setUnits });
                    Element_add(BuyInvestmentTransaction, { name: "UNITPRICE", required: true, order: 40, type: Number, read: BuyInvestmentTransaction.prototype.getUnitPrice, write: BuyInvestmentTransaction.prototype.setUnitPrice });
                    Element_add(BuyInvestmentTransaction, { name: "MARKUP", order: 50, type: Number, read: BuyInvestmentTransaction.prototype.getMarkup, write: BuyInvestmentTransaction.prototype.setMarkup });
                    Element_add(BuyInvestmentTransaction, { name: "COMMISSION", order: 60, type: Number, read: BuyInvestmentTransaction.prototype.getCommission, write: BuyInvestmentTransaction.prototype.setCommission });
                    Element_add(BuyInvestmentTransaction, { name: "TAXES", order: 70, type: Number, read: BuyInvestmentTransaction.prototype.getTaxes, write: BuyInvestmentTransaction.prototype.setTaxes });
                    Element_add(BuyInvestmentTransaction, { name: "FEES", order: 80, type: Number, read: BuyInvestmentTransaction.prototype.getFees, write: BuyInvestmentTransaction.prototype.setFees });
                    Element_add(BuyInvestmentTransaction, { name: "LOAD", order: 90, type: Number, read: BuyInvestmentTransaction.prototype.getLoad, write: BuyInvestmentTransaction.prototype.setLoad });
                    Element_add(BuyInvestmentTransaction, { name: "TOTAL", required: true, order: 100, type: Number, read: BuyInvestmentTransaction.prototype.getTotal, write: BuyInvestmentTransaction.prototype.setTotal });
                    Element_add(BuyInvestmentTransaction, { name: "CURRENCY", order: 110, type: String, read: BuyInvestmentTransaction.prototype.getCurrencyCode, write: BuyInvestmentTransaction.prototype.setCurrencyCode });
                    ChildAggregate_add(BuyInvestmentTransaction, { order: 120, type: transactions.OriginalCurrency, read: BuyInvestmentTransaction.prototype.getOriginalCurrencyInfo, write: BuyInvestmentTransaction.prototype.setOriginalCurrencyInfo });
                    Element_add(BuyInvestmentTransaction, { name: "SUBACCTSEC", order: 130, type: String, read: BuyInvestmentTransaction.prototype.getSubAccountSecurity, write: BuyInvestmentTransaction.prototype.setSubAccountSecurity });
                    Element_add(BuyInvestmentTransaction, { name: "SUBACCTFUND", order: 140, type: String, read: BuyInvestmentTransaction.prototype.getSubAccountFund, write: BuyInvestmentTransaction.prototype.setSubAccountFund });
                })(transactions = investment.transactions || (investment.transactions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../investment/accounts/SubAccountType'/>
///<reference path='../../seclist/SecurityId'/>
///<reference path='BaseInvestmentTransaction'/>
///<reference path='TransactionWithSecurity'/>
///<reference path='BuyInvestmentTransaction'/>
///<reference path='TransactionType'/>
///<reference path='InvestmentTransaction'/>
///<reference path='OriginalCurrency'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var transactions;
                (function (transactions) {
                    var SubAccountType_fromOfx = ofx4js.domain.data.investment.accounts.SubAccountType_fromOfx;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    /**
                     * Base class for all investment transactions for buying securities.
                     * <br>
                     * This class exposes a read-only view of the flattened aggregates that are
                     * common to all buy investment transactions as a convenience to application
                     * developers who may not find the ofx aggregation model intuitive.
                     *
                     * @author Jon Perlow
                     */
                    var BaseBuyInvestmentTransaction = (function (_super) {
                        __extends(BaseBuyInvestmentTransaction, _super);
                        function BaseBuyInvestmentTransaction(transactionType) {
                            _super.call(this, transactionType);
                        }
                        /**
                         * Gets the buy investment transaction child aggregate.
                         *
                         * @return the buy investment transaction child aggregate
                         */
                        BaseBuyInvestmentTransaction.prototype.getBuyInvestment = function () {
                            return this.buyInvestment;
                        };
                        /**
                         * Sets the buy investment transaction child aggregate.
                         *
                         * @param buyInvestment the buy investment transaction child aggregate
                         */
                        BaseBuyInvestmentTransaction.prototype.setBuyInvestment = function (buyInvestment) {
                            this.buyInvestment = buyInvestment;
                        };
                        /**
                         * Gets the investment transaction aggregate.
                         *
                         * @return the investment transaction aggregate
                         */
                        // @Overridden
                        BaseBuyInvestmentTransaction.prototype.getInvestmentTransaction = function () {
                            return this.getBuyInvestment().getInvestmentTransaction();
                        };
                        /**
                         * Gets the id of the security that was bought. This is a required field according to the OFX
                         * spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the security id of the security that was bought
                         */
                        BaseBuyInvestmentTransaction.prototype.getSecurityId = function () {
                            return this.getBuyInvestment().getSecurityId();
                        };
                        /**
                         * Gets the number of units of the security that was bought. For security-based actions other
                         * than stock splits, this is the quantity bought. For stocks, mutual funds, and others, this
                         * is the number of shares. For bonds, this is the face value. For options, this is the number of
                         * contacts. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the number of units purchased.
                         */
                        BaseBuyInvestmentTransaction.prototype.getUnits = function () {
                            return this.getBuyInvestment().getUnits();
                        };
                        /**
                         * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
                         * share price. For bonds, this is the percentage of par. For options, this is the per share (not
                         * per contact) price. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the per unit price
                         */
                        BaseBuyInvestmentTransaction.prototype.getUnitPrice = function () {
                            return this.getBuyInvestment().getUnitPrice();
                        };
                        /**
                         * Gets the portion of the unit price that is attributed to the dealer markup. This is an
                         * optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the per unit markeup price
                         */
                        BaseBuyInvestmentTransaction.prototype.getMarkup = function () {
                            return this.getBuyInvestment().getMarkup();
                        };
                        /**
                         * Gets the transaction commission for the purchase. This is an optional field according to the
                         * OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the transaction commision
                         */
                        BaseBuyInvestmentTransaction.prototype.getCommission = function () {
                            return this.getBuyInvestment().getCommission();
                        };
                        /**
                         * Gets the taxes for the purchase. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the transaction taxes
                         */
                        BaseBuyInvestmentTransaction.prototype.getTaxes = function () {
                            return this.getBuyInvestment().getTaxes();
                        };
                        /**
                         * Gets the fees for the purchase. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the transaction fees
                         */
                        BaseBuyInvestmentTransaction.prototype.getFees = function () {
                            return this.getBuyInvestment().getFees();
                        };
                        /**
                         * Gets the load for the purchase. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the load
                         */
                        BaseBuyInvestmentTransaction.prototype.getLoad = function () {
                            return this.getBuyInvestment().getLoad();
                        };
                        /**
                         * Gets the total for the purchase. Should be equal to
                         * (units * (unitPrice + markup)) + (commision + fees + load + taxes) according to the OFX
                         * spec. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the total
                         */
                        BaseBuyInvestmentTransaction.prototype.getTotal = function () {
                            return this.getBuyInvestment().getTotal();
                        };
                        /**
                         * Gets the currency code for the transaction. Only one of currency code or original currency
                         * info should be set according to the OFX spec. If neither are set, means the default currency.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the currency code for the transaction
                         */
                        BaseBuyInvestmentTransaction.prototype.getCurrencyCode = function () {
                            return this.getBuyInvestment().getCurrencyCode();
                        };
                        /**
                         * Gets the original currency info for the transaction.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the original currency info for the transaction
                         */
                        BaseBuyInvestmentTransaction.prototype.getOriginalCurrencyInfo = function () {
                            return this.getBuyInvestment().getOriginalCurrencyInfo();
                        };
                        /**
                         * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the sub account type
                         */
                        BaseBuyInvestmentTransaction.prototype.getSubAccountSecurity = function () {
                            return this.getBuyInvestment().getSubAccountSecurity();
                        };
                        /**
                         * Gets the result of getSubAccountSecurity as one of the well-known types.
                         *
                         * @return the type of null if it wasn't one of the well known types
                         */
                        BaseBuyInvestmentTransaction.prototype.getSubAccountSecurityEnum = function () {
                            return SubAccountType_fromOfx(this.getSubAccountSecurity());
                        };
                        /**
                         * Gets the sub account type that the money came from. (e.g. CASH, MARGIN, SHORT, OTHER).
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the sub account fund
                         */
                        BaseBuyInvestmentTransaction.prototype.getSubAccountFund = function () {
                            return this.getBuyInvestment().getSubAccountFund();
                        };
                        /**
                         * Gets the result of getSubAccountFund as one of the well-known types.
                         *
                         * @return the type or null if it wasn't one of the well known types.
                         */
                        BaseBuyInvestmentTransaction.prototype.getSubAccountFundEnum = function () {
                            return SubAccountType_fromOfx(this.getSubAccountFund());
                        };
                        return BaseBuyInvestmentTransaction;
                    })(transactions.BaseInvestmentTransaction);
                    transactions.BaseBuyInvestmentTransaction = BaseBuyInvestmentTransaction;
                    ChildAggregate_add(BaseBuyInvestmentTransaction, { order: 10, type: transactions.BuyInvestmentTransaction, read: BaseBuyInvestmentTransaction.prototype.getBuyInvestment, write: BaseBuyInvestmentTransaction.prototype.setBuyInvestment });
                })(transactions = investment.transactions || (investment.transactions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
///<reference path='../../investment/accounts/SubAccountType'/>
///<reference path='../../investment/positions/Inv401KSource'/>
///<reference path='../../seclist/SecurityId'/>
///<reference path='InvestmentTransaction'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var transactions;
                (function (transactions) {
                    var SubAccountType_fromOfx = ofx4js.domain.data.investment.accounts.SubAccountType_fromOfx;
                    var Inv401KSource_fromOfx = ofx4js.domain.data.investment.positions.Inv401KSource_fromOfx;
                    var SecurityId = ofx4js.domain.data.seclist.SecurityId;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * Sell investment transaction aggregate ("INVSELL").
                     * @see "Section 13.9.2.4.3, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var SellInvestmentTransaction = (function () {
                        function SellInvestmentTransaction() {
                        }
                        /**
                         * Gets the investment transaction child aggregate.
                         *
                         * @return the investment transaction child aggregate
                         */
                        SellInvestmentTransaction.prototype.getInvestmentTransaction = function () {
                            return this.investmentTransaction;
                        };
                        /**
                         * Sets the investment transaction child aggregate.
                         *
                         * @param investmentTransaction the investment transaction child aggregate
                         */
                        SellInvestmentTransaction.prototype.setInvestmentTransaction = function (investmentTransaction) {
                            this.investmentTransaction = investmentTransaction;
                        };
                        /**
                         * Gets the id of the security that was sold. This is a required field according to the OFX
                         * spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the security id of the security that was sold
                         */
                        SellInvestmentTransaction.prototype.getSecurityId = function () {
                            return this.securityId;
                        };
                        /**
                         * Sets the id of the security that was sold. This is a required field according to the OFX
                         * spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param securityId the security id of the security that was sold
                         */
                        SellInvestmentTransaction.prototype.setSecurityId = function (securityId) {
                            this.securityId = securityId;
                        };
                        /**
                         * Gets the number of units of the security that was sold. For security-based actions other
                         * than stock splits, this is the quantity sold. For stocks, mutual funds, and others, this
                         * is the number of shares. For bonds, this is the face value. For options, this is the number of
                         * contacts. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the number of units sold
                         */
                        SellInvestmentTransaction.prototype.getUnits = function () {
                            return this.units;
                        };
                        /**
                         * Sets the number of units of the security that was sold. For security-based actions other
                         * than stock splits, this is the quantity sold. For stocks, mutual funds, and others, this
                         * is the number of shares. For bonds, this is the face value. For options, this is the number of
                         * contacts. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param units the number of units sold
                         */
                        SellInvestmentTransaction.prototype.setUnits = function (units) {
                            this.units = units;
                        };
                        /**
                         * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
                         * share price. For bonds, this is the percentage of par. For options, this is the per share (not
                         * per contact) price. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the per unit price
                         */
                        SellInvestmentTransaction.prototype.getUnitPrice = function () {
                            return this.unitPrice;
                        };
                        /**
                         * Sets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
                         * share price. For bonds, this is the percentage of par. For options, this is the per share (not
                         * per contact) price. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param unitPrice the per unit price
                         */
                        SellInvestmentTransaction.prototype.setUnitPrice = function (unitPrice) {
                            this.unitPrice = unitPrice;
                        };
                        /**
                         * Gets the portion of the unit price that is attributed to the dealer markdown. This is an
                         * optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the per unit markedown price
                         */
                        SellInvestmentTransaction.prototype.getMarkdown = function () {
                            return this.markdown;
                        };
                        /**
                         * Sets the portion of the unit price that is attributed to the dealer markdown. This is an
                         * optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param markdown the per unit markedown price
                         */
                        SellInvestmentTransaction.prototype.setMarkdown = function (markdown) {
                            this.markdown = markdown;
                        };
                        /**
                         * Gets the transaction commission for the sale. This is an optional field according to the
                         * OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the transaction commision
                         */
                        SellInvestmentTransaction.prototype.getCommission = function () {
                            return this.commission;
                        };
                        /**
                         * Sets the transaction commission for the sale. This is an optional field according to the
                         * OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param commission the transaction commision
                         */
                        SellInvestmentTransaction.prototype.setCommission = function (commission) {
                            this.commission = commission;
                        };
                        /**
                         * Gets the taxes for the sale. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the transaction taxes
                         */
                        SellInvestmentTransaction.prototype.getTaxes = function () {
                            return this.taxes;
                        };
                        /**
                         * Sets the taxes for the sale. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param taxes the transaction taxes
                         */
                        SellInvestmentTransaction.prototype.setTaxes = function (taxes) {
                            this.taxes = taxes;
                        };
                        /**
                         * Gets the fees for the sale. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the transaction fees
                         */
                        SellInvestmentTransaction.prototype.getFees = function () {
                            return this.fees;
                        };
                        /**
                         * Sets the fees for the sale. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param fees the transaction fees
                         */
                        SellInvestmentTransaction.prototype.setFees = function (fees) {
                            this.fees = fees;
                        };
                        /**
                         * Gets the load for the sale. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the load
                         */
                        SellInvestmentTransaction.prototype.getLoad = function () {
                            return this.load;
                        };
                        /**
                         * Sets the load for the sale. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param load the load
                         */
                        SellInvestmentTransaction.prototype.setLoad = function (load) {
                            this.load = load;
                        };
                        /**
                         * Gets the withholding for the sale. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the withholding
                         */
                        SellInvestmentTransaction.prototype.getWithholding = function () {
                            return this.withholding;
                        };
                        /**
                         * Sets the withholding for the sale. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param withholding the withholding
                         */
                        SellInvestmentTransaction.prototype.setWithholding = function (withholding) {
                            this.withholding = withholding;
                        };
                        /**
                         * Gets whether the sale was tax exempt. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return whether the transaction was tax exempt
                         */
                        SellInvestmentTransaction.prototype.getTaxExempt = function () {
                            return this.taxExempt;
                        };
                        /**
                         * Sets whether the sale was tax exempt. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param taxExempt whether the transaction was tax exempt
                         */
                        SellInvestmentTransaction.prototype.setTaxExempt = function (taxExempt) {
                            this.taxExempt = taxExempt;
                        };
                        /**
                         * Gets the total for the sale. Should be equal to
                         * (units * (unitPrice + markdown)) + (commision + fees + load + taxes + penalty + withholding +
                         * statewithholding) according to the OFX spec. This is a required field according to the OFX
                         * spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the total
                         */
                        SellInvestmentTransaction.prototype.getTotal = function () {
                            return this.total;
                        };
                        /**
                         * Sets the total for the sale. Should be equal to
                         * (units * (unitPrice + markdown)) + (commision + fees + load + taxes + penalty + withholding +
                         * statewithholding) according to the OFX spec. This is a required field according to the OFX
                         * spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param total the total
                         */
                        SellInvestmentTransaction.prototype.setTotal = function (total) {
                            this.total = total;
                        };
                        /**
                         * Gets the gain sale. This is aan optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the gain for the sale
                         */
                        SellInvestmentTransaction.prototype.getGain = function () {
                            return this.gain;
                        };
                        /**
                         * Sets the gain sale. This is aan optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param gain the gain for the sale
                         */
                        SellInvestmentTransaction.prototype.setGain = function (gain) {
                            this.gain = gain;
                        };
                        /**
                         * Gets the currency code for the transaction. Only one of currency code or original currency
                         * code should be set according to the OFX spec. If neither are set, means the default currency.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the currency code for the transaction
                         */
                        SellInvestmentTransaction.prototype.getCurrencyCode = function () {
                            return this.currencyCode;
                        };
                        /**
                         * sets the currency code for the transaction. Only one of currency code or original currency
                         * code should be set according to the OFX spec. If neither are set, means the default currency.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param currencyCode the currency code for the transaction
                         */
                        SellInvestmentTransaction.prototype.setCurrencyCode = function (currencyCode) {
                            this.currencyCode = currencyCode;
                            this.originalCurrencyInfo = null;
                        };
                        /**
                         * Gets the original currency info for the transaction.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the original currency info for the transaction
                         */
                        SellInvestmentTransaction.prototype.getOriginalCurrencyInfo = function () {
                            return this.originalCurrencyInfo;
                        };
                        /**
                         * Sets the original currency info for the transaction.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param originalCurrencyInfo the original currency info for the transaction
                         */
                        SellInvestmentTransaction.prototype.setOriginalCurrencyInfo = function (originalCurrencyInfo) {
                            this.originalCurrencyInfo = originalCurrencyInfo;
                            this.currencyCode = null;
                        };
                        /**
                         * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the sub account type
                         */
                        SellInvestmentTransaction.prototype.getSubAccountSecurity = function () {
                            return this.subAccountSecurity;
                        };
                        /**
                         * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param subAccountSecurity the sub account type
                         */
                        SellInvestmentTransaction.prototype.setSubAccountSecurity = function (subAccountSecurity) {
                            this.subAccountSecurity = subAccountSecurity;
                        };
                        /**
                         * Gets the result of getSubAccountSecurity as one of the well-known types.
                         *
                         * @return the type of null if it wasn't one of the well known types.
                         */
                        SellInvestmentTransaction.prototype.getSubAccountSecurityEnum = function () {
                            return SubAccountType_fromOfx(this.getSubAccountSecurity());
                        };
                        /**
                         * Gets the sub account type that the security is being transfered from
                         * (e.g. CASH, MARGIN, SHORT, OTHER).
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the sub account fund
                         */
                        SellInvestmentTransaction.prototype.getSubAccountFund = function () {
                            return this.subAccountFund;
                        };
                        /**
                         * Sets the sub account type that the security is being transfered from
                         * (e.g. CASH, MARGIN, SHORT, OTHER).
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param subAccountFund the sub account fund
                         */
                        SellInvestmentTransaction.prototype.setSubAccountFund = function (subAccountFund) {
                            this.subAccountFund = subAccountFund;
                        };
                        /**
                         * Gets the result of getSubAccountFund as one of the well-known types.
                         *
                         * @return the type of null if it wasn't one of the well known types
                         */
                        SellInvestmentTransaction.prototype.getSubAccountFundEnum = function () {
                            return SubAccountType_fromOfx(this.getSubAccountFund());
                        };
                        /**
                         * Gets the loan id if this transaction was due to a loan or loan repayment on a 401k. This is an
                         * optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the loan id
                         */
                        SellInvestmentTransaction.prototype.getLoanId = function () {
                            return this.loanId;
                        };
                        /**
                         * Sets the loan id if this transaction was due to a loan or loan repayment on a 401k. This is an
                         * optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param loanId the loan id
                         */
                        SellInvestmentTransaction.prototype.setLoanId = function (loanId) {
                            this.loanId = loanId;
                        };
                        /**
                         * Gets the state withholding for the sale. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the state withholding
                         */
                        SellInvestmentTransaction.prototype.getStateWithholding = function () {
                            return this.stateWithholding;
                        };
                        /**
                         * Sets the state withholding for the sale. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param stateWithholding the state withholding
                         */
                        SellInvestmentTransaction.prototype.setStateWithholding = function (stateWithholding) {
                            this.stateWithholding = stateWithholding;
                        };
                        /**
                         * Gets the penalty for the sale. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the state withholding
                         */
                        SellInvestmentTransaction.prototype.getPenalty = function () {
                            return this.penalty;
                        };
                        /**
                         * Sets the penalty for the sale. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param penalty the state withholding
                         */
                        SellInvestmentTransaction.prototype.setPenalty = function (penalty) {
                            this.penalty = penalty;
                        };
                        /**
                         * Gets the 401K source for the sale. Should be one of "PRETAX", "AFTERTAX", "MATCH",
                         * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the 401k source
                         */
                        SellInvestmentTransaction.prototype.get401kSource = function () {
                            return this.inv401kSource;
                        };
                        /**
                         * Sets the 401K source for the sale. Should be one of "PRETAX", "AFTERTAX", "MATCH",
                         * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param inv401kSource the 401k source
                         */
                        SellInvestmentTransaction.prototype.set401kSource = function (inv401kSource) {
                            this.inv401kSource = inv401kSource;
                        };
                        /**
                         * Gets the 401k source as one of the well-known types.
                         *
                         * @return the 401k source or null if its not one of the well-known types
                         */
                        SellInvestmentTransaction.prototype.get401kSourceEnum = function () {
                            return Inv401KSource_fromOfx(this.get401kSource());
                        };
                        return SellInvestmentTransaction;
                    })();
                    transactions.SellInvestmentTransaction = SellInvestmentTransaction;
                    Aggregate_add(SellInvestmentTransaction, "INVSELL");
                    ChildAggregate_add(SellInvestmentTransaction, { order: 10, type: transactions.InvestmentTransaction, read: SellInvestmentTransaction.prototype.getInvestmentTransaction, write: SellInvestmentTransaction.prototype.setInvestmentTransaction });
                    ChildAggregate_add(SellInvestmentTransaction, { required: true, order: 20, type: SecurityId, read: SellInvestmentTransaction.prototype.getSecurityId, write: SellInvestmentTransaction.prototype.setSecurityId });
                    Element_add(SellInvestmentTransaction, { name: "UNITS", required: true, order: 30, type: Number, read: SellInvestmentTransaction.prototype.getUnits, write: SellInvestmentTransaction.prototype.setUnits });
                    Element_add(SellInvestmentTransaction, { name: "UNITPRICE", required: true, order: 40, type: Number, read: SellInvestmentTransaction.prototype.getUnitPrice, write: SellInvestmentTransaction.prototype.setUnitPrice });
                    Element_add(SellInvestmentTransaction, { name: "MARKDOWN", order: 50, type: Number, read: SellInvestmentTransaction.prototype.getMarkdown, write: SellInvestmentTransaction.prototype.setMarkdown });
                    Element_add(SellInvestmentTransaction, { name: "COMMISSION", order: 60, type: Number, read: SellInvestmentTransaction.prototype.getCommission, write: SellInvestmentTransaction.prototype.setCommission });
                    Element_add(SellInvestmentTransaction, { name: "TAXES", order: 70, type: Number, read: SellInvestmentTransaction.prototype.getTaxes, write: SellInvestmentTransaction.prototype.setTaxes });
                    Element_add(SellInvestmentTransaction, { name: "FEES", order: 80, type: Number, read: SellInvestmentTransaction.prototype.getFees, write: SellInvestmentTransaction.prototype.setFees });
                    Element_add(SellInvestmentTransaction, { name: "LOAD", order: 90, type: Number, read: SellInvestmentTransaction.prototype.getLoad, write: SellInvestmentTransaction.prototype.setLoad });
                    Element_add(SellInvestmentTransaction, { name: "WITHHOLDING", order: 93, type: Number, read: SellInvestmentTransaction.prototype.getWithholding, write: SellInvestmentTransaction.prototype.setWithholding });
                    Element_add(SellInvestmentTransaction, { name: "TAXEXEMPT", order: 97, type: Boolean, read: SellInvestmentTransaction.prototype.getTaxExempt, write: SellInvestmentTransaction.prototype.setTaxExempt });
                    Element_add(SellInvestmentTransaction, { name: "TOTAL", required: true, order: 100, type: Number, read: SellInvestmentTransaction.prototype.getTotal, write: SellInvestmentTransaction.prototype.setTotal });
                    Element_add(SellInvestmentTransaction, { name: "GAIN", order: 105, type: Number, read: SellInvestmentTransaction.prototype.getGain, write: SellInvestmentTransaction.prototype.setGain });
                    Element_add(SellInvestmentTransaction, { name: "CURRENCY", order: 110, type: String, read: SellInvestmentTransaction.prototype.getCurrencyCode, write: SellInvestmentTransaction.prototype.setCurrencyCode });
                    Element_add(SellInvestmentTransaction, { name: "ORIGCURRENCY", order: 120, type: transactions.OriginalCurrency, read: SellInvestmentTransaction.prototype.getOriginalCurrencyInfo, write: SellInvestmentTransaction.prototype.setOriginalCurrencyInfo });
                    Element_add(SellInvestmentTransaction, { name: "SUBACCTSEC", order: 130, type: String, read: SellInvestmentTransaction.prototype.getSubAccountSecurity, write: SellInvestmentTransaction.prototype.setSubAccountSecurity });
                    Element_add(SellInvestmentTransaction, { name: "SUBACCTFUND", order: 140, type: String, read: SellInvestmentTransaction.prototype.getSubAccountFund, write: SellInvestmentTransaction.prototype.setSubAccountFund });
                    Element_add(SellInvestmentTransaction, { name: "LOANID", order: 150, type: String, read: SellInvestmentTransaction.prototype.getLoanId, write: SellInvestmentTransaction.prototype.setLoanId });
                    Element_add(SellInvestmentTransaction, { name: "STATEWITHHOLDING", order: 160, type: Number, read: SellInvestmentTransaction.prototype.getStateWithholding, write: SellInvestmentTransaction.prototype.setStateWithholding });
                    Element_add(SellInvestmentTransaction, { name: "PENALTY", order: 170, type: Number, read: SellInvestmentTransaction.prototype.getPenalty, write: SellInvestmentTransaction.prototype.setPenalty });
                    Element_add(SellInvestmentTransaction, { name: "INV401KSOURCE", order: 180, type: String, read: SellInvestmentTransaction.prototype.get401kSource, write: SellInvestmentTransaction.prototype.set401kSource });
                })(transactions = investment.transactions || (investment.transactions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../investment/positions/Inv401KSource'/>
///<reference path='../../investment/accounts/SubAccountType'/>
///<reference path='../../seclist/SecurityId'/>
///<reference path='BaseInvestmentTransaction'/>
///<reference path='TransactionWithSecurity'/>
///<reference path='SellInvestmentTransaction'/>
///<reference path='InvestmentTransaction'/>
///<reference path='OriginalCurrency'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var transactions;
                (function (transactions) {
                    var Inv401KSource_fromOfx = ofx4js.domain.data.investment.positions.Inv401KSource_fromOfx;
                    var SubAccountType_fromOfx = ofx4js.domain.data.investment.accounts.SubAccountType_fromOfx;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    /**
                     * Base class for all investment transactions for selling securities.
                     * <br>
                     * This class exposes a read-only view of the flattened aggregates that are
                     * common to all sell investment transactions as a convenience to application
                     * developers who may not find the ofx aggregation model intuitive.
                     *
                     * @author Jon Perlow
                     */
                    var BaseSellInvestmentTransaction = (function (_super) {
                        __extends(BaseSellInvestmentTransaction, _super);
                        function BaseSellInvestmentTransaction(transactionType) {
                            _super.call(this, transactionType);
                        }
                        /**
                         * Gets the sell investment transaction child aggregate.
                         *
                         * @return the sell investment transaction child aggregate
                         */
                        // @Override
                        BaseSellInvestmentTransaction.prototype.getSellInvestment = function () {
                            return this.sellInvestment;
                        };
                        /**
                         * Sets the sell investment transaction child aggregate.
                         *
                         * @param sellInvestment the sell investment transaction child aggregate
                         */
                        BaseSellInvestmentTransaction.prototype.setSellInvestment = function (sellInvestment) {
                            this.sellInvestment = sellInvestment;
                        };
                        /**
                         * Gets the investment transaction aggregate.
                         *
                         * @return the investment transaction aggregate
                         */
                        // @Overridden
                        BaseSellInvestmentTransaction.prototype.getInvestmentTransaction = function () {
                            return this.getSellInvestment().getInvestmentTransaction();
                        };
                        /**
                         * Gets the id of the security that was sold. This is a required field according to the OFX
                         * spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the security id of the security that was bought
                         */
                        BaseSellInvestmentTransaction.prototype.getSecurityId = function () {
                            return this.getSellInvestment().getSecurityId();
                        };
                        /**
                         * Gets the number of units of the security that was sold. For security-based actions other
                         * than stock splits, this is the quantity sold. For stocks, mutual funds, and others, this
                         * is the number of shares. For bonds, this is the face value. For options, this is the number of
                         * contacts. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the number of units purchased.
                         */
                        BaseSellInvestmentTransaction.prototype.getUnits = function () {
                            return this.getSellInvestment().getUnits();
                        };
                        /**
                         * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
                         * share price. For bonds, this is the percentage of par. For options, this is the per share (not
                         * per contact) price. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the per unit price
                         */
                        BaseSellInvestmentTransaction.prototype.getUnitPrice = function () {
                            return this.getSellInvestment().getUnitPrice();
                        };
                        /**
                         * Gets the portion of the unit price that is attributed to the dealer markdown. This is an
                         * optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the per unit markedown price
                         */
                        BaseSellInvestmentTransaction.prototype.getMarkdown = function () {
                            return this.getSellInvestment().getMarkdown();
                        };
                        /**
                         * Gets the transaction commission for the sale. This is an optional field according to the
                         * OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the transaction commision
                         */
                        BaseSellInvestmentTransaction.prototype.getCommission = function () {
                            return this.getSellInvestment().getCommission();
                        };
                        /**
                         * Gets the taxes for the sale. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the transaction taxes
                         */
                        BaseSellInvestmentTransaction.prototype.getTaxes = function () {
                            return this.getSellInvestment().getTaxes();
                        };
                        /**
                         * Gets the fees for the sale. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the transaction fees
                         */
                        BaseSellInvestmentTransaction.prototype.getFees = function () {
                            return this.getSellInvestment().getFees();
                        };
                        /**
                         * Gets the load for the sale. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the load
                         */
                        BaseSellInvestmentTransaction.prototype.getLoad = function () {
                            return this.getSellInvestment().getLoad();
                        };
                        /**
                         * Gets the withholding for the sale. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the withholding
                         */
                        BaseSellInvestmentTransaction.prototype.getWithholding = function () {
                            return this.getSellInvestment().getWithholding();
                        };
                        /**
                         * Gets whether the sale was tax exempt. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return whether the transaction was tax exempt
                         */
                        BaseSellInvestmentTransaction.prototype.getTaxExempt = function () {
                            return this.getSellInvestment().getTaxExempt();
                        };
                        /**
                         * Gets the total for the sale. Should be equal to
                         * (units * (unitPrice + markdown)) + (commision + fees + load + taxes + penalty + withholding +
                         * statewithholding) according to the OFX spec. This is a required field according to the OFX
                         * spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the total
                         */
                        BaseSellInvestmentTransaction.prototype.getTotal = function () {
                            return this.getSellInvestment().getTotal();
                        };
                        /**
                         * Gets the gain sale. This is aan optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the gain for the sale
                         */
                        BaseSellInvestmentTransaction.prototype.getGain = function () {
                            return this.getSellInvestment().getGain();
                        };
                        /**
                         * Gets the currency code for the transaction. Only one of currency code or original currency
                         * info should be set according to the OFX spec. If neither are set, means the default currency.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the currency code for the transaction.
                         */
                        BaseSellInvestmentTransaction.prototype.getCurrencyCode = function () {
                            return this.getSellInvestment().getCurrencyCode();
                        };
                        /**
                         * Gets the origianl currency info for the transaction.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the currency info for the transaction.
                         */
                        BaseSellInvestmentTransaction.prototype.getOriginalCurrencyInfo = function () {
                            return this.getSellInvestment().getOriginalCurrencyInfo();
                        };
                        /**
                         * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the sub account type
                         */
                        BaseSellInvestmentTransaction.prototype.getSubAccountSecurity = function () {
                            return this.getSellInvestment().getSubAccountSecurity();
                        };
                        /**
                         * Gets the result of getSubAccountSecurity as one of the well-known types.
                         *
                         * @return the type of null if it wasn't one of the well known types.
                         */
                        BaseSellInvestmentTransaction.prototype.getSubAccountSecurityEnum = function () {
                            return SubAccountType_fromOfx(this.getSubAccountSecurity());
                        };
                        /**
                         * Gets the sub account type that the money went to  (e.g. CASH, MARGIN, SHORT, OTHER).
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the sub account fund
                         */
                        BaseSellInvestmentTransaction.prototype.getSubAccountFund = function () {
                            return this.getSellInvestment().getSubAccountFund();
                        };
                        /**
                         * Gets the result of getSubAccountFund as one of the well-known types.
                         *
                         * @return the type of null if it wasn't one of the well known types.
                         */
                        BaseSellInvestmentTransaction.prototype.getSubAccountFundEnum = function () {
                            return SubAccountType_fromOfx(this.getSubAccountFund());
                        };
                        /**
                         * Gets the loan id if this transaction was due to a loan or loan repayment on a 401k. This is an
                         * optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the loan id
                         */
                        BaseSellInvestmentTransaction.prototype.getLoadId = function () {
                            return this.getSellInvestment().getLoanId();
                        };
                        /**
                         * Gets the state withholding for the sale. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the state withholding
                         */
                        BaseSellInvestmentTransaction.prototype.getStateWithholding = function () {
                            return this.getSellInvestment().getStateWithholding();
                        };
                        /**
                         * Gets the penalty for the sale. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the state withholding
                         */
                        BaseSellInvestmentTransaction.prototype.getPenalty = function () {
                            return this.getSellInvestment().getPenalty();
                        };
                        /**
                         * Gets the 401K source for the sale. Should be one of "PRETAX", "AFTERTAX", "MATCH",
                         * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the 401k source
                         */
                        BaseSellInvestmentTransaction.prototype.get401kSource = function () {
                            return this.getSellInvestment().get401kSource();
                        };
                        /**
                         * Gets the 401k source as one of the well-known types.
                         *
                         * @return the 401k source or null if its not one of the well-known types
                         */
                        BaseSellInvestmentTransaction.prototype.get401kSourceEnum = function () {
                            return Inv401KSource_fromOfx(this.get401kSource());
                        };
                        return BaseSellInvestmentTransaction;
                    })(transactions.BaseInvestmentTransaction);
                    transactions.BaseSellInvestmentTransaction = BaseSellInvestmentTransaction;
                    ChildAggregate_add(BaseSellInvestmentTransaction, { order: 10, type: transactions.SellInvestmentTransaction, read: BaseSellInvestmentTransaction.prototype.getSellInvestment, write: BaseSellInvestmentTransaction.prototype.setSellInvestment });
                })(transactions = investment.transactions || (investment.transactions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='BaseBuyInvestmentTransaction'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var transactions;
                (function (transactions) {
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * Transaction for buying debt (i.e. bonds, CDs, etc.,).
                     * @see "Section 13.9.2.4.4, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var BuyDebtTransaction = (function (_super) {
                        __extends(BuyDebtTransaction, _super);
                        function BuyDebtTransaction() {
                            _super.call(this, 0 /* BUY_DEBT */);
                        }
                        /**
                         * Gets the amount of accrued interest on the debt. This is an optional field according to the
                         * OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @return the amount of accrued interest
                         */
                        BuyDebtTransaction.prototype.getAccruedInterest = function () {
                            return this.accruedInterest;
                        };
                        /**
                         * Sets the amount of accrued interest on the debt. This is an optional field according to the
                         * OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @param accruedInterest the amount of accrued interest
                         */
                        BuyDebtTransaction.prototype.setAccruedInterest = function (accruedInterest) {
                            this.accruedInterest = accruedInterest;
                        };
                        return BuyDebtTransaction;
                    })(transactions.BaseBuyInvestmentTransaction);
                    transactions.BuyDebtTransaction = BuyDebtTransaction;
                    Aggregate_add(BuyDebtTransaction, "BUYDEBT");
                    Element_add(BuyDebtTransaction, { name: "ACCRDINT", order: 20, type: Number, read: BuyDebtTransaction.prototype.getAccruedInterest, write: BuyDebtTransaction.prototype.setAccruedInterest });
                })(transactions = investment.transactions || (investment.transactions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var transactions;
                (function (transactions) {
                    /**
                     * Type of purchase for stocks and mutual funds.
                     * @see "Section 13.9.2.4.2, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    (function (BuyType) {
                        BuyType[BuyType["BUY"] = 0] = "BUY";
                        BuyType[BuyType["BUY_TO_COVER"] = 1] = "BUY_TO_COVER";
                    })(transactions.BuyType || (transactions.BuyType = {}));
                    var BuyType = transactions.BuyType;
                    function BuyType_fromOfx(ofxVal) {
                        if ("BUY" === ofxVal) {
                            return 0 /* BUY */;
                        }
                        else if ("BUYTOCOVER" === ofxVal) {
                            return 1 /* BUY_TO_COVER */;
                        }
                        else {
                            return null;
                        }
                    }
                    transactions.BuyType_fromOfx = BuyType_fromOfx;
                })(transactions = investment.transactions || (investment.transactions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
///<reference path='BaseBuyInvestmentTransaction'/>
///<reference path='BuyType'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var transactions;
                (function (transactions) {
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * Transaction for buying mutual funds.
                     * @see "Section 13.9.2.4.4, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var BuyMutualFundTransaction = (function (_super) {
                        __extends(BuyMutualFundTransaction, _super);
                        function BuyMutualFundTransaction() {
                            _super.call(this, 1 /* BUY_MUTUAL_FUND */);
                        }
                        /**
                         * Gets the type of purchase (i.e. "BUY" or "BUYTOCOVER"). This is a required field according to
                         * the OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @return the buy type
                         */
                        BuyMutualFundTransaction.prototype.getBuyType = function () {
                            return this.buyType;
                        };
                        /**
                         * Sets the type of purchase (i.e. "BUY" or "BUYTOCOVER"). This is a required field according to
                         * the OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @param buyType the buy type
                         */
                        BuyMutualFundTransaction.prototype.setBuyType = function (buyType) {
                            this.buyType = buyType;
                        };
                        /**
                         * Gets the buy type as one of the well-known types.
                         *
                         * @return the type of purchase or null if it's not known
                         */
                        BuyMutualFundTransaction.prototype.getBuyTypeEnum = function () {
                            return transactions.BuyType_fromOfx(this.buyType);
                        };
                        /**
                         * Gets any related transaction id for a mutual fund purchase (e.g. for a mutual fund exchange).
                         * This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @return the related transaction id
                         */
                        BuyMutualFundTransaction.prototype.getRelatedTransactionId = function () {
                            return this.relatedTransactionId;
                        };
                        /**
                         * Sets any related transaction id for a mutual fund purchase (e.g. for a mutual fund exchange).
                         * This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @param relatedTransactionId the related transaction id
                         */
                        BuyMutualFundTransaction.prototype.setRelatedTransactionId = function (relatedTransactionId) {
                            this.relatedTransactionId = relatedTransactionId;
                        };
                        return BuyMutualFundTransaction;
                    })(transactions.BaseBuyInvestmentTransaction);
                    transactions.BuyMutualFundTransaction = BuyMutualFundTransaction;
                    Aggregate_add(BuyMutualFundTransaction, "BUYMF");
                    Element_add(BuyMutualFundTransaction, { name: "BUYTYPE", required: true, order: 20, type: String, read: BuyMutualFundTransaction.prototype.getBuyType, write: BuyMutualFundTransaction.prototype.setBuyType });
                    Element_add(BuyMutualFundTransaction, { name: "RELFITID", order: 30, type: String, read: BuyMutualFundTransaction.prototype.getRelatedTransactionId, write: BuyMutualFundTransaction.prototype.setRelatedTransactionId });
                })(transactions = investment.transactions || (investment.transactions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var transactions;
                (function (transactions) {
                    /**
                     * Type of purchase for options.
                     * @see "Section 13.9.2.4.2, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    (function (OptionBuyType) {
                        OptionBuyType[OptionBuyType["BUY_TO_OPEN"] = 0] = "BUY_TO_OPEN";
                        OptionBuyType[OptionBuyType["BUY_TO_CLOSE"] = 1] = "BUY_TO_CLOSE";
                    })(transactions.OptionBuyType || (transactions.OptionBuyType = {}));
                    var OptionBuyType = transactions.OptionBuyType;
                    function OptionBuyType_fromOfx(ofxVal) {
                        if ("BUYTOOPEN" === ofxVal) {
                            return 0 /* BUY_TO_OPEN */;
                        }
                        else if ("BUYTOCLOSE" === ofxVal) {
                            return 1 /* BUY_TO_CLOSE */;
                        }
                        else {
                            return null;
                        }
                    }
                    transactions.OptionBuyType_fromOfx = OptionBuyType_fromOfx;
                })(transactions = investment.transactions || (investment.transactions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
///<reference path='BaseBuyInvestmentTransaction'/>
///<reference path='OptionBuyType'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var transactions;
                (function (transactions) {
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * Transaction for buying options.
                     * @see "Section 13.9.2.4.4, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var BuyOptionTransaction = (function (_super) {
                        __extends(BuyOptionTransaction, _super);
                        function BuyOptionTransaction() {
                            _super.call(this, 2 /* BUY_OPTION */);
                        }
                        /**
                         * Gets the type of option purchase (i.e. "BUYTOOPEN" or "BUYTOCLOSE"). This is a required field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @return the option buy type
                         */
                        BuyOptionTransaction.prototype.getOptionBuyType = function () {
                            return this.optionBuyType;
                        };
                        /**
                         * Sets the type of option purchase (i.e. "BUYTOOPEN" or "BUYTOCLOSE"). This is a required field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @param optionBuyType the option buy type
                         */
                        BuyOptionTransaction.prototype.setOptionBuyType = function (optionBuyType) {
                            this.optionBuyType = optionBuyType;
                        };
                        /**
                         * Gets the option buy type as one of the well-known types.
                         *
                         * @return the type of purchase or null if it's not known
                         */
                        BuyOptionTransaction.prototype.getOptionBuyTypeEnum = function () {
                            return transactions.OptionBuyType_fromOfx(this.optionBuyType);
                        };
                        /**
                         * Gets the number of shares per contact. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @return the number of shares per contact
                         */
                        BuyOptionTransaction.prototype.getSharesPerContract = function () {
                            return this.sharesPerContact;
                        };
                        /**
                         * Sets the number of shares per contact. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @param sharesPerContact the number of shares per contact
                         */
                        BuyOptionTransaction.prototype.setSharesPerContract = function (sharesPerContact) {
                            this.sharesPerContact = sharesPerContact;
                        };
                        return BuyOptionTransaction;
                    })(transactions.BaseBuyInvestmentTransaction);
                    transactions.BuyOptionTransaction = BuyOptionTransaction;
                    Aggregate_add(BuyOptionTransaction, "BUYOPT");
                    Element_add(BuyOptionTransaction, { name: "OPTBUYTYPE", required: true, order: 20, type: String, read: BuyOptionTransaction.prototype.getOptionBuyType, write: BuyOptionTransaction.prototype.setOptionBuyType });
                    Element_add(BuyOptionTransaction, { name: "SHPERCTRCT", required: true, order: 30, type: Number, read: BuyOptionTransaction.prototype.getSharesPerContract, write: BuyOptionTransaction.prototype.setSharesPerContract });
                })(transactions = investment.transactions || (investment.transactions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='BaseBuyInvestmentTransaction'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var transactions;
                (function (transactions) {
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    /**
                     * Transaction for buying other types of securities.
                     * @see "Section 13.9.2.4.4, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var BuyOtherTransaction = (function (_super) {
                        __extends(BuyOtherTransaction, _super);
                        function BuyOtherTransaction() {
                            _super.call(this, 3 /* BUY_OTHER */);
                        }
                        return BuyOtherTransaction;
                    })(transactions.BaseBuyInvestmentTransaction);
                    transactions.BuyOtherTransaction = BuyOtherTransaction;
                    Aggregate_add(BuyOtherTransaction, "BUYOTHER");
                })(transactions = investment.transactions || (investment.transactions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
///<reference path='BaseBuyInvestmentTransaction'/>
///<reference path='BuyType'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var transactions;
                (function (transactions) {
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * Transaction for buying stock.
                     * @see "Section 13.9.2.4.4, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var BuyStockTransaction = (function (_super) {
                        __extends(BuyStockTransaction, _super);
                        function BuyStockTransaction() {
                            _super.call(this, 4 /* BUY_STOCK */);
                        }
                        /**
                         * Gets the type of stock purchase (i.e. "BUY" or "BUYTOCOVER"). This is a required field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @return the buy type
                         */
                        BuyStockTransaction.prototype.getBuyType = function () {
                            return this.buyType;
                        };
                        /**
                         * Sets the type of stock purchase (i.e. "BUY" or "BUYTOCOVER"). This is a required field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @param buyType the buy type
                         */
                        BuyStockTransaction.prototype.setBuyType = function (buyType) {
                            this.buyType = buyType;
                        };
                        /**
                         * Gets the buy type as one of the well-known types.
                         *
                         * @return the type of purchase or null if it's not well known
                         */
                        BuyStockTransaction.prototype.getBuyTypeEnum = function () {
                            return transactions.BuyType_fromOfx(this.buyType);
                        };
                        return BuyStockTransaction;
                    })(transactions.BaseBuyInvestmentTransaction);
                    transactions.BuyStockTransaction = BuyStockTransaction;
                    Aggregate_add(BuyStockTransaction, "BUYSTOCK");
                    Element_add(BuyStockTransaction, { name: "BUYTYPE", required: true, order: 20, type: String, read: BuyStockTransaction.prototype.getBuyType, write: BuyStockTransaction.prototype.setBuyType });
                })(transactions = investment.transactions || (investment.transactions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var transactions;
                (function (transactions) {
                    /**
                     * Type of action for closing a stock option.
                     * @see "Section 13.9.2.4.2, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    (function (CloseOptionAction) {
                        CloseOptionAction[CloseOptionAction["EXERCISE"] = 0] = "EXERCISE";
                        CloseOptionAction[CloseOptionAction["ASSIGN"] = 1] = "ASSIGN";
                        CloseOptionAction[CloseOptionAction["EXPIRE"] = 2] = "EXPIRE";
                    })(transactions.CloseOptionAction || (transactions.CloseOptionAction = {}));
                    var CloseOptionAction = transactions.CloseOptionAction;
                    function CloseOptionAction_fromOfx(ofxVal) {
                        if ("EXERCISE" === ofxVal) {
                            return 0 /* EXERCISE */;
                        }
                        else if ("ASSIGN" === ofxVal) {
                            return 1 /* ASSIGN */;
                        }
                        else if ("EXPIRE" === ofxVal) {
                            return 2 /* EXPIRE */;
                        }
                        else {
                            return null;
                        }
                    }
                    transactions.CloseOptionAction_fromOfx = CloseOptionAction_fromOfx;
                })(transactions = investment.transactions || (investment.transactions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
///<reference path='../../investment/accounts/SubAccountType'/>
///<reference path='../../seclist/SecurityId'/>
///<reference path='BaseOtherInvestmentTransaction'/>
///<reference path='TransactionWithSecurity'/>
///<reference path='CloseOptionAction'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var transactions;
                (function (transactions) {
                    var SubAccountType_fromOfx = ofx4js.domain.data.investment.accounts.SubAccountType_fromOfx;
                    var SecurityId = ofx4js.domain.data.seclist.SecurityId;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * Transaction for closing an option position due to expiration, exercise, or assignment.
                     * @see "Section 13.9.2.4.4, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var CloseOptionTransaction = (function (_super) {
                        __extends(CloseOptionTransaction, _super);
                        function CloseOptionTransaction() {
                            _super.call(this, 5 /* CLOSE_OPTION */);
                        }
                        /**
                         * Gets the security id of the option.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @return the security id of the option
                         */
                        CloseOptionTransaction.prototype.getSecurityId = function () {
                            return this.securityId;
                        };
                        /**
                         * Sets the security id of the option.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @param securityId the security id of the option
                         */
                        CloseOptionTransaction.prototype.setSecurityId = function (securityId) {
                            this.securityId = securityId;
                        };
                        /**
                         * Gets the action being performed (i.e. "EXERCISE", "ASSIGN", "EXPIRE" This is a required field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @return the option action
                         */
                        CloseOptionTransaction.prototype.getOptionAction = function () {
                            return this.optionAction;
                        };
                        /**
                         * Sets the action being performed (i.e. "EXERCISE", "ASSIGN", "EXPIRE" This is a required field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @param optionAction the option action
                         */
                        CloseOptionTransaction.prototype.setOptionAction = function (optionAction) {
                            this.optionAction = optionAction;
                        };
                        /**
                         * Gets the action as one of the well-known types.
                         *
                         * @return the type of close or null if it's not a well-known type
                         */
                        CloseOptionTransaction.prototype.getOptionActionEnum = function () {
                            return transactions.CloseOptionAction_fromOfx(this.getOptionAction());
                        };
                        /**
                         * Gets the number of units of the option that were closed. This is a required field according
                         * to the OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @return the number of units closed
                         */
                        CloseOptionTransaction.prototype.getUnits = function () {
                            return this.units;
                        };
                        /**
                         * Sets the number of units of the option that were closed. This is a required field according
                         * to the OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @param units the number of units closed
                         */
                        CloseOptionTransaction.prototype.setUnits = function (units) {
                            this.units = units;
                        };
                        /**
                         * Gets the number of shares per contact. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @return the number of shares per contact
                         */
                        CloseOptionTransaction.prototype.getSharesPerContact = function () {
                            return this.sharesPerContact;
                        };
                        /**
                         * Sets the number of shares per contact. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @param sharesPerContact the number of shares per contact
                         */
                        CloseOptionTransaction.prototype.setSharesPerContact = function (sharesPerContact) {
                            this.sharesPerContact = sharesPerContact;
                        };
                        /**
                         * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @return the sub account type
                         */
                        CloseOptionTransaction.prototype.getSubAccountSecurity = function () {
                            return this.subAccountSecurity;
                        };
                        /**
                         * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @param subAccountSecurity the sub account type
                         */
                        CloseOptionTransaction.prototype.setSubAccountSecurity = function (subAccountSecurity) {
                            this.subAccountSecurity = subAccountSecurity;
                        };
                        /**
                         * Gets the result of getSubAccountFund as one of the well-known types.
                         *
                         * @return the type of null if it wasn't one of the well known types
                         */
                        CloseOptionTransaction.prototype.getSubAccountSecurityEnum = function () {
                            return SubAccountType_fromOfx(this.getSubAccountSecurity());
                        };
                        /**
                         * Gets the related transaction id for the related buy or sell corresponding to the
                         * EXERCISE or ASSIGN action. This is a required field according to the OFX spec if the
                         * action or EXERCISE or ASSIGN.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @return the related transaction id
                         */
                        CloseOptionTransaction.prototype.getRelatedTransactionId = function () {
                            return this.relatedTransactionId;
                        };
                        /**
                         * Sets the related transaction id for the related buy or sell corresponding to the
                         * EXERCISE or ASSIGN action. This is a required field according to the OFX spec if the
                         * action or EXERCISE or ASSIGN.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @param relatedTransactionId the related transaction id
                         */
                        CloseOptionTransaction.prototype.setRelatedTransactionId = function (relatedTransactionId) {
                            this.relatedTransactionId = relatedTransactionId;
                        };
                        /**
                         * Gets the gain related to the transaction. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @return the gain related to the transaction
                         */
                        CloseOptionTransaction.prototype.getGain = function () {
                            return this.gain;
                        };
                        /**
                         * Sets the gain related to the transaction. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @param gain the gain related to the transaction
                         */
                        CloseOptionTransaction.prototype.setGain = function (gain) {
                            this.gain = gain;
                        };
                        return CloseOptionTransaction;
                    })(transactions.BaseOtherInvestmentTransaction);
                    transactions.CloseOptionTransaction = CloseOptionTransaction;
                    Aggregate_add(CloseOptionTransaction, "CLOSUREOPT");
                    ChildAggregate_add(CloseOptionTransaction, { order: 20, type: SecurityId, read: CloseOptionTransaction.prototype.getSecurityId, write: CloseOptionTransaction.prototype.setSecurityId });
                    Element_add(CloseOptionTransaction, { name: "OPTACTION", required: true, order: 30, type: String, read: CloseOptionTransaction.prototype.getOptionAction, write: CloseOptionTransaction.prototype.setOptionAction });
                    Element_add(CloseOptionTransaction, { name: "UNITS", required: true, order: 40, type: Number, read: CloseOptionTransaction.prototype.getUnits, write: CloseOptionTransaction.prototype.setUnits });
                    Element_add(CloseOptionTransaction, { name: "SHPERCTRCT", required: true, order: 50, type: Number, read: CloseOptionTransaction.prototype.getSharesPerContact, write: CloseOptionTransaction.prototype.setSharesPerContact });
                    Element_add(CloseOptionTransaction, { name: "SUBACCTSEC", required: true, order: 60, type: String, read: CloseOptionTransaction.prototype.getSubAccountSecurity, write: CloseOptionTransaction.prototype.setSubAccountSecurity });
                    Element_add(CloseOptionTransaction, { name: "RELFITID", order: 70, type: String, read: CloseOptionTransaction.prototype.getRelatedTransactionId, write: CloseOptionTransaction.prototype.setRelatedTransactionId });
                    Element_add(CloseOptionTransaction, { name: "GAIN", order: 80, type: Number, read: CloseOptionTransaction.prototype.getGain, write: CloseOptionTransaction.prototype.setGain });
                })(transactions = investment.transactions || (investment.transactions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var transactions;
                (function (transactions) {
                    /**
                     * Type of income.
                     * @see "Section 13.9.2.4.2, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    (function (IncomeType) {
                        IncomeType[IncomeType["LONG_TERM_CAP_GAINS"] = 0] = "LONG_TERM_CAP_GAINS";
                        IncomeType[IncomeType["SHORT_TERM_CAP_GAINS"] = 1] = "SHORT_TERM_CAP_GAINS";
                        IncomeType[IncomeType["DIVIDEND"] = 2] = "DIVIDEND";
                        IncomeType[IncomeType["INTEREST"] = 3] = "INTEREST";
                        IncomeType[IncomeType["MISC"] = 4] = "MISC";
                    })(transactions.IncomeType || (transactions.IncomeType = {}));
                    var IncomeType = transactions.IncomeType;
                    function IncomeType_fromOfx(ofxVal) {
                        if ("CGLONG" === ofxVal) {
                            return 0 /* LONG_TERM_CAP_GAINS */;
                        }
                        else if ("CGSHORT" === ofxVal) {
                            return 1 /* SHORT_TERM_CAP_GAINS */;
                        }
                        else if ("DIV" === ofxVal) {
                            return 2 /* DIVIDEND */;
                        }
                        else if ("INTEREST" === ofxVal) {
                            return 3 /* INTEREST */;
                        }
                        else if ("MISC" === ofxVal) {
                            return 4 /* MISC */;
                        }
                        else {
                            return null;
                        }
                    }
                    transactions.IncomeType_fromOfx = IncomeType_fromOfx;
                })(transactions = investment.transactions || (investment.transactions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
///<reference path='../../investment/accounts/SubAccountType'/>
///<reference path='../../investment/positions/Inv401KSource'/>
///<reference path='../../seclist/SecurityId'/>
///<reference path='BaseOtherInvestmentTransaction'/>
///<reference path='IncomeType'/>
///<reference path='OriginalCurrency'/>
///<reference path='TransactionWithSecurity'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var transactions;
                (function (transactions) {
                    var SubAccountType_fromOfx = ofx4js.domain.data.investment.accounts.SubAccountType_fromOfx;
                    var Inv401KSource_fromOfx = ofx4js.domain.data.investment.positions.Inv401KSource_fromOfx;
                    var SecurityId = ofx4js.domain.data.seclist.SecurityId;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * Transaction for investment income that is realized as cash into the investment account.
                     * @see "Section 13.9.2.4.4, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var IncomeTransaction = (function (_super) {
                        __extends(IncomeTransaction, _super);
                        function IncomeTransaction() {
                            _super.call(this, 6 /* INCOME */);
                        }
                        /**
                         * Gets the id of the security that the income was for. This is a required field according to the
                         * OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @return the security id of the security that the income was for
                         */
                        IncomeTransaction.prototype.getSecurityId = function () {
                            return this.securityId;
                        };
                        /**
                         * Sets the id of the security that the income was for. This is a required field according to the
                         * OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @param securityId the security id of the security that the income was for
                         */
                        IncomeTransaction.prototype.setSecurityId = function (securityId) {
                            this.securityId = securityId;
                        };
                        /**
                         * Gets the type of income. One of "CGLONG" (long term capital gains), "CGSHORT" (short term
                         * capital gains), "DIV" (dividend), INTEREST, or MISC>
                         * @see "Section 13.9.2.4.4, OFX Spec" This is a required field according to the OFX spec.
                         *
                         * @return the type of income
                         */
                        IncomeTransaction.prototype.getIncomeType = function () {
                            return this.incomeType;
                        };
                        /**
                         * Sets the type of income. One of "CGLONG" (long term capital gains), "CGSHORT" (short term
                         * capital gains), "DIV" (dividend), INTEREST, or MISC>
                         * @see "Section 13.9.2.4.4, OFX Spec" This is a required field according to the OFX spec.
                         *
                         * @param incomeType the type of income
                         */
                        IncomeTransaction.prototype.setIncomeType = function (incomeType) {
                            this.incomeType = incomeType;
                        };
                        /**
                         * Gets the income type as one of the well-known types.
                         *
                         * @return the income type or null if it's not well known
                         */
                        IncomeTransaction.prototype.getIncomeTypeEnum = function () {
                            return transactions.IncomeType_fromOfx(this.getIncomeType());
                        };
                        /**
                         * Gets the total income received.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @return the total
                         */
                        IncomeTransaction.prototype.getTotal = function () {
                            return this.total;
                        };
                        /**
                         * Sets the total income received.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @param total the total
                         */
                        IncomeTransaction.prototype.setTotal = function (total) {
                            this.total = total;
                        };
                        /**
                         * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the sub account type
                         */
                        IncomeTransaction.prototype.getSubAccountSecurity = function () {
                            return this.subAccountSecurity;
                        };
                        /**
                         * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param subAcctSec the sub account type
                         */
                        IncomeTransaction.prototype.setSubAccountSecurity = function (subAcctSec) {
                            this.subAccountSecurity = subAcctSec;
                        };
                        /**
                         * Gets the result of getSubAccountSecurity as one of the well-known types.
                         *
                         * @return the type of null if it wasn't one of the well known types.
                         */
                        IncomeTransaction.prototype.getSubAccountSecurityEnum = function () {
                            return SubAccountType_fromOfx(this.getSubAccountSecurity());
                        };
                        /**
                         * Gets the sub account type that the security is from (e.g. CASH, MARGIN, SHORT, OTHER).
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the sub account fund for the transaction
                         */
                        IncomeTransaction.prototype.getSubAccountFund = function () {
                            return this.subAccountFund;
                        };
                        /**
                         * Sets the sub account type that the security is from (e.g. CASH, MARGIN, SHORT, OTHER).
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param subAcctFund the sub account fund for the transaction
                         */
                        IncomeTransaction.prototype.setSubAccountFund = function (subAcctFund) {
                            this.subAccountFund = subAcctFund;
                        };
                        /**
                         * Gets the result of getSubAccountFund as one of the well-known types.
                         *
                         * @return the type of null if it wasn't one of the well known types
                         */
                        IncomeTransaction.prototype.getSubAccountFundEnum = function () {
                            return SubAccountType_fromOfx(this.getSubAccountFund());
                        };
                        /**
                         * Gets whether the income was tax exempt. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return whether the transaction was tax exempt
                         */
                        IncomeTransaction.prototype.getTaxExempt = function () {
                            return this.taxExempt;
                        };
                        /**
                         * Sets whether the income was tax exempt. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param taxExempt whether the transaction was tax exempt
                         */
                        IncomeTransaction.prototype.setTaxExempt = function (taxExempt) {
                            this.taxExempt = taxExempt;
                        };
                        /**
                         * Gets the withholding for the income. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the withholding
                         */
                        IncomeTransaction.prototype.getWithholding = function () {
                            return this.withholding;
                        };
                        /**
                         * Sets the withholding for the income. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param withholding the withholding
                         */
                        IncomeTransaction.prototype.setWithholding = function (withholding) {
                            this.withholding = withholding;
                        };
                        /**
                         * Gets the currency code for the transaction. Only one of currency code or original currency
                         * info should be set according to the OFX spec. If neither are set, means the default currency.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the currency code for the transaction
                         */
                        IncomeTransaction.prototype.getCurrencyCode = function () {
                            return this.currencyCode;
                        };
                        /**
                         * Sets the currency code for the transaction. Only one of currency code or original currency
                         * info should be set according to the OFX spec. If neither are set, means the default currency.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param currencyCode the currency code for the transaction
                         */
                        IncomeTransaction.prototype.setCurrencyCode = function (currencyCode) {
                            this.currencyCode = currencyCode;
                            this.originalCurrencyInfo = null;
                        };
                        /**
                         * Gets the original currency info for the transaction.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the currency info for the transaction
                         */
                        IncomeTransaction.prototype.getOriginalCurrencyInfo = function () {
                            return this.originalCurrencyInfo;
                        };
                        /**
                         * Sets the original currency info for the transaction.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param originalCurrencyInfo the currency info for the transaction
                         */
                        IncomeTransaction.prototype.setOriginalCurrencyInfo = function (originalCurrencyInfo) {
                            this.originalCurrencyInfo = originalCurrencyInfo;
                            this.currencyCode = null;
                        };
                        /**
                         * Gets the 401K source for the sale. Should be one of "PRETAX", "AFTERTAX", "MATCH",
                         * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the state withholding
                         */
                        IncomeTransaction.prototype.get401kSource = function () {
                            return this.inv401kSource;
                        };
                        /**
                         * Sets the 401K source for the sale. Should be one of "PRETAX", "AFTERTAX", "MATCH",
                         * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param inv401kSource the state withholding
                         */
                        IncomeTransaction.prototype.set401kSource = function (inv401kSource) {
                            this.inv401kSource = inv401kSource;
                        };
                        /**
                         * Gets the 401(k) source as one of the well-known types.
                         *
                         * @return the type of close or null if it's not well known.
                         */
                        IncomeTransaction.prototype.get401kSourceEnum = function () {
                            return Inv401KSource_fromOfx(this.get401kSource());
                        };
                        return IncomeTransaction;
                    })(transactions.BaseOtherInvestmentTransaction);
                    transactions.IncomeTransaction = IncomeTransaction;
                    Aggregate_add(IncomeTransaction, "INCOME");
                    ChildAggregate_add(IncomeTransaction, { required: true, order: 20, type: SecurityId, read: IncomeTransaction.prototype.getSecurityId, write: IncomeTransaction.prototype.setSecurityId });
                    Element_add(IncomeTransaction, { name: "INCOMETYPE", required: true, order: 30, type: String, read: IncomeTransaction.prototype.getIncomeType, write: IncomeTransaction.prototype.setIncomeType });
                    Element_add(IncomeTransaction, { name: "TOTAL", required: true, order: 40, type: Number, read: IncomeTransaction.prototype.getTotal, write: IncomeTransaction.prototype.setTotal });
                    Element_add(IncomeTransaction, { name: "SUBACCTSEC", order: 50, type: String, read: IncomeTransaction.prototype.getSubAccountSecurity, write: IncomeTransaction.prototype.setSubAccountSecurity });
                    Element_add(IncomeTransaction, { name: "SUBACCTFUND", order: 60, type: String, read: IncomeTransaction.prototype.getSubAccountFund, write: IncomeTransaction.prototype.setSubAccountFund });
                    Element_add(IncomeTransaction, { name: "TAXEXEMPT", order: 70, type: Boolean, read: IncomeTransaction.prototype.getTaxExempt, write: IncomeTransaction.prototype.setTaxExempt });
                    Element_add(IncomeTransaction, { name: "WITHHOLDING", order: 80, type: Number, read: IncomeTransaction.prototype.getWithholding, write: IncomeTransaction.prototype.setWithholding });
                    Element_add(IncomeTransaction, { name: "CURRENCY", order: 90, type: String, read: IncomeTransaction.prototype.getCurrencyCode, write: IncomeTransaction.prototype.setCurrencyCode });
                    ChildAggregate_add(IncomeTransaction, { order: 120, type: transactions.OriginalCurrency, read: IncomeTransaction.prototype.getOriginalCurrencyInfo, write: IncomeTransaction.prototype.setOriginalCurrencyInfo });
                    Element_add(IncomeTransaction, { name: "INV401KSOURCE", order: 110, type: String, read: IncomeTransaction.prototype.get401kSource, write: IncomeTransaction.prototype.set401kSource });
                })(transactions = investment.transactions || (investment.transactions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
///<reference path='../../investment/accounts/SubAccountType'/>
///<reference path='../../investment/positions/Inv401KSource'/>
///<reference path='../../seclist/SecurityId'/>
///<reference path='BaseOtherInvestmentTransaction'/>
///<reference path='OriginalCurrency'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var transactions;
                (function (transactions) {
                    var SubAccountType_fromOfx = ofx4js.domain.data.investment.accounts.SubAccountType_fromOfx;
                    var Inv401KSource_fromOfx = ofx4js.domain.data.investment.positions.Inv401KSource_fromOfx;
                    var SecurityId = ofx4js.domain.data.seclist.SecurityId;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * Transaction for an investment expense
                     * @see "Section 13.9.2.4.4, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var InvestmentExpenseTransaction = (function (_super) {
                        __extends(InvestmentExpenseTransaction, _super);
                        function InvestmentExpenseTransaction() {
                            _super.call(this, 7 /* INVESTMENT_EXPENSE */);
                        }
                        /**
                         * Gets the id of the security for the expense. This is a required field according to the OFX
                         * spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the security id of the security for the expsense
                         */
                        InvestmentExpenseTransaction.prototype.getSecurityId = function () {
                            return this.securityId;
                        };
                        /**
                         * Sets the id of the security for the expense. This is a required field according to the OFX
                         * spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param securityId the security id of the security for the expsense
                         */
                        InvestmentExpenseTransaction.prototype.setSecurityId = function (securityId) {
                            this.securityId = securityId;
                        };
                        /**
                         * Gets the total for the expense.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the total
                         */
                        InvestmentExpenseTransaction.prototype.getTotal = function () {
                            return this.total;
                        };
                        /**
                         * Sets the total for the expense.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param total the total
                         */
                        InvestmentExpenseTransaction.prototype.setTotal = function (total) {
                            this.total = total;
                        };
                        /**
                         * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the sub account type
                         */
                        InvestmentExpenseTransaction.prototype.getSubAccountSecurity = function () {
                            return this.subAccountSecurity;
                        };
                        /**
                         * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param subAccountSecurity the sub account type
                         */
                        InvestmentExpenseTransaction.prototype.setSubAccountSecurity = function (subAccountSecurity) {
                            this.subAccountSecurity = subAccountSecurity;
                        };
                        /**
                         * Gets the result of getSubAccountSecurity as one of the well-known types.
                         *
                         * @return the type of null if it wasn't one of the well known types.
                         */
                        InvestmentExpenseTransaction.prototype.getSubAccountSecurityEnum = function () {
                            return SubAccountType_fromOfx(this.getSubAccountSecurity());
                        };
                        /**
                         * Gets the sub account type for the fund. (e.g. CASH, MARGIN, SHORT, OTHER).
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the sub account fund
                         */
                        InvestmentExpenseTransaction.prototype.getSubAccountFund = function () {
                            return this.subAccountFund;
                        };
                        /**
                         * Sets the sub account type for the fund. (e.g. CASH, MARGIN, SHORT, OTHER).
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param subAccountFund the sub account fund
                         */
                        InvestmentExpenseTransaction.prototype.setSubAccountFund = function (subAccountFund) {
                            this.subAccountFund = subAccountFund;
                        };
                        /**
                         * Gets the result of getSubAccountFund as one of the well-known types.
                         *
                         * @return the type of null if it wasn't one of the well known types
                         */
                        InvestmentExpenseTransaction.prototype.getSubAccountFundEnum = function () {
                            return SubAccountType_fromOfx(this.getSubAccountFund());
                        };
                        /**
                         * Gets the currency code for the transaction. Only one of currency code or original currency
                         * code should be set according to the OFX spec. If neither are set, means the default currency.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the currency code for the transaction
                         */
                        InvestmentExpenseTransaction.prototype.getCurrencyCode = function () {
                            return this.currencyCode;
                        };
                        /**
                         * sets the currency code for the transaction. Only one of currency code or original currency
                         * code should be set according to the OFX spec. If neither are set, means the default currency.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param currencyCode the currency code for the transaction
                         */
                        InvestmentExpenseTransaction.prototype.setCurrencyCode = function (currencyCode) {
                            this.currencyCode = currencyCode;
                            this.originalCurrencyInfo = null;
                        };
                        /**
                         * Gets the original currency info for the transaction.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the original currency info for the transaction
                         */
                        InvestmentExpenseTransaction.prototype.getOriginalCurrencyInfo = function () {
                            return this.originalCurrencyInfo;
                        };
                        /**
                         * Sets the original currency info for the transaction.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param originalCurrencyInfo the original currency info for the transaction
                         */
                        InvestmentExpenseTransaction.prototype.setOriginalCurrencyInfo = function (originalCurrencyInfo) {
                            this.originalCurrencyInfo = originalCurrencyInfo;
                            this.currencyCode = null;
                        };
                        /**
                         * Gets the 401K source for the transaction. Should be one of "PRETAX", "AFTERTAX", "MATCH",
                         * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the 401k source
                         */
                        InvestmentExpenseTransaction.prototype.get401kSource = function () {
                            return this.inv401kSource;
                        };
                        /**
                         * Sets the 401K source for the transaction. Should be one of "PRETAX", "AFTERTAX", "MATCH",
                         * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param inv401kSource the 401k source
                         */
                        InvestmentExpenseTransaction.prototype.set401kSource = function (inv401kSource) {
                            this.inv401kSource = inv401kSource;
                        };
                        /**
                         * Gets the 401k source as one of the well-known types.
                         *
                         * @return the 401k source or null if its not one of the well-known types
                         */
                        InvestmentExpenseTransaction.prototype.get401kSourceEnum = function () {
                            return Inv401KSource_fromOfx(this.get401kSource());
                        };
                        return InvestmentExpenseTransaction;
                    })(transactions.BaseOtherInvestmentTransaction);
                    transactions.InvestmentExpenseTransaction = InvestmentExpenseTransaction;
                    Aggregate_add(InvestmentExpenseTransaction, "INVEXPENSE");
                    ChildAggregate_add(InvestmentExpenseTransaction, { required: true, order: 20, type: SecurityId, read: InvestmentExpenseTransaction.prototype.getSecurityId, write: InvestmentExpenseTransaction.prototype.setSecurityId });
                    Element_add(InvestmentExpenseTransaction, { name: "TOTAL", required: true, order: 30, type: Number, read: InvestmentExpenseTransaction.prototype.getTotal, write: InvestmentExpenseTransaction.prototype.setTotal });
                    Element_add(InvestmentExpenseTransaction, { name: "SUBACCTSEC", order: 40, type: String, read: InvestmentExpenseTransaction.prototype.getSubAccountSecurity, write: InvestmentExpenseTransaction.prototype.setSubAccountSecurity });
                    Element_add(InvestmentExpenseTransaction, { name: "SUBACCTFUND", order: 50, type: String, read: InvestmentExpenseTransaction.prototype.getSubAccountFund, write: InvestmentExpenseTransaction.prototype.setSubAccountFund });
                    Element_add(InvestmentExpenseTransaction, { name: "CURRENCY", order: 60, type: String, read: InvestmentExpenseTransaction.prototype.getCurrencyCode, write: InvestmentExpenseTransaction.prototype.setCurrencyCode });
                    Element_add(InvestmentExpenseTransaction, { name: "ORIGCURRENCY", order: 70, type: transactions.OriginalCurrency, read: InvestmentExpenseTransaction.prototype.getOriginalCurrencyInfo, write: InvestmentExpenseTransaction.prototype.setOriginalCurrencyInfo });
                    Element_add(InvestmentExpenseTransaction, { name: "INV401KSOURCE", order: 180, type: String, read: InvestmentExpenseTransaction.prototype.get401kSource, write: InvestmentExpenseTransaction.prototype.set401kSource });
                })(transactions = investment.transactions || (investment.transactions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
///<reference path='../../investment/accounts/SubAccountType'/>
///<reference path='BaseOtherInvestmentTransaction'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var transactions;
                (function (transactions) {
                    var SubAccountType_fromOfx = ofx4js.domain.data.investment.accounts.SubAccountType_fromOfx;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * Transaction for journal fund transactions between sub-accounts within the same investment
                     * account.
                     * @see "Section 13.9.2.4.4, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var JournalFundTransaction = (function (_super) {
                        __extends(JournalFundTransaction, _super);
                        function JournalFundTransaction() {
                            _super.call(this, 8 /* JOURNAL_FUND */);
                        }
                        /**
                         * Gets the sub account type the transer is from (e.g. CASH, MARGIN, SHORT, OTHER).
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @return the sub account type
                         */
                        JournalFundTransaction.prototype.getFromSubAccountFund = function () {
                            return this.subAccountFrom;
                        };
                        /**
                         * Sets the sub account type the transer is from (e.g. CASH, MARGIN, SHORT, OTHER).
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @param subAccountFrom the sub account type
                         */
                        JournalFundTransaction.prototype.setFromSubAccountFund = function (subAccountFrom) {
                            this.subAccountFrom = subAccountFrom;
                        };
                        /**
                         * Gets the result of getFromSubAccountFund as one of the well-known types.
                         *
                         * @return the type of null if it wasn't one of the well known types.
                         */
                        JournalFundTransaction.prototype.getFromSubAccountFundEnum = function () {
                            return SubAccountType_fromOfx(this.getFromSubAccountFund());
                        };
                        /**
                         * Gets the sub account type that the transfer is to (e.g. CASH, MARGIN, SHORT, OTHER).
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @return the sub account fund
                         */
                        JournalFundTransaction.prototype.getToSubAccountFund = function () {
                            return this.subAccountTo;
                        };
                        /**
                         * Sets the sub account type that the transfer is to (e.g. CASH, MARGIN, SHORT, OTHER).
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @param subAccountTo the sub account fund
                         */
                        JournalFundTransaction.prototype.setToSubAccountFund = function (subAccountTo) {
                            this.subAccountTo = subAccountTo;
                        };
                        /**
                         * Gets the result of getToSubAccountFund as one of the well-known types.
                         *
                         * @return the type of null if it wasn't one of the well known types.
                         */
                        JournalFundTransaction.prototype.getToSubAccountFundEnum = function () {
                            return SubAccountType_fromOfx(this.getToSubAccountFund());
                        };
                        /**
                         * Gets the total for the transaction.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @return the total
                         */
                        JournalFundTransaction.prototype.getTotal = function () {
                            return this.total;
                        };
                        /**
                         * Sets the total for the transaction.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @param total the total
                         */
                        JournalFundTransaction.prototype.setTotal = function (total) {
                            this.total = total;
                        };
                        return JournalFundTransaction;
                    })(transactions.BaseOtherInvestmentTransaction);
                    transactions.JournalFundTransaction = JournalFundTransaction;
                    Aggregate_add(JournalFundTransaction, "JRNLFUND");
                    Element_add(JournalFundTransaction, { name: "SUBACCTFROM", order: 20, type: String, read: JournalFundTransaction.prototype.getFromSubAccountFund, write: JournalFundTransaction.prototype.setFromSubAccountFund });
                    Element_add(JournalFundTransaction, { name: "SUBACCTTO", order: 30, type: String, read: JournalFundTransaction.prototype.getToSubAccountFund, write: JournalFundTransaction.prototype.setToSubAccountFund });
                    Element_add(JournalFundTransaction, { name: "TOTAL", order: 40, type: Number, read: JournalFundTransaction.prototype.getTotal, write: JournalFundTransaction.prototype.setTotal });
                })(transactions = investment.transactions || (investment.transactions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
///<reference path='../../investment/accounts/SubAccountType'/>
///<reference path='../../seclist/SecurityId'/>
///<reference path='BaseOtherInvestmentTransaction'/>
///<reference path='TransactionWithSecurity'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var transactions;
                (function (transactions) {
                    var SubAccountType_fromOfx = ofx4js.domain.data.investment.accounts.SubAccountType_fromOfx;
                    var SecurityId = ofx4js.domain.data.seclist.SecurityId;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * Transaction for journal security transactions between sub-accounts within the same investment
                     * account.
                     * @see "Section 13.9.2.4.4, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var JournalSecurityTransaction = (function (_super) {
                        __extends(JournalSecurityTransaction, _super);
                        function JournalSecurityTransaction() {
                            _super.call(this, 9 /* JOURNAL_SECURITY */);
                        }
                        /**
                         * Gets the id of the security that was transferred. This is a required field according to the OFX
                         * spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the security id of the security that was bought
                         */
                        JournalSecurityTransaction.prototype.getSecurityId = function () {
                            return this.securityId;
                        };
                        /**
                         * Sets the id of the security that was transferred. This is a required field according to the OFX
                         * spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param securityId the security id of the security that was bought
                         */
                        JournalSecurityTransaction.prototype.setSecurityId = function (securityId) {
                            this.securityId = securityId;
                        };
                        /**
                         * Gets the sub account type the transer is from (e.g. CASH, MARGIN, SHORT, OTHER).
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @return the sub account type
                         */
                        JournalSecurityTransaction.prototype.getFromSubAccountFund = function () {
                            return this.subAccountFrom;
                        };
                        /**
                         * Sets the sub account type the transer is from (e.g. CASH, MARGIN, SHORT, OTHER).
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @param subAccountFrom the sub account type
                         */
                        JournalSecurityTransaction.prototype.setFromSubAccountFund = function (subAccountFrom) {
                            this.subAccountFrom = subAccountFrom;
                        };
                        /**
                         * Gets the result of getFromSubAccountFund as one of the well-known types.
                         *
                         * @return the type of null if it wasn't one of the well known types.
                         */
                        JournalSecurityTransaction.prototype.getFromSubAccountFundEnum = function () {
                            return SubAccountType_fromOfx(this.getFromSubAccountFund());
                        };
                        /**
                         * Gets the sub account type that the transfer is to (e.g. CASH, MARGIN, SHORT, OTHER).
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @return the sub account fund
                         */
                        JournalSecurityTransaction.prototype.getToSubAccountFund = function () {
                            return this.subAccountTo;
                        };
                        /**
                         * sets the sub account type that the transfer is to (e.g. CASH, MARGIN, SHORT, OTHER).
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @param subAccountTo the sub account fund
                         */
                        JournalSecurityTransaction.prototype.setToSubAccountFund = function (subAccountTo) {
                            this.subAccountTo = subAccountTo;
                        };
                        /**
                         * Gets the result of getToSubAccountFund as one of the well-known types.
                         *
                         * @return the type of null if it wasn't one of the well known types.
                         */
                        JournalSecurityTransaction.prototype.getToSubAccountFundEnum = function () {
                            return SubAccountType_fromOfx(this.getToSubAccountFund());
                        };
                        /**
                         * Gets the total for the transaction.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @return the total
                         */
                        JournalSecurityTransaction.prototype.getTotal = function () {
                            return this.total;
                        };
                        /**
                         * Sets the total for the transaction.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @param total the total
                         */
                        JournalSecurityTransaction.prototype.setTotal = function (total) {
                            this.total = total;
                        };
                        return JournalSecurityTransaction;
                    })(transactions.BaseOtherInvestmentTransaction);
                    transactions.JournalSecurityTransaction = JournalSecurityTransaction;
                    Aggregate_add(JournalSecurityTransaction, "JRNLSEC");
                    ChildAggregate_add(JournalSecurityTransaction, { required: true, order: 20, type: SecurityId, read: JournalSecurityTransaction.prototype.getSecurityId, write: JournalSecurityTransaction.prototype.setSecurityId });
                    Element_add(JournalSecurityTransaction, { name: "SUBACCTFROM", order: 30, type: String, read: JournalSecurityTransaction.prototype.getFromSubAccountFund, write: JournalSecurityTransaction.prototype.setFromSubAccountFund });
                    Element_add(JournalSecurityTransaction, { name: "SUBACCTTO", order: 40, type: String, read: JournalSecurityTransaction.prototype.getToSubAccountFund, write: JournalSecurityTransaction.prototype.setToSubAccountFund });
                    Element_add(JournalSecurityTransaction, { name: "TOTAL", order: 50, type: Number, read: JournalSecurityTransaction.prototype.getTotal, write: JournalSecurityTransaction.prototype.setTotal });
                })(transactions = investment.transactions || (investment.transactions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
///<reference path='../../investment/accounts/SubAccountType'/>
///<reference path='BaseOtherInvestmentTransaction'/>
///<reference path='OriginalCurrency'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var transactions;
                (function (transactions) {
                    var SubAccountType = ofx4js.domain.data.investment.accounts.SubAccountType;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * Transaction for journal security transactions between sub-accounts within the same investment
                     * account.
                     * @see "Section 13.9.2.4.4, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var MarginInterestTransaction = (function (_super) {
                        __extends(MarginInterestTransaction, _super);
                        function MarginInterestTransaction() {
                            _super.call(this, 10 /* MARGIN_INTEREST */);
                        }
                        /**
                         * Gets the sub account type the margin interest affects (e.g. CASH, MARGIN, SHORT, OTHER).
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @return the sub account type
                         */
                        MarginInterestTransaction.prototype.getSubAccountFund = function () {
                            return this.subAccountFund;
                        };
                        /**
                         * Sets the sub account type the margin interest affects (e.g. CASH, MARGIN, SHORT, OTHER).
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @param subAccountFund the sub account type
                         */
                        MarginInterestTransaction.prototype.setSubAccountFund = function (subAccountFund) {
                            this.subAccountFund = subAccountFund;
                        };
                        /**
                         * Gets the result of getSubAccountFund as one of the well-known types.
                         *
                         * @return the type of null if it wasn't one of the well known types.
                         */
                        MarginInterestTransaction.prototype.getSubAccountFundEnum = function () {
                            var type = this.getSubAccountFund();
                            return type != null ? SubAccountType[type] : null;
                        };
                        /**
                         * Gets the total for the transaction.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @return the total
                         */
                        MarginInterestTransaction.prototype.getTotal = function () {
                            return this.total;
                        };
                        /**
                         * Sets the total for the transaction.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @param total the total
                         */
                        MarginInterestTransaction.prototype.setTotal = function (total) {
                            this.total = total;
                        };
                        /**
                         * Gets the currency code for the transaction. Only one of currency code or original currency
                         * info should be set according to the OFX spec. If neither are set, means the default currency.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the currency code for the transaction.
                         */
                        MarginInterestTransaction.prototype.getCurrencyCode = function () {
                            return this.currencyCode;
                        };
                        /**
                         * Sets the currency code for the transaction. Only one of currency code or original currency
                         * info should be set according to the OFX spec. If neither are set, means the default currency.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param currencyCode the currency code for the transaction.
                         */
                        MarginInterestTransaction.prototype.setCurrencyCode = function (currencyCode) {
                            this.currencyCode = currencyCode;
                            this.originalCurrencyInfo = null;
                        };
                        /**
                         * Gets the original currency info for the transaction.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the original currency info for the transaction.
                         */
                        MarginInterestTransaction.prototype.getOriginalCurrencyInfo = function () {
                            return this.originalCurrencyInfo;
                        };
                        /**
                         * Sets the original currency info for the transaction.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param originalCurrency the original currency info for the transaction.
                         */
                        MarginInterestTransaction.prototype.setOriginalCurrencyInfo = function (originalCurrency) {
                            this.originalCurrencyInfo = originalCurrency;
                            this.currencyCode = null;
                        };
                        return MarginInterestTransaction;
                    })(transactions.BaseOtherInvestmentTransaction);
                    transactions.MarginInterestTransaction = MarginInterestTransaction;
                    Aggregate_add(MarginInterestTransaction, "MARGININTEREST");
                    Element_add(MarginInterestTransaction, { name: "SUBACCTFUND", order: 30, type: String, read: MarginInterestTransaction.prototype.getSubAccountFund, write: MarginInterestTransaction.prototype.setSubAccountFund });
                    Element_add(MarginInterestTransaction, { name: "TOTAL", order: 40, type: Number, read: MarginInterestTransaction.prototype.getTotal, write: MarginInterestTransaction.prototype.setTotal });
                    Element_add(MarginInterestTransaction, { name: "CURRENCY", order: 110, type: String, read: MarginInterestTransaction.prototype.getCurrencyCode, write: MarginInterestTransaction.prototype.setCurrencyCode });
                    Element_add(MarginInterestTransaction, { name: "ORIGCURRENCY", order: 120, type: transactions.OriginalCurrency, read: MarginInterestTransaction.prototype.getOriginalCurrencyInfo, write: MarginInterestTransaction.prototype.setOriginalCurrencyInfo });
                })(transactions = investment.transactions || (investment.transactions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var transactions;
                (function (transactions) {
                    /**
                     * Type of sale for options.
                     * @see "Section 13.9.2.4.2, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    (function (OptionSellType) {
                        OptionSellType[OptionSellType["SELL_TO_CLOSE"] = 0] = "SELL_TO_CLOSE";
                        OptionSellType[OptionSellType["SELL_TO_OPEN"] = 1] = "SELL_TO_OPEN";
                    })(transactions.OptionSellType || (transactions.OptionSellType = {}));
                    var OptionSellType = transactions.OptionSellType;
                    function OptionSellType_fromOfx(ofxVal) {
                        if ("SELLTOOPEN" === ofxVal) {
                            return 1 /* SELL_TO_OPEN */;
                        }
                        else if ("SELLTOCLOSE" === ofxVal) {
                            return 0 /* SELL_TO_CLOSE */;
                        }
                        else {
                            return null;
                        }
                    }
                    transactions.OptionSellType_fromOfx = OptionSellType_fromOfx;
                })(transactions = investment.transactions || (investment.transactions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
///<reference path='../../investment/accounts/SubAccountType'/>
///<reference path='../../investment/positions/Inv401KSource'/>
///<reference path='../../seclist/SecurityId'/>
///<reference path='BaseOtherInvestmentTransaction'/>
///<reference path='TransactionWithSecurity'/>
///<reference path='OriginalCurrency'/>
///<reference path='IncomeType'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var transactions;
                (function (transactions) {
                    var SubAccountType_fromOfx = ofx4js.domain.data.investment.accounts.SubAccountType_fromOfx;
                    var Inv401KSource_fromOfx = ofx4js.domain.data.investment.positions.Inv401KSource_fromOfx;
                    var SecurityId = ofx4js.domain.data.seclist.SecurityId;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * Transaction for reinvestment transactions.
                     * @see "Section 13.9.2.4.4, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var ReinvestIncomeTransaction = (function (_super) {
                        __extends(ReinvestIncomeTransaction, _super);
                        function ReinvestIncomeTransaction() {
                            _super.call(this, 11 /* REINVEST_INCOME */);
                        }
                        /**
                         * Gets the id of the security that was reinvested in. This is a required field according to the
                         * OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the security id of the security that was reinvested in
                         */
                        ReinvestIncomeTransaction.prototype.getSecurityId = function () {
                            return this.securityId;
                        };
                        /**
                         * Sets the id of the security that was reinvested in. This is a required field according to the
                         * OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param securityId the security id of the security that was reinvested in
                         */
                        ReinvestIncomeTransaction.prototype.setSecurityId = function (securityId) {
                            this.securityId = securityId;
                        };
                        /**
                         * Gets the type of income. One of "CGLONG" (long term capital gains), "CGSHORT" (short term
                         * capital gains), "DIV" (dividend), INTEREST, or MISC. This is a required field according to the
                         * OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec" This is a required field according to the OFX spec.
                         *
                         * @return the type of income
                         */
                        ReinvestIncomeTransaction.prototype.getIncomeType = function () {
                            return this.incomeType;
                        };
                        /**
                         * Sets the type of income. One of "CGLONG" (long term capital gains), "CGSHORT" (short term
                         * capital gains), "DIV" (dividend), INTEREST, or MISC. This is a required field according to the
                         * OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec" This is a required field according to the OFX spec.
                         *
                         * @param incomeType the type of income
                         */
                        ReinvestIncomeTransaction.prototype.setIncomeType = function (incomeType) {
                            this.incomeType = incomeType;
                        };
                        /**
                         * Gets the type of income as one of the well-known types.
                         *
                         * @return the income type or null if it's not one of the well-known types
                         */
                        ReinvestIncomeTransaction.prototype.getIncomeTypeEnum = function () {
                            return transactions.IncomeType_fromOfx(this.getIncomeType());
                        };
                        /**
                         * Gets the total income received. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @return the total
                         */
                        ReinvestIncomeTransaction.prototype.getTotal = function () {
                            return this.total;
                        };
                        /**
                         * Sets the total income received. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @param total the total
                         */
                        ReinvestIncomeTransaction.prototype.setTotal = function (total) {
                            this.total = total;
                        };
                        /**
                         * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER). This is a
                         * required field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the sub account type
                         */
                        ReinvestIncomeTransaction.prototype.getSubAccountSecurity = function () {
                            return this.subAccountSecurity;
                        };
                        /**
                         * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER). This is a
                         * required field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param subAccountSecurity the sub account type
                         */
                        ReinvestIncomeTransaction.prototype.setSubAccountSecurity = function (subAccountSecurity) {
                            this.subAccountSecurity = subAccountSecurity;
                        };
                        /**
                         * Gets the result of getSubAccountSecurity as one of the well-known types.
                         *
                         * @return the type of null if it wasn't one of the well known types
                         */
                        ReinvestIncomeTransaction.prototype.getSubAccountSecurityEnum = function () {
                            return SubAccountType_fromOfx(this.getSubAccountSecurity());
                        };
                        /**
                         * Gets the number of units of the security that was reinvested in. This is a required field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the number of units purchased
                         */
                        ReinvestIncomeTransaction.prototype.getUnits = function () {
                            return this.units;
                        };
                        /**
                         * Sets the number of units of the security that was reinvested in. This is a required field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param units the number of units purchased
                         */
                        ReinvestIncomeTransaction.prototype.setUnits = function (units) {
                            this.units = units;
                        };
                        /**
                         * Gets the price per commonly-quoted unit. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the per unit price
                         */
                        ReinvestIncomeTransaction.prototype.getUnitPrice = function () {
                            return this.unitPrice;
                        };
                        /**
                         * Sets the price per commonly-quoted unit. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param unitPrice the per unit price
                         */
                        ReinvestIncomeTransaction.prototype.setUnitPrice = function (unitPrice) {
                            this.unitPrice = unitPrice;
                        };
                        /**
                         * Gets the transaction commission for the reinvestment. This is an optional field according to
                         * the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the transaction commision
                         */
                        ReinvestIncomeTransaction.prototype.getCommission = function () {
                            return this.commission;
                        };
                        /**
                         * Sets the transaction commission for the reinvestment. This is an optional field according to
                         * the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param commission the transaction commision
                         */
                        ReinvestIncomeTransaction.prototype.setCommission = function (commission) {
                            this.commission = commission;
                        };
                        /**
                         * Gets the taxes for the reinvestment. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the transaction taxes
                         */
                        ReinvestIncomeTransaction.prototype.getTaxes = function () {
                            return this.taxes;
                        };
                        /**
                         * Sets the taxes for the reinvestment. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param taxes the transaction taxes
                         */
                        ReinvestIncomeTransaction.prototype.setTaxes = function (taxes) {
                            this.taxes = taxes;
                        };
                        /**
                         * Gets the fees for the reinvestment. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the transaction fees
                         */
                        ReinvestIncomeTransaction.prototype.getFees = function () {
                            return this.fees;
                        };
                        /**
                         * Sets the fees for the reinvestment. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param fees the transaction fees
                         */
                        ReinvestIncomeTransaction.prototype.setFees = function (fees) {
                            this.fees = fees;
                        };
                        /**
                         * Gets the load for the reinvestment. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the load
                         */
                        ReinvestIncomeTransaction.prototype.getLoad = function () {
                            return this.load;
                        };
                        /**
                         * Sets the load for the reinvestment. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param load the load
                         */
                        ReinvestIncomeTransaction.prototype.setLoad = function (load) {
                            this.load = load;
                        };
                        /**
                         * Gets whether the income was tax exempt. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return whether the transaction was tax exempt
                         */
                        ReinvestIncomeTransaction.prototype.getTaxExempt = function () {
                            return this.taxExempt;
                        };
                        /**
                         * Sets whether the income was tax exempt. This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param taxExempt whether the transaction was tax exempt
                         */
                        ReinvestIncomeTransaction.prototype.setTaxExempt = function (taxExempt) {
                            this.taxExempt = taxExempt;
                        };
                        /**
                         * Gets the currency code for the transaction. Only one of currency code or original currency
                         * info should be set according to the OFX spec. If neither are set, means the default currency.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the currency code for the transaction
                         */
                        ReinvestIncomeTransaction.prototype.getCurrencyCode = function () {
                            return this.currencyCode;
                        };
                        /**
                         * Sets the currency code for the transaction. Only one of currency code or original currency
                         * info should be set according to the OFX spec. If neither are set, means the default currency.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param currencyCode the currency code for the transaction
                         */
                        ReinvestIncomeTransaction.prototype.setCurrencyCode = function (currencyCode) {
                            this.currencyCode = currencyCode;
                            this.originalCurrencyInfo = null;
                        };
                        /**
                         * Gets the original currency info for the transaction.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the original currency info for the transaction.
                         */
                        ReinvestIncomeTransaction.prototype.getOriginalCurrencyInfo = function () {
                            return this.originalCurrencyInfo;
                        };
                        /**
                         * Sets the original currency info for the transaction.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param originalCurrencyInfo the original currency info for the transaction.
                         */
                        ReinvestIncomeTransaction.prototype.setOriginalCurrencyInfo = function (originalCurrencyInfo) {
                            this.originalCurrencyInfo = originalCurrencyInfo;
                            this.currencyCode = null;
                        };
                        /**
                         * Gets the 401K source for the reinvestment. Should be one of "PRETAX", "AFTERTAX", "MATCH",
                         * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the state withholding
                         */
                        ReinvestIncomeTransaction.prototype.get401kSource = function () {
                            return this.inv401kSource;
                        };
                        /**
                         * Sets the 401K source for the reinvestment. Should be one of "PRETAX", "AFTERTAX", "MATCH",
                         * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param inv401kSource the state withholding
                         */
                        ReinvestIncomeTransaction.prototype.set401kSource = function (inv401kSource) {
                            this.inv401kSource = inv401kSource;
                        };
                        /**
                         * Gets the 401(k) source as one of the well-known types.
                         *
                         * @return the type of close or null if it's not well known
                         */
                        ReinvestIncomeTransaction.prototype.get401kSourceEnum = function () {
                            return Inv401KSource_fromOfx(this.get401kSource());
                        };
                        return ReinvestIncomeTransaction;
                    })(transactions.BaseOtherInvestmentTransaction);
                    transactions.ReinvestIncomeTransaction = ReinvestIncomeTransaction;
                    Aggregate_add(ReinvestIncomeTransaction, "REINVEST");
                    ChildAggregate_add(ReinvestIncomeTransaction, { required: true, order: 20, type: SecurityId, read: ReinvestIncomeTransaction.prototype.getSecurityId, write: ReinvestIncomeTransaction.prototype.setSecurityId });
                    Element_add(ReinvestIncomeTransaction, { name: "INCOMETYPE", required: true, order: 30, type: String, read: ReinvestIncomeTransaction.prototype.getIncomeType, write: ReinvestIncomeTransaction.prototype.setIncomeType });
                    Element_add(ReinvestIncomeTransaction, { name: "TOTAL", required: true, order: 40, type: Number, read: ReinvestIncomeTransaction.prototype.getTotal, write: ReinvestIncomeTransaction.prototype.setTotal });
                    Element_add(ReinvestIncomeTransaction, { name: "SUBACCTSEC", order: 50, type: String, read: ReinvestIncomeTransaction.prototype.getSubAccountSecurity, write: ReinvestIncomeTransaction.prototype.setSubAccountSecurity });
                    Element_add(ReinvestIncomeTransaction, { name: "UNITS", required: true, order: 60, type: Number, read: ReinvestIncomeTransaction.prototype.getUnits, write: ReinvestIncomeTransaction.prototype.setUnits });
                    Element_add(ReinvestIncomeTransaction, { name: "UNITPRICE", required: true, order: 70, type: Number, read: ReinvestIncomeTransaction.prototype.getUnitPrice, write: ReinvestIncomeTransaction.prototype.setUnitPrice });
                    Element_add(ReinvestIncomeTransaction, { name: "COMMISSION", order: 80, type: Number, read: ReinvestIncomeTransaction.prototype.getCommission, write: ReinvestIncomeTransaction.prototype.setCommission });
                    Element_add(ReinvestIncomeTransaction, { name: "TAXES", order: 90, type: Number, read: ReinvestIncomeTransaction.prototype.getTaxes, write: ReinvestIncomeTransaction.prototype.setTaxes });
                    Element_add(ReinvestIncomeTransaction, { name: "FEES", order: 100, type: Number, read: ReinvestIncomeTransaction.prototype.getFees, write: ReinvestIncomeTransaction.prototype.setFees });
                    Element_add(ReinvestIncomeTransaction, { name: "LOAD", order: 110, type: Number, read: ReinvestIncomeTransaction.prototype.getLoad, write: ReinvestIncomeTransaction.prototype.setLoad });
                    Element_add(ReinvestIncomeTransaction, { name: "TAXEXEMPT", order: 120, type: Boolean, read: ReinvestIncomeTransaction.prototype.getTaxExempt, write: ReinvestIncomeTransaction.prototype.setTaxExempt });
                    Element_add(ReinvestIncomeTransaction, { name: "CURRENCY", order: 130, type: String, read: ReinvestIncomeTransaction.prototype.getCurrencyCode, write: ReinvestIncomeTransaction.prototype.setCurrencyCode });
                    Element_add(ReinvestIncomeTransaction, { name: "ORIGCURRENCY", order: 140, type: transactions.OriginalCurrency, read: ReinvestIncomeTransaction.prototype.getOriginalCurrencyInfo, write: ReinvestIncomeTransaction.prototype.setOriginalCurrencyInfo });
                    Element_add(ReinvestIncomeTransaction, { name: "INV401KSOURCE", order: 150, type: String, read: ReinvestIncomeTransaction.prototype.get401kSource, write: ReinvestIncomeTransaction.prototype.set401kSource });
                })(transactions = investment.transactions || (investment.transactions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var transactions;
                (function (transactions) {
                    /**
                     * Related option transaction type.
                     * @see "Section 13.9.2.4.4, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    (function (RelatedOptionType) {
                        RelatedOptionType[RelatedOptionType["SPREAD"] = 0] = "SPREAD";
                        RelatedOptionType[RelatedOptionType["STRADDLE"] = 1] = "STRADDLE";
                        RelatedOptionType[RelatedOptionType["NONE"] = 2] = "NONE";
                        RelatedOptionType[RelatedOptionType["OTHER"] = 3] = "OTHER";
                    })(transactions.RelatedOptionType || (transactions.RelatedOptionType = {}));
                    var RelatedOptionType = transactions.RelatedOptionType;
                    function RelatedOptionType_fromOfx(ofxVal) {
                        if ("SPREAD" === ofxVal) {
                            return 0 /* SPREAD */;
                        }
                        else if ("STRADDLE" === ofxVal) {
                            return 1 /* STRADDLE */;
                        }
                        else if ("NONE" === ofxVal) {
                            return 2 /* NONE */;
                        }
                        else if ("OTHER" === ofxVal) {
                            return 3 /* OTHER */;
                        }
                        else {
                            return null;
                        }
                    }
                    transactions.RelatedOptionType_fromOfx = RelatedOptionType_fromOfx;
                })(transactions = investment.transactions || (investment.transactions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
///<reference path='../../investment/accounts/SubAccountType'/>
///<reference path='../../investment/positions/Inv401KSource'/>
///<reference path='../../seclist/SecurityId'/>
///<reference path='BaseOtherInvestmentTransaction'/>
///<reference path='TransactionWithSecurity'/>
///<reference path='OriginalCurrency'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var transactions;
                (function (transactions) {
                    var SubAccountType_fromOfx = ofx4js.domain.data.investment.accounts.SubAccountType_fromOfx;
                    var Inv401KSource_fromOfx = ofx4js.domain.data.investment.positions.Inv401KSource_fromOfx;
                    var SecurityId = ofx4js.domain.data.seclist.SecurityId;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * Transaction for return of capital transactions.
                     * @see "Section 13.9.2.4.4, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var ReturnOfCapitalTransaction = (function (_super) {
                        __extends(ReturnOfCapitalTransaction, _super);
                        function ReturnOfCapitalTransaction() {
                            _super.call(this, 12 /* RETURN_OF_CAPITAL */);
                        }
                        /**
                         * Gets the id of the security that capital was returned from. This is a required field according
                         * to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the security id of the security that capital was returned from
                         */
                        ReturnOfCapitalTransaction.prototype.getSecurityId = function () {
                            return this.securityId;
                        };
                        /**
                         * Sets the id of the security that capital was returned from. This is a required field according
                         * to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param securityId the security id of the security that capital was returned from
                         */
                        ReturnOfCapitalTransaction.prototype.setSecurityId = function (securityId) {
                            this.securityId = securityId;
                        };
                        /**
                         * Gets the total amount of capital returned. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @return the total
                         */
                        ReturnOfCapitalTransaction.prototype.getTotal = function () {
                            return this.total;
                        };
                        /**
                         * Sets the total amount of capital returned. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @param total the total
                         */
                        ReturnOfCapitalTransaction.prototype.setTotal = function (total) {
                            this.total = total;
                        };
                        /**
                         * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER). This is a
                         * required field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the sub account type
                         */
                        ReturnOfCapitalTransaction.prototype.getSubAccountSecurity = function () {
                            return this.subAccountSecurity;
                        };
                        /**
                         * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER). This is a
                         * required field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param subAccountSecurity the sub account type
                         */
                        ReturnOfCapitalTransaction.prototype.setSubAccountSecurity = function (subAccountSecurity) {
                            this.subAccountSecurity = subAccountSecurity;
                        };
                        /**
                         * Gets the result of getSubAccountSecurity as one of the well-known types.
                         *
                         * @return the type of null if it wasn't one of the well known types.
                         */
                        ReturnOfCapitalTransaction.prototype.getSubAccountSecurityEnum = function () {
                            return SubAccountType_fromOfx(this.getSubAccountSecurity());
                        };
                        /**
                         * Gets the sub account type that the transaction affects.
                         * (e.g. CASH, MARGIN, SHORT, OTHER). This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the sub account fund
                         */
                        ReturnOfCapitalTransaction.prototype.getSubAccountFund = function () {
                            return this.subAccountFund;
                        };
                        /**
                         * Sets the sub account type that the transaction affects.
                         * (e.g. CASH, MARGIN, SHORT, OTHER). This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param subAccountFund the sub account fund
                         */
                        ReturnOfCapitalTransaction.prototype.setSubAccountFund = function (subAccountFund) {
                            this.subAccountFund = subAccountFund;
                        };
                        /**
                         * Gets the result of getSubAccountFund as one of the well-known types.
                         *
                         * @return the type of null if it wasn't one of the well known types
                         */
                        ReturnOfCapitalTransaction.prototype.getSubAccountFundEnum = function () {
                            return SubAccountType_fromOfx(this.getSubAccountFund());
                        };
                        /**
                         * Gets the currency code for the transaction. Only one of currency code or original currency
                         * info should be set according to the OFX spec. If neither are set, means the default currency.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the currency code for the transaction
                         */
                        ReturnOfCapitalTransaction.prototype.getCurrencyCode = function () {
                            return this.currencyCode;
                        };
                        /**
                         * Sets the currency code for the transaction. Only one of currency code or original currency
                         * info should be set according to the OFX spec. If neither are set, means the default currency.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param currencyCode the currency code for the transaction
                         */
                        ReturnOfCapitalTransaction.prototype.setCurrencyCode = function (currencyCode) {
                            this.currencyCode = currencyCode;
                            this.originalCurrencyInfo = null;
                        };
                        /**
                         * Gets the original currency info for the transaction.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the currency code for the transaction.
                         */
                        ReturnOfCapitalTransaction.prototype.getOriginalCurrencyInfo = function () {
                            return this.originalCurrencyInfo;
                        };
                        /**
                         * Sets the original currency info for the transaction.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param originalCurrencyInfo the currency code for the transaction.
                         */
                        ReturnOfCapitalTransaction.prototype.setOriginalCurrencyInfo = function (originalCurrencyInfo) {
                            this.originalCurrencyInfo = originalCurrencyInfo;
                            this.currencyCode = null;
                        };
                        /**
                         * Gets the 401K source for the reinvestment. Should be one of "PRETAX", "AFTERTAX", "MATCH",
                         * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the state withholding
                         */
                        ReturnOfCapitalTransaction.prototype.get401kSource = function () {
                            return this.inv401kSource;
                        };
                        /**
                         * Sets the 401K source for the reinvestment. Should be one of "PRETAX", "AFTERTAX", "MATCH",
                         * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param inv401kSource the state withholding
                         */
                        ReturnOfCapitalTransaction.prototype.set401kSource = function (inv401kSource) {
                            this.inv401kSource = inv401kSource;
                        };
                        /**
                         * Gets the 401(k) source as one of the well-known types.
                         *
                         * @return the type of close or null if it's not well known.
                         */
                        ReturnOfCapitalTransaction.prototype.get401kSourceEnum = function () {
                            return Inv401KSource_fromOfx(this.get401kSource());
                        };
                        return ReturnOfCapitalTransaction;
                    })(transactions.BaseOtherInvestmentTransaction);
                    transactions.ReturnOfCapitalTransaction = ReturnOfCapitalTransaction;
                    Aggregate_add(ReturnOfCapitalTransaction, "RETOFCAP");
                    ChildAggregate_add(ReturnOfCapitalTransaction, { required: true, order: 20, type: SecurityId, read: ReturnOfCapitalTransaction.prototype.getSecurityId, write: ReturnOfCapitalTransaction.prototype.setSecurityId });
                    Element_add(ReturnOfCapitalTransaction, { name: "TOTAL", required: true, order: 40, type: Number, read: ReturnOfCapitalTransaction.prototype.getTotal, write: ReturnOfCapitalTransaction.prototype.setTotal });
                    Element_add(ReturnOfCapitalTransaction, { name: "SUBACCTSEC", order: 50, type: String, read: ReturnOfCapitalTransaction.prototype.getSubAccountSecurity, write: ReturnOfCapitalTransaction.prototype.setSubAccountSecurity });
                    Element_add(ReturnOfCapitalTransaction, { name: "SUBACCTFUND", order: 140, type: String, read: ReturnOfCapitalTransaction.prototype.getSubAccountFund, write: ReturnOfCapitalTransaction.prototype.setSubAccountFund });
                    Element_add(ReturnOfCapitalTransaction, { name: "CURRENCY", order: 110, type: String, read: ReturnOfCapitalTransaction.prototype.getCurrencyCode, write: ReturnOfCapitalTransaction.prototype.setCurrencyCode });
                    Element_add(ReturnOfCapitalTransaction, { name: "ORIGCURRENCY", order: 120, type: transactions.OriginalCurrency, read: ReturnOfCapitalTransaction.prototype.getOriginalCurrencyInfo, write: ReturnOfCapitalTransaction.prototype.setOriginalCurrencyInfo });
                    Element_add(ReturnOfCapitalTransaction, { name: "INV401KSOURCE", order: 180, type: String, read: ReturnOfCapitalTransaction.prototype.get401kSource, write: ReturnOfCapitalTransaction.prototype.set401kSource });
                })(transactions = investment.transactions || (investment.transactions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var transactions;
                (function (transactions) {
                    /**
                     * Reason debt was sold.
                     * @see "Section 13.9.2.4.2, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    (function (SellDebtReason) {
                        SellDebtReason[SellDebtReason["CALL"] = 0] = "CALL";
                        SellDebtReason[SellDebtReason["SELL"] = 1] = "SELL";
                        SellDebtReason[SellDebtReason["MATURITY"] = 2] = "MATURITY";
                    })(transactions.SellDebtReason || (transactions.SellDebtReason = {}));
                    var SellDebtReason = transactions.SellDebtReason;
                    function SellDebtReason_fromOfx(ofxVal) {
                        if ("CALL" === ofxVal) {
                            return 0 /* CALL */;
                        }
                        else if ("SELL" === ofxVal) {
                            return 1 /* SELL */;
                        }
                        else if ("MATURITY" === ofxVal) {
                            return 2 /* MATURITY */;
                        }
                        else {
                            return null;
                        }
                    }
                    transactions.SellDebtReason_fromOfx = SellDebtReason_fromOfx;
                })(transactions = investment.transactions || (investment.transactions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
///<reference path='BaseSellInvestmentTransaction'/>
///<reference path='SellDebtReason'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var transactions;
                (function (transactions) {
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * Transaction for selling debt (i.e. bonds, CDs, etc.,).
                     * @see "Section 13.9.2.4.4, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var SellDebtTransaction = (function (_super) {
                        __extends(SellDebtTransaction, _super);
                        function SellDebtTransaction() {
                            _super.call(this, 13 /* SELL_DEBT */);
                        }
                        /**
                         * Gets the reason for the sale. One of "CALL" (the debt was called), "SELL" (the debt was sold),
                         * "MATURITY" (the debt reached maturity).
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @return The reason for the sale
                         */
                        SellDebtTransaction.prototype.getSellReason = function () {
                            return this.sellReason;
                        };
                        /**
                         * Sets the reason for the sale. One of "CALL" (the debt was called), "SELL" (the debt was sold),
                         * "MATURITY" (the debt reached maturity).
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @param sellReason The reason for the sale
                         */
                        SellDebtTransaction.prototype.setSellReason = function (sellReason) {
                            this.sellReason = sellReason;
                        };
                        /**
                         * Gets the sell reason as one of the well-known types.
                         *
                         * @return the sell reason or null if it's not well known
                         */
                        SellDebtTransaction.prototype.getSellReasonEnum = function () {
                            return transactions.SellDebtReason_fromOfx(this.getSellReason());
                        };
                        /**
                         * Gets the amount of accrued interest on the debt. This is an optional field according to the
                         * OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @return the amount of accrued interest
                         */
                        SellDebtTransaction.prototype.getAccruedInterest = function () {
                            return this.accruedInterest;
                        };
                        /**
                         * Sets the amount of accrued interest on the debt. This is an optional field according to the
                         * OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @param accruedInterest the amount of accrued interest
                         */
                        SellDebtTransaction.prototype.setAccruedInterest = function (accruedInterest) {
                            this.accruedInterest = accruedInterest;
                        };
                        return SellDebtTransaction;
                    })(transactions.BaseSellInvestmentTransaction);
                    transactions.SellDebtTransaction = SellDebtTransaction;
                    Aggregate_add(SellDebtTransaction, "SELLDEBT");
                    Element_add(SellDebtTransaction, { name: "SELLREASON", order: 30, type: String, read: SellDebtTransaction.prototype.getSellReason, write: SellDebtTransaction.prototype.setSellReason });
                    Element_add(SellDebtTransaction, { name: "ACCRDINT", order: 40, type: Number, read: SellDebtTransaction.prototype.getAccruedInterest, write: SellDebtTransaction.prototype.setAccruedInterest });
                })(transactions = investment.transactions || (investment.transactions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var transactions;
                (function (transactions) {
                    /**
                     * Type of sale for stocks and mutual funds.
                     *
                     * @author Jon Perlow
                     */
                    (function (SellType) {
                        SellType[SellType["SELL"] = 0] = "SELL";
                        SellType[SellType["SELL_SHORT"] = 1] = "SELL_SHORT";
                    })(transactions.SellType || (transactions.SellType = {}));
                    var SellType = transactions.SellType;
                    function SellType_fromOfx(ofxVal) {
                        if ("SELL" === ofxVal) {
                            return 0 /* SELL */;
                        }
                        else if ("SELLSHORT" === ofxVal) {
                            return 1 /* SELL_SHORT */;
                        }
                        else {
                            return null;
                        }
                    }
                    transactions.SellType_fromOfx = SellType_fromOfx;
                })(transactions = investment.transactions || (investment.transactions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
///<reference path='BaseSellInvestmentTransaction'/>
///<reference path='SellType'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var transactions;
                (function (transactions) {
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * Transaction for selling mutual fund.
                     * @see "Section 13.9.2.4.4, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var SellMutualFundTransaction = (function (_super) {
                        __extends(SellMutualFundTransaction, _super);
                        function SellMutualFundTransaction() {
                            _super.call(this, 14 /* SELL_MUTUAL_FUND */);
                        }
                        /**
                         * Gets the type of sale. One of "SELL" or "SELLSHORT".
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @return The type of sale
                         */
                        SellMutualFundTransaction.prototype.getSellType = function () {
                            return this.sellType;
                        };
                        /**
                         * Sets the type of sale. One of "SELL" or "SELLSHORT".
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @param sellType The type of sale
                         */
                        SellMutualFundTransaction.prototype.setSellType = function (sellType) {
                            this.sellType = sellType;
                        };
                        /**
                         * Gets the sell type as one of the well-known types.
                         *
                         * @return the type of sale or null if it's not known.
                         */
                        SellMutualFundTransaction.prototype.getSellTypeEnum = function () {
                            return transactions.SellType_fromOfx(this.sellType);
                        };
                        /**
                         * Gets the average cost basis of the sale.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @return The average cost basis of the sale
                         */
                        SellMutualFundTransaction.prototype.getAverageCostBasis = function () {
                            return this.averageCostBasis;
                        };
                        /**
                         * Sets the average cost basis of the sale.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @param averageCostBasis The average cost basis of the sale
                         */
                        SellMutualFundTransaction.prototype.setAverageCostBasis = function (averageCostBasis) {
                            this.averageCostBasis = averageCostBasis;
                        };
                        /**
                         * Gets any related transaction id for a mutual fund sale (e.g. for a mutual fund exchange).
                         * This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @return the related transaction id
                         */
                        SellMutualFundTransaction.prototype.getRelatedTransactionId = function () {
                            return this.relatedTransactionId;
                        };
                        /**
                         * Sets any related transaction id for a mutual fund sale (e.g. for a mutual fund exchange).
                         * This is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @param relatedTransactionId the related transaction id
                         */
                        SellMutualFundTransaction.prototype.setRelatedTransactionId = function (relatedTransactionId) {
                            this.relatedTransactionId = relatedTransactionId;
                        };
                        return SellMutualFundTransaction;
                    })(transactions.BaseSellInvestmentTransaction);
                    transactions.SellMutualFundTransaction = SellMutualFundTransaction;
                    Aggregate_add(SellMutualFundTransaction, "SELLMF");
                    Element_add(SellMutualFundTransaction, { name: "SELLTYPE", order: 20, type: String, read: SellMutualFundTransaction.prototype.getSellType, write: SellMutualFundTransaction.prototype.setSellType });
                    Element_add(SellMutualFundTransaction, { name: "AVGCOSTBASIS", order: 30, type: Number, read: SellMutualFundTransaction.prototype.getAverageCostBasis, write: SellMutualFundTransaction.prototype.setAverageCostBasis });
                    Element_add(SellMutualFundTransaction, { name: "RELFITID", order: 40, type: String, read: SellMutualFundTransaction.prototype.getRelatedTransactionId, write: SellMutualFundTransaction.prototype.setRelatedTransactionId });
                })(transactions = investment.transactions || (investment.transactions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
///<reference path='../../investment/positions/ShortOptionSecurity'/>
///<reference path='BaseSellInvestmentTransaction'/>
///<reference path='OptionSellType'/>
///<reference path='RelatedOptionType'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var transactions;
                (function (transactions) {
                    var ShortOptionSecurity_fromOfx = ofx4js.domain.data.investment.positions.ShortOptionSecurity_fromOfx;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * Transaction for selling options.
                     * @see "Section 13.9.2.4.4, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var SellOptionTransaction = (function (_super) {
                        __extends(SellOptionTransaction, _super);
                        function SellOptionTransaction() {
                            _super.call(this, 15 /* SELL_OPTION */);
                        }
                        /**
                         * Gets the type of option sale (i.e. "SELLTOCLOSE" or "SELLTOOPEN"). This is a required field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @return the option sell type
                         */
                        SellOptionTransaction.prototype.getOptionSellType = function () {
                            return this.optionSellType;
                        };
                        /**
                         * Sets the type of option sale (i.e. "SELLTOCLOSE" or "SELLTOOPEN"). This is a required field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @param optionSellType the option sell type
                         */
                        SellOptionTransaction.prototype.setOptionSellType = function (optionSellType) {
                            this.optionSellType = optionSellType;
                        };
                        /**
                         * Gets the option sell type as one of the well-known types.
                         *
                         * @return the type of sale or null if it's not known.
                         */
                        SellOptionTransaction.prototype.getOptionSellTypeEnum = function () {
                            return transactions.OptionSellType_fromOfx(this.optionSellType);
                        };
                        /**
                         * Gets the number of shares per contact. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @return the number of shares per contact
                         */
                        SellOptionTransaction.prototype.getSharesPerContact = function () {
                            return this.sharesPerContact;
                        };
                        /**
                         * Sets the number of shares per contact. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @param sharesPerContact the number of shares per contact
                         */
                        SellOptionTransaction.prototype.setSharesPerContact = function (sharesPerContact) {
                            this.sharesPerContact = sharesPerContact;
                        };
                        /**
                         * Gets a related transaction for the option sale for complex option transactions. This
                         * is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @return The related transaction id
                         */
                        SellOptionTransaction.prototype.getRelatedTransactionId = function () {
                            return this.relatedTransactionId;
                        };
                        /**
                         * Sets a related transaction for the option sale for complex option transactions. This
                         * is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @param relatedTransactionId The related transaction id
                         */
                        SellOptionTransaction.prototype.setRelatedTransactionId = function (relatedTransactionId) {
                            this.relatedTransactionId = relatedTransactionId;
                        };
                        /**
                         * Gets the type for the related transaction. One of "SPREAD", "STRADDLE", "NONE", "OTHER". This
                         * is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @return The related tansaction type
                         */
                        SellOptionTransaction.prototype.getRelatedType = function () {
                            return this.relatedType;
                        };
                        /**
                         * Sets the type for the related transaction. One of "SPREAD", "STRADDLE", "NONE", "OTHER". This
                         * is an optional field according to the OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @param relatedType The related tansaction type
                         */
                        SellOptionTransaction.prototype.setRelatedType = function (relatedType) {
                            this.relatedType = relatedType;
                        };
                        /**
                         * Gets the related transaction as one of the well-known types.
                         *
                         * @return the related tansaction type or null if it's not well known
                         */
                        SellOptionTransaction.prototype.getRelatedTypeEnum = function () {
                            return transactions.RelatedOptionType_fromOfx(this.getRelatedType());
                        };
                        /**
                         * Gets how the option sale is secured. One of "NAKED" or "COVERED". This is an optional field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @return how the option sale is secured
                         */
                        SellOptionTransaction.prototype.getSecured = function () {
                            return this.secured;
                        };
                        /**
                         * Sets how the option sale is secured. One of "NAKED" or "COVERED". This is an optional field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @param secured how the option sale is secured
                         */
                        SellOptionTransaction.prototype.setSecured = function (secured) {
                            this.secured = secured;
                        };
                        /**
                         * Gets how the option sale is secured as one of the well-known types.
                         *
                         * @return the type indicating how the option is secured or null if it's not well known.
                         */
                        SellOptionTransaction.prototype.getSecuredEnum = function () {
                            return ShortOptionSecurity_fromOfx(this.getSecured());
                        };
                        return SellOptionTransaction;
                    })(transactions.BaseSellInvestmentTransaction);
                    transactions.SellOptionTransaction = SellOptionTransaction;
                    Aggregate_add(SellOptionTransaction, "SELLOPT");
                    Element_add(SellOptionTransaction, { name: "OPTSELLTYPE", required: true, order: 20, type: String, read: SellOptionTransaction.prototype.getOptionSellType, write: SellOptionTransaction.prototype.setOptionSellType });
                    Element_add(SellOptionTransaction, { name: "SHPERCTRCT", required: true, order: 30, type: Number, read: SellOptionTransaction.prototype.getSharesPerContact, write: SellOptionTransaction.prototype.setSharesPerContact });
                    Element_add(SellOptionTransaction, { name: "RELFITID", order: 40, type: String, read: SellOptionTransaction.prototype.getRelatedTransactionId, write: SellOptionTransaction.prototype.setRelatedTransactionId });
                    Element_add(SellOptionTransaction, { name: "RELTYPE", order: 50, type: String, read: SellOptionTransaction.prototype.getRelatedType, write: SellOptionTransaction.prototype.setRelatedType });
                    Element_add(SellOptionTransaction, { name: "SECURED", order: 60, type: String, read: SellOptionTransaction.prototype.getSecured, write: SellOptionTransaction.prototype.setSecured });
                })(transactions = investment.transactions || (investment.transactions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='BaseSellInvestmentTransaction'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var transactions;
                (function (transactions) {
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    /**
                     * Transaction for buying other types of securities.
                     * @see "Section 13.9.2.4.4, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var SellOtherTransaction = (function (_super) {
                        __extends(SellOtherTransaction, _super);
                        function SellOtherTransaction() {
                            _super.call(this, 16 /* SELL_OTHER */);
                        }
                        return SellOtherTransaction;
                    })(transactions.BaseSellInvestmentTransaction);
                    transactions.SellOtherTransaction = SellOtherTransaction;
                    Aggregate_add(SellOtherTransaction, "SELLOTHER");
                })(transactions = investment.transactions || (investment.transactions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
///<reference path='BaseSellInvestmentTransaction'/>
///<reference path='SellType'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var transactions;
                (function (transactions) {
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * Transaction for selling stock.
                     * @see "Section 13.9.2.4.4, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var SellStockTransaction = (function (_super) {
                        __extends(SellStockTransaction, _super);
                        function SellStockTransaction() {
                            _super.call(this, 17 /* SELL_STOCK */);
                        }
                        /**
                         * Gets the type of stock sale (i.e. "SELL" or "SELLSHORT"). This is a required field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @return the sell type
                         */
                        SellStockTransaction.prototype.getSellType = function () {
                            return this.sellType;
                        };
                        /**
                         * Sets the type of stock sale (i.e. "SELL" or "SELLSHORT"). This is a required field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.4.4, OFX Spec"
                         *
                         * @param sellType the sell type
                         */
                        SellStockTransaction.prototype.setSellType = function (sellType) {
                            this.sellType = sellType;
                        };
                        /**
                         * Gets the sell type as one of the well-known types.
                         *
                         * @return the type of sale or null if it's not known
                         */
                        SellStockTransaction.prototype.getSellTypeEnum = function () {
                            return transactions.SellType_fromOfx(this.sellType);
                        };
                        return SellStockTransaction;
                    })(transactions.BaseSellInvestmentTransaction);
                    transactions.SellStockTransaction = SellStockTransaction;
                    Aggregate_add(SellStockTransaction, "SELLSTOCK");
                    Element_add(SellStockTransaction, { name: "SELLTYPE", required: true, order: 20, type: String, read: SellStockTransaction.prototype.getSellType, write: SellStockTransaction.prototype.setSellType });
                })(transactions = investment.transactions || (investment.transactions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
///<reference path='../../investment/accounts/SubAccountType'/>
///<reference path='../../investment/positions/Inv401KSource'/>
///<reference path='../../seclist/SecurityId'/>
///<reference path='BaseOtherInvestmentTransaction'/>
///<reference path='OriginalCurrency'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var transactions;
                (function (transactions) {
                    var SubAccountType_fromOfx = ofx4js.domain.data.investment.accounts.SubAccountType_fromOfx;
                    var Inv401KSource_fromOfx = ofx4js.domain.data.investment.positions.Inv401KSource_fromOfx;
                    var SecurityId = ofx4js.domain.data.seclist.SecurityId;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * Transaction for a stock split.
                     * @see "Section 13.9.2.4.4, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var SplitTransaction = (function (_super) {
                        __extends(SplitTransaction, _super);
                        function SplitTransaction() {
                            _super.call(this, 18 /* SPLIT */);
                        }
                        /**
                         * Gets the id of the security for the split. This is a required field according to the OFX
                         * spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the security id of the security for the expsense
                         */
                        SplitTransaction.prototype.getSecurityId = function () {
                            return this.securityId;
                        };
                        /**
                         * Sets the id of the security for the split. This is a required field according to the OFX
                         * spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param securityId the security id of the security for the expsense
                         */
                        SplitTransaction.prototype.setSecurityId = function (securityId) {
                            this.securityId = securityId;
                        };
                        /**
                         * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER). This is a
                         * required field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the sub account type
                         */
                        SplitTransaction.prototype.getSubAccountSecurity = function () {
                            return this.subAccountSecurity;
                        };
                        /**
                         * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER). This is a
                         * required field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param subAccountSecurity the sub account type
                         */
                        SplitTransaction.prototype.setSubAccountSecurity = function (subAccountSecurity) {
                            this.subAccountSecurity = subAccountSecurity;
                        };
                        /**
                         * Gets the result of getSubAccountSecurity as one of the well-known types.
                         *
                         * @return the type of null if it wasn't one of the well known types.
                         */
                        SplitTransaction.prototype.getSubAccountSecurityEnum = function () {
                            return SubAccountType_fromOfx(this.getSubAccountSecurity());
                        };
                        /**
                         * Gets the old number of units for the split. This is a required field according to the OFX
                         * spec.
                         *
                         * @return the old number of units.
                         */
                        SplitTransaction.prototype.getOldUnits = function () {
                            return this.oldUnits;
                        };
                        /**
                         * Sets the old number of units for the split. This is a  equired field according to the OFX
                         * spec.
                         *
                         * @param oldUnits the old number of units.
                         */
                        SplitTransaction.prototype.setOldUnits = function (oldUnits) {
                            this.oldUnits = oldUnits;
                        };
                        /**
                         * Gets the new number of units for the split. This is a required field according to the OFX
                         * spec.
                         *
                         * @return the new number of units.
                         */
                        SplitTransaction.prototype.getNewUnits = function () {
                            return this.newUnits;
                        };
                        /**
                         * Sets the new number of units for the split. This is a required field according to the OFX
                         * spec.
                         *
                         * @param newUnits the new number of units.
                         */
                        SplitTransaction.prototype.setNewUnits = function (newUnits) {
                            this.newUnits = newUnits;
                        };
                        /**
                         * Gets the numerator for the split ratio. This is a required field according to the OFX spec.
                         *
                         * @return the numerator for the split ratio
                         */
                        SplitTransaction.prototype.getNumerator = function () {
                            return this.numerator;
                        };
                        /**
                         * Sets the numerator for the split ratio. This is a required field according to the OFX spec.
                         *
                         * @param numerator the numerator for the split ratio
                         */
                        SplitTransaction.prototype.setNumerator = function (numerator) {
                            this.numerator = numerator;
                        };
                        /**
                         * Gets the denominator for the split ratio. This is a required field according to the OFX spec.
                         *
                         * @return the numerator for the split ratio
                         */
                        SplitTransaction.prototype.getDenominator = function () {
                            return this.denominator;
                        };
                        /**
                         * Sets the denominator for the split ratio. This is a required field according to the OFX spec.
                         *
                         * @param denominator the numerator for the split ratio
                         */
                        SplitTransaction.prototype.setDenominator = function (denominator) {
                            this.denominator = denominator;
                        };
                        /**
                         * Gets the currency code for the transaction. Only one of currency code or original currency
                         * code should be set according to the OFX spec. If neither are set, means the default currency.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the currency code for the transaction
                         */
                        SplitTransaction.prototype.getCurrencyCode = function () {
                            return this.currencyCode;
                        };
                        /**
                         * sets the currency code for the transaction. Only one of currency code or original currency
                         * code should be set according to the OFX spec. If neither are set, means the default currency.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the currency code for the transaction
                         */
                        SplitTransaction.prototype.setCurrencyCode = function (currencyCode) {
                            this.currencyCode = currencyCode;
                            this.originalCurrencyInfo = null;
                        };
                        /**
                         * Gets the original currency info for the transaction.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the original currency info for the transaction
                         */
                        SplitTransaction.prototype.getOriginalCurrencyInfo = function () {
                            return this.originalCurrencyInfo;
                        };
                        /**
                         * Sets the original currency info for the transaction.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the original currency info for the transaction
                         */
                        SplitTransaction.prototype.setOriginalCurrencyInfo = function (originalCurrencyInfo) {
                            this.originalCurrencyInfo = originalCurrencyInfo;
                            this.currencyCode = null;
                        };
                        /**
                         * Gets the cash for fractional units.
                         *
                         * @return the cash for fractional units
                         */
                        SplitTransaction.prototype.getCashForFractionalUnits = function () {
                            return this.cashForFractionalUnits;
                        };
                        /**
                         * Sets the cash for fractional units.
                         *
                         * @param cashForFractionalUnits the cash for fractional units
                         */
                        SplitTransaction.prototype.setCashForFractionalUnits = function (cashForFractionalUnits) {
                            this.cashForFractionalUnits = cashForFractionalUnits;
                        };
                        /**
                         * Gets the sub account type for the fund. (e.g. CASH, MARGIN, SHORT, OTHER).
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the sub account fund
                         */
                        SplitTransaction.prototype.getSubAccountFund = function () {
                            return this.subAccountFund;
                        };
                        /**
                         * Sets the sub account type for the fund. (e.g. CASH, MARGIN, SHORT, OTHER).
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param subAccountFund the sub account fund
                         */
                        SplitTransaction.prototype.setSubAccountFund = function (subAccountFund) {
                            this.subAccountFund = subAccountFund;
                        };
                        /**
                         * Gets the result of getSubAccountFund as one of the well-known types.
                         *
                         * @return the type of null if it wasn't one of the well known types
                         */
                        SplitTransaction.prototype.getSubAccountFundEnum = function () {
                            return SubAccountType_fromOfx(this.getSubAccountFund());
                        };
                        /**
                         * Gets the 401K source for the transaction. Should be one of "PRETAX", "AFTERTAX", "MATCH",
                         * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the 401k source
                         */
                        SplitTransaction.prototype.get401kSource = function () {
                            return this.inv401kSource;
                        };
                        /**
                         * Sets the 401K source for the transaction. Should be one of "PRETAX", "AFTERTAX", "MATCH",
                         * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param inv401kSource the 401k source
                         */
                        SplitTransaction.prototype.set401kSource = function (inv401kSource) {
                            this.inv401kSource = inv401kSource;
                        };
                        /**
                         * Gets the 401k source as one of the well-known types.
                         *
                         * @return the 401k source or null if its not one of the well-known types
                         */
                        SplitTransaction.prototype.get401kSourceEnum = function () {
                            return Inv401KSource_fromOfx(this.get401kSource());
                        };
                        return SplitTransaction;
                    })(transactions.BaseOtherInvestmentTransaction);
                    transactions.SplitTransaction = SplitTransaction;
                    Aggregate_add(SplitTransaction, "SPLIT");
                    ChildAggregate_add(SplitTransaction, { required: true, order: 20, type: SecurityId, read: SplitTransaction.prototype.getSecurityId, write: SplitTransaction.prototype.setSecurityId });
                    Element_add(SplitTransaction, { name: "SUBACCTSEC", order: 30, type: String, read: SplitTransaction.prototype.getSubAccountSecurity, write: SplitTransaction.prototype.setSubAccountSecurity });
                    Element_add(SplitTransaction, { name: "OLDUNITS", order: 40, type: Number, read: SplitTransaction.prototype.getOldUnits, write: SplitTransaction.prototype.setOldUnits });
                    Element_add(SplitTransaction, { name: "NEWUNITS", order: 50, type: Number, read: SplitTransaction.prototype.getNewUnits, write: SplitTransaction.prototype.setNewUnits });
                    Element_add(SplitTransaction, { name: "NUMERATOR", order: 60, type: Number, read: SplitTransaction.prototype.getNumerator, write: SplitTransaction.prototype.setNumerator });
                    Element_add(SplitTransaction, { name: "DENOMINATOR", order: 70, type: Number, read: SplitTransaction.prototype.getDenominator, write: SplitTransaction.prototype.setDenominator });
                    Element_add(SplitTransaction, { name: "CURRENCY", order: 80, type: String, read: SplitTransaction.prototype.getCurrencyCode, write: SplitTransaction.prototype.setCurrencyCode });
                    Element_add(SplitTransaction, { name: "ORIGCURRENCY", order: 90, type: transactions.OriginalCurrency, read: SplitTransaction.prototype.getOriginalCurrencyInfo, write: SplitTransaction.prototype.setOriginalCurrencyInfo });
                    Element_add(SplitTransaction, { name: "FRACCASH", order: 100, type: Number, read: SplitTransaction.prototype.getCashForFractionalUnits, write: SplitTransaction.prototype.setCashForFractionalUnits });
                    Element_add(SplitTransaction, { name: "SUBACCTFUND", order: 110, type: String, read: SplitTransaction.prototype.getSubAccountFund, write: SplitTransaction.prototype.setSubAccountFund });
                    Element_add(SplitTransaction, { name: "INV401KSOURCE", order: 120, type: String, read: SplitTransaction.prototype.get401kSource, write: SplitTransaction.prototype.set401kSource });
                })(transactions = investment.transactions || (investment.transactions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var transactions;
                (function (transactions) {
                    /**
                     * Type of transfer.
                     * @see "Section 13.9.2.4.4, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    (function (TransferAction) {
                        TransferAction[TransferAction["IN"] = 0] = "IN";
                        TransferAction[TransferAction["OUT"] = 1] = "OUT";
                    })(transactions.TransferAction || (transactions.TransferAction = {}));
                    var TransferAction = transactions.TransferAction;
                    function TransferAction_fromOfx(ofxVal) {
                        if ("IN" === ofxVal) {
                            return 0 /* IN */;
                        }
                        else if ("OUT" === ofxVal) {
                            return 1 /* OUT */;
                        }
                        else {
                            return null;
                        }
                    }
                    transactions.TransferAction_fromOfx = TransferAction_fromOfx;
                })(transactions = investment.transactions || (investment.transactions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
///<reference path='../../investment/accounts/SubAccountType'/>
///<reference path='../../investment/positions/Inv401KSource'/>
///<reference path='../../investment/positions/PositionType'/>
///<reference path='../../seclist/SecurityId'/>
///<reference path='BaseOtherInvestmentTransaction'/>
///<reference path='TransferAction'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var investment;
            (function (investment) {
                var transactions;
                (function (transactions) {
                    var SubAccountType_fromOfx = ofx4js.domain.data.investment.accounts.SubAccountType_fromOfx;
                    var Inv401KSource_fromOfx = ofx4js.domain.data.investment.positions.Inv401KSource_fromOfx;
                    var PositionType_fromOfx = ofx4js.domain.data.investment.positions.PositionType_fromOfx;
                    var SecurityId = ofx4js.domain.data.seclist.SecurityId;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * Transaction for transfers.
                     * @see "Section 13.9.2.4.4, OFX Spec"
                     *
                     * @author Jon Perlow
                     */
                    var TransferInvestmentTransaction = (function (_super) {
                        __extends(TransferInvestmentTransaction, _super);
                        // TODO (jonp) -- INVACCTFROM
                        function TransferInvestmentTransaction() {
                            _super.call(this, 19 /* TRANSFER */);
                        }
                        /**
                         * Gets the id of the security that was transferred. This is a required field according to the OFX
                         * spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the security id of the security that was transferred
                         */
                        TransferInvestmentTransaction.prototype.getSecurityId = function () {
                            return this.securityId;
                        };
                        /**
                         * Sets the id of the security that was transferred. This is a required field according to the OFX
                         * spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param securityId the security id of the security that was transferred
                         */
                        TransferInvestmentTransaction.prototype.setSecurityId = function (securityId) {
                            this.securityId = securityId;
                        };
                        /**
                          * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
                          * @see "Section 13.9.2.4.3, OFX Spec"
                          *
                          * @return the sub account type
                          */
                        TransferInvestmentTransaction.prototype.getSubAccountSecurity = function () {
                            return this.subAccountSecurity;
                        };
                        /**
                          * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
                          * @see "Section 13.9.2.4.3, OFX Spec"
                          *
                          * @param subAccountSecurity the sub account type
                          */
                        TransferInvestmentTransaction.prototype.setSubAccountSecurity = function (subAccountSecurity) {
                            this.subAccountSecurity = subAccountSecurity;
                        };
                        /**
                         * Gets the result of getSubAccountSecurity as one of the well-known types.
                         *
                         * @return the type of null if it wasn't one of the well known types.
                         */
                        TransferInvestmentTransaction.prototype.getSubAccountSecurityEnum = function () {
                            return SubAccountType_fromOfx(this.getSubAccountSecurity());
                        };
                        /**
                         * Gets the number of units of the security that was transferred. For security-based actions other
                         * than stock splits, this is the quantity bought. For stocks, mutual funds, and others, this
                         * is the number of shares. For bonds, this is the face value. For options, this is the number of
                         * contacts. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the number of units transferred
                         */
                        TransferInvestmentTransaction.prototype.getUnits = function () {
                            return this.units;
                        };
                        /**
                         * Sets the number of units of the security that was transferred. For security-based actions other
                         * than stock splits, this is the quantity bought. For stocks, mutual funds, and others, this
                         * is the number of shares. For bonds, this is the face value. For options, this is the number of
                         * contacts. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param units the number of units transferred
                         */
                        TransferInvestmentTransaction.prototype.setUnits = function (units) {
                            this.units = units;
                        };
                        /**
                         * Gets the type of transfer. One of "IN" or "OUT". This is a required field according to the
                         * OFX spec.
                         *
                         * @return the type of transfer
                         */
                        TransferInvestmentTransaction.prototype.getTransferAction = function () {
                            return this.transferAction;
                        };
                        /**
                         * Sets the type of transfer. One of "IN" or "OUT". This is a required field according to the
                         * OFX spec.
                         *
                         * @param transferAction the type of transfer
                         */
                        TransferInvestmentTransaction.prototype.setTransferAction = function (transferAction) {
                            this.transferAction = transferAction;
                        };
                        /**
                         * Gets the transfer action as one of the well-known types.
                         *
                         * @return the type of transfer or null if it's not well known
                         */
                        TransferInvestmentTransaction.prototype.getTransferActionEnum = function () {
                            return transactions.TransferAction_fromOfx(this.getTransferAction());
                        };
                        /**
                         * Gets the type of position. One of "LONG" or "SHORT". This is a required field according to the
                         * OFX spec.
                         *
                         * @return the position type
                         */
                        TransferInvestmentTransaction.prototype.getPositionType = function () {
                            return this.positionType;
                        };
                        /**
                         * Sets the type of position. One of "LONG" or "SHORT". This is a required field according to the
                         * OFX spec.
                         *
                         * @param positionType the position type
                         */
                        TransferInvestmentTransaction.prototype.setPositionType = function (positionType) {
                            this.positionType = positionType;
                        };
                        /**
                         * Gets the position type as one of the well-known types.
                         *
                         * @return the position type or null if it's not well known
                         */
                        TransferInvestmentTransaction.prototype.getPositionTypeEnum = function () {
                            return PositionType_fromOfx(this.getPositionType());
                        };
                        /**
                         * Gets the average cost basis for the securities being transfered. This is an optional field
                         * according to the ofx spec.
                         *
                         * @return the average cost basis
                         */
                        TransferInvestmentTransaction.prototype.getAverageCostBasis = function () {
                            return this.averageCostBasis;
                        };
                        /**
                         * Sets the average cost basis for the securities being transfered. This is an optional field
                         * according to the ofx spec.
                         *
                         * @param averageCostBasis the average cost basis
                         */
                        TransferInvestmentTransaction.prototype.setAverageCostBasis = function (averageCostBasis) {
                            this.averageCostBasis = averageCostBasis;
                        };
                        /**
                         * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
                         * share price. For bonds, this is the percentage of par. For options, this is the per share (not
                         * per contact) price. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the per unit price
                         */
                        TransferInvestmentTransaction.prototype.getUnitPrice = function () {
                            return this.unitPrice;
                        };
                        /**
                         * Sets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
                         * share price. For bonds, this is the percentage of par. For options, this is the per share (not
                         * per contact) price. This is a required field according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param unitPrice the per unit price
                         */
                        TransferInvestmentTransaction.prototype.setUnitPrice = function (unitPrice) {
                            this.unitPrice = unitPrice;
                        };
                        /**
                         * Gets the original date of purchase for the securities. This is an optional field according to
                         * the ofx spec.
                         *
                         * @return the original date of purchase
                         */
                        TransferInvestmentTransaction.prototype.getPurchaseDate = function () {
                            return this.purchaseDate;
                        };
                        /**
                         * Sets the original date of purchase for the securities. This is an optional field according to
                         * the ofx spec.
                         *
                         * @param purchaseDate the original date of purchase
                         */
                        TransferInvestmentTransaction.prototype.setPurchaseDate = function (purchaseDate) {
                            this.purchaseDate = purchaseDate;
                        };
                        /**
                         * Gets the 401K source for the transfer. Should be one of "PRETAX", "AFTERTAX", "MATCH",
                         * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @return the state withholding
                         */
                        TransferInvestmentTransaction.prototype.get401kSource = function () {
                            return this.inv401kSource;
                        };
                        /**
                         * Sets the 401K source for the transfer. Should be one of "PRETAX", "AFTERTAX", "MATCH",
                         * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
                         * according to the OFX spec.
                         * @see "Section 13.9.2.4.3, OFX Spec"
                         *
                         * @param inv401kSource the state withholding
                         */
                        TransferInvestmentTransaction.prototype.set401kSource = function (inv401kSource) {
                            this.inv401kSource = inv401kSource;
                        };
                        /**
                         * Gets the 401(k) source as one of the well-known types.
                         *
                         * @return the type of close or null if it's not well known.
                         */
                        TransferInvestmentTransaction.prototype.get401kSourceEnum = function () {
                            return Inv401KSource_fromOfx(this.get401kSource());
                        };
                        return TransferInvestmentTransaction;
                    })(transactions.BaseOtherInvestmentTransaction);
                    transactions.TransferInvestmentTransaction = TransferInvestmentTransaction;
                    Aggregate_add(TransferInvestmentTransaction, "TRANSFER");
                    ChildAggregate_add(TransferInvestmentTransaction, { required: true, order: 20, type: SecurityId, read: TransferInvestmentTransaction.prototype.getSecurityId, write: TransferInvestmentTransaction.prototype.setSecurityId });
                    Element_add(TransferInvestmentTransaction, { name: "SUBACCTSEC", order: 30, type: String, read: TransferInvestmentTransaction.prototype.getSubAccountSecurity, write: TransferInvestmentTransaction.prototype.setSubAccountSecurity });
                    Element_add(TransferInvestmentTransaction, { name: "UNITS", required: true, order: 40, type: Number, read: TransferInvestmentTransaction.prototype.getUnits, write: TransferInvestmentTransaction.prototype.setUnits });
                    Element_add(TransferInvestmentTransaction, { name: "TFERACTION", required: true, order: 50, type: String, read: TransferInvestmentTransaction.prototype.getTransferAction, write: TransferInvestmentTransaction.prototype.setTransferAction });
                    Element_add(TransferInvestmentTransaction, { name: "POSTYPE", required: true, order: 60, type: String, read: TransferInvestmentTransaction.prototype.getPositionType, write: TransferInvestmentTransaction.prototype.setPositionType });
                    Element_add(TransferInvestmentTransaction, { name: "AVGCOSTBASIS", order: 70, type: Number, read: TransferInvestmentTransaction.prototype.getAverageCostBasis, write: TransferInvestmentTransaction.prototype.setAverageCostBasis });
                    Element_add(TransferInvestmentTransaction, { name: "UNITPRICE", required: true, order: 80, type: Number, read: TransferInvestmentTransaction.prototype.getUnitPrice, write: TransferInvestmentTransaction.prototype.setUnitPrice });
                    Element_add(TransferInvestmentTransaction, { name: "DTPURCHASE", order: 90, type: Date, read: TransferInvestmentTransaction.prototype.getPurchaseDate, write: TransferInvestmentTransaction.prototype.setPurchaseDate });
                    Element_add(TransferInvestmentTransaction, { name: "INV401KSOURCE", order: 100, type: String, read: TransferInvestmentTransaction.prototype.get401kSource, write: TransferInvestmentTransaction.prototype.set401kSource });
                })(transactions = investment.transactions || (investment.transactions = {}));
            })(investment = data.investment || (data.investment = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2012 TheStash
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../../meta/Aggregate_add'/>
///<reference path='../../../../../meta/Element_add'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                var info;
                (function (info) {
                    var banking;
                    (function (banking) {
                        var Aggregate_add = ofx4js.meta.Aggregate_add;
                        var Element_add = ofx4js.meta.Element_add;
                        /**
                         * Email Profile
                         * @author Scott Priddy
                         * @see "Section 11.13.2.3 OFX Spec"
                         */
                        var EmailProfile = (function () {
                            function EmailProfile() {
                            }
                            EmailProfile.prototype.getCanEmail = function () {
                                return this.canEmail;
                            };
                            EmailProfile.prototype.setCanEmail = function (canEmail) {
                                this.canEmail = canEmail;
                            };
                            EmailProfile.prototype.getCanNotify = function () {
                                return this.canNotify;
                            };
                            EmailProfile.prototype.setCanNotify = function (canNotify) {
                                this.canNotify = canNotify;
                            };
                            return EmailProfile;
                        })();
                        banking.EmailProfile = EmailProfile;
                        Aggregate_add(EmailProfile, "EMAILPROF");
                        Element_add(EmailProfile, { name: "CANEMAIL", required: true, order: 10, type: Boolean, read: EmailProfile.prototype.getCanEmail, write: EmailProfile.prototype.setCanEmail });
                        Element_add(EmailProfile, { name: "CANNOTIFY", required: true, order: 20, type: Boolean, read: EmailProfile.prototype.getCanNotify, write: EmailProfile.prototype.setCanNotify });
                    })(banking = info.banking || (info.banking = {}));
                })(info = profile.info || (profile.info = {}));
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2012 TheStash
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../../meta/Aggregate_add'/>
///<reference path='../../../../../meta/Element_add'/>
///<reference path='../../../common/ProcessorDayOff'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                var info;
                (function (info) {
                    var banking;
                    (function (banking) {
                        var ProcessorDayOff = ofx4js.domain.data.common.ProcessorDayOff;
                        var Aggregate_add = ofx4js.meta.Aggregate_add;
                        var Element_add = ofx4js.meta.Element_add;
                        /**
                         * Stop Check Profile
                         * @author Scott Priddy
                         * @see "Section 11.13.2.3 OFX Spec"
                         */
                        var StopCheckProfile = (function () {
                            function StopCheckProfile() {
                            }
                            /**
                             * Days of week that no processing occurs: MONDAY, TUESDAY, WEDNESDAY, THURSDAY,
                             * FRIDAY, SATURDAY, or SUNDAY. 0 or more <PROCDAYSOFF> can be sent.
                             * @return List of days during the week that no processing occurs.
                             */
                            StopCheckProfile.prototype.getProcessorDaysOff = function () {
                                return this.processorDaysOff;
                            };
                            StopCheckProfile.prototype.setProcessorDaysOff = function (processorDaysOff) {
                                this.processorDaysOff = processorDaysOff;
                            };
                            /**
                             * Gets time of day that day's processing ends.
                             *
                             * Time formatted as "HHMMSS.XXX[gmt offset[:tz name]]",
                             * the milliseconds and time zone are still optional, and default to GMT.
                             * @see "Section 3.2.8.3 OFX Spec"
                             * @return Time String formatted as "HHMMSS.XXX[gmt offset[:tz name]]"
                             */
                            StopCheckProfile.prototype.getProcessEndTime = function () {
                                return this.processEndTime;
                            };
                            /**
                             * Sets the time of day that day's processing ends.
                             *
                             * Time formatted as "HHMMSS.XXX[gmt offset[:tz name]]",
                             * the milliseconds and time zone are still optional, and default to GMT.
                          
                             * @see "Section 3.2.8.3 OFX Spec"
                             * @param processEndTime formatted as "HHMMSS.XXX[gmt offset[:tz name]]"
                             */
                            StopCheckProfile.prototype.setProcessEndTime = function (processEndTime) {
                                this.processEndTime = processEndTime;
                            };
                            StopCheckProfile.prototype.getCanUseRange = function () {
                                return this.canUseRange;
                            };
                            StopCheckProfile.prototype.setCanUseRange = function (canUseRange) {
                                this.canUseRange = canUseRange;
                            };
                            StopCheckProfile.prototype.getCanUseDescription = function () {
                                return this.canUseDescription;
                            };
                            StopCheckProfile.prototype.setCanUseDescription = function (canUseDescription) {
                                this.canUseDescription = canUseDescription;
                            };
                            StopCheckProfile.prototype.getStopCheckFee = function () {
                                return this.stopCheckFee;
                            };
                            StopCheckProfile.prototype.setStopCheckFee = function (stopCheckFee) {
                                this.stopCheckFee = stopCheckFee;
                            };
                            return StopCheckProfile;
                        })();
                        banking.StopCheckProfile = StopCheckProfile;
                        Aggregate_add(StopCheckProfile, "STPCHKPROF");
                        Element_add(StopCheckProfile, { name: "PROCDAYSOFF", order: 0, type: Array, collectionEntryType: ProcessorDayOff, read: StopCheckProfile.prototype.getProcessorDaysOff, write: StopCheckProfile.prototype.setProcessorDaysOff });
                        Element_add(StopCheckProfile, { name: "PROCENDTM", required: true, order: 10, type: String, read: StopCheckProfile.prototype.getProcessEndTime, write: StopCheckProfile.prototype.setProcessEndTime });
                        Element_add(StopCheckProfile, { name: "CANUSERANGE", required: true, order: 20, type: Boolean, read: StopCheckProfile.prototype.getCanUseRange, write: StopCheckProfile.prototype.setCanUseRange });
                        Element_add(StopCheckProfile, { name: "CANUSEDESC", required: true, order: 30, type: Boolean, read: StopCheckProfile.prototype.getCanUseDescription, write: StopCheckProfile.prototype.setCanUseDescription });
                        Element_add(StopCheckProfile, { name: "STPCHKFEE", required: true, order: 40, type: Number, read: StopCheckProfile.prototype.getStopCheckFee, write: StopCheckProfile.prototype.setStopCheckFee });
                    })(banking = info.banking || (info.banking = {}));
                })(info = profile.info || (profile.info = {}));
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2012 TheStash
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../../meta/Aggregate_add'/>
///<reference path='../../../../../meta/Element_add'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                var info;
                (function (info) {
                    var common;
                    (function (common) {
                        var Aggregate_add = ofx4js.meta.Aggregate_add;
                        var Element_add = ofx4js.meta.Element_add;
                        /**
                         * Image Profile
                         * @author Scott Priddy
                         * @see "Section 3.1.6.2 OFX Spec"
                         */
                        var ImageProfile = (function () {
                            function ImageProfile() {
                            }
                            ImageProfile.prototype.getClosingImageAvailable = function () {
                                return this.closingImageAvailable;
                            };
                            ImageProfile.prototype.setClosingImageAvailable = function (closingImageAvailable) {
                                this.closingImageAvailable = closingImageAvailable;
                            };
                            ImageProfile.prototype.getTransactionImageAvailable = function () {
                                return this.transactionImageAvailable;
                            };
                            ImageProfile.prototype.setTransactionImageAvailable = function (transactionImageAvailable) {
                                this.transactionImageAvailable = transactionImageAvailable;
                            };
                            return ImageProfile;
                        })();
                        common.ImageProfile = ImageProfile;
                        Aggregate_add(ImageProfile, "IMAGEPROF");
                        Element_add(ImageProfile, { name: "CLOSINGIMGAVAIL", required: true, order: 10, type: Boolean, read: ImageProfile.prototype.getClosingImageAvailable, write: ImageProfile.prototype.setClosingImageAvailable });
                        Element_add(ImageProfile, { name: "TRANIMGAVAIL", required: true, order: 20, type: Boolean, read: ImageProfile.prototype.getTransactionImageAvailable, write: ImageProfile.prototype.setTransactionImageAvailable });
                    })(common = info.common || (info.common = {}));
                })(info = profile.info || (profile.info = {}));
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2012 TheStash
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../../meta/Aggregate_add'/>
///<reference path='../../../../../meta/Element_add'/>
///<reference path='../../../common/ProcessorDayOff'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                var info;
                (function (info) {
                    var common;
                    (function (common) {
                        var ProcessorDayOff = ofx4js.domain.data.common.ProcessorDayOff;
                        var Aggregate_add = ofx4js.meta.Aggregate_add;
                        var Element_add = ofx4js.meta.Element_add;
                        /**
                         * Funds Transfer Profile
                         * @author Scott Priddy
                         * @see "Section 11.13.2.2 OFX Spec"
                         */
                        var TransferProfile = (function () {
                            function TransferProfile() {
                            }
                            /**
                             * Days of week that no processing occurs: MONDAY, TUESDAY, WEDNESDAY, THURSDAY,
                             * FRIDAY, SATURDAY, or SUNDAY. 0 or more <PROCDAYSOFF> can be sent.
                             * @return List of days during the week that no processing occurs.
                             */
                            TransferProfile.prototype.getProcessorDaysOff = function () {
                                return this.processorDaysOff;
                            };
                            TransferProfile.prototype.setProcessorDaysOff = function (processorDaysOff) {
                                this.processorDaysOff = processorDaysOff;
                            };
                            /**
                             * Gets time of day that day's processing ends.
                             *
                             * Time formatted as "HHMMSS.XXX[gmt offset[:tz name]]",
                             * the milliseconds and time zone are still optional, and default to GMT.
                             * @see "Section 3.2.8.3 OFX Spec"
                             * @return Time String formatted as "HHMMSS.XXX[gmt offset[:tz name]]"
                             */
                            TransferProfile.prototype.getProcessEndTime = function () {
                                return this.processEndTime;
                            };
                            /**
                             * Sets the time of day that day's processing ends.
                             *
                             * Time formatted as "HHMMSS.XXX[gmt offset[:tz name]]",
                             * the milliseconds and time zone are still optional, and default to GMT.
                          
                             * @see "Section 3.2.8.3 OFX Spec"
                             * @param processEndTime formatted as "HHMMSS.XXX[gmt offset[:tz name]]"
                             */
                            TransferProfile.prototype.setProcessEndTime = function (processEndTime) {
                                this.processEndTime = processEndTime;
                            };
                            TransferProfile.prototype.getSupportsScheduledTransfers = function () {
                                return this.supportsScheduledTransfers;
                            };
                            TransferProfile.prototype.setSupportsScheduledTransfers = function (supportsScheduledTransfers) {
                                this.supportsScheduledTransfers = supportsScheduledTransfers;
                            };
                            /**
                             * Requires <CANSCHED>
                             * @return Boolean whether supports recurring transfers
                             */
                            TransferProfile.prototype.getSupportsRecurringTransfers = function () {
                                return this.supportsRecurringTransfers;
                            };
                            TransferProfile.prototype.setSupportsRecurringTransfers = function (supportsRecurringTransfers) {
                                this.supportsRecurringTransfers = supportsRecurringTransfers;
                            };
                            /**
                             * <CANLOAN>Y must be present for transfers to involve loans
                             * @return Boolean whether supports loan transfers
                             */
                            TransferProfile.prototype.getSupportsLoanTransfers = function () {
                                return this.supportsLoanTransfers;
                            };
                            TransferProfile.prototype.setSupportsLoanTransfers = function (supportsLoanTransfers) {
                                this.supportsLoanTransfers = supportsLoanTransfers;
                            };
                            TransferProfile.prototype.getSupportsScheduledLoanTransfers = function () {
                                return this.supportsScheduledLoanTransfers;
                            };
                            TransferProfile.prototype.setSupportsScheduledLoanTransfers = function (supportsScheduledLoanTransfers) {
                                this.supportsScheduledLoanTransfers = supportsScheduledLoanTransfers;
                            };
                            TransferProfile.prototype.getSupportsRecurringLoanTransfers = function () {
                                return this.supportsRecurringLoanTransfers;
                            };
                            TransferProfile.prototype.setSupportsRecurringLoanTransfers = function (supportsRecurringLoanTransfers) {
                                this.supportsRecurringLoanTransfers = supportsRecurringLoanTransfers;
                            };
                            TransferProfile.prototype.getSupportsTransferModification = function () {
                                return this.supportsTransferModification;
                            };
                            TransferProfile.prototype.setSupportsTransferModification = function (supportsTransferModification) {
                                this.supportsTransferModification = supportsTransferModification;
                            };
                            TransferProfile.prototype.getSupportsModelModification = function () {
                                return this.supportsModelModification;
                            };
                            TransferProfile.prototype.setSupportsModelModification = function (supportsModelModification) {
                                this.supportsModelModification = supportsModelModification;
                            };
                            /**
                             * Model window
                             * the number of days before a recurring transaction is scheduled to be processed that it is
                             * instantiated on the system
                             * @return Number number of days before a recurring transaction is scheduled to be processed that it is instantiated on the system
                             */
                            TransferProfile.prototype.getModelWindow = function () {
                                return this.modelWindow;
                            };
                            TransferProfile.prototype.setModelWindow = function (modelWindow) {
                                this.modelWindow = modelWindow;
                            };
                            /**
                             * Number of days before processing date that funds are withdrawn
                             * @return Number number of days before processing date that funds are withdrawn
                             */
                            TransferProfile.prototype.getWithdrawnDays = function () {
                                return this.withdrawnDays;
                            };
                            TransferProfile.prototype.setWithdrawnDays = function (withdrawnDays) {
                                this.withdrawnDays = withdrawnDays;
                            };
                            /**
                             * Default number of days to pay
                             * @return Number Default number of days to pay
                             */
                            TransferProfile.prototype.getDefaultDaysToPay = function () {
                                return this.defaultDaysToPay;
                            };
                            TransferProfile.prototype.setDefaultDaysToPay = function (defaultDaysToPay) {
                                this.defaultDaysToPay = defaultDaysToPay;
                            };
                            return TransferProfile;
                        })();
                        common.TransferProfile = TransferProfile;
                        Aggregate_add(TransferProfile, "XFERPROF");
                        Element_add(TransferProfile, { name: "PROCDAYSOFF", order: 0, type: Array, collectionEntryType: ProcessorDayOff, read: TransferProfile.prototype.getProcessorDaysOff, write: TransferProfile.prototype.setProcessorDaysOff });
                        Element_add(TransferProfile, { name: "PROCENDTM", required: true, order: 10, type: String, read: TransferProfile.prototype.getProcessEndTime, write: TransferProfile.prototype.setProcessEndTime });
                        Element_add(TransferProfile, { name: "CANSCHED", required: true, order: 20, type: Boolean, read: TransferProfile.prototype.getSupportsScheduledTransfers, write: TransferProfile.prototype.setSupportsScheduledTransfers });
                        Element_add(TransferProfile, { name: "CANRECUR", required: true, order: 30, type: Boolean, read: TransferProfile.prototype.getSupportsRecurringTransfers, write: TransferProfile.prototype.setSupportsRecurringTransfers });
                        Element_add(TransferProfile, { name: "CANLOAN", order: 40, type: Boolean, read: TransferProfile.prototype.getSupportsLoanTransfers, write: TransferProfile.prototype.setSupportsLoanTransfers });
                        Element_add(TransferProfile, { name: "CANSCHEDLOAN", order: 50, type: Boolean, read: TransferProfile.prototype.getSupportsScheduledLoanTransfers, write: TransferProfile.prototype.setSupportsScheduledLoanTransfers });
                        Element_add(TransferProfile, { name: "CANRECURLOAN", order: 60, type: Boolean, read: TransferProfile.prototype.getSupportsRecurringLoanTransfers, write: TransferProfile.prototype.setSupportsRecurringLoanTransfers });
                        Element_add(TransferProfile, { name: "CANMODXFERS", required: true, order: 70, type: Boolean, read: TransferProfile.prototype.getSupportsTransferModification, write: TransferProfile.prototype.setSupportsTransferModification });
                        Element_add(TransferProfile, { name: "CANMODMDLS", required: true, order: 80, type: Boolean, read: TransferProfile.prototype.getSupportsModelModification, write: TransferProfile.prototype.setSupportsModelModification });
                        Element_add(TransferProfile, { name: "MODELWND", required: true, order: 90, type: Number, read: TransferProfile.prototype.getModelWindow, write: TransferProfile.prototype.setModelWindow });
                        Element_add(TransferProfile, { name: "DAYSWITH", required: true, order: 100, type: Number, read: TransferProfile.prototype.getWithdrawnDays, write: TransferProfile.prototype.setWithdrawnDays });
                        Element_add(TransferProfile, { name: "DFLTDAYSTOPAY", required: true, order: 110, type: Number, read: TransferProfile.prototype.getDefaultDaysToPay, write: TransferProfile.prototype.setDefaultDaysToPay });
                    })(common = info.common || (info.common = {}));
                })(info = profile.info || (profile.info = {}));
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../banking/AccountType'/>
///<reference path='banking/EmailProfile'/>
///<reference path='banking/StopCheckProfile'/>
///<reference path='common/ImageProfile'/>
///<reference path='common/TransferProfile'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                var info;
                (function (info) {
                    var AccountType = ofx4js.domain.data.banking.AccountType;
                    var VersionSpecificMessageSetInfo = ofx4js.domain.data.profile.VersionSpecificMessageSetInfo;
                    var MessageSetType = ofx4js.domain.data.MessageSetType;
                    var EmailProfile = ofx4js.domain.data.profile.info.banking.EmailProfile;
                    var ImageProfile = ofx4js.domain.data.profile.info.common.ImageProfile;
                    var StopCheckProfile = ofx4js.domain.data.profile.info.banking.StopCheckProfile;
                    var TransferProfile = ofx4js.domain.data.profile.info.common.TransferProfile;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * Banking Message Set Profile
                     * @author Scott Priddy
                     * @author Ryan Heaton
                     * @see "Section 11.13.2.1 OFX Spec"
                     */
                    var BankingV1MessageSetInfo = (function (_super) {
                        __extends(BankingV1MessageSetInfo, _super);
                        function BankingV1MessageSetInfo() {
                            _super.apply(this, arguments);
                        }
                        BankingV1MessageSetInfo.prototype.getMessageSetType = function () {
                            return 2 /* banking */;
                        };
                        /**
                         * The invalidAccountTypes list.
                         *
                         * @return The invalidAccountTypes list.
                         */
                        BankingV1MessageSetInfo.prototype.getInvalidAccountTypes = function () {
                            return this.invalidAccountTypes;
                        };
                        /**
                         * The invalidAccountTypes list.
                         *
                         * @param invalidAccountTypes The invalidAccountTypes list.
                         */
                        BankingV1MessageSetInfo.prototype.setInvalidAccountTypes = function (invalidAccountTypes) {
                            this.invalidAccountTypes = invalidAccountTypes;
                        };
                        /**
                         * Gets whether closing statement information is available
                         *
                         * @return whether closing statement information is available
                         */
                        BankingV1MessageSetInfo.prototype.getClosingAvail = function () {
                            return this.closingAvail;
                        };
                        /**
                         * Sets whether closing statement information is available
                         *
                         * @param closingAvail whether closing statement information is available
                         */
                        BankingV1MessageSetInfo.prototype.setClosingAvail = function (closingAvail) {
                            this.closingAvail = closingAvail;
                        };
                        BankingV1MessageSetInfo.prototype.getTransferProfile = function () {
                            return this.transferProfile;
                        };
                        BankingV1MessageSetInfo.prototype.setTransferProfile = function (transferProfile) {
                            this.transferProfile = transferProfile;
                        };
                        BankingV1MessageSetInfo.prototype.getStopCheckProfile = function () {
                            return this.stopCheckProfile;
                        };
                        BankingV1MessageSetInfo.prototype.setStopCheckProfile = function (stopCheckProfile) {
                            this.stopCheckProfile = stopCheckProfile;
                        };
                        BankingV1MessageSetInfo.prototype.getEmailProfile = function () {
                            return this.emailProfile;
                        };
                        BankingV1MessageSetInfo.prototype.setEmailProfile = function (emailProfile) {
                            this.emailProfile = emailProfile;
                        };
                        BankingV1MessageSetInfo.prototype.getImageProfile = function () {
                            return this.imageProfile;
                        };
                        BankingV1MessageSetInfo.prototype.setImageProfile = function (imageProfile) {
                            this.imageProfile = imageProfile;
                        };
                        return BankingV1MessageSetInfo;
                    })(VersionSpecificMessageSetInfo);
                    info.BankingV1MessageSetInfo = BankingV1MessageSetInfo;
                    Aggregate_add(BankingV1MessageSetInfo, "BANKMSGSETV1");
                    ChildAggregate_add(BankingV1MessageSetInfo, { order: 10, type: Array, collectionEntryType: AccountType, read: BankingV1MessageSetInfo.prototype.getInvalidAccountTypes, write: BankingV1MessageSetInfo.prototype.setInvalidAccountTypes });
                    Element_add(BankingV1MessageSetInfo, { name: "CLOSINGAVAIL", required: true, order: 20, type: Boolean, read: BankingV1MessageSetInfo.prototype.getClosingAvail, write: BankingV1MessageSetInfo.prototype.setClosingAvail });
                    ChildAggregate_add(BankingV1MessageSetInfo, { name: "XFERPROF", order: 30, type: TransferProfile, read: BankingV1MessageSetInfo.prototype.getTransferProfile, write: BankingV1MessageSetInfo.prototype.setTransferProfile });
                    ChildAggregate_add(BankingV1MessageSetInfo, { name: "STPCKPROF", order: 40, type: StopCheckProfile, read: BankingV1MessageSetInfo.prototype.getStopCheckProfile, write: BankingV1MessageSetInfo.prototype.setStopCheckProfile });
                    ChildAggregate_add(BankingV1MessageSetInfo, { name: "EMAILPROF", required: true, order: 50, type: EmailProfile, read: BankingV1MessageSetInfo.prototype.getEmailProfile, write: BankingV1MessageSetInfo.prototype.setEmailProfile });
                    ChildAggregate_add(BankingV1MessageSetInfo, { name: "IMAGEPROF", order: 60, type: ImageProfile, read: BankingV1MessageSetInfo.prototype.getImageProfile, write: BankingV1MessageSetInfo.prototype.setImageProfile });
                })(info = profile.info || (profile.info = {}));
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../AbstractMessageSetInfo'/>
///<reference path='BankingV1MessageSetInfo'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                var info;
                (function (info) {
                    var AbstractMessageSetInfo = ofx4js.domain.data.profile.AbstractMessageSetInfo;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    /**
                     * @author Ryan Heaton
                     */
                    var BankingMessageSetInfo = (function (_super) {
                        __extends(BankingMessageSetInfo, _super);
                        function BankingMessageSetInfo() {
                            _super.apply(this, arguments);
                        }
                        BankingMessageSetInfo.prototype.getVersion1Info = function () {
                            return this.version1Info;
                        };
                        BankingMessageSetInfo.prototype.setVersion1Info = function (version1Info) {
                            this.version1Info = version1Info;
                        };
                        return BankingMessageSetInfo;
                    })(AbstractMessageSetInfo);
                    info.BankingMessageSetInfo = BankingMessageSetInfo;
                    Aggregate_add(BankingMessageSetInfo, "BANKMSGSET");
                    ChildAggregate_add(BankingMessageSetInfo, { order: 0, type: info.BankingV1MessageSetInfo, read: BankingMessageSetInfo.prototype.getVersion1Info, write: BankingMessageSetInfo.prototype.setVersion1Info });
                })(info = profile.info || (profile.info = {}));
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
///<reference path='../../common/ProcessorDayOff'/>
///<reference path='../../profile/VersionSpecificMessageSetInfo'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                var info;
                (function (info) {
                    var ProcessorDayOff = ofx4js.domain.data.common.ProcessorDayOff;
                    var VersionSpecificMessageSetInfo = ofx4js.domain.data.profile.VersionSpecificMessageSetInfo;
                    var MessageSetType = ofx4js.domain.data.MessageSetType;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * BillPay Message Set Profile
                     * @author Scott Priddy
                     * @author Ryan Heaton
                     * @see "Section 12.11.2 OFX Spec"
                     */
                    var BillpayV1MessageSetInfo = (function (_super) {
                        __extends(BillpayV1MessageSetInfo, _super);
                        function BillpayV1MessageSetInfo() {
                            _super.apply(this, arguments);
                        }
                        BillpayV1MessageSetInfo.prototype.getMessageSetType = function () {
                            return 7 /* payments */;
                        };
                        BillpayV1MessageSetInfo.prototype.getDaysWith = function () {
                            return this.daysWith;
                        };
                        BillpayV1MessageSetInfo.prototype.setDaysWith = function (daysWith) {
                            this.daysWith = daysWith;
                        };
                        BillpayV1MessageSetInfo.prototype.getDefaultDaysToPay = function () {
                            return this.defaultDaysToPay;
                        };
                        BillpayV1MessageSetInfo.prototype.setDefaultDaysToPay = function (defaultDaysToPay) {
                            this.defaultDaysToPay = defaultDaysToPay;
                        };
                        BillpayV1MessageSetInfo.prototype.getTransferDaysWith = function () {
                            return this.transferDaysWith;
                        };
                        BillpayV1MessageSetInfo.prototype.setTransferDaysWith = function (transferDaysWith) {
                            this.transferDaysWith = transferDaysWith;
                        };
                        BillpayV1MessageSetInfo.prototype.getTransferDefaultDaysToPay = function () {
                            return this.transferDefaultDaysToPay;
                        };
                        BillpayV1MessageSetInfo.prototype.setTransferDefaultDaysToPay = function (transferDefaultDaysToPay) {
                            this.transferDefaultDaysToPay = transferDefaultDaysToPay;
                        };
                        BillpayV1MessageSetInfo.prototype.getProcessorDaysOff = function () {
                            return this.processorDaysOff;
                        };
                        BillpayV1MessageSetInfo.prototype.setProcessorDaysOff = function (processorDaysOff) {
                            this.processorDaysOff = processorDaysOff;
                        };
                        BillpayV1MessageSetInfo.prototype.getProcessorEndTime = function () {
                            return this.processorEndTime;
                        };
                        BillpayV1MessageSetInfo.prototype.setProcessorEndTime = function (processorEndTime) {
                            this.processorEndTime = processorEndTime;
                        };
                        BillpayV1MessageSetInfo.prototype.getModelWindow = function () {
                            return this.modelWindow;
                        };
                        BillpayV1MessageSetInfo.prototype.setModelWindow = function (modelWindow) {
                            this.modelWindow = modelWindow;
                        };
                        BillpayV1MessageSetInfo.prototype.getPostProcessorWindow = function () {
                            return this.postProcessorWindow;
                        };
                        BillpayV1MessageSetInfo.prototype.setPostProcessorWindow = function (postProcessorWindow) {
                            this.postProcessorWindow = postProcessorWindow;
                        };
                        BillpayV1MessageSetInfo.prototype.getSupportsStatusUpdateViaPaymentModificationResponse = function () {
                            return this.supportsStatusUpdateViaPaymentModificationResponse;
                        };
                        BillpayV1MessageSetInfo.prototype.setSupportsStatusUpdateViaPaymentModificationResponse = function (supportsStatusUpdateViaPaymentModificationResponse) {
                            this.supportsStatusUpdateViaPaymentModificationResponse = supportsStatusUpdateViaPaymentModificationResponse;
                        };
                        BillpayV1MessageSetInfo.prototype.getSupportsPaymentByAddress = function () {
                            return this.supportsPaymentByAddress;
                        };
                        BillpayV1MessageSetInfo.prototype.setSupportsPaymentByAddress = function (supportsPaymentByAddress) {
                            this.supportsPaymentByAddress = supportsPaymentByAddress;
                        };
                        BillpayV1MessageSetInfo.prototype.getSupportsPaymentByTransfer = function () {
                            return this.supportsPaymentByTransfer;
                        };
                        BillpayV1MessageSetInfo.prototype.setSupportsPaymentByTransfer = function (supportsPaymentByTransfer) {
                            this.supportsPaymentByTransfer = supportsPaymentByTransfer;
                        };
                        BillpayV1MessageSetInfo.prototype.getSupportsPaymentByPayeeId = function () {
                            return this.supportsPaymentByPayeeId;
                        };
                        BillpayV1MessageSetInfo.prototype.setSupportsPaymentByPayeeId = function (supportsPaymentByPayeeId) {
                            this.supportsPaymentByPayeeId = supportsPaymentByPayeeId;
                        };
                        BillpayV1MessageSetInfo.prototype.getUserCanAddPayee = function () {
                            return this.userCanAddPayee;
                        };
                        BillpayV1MessageSetInfo.prototype.setUserCanAddPayee = function (userCanAddPayee) {
                            this.userCanAddPayee = userCanAddPayee;
                        };
                        BillpayV1MessageSetInfo.prototype.getSupportsExtendedPayment = function () {
                            return this.supportsExtendedPayment;
                        };
                        BillpayV1MessageSetInfo.prototype.setSupportsExtendedPayment = function (supportsExtendedPayment) {
                            this.supportsExtendedPayment = supportsExtendedPayment;
                        };
                        BillpayV1MessageSetInfo.prototype.getCanModifyPayments = function () {
                            return this.canModifyPayments;
                        };
                        BillpayV1MessageSetInfo.prototype.setCanModifyPayments = function (canModifyPayments) {
                            this.canModifyPayments = canModifyPayments;
                        };
                        BillpayV1MessageSetInfo.prototype.getCanModifyModels = function () {
                            return this.canModifyModels;
                        };
                        BillpayV1MessageSetInfo.prototype.setCanModifyModels = function (canModifyModels) {
                            this.canModifyModels = canModifyModels;
                        };
                        BillpayV1MessageSetInfo.prototype.getSupportsDifferentFirstPayment = function () {
                            return this.supportsDifferentFirstPayment;
                        };
                        BillpayV1MessageSetInfo.prototype.setSupportsDifferentFirstPayment = function (supportsDifferentFirstPayment) {
                            this.supportsDifferentFirstPayment = supportsDifferentFirstPayment;
                        };
                        BillpayV1MessageSetInfo.prototype.getSupportsDifferentLastPayment = function () {
                            return this.supportsDifferentLastPayment;
                        };
                        BillpayV1MessageSetInfo.prototype.setSupportsDifferentLastPayment = function (supportsDifferentLastPayment) {
                            this.supportsDifferentLastPayment = supportsDifferentLastPayment;
                        };
                        BillpayV1MessageSetInfo.prototype.getSupportsBillPresentmentContext = function () {
                            return this.supportsBillPresentmentContext;
                        };
                        BillpayV1MessageSetInfo.prototype.setSupportsBillPresentmentContext = function (supportsBillPresentmentContext) {
                            this.supportsBillPresentmentContext = supportsBillPresentmentContext;
                        };
                        return BillpayV1MessageSetInfo;
                    })(VersionSpecificMessageSetInfo);
                    info.BillpayV1MessageSetInfo = BillpayV1MessageSetInfo;
                    Aggregate_add(BillpayV1MessageSetInfo, "BILLPAYMSGSETV1");
                    Element_add(BillpayV1MessageSetInfo, { name: "DAYSWITH", required: true, order: 10, type: Number, read: BillpayV1MessageSetInfo.prototype.getDaysWith, write: BillpayV1MessageSetInfo.prototype.setDaysWith });
                    Element_add(BillpayV1MessageSetInfo, { name: "DFLTDAYSTOPAY", required: true, order: 20, type: Number, read: BillpayV1MessageSetInfo.prototype.getDefaultDaysToPay, write: BillpayV1MessageSetInfo.prototype.setDefaultDaysToPay });
                    Element_add(BillpayV1MessageSetInfo, { name: "XFERDAYSWITH", required: true, order: 30, type: Number, read: BillpayV1MessageSetInfo.prototype.getTransferDaysWith, write: BillpayV1MessageSetInfo.prototype.setTransferDaysWith });
                    Element_add(BillpayV1MessageSetInfo, { name: "XFERDFLTDAYSTOPAY", required: true, order: 40, type: Number, read: BillpayV1MessageSetInfo.prototype.getTransferDefaultDaysToPay, write: BillpayV1MessageSetInfo.prototype.setTransferDefaultDaysToPay });
                    Element_add(BillpayV1MessageSetInfo, { name: "PROCDAYSOFF", order: 50, type: Array, collectionEntryType: ProcessorDayOff, read: BillpayV1MessageSetInfo.prototype.getProcessorDaysOff, write: BillpayV1MessageSetInfo.prototype.setProcessorDaysOff });
                    Element_add(BillpayV1MessageSetInfo, { name: "PROCENDTM", required: true, order: 60, type: String, read: BillpayV1MessageSetInfo.prototype.getProcessorEndTime, write: BillpayV1MessageSetInfo.prototype.setProcessorEndTime });
                    Element_add(BillpayV1MessageSetInfo, { name: "MODELWND", required: true, order: 70, type: Number, read: BillpayV1MessageSetInfo.prototype.getModelWindow, write: BillpayV1MessageSetInfo.prototype.setModelWindow });
                    Element_add(BillpayV1MessageSetInfo, { name: "POSTPROCWND", required: true, order: 80, type: Number, read: BillpayV1MessageSetInfo.prototype.getPostProcessorWindow, write: BillpayV1MessageSetInfo.prototype.setPostProcessorWindow });
                    Element_add(BillpayV1MessageSetInfo, { name: "STSVIAMODS", required: true, order: 90, type: Boolean, read: BillpayV1MessageSetInfo.prototype.getSupportsStatusUpdateViaPaymentModificationResponse, write: BillpayV1MessageSetInfo.prototype.setSupportsStatusUpdateViaPaymentModificationResponse });
                    Element_add(BillpayV1MessageSetInfo, { name: "PMTBYADDR", required: true, order: 100, type: Boolean, read: BillpayV1MessageSetInfo.prototype.getSupportsPaymentByAddress, write: BillpayV1MessageSetInfo.prototype.setSupportsPaymentByAddress });
                    Element_add(BillpayV1MessageSetInfo, { name: "PMTBYXFER", required: true, order: 110, type: Boolean, read: BillpayV1MessageSetInfo.prototype.getSupportsPaymentByTransfer, write: BillpayV1MessageSetInfo.prototype.setSupportsPaymentByTransfer });
                    Element_add(BillpayV1MessageSetInfo, { name: "PMTBYPAYEEID", required: true, order: 120, type: Boolean, read: BillpayV1MessageSetInfo.prototype.getSupportsPaymentByPayeeId, write: BillpayV1MessageSetInfo.prototype.setSupportsPaymentByPayeeId });
                    Element_add(BillpayV1MessageSetInfo, { name: "CANADDPAYEE", required: true, order: 130, type: Boolean, read: BillpayV1MessageSetInfo.prototype.getUserCanAddPayee, write: BillpayV1MessageSetInfo.prototype.setUserCanAddPayee });
                    Element_add(BillpayV1MessageSetInfo, { name: "HASEXTDPMT", required: true, order: 140, type: Boolean, read: BillpayV1MessageSetInfo.prototype.getSupportsExtendedPayment, write: BillpayV1MessageSetInfo.prototype.setSupportsExtendedPayment });
                    Element_add(BillpayV1MessageSetInfo, { name: "CANMODPMTS", required: true, order: 150, type: Boolean, read: BillpayV1MessageSetInfo.prototype.getCanModifyPayments, write: BillpayV1MessageSetInfo.prototype.setCanModifyPayments });
                    Element_add(BillpayV1MessageSetInfo, { name: "CANMODMDLS", required: true, order: 160, type: Boolean, read: BillpayV1MessageSetInfo.prototype.getCanModifyModels, write: BillpayV1MessageSetInfo.prototype.setCanModifyModels });
                    Element_add(BillpayV1MessageSetInfo, { name: "DIFFFIRSTPMT", required: true, order: 170, type: Boolean, read: BillpayV1MessageSetInfo.prototype.getSupportsDifferentFirstPayment, write: BillpayV1MessageSetInfo.prototype.setSupportsDifferentFirstPayment });
                    Element_add(BillpayV1MessageSetInfo, { name: "DIFFLASTPMT", required: true, order: 180, type: Boolean, read: BillpayV1MessageSetInfo.prototype.getSupportsDifferentLastPayment, write: BillpayV1MessageSetInfo.prototype.setSupportsDifferentLastPayment });
                    Element_add(BillpayV1MessageSetInfo, { name: "BILLPUBCONTEXT", order: 190, type: Boolean, read: BillpayV1MessageSetInfo.prototype.getSupportsBillPresentmentContext, write: BillpayV1MessageSetInfo.prototype.setSupportsBillPresentmentContext });
                })(info = profile.info || (profile.info = {}));
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../AbstractMessageSetInfo'/>
///<reference path='BillpayV1MessageSetInfo'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                var info;
                (function (info) {
                    var AbstractMessageSetInfo = ofx4js.domain.data.profile.AbstractMessageSetInfo;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    /**
                     * @author Ryan Heaton
                     */
                    var BillpayMessageSetInfo = (function (_super) {
                        __extends(BillpayMessageSetInfo, _super);
                        function BillpayMessageSetInfo() {
                            _super.apply(this, arguments);
                        }
                        BillpayMessageSetInfo.prototype.getVersion1Info = function () {
                            return this.version1Info;
                        };
                        BillpayMessageSetInfo.prototype.setVersion1Info = function (version1Info) {
                            this.version1Info = version1Info;
                        };
                        return BillpayMessageSetInfo;
                    })(AbstractMessageSetInfo);
                    info.BillpayMessageSetInfo = BillpayMessageSetInfo;
                    Aggregate_add(BillpayMessageSetInfo, "BILLPAYMSGSET");
                    ChildAggregate_add(BillpayMessageSetInfo, { order: 0, type: info.BillpayV1MessageSetInfo, read: BillpayMessageSetInfo.prototype.getVersion1Info, write: BillpayMessageSetInfo.prototype.setVersion1Info });
                })(info = profile.info || (profile.info = {}));
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
///<reference path='../../profile/VersionSpecificMessageSetInfo'/>
///<reference path='../../profile/info/common/ImageProfile'/>
///<reference path='../../MessageSetType'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                var info;
                (function (info) {
                    var VersionSpecificMessageSetInfo = ofx4js.domain.data.profile.VersionSpecificMessageSetInfo;
                    var MessageSetType = ofx4js.domain.data.MessageSetType;
                    var ImageProfile = ofx4js.domain.data.profile.info.common.ImageProfile;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * Credit Card Message Set Profile
                     * @author Scott Priddy
                     * @author Ryan Heaton
                     * @see "Section 11.13.3 OFX Spec"
                     */
                    var CreditCardV1MessageSetInfo = (function (_super) {
                        __extends(CreditCardV1MessageSetInfo, _super);
                        function CreditCardV1MessageSetInfo() {
                            _super.apply(this, arguments);
                        }
                        CreditCardV1MessageSetInfo.prototype.getMessageSetType = function () {
                            return 3 /* creditcard */;
                        };
                        /**
                         * Closing statement information available
                         * @return Boolean
                         */
                        CreditCardV1MessageSetInfo.prototype.getClosingAvail = function () {
                            return this.closingAvail;
                        };
                        CreditCardV1MessageSetInfo.prototype.setClosingAvail = function (closingAvail) {
                            this.closingAvail = closingAvail;
                        };
                        /**
                         * Image profile (if supported)
                         * @return ImageProfile
                         */
                        CreditCardV1MessageSetInfo.prototype.getImageProfile = function () {
                            return this.imageProfile;
                        };
                        CreditCardV1MessageSetInfo.prototype.setImageProfile = function (imageProfile) {
                            this.imageProfile = imageProfile;
                        };
                        return CreditCardV1MessageSetInfo;
                    })(VersionSpecificMessageSetInfo);
                    info.CreditCardV1MessageSetInfo = CreditCardV1MessageSetInfo;
                    Aggregate_add(CreditCardV1MessageSetInfo, "CREDITCARDMSGSETV1");
                    Element_add(CreditCardV1MessageSetInfo, { name: "CLOSINGAVAIL", required: true, order: 20, type: Boolean, read: CreditCardV1MessageSetInfo.prototype.getClosingAvail, write: CreditCardV1MessageSetInfo.prototype.setClosingAvail });
                    ChildAggregate_add(CreditCardV1MessageSetInfo, { name: "IMAGEPROF", order: 10, type: ImageProfile, read: CreditCardV1MessageSetInfo.prototype.getImageProfile, write: CreditCardV1MessageSetInfo.prototype.setImageProfile });
                })(info = profile.info || (profile.info = {}));
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../profile/AbstractMessageSetInfo'/>
///<reference path='CreditCardV1MessageSetInfo'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                var info;
                (function (info) {
                    var AbstractMessageSetInfo = ofx4js.domain.data.profile.AbstractMessageSetInfo;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    /**
                     * @author Ryan Heaton
                     */
                    var CreditCardMessageSetInfo = (function (_super) {
                        __extends(CreditCardMessageSetInfo, _super);
                        function CreditCardMessageSetInfo() {
                            _super.apply(this, arguments);
                        }
                        CreditCardMessageSetInfo.prototype.getVersion1Info = function () {
                            return this.version1Info;
                        };
                        CreditCardMessageSetInfo.prototype.setVersion1Info = function (version1Info) {
                            this.version1Info = version1Info;
                        };
                        return CreditCardMessageSetInfo;
                    })(AbstractMessageSetInfo);
                    info.CreditCardMessageSetInfo = CreditCardMessageSetInfo;
                    Aggregate_add(CreditCardMessageSetInfo, "CREDITCARDMSGSET");
                    ChildAggregate_add(CreditCardMessageSetInfo, { order: 0, type: info.CreditCardV1MessageSetInfo, read: CreditCardMessageSetInfo.prototype.getVersion1Info, write: CreditCardMessageSetInfo.prototype.setVersion1Info });
                })(info = profile.info || (profile.info = {}));
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
///<reference path='../../profile/VersionSpecificMessageSetInfo'/>
///<reference path='EmailV1MessageSetInfo'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                var info;
                (function (info) {
                    var VersionSpecificMessageSetInfo = ofx4js.domain.data.profile.VersionSpecificMessageSetInfo;
                    var MessageSetType = ofx4js.domain.data.MessageSetType;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * Email Message Set Profile Information
                     * @author Scott Priddy
                     * @author Ryan Heaton
                     * @see "Section 9.4.2 OFX Spec"
                     */
                    var EmailV1MessageSetInfo = (function (_super) {
                        __extends(EmailV1MessageSetInfo, _super);
                        function EmailV1MessageSetInfo() {
                            _super.apply(this, arguments);
                        }
                        EmailV1MessageSetInfo.prototype.getMessageSetType = function () {
                            return 8 /* email */;
                        };
                        /**
                         * Y if server supports <MAILRQ> request.
                         * N if server supports only the <MAILSYNCRQ> request.
                         * @return Boolean
                         */
                        EmailV1MessageSetInfo.prototype.getSupportsMail = function () {
                            return this.supportsMail;
                        };
                        EmailV1MessageSetInfo.prototype.setSupportsMail = function (supportsMail) {
                            this.supportsMail = supportsMail;
                        };
                        /**
                         * Y if server supports get MIME message
                         * @return Boolean
                         */
                        EmailV1MessageSetInfo.prototype.getSupportsMimeType = function () {
                            return this.supportsMimeType;
                        };
                        EmailV1MessageSetInfo.prototype.setSupportsMimeType = function (supportsMimeType) {
                            this.supportsMimeType = supportsMimeType;
                        };
                        return EmailV1MessageSetInfo;
                    })(VersionSpecificMessageSetInfo);
                    info.EmailV1MessageSetInfo = EmailV1MessageSetInfo;
                    Aggregate_add(EmailV1MessageSetInfo, "EMAILMSGSETV1");
                    Element_add(EmailV1MessageSetInfo, { name: "MAILSUP", required: true, order: 10, type: Boolean, read: EmailV1MessageSetInfo.prototype.getSupportsMail, write: EmailV1MessageSetInfo.prototype.setSupportsMail });
                    Element_add(EmailV1MessageSetInfo, { name: "GETMIMESUP", required: true, order: 20, type: Boolean, read: EmailV1MessageSetInfo.prototype.getSupportsMimeType, write: EmailV1MessageSetInfo.prototype.setSupportsMimeType });
                })(info = profile.info || (profile.info = {}));
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../profile/AbstractMessageSetInfo'/>
///<reference path='EmailV1MessageSetInfo'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                var info;
                (function (info) {
                    var AbstractMessageSetInfo = ofx4js.domain.data.profile.AbstractMessageSetInfo;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    /**
                     * @author Ryan Heaton
                     */
                    var EmailMessageSetInfo = (function (_super) {
                        __extends(EmailMessageSetInfo, _super);
                        function EmailMessageSetInfo() {
                            _super.apply(this, arguments);
                        }
                        EmailMessageSetInfo.prototype.getVersion1Info = function () {
                            return this.version1Info;
                        };
                        EmailMessageSetInfo.prototype.setVersion1Info = function (version1Info) {
                            this.version1Info = version1Info;
                        };
                        return EmailMessageSetInfo;
                    })(AbstractMessageSetInfo);
                    info.EmailMessageSetInfo = EmailMessageSetInfo;
                    Aggregate_add(EmailMessageSetInfo, "EMAILMSGSET");
                    ChildAggregate_add(EmailMessageSetInfo, { order: 0, type: info.EmailV1MessageSetInfo, read: EmailMessageSetInfo.prototype.getVersion1Info, write: EmailMessageSetInfo.prototype.setVersion1Info });
                })(info = profile.info || (profile.info = {}));
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
///<reference path='../../profile/info/common/TransferProfile'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                var info;
                (function (info) {
                    var VersionSpecificMessageSetInfo = ofx4js.domain.data.profile.VersionSpecificMessageSetInfo;
                    var MessageSetType = ofx4js.domain.data.MessageSetType;
                    var TransferProfile = ofx4js.domain.data.profile.info.common.TransferProfile;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * Interbank Funds Transfer Message Set Profile
                     * @author Scott Priddy
                     * @author Ryan Heaton
                     * @see "Section 11.13.4 OFX Spec"
                     */
                    var InterbankTransferV1MessageSetInfo = (function (_super) {
                        __extends(InterbankTransferV1MessageSetInfo, _super);
                        function InterbankTransferV1MessageSetInfo() {
                            _super.apply(this, arguments);
                        }
                        InterbankTransferV1MessageSetInfo.prototype.getMessageSetType = function () {
                            return 5 /* interbank_transfer */;
                        };
                        InterbankTransferV1MessageSetInfo.prototype.getTransferProfile = function () {
                            return this.transferProfile;
                        };
                        InterbankTransferV1MessageSetInfo.prototype.setTransferProfile = function (transferProfile) {
                            this.transferProfile = transferProfile;
                        };
                        InterbankTransferV1MessageSetInfo.prototype.getSupportsBillPay = function () {
                            return this.supportsBillPay;
                        };
                        InterbankTransferV1MessageSetInfo.prototype.setSupportsBillPay = function (supportsBillPay) {
                            this.supportsBillPay = supportsBillPay;
                        };
                        InterbankTransferV1MessageSetInfo.prototype.getCancelWindow = function () {
                            return this.cancelWindow;
                        };
                        InterbankTransferV1MessageSetInfo.prototype.setCancelWindow = function (cancelWindow) {
                            this.cancelWindow = cancelWindow;
                        };
                        InterbankTransferV1MessageSetInfo.prototype.getDomesticInterbankTransferFee = function () {
                            return this.domesticInterbankTransferFee;
                        };
                        InterbankTransferV1MessageSetInfo.prototype.setDomesticInterbankTransferFee = function (domesticInterbankTransferFee) {
                            this.domesticInterbankTransferFee = domesticInterbankTransferFee;
                        };
                        InterbankTransferV1MessageSetInfo.prototype.getInternationalInterbankTransferFee = function () {
                            return this.internationalInterbankTransferFee;
                        };
                        InterbankTransferV1MessageSetInfo.prototype.setInternationalInterbankTransferFee = function (internationalInterbankTransferFee) {
                            this.internationalInterbankTransferFee = internationalInterbankTransferFee;
                        };
                        return InterbankTransferV1MessageSetInfo;
                    })(VersionSpecificMessageSetInfo);
                    info.InterbankTransferV1MessageSetInfo = InterbankTransferV1MessageSetInfo;
                    Aggregate_add(InterbankTransferV1MessageSetInfo, "INTERXFERMSGSETV1");
                    ChildAggregate_add(InterbankTransferV1MessageSetInfo, { name: "XFERPROF", required: true, order: 10, type: TransferProfile, read: InterbankTransferV1MessageSetInfo.prototype.getTransferProfile, write: InterbankTransferV1MessageSetInfo.prototype.setTransferProfile });
                    Element_add(InterbankTransferV1MessageSetInfo, { name: "CANBILLPAY", required: true, order: 20, type: Boolean, read: InterbankTransferV1MessageSetInfo.prototype.getSupportsBillPay, write: InterbankTransferV1MessageSetInfo.prototype.setSupportsBillPay });
                    Element_add(InterbankTransferV1MessageSetInfo, { name: "CANCELWND", required: true, order: 30, type: Number, read: InterbankTransferV1MessageSetInfo.prototype.getCancelWindow, write: InterbankTransferV1MessageSetInfo.prototype.setCancelWindow });
                    Element_add(InterbankTransferV1MessageSetInfo, { name: "DOMXFERFEE", required: true, order: 40, type: Number, read: InterbankTransferV1MessageSetInfo.prototype.getDomesticInterbankTransferFee, write: InterbankTransferV1MessageSetInfo.prototype.setDomesticInterbankTransferFee });
                    Element_add(InterbankTransferV1MessageSetInfo, { name: "INTLXFERFEE", required: true, order: 50, type: Number, read: InterbankTransferV1MessageSetInfo.prototype.getInternationalInterbankTransferFee, write: InterbankTransferV1MessageSetInfo.prototype.setInternationalInterbankTransferFee });
                })(info = profile.info || (profile.info = {}));
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../profile/AbstractMessageSetInfo'/>
///<reference path='InterbankTransferV1MessageSetInfo'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                var info;
                (function (info) {
                    var AbstractMessageSetInfo = ofx4js.domain.data.profile.AbstractMessageSetInfo;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    /**
                     * @author Ryan Heaton
                     */
                    var InterbankTransferMessageSetInfo = (function (_super) {
                        __extends(InterbankTransferMessageSetInfo, _super);
                        function InterbankTransferMessageSetInfo() {
                            _super.apply(this, arguments);
                        }
                        InterbankTransferMessageSetInfo.prototype.getVersion1Info = function () {
                            return this.version1Info;
                        };
                        InterbankTransferMessageSetInfo.prototype.setVersion1Info = function (version1Info) {
                            this.version1Info = version1Info;
                        };
                        return InterbankTransferMessageSetInfo;
                    })(AbstractMessageSetInfo);
                    info.InterbankTransferMessageSetInfo = InterbankTransferMessageSetInfo;
                    Aggregate_add(InterbankTransferMessageSetInfo, "INTERXFERMSGSET");
                    ChildAggregate_add(InterbankTransferMessageSetInfo, { order: 0, type: info.InterbankTransferV1MessageSetInfo, read: InterbankTransferMessageSetInfo.prototype.getVersion1Info, write: InterbankTransferMessageSetInfo.prototype.setVersion1Info });
                })(info = profile.info || (profile.info = {}));
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
///<reference path='../../profile/VersionSpecificMessageSetInfo'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                var info;
                (function (info) {
                    var VersionSpecificMessageSetInfo = ofx4js.domain.data.profile.VersionSpecificMessageSetInfo;
                    var MessageSetType = ofx4js.domain.data.MessageSetType;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * @see "Section 13.7.1.1, OFX Spec"
                     *
                     * @author Jon Perlow
                     * @author Ryan Heaton
                     */
                    var InvestmentV1MessageSetInfo = (function (_super) {
                        __extends(InvestmentV1MessageSetInfo, _super);
                        function InvestmentV1MessageSetInfo() {
                            _super.apply(this, arguments);
                        }
                        InvestmentV1MessageSetInfo.prototype.getMessageSetType = function () {
                            return 4 /* investment */;
                        };
                        InvestmentV1MessageSetInfo.prototype.getSupportsStatementsDownload = function () {
                            return this.supportsStatementsDownload;
                        };
                        InvestmentV1MessageSetInfo.prototype.setSupportsStatementsDownload = function (supportsStatementsDownload) {
                            this.supportsStatementsDownload = supportsStatementsDownload;
                        };
                        InvestmentV1MessageSetInfo.prototype.getSupportsOpenOrdersDownload = function () {
                            return this.supportsOpenOrdersDownload;
                        };
                        InvestmentV1MessageSetInfo.prototype.setSupportsOpenOrdersDownload = function (supportsOpenOrdersDownload) {
                            this.supportsOpenOrdersDownload = supportsOpenOrdersDownload;
                        };
                        InvestmentV1MessageSetInfo.prototype.getSupportsPositionsDownload = function () {
                            return this.supportsPositionsDownload;
                        };
                        InvestmentV1MessageSetInfo.prototype.setSupportsPositionsDownload = function (supportsPositionsDownload) {
                            this.supportsPositionsDownload = supportsPositionsDownload;
                        };
                        InvestmentV1MessageSetInfo.prototype.getSupportsBalanceDownload = function () {
                            return this.supportsBalanceDownload;
                        };
                        InvestmentV1MessageSetInfo.prototype.setSupportsBalanceDownload = function (supportsBalanceDownload) {
                            this.supportsBalanceDownload = supportsBalanceDownload;
                        };
                        InvestmentV1MessageSetInfo.prototype.getSupportsEmail = function () {
                            return this.supportsEmail;
                        };
                        InvestmentV1MessageSetInfo.prototype.setSupportsEmail = function (supportsEmail) {
                            this.supportsEmail = supportsEmail;
                        };
                        InvestmentV1MessageSetInfo.prototype.getSupports401kInformation = function () {
                            return this.supports401kInformation;
                        };
                        InvestmentV1MessageSetInfo.prototype.setSupports401kInformation = function (supports401kInformation) {
                            this.supports401kInformation = supports401kInformation;
                        };
                        InvestmentV1MessageSetInfo.prototype.getSupportsClosingStatements = function () {
                            return this.supportsClosingStatements;
                        };
                        InvestmentV1MessageSetInfo.prototype.setSupportsClosingStatements = function (supportsClosingStatements) {
                            this.supportsClosingStatements = supportsClosingStatements;
                        };
                        return InvestmentV1MessageSetInfo;
                    })(VersionSpecificMessageSetInfo);
                    info.InvestmentV1MessageSetInfo = InvestmentV1MessageSetInfo;
                    Aggregate_add(InvestmentV1MessageSetInfo, "INVSTMTMSGSETV1");
                    Element_add(InvestmentV1MessageSetInfo, { name: "TRANDNLD", required: true, order: 10, type: Boolean, read: InvestmentV1MessageSetInfo.prototype.getSupportsStatementsDownload, write: InvestmentV1MessageSetInfo.prototype.setSupportsStatementsDownload });
                    Element_add(InvestmentV1MessageSetInfo, { name: "OODNLD", required: true, order: 20, type: Boolean, read: InvestmentV1MessageSetInfo.prototype.getSupportsOpenOrdersDownload, write: InvestmentV1MessageSetInfo.prototype.setSupportsOpenOrdersDownload });
                    Element_add(InvestmentV1MessageSetInfo, { name: "POSDNLD", required: true, order: 30, type: Boolean, read: InvestmentV1MessageSetInfo.prototype.getSupportsPositionsDownload, write: InvestmentV1MessageSetInfo.prototype.setSupportsPositionsDownload });
                    Element_add(InvestmentV1MessageSetInfo, { name: "BALDNLD", required: true, order: 40, type: Boolean, read: InvestmentV1MessageSetInfo.prototype.getSupportsBalanceDownload, write: InvestmentV1MessageSetInfo.prototype.setSupportsBalanceDownload });
                    Element_add(InvestmentV1MessageSetInfo, { name: "CANEMAIL", required: true, order: 50, type: Boolean, read: InvestmentV1MessageSetInfo.prototype.getSupportsEmail, write: InvestmentV1MessageSetInfo.prototype.setSupportsEmail });
                    Element_add(InvestmentV1MessageSetInfo, { name: "INV401KDNLD", order: 60, type: Boolean, read: InvestmentV1MessageSetInfo.prototype.getSupports401kInformation, write: InvestmentV1MessageSetInfo.prototype.setSupports401kInformation });
                    Element_add(InvestmentV1MessageSetInfo, { name: "CLOSINGAVAIL", order: 70, type: Boolean, read: InvestmentV1MessageSetInfo.prototype.getSupportsClosingStatements, write: InvestmentV1MessageSetInfo.prototype.setSupportsClosingStatements });
                })(info = profile.info || (profile.info = {}));
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../profile/AbstractMessageSetInfo'/>
///<reference path='InvestmentV1MessageSetInfo'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                var info;
                (function (info) {
                    var AbstractMessageSetInfo = ofx4js.domain.data.profile.AbstractMessageSetInfo;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    /**
                     * @author Ryan Heaton
                     */
                    var InvestmentMessageSetInfo = (function (_super) {
                        __extends(InvestmentMessageSetInfo, _super);
                        function InvestmentMessageSetInfo() {
                            _super.apply(this, arguments);
                        }
                        InvestmentMessageSetInfo.prototype.getVersion1Info = function () {
                            return this.version1Info;
                        };
                        InvestmentMessageSetInfo.prototype.setVersion1Info = function (version1Info) {
                            this.version1Info = version1Info;
                        };
                        return InvestmentMessageSetInfo;
                    })(AbstractMessageSetInfo);
                    info.InvestmentMessageSetInfo = InvestmentMessageSetInfo;
                    Aggregate_add(InvestmentMessageSetInfo, "INVSTMTMSGSET");
                    ChildAggregate_add(InvestmentMessageSetInfo, { order: 0, type: info.InvestmentV1MessageSetInfo, read: InvestmentMessageSetInfo.prototype.getVersion1Info, write: InvestmentMessageSetInfo.prototype.setVersion1Info });
                })(info = profile.info || (profile.info = {}));
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../profile/VersionSpecificMessageSetInfo'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                var info;
                (function (info) {
                    var VersionSpecificMessageSetInfo = ofx4js.domain.data.profile.VersionSpecificMessageSetInfo;
                    var MessageSetType = ofx4js.domain.data.MessageSetType;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    /**
                     * @author Ryan Heaton
                     */
                    var ProfileV1MessageSetInfo = (function (_super) {
                        __extends(ProfileV1MessageSetInfo, _super);
                        function ProfileV1MessageSetInfo() {
                            _super.apply(this, arguments);
                        }
                        ProfileV1MessageSetInfo.prototype.getMessageSetType = function () {
                            return 10 /* profile */;
                        };
                        return ProfileV1MessageSetInfo;
                    })(VersionSpecificMessageSetInfo);
                    info.ProfileV1MessageSetInfo = ProfileV1MessageSetInfo;
                    Aggregate_add(ProfileV1MessageSetInfo, "PROFMSGSETV1");
                })(info = profile.info || (profile.info = {}));
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../profile/AbstractMessageSetInfo'/>
///<reference path='ProfileV1MessageSetInfo'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                var info;
                (function (info) {
                    var AbstractMessageSetInfo = ofx4js.domain.data.profile.AbstractMessageSetInfo;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    /**
                     * @author Ryan Heaton
                     */
                    var ProfileMessageSetInfo = (function (_super) {
                        __extends(ProfileMessageSetInfo, _super);
                        function ProfileMessageSetInfo() {
                            _super.apply(this, arguments);
                        }
                        ProfileMessageSetInfo.prototype.getVersion1Info = function () {
                            return this.version1Info;
                        };
                        ProfileMessageSetInfo.prototype.setVersion1Info = function (version1Info) {
                            this.version1Info = version1Info;
                        };
                        return ProfileMessageSetInfo;
                    })(AbstractMessageSetInfo);
                    info.ProfileMessageSetInfo = ProfileMessageSetInfo;
                    Aggregate_add(ProfileMessageSetInfo, "PROFMSGSET");
                    ChildAggregate_add(ProfileMessageSetInfo, { order: 0, type: info.ProfileV1MessageSetInfo, read: ProfileMessageSetInfo.prototype.getVersion1Info, write: ProfileMessageSetInfo.prototype.setVersion1Info });
                })(info = profile.info || (profile.info = {}));
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
///<reference path='../../profile/VersionSpecificMessageSetInfo'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                var info;
                (function (info) {
                    var VersionSpecificMessageSetInfo = ofx4js.domain.data.profile.VersionSpecificMessageSetInfo;
                    var MessageSetType = ofx4js.domain.data.MessageSetType;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * @see "Section 13.7.2.1, OFX Spec"
                     *
                     * @author Jon Perlow
                     * @author Ryan Heaton
                     */
                    var SecurityListV1MessageSetInfo = (function (_super) {
                        __extends(SecurityListV1MessageSetInfo, _super);
                        function SecurityListV1MessageSetInfo() {
                            _super.apply(this, arguments);
                        }
                        SecurityListV1MessageSetInfo.prototype.getMessageSetType = function () {
                            return 9 /* investment_security */;
                        };
                        SecurityListV1MessageSetInfo.prototype.getSupportsSecurityListDownload = function () {
                            return this.supportsSecurityListDownload;
                        };
                        SecurityListV1MessageSetInfo.prototype.setSupportsSecurityListDownload = function (supportsSecurityListDownload) {
                            this.supportsSecurityListDownload = supportsSecurityListDownload;
                        };
                        return SecurityListV1MessageSetInfo;
                    })(VersionSpecificMessageSetInfo);
                    info.SecurityListV1MessageSetInfo = SecurityListV1MessageSetInfo;
                    Aggregate_add(SecurityListV1MessageSetInfo, "SECLISTMSGSETV1");
                    Element_add(SecurityListV1MessageSetInfo, { name: "SECLISTRQDNLD", required: true, order: 10, type: Boolean, read: SecurityListV1MessageSetInfo.prototype.getSupportsSecurityListDownload, write: SecurityListV1MessageSetInfo.prototype.setSupportsSecurityListDownload });
                })(info = profile.info || (profile.info = {}));
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../profile/AbstractMessageSetInfo'/>
///<reference path='SecurityListV1MessageSetInfo'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                var info;
                (function (info) {
                    var AbstractMessageSetInfo = ofx4js.domain.data.profile.AbstractMessageSetInfo;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    /**
                     * @author Ryan Heaton
                     */
                    var SecurityListMessageSetInfo = (function (_super) {
                        __extends(SecurityListMessageSetInfo, _super);
                        function SecurityListMessageSetInfo() {
                            _super.apply(this, arguments);
                        }
                        SecurityListMessageSetInfo.prototype.getVersion1Info = function () {
                            return this.version1Info;
                        };
                        SecurityListMessageSetInfo.prototype.setVersion1Info = function (version1Info) {
                            this.version1Info = version1Info;
                        };
                        return SecurityListMessageSetInfo;
                    })(AbstractMessageSetInfo);
                    info.SecurityListMessageSetInfo = SecurityListMessageSetInfo;
                    Aggregate_add(SecurityListMessageSetInfo, "SECLISTMSGSET");
                    ChildAggregate_add(SecurityListMessageSetInfo, { order: 0, type: info.SecurityListV1MessageSetInfo, read: SecurityListMessageSetInfo.prototype.getVersion1Info, write: SecurityListMessageSetInfo.prototype.setVersion1Info });
                })(info = profile.info || (profile.info = {}));
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../profile/VersionSpecificMessageSetInfo'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                var info;
                (function (info) {
                    var MessageSetType = ofx4js.domain.data.MessageSetType;
                    var VersionSpecificMessageSetInfo = ofx4js.domain.data.profile.VersionSpecificMessageSetInfo;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    /**
                     * @author Jon Perlow
                     */
                    var SignOnV1MessageSetInfo = (function (_super) {
                        __extends(SignOnV1MessageSetInfo, _super);
                        function SignOnV1MessageSetInfo() {
                            _super.apply(this, arguments);
                        }
                        SignOnV1MessageSetInfo.prototype.getMessageSetType = function () {
                            return 0 /* signon */;
                        };
                        return SignOnV1MessageSetInfo;
                    })(VersionSpecificMessageSetInfo);
                    info.SignOnV1MessageSetInfo = SignOnV1MessageSetInfo;
                    Aggregate_add(SignOnV1MessageSetInfo, "SIGNONMSGSETV1");
                })(info = profile.info || (profile.info = {}));
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../profile/AbstractMessageSetInfo'/>
///<reference path='SignOnV1MessageSetInfo'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                var info;
                (function (info) {
                    var AbstractMessageSetInfo = ofx4js.domain.data.profile.AbstractMessageSetInfo;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    /**
                     * @author Jon Perlow
                     */
                    var SignOnMessageSetInfo = (function (_super) {
                        __extends(SignOnMessageSetInfo, _super);
                        function SignOnMessageSetInfo() {
                            _super.apply(this, arguments);
                        }
                        SignOnMessageSetInfo.prototype.getVersion1Info = function () {
                            return this.version1Info;
                        };
                        SignOnMessageSetInfo.prototype.setVersion1Info = function (version1Info) {
                            this.version1Info = version1Info;
                        };
                        return SignOnMessageSetInfo;
                    })(AbstractMessageSetInfo);
                    info.SignOnMessageSetInfo = SignOnMessageSetInfo;
                    Aggregate_add(SignOnMessageSetInfo, "SIGNONMSGSET");
                    ChildAggregate_add(SignOnMessageSetInfo, { order: 0, type: info.SignOnV1MessageSetInfo, read: SignOnMessageSetInfo.prototype.getVersion1Info, write: SignOnMessageSetInfo.prototype.setVersion1Info });
                })(info = profile.info || (profile.info = {}));
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2012 TheStash
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../../meta/Aggregate_add'/>
///<reference path='../../../../../meta/Element_add'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                var info;
                (function (info) {
                    var signup;
                    (function (signup) {
                        var Aggregate_add = ofx4js.meta.Aggregate_add;
                        var Element_add = ofx4js.meta.Element_add;
                        /**
                         * Client Enrollment option, contains indicator as to whether the account number is required as part of enrollment
                         * @author Scott Priddy
                         * @see "Section 8.8 OFX Spec"
                         */
                        var ClientEnrollment = (function () {
                            function ClientEnrollment() {
                            }
                            /**
                             * Y if account number is required as part of enrollment
                             * @return Boolean
                             */
                            ClientEnrollment.prototype.getAccountRequired = function () {
                                return this.accountRequired;
                            };
                            ClientEnrollment.prototype.setAccountRequired = function (accountRequired) {
                                this.accountRequired = accountRequired;
                            };
                            return ClientEnrollment;
                        })();
                        signup.ClientEnrollment = ClientEnrollment;
                        Aggregate_add(ClientEnrollment, "CLIENTENROLL");
                        Element_add(ClientEnrollment, { name: "ACCTREQUIRED", required: true, order: 0, type: Boolean, read: ClientEnrollment.prototype.getAccountRequired, write: ClientEnrollment.prototype.setAccountRequired });
                    })(signup = info.signup || (info.signup = {}));
                })(info = profile.info || (profile.info = {}));
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2012 TheStash
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../../meta/Aggregate_add'/>
///<reference path='../../../../../meta/Element_add'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                var info;
                (function (info) {
                    var signup;
                    (function (signup) {
                        var Aggregate_add = ofx4js.meta.Aggregate_add;
                        var Element_add = ofx4js.meta.Element_add;
                        /**
                         * Other Enrollment option containing a text message directing users to some other method (such as a phone call)
                         * @author Scott Priddy
                         * @see "Section 8.8 OFX Spec"
                         */
                        var OtherEnrollment = (function () {
                            function OtherEnrollment() {
                            }
                            /**
                             * Message to consumer about what to do next (for example, a phone number),
                             * @return String
                             */
                            OtherEnrollment.prototype.getMessage = function () {
                                return this.message;
                            };
                            OtherEnrollment.prototype.setMessage = function (message) {
                                this.message = message;
                            };
                            return OtherEnrollment;
                        })();
                        signup.OtherEnrollment = OtherEnrollment;
                        Aggregate_add(OtherEnrollment, "OTHERENROLL");
                        Element_add(OtherEnrollment, { name: "MESSAGE", required: true, order: 0, type: String, read: OtherEnrollment.prototype.getMessage, write: OtherEnrollment.prototype.setMessage });
                    })(signup = info.signup || (info.signup = {}));
                })(info = profile.info || (profile.info = {}));
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2012 TheStash
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../../meta/Aggregate_add'/>
///<reference path='../../../../../meta/Element_add'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                var info;
                (function (info) {
                    var signup;
                    (function (signup) {
                        var Aggregate_add = ofx4js.meta.Aggregate_add;
                        var Element_add = ofx4js.meta.Element_add;
                        /**
                         * Web Enrollment option containing URL to direct user for web based enrollment, if supported.
                         * @author Scott Priddy
                         * @see "Section 8.8 OFX Spec"
                         */
                        var WebEnrollment = (function () {
                            function WebEnrollment() {
                            }
                            /**
                             * URL to start enrollment process
                             * @return String
                             */
                            WebEnrollment.prototype.getUrl = function () {
                                return this.url;
                            };
                            WebEnrollment.prototype.setUrl = function (url) {
                                this.url = url;
                            };
                            return WebEnrollment;
                        })();
                        signup.WebEnrollment = WebEnrollment;
                        Aggregate_add(WebEnrollment, "WEBENROLL");
                        Element_add(WebEnrollment, { name: "URL", required: true, order: 0, type: String, read: WebEnrollment.prototype.getUrl, write: WebEnrollment.prototype.setUrl });
                    })(signup = info.signup || (info.signup = {}));
                })(info = profile.info || (profile.info = {}));
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
///<reference path='../../profile/VersionSpecificMessageSetInfo'/>
///<reference path='../../profile/info/signup/ClientEnrollment'/>
///<reference path='../../profile/info/signup/OtherEnrollment'/>
///<reference path='../../profile/info/signup/WebEnrollment'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                var info;
                (function (info) {
                    var VersionSpecificMessageSetInfo = ofx4js.domain.data.profile.VersionSpecificMessageSetInfo;
                    var MessageSetType = ofx4js.domain.data.MessageSetType;
                    var ClientEnrollment = ofx4js.domain.data.profile.info.signup.ClientEnrollment;
                    var OtherEnrollment = ofx4js.domain.data.profile.info.signup.OtherEnrollment;
                    var WebEnrollment = ofx4js.domain.data.profile.info.signup.WebEnrollment;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * Servers use the Signup Message Set Profile Information to define how enrollment should proceed.
                     *
                     * This aggregate should contain 1 Enrollment option among <CLIENTENROLL>, <WEBENROLL>, or <OTHERENROLL>.
                     * todo: review how best to enforce this constraint
                     *
                     * @author Scott Priddy
                     * @author Ryan Heaton
                     * @see "Section 8.8 OFX Spec"
                     */
                    var SignupV1MessageSetInfo = (function (_super) {
                        __extends(SignupV1MessageSetInfo, _super);
                        function SignupV1MessageSetInfo() {
                            _super.apply(this, arguments);
                        }
                        SignupV1MessageSetInfo.prototype.getMessageSetType = function () {
                            return 1 /* signup */;
                        };
                        SignupV1MessageSetInfo.prototype.getClientEnrollment = function () {
                            return this.clientEnrollment;
                        };
                        SignupV1MessageSetInfo.prototype.setClientEnrollment = function (clientEnrollment) {
                            this.clientEnrollment = clientEnrollment;
                        };
                        SignupV1MessageSetInfo.prototype.getWebEnrollment = function () {
                            return this.webEnrollment;
                        };
                        SignupV1MessageSetInfo.prototype.setWebEnrollment = function (webEnrollment) {
                            this.webEnrollment = webEnrollment;
                        };
                        SignupV1MessageSetInfo.prototype.getOtherEnrollment = function () {
                            return this.otherEnrollment;
                        };
                        SignupV1MessageSetInfo.prototype.setOtherEnrollment = function (otherEnrollment) {
                            this.otherEnrollment = otherEnrollment;
                        };
                        /**
                         * Y if server supports client-based user information changes,
                         * @return Boolean
                         */
                        SignupV1MessageSetInfo.prototype.getSupportsClientUserInfoChanges = function () {
                            return this.supportsClientUserInfoChanges;
                        };
                        SignupV1MessageSetInfo.prototype.setSupportsClientUserInfoChanges = function (supportsClientUserInfoChanges) {
                            this.supportsClientUserInfoChanges = supportsClientUserInfoChanges;
                        };
                        /**
                         * Y if server can provide information on accounts with SVCSTATUS available,
                         * N means client should expect to ask user for specific account information
                         * @return Boolean
                         */
                        SignupV1MessageSetInfo.prototype.getSupportsAvailableAccounts = function () {
                            return this.supportsAvailableAccounts;
                        };
                        SignupV1MessageSetInfo.prototype.setSupportsAvailableAccounts = function (supportsAvailableAccounts) {
                            this.supportsAvailableAccounts = supportsAvailableAccounts;
                        };
                        /**
                         * Y if server allows clients to make service activation requests (<ACCTRQ>),
                         * N if server will only advise clients via synchronization of service additions,
                         * changes, or deletions.
                         * @return Boolean
                         */
                        SignupV1MessageSetInfo.prototype.getSupportsClientServiceActivationRequests = function () {
                            return this.supportsClientServiceActivationRequests;
                        };
                        SignupV1MessageSetInfo.prototype.setSupportsClientServiceActivationRequests = function (supportsClientServiceActivationRequests) {
                            this.supportsClientServiceActivationRequests = supportsClientServiceActivationRequests;
                        };
                        return SignupV1MessageSetInfo;
                    })(VersionSpecificMessageSetInfo);
                    info.SignupV1MessageSetInfo = SignupV1MessageSetInfo;
                    Aggregate_add(SignupV1MessageSetInfo, "SIGNUPMSGSETV1");
                    ChildAggregate_add(SignupV1MessageSetInfo, { name: "CLIENTENROLL", order: 10, type: ClientEnrollment, read: SignupV1MessageSetInfo.prototype.getClientEnrollment, write: SignupV1MessageSetInfo.prototype.setClientEnrollment });
                    ChildAggregate_add(SignupV1MessageSetInfo, { name: "WEBENROLL", order: 20, type: WebEnrollment, read: SignupV1MessageSetInfo.prototype.getWebEnrollment, write: SignupV1MessageSetInfo.prototype.setWebEnrollment });
                    ChildAggregate_add(SignupV1MessageSetInfo, { name: "OTHERENROLL", order: 30, type: OtherEnrollment, read: SignupV1MessageSetInfo.prototype.getOtherEnrollment, write: SignupV1MessageSetInfo.prototype.setOtherEnrollment });
                    Element_add(SignupV1MessageSetInfo, { name: "CHGUSERINFO", required: true, order: 40, type: Boolean, read: SignupV1MessageSetInfo.prototype.getSupportsClientUserInfoChanges, write: SignupV1MessageSetInfo.prototype.setSupportsClientUserInfoChanges });
                    Element_add(SignupV1MessageSetInfo, { name: "AVAILACCTS", required: true, order: 50, type: Boolean, read: SignupV1MessageSetInfo.prototype.getSupportsAvailableAccounts, write: SignupV1MessageSetInfo.prototype.setSupportsAvailableAccounts });
                    Element_add(SignupV1MessageSetInfo, { name: "CLIENTACTREQ", required: true, order: 60, type: Boolean, read: SignupV1MessageSetInfo.prototype.getSupportsClientServiceActivationRequests, write: SignupV1MessageSetInfo.prototype.setSupportsClientServiceActivationRequests });
                })(info = profile.info || (profile.info = {}));
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../profile/AbstractMessageSetInfo'/>
///<reference path='SignupV1MessageSetInfo'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                var info;
                (function (info) {
                    var AbstractMessageSetInfo = ofx4js.domain.data.profile.AbstractMessageSetInfo;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    /**
                     * @author Ryan Heaton
                     */
                    var SignupMessageSetInfo = (function (_super) {
                        __extends(SignupMessageSetInfo, _super);
                        function SignupMessageSetInfo() {
                            _super.apply(this, arguments);
                        }
                        SignupMessageSetInfo.prototype.getVersion1Info = function () {
                            return this.version1Info;
                        };
                        SignupMessageSetInfo.prototype.setVersion1Info = function (version1Info) {
                            this.version1Info = version1Info;
                        };
                        return SignupMessageSetInfo;
                    })(AbstractMessageSetInfo);
                    info.SignupMessageSetInfo = SignupMessageSetInfo;
                    Aggregate_add(SignupMessageSetInfo, "SIGNUPMSGSET");
                    ChildAggregate_add(SignupMessageSetInfo, { order: 0, type: info.SignupV1MessageSetInfo, read: SignupMessageSetInfo.prototype.getVersion1Info, write: SignupMessageSetInfo.prototype.setVersion1Info });
                })(info = profile.info || (profile.info = {}));
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/Element_add'/>
///<reference path='../../common/ProcessorDayOff'/>
///<reference path='../../profile/VersionSpecificMessageSetInfo'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                var info;
                (function (info) {
                    var ProcessorDayOff = ofx4js.domain.data.common.ProcessorDayOff;
                    var VersionSpecificMessageSetInfo = ofx4js.domain.data.profile.VersionSpecificMessageSetInfo;
                    var MessageSetType = ofx4js.domain.data.MessageSetType;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var Element_add = ofx4js.meta.Element_add;
                    /**
                     * Wire Transfer Message Set Profile
                     * @author Scott Priddy
                     * @author Ryan Heaton
                     * @see "Section 11.13.5 OFX Spec"
                     */
                    var WireTransferV1MessageSetInfo = (function (_super) {
                        __extends(WireTransferV1MessageSetInfo, _super);
                        function WireTransferV1MessageSetInfo() {
                            _super.apply(this, arguments);
                        }
                        WireTransferV1MessageSetInfo.prototype.getMessageSetType = function () {
                            return 6 /* wire_transfer */;
                        };
                        WireTransferV1MessageSetInfo.prototype.getProcessorDaysOff = function () {
                            return this.processorDaysOff;
                        };
                        WireTransferV1MessageSetInfo.prototype.setProcessorDaysOff = function (processorDaysOff) {
                            this.processorDaysOff = processorDaysOff;
                        };
                        WireTransferV1MessageSetInfo.prototype.getProcessEndTime = function () {
                            return this.processEndTime;
                        };
                        WireTransferV1MessageSetInfo.prototype.setProcessEndTime = function (processEndTime) {
                            this.processEndTime = processEndTime;
                        };
                        WireTransferV1MessageSetInfo.prototype.getSupportsScheduledTransfers = function () {
                            return this.supportsScheduledTransfers;
                        };
                        WireTransferV1MessageSetInfo.prototype.setSupportsScheduledTransfers = function (supportsScheduledTransfers) {
                            this.supportsScheduledTransfers = supportsScheduledTransfers;
                        };
                        WireTransferV1MessageSetInfo.prototype.getDomesticWireTransferFee = function () {
                            return this.domesticWireTransferFee;
                        };
                        WireTransferV1MessageSetInfo.prototype.setDomesticWireTransferFee = function (domesticWireTransferFee) {
                            this.domesticWireTransferFee = domesticWireTransferFee;
                        };
                        WireTransferV1MessageSetInfo.prototype.getInternationalWireTransferFee = function () {
                            return this.internationalWireTransferFee;
                        };
                        WireTransferV1MessageSetInfo.prototype.setInternationalWireTransferFee = function (internationalWireTransferFee) {
                            this.internationalWireTransferFee = internationalWireTransferFee;
                        };
                        return WireTransferV1MessageSetInfo;
                    })(VersionSpecificMessageSetInfo);
                    info.WireTransferV1MessageSetInfo = WireTransferV1MessageSetInfo;
                    Aggregate_add(WireTransferV1MessageSetInfo, "WIREXFERMSGSETV1");
                    Element_add(WireTransferV1MessageSetInfo, { name: "PROCDAYSOFF", order: 10, type: Array, collectionEntryType: ProcessorDayOff, read: WireTransferV1MessageSetInfo.prototype.getProcessorDaysOff, write: WireTransferV1MessageSetInfo.prototype.setProcessorDaysOff });
                    Element_add(WireTransferV1MessageSetInfo, { name: "PROCENDTM", required: true, order: 20, type: String, read: WireTransferV1MessageSetInfo.prototype.getProcessEndTime, write: WireTransferV1MessageSetInfo.prototype.setProcessEndTime });
                    Element_add(WireTransferV1MessageSetInfo, { name: "CANSCHED", required: true, order: 30, type: Boolean, read: WireTransferV1MessageSetInfo.prototype.getSupportsScheduledTransfers, write: WireTransferV1MessageSetInfo.prototype.setSupportsScheduledTransfers });
                    Element_add(WireTransferV1MessageSetInfo, { name: "DOMXFERFEE", required: true, order: 40, type: Number, read: WireTransferV1MessageSetInfo.prototype.getDomesticWireTransferFee, write: WireTransferV1MessageSetInfo.prototype.setDomesticWireTransferFee });
                    Element_add(WireTransferV1MessageSetInfo, { name: "INTLXFERFEE", required: true, order: 50, type: Number, read: WireTransferV1MessageSetInfo.prototype.getInternationalWireTransferFee, write: WireTransferV1MessageSetInfo.prototype.setInternationalWireTransferFee });
                })(info = profile.info || (profile.info = {}));
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../../meta/Aggregate_add'/>
///<reference path='../../../../meta/ChildAggregate_add'/>
///<reference path='../../profile/AbstractMessageSetInfo'/>
///<reference path='WireTransferV1MessageSetInfo'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var profile;
            (function (profile) {
                var info;
                (function (info) {
                    var AbstractMessageSetInfo = ofx4js.domain.data.profile.AbstractMessageSetInfo;
                    var Aggregate_add = ofx4js.meta.Aggregate_add;
                    var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                    /**
                     * @author Ryan Heaton
                     */
                    var WireTransferMessageSetInfo = (function (_super) {
                        __extends(WireTransferMessageSetInfo, _super);
                        function WireTransferMessageSetInfo() {
                            _super.apply(this, arguments);
                        }
                        WireTransferMessageSetInfo.prototype.getVersion1Info = function () {
                            return this.version1Info;
                        };
                        WireTransferMessageSetInfo.prototype.setVersion1Info = function (version1Info) {
                            this.version1Info = version1Info;
                        };
                        return WireTransferMessageSetInfo;
                    })(AbstractMessageSetInfo);
                    info.WireTransferMessageSetInfo = WireTransferMessageSetInfo;
                    Aggregate_add(WireTransferMessageSetInfo, "WIREXFERMSGSET");
                    ChildAggregate_add(WireTransferMessageSetInfo, { order: 0, type: info.WireTransferV1MessageSetInfo, read: WireTransferMessageSetInfo.prototype.getVersion1Info, write: WireTransferMessageSetInfo.prototype.setVersion1Info });
                })(info = profile.info || (profile.info = {}));
            })(profile = data.profile || (data.profile = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var seclist;
            (function (seclist) {
                /**
                 * Asset class for debt.
                 * @see "Section 13.8.5.7, OFX Spec"
                 *
                 * @author Jon Perlow
                 */
                (function (AssetClass) {
                    /**
                     * Government or corporate bonds issued in the United States.
                     */
                    AssetClass[AssetClass["DOMESTIC_BOND"] = 0] = "DOMESTIC_BOND";
                    /**
                     * Government or corporate bonds issued in foreign countries or the United States.
                     */
                    AssetClass[AssetClass["INTL_BOND"] = 1] = "INTL_BOND";
                    /**
                     * Stocks for US companies with market caps of $2B or more.
                     */
                    AssetClass[AssetClass["LARGE_STOCK"] = 2] = "LARGE_STOCK";
                    /**
                     * Stocks for US companies with market caps of ~$100M to $2B.
                     */
                    AssetClass[AssetClass["SMALL_STOCK"] = 3] = "SMALL_STOCK";
                    /**
                     * Publicallt traded stocks for companies based in foreign countries.
                     */
                    AssetClass[AssetClass["INTL_STOCK"] = 4] = "INTL_STOCK";
                    /**
                     * Stable, short-term investments which provide income that rises and falls with short-term
                     * interest rates.
                     */
                    AssetClass[AssetClass["MONEY_MARKET"] = 5] = "MONEY_MARKET";
                    /**
                     * Investments which do not fit into any of the other types.
                     */
                    AssetClass[AssetClass["OTHER"] = 6] = "OTHER";
                })(seclist.AssetClass || (seclist.AssetClass = {}));
                var AssetClass = seclist.AssetClass;
                function AssetClass_fromOfx(ofxVal) {
                    if ("DOMESTICBOND" === ofxVal) {
                        return 0 /* DOMESTIC_BOND */;
                    }
                    else if ("INTLBOND" === ofxVal) {
                        return 1 /* INTL_BOND */;
                    }
                    else if ("LARGESTOCK" === ofxVal) {
                        return 2 /* LARGE_STOCK */;
                    }
                    else if ("SMALLSTOCK" === ofxVal) {
                        return 3 /* SMALL_STOCK */;
                    }
                    else if ("INTLSTOCK" === ofxVal) {
                        return 4 /* INTL_STOCK */;
                    }
                    else if ("MONEYMARKET" === ofxVal) {
                        return 5 /* MONEY_MARKET */;
                    }
                    else if ("OTHER" === ofxVal) {
                        return 6 /* OTHER */;
                    }
                    else {
                        return null;
                    }
                }
                seclist.AssetClass_fromOfx = AssetClass_fromOfx;
            })(seclist = data.seclist || (data.seclist = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var seclist;
            (function (seclist) {
                /**
                 * Call type for debt.
                 * @see "Section 13.8.5.2, OFX Spec"
                 *
                 * @author Jon Perlow
                 */
                (function (CallType) {
                    CallType[CallType["CALL"] = 0] = "CALL";
                    CallType[CallType["PUT"] = 1] = "PUT";
                    CallType[CallType["PREFUND"] = 2] = "PREFUND";
                    CallType[CallType["MATURITY"] = 3] = "MATURITY";
                })(seclist.CallType || (seclist.CallType = {}));
                var CallType = seclist.CallType;
                function CallType_fromOfx(ofxVal) {
                    if ("CALL" === ofxVal) {
                        return 0 /* CALL */;
                    }
                    else if ("PUT" === ofxVal) {
                        return 1 /* PUT */;
                    }
                    else if ("PREFUND" === ofxVal) {
                        return 2 /* PREFUND */;
                    }
                    else if ("MATURITY" === ofxVal) {
                        return 3 /* MATURITY */;
                    }
                    else {
                        return null;
                    }
                }
                seclist.CallType_fromOfx = CallType_fromOfx;
            })(seclist = data.seclist || (data.seclist = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var seclist;
            (function (seclist) {
                /**
                 * Coupon freqency for debt.
                 * @see "Section 13.8.5.2, OFX Spec"
                 *
                 * @author Jon Perlow
                 */
                (function (CouponFrequency) {
                    CouponFrequency[CouponFrequency["MONTHLY"] = 0] = "MONTHLY";
                    CouponFrequency[CouponFrequency["QUARTERLY"] = 1] = "QUARTERLY";
                    CouponFrequency[CouponFrequency["SEMIANNUAL"] = 2] = "SEMIANNUAL";
                    CouponFrequency[CouponFrequency["ANNUAL"] = 3] = "ANNUAL";
                    CouponFrequency[CouponFrequency["OTHER"] = 4] = "OTHER";
                })(seclist.CouponFrequency || (seclist.CouponFrequency = {}));
                var CouponFrequency = seclist.CouponFrequency;
                function CouponFrequency_fromOfx(ofxVal) {
                    if ("MONTHLY" === ofxVal) {
                        return 0 /* MONTHLY */;
                    }
                    else if ("QUARTERLY" === ofxVal) {
                        return 1 /* QUARTERLY */;
                    }
                    else if ("SEMIANNUAL" === ofxVal) {
                        return 2 /* SEMIANNUAL */;
                    }
                    else if ("ANNUAL" === ofxVal) {
                        return 3 /* ANNUAL */;
                    }
                    else if ("OTHER" === ofxVal) {
                        return 4 /* OTHER */;
                    }
                    else {
                        return null;
                    }
                }
                seclist.CouponFrequency_fromOfx = CouponFrequency_fromOfx;
            })(seclist = data.seclist || (data.seclist = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var seclist;
            (function (seclist) {
                /**
                 * The class of debt.
                 * @see "Section 13.8.5.2, OFX Spec"
                 *
                 * @author Jon Perlow
                 */
                (function (DebtClass) {
                    DebtClass[DebtClass["TREASURY"] = 0] = "TREASURY";
                    DebtClass[DebtClass["MUNICIPAL"] = 1] = "MUNICIPAL";
                    DebtClass[DebtClass["CORPORATE"] = 2] = "CORPORATE";
                    DebtClass[DebtClass["OTHER"] = 3] = "OTHER";
                })(seclist.DebtClass || (seclist.DebtClass = {}));
                var DebtClass = seclist.DebtClass;
                function DebtClass_fromOfx(ofxVal) {
                    if ("TREASURY" === ofxVal) {
                        return 0 /* TREASURY */;
                    }
                    else if ("MUNICIPAL" === ofxVal) {
                        return 1 /* MUNICIPAL */;
                    }
                    else if ("CORPORATE" === ofxVal) {
                        return 2 /* CORPORATE */;
                    }
                    else if ("OTHER" === ofxVal) {
                        return 3 /* OTHER */;
                    }
                    else {
                        return null;
                    }
                }
                seclist.DebtClass_fromOfx = DebtClass_fromOfx;
            })(seclist = data.seclist || (data.seclist = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var seclist;
            (function (seclist) {
                /**
                 * The type of debt.
                 * @see "Section 13.8.5.2, OFX Spec"
                 *
                 * @author Jon Perlow
                 */
                (function (DebtType) {
                    DebtType[DebtType["COUPON"] = 0] = "COUPON";
                    DebtType[DebtType["ZERO"] = 1] = "ZERO";
                })(seclist.DebtType || (seclist.DebtType = {}));
                var DebtType = seclist.DebtType;
                function DebtType_fromOfx(ofxVal) {
                    if ("COUPON" === ofxVal) {
                        return 0 /* COUPON */;
                    }
                    else if ("ZERO" === ofxVal) {
                        return 1 /* ZERO */;
                    }
                    else {
                        return null;
                    }
                }
                seclist.DebtType_fromOfx = DebtType_fromOfx;
            })(seclist = data.seclist || (data.seclist = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/Element_add'/>
///<reference path='BaseSecurityInfo'/>
///<reference path='DebtType'/>
///<reference path='DebtClass'/>
///<reference path='CouponFrequency'/>
///<reference path='CallType'/>
///<reference path='AssetClass'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var seclist;
            (function (seclist) {
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                /**
                 * Info about a debt security.
                 * @see "Section 13.8.5.2, OFX Spec"
                 *
                 * @author Jon Perlow
                 */
                var DebtSecurityInfo = (function (_super) {
                    __extends(DebtSecurityInfo, _super);
                    function DebtSecurityInfo() {
                        _super.apply(this, arguments);
                    }
                    /**
                     * Gets the par value of the debt. This is a required field according to the OFX spec.
                     *
                     * @return the par value of the debt
                     */
                    DebtSecurityInfo.prototype.getParValue = function () {
                        return this.parValue;
                    };
                    /**
                     * Sets the par value of the debt. This is a required field according to the OFX spec.
                     *
                     * @param parValue the par value of the debt
                     */
                    DebtSecurityInfo.prototype.setParValue = function (parValue) {
                        this.parValue = parValue;
                    };
                    /**
                     * Gets the type of debt. One of "COUPON" or "ZERO". This is a required field according to the
                     * OFX spec.
                     *
                     * @return the type of debt
                     */
                    DebtSecurityInfo.prototype.getDebtType = function () {
                        return this.debtType;
                    };
                    /**
                     * Sets the type of debt. One of "COUPON" or "ZERO". This is a required field according to the
                     * OFX spec.
                     *
                     * @param debtType the type of debt
                     */
                    DebtSecurityInfo.prototype.setDebtType = function (debtType) {
                        this.debtType = debtType;
                    };
                    /**
                     * Gets the type of debt as one of the well-known types.
                     *
                     * @return the type of debt or null if it's not one of the well-known types
                     */
                    DebtSecurityInfo.prototype.getDebtTypeEnum = function () {
                        return seclist.DebtType_fromOfx(this.getDebtType());
                    };
                    /**
                     * Gets the class of debt. One of "TREASURY", "MUNICIPAL", "CORPORATE", or "OTHER".
                     * This is an optional field according to the OFX spec.
                     *
                     * @return the class of debt
                     */
                    DebtSecurityInfo.prototype.getDebtClass = function () {
                        return this.debtClass;
                    };
                    /**
                     * Sets the class of debt. One of "TREASURY", "MUNICIPAL", "CORPORATE", or "OTHER".
                     * This is an optional field according to the OFX spec.
                     *
                     * @param debtClass the class of debt
                     */
                    DebtSecurityInfo.prototype.setDebtClass = function (debtClass) {
                        this.debtClass = debtClass;
                    };
                    /**
                     * Gets the class of debt as one of the well-known types.
                     *
                     * @return the class of debt or null if it's not one of the well-known types
                     */
                    DebtSecurityInfo.prototype.getDebtClassEnum = function () {
                        return seclist.DebtClass_fromOfx(this.debtClass);
                    };
                    /**
                     * Gets the coupon rate of the debt for the next closest call date.
                     * This is an optional field according to the OFX spec.
                     *
                     * @return the coupon rate
                     */
                    DebtSecurityInfo.prototype.getCouponRate = function () {
                        return this.couponRate;
                    };
                    /**
                     * Sets the coupon rate of the debt for the next closest call date.
                     * This is an optional field according to the OFX spec.
                     *
                     * @param couponRate the coupon rate
                     */
                    DebtSecurityInfo.prototype.setCouponRate = function (couponRate) {
                        this.couponRate = couponRate;
                    };
                    /**
                     * Gets the next maturity date for the next coupon.
                     * This is an optional field according to the OFX spec.
                     *
                     * @return the maturity date for the next coupon
                     */
                    DebtSecurityInfo.prototype.getNextMaturityDate = function () {
                        return this.nextMaturityDate;
                    };
                    /**
                     * Sets the next maturity date for the next coupon.
                     * This is an optional field according to the OFX spec.
                     *
                     * @param nextMaturityDate the maturity date for the next coupon.
                     */
                    DebtSecurityInfo.prototype.setNextMaturityDate = function (nextMaturityDate) {
                        this.nextMaturityDate = nextMaturityDate;
                    };
                    /**
                     * Gets the coupon frequency. One of "MONTHLY", "QUARTERLY", "SEMIANNUAL", "ANNUAL", or "OTHER".
                     * This is an optional field according to the OFX spec.
                     *
                     * @return the coupon frequency
                     */
                    DebtSecurityInfo.prototype.getCouponFrequency = function () {
                        return this.couponFrequency;
                    };
                    /**
                     * Sets the coupon frequency. One of "MONTHLY", "QUARTERLY", "SEMIANNUAL", "ANNUAL", or "OTHER".
                     * This is an optional field according to the OFX spec.
                     *
                     * @param couponFrequency the coupon frequency
                     */
                    DebtSecurityInfo.prototype.setCouponFrequency = function (couponFrequency) {
                        this.couponFrequency = couponFrequency;
                    };
                    /**
                     * Gets the coupon frequency as one of the well-known types.
                     *
                     * @return the coupon frequency or null if it's not one of the well-known types
                     */
                    DebtSecurityInfo.prototype.getCouponFrequencyEnum = function () {
                        return seclist.CouponFrequency_fromOfx(this.getCouponFrequency());
                    };
                    /**
                     * Gets the bond price. This is an optional field according to the OFX spec.
                     *
                     * @return the bond price
                     */
                    DebtSecurityInfo.prototype.getCallPrice = function () {
                        return this.callPrice;
                    };
                    /**
                     * Sets the bond price. This is an optional field according to the OFX spec.
                     *
                     * @param callPrice the bond price
                     */
                    DebtSecurityInfo.prototype.setCallPrice = function (callPrice) {
                        this.callPrice = callPrice;
                    };
                    /**
                     * Gets the yield to call as a rate. This is an optional field according to the OFX spec.
                     *
                     * @return the yield to call rate
                     */
                    DebtSecurityInfo.prototype.getYieldToCall = function () {
                        return this.yieldToCall;
                    };
                    /**
                     * Sets the yield to call as a rate. This is an optional field according to the OFX spec.
                     *
                     * @param yieldToCall the yield to call rate
                     */
                    DebtSecurityInfo.prototype.setYieldToCall = function (yieldToCall) {
                        this.yieldToCall = yieldToCall;
                    };
                    /**
                     * Gets the next call date. This is an optional field according to the OFX spec.
                     *
                     * @return the next call date.
                     */
                    DebtSecurityInfo.prototype.getNextCallDate = function () {
                        return this.nextCallDate;
                    };
                    /**
                     * Sets the next call date. This is an optional field according to the OFX spec.
                     *
                     * @param nextCallDate the next call date.
                     */
                    DebtSecurityInfo.prototype.setNextCallDate = function (nextCallDate) {
                        this.nextCallDate = nextCallDate;
                    };
                    /**
                     * Gets the type of call.
                     *
                     * @return the type of call
                     */
                    DebtSecurityInfo.prototype.getCallType = function () {
                        return this.callType;
                    };
                    /**
                     * Sets the type of call.
                     *
                     * @param callType the type of call
                     */
                    DebtSecurityInfo.prototype.setCallType = function (callType) {
                        this.callType = callType;
                    };
                    /**
                     * Gets the type of call as one of the well-known types.
                     *
                     * @return the type of call or null if it's not one of the well-known types
                     */
                    DebtSecurityInfo.prototype.getCallTypeEnum = function () {
                        return seclist.CallType_fromOfx(this.getCallType());
                    };
                    /**
                     * Gets the yield to maturity as a rate. This is an optional field according to the OFX spec.
                     *
                     * @return the yield to call rate
                     */
                    DebtSecurityInfo.prototype.getYieldToMaturity = function () {
                        return this.yieldToMaturity;
                    };
                    /**
                     * Sets the yield to maturity as a rate. This is an optional field according to the OFX spec.
                     *
                     * @param yieldToMaturity the yield to call rate
                     */
                    DebtSecurityInfo.prototype.setYieldToMaturity = function (yieldToMaturity) {
                        this.yieldToMaturity = yieldToMaturity;
                    };
                    /**
                     * Gets the date when the debt matures. This is an optional field according to the OFX spec.
                     *
                     * @return the date when the debt matures
                     */
                    DebtSecurityInfo.prototype.getDebtMaturityDate = function () {
                        return this.debtMaturityDate;
                    };
                    /**
                     * Sets the date when the debt matures. This is an optional field according to the OFX spec.
                     *
                     * @param debtMaturityDate the date when the debt matures
                     */
                    DebtSecurityInfo.prototype.setDebtMaturityDate = function (debtMaturityDate) {
                        this.debtMaturityDate = debtMaturityDate;
                    };
                    /**
                     * Gets the asset class of the debt. This is an optional field according to the OFX spec.
                     *
                     * @return the asset class of the debt
                     */
                    DebtSecurityInfo.prototype.getAssetClass = function () {
                        return this.assetClass;
                    };
                    /**
                     * Sets the asset class of the debt. This is an optional field according to the OFX spec.
                     *
                     * @param assetClass the asset class of the debt
                     */
                    DebtSecurityInfo.prototype.setAssetClass = function (assetClass) {
                        this.assetClass = assetClass;
                    };
                    /**
                     * Gets the assert class as one of the well-known types.
                     *
                     * @return the asset class or null if it's not one of the well-known types
                     */
                    DebtSecurityInfo.prototype.getAssetClassEnum = function () {
                        return seclist.AssetClass_fromOfx(this.getAssetClass());
                    };
                    /**
                     * Gets the FI-defined asset class of the debt. This is an optional field according to the OFX
                     * spec.
                     *
                     * @return the FI-defined asset class of the debt
                     */
                    DebtSecurityInfo.prototype.getFiAssetClass = function () {
                        return this.fiAssetClass;
                    };
                    /**
                     * Sets the FI-defined asset class of the debt. This is an optional field according to the OFX
                     * spec.
                     *
                     * @param fiAssetClass the FI-defined asset class of the debt
                     */
                    DebtSecurityInfo.prototype.setFiAssetClass = function (fiAssetClass) {
                        this.fiAssetClass = fiAssetClass;
                    };
                    return DebtSecurityInfo;
                })(seclist.BaseSecurityInfo);
                seclist.DebtSecurityInfo = DebtSecurityInfo;
                Aggregate_add(DebtSecurityInfo, "DEBTINFO");
                Element_add(DebtSecurityInfo, { name: "PARVALUE", required: true, order: 20, type: Number, read: DebtSecurityInfo.prototype.getParValue, write: DebtSecurityInfo.prototype.setParValue });
                Element_add(DebtSecurityInfo, { name: "DEBTTYPE", required: true, order: 30, type: String, read: DebtSecurityInfo.prototype.getDebtType, write: DebtSecurityInfo.prototype.setDebtType });
                Element_add(DebtSecurityInfo, { name: "DEBTCLASS", order: 40, type: String, read: DebtSecurityInfo.prototype.getDebtClass, write: DebtSecurityInfo.prototype.setDebtClass });
                Element_add(DebtSecurityInfo, { name: "COUPONRT", order: 50, type: Number, read: DebtSecurityInfo.prototype.getCouponRate, write: DebtSecurityInfo.prototype.setCouponRate });
                Element_add(DebtSecurityInfo, { name: "DTCOUPON", order: 60, type: Date, read: DebtSecurityInfo.prototype.getNextMaturityDate, write: DebtSecurityInfo.prototype.setNextMaturityDate });
                Element_add(DebtSecurityInfo, { name: "COUPONFREQ", order: 70, type: String, read: DebtSecurityInfo.prototype.getCouponFrequency, write: DebtSecurityInfo.prototype.setCouponFrequency });
                Element_add(DebtSecurityInfo, { name: "CALLPRICE", order: 80, type: Number, read: DebtSecurityInfo.prototype.getCallPrice, write: DebtSecurityInfo.prototype.setCallPrice });
                Element_add(DebtSecurityInfo, { name: "YIELDTOCALL", order: 90, type: Number, read: DebtSecurityInfo.prototype.getYieldToCall, write: DebtSecurityInfo.prototype.setYieldToCall });
                Element_add(DebtSecurityInfo, { name: "DTCALL", order: 100, type: Date, read: DebtSecurityInfo.prototype.getNextCallDate, write: DebtSecurityInfo.prototype.setNextCallDate });
                Element_add(DebtSecurityInfo, { name: "CALLTYPE", order: 110, type: String, read: DebtSecurityInfo.prototype.getCallType, write: DebtSecurityInfo.prototype.setCallType });
                Element_add(DebtSecurityInfo, { name: "YIELDTOMAT", order: 120, type: Number, read: DebtSecurityInfo.prototype.getYieldToMaturity, write: DebtSecurityInfo.prototype.setYieldToMaturity });
                Element_add(DebtSecurityInfo, { name: "DTMAT", order: 130, type: Date, read: DebtSecurityInfo.prototype.getDebtMaturityDate, write: DebtSecurityInfo.prototype.setDebtMaturityDate });
                Element_add(DebtSecurityInfo, { name: "ASSETCLASS", order: 140, type: String, read: DebtSecurityInfo.prototype.getAssetClass, write: DebtSecurityInfo.prototype.setAssetClass });
                Element_add(DebtSecurityInfo, { name: "FIASSETCLASS", order: 150, type: String, read: DebtSecurityInfo.prototype.getFiAssetClass, write: DebtSecurityInfo.prototype.setFiAssetClass });
            })(seclist = data.seclist || (data.seclist = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var seclist;
            (function (seclist) {
                /**
                 * The type of mutual fund.
                 * @see "Section 13.8.5.2, OFX Spec"
                 *
                 * @author Jon Perlow
                 */
                (function (MutualFundType) {
                    MutualFundType[MutualFundType["OPEN_END"] = 0] = "OPEN_END";
                    MutualFundType[MutualFundType["CLOSE_END"] = 1] = "CLOSE_END";
                    MutualFundType[MutualFundType["OTHER"] = 2] = "OTHER";
                })(seclist.MutualFundType || (seclist.MutualFundType = {}));
                var MutualFundType = seclist.MutualFundType;
                function MutualFundType_fromOfx(ofxVal) {
                    if ("OPENEND" === ofxVal) {
                        return 0 /* OPEN_END */;
                    }
                    else if ("CLOSEEND" === ofxVal) {
                        return 1 /* CLOSE_END */;
                    }
                    else if ("OTHER" === ofxVal) {
                        return 2 /* OTHER */;
                    }
                    else {
                        return null;
                    }
                }
                seclist.MutualFundType_fromOfx = MutualFundType_fromOfx;
            })(seclist = data.seclist || (data.seclist = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/Element_add'/>
///<reference path='BaseSecurityInfo'/>
///<reference path='MutualFundType'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var seclist;
            (function (seclist) {
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                /**
                 * Info about a mutual fund security.
                 * @see "Section 13.8.5.3, OFX Spec"
                 *
                 * @author Jon Perlow
                 */
                var MutualFundSecurityInfo = (function (_super) {
                    __extends(MutualFundSecurityInfo, _super);
                    function MutualFundSecurityInfo() {
                        _super.apply(this, arguments);
                    }
                    /**
                     * Gets the mutual fund type. One of "OPENEND", "CLOSEEND", or "OTHER". This is an optional field
                     * according to the OFX spec.
                     *
                     * @return the mutual fund type
                     */
                    MutualFundSecurityInfo.prototype.getType = function () {
                        return this.mfType;
                    };
                    /**
                     * Sets the mutual fund type. One of "OPENEND", "CLOSEEND", or "OTHER". This is an optional field
                     * according to the OFX spec.
                     *
                     * @param mfType the mutual fund type
                     */
                    MutualFundSecurityInfo.prototype.setType = function (mfType) {
                        this.mfType = mfType;
                    };
                    /**
                     * Gets the mutual fund type as one of the well-known types.
                     *
                     * @return the mutual fund type or null if it's not one of the well-known types
                     */
                    MutualFundSecurityInfo.prototype.getTypeEnum = function () {
                        return seclist.MutualFundType_fromOfx(this.getType());
                    };
                    /**
                     * Gets the yield as a rate. This is an optional field according to the OFX spec.
                     *
                     * @return the yield as a rate
                     */
                    MutualFundSecurityInfo.prototype.getYield = function () {
                        return this.yield;
                    };
                    /**
                     * Sets the yield as a rate. This is an optional field according to the OFX spec.
                     *
                     * @param yield the yield as a rate
                     */
                    MutualFundSecurityInfo.prototype.setYield = function (yield_) {
                        this.yield = yield_;
                    };
                    /**
                     * Gets the as-of date for the yield. This is an optional field according to the OFX spec.
                     *
                     * @return the as-of date for the yield
                     */
                    MutualFundSecurityInfo.prototype.getDateYieldAsOf = function () {
                        return this.dateYieldAsOf;
                    };
                    /**
                     * Sets the as-of date for the yield. This is an optional field according to the OFX spec.
                     *
                     * @param dateYieldAsOf the as-of date for the yield
                     */
                    MutualFundSecurityInfo.prototype.setDateYieldAsOf = function (dateYieldAsOf) {
                        this.dateYieldAsOf = dateYieldAsOf;
                    };
                    return MutualFundSecurityInfo;
                })(seclist.BaseSecurityInfo);
                seclist.MutualFundSecurityInfo = MutualFundSecurityInfo;
                Aggregate_add(MutualFundSecurityInfo, "MFINFO");
                Element_add(MutualFundSecurityInfo, { name: "MFTYPE", order: 20, type: String, read: MutualFundSecurityInfo.prototype.getType, write: MutualFundSecurityInfo.prototype.setType });
                Element_add(MutualFundSecurityInfo, { name: "YIELD", order: 30, type: Number, read: MutualFundSecurityInfo.prototype.getYield, write: MutualFundSecurityInfo.prototype.setYield });
                Element_add(MutualFundSecurityInfo, { name: "DTYIELDASOF", order: 40, type: Date, read: MutualFundSecurityInfo.prototype.getDateYieldAsOf, write: MutualFundSecurityInfo.prototype.setDateYieldAsOf });
            })(seclist = data.seclist || (data.seclist = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var seclist;
            (function (seclist) {
                /**
                 * Type of option.
                 * @see "Section 13.8.5.4, OFX Spec"
                 *
                 * @author Jon Perlow
                 */
                (function (OptionType) {
                    OptionType[OptionType["PUT"] = 0] = "PUT";
                    OptionType[OptionType["CALL"] = 1] = "CALL";
                })(seclist.OptionType || (seclist.OptionType = {}));
                var OptionType = seclist.OptionType;
                function OptionType_fromOfx(ofxVal) {
                    if ("PUT" === ofxVal) {
                        return 0 /* PUT */;
                    }
                    else if ("CALL" === ofxVal) {
                        return 1 /* CALL */;
                    }
                    else {
                        return null;
                    }
                }
                seclist.OptionType_fromOfx = OptionType_fromOfx;
            })(seclist = data.seclist || (data.seclist = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/Element_add'/>
///<reference path='BaseSecurityInfo'/>
///<reference path='OptionType'/>
///<reference path='AssetClass'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var seclist;
            (function (seclist) {
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                /**
                 * Info about an option security.
                 * @see "Section 13.8.5.4, OFX Spec"
                 *
                 * @author Jon Perlow
                 */
                var OptionSecurityInfo = (function (_super) {
                    __extends(OptionSecurityInfo, _super);
                    function OptionSecurityInfo() {
                        _super.apply(this, arguments);
                    }
                    /**
                     * Gets the type of option. One of "PUT" or "CALL". This is a required field according to the
                     * OFX spec.
                     *
                     * @return the option type
                     */
                    OptionSecurityInfo.prototype.getOptionType = function () {
                        return this.optionType;
                    };
                    /**
                     * Sets the type of option. One of "PUT" or "CALL". This is a required field according to the
                     * OFX spec.
                     *
                     * @param optionType the option type
                     */
                    OptionSecurityInfo.prototype.setOptionType = function (optionType) {
                        this.optionType = optionType;
                    };
                    /**
                     * Gets the option type as a well-known enum value.
                     *
                     * @return the option type or null if it's not one of the well-known types
                     */
                    OptionSecurityInfo.prototype.getOptionTypeEnum = function () {
                        return seclist.OptionType_fromOfx(this.getOptionType());
                    };
                    /**
                     * Gets the strike price of the option. This is a required field according to the OFX spec.
                     *
                     * @return the option strike price
                     */
                    OptionSecurityInfo.prototype.getStrikePrice = function () {
                        return this.strikePrice;
                    };
                    /**
                     * Sets the strike price of the option. This is a required field according to the OFX spec.
                     *
                     * @param strikePrice the option strike price
                     */
                    OptionSecurityInfo.prototype.setStrikePrice = function (strikePrice) {
                        this.strikePrice = strikePrice;
                    };
                    /**
                     * Gets the expiration date of the option. This is a required field according to the OFX spec.
                     *
                     * @return the expiration date of the option
                     */
                    OptionSecurityInfo.prototype.getExpirationDate = function () {
                        return this.expirationDate;
                    };
                    /**
                     * Sets the expiration date of the option. This is a required field according to the OFX spec.
                     *
                     * @param expirationDate the expiration date of the option
                     */
                    OptionSecurityInfo.prototype.setExpirationDate = function (expirationDate) {
                        this.expirationDate = expirationDate;
                    };
                    /**
                     * Gets the number of shares per option contact. This is a required field according to the OFX
                     * spec.
                     *
                     * @return the number of shares per option contact
                     */
                    OptionSecurityInfo.prototype.getSharesPerContact = function () {
                        return this.sharesPerContact;
                    };
                    /**
                     * Sets the number of shares per option contact. This is a required field according to the OFX
                     * spec.
                     *
                     * @param sharesPerContact the number of shares per option contact
                     */
                    OptionSecurityInfo.prototype.setSharesPerContact = function (sharesPerContact) {
                        this.sharesPerContact = sharesPerContact;
                    };
                    /**
                     * Gets the security id of the underling security. This is an optional field according to the OFX
                     * spec.
                     *
                     * @return the security id of the underlying security
                     */
                    OptionSecurityInfo.prototype.getUnderlyingSecurity = function () {
                        return this.underlyingSecurity;
                    };
                    /**
                     * Sets the security id of the underling security. This is an optional field according to the OFX
                     * spec.
                     *
                     * @param underlyingSecurity the security id of the underlying security
                     */
                    OptionSecurityInfo.prototype.setUnderlyingSecurity = function (underlyingSecurity) {
                        this.underlyingSecurity = underlyingSecurity;
                    };
                    /**
                     * Gets the asset class of the option. This is an optional field according to the OFX spec.
                     *
                     * @return the asset class of the option
                     */
                    OptionSecurityInfo.prototype.getAssetClass = function () {
                        return this.assetClass;
                    };
                    /**
                     * Sets the asset class of the option. This is an optional field according to the OFX spec.
                     *
                     * @param assetClass the asset class of the option
                     */
                    OptionSecurityInfo.prototype.setAssetClass = function (assetClass) {
                        this.assetClass = assetClass;
                    };
                    /**
                     * Gets the assert class as one of the well-known types.
                     *
                     * @return the asset class or null if it's not one of the well-known types
                     */
                    OptionSecurityInfo.prototype.getAssetClassEnum = function () {
                        return seclist.AssetClass_fromOfx(this.getAssetClass());
                    };
                    /**
                     * Gets the FI-defined asset class of the option. This is an optional field according to the OFX
                     * spec.
                     *
                     * @return the FI-defined asset class of the option
                     */
                    OptionSecurityInfo.prototype.getFiAssetClass = function () {
                        return this.fiAssetClass;
                    };
                    /**
                     * Sets the FI-defined asset class of the option. This is an optional field according to the OFX
                     * spec.
                     *
                     * @param fiAssetClass the FI-defined asset class of the option
                     */
                    OptionSecurityInfo.prototype.setFiAssetClass = function (fiAssetClass) {
                        this.fiAssetClass = fiAssetClass;
                    };
                    return OptionSecurityInfo;
                })(seclist.BaseSecurityInfo);
                seclist.OptionSecurityInfo = OptionSecurityInfo;
                Aggregate_add(OptionSecurityInfo, "OPTINFO");
                Element_add(OptionSecurityInfo, { name: "OPTTYPE", order: 20, type: String, read: OptionSecurityInfo.prototype.getOptionType, write: OptionSecurityInfo.prototype.setOptionType });
                Element_add(OptionSecurityInfo, { name: "STRIKEPRICE", order: 30, type: Number, read: OptionSecurityInfo.prototype.getStrikePrice, write: OptionSecurityInfo.prototype.setStrikePrice });
                Element_add(OptionSecurityInfo, { name: "DTEXPIRE", order: 40, type: Date, read: OptionSecurityInfo.prototype.getExpirationDate, write: OptionSecurityInfo.prototype.setExpirationDate });
                Element_add(OptionSecurityInfo, { name: "SHPERCTRCT", order: 50, type: Number, read: OptionSecurityInfo.prototype.getSharesPerContact, write: OptionSecurityInfo.prototype.setSharesPerContact });
                Element_add(OptionSecurityInfo, { name: "SECID", order: 60, type: seclist.SecurityId, read: OptionSecurityInfo.prototype.getUnderlyingSecurity, write: OptionSecurityInfo.prototype.setUnderlyingSecurity });
                Element_add(OptionSecurityInfo, { name: "ASSETCLASS", order: 70, type: String, read: OptionSecurityInfo.prototype.getAssetClass, write: OptionSecurityInfo.prototype.setAssetClass });
                Element_add(OptionSecurityInfo, { name: "FIASSETCLASS", order: 80, type: String, read: OptionSecurityInfo.prototype.getFiAssetClass, write: OptionSecurityInfo.prototype.setFiAssetClass });
            })(seclist = data.seclist || (data.seclist = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/Element_add'/>
///<reference path='BaseSecurityInfo'/>
///<reference path='AssetClass'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var seclist;
            (function (seclist) {
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                /**
                 * Info about any other type of security.
                 * @see "Section 13.8.5.5, OFX Spec"
                 *
                 * @author Jon Perlow
                 */
                var OtherSecurityInfo = (function (_super) {
                    __extends(OtherSecurityInfo, _super);
                    function OtherSecurityInfo() {
                        _super.apply(this, arguments);
                    }
                    /**
                     * Gets a description of the type of security. This is an optional field according to the OFX
                     * spec.
                     *
                     * @return the description of the security
                     */
                    OtherSecurityInfo.prototype.getTypeDesc = function () {
                        return this.typeDesc;
                    };
                    /**
                     * Sets a description of the type of security. This is an optional field according to the OFX
                     * spec.
                     *
                     * @param typeDesc the description of the security
                     */
                    OtherSecurityInfo.prototype.setTypeDesc = function (typeDesc) {
                        this.typeDesc = typeDesc;
                    };
                    /**
                     * Gets the asset class of the option. This is an optional field according to the OFX spec.
                     *
                     * @return the asset class of the debt
                     */
                    OtherSecurityInfo.prototype.getAssetClass = function () {
                        return this.assetClass;
                    };
                    /**
                     * Sets the asset class of the debt. This is an optional field according to the OFX spec.
                     *
                     * @param assetClass the asset class of the debt
                     */
                    OtherSecurityInfo.prototype.setAssetClass = function (assetClass) {
                        this.assetClass = assetClass;
                    };
                    /**
                     * Gets the assert class as one of the well-known types.
                     *
                     * @return the asset class or null if it's not one of the well-known types
                     */
                    OtherSecurityInfo.prototype.getAssetClassEnum = function () {
                        return seclist.AssetClass_fromOfx(this.getAssetClass());
                    };
                    /**
                     * Gets the FI-defined asset class of the debt. This is an optional field according to the OFX
                     * spec.
                     *
                     * @return the FI-defined asset class of the debt
                     */
                    OtherSecurityInfo.prototype.getFiAssetClass = function () {
                        return this.fiAssetClass;
                    };
                    /**
                     * Sets the FI-defined asset class of the debt. This is an optional field according to the OFX
                     * spec.
                     *
                     * @param fiAssetClass the FI-defined asset class of the debt
                     */
                    OtherSecurityInfo.prototype.setFiAssetClass = function (fiAssetClass) {
                        this.fiAssetClass = fiAssetClass;
                    };
                    return OtherSecurityInfo;
                })(seclist.BaseSecurityInfo);
                seclist.OtherSecurityInfo = OtherSecurityInfo;
                Aggregate_add(OtherSecurityInfo, "OTHERINFO");
                Element_add(OtherSecurityInfo, { name: "TYPEDESC", order: 20, type: String, read: OtherSecurityInfo.prototype.getTypeDesc, write: OtherSecurityInfo.prototype.setTypeDesc });
                Element_add(OtherSecurityInfo, { name: "ASSETCLASS", order: 30, type: String, read: OtherSecurityInfo.prototype.getAssetClass, write: OtherSecurityInfo.prototype.setAssetClass });
                Element_add(OtherSecurityInfo, { name: "FIASSETCLASS", order: 40, type: String, read: OtherSecurityInfo.prototype.getFiAssetClass, write: OtherSecurityInfo.prototype.setFiAssetClass });
            })(seclist = data.seclist || (data.seclist = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var seclist;
            (function (seclist) {
                /**
                 * The type of debt.
                 * @see "Section 13.8.5.6, OFX Spec"
                 *
                 * @author Jon Perlow
                 */
                (function (StockType) {
                    StockType[StockType["COMMON"] = 0] = "COMMON";
                    StockType[StockType["PREFERRED"] = 1] = "PREFERRED";
                    StockType[StockType["CONVERTIBLE"] = 2] = "CONVERTIBLE";
                    StockType[StockType["OTHER"] = 3] = "OTHER";
                })(seclist.StockType || (seclist.StockType = {}));
                var StockType = seclist.StockType;
                function StockType_fromOfx(ofxVal) {
                    if ("COMMON" === ofxVal) {
                        return 0 /* COMMON */;
                    }
                    else if ("PREFERRED" === ofxVal) {
                        return 1 /* PREFERRED */;
                    }
                    else if ("CONVERTIBLE" === ofxVal) {
                        return 2 /* CONVERTIBLE */;
                    }
                    else if ("OTHER" === ofxVal) {
                        return 3 /* OTHER */;
                    }
                    else {
                        return null;
                    }
                }
                seclist.StockType_fromOfx = StockType_fromOfx;
            })(seclist = data.seclist || (data.seclist = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/Element_add'/>
///<reference path='BaseSecurityInfo'/>
///<reference path='StockType'/>
///<reference path='AssetClass'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var seclist;
            (function (seclist) {
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                /**
                 * Info about a stock security.
                 * @see "Section 13.8.5.6, OFX Spec"
                 *
                 * @author Jon Perlow
                 */
                var StockSecurityInfo = (function (_super) {
                    __extends(StockSecurityInfo, _super);
                    function StockSecurityInfo() {
                        _super.apply(this, arguments);
                    }
                    /**
                     * Gets the type of stock. One of "COMMON", "PREFERRED", "CONVERTIBLE", or "OTHER". This is an
                     * optional field according to the OFX spec.
                     *
                     * @return the type of stock
                     */
                    StockSecurityInfo.prototype.getType = function () {
                        return this.stockType;
                    };
                    /**
                     * Sets the type of stock. One of "COMMON", "PREFERRED", "CONVERTIBLE", or "OTHER". This is an
                     * optional field according to the OFX spec.
                     *
                     * @param stockType the type of stock
                     */
                    StockSecurityInfo.prototype.setType = function (stockType) {
                        this.stockType = stockType;
                    };
                    /**
                     * Gets the type of stock as one of the well-known types.
                     *
                     * @return the type of stock or null if it's not one of the well-known types
                     */
                    StockSecurityInfo.prototype.getTypeEnum = function () {
                        return seclist.StockType_fromOfx(this.getType());
                    };
                    /**
                     * Gets the current yield reported as the dividend expressed as a portion of the current stock
                     * price, a rate. This is an optional field according to the OFX spec.
                     *
                     * @return the dividend yield
                     */
                    StockSecurityInfo.prototype.getYield = function () {
                        return this.yield;
                    };
                    /**
                     * Sets the current yield reported as the dividend expressed as a portion of the current stock
                     * price, a rate. This is an optional field according to the OFX spec.
                     *
                     * @param yield the dividend yield
                     */
                    StockSecurityInfo.prototype.setYield = function (yield_) {
                        this.yield = yield_;
                    };
                    /**
                     * Gets the as-of date for the yield. This is an optional field according to the OFX spec.
                     *
                     * @return the as-of date for the yield
                     */
                    StockSecurityInfo.prototype.getDateYieldAsOf = function () {
                        return this.dateYieldAsOf;
                    };
                    /**
                     * Sets the as-of date for the yield. This is an optional field according to the OFX spec.
                     *
                     * @param dateYieldAsOf the as-of date for the yield
                     */
                    StockSecurityInfo.prototype.setDateYieldAsOf = function (dateYieldAsOf) {
                        this.dateYieldAsOf = dateYieldAsOf;
                    };
                    /**
                     * Gets the asset class of the stock. This is an optional field according to the OFX spec.
                     *
                     * @return the asset class of the stock
                     */
                    StockSecurityInfo.prototype.getAssetClass = function () {
                        return this.assetClass;
                    };
                    /**
                     * Sets the asset class of the stock. This is an optional field according to the OFX spec.
                     *
                     * @param assetClass the asset class of the stock
                     */
                    StockSecurityInfo.prototype.setAssetClass = function (assetClass) {
                        this.assetClass = assetClass;
                    };
                    /**
                     * Gets the assert class as one of the well-known types.
                     *
                     * @return the asset class or null if it's not one of the well-known types
                     */
                    StockSecurityInfo.prototype.getAssetClassEnum = function () {
                        return seclist.AssetClass_fromOfx(this.getAssetClass());
                    };
                    /**
                     * Gets the FI-defined asset class of the stock. This is an optional field according to the OFX
                     * spec.
                     *
                     * @return the FI-defined asset class of the stock
                     */
                    StockSecurityInfo.prototype.getFiAssetClass = function () {
                        return this.fiAssetClass;
                    };
                    /**
                     * Sets the FI-defined asset class of the stock. This is an optional field according to the OFX
                     * spec.
                     *
                     * @param fiAssetClass the FI-defined asset class of the stock
                     */
                    StockSecurityInfo.prototype.setFiAssetClass = function (fiAssetClass) {
                        this.fiAssetClass = fiAssetClass;
                    };
                    return StockSecurityInfo;
                })(seclist.BaseSecurityInfo);
                seclist.StockSecurityInfo = StockSecurityInfo;
                Aggregate_add(StockSecurityInfo, "STOCKINFO");
                Element_add(StockSecurityInfo, { name: "STOCKTYPE", order: 20, type: String, read: StockSecurityInfo.prototype.getType, write: StockSecurityInfo.prototype.setType });
                Element_add(StockSecurityInfo, { name: "YIELD", order: 30, type: Number, read: StockSecurityInfo.prototype.getYield, write: StockSecurityInfo.prototype.setYield });
                Element_add(StockSecurityInfo, { name: "DTYIELDASOF", order: 40, type: Date, read: StockSecurityInfo.prototype.getDateYieldAsOf, write: StockSecurityInfo.prototype.setDateYieldAsOf });
                Element_add(StockSecurityInfo, { name: "ASSETCLASS", order: 50, type: String, read: StockSecurityInfo.prototype.getAssetClass, write: StockSecurityInfo.prototype.setAssetClass });
                Element_add(StockSecurityInfo, { name: "FIASSETCLASS", order: 60, type: String, read: StockSecurityInfo.prototype.getFiAssetClass, write: StockSecurityInfo.prototype.setFiAssetClass });
            })(seclist = data.seclist || (data.seclist = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/Element_add'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var tax1099;
            (function (tax1099) {
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                /**
                 * @author Aparna Gawali
                 * aparna.gawali@sungard.com
                 */
                var ProcDet = (function () {
                    function ProcDet() {
                    }
                    /**
                     * @return the dtAqd
                     */
                    ProcDet.prototype.getDtAqd = function () {
                        return this.dtAqd;
                    };
                    /**
                     * @param dtAqd the dtAqd to set
                     */
                    ProcDet.prototype.setDtAqd = function (dtAqd) {
                        this.dtAqd = dtAqd;
                    };
                    /**
                     * @return the dtSale
                     */
                    ProcDet.prototype.getDtSale = function () {
                        return this.dtSale;
                    };
                    /**
                     * @param dtSale the dtSale to set
                     */
                    ProcDet.prototype.setDtSale = function (dtSale) {
                        this.dtSale = dtSale;
                    };
                    /**
                     * @return the secName
                     */
                    ProcDet.prototype.getSecName = function () {
                        return this.secName;
                    };
                    /**
                     * @param secName the secName to set
                     */
                    ProcDet.prototype.setSecName = function (secName) {
                        this.secName = secName;
                    };
                    /**
                     * @return the costBasis
                     */
                    ProcDet.prototype.getCostBasis = function () {
                        return this.costBasis;
                    };
                    /**
                     * @param costBasis the costBasis to set
                     */
                    ProcDet.prototype.setCostBasis = function (costBasis) {
                        this.costBasis = costBasis;
                    };
                    /**
                     * @return the saleSpr
                     */
                    ProcDet.prototype.getSaleSpr = function () {
                        return this.saleSpr;
                    };
                    /**
                     * @param saleSpr the saleSpr to set
                     */
                    ProcDet.prototype.setSaleSpr = function (saleSpr) {
                        this.saleSpr = saleSpr;
                    };
                    /**
                     * @return the longShort
                     */
                    ProcDet.prototype.getLongShort = function () {
                        return this.longShort;
                    };
                    /**
                     * @param longShort the longShort to set
                     */
                    ProcDet.prototype.setLongShort = function (longShort) {
                        this.longShort = longShort;
                    };
                    /**
                     * @return the wasDisAllowed
                     */
                    ProcDet.prototype.getWasDisAllowed = function () {
                        return this.wasDisAllowed;
                    };
                    /**
                     * @param wasDisAllowed the wasDisAllowed to set
                     */
                    ProcDet.prototype.setWasDisAllowed = function (wasDisAllowed) {
                        this.wasDisAllowed = wasDisAllowed;
                    };
                    /**
                     * @return the noncoveredSec
                     */
                    ProcDet.prototype.getNoncoveredSec = function () {
                        return this.noncoveredSec;
                    };
                    /**
                     * @param noncoveredSec the noncoveredSec to set
                     */
                    ProcDet.prototype.setNoncoveredSec = function (noncoveredSec) {
                        this.noncoveredSec = noncoveredSec;
                    };
                    /**
                     * @return the basisNotshown
                     */
                    ProcDet.prototype.getBasisNotshown = function () {
                        return this.basisNotshown;
                    };
                    /**
                     * @param basisNotshown the basisNotshown to set
                     */
                    ProcDet.prototype.setBasisNotshown = function (basisNotshown) {
                        this.basisNotshown = basisNotshown;
                    };
                    return ProcDet;
                })();
                tax1099.ProcDet = ProcDet;
                Aggregate_add(ProcDet, "PROCDET_V100");
                Element_add(ProcDet, { name: "DTAQD", required: false, order: 0, type: String, read: ProcDet.prototype.getDtAqd, write: ProcDet.prototype.setDtAqd });
                Element_add(ProcDet, { name: "DTSALE", required: false, order: 2, type: String, read: ProcDet.prototype.getDtSale, write: ProcDet.prototype.setDtSale });
                Element_add(ProcDet, { name: "SECNAME", required: false, order: 3, type: String, read: ProcDet.prototype.getSecName, write: ProcDet.prototype.setSecName });
                Element_add(ProcDet, { name: "COSTBASIS", required: false, order: 4, type: String, read: ProcDet.prototype.getCostBasis, write: ProcDet.prototype.setCostBasis });
                Element_add(ProcDet, { name: "SALESPR", required: false, order: 5, type: String, read: ProcDet.prototype.getSaleSpr, write: ProcDet.prototype.setSaleSpr });
                Element_add(ProcDet, { name: "LONGSHORT", required: false, order: 6, type: String, read: ProcDet.prototype.getLongShort, write: ProcDet.prototype.setLongShort });
                Element_add(ProcDet, { name: "WASHSALELOSSDISALLOWED", required: false, order: 7, type: String, read: ProcDet.prototype.getWasDisAllowed, write: ProcDet.prototype.setWasDisAllowed });
                Element_add(ProcDet, { name: "NONCOVEREDSECURITY", required: false, order: 8, type: String, read: ProcDet.prototype.getNoncoveredSec, write: ProcDet.prototype.setNoncoveredSec });
                Element_add(ProcDet, { name: "BASISNOTSHOWN", required: false, order: 9, type: String, read: ProcDet.prototype.getBasisNotshown, write: ProcDet.prototype.setBasisNotshown });
            })(tax1099 = data.tax1099 || (data.tax1099 = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../../../meta/Element_add'/>
///<reference path='ProcDet'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var tax1099;
            (function (tax1099) {
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                /**
                 * @author Aparna Gawali
                 * aparna.gawali@sungard.com
                 */
                var ExtDBInfo = (function () {
                    function ExtDBInfo() {
                    }
                    /**
                     * @return the procDet
                     */
                    ExtDBInfo.prototype.getProcDet = function () {
                        return this.procDet;
                    };
                    /**
                     * @param procDet the procDet to set
                     */
                    ExtDBInfo.prototype.setProcDet = function (procDet) {
                        this.procDet = procDet;
                    };
                    /**
                     * @return the teInterest
                     */
                    ExtDBInfo.prototype.getTeInterest = function () {
                        return this.teInterest;
                    };
                    /**
                     * @param teInterest the teInterest to set
                     */
                    ExtDBInfo.prototype.setTeInterest = function (teInterest) {
                        this.teInterest = teInterest;
                    };
                    /**
                     * @return the pabInterest
                     */
                    ExtDBInfo.prototype.getPabInterest = function () {
                        return this.pabInterest;
                    };
                    /**
                     * @param pabInterest the pabInterest to set
                     */
                    ExtDBInfo.prototype.setPabInterest = function (pabInterest) {
                        this.pabInterest = pabInterest;
                    };
                    /**
                     * @return the teIntDividend
                     */
                    ExtDBInfo.prototype.getTeIntDividend = function () {
                        return this.teIntDividend;
                    };
                    /**
                     * @param teIntDividend the teIntDividend to set
                     */
                    ExtDBInfo.prototype.setTeIntDividend = function (teIntDividend) {
                        this.teIntDividend = teIntDividend;
                    };
                    /**
                     * @return the pabDividend
                     */
                    ExtDBInfo.prototype.getPabDividend = function () {
                        return this.pabDividend;
                    };
                    /**
                     * @param pabDividend the pabDividend to set
                     */
                    ExtDBInfo.prototype.setPabDividend = function (pabDividend) {
                        this.pabDividend = pabDividend;
                    };
                    return ExtDBInfo;
                })();
                tax1099.ExtDBInfo = ExtDBInfo;
                Aggregate_add(ExtDBInfo, "EXTDBINFO_V100");
                ChildAggregate_add(ExtDBInfo, { required: false, order: 0, type: Array, collectionEntryType: tax1099.ProcDet, read: ExtDBInfo.prototype.getProcDet, write: ExtDBInfo.prototype.setProcDet });
                Element_add(ExtDBInfo, { name: "TEINTEREST", required: false, order: 1, type: String, read: ExtDBInfo.prototype.getTeInterest, write: ExtDBInfo.prototype.setTeInterest });
                Element_add(ExtDBInfo, { name: "PABINTEREST", required: false, order: 2, type: String, read: ExtDBInfo.prototype.getPabInterest, write: ExtDBInfo.prototype.setPabInterest });
                Element_add(ExtDBInfo, { name: "TEINTDIVIDEND", required: false, order: 3, type: String, read: ExtDBInfo.prototype.getTeIntDividend, write: ExtDBInfo.prototype.setTeIntDividend });
                Element_add(ExtDBInfo, { name: "PABDIVIDEND", required: false, order: 4, type: String, read: ExtDBInfo.prototype.getPabDividend, write: ExtDBInfo.prototype.setPabDividend });
            })(tax1099 = data.tax1099 || (data.tax1099 = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/Element_add'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var tax1099;
            (function (tax1099) {
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                /**
                 * @author Aparna Gawali
                 * aparna.gawali@sungard.com
                 */
                var PayerAddress = (function () {
                    function PayerAddress() {
                    }
                    /**
                     * @return the payerName1
                     */
                    PayerAddress.prototype.getPayerName1 = function () {
                        return this.payerName1;
                    };
                    /**
                     * @param payerName1 the payerName1 to set
                     */
                    PayerAddress.prototype.setPayerName1 = function (payerName1) {
                        this.payerName1 = payerName1;
                    };
                    /**
                     * @return the payerName2
                     */
                    PayerAddress.prototype.getPayerName2 = function () {
                        return this.payerName2;
                    };
                    /**
                     * @param payerName2 the payerName2 to set
                     */
                    PayerAddress.prototype.setPayerName2 = function (payerName2) {
                        this.payerName2 = payerName2;
                    };
                    /**
                     * @return the address1
                     */
                    PayerAddress.prototype.getAddress1 = function () {
                        return this.address1;
                    };
                    /**
                     * @param address1 the address1 to set
                     */
                    PayerAddress.prototype.setAddress1 = function (address1) {
                        this.address1 = address1;
                    };
                    /**
                     * @return the address2
                     */
                    PayerAddress.prototype.getAddress2 = function () {
                        return this.address2;
                    };
                    /**
                     * @param address2 the address2 to set
                     */
                    PayerAddress.prototype.setAddress2 = function (address2) {
                        this.address2 = address2;
                    };
                    /**
                     * @return the city
                     */
                    PayerAddress.prototype.getCity = function () {
                        return this.city;
                    };
                    /**
                     * @param city the city to set
                     */
                    PayerAddress.prototype.setCity = function (city) {
                        this.city = city;
                    };
                    /**
                     * @return the state
                     */
                    PayerAddress.prototype.getState = function () {
                        return this.state;
                    };
                    /**
                     * @param state the state to set
                     */
                    PayerAddress.prototype.setState = function (state) {
                        this.state = state;
                    };
                    /**
                     * @return the postalCode
                     */
                    PayerAddress.prototype.getPostalCode = function () {
                        return this.postalCode;
                    };
                    /**
                     * @param postalCode the postalCode to set
                     */
                    PayerAddress.prototype.setPostalCode = function (postalCode) {
                        this.postalCode = postalCode;
                    };
                    /**
                     * @return the phone
                     */
                    PayerAddress.prototype.getPhone = function () {
                        return this.phone;
                    };
                    /**
                     * @param phone the phone to set
                     */
                    PayerAddress.prototype.setPhone = function (phone) {
                        this.phone = phone;
                    };
                    return PayerAddress;
                })();
                tax1099.PayerAddress = PayerAddress;
                Aggregate_add(PayerAddress, "PAYERADDR");
                Element_add(PayerAddress, { name: "PAYERNAME1", required: true, order: 0, type: String, read: PayerAddress.prototype.getPayerName1, write: PayerAddress.prototype.setPayerName1 });
                Element_add(PayerAddress, { name: "PAYERNAME2", required: false, order: 1, type: String, read: PayerAddress.prototype.getPayerName2, write: PayerAddress.prototype.setPayerName2 });
                Element_add(PayerAddress, { name: "ADDR1", required: true, order: 2, type: String, read: PayerAddress.prototype.getAddress1, write: PayerAddress.prototype.setAddress1 });
                Element_add(PayerAddress, { name: "ADDR2", required: true, order: 3, type: String, read: PayerAddress.prototype.getAddress2, write: PayerAddress.prototype.setAddress2 });
                Element_add(PayerAddress, { name: "CITY", required: true, order: 4, type: String, read: PayerAddress.prototype.getCity, write: PayerAddress.prototype.setCity });
                Element_add(PayerAddress, { name: "STATE", required: true, order: 5, type: String, read: PayerAddress.prototype.getState, write: PayerAddress.prototype.setState });
                Element_add(PayerAddress, { name: "POSTALCODE", required: true, order: 6, type: String, read: PayerAddress.prototype.getPostalCode, write: PayerAddress.prototype.setPostalCode });
                Element_add(PayerAddress, { name: "PHONE", required: false, order: 7, type: String, read: PayerAddress.prototype.getPhone, write: PayerAddress.prototype.setPhone });
            })(tax1099 = data.tax1099 || (data.tax1099 = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/Element_add'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var tax1099;
            (function (tax1099) {
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                /**
                 * @author Aparna Gawali
                 * aparna.gawali@sungard.com
                 */
                var RecAddress = (function () {
                    function RecAddress() {
                    }
                    /**
                     * @return the recName1
                     */
                    RecAddress.prototype.getRecName1 = function () {
                        return this.recName1;
                    };
                    /**
                     * @param recName1 the recName1 to set
                     */
                    RecAddress.prototype.setRecName1 = function (recName1) {
                        this.recName1 = recName1;
                    };
                    /**
                     * @return the recName2
                     */
                    RecAddress.prototype.getRecName2 = function () {
                        return this.recName2;
                    };
                    /**
                     * @param recName2 the recName2 to set
                     */
                    RecAddress.prototype.setRecName2 = function (recName2) {
                        this.recName2 = recName2;
                    };
                    /**
                     * @return the address1
                     */
                    RecAddress.prototype.getAddress1 = function () {
                        return this.address1;
                    };
                    /**
                     * @param address1 the address1 to set
                     */
                    RecAddress.prototype.setAddress1 = function (address1) {
                        this.address1 = address1;
                    };
                    /**
                     * @return the address2
                     */
                    RecAddress.prototype.getAddress2 = function () {
                        return this.address2;
                    };
                    /**
                     * @param address2 the address2 to set
                     */
                    RecAddress.prototype.setAddress2 = function (address2) {
                        this.address2 = address2;
                    };
                    /**
                     * @return the city
                     */
                    RecAddress.prototype.getCity = function () {
                        return this.city;
                    };
                    /**
                     * @param city the city to set
                     */
                    RecAddress.prototype.setCity = function (city) {
                        this.city = city;
                    };
                    /**
                     * @return the state
                     */
                    RecAddress.prototype.getState = function () {
                        return this.state;
                    };
                    /**
                     * @param state the state to set
                     */
                    RecAddress.prototype.setState = function (state) {
                        this.state = state;
                    };
                    /**
                     * @return the postalCode
                     */
                    RecAddress.prototype.getPostalCode = function () {
                        return this.postalCode;
                    };
                    /**
                     * @param postalCode the postalCode to set
                     */
                    RecAddress.prototype.setPostalCode = function (postalCode) {
                        this.postalCode = postalCode;
                    };
                    /**
                     * @return the phone
                     */
                    RecAddress.prototype.getPhone = function () {
                        return this.phone;
                    };
                    /**
                     * @param phone the phone to set
                     */
                    RecAddress.prototype.setPhone = function (phone) {
                        this.phone = phone;
                    };
                    return RecAddress;
                })();
                tax1099.RecAddress = RecAddress;
                Aggregate_add(RecAddress, "RECADDR");
                Element_add(RecAddress, { name: "RECNAME1", required: true, order: 0, type: String, read: RecAddress.prototype.getRecName1, write: RecAddress.prototype.setRecName1 });
                Element_add(RecAddress, { name: "RECNAME2", required: false, order: 1, type: String, read: RecAddress.prototype.getRecName2, write: RecAddress.prototype.setRecName2 });
                Element_add(RecAddress, { name: "ADDR1", required: true, order: 2, type: String, read: RecAddress.prototype.getAddress1, write: RecAddress.prototype.setAddress1 });
                Element_add(RecAddress, { name: "ADDR2", required: true, order: 3, type: String, read: RecAddress.prototype.getAddress2, write: RecAddress.prototype.setAddress2 });
                Element_add(RecAddress, { name: "CITY", required: true, order: 4, type: String, read: RecAddress.prototype.getCity, write: RecAddress.prototype.setCity });
                Element_add(RecAddress, { name: "STATE", required: true, order: 5, type: String, read: RecAddress.prototype.getState, write: RecAddress.prototype.setState });
                Element_add(RecAddress, { name: "POSTALCODE", required: true, order: 6, type: String, read: RecAddress.prototype.getPostalCode, write: RecAddress.prototype.setPostalCode });
                Element_add(RecAddress, { name: "PHONE", required: false, order: 7, type: String, read: RecAddress.prototype.getPhone, write: RecAddress.prototype.setPhone });
            })(tax1099 = data.tax1099 || (data.tax1099 = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../../../meta/Element_add'/>
///<reference path='PayerAddress'/>
///<reference path='RecAddress'/>
///<reference path='ExtDBInfo'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var tax1099;
            (function (tax1099) {
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                /**
                 * @author Aparna Gawali
                 * aparna.gawali@sungard.com
                 */
                var Tax1099B = (function () {
                    function Tax1099B() {
                    }
                    Tax1099B.prototype.getSrvrtId = function () {
                        return this.srvrtId;
                    };
                    Tax1099B.prototype.setSrvrtId = function (srvrtId) {
                        this.srvrtId = srvrtId;
                    };
                    Tax1099B.prototype.getTaxYear = function () {
                        return this.taxYear;
                    };
                    Tax1099B.prototype.setTaxYear = function (taxYear) {
                        this.taxYear = taxYear;
                    };
                    /**
                     * @return the extDBInfo
                     */
                    Tax1099B.prototype.getExtDBInfo = function () {
                        return this.extDBInfo;
                    };
                    /**
                     * @param extDBInfo the extDBInfo to set
                     */
                    Tax1099B.prototype.setExtDBInfo = function (extDBInfo) {
                        this.extDBInfo = extDBInfo;
                    };
                    /**
                     * @return the payerAddress
                     */
                    Tax1099B.prototype.getPayerAddress = function () {
                        return this.payerAddress;
                    };
                    /**
                     * @param payerAddress the payerAddress to set
                     */
                    Tax1099B.prototype.setPayerAddress = function (payerAddress) {
                        this.payerAddress = payerAddress;
                    };
                    /**
                     * @return the payerId
                     */
                    Tax1099B.prototype.getPayerId = function () {
                        return this.payerId;
                    };
                    /**
                     * @param payerId the payerId to set
                     */
                    Tax1099B.prototype.setPayerId = function (payerId) {
                        this.payerId = payerId;
                    };
                    /**
                     * @return the recAddress
                     */
                    Tax1099B.prototype.getRecAddress = function () {
                        return this.recAddress;
                    };
                    /**
                     * @param recAddress the recAddress to set
                     */
                    Tax1099B.prototype.setRecAddress = function (recAddress) {
                        this.recAddress = recAddress;
                    };
                    /**
                     * @return the recId
                     */
                    Tax1099B.prototype.getRecId = function () {
                        return this.recId;
                    };
                    /**
                     * @param recId the recId to set
                     */
                    Tax1099B.prototype.setRecId = function (recId) {
                        this.recId = recId;
                    };
                    /**
                     * @return the recAcct
                     */
                    Tax1099B.prototype.getRecAcct = function () {
                        return this.recAcct;
                    };
                    /**
                     * @param recAcct the recAcct to set
                     */
                    Tax1099B.prototype.setRecAcct = function (recAcct) {
                        this.recAcct = recAcct;
                    };
                    return Tax1099B;
                })();
                tax1099.Tax1099B = Tax1099B;
                Aggregate_add(Tax1099B, "TAX1099B_V100");
                Element_add(Tax1099B, { name: "SRVRTID", required: true, order: 0, type: String, read: Tax1099B.prototype.getSrvrtId, write: Tax1099B.prototype.setSrvrtId });
                Element_add(Tax1099B, { name: "TAXYEAR", required: true, order: 1, type: String, read: Tax1099B.prototype.getTaxYear, write: Tax1099B.prototype.setTaxYear });
                ChildAggregate_add(Tax1099B, { required: true, order: 2, type: tax1099.ExtDBInfo, read: Tax1099B.prototype.getExtDBInfo, write: Tax1099B.prototype.setExtDBInfo });
                ChildAggregate_add(Tax1099B, { required: true, order: 3, type: tax1099.PayerAddress, read: Tax1099B.prototype.getPayerAddress, write: Tax1099B.prototype.setPayerAddress });
                Element_add(Tax1099B, { name: "PAYERID", required: true, order: 4, type: String, read: Tax1099B.prototype.getPayerId, write: Tax1099B.prototype.setPayerId });
                ChildAggregate_add(Tax1099B, { required: true, order: 5, type: tax1099.RecAddress, read: Tax1099B.prototype.getRecAddress, write: Tax1099B.prototype.setRecAddress });
                Element_add(Tax1099B, { name: "RECID", required: true, order: 6, type: String, read: Tax1099B.prototype.getRecId, write: Tax1099B.prototype.setRecId });
                Element_add(Tax1099B, { name: "RECACCT", required: true, order: 7, type: String, read: Tax1099B.prototype.getRecAcct, write: Tax1099B.prototype.setRecAcct });
            })(tax1099 = data.tax1099 || (data.tax1099 = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../../../meta/Element_add'/>
///<reference path='PayerAddress'/>
///<reference path='RecAddress'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var tax1099;
            (function (tax1099) {
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                /**
                 * @author Aparna Gawali
                 * aparna.gawali@sungard.com
                 */
                var Tax1099DIV = (function () {
                    function Tax1099DIV() {
                    }
                    Tax1099DIV.prototype.getSrvrtId = function () {
                        return this.srvrtId;
                    };
                    Tax1099DIV.prototype.setSrvrtId = function (srvrtId) {
                        this.srvrtId = srvrtId;
                    };
                    Tax1099DIV.prototype.getTaxYear = function () {
                        return this.taxYear;
                    };
                    Tax1099DIV.prototype.setTaxYear = function (taxYear) {
                        this.taxYear = taxYear;
                    };
                    /**
                     * @return the ordDiv
                     */
                    Tax1099DIV.prototype.getOrdDiv = function () {
                        return this.ordDiv;
                    };
                    /**
                     * @param ordDiv the ordDiv to set
                     */
                    Tax1099DIV.prototype.setOrdDiv = function (ordDiv) {
                        this.ordDiv = ordDiv;
                    };
                    /**
                     * @return the qualifiedDiv
                     */
                    Tax1099DIV.prototype.getQualifiedDiv = function () {
                        return this.qualifiedDiv;
                    };
                    /**
                     * @param qualifiedDiv the qualifiedDiv to set
                     */
                    Tax1099DIV.prototype.setQualifiedDiv = function (qualifiedDiv) {
                        this.qualifiedDiv = qualifiedDiv;
                    };
                    /**
                     * @return the totCapGain
                     */
                    Tax1099DIV.prototype.getTotCapGain = function () {
                        return this.totCapGain;
                    };
                    /**
                     * @param totCapGain the totCapGain to set
                     */
                    Tax1099DIV.prototype.setTotCapGain = function (totCapGain) {
                        this.totCapGain = totCapGain;
                    };
                    /**
                     * @return the p28Gain
                     */
                    Tax1099DIV.prototype.getP28Gain = function () {
                        return this.p28Gain;
                    };
                    /**
                     * @param p28Gain the p28Gain to set
                     */
                    Tax1099DIV.prototype.setP28Gain = function (p28Gain) {
                        this.p28Gain = p28Gain;
                    };
                    /**
                     * @return the unrecSec1250
                     */
                    Tax1099DIV.prototype.getUnrecSec1250 = function () {
                        return this.unrecSec1250;
                    };
                    /**
                     * @param unrecSec1250 the unrecSec1250 to set
                     */
                    Tax1099DIV.prototype.setUnrecSec1250 = function (unrecSec1250) {
                        this.unrecSec1250 = unrecSec1250;
                    };
                    /**
                     * @return the sec1202
                     */
                    Tax1099DIV.prototype.getSec1202 = function () {
                        return this.sec1202;
                    };
                    /**
                     * @param sec1202 the sec1202 to set
                     */
                    Tax1099DIV.prototype.setSec1202 = function (sec1202) {
                        this.sec1202 = sec1202;
                    };
                    /**
                     * @return the nonTaxDist
                     */
                    Tax1099DIV.prototype.getNonTaxDist = function () {
                        return this.nonTaxDist;
                    };
                    /**
                     * @param nonTaxDist the nonTaxDist to set
                     */
                    Tax1099DIV.prototype.setNonTaxDist = function (nonTaxDist) {
                        this.nonTaxDist = nonTaxDist;
                    };
                    /**
                     * @return the fedTaxWh
                     */
                    Tax1099DIV.prototype.getFedTaxWh = function () {
                        return this.fedTaxWh;
                    };
                    /**
                     * @param fedTaxWh the fedTaxWh to set
                     */
                    Tax1099DIV.prototype.setFedTaxWh = function (fedTaxWh) {
                        this.fedTaxWh = fedTaxWh;
                    };
                    /**
                     * @return the investExp
                     */
                    Tax1099DIV.prototype.getInvestExp = function () {
                        return this.investExp;
                    };
                    /**
                     * @param investExp the investExp to set
                     */
                    Tax1099DIV.prototype.setInvestExp = function (investExp) {
                        this.investExp = investExp;
                    };
                    /**
                     * @return the forTaxPd
                     */
                    Tax1099DIV.prototype.getForTaxPd = function () {
                        return this.forTaxPd;
                    };
                    /**
                     * @param forTaxPd the forTaxPd to set
                     */
                    Tax1099DIV.prototype.setForTaxPd = function (forTaxPd) {
                        this.forTaxPd = forTaxPd;
                    };
                    /**
                     * @return the cashLiq
                     */
                    Tax1099DIV.prototype.getCashLiq = function () {
                        return this.cashLiq;
                    };
                    /**
                     * @param cashLiq the cashLiq to set
                     */
                    Tax1099DIV.prototype.setCashLiq = function (cashLiq) {
                        this.cashLiq = cashLiq;
                    };
                    /**
                     * @return the nonCashLiq
                     */
                    Tax1099DIV.prototype.getNonCashLiq = function () {
                        return this.nonCashLiq;
                    };
                    /**
                     * @param nonCashLiq the nonCashLiq to set
                     */
                    Tax1099DIV.prototype.setNonCashLiq = function (nonCashLiq) {
                        this.nonCashLiq = nonCashLiq;
                    };
                    /**
                     * @return the payerAddress
                     */
                    Tax1099DIV.prototype.getPayerAddress = function () {
                        return this.payerAddress;
                    };
                    /**
                     * @param payerAddress the payerAddress to set
                     */
                    Tax1099DIV.prototype.setPayerAddress = function (payerAddress) {
                        this.payerAddress = payerAddress;
                    };
                    /**
                     * @return the payerId
                     */
                    Tax1099DIV.prototype.getPayerId = function () {
                        return this.payerId;
                    };
                    /**
                     * @param payerId the payerId to set
                     */
                    Tax1099DIV.prototype.setPayerId = function (payerId) {
                        this.payerId = payerId;
                    };
                    /**
                     * @return the recAddress
                     */
                    Tax1099DIV.prototype.getRecAddress = function () {
                        return this.recAddress;
                    };
                    /**
                     * @param recAddress the recAddress to set
                     */
                    Tax1099DIV.prototype.setRecAddress = function (recAddress) {
                        this.recAddress = recAddress;
                    };
                    /**
                     * @return the recId
                     */
                    Tax1099DIV.prototype.getRecId = function () {
                        return this.recId;
                    };
                    /**
                     * @param recId the recId to set
                     */
                    Tax1099DIV.prototype.setRecId = function (recId) {
                        this.recId = recId;
                    };
                    /**
                     * @return the recAcct
                     */
                    Tax1099DIV.prototype.getRecAcct = function () {
                        return this.recAcct;
                    };
                    /**
                     * @param recAcct the recAcct to set
                     */
                    Tax1099DIV.prototype.setRecAcct = function (recAcct) {
                        this.recAcct = recAcct;
                    };
                    return Tax1099DIV;
                })();
                tax1099.Tax1099DIV = Tax1099DIV;
                Aggregate_add(Tax1099DIV, "TAX1099DIV_V100");
                Element_add(Tax1099DIV, { name: "SRVRTID", required: false, order: 0, type: String, read: Tax1099DIV.prototype.getSrvrtId, write: Tax1099DIV.prototype.setSrvrtId });
                Element_add(Tax1099DIV, { name: "TAXYEAR", required: false, order: 1, type: String, read: Tax1099DIV.prototype.getTaxYear, write: Tax1099DIV.prototype.setTaxYear });
                Element_add(Tax1099DIV, { name: "ORDDIV", required: false, order: 2, type: String, read: Tax1099DIV.prototype.getOrdDiv, write: Tax1099DIV.prototype.setOrdDiv });
                Element_add(Tax1099DIV, { name: "QUALIFIEDDIV", required: false, order: 3, type: String, read: Tax1099DIV.prototype.getQualifiedDiv, write: Tax1099DIV.prototype.setQualifiedDiv });
                Element_add(Tax1099DIV, { name: "TOTCAPGAIN", required: false, order: 4, type: String, read: Tax1099DIV.prototype.getTotCapGain, write: Tax1099DIV.prototype.setTotCapGain });
                Element_add(Tax1099DIV, { name: "P28GAIN", required: false, order: 5, type: String, read: Tax1099DIV.prototype.getP28Gain, write: Tax1099DIV.prototype.setP28Gain });
                Element_add(Tax1099DIV, { name: "UNRECSEC1250", required: false, order: 6, type: String, read: Tax1099DIV.prototype.getUnrecSec1250, write: Tax1099DIV.prototype.setUnrecSec1250 });
                Element_add(Tax1099DIV, { name: "SEC1202", required: false, order: 7, type: String, read: Tax1099DIV.prototype.getSec1202, write: Tax1099DIV.prototype.setSec1202 });
                Element_add(Tax1099DIV, { name: "NONTAXDIST", required: false, order: 8, type: String, read: Tax1099DIV.prototype.getNonTaxDist, write: Tax1099DIV.prototype.setNonTaxDist });
                Element_add(Tax1099DIV, { name: "FEDTAXWH", required: false, order: 9, type: String, read: Tax1099DIV.prototype.getFedTaxWh, write: Tax1099DIV.prototype.setFedTaxWh });
                Element_add(Tax1099DIV, { name: "INVESTEXP", required: false, order: 10, type: String, read: Tax1099DIV.prototype.getInvestExp, write: Tax1099DIV.prototype.setInvestExp });
                Element_add(Tax1099DIV, { name: "FORTAXPD", required: false, order: 11, type: String, read: Tax1099DIV.prototype.getForTaxPd, write: Tax1099DIV.prototype.setForTaxPd });
                Element_add(Tax1099DIV, { name: "CASHLIQ", required: false, order: 12, type: String, read: Tax1099DIV.prototype.getCashLiq, write: Tax1099DIV.prototype.setCashLiq });
                Element_add(Tax1099DIV, { name: "NONCASHLIQ", required: false, order: 13, type: String, read: Tax1099DIV.prototype.getNonCashLiq, write: Tax1099DIV.prototype.setNonCashLiq });
                ChildAggregate_add(Tax1099DIV, { required: true, order: 14, type: tax1099.PayerAddress, read: Tax1099DIV.prototype.getPayerAddress, write: Tax1099DIV.prototype.setPayerAddress });
                Element_add(Tax1099DIV, { name: "PAYERID", required: true, order: 15, type: String, read: Tax1099DIV.prototype.getPayerId, write: Tax1099DIV.prototype.setPayerId });
                ChildAggregate_add(Tax1099DIV, { required: true, order: 16, type: tax1099.RecAddress, read: Tax1099DIV.prototype.getRecAddress, write: Tax1099DIV.prototype.setRecAddress });
                Element_add(Tax1099DIV, { name: "RECID", required: true, order: 17, type: String, read: Tax1099DIV.prototype.getRecId, write: Tax1099DIV.prototype.setRecId });
                Element_add(Tax1099DIV, { name: "RECACCT", required: true, order: 18, type: String, read: Tax1099DIV.prototype.getRecAcct, write: Tax1099DIV.prototype.setRecAcct });
            })(tax1099 = data.tax1099 || (data.tax1099 = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../../../meta/Element_add'/>
///<reference path='PayerAddress'/>
///<reference path='RecAddress'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var tax1099;
            (function (tax1099) {
                var PayerAddress = ofx4js.domain.data.tax1099.PayerAddress;
                var RecAddress = ofx4js.domain.data.tax1099.RecAddress;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                /**
                 * @author Aparna Gawali
                 * aparna.gawali@sungard.com
                 */
                var Tax1099INT = (function () {
                    function Tax1099INT() {
                    }
                    Tax1099INT.prototype.getSrvrtId = function () {
                        return this.srvrtId;
                    };
                    Tax1099INT.prototype.setSrvrtId = function (srvrtId) {
                        this.srvrtId = srvrtId;
                    };
                    Tax1099INT.prototype.getTaxYear = function () {
                        return this.taxYear;
                    };
                    Tax1099INT.prototype.setTaxYear = function (taxYear) {
                        this.taxYear = taxYear;
                    };
                    /**
                     * @return the intIncome
                     */
                    Tax1099INT.prototype.getIntIncome = function () {
                        return this.intIncome;
                    };
                    /**
                     * @param intIncome the intIncome to set
                     */
                    Tax1099INT.prototype.setIntIncome = function (intIncome) {
                        this.intIncome = intIncome;
                    };
                    /**
                     * @return the erlWithPen
                     */
                    Tax1099INT.prototype.getErlWithPen = function () {
                        return this.erlWithPen;
                    };
                    /**
                     * @param erlWithPen the erlWithPen to set
                     */
                    Tax1099INT.prototype.setErlWithPen = function (erlWithPen) {
                        this.erlWithPen = erlWithPen;
                    };
                    /**
                     * @return the intUsbndtrs
                     */
                    Tax1099INT.prototype.getIntUsbndtrs = function () {
                        return this.intUsbndtrs;
                    };
                    /**
                     * @param intUsbndtrs the intUsbndtrs to set
                     */
                    Tax1099INT.prototype.setIntUsbndtrs = function (intUsbndtrs) {
                        this.intUsbndtrs = intUsbndtrs;
                    };
                    /**
                     * @return the fedTaxWh
                     */
                    Tax1099INT.prototype.getFedTaxWh = function () {
                        return this.fedTaxWh;
                    };
                    /**
                     * @param fedTaxWh the fedTaxWh to set
                     */
                    Tax1099INT.prototype.setFedTaxWh = function (fedTaxWh) {
                        this.fedTaxWh = fedTaxWh;
                    };
                    /**
                     * @return the investExp
                     */
                    Tax1099INT.prototype.getInvestExp = function () {
                        return this.investExp;
                    };
                    /**
                     * @param investExp the investExp to set
                     */
                    Tax1099INT.prototype.setInvestExp = function (investExp) {
                        this.investExp = investExp;
                    };
                    /**
                     * @return the forTaxPd
                     */
                    Tax1099INT.prototype.getForTaxPd = function () {
                        return this.forTaxPd;
                    };
                    /**
                     * @param forTaxPd the forTaxPd to set
                     */
                    Tax1099INT.prototype.setForTaxPd = function (forTaxPd) {
                        this.forTaxPd = forTaxPd;
                    };
                    /**
                     * @return the payerAddress
                     */
                    Tax1099INT.prototype.getPayerAddress = function () {
                        return this.payerAddress;
                    };
                    /**
                     * @param payerAddress the payerAddress to set
                     */
                    Tax1099INT.prototype.setPayerAddress = function (payerAddress) {
                        this.payerAddress = payerAddress;
                    };
                    /**
                     * @return the payerId
                     */
                    Tax1099INT.prototype.getPayerId = function () {
                        return this.payerId;
                    };
                    /**
                     * @param payerId the payerId to set
                     */
                    Tax1099INT.prototype.setPayerId = function (payerId) {
                        this.payerId = payerId;
                    };
                    /**
                     * @return the recAddress
                     */
                    Tax1099INT.prototype.getRecAddress = function () {
                        return this.recAddress;
                    };
                    /**
                     * @param recAddress the recAddress to set
                     */
                    Tax1099INT.prototype.setRecAddress = function (recAddress) {
                        this.recAddress = recAddress;
                    };
                    /**
                     * @return the recId
                     */
                    Tax1099INT.prototype.getRecId = function () {
                        return this.recId;
                    };
                    /**
                     * @param recId the recId to set
                     */
                    Tax1099INT.prototype.setRecId = function (recId) {
                        this.recId = recId;
                    };
                    /**
                     * @return the recAcct
                     */
                    Tax1099INT.prototype.getRecAcct = function () {
                        return this.recAcct;
                    };
                    /**
                     * @param recAcct the recAcct to set
                     */
                    Tax1099INT.prototype.setRecAcct = function (recAcct) {
                        this.recAcct = recAcct;
                    };
                    /**
                     * @return the taxExemptInt
                     */
                    Tax1099INT.prototype.getTaxExemptInt = function () {
                        return this.taxExemptInt;
                    };
                    /**
                     * @param taxExemptInt the taxExemptInt to set
                     */
                    Tax1099INT.prototype.setTaxExemptInt = function (taxExemptInt) {
                        this.taxExemptInt = taxExemptInt;
                    };
                    /**
                     * @return the specifiedPabInt
                     */
                    Tax1099INT.prototype.getSpecifiedPabInt = function () {
                        return this.specifiedPabInt;
                    };
                    /**
                     * @param specifiedPabInt the specifiedPabInt to set
                     */
                    Tax1099INT.prototype.setSpecifiedPabInt = function (specifiedPabInt) {
                        this.specifiedPabInt = specifiedPabInt;
                    };
                    return Tax1099INT;
                })();
                tax1099.Tax1099INT = Tax1099INT;
                Aggregate_add(Tax1099INT, "TAX1099INT_V100");
                Element_add(Tax1099INT, { name: "SRVRTID", required: true, order: 0, type: String, read: Tax1099INT.prototype.getSrvrtId, write: Tax1099INT.prototype.setSrvrtId });
                Element_add(Tax1099INT, { name: "TAXYEAR", required: true, order: 1, type: String, read: Tax1099INT.prototype.getTaxYear, write: Tax1099INT.prototype.setTaxYear });
                Element_add(Tax1099INT, { name: "INTINCOME", required: false, order: 2, type: String, read: Tax1099INT.prototype.getIntIncome, write: Tax1099INT.prototype.setIntIncome });
                Element_add(Tax1099INT, { name: "ERLWITHPEN", required: false, order: 3, type: String, read: Tax1099INT.prototype.getErlWithPen, write: Tax1099INT.prototype.setErlWithPen });
                Element_add(Tax1099INT, { name: "INTUSBNDTRS", required: false, order: 4, type: String, read: Tax1099INT.prototype.getIntUsbndtrs, write: Tax1099INT.prototype.setIntUsbndtrs });
                Element_add(Tax1099INT, { name: "FEDTAXWH", required: false, order: 5, type: String, read: Tax1099INT.prototype.getFedTaxWh, write: Tax1099INT.prototype.setFedTaxWh });
                Element_add(Tax1099INT, { name: "INVESTEXP", required: false, order: 6, type: String, read: Tax1099INT.prototype.getInvestExp, write: Tax1099INT.prototype.setInvestExp });
                Element_add(Tax1099INT, { name: "FORTAXPD", required: false, order: 7, type: String, read: Tax1099INT.prototype.getForTaxPd, write: Tax1099INT.prototype.setForTaxPd });
                ChildAggregate_add(Tax1099INT, { required: true, order: 8, type: PayerAddress, read: Tax1099INT.prototype.getPayerAddress, write: Tax1099INT.prototype.setPayerAddress });
                Element_add(Tax1099INT, { name: "PAYERID", required: true, order: 9, type: String, read: Tax1099INT.prototype.getPayerId, write: Tax1099INT.prototype.setPayerId });
                ChildAggregate_add(Tax1099INT, { required: true, order: 10, type: RecAddress, read: Tax1099INT.prototype.getRecAddress, write: Tax1099INT.prototype.setRecAddress });
                Element_add(Tax1099INT, { name: "RECID", required: true, order: 11, type: String, read: Tax1099INT.prototype.getRecId, write: Tax1099INT.prototype.setRecId });
                Element_add(Tax1099INT, { name: "RECACCT", required: true, order: 12, type: String, read: Tax1099INT.prototype.getRecAcct, write: Tax1099INT.prototype.setRecAcct });
                Element_add(Tax1099INT, { name: "TAXEXEMPTINT", required: false, order: 13, type: String, read: Tax1099INT.prototype.getTaxExemptInt, write: Tax1099INT.prototype.setTaxExemptInt });
                Element_add(Tax1099INT, { name: "SPECIFIEDPABINT", required: false, order: 14, type: String, read: Tax1099INT.prototype.getSpecifiedPabInt, write: Tax1099INT.prototype.setSpecifiedPabInt });
            })(tax1099 = data.tax1099 || (data.tax1099 = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../../../meta/Element_add'/>
///<reference path='PayerAddress'/>
///<reference path='RecAddress'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var tax1099;
            (function (tax1099) {
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                /**
                 * @author Aparna Gawali
                 * aparna.gawali@sungard.com
                 */
                var Tax1099MISC = (function () {
                    function Tax1099MISC() {
                    }
                    Tax1099MISC.prototype.getSrvrtId = function () {
                        return this.srvrtId;
                    };
                    Tax1099MISC.prototype.setSrvrtId = function (srvrtId) {
                        this.srvrtId = srvrtId;
                    };
                    Tax1099MISC.prototype.getTaxYear = function () {
                        return this.taxYear;
                    };
                    Tax1099MISC.prototype.setTaxYear = function (taxYear) {
                        this.taxYear = taxYear;
                    };
                    /**
                     * @return the royalties
                     */
                    Tax1099MISC.prototype.getRoyalties = function () {
                        return this.royalties;
                    };
                    /**
                     * @param royalties the royalties to set
                     */
                    Tax1099MISC.prototype.setRoyalties = function (royalties) {
                        this.royalties = royalties;
                    };
                    /**
                     * @return the otherIncome
                     */
                    Tax1099MISC.prototype.getOtherIncome = function () {
                        return this.otherIncome;
                    };
                    /**
                     * @param otherIncome the otherIncome to set
                     */
                    Tax1099MISC.prototype.setOtherIncome = function (otherIncome) {
                        this.otherIncome = otherIncome;
                    };
                    /**
                     * @return the fedTaxWh
                     */
                    Tax1099MISC.prototype.getFedTaxWh = function () {
                        return this.fedTaxWh;
                    };
                    /**
                     * @param fedTaxWh the fedTaxWh to set
                     */
                    Tax1099MISC.prototype.setFedTaxWh = function (fedTaxWh) {
                        this.fedTaxWh = fedTaxWh;
                    };
                    /**
                     * @return the subPmts
                     */
                    Tax1099MISC.prototype.getSubPmts = function () {
                        return this.subPmts;
                    };
                    /**
                     * @param subPmts the subPmts to set
                     */
                    Tax1099MISC.prototype.setSubPmts = function (subPmts) {
                        this.subPmts = subPmts;
                    };
                    /**
                     * @return the payerAddress
                     */
                    Tax1099MISC.prototype.getPayerAddress = function () {
                        return this.payerAddress;
                    };
                    /**
                     * @param payerAddress the payerAddress to set
                     */
                    Tax1099MISC.prototype.setPayerAddress = function (payerAddress) {
                        this.payerAddress = payerAddress;
                    };
                    /**
                     * @return the payerId
                     */
                    Tax1099MISC.prototype.getPayerId = function () {
                        return this.payerId;
                    };
                    /**
                     * @param payerId the payerId to set
                     */
                    Tax1099MISC.prototype.setPayerId = function (payerId) {
                        this.payerId = payerId;
                    };
                    /**
                     * @return the recAddress
                     */
                    Tax1099MISC.prototype.getRecAddress = function () {
                        return this.recAddress;
                    };
                    /**
                     * @param recAddress the recAddress to set
                     */
                    Tax1099MISC.prototype.setRecAddress = function (recAddress) {
                        this.recAddress = recAddress;
                    };
                    /**
                     * @return the recId
                     */
                    Tax1099MISC.prototype.getRecId = function () {
                        return this.recId;
                    };
                    /**
                     * @param recId the recId to set
                     */
                    Tax1099MISC.prototype.setRecId = function (recId) {
                        this.recId = recId;
                    };
                    /**
                     * @return the recAcct
                     */
                    Tax1099MISC.prototype.getRecAcct = function () {
                        return this.recAcct;
                    };
                    /**
                     * @param recAcct the recAcct to set
                     */
                    Tax1099MISC.prototype.setRecAcct = function (recAcct) {
                        this.recAcct = recAcct;
                    };
                    return Tax1099MISC;
                })();
                tax1099.Tax1099MISC = Tax1099MISC;
                Aggregate_add(Tax1099MISC, "TAX1099MISC_V100");
                Element_add(Tax1099MISC, { name: "SRVRTID", required: true, order: 0, type: String, read: Tax1099MISC.prototype.getSrvrtId, write: Tax1099MISC.prototype.setSrvrtId });
                Element_add(Tax1099MISC, { name: "TAXYEAR", required: true, order: 1, type: String, read: Tax1099MISC.prototype.getTaxYear, write: Tax1099MISC.prototype.setTaxYear });
                Element_add(Tax1099MISC, { name: "ROYALTIES", required: false, order: 2, type: String, read: Tax1099MISC.prototype.getRoyalties, write: Tax1099MISC.prototype.setRoyalties });
                Element_add(Tax1099MISC, { name: "OTHERINCOME", required: false, order: 3, type: String, read: Tax1099MISC.prototype.getOtherIncome, write: Tax1099MISC.prototype.setOtherIncome });
                Element_add(Tax1099MISC, { name: "FEDTAXWH", required: false, order: 4, type: String, read: Tax1099MISC.prototype.getFedTaxWh, write: Tax1099MISC.prototype.setFedTaxWh });
                Element_add(Tax1099MISC, { name: "SUBPMTS", required: false, order: 5, type: String, read: Tax1099MISC.prototype.getSubPmts, write: Tax1099MISC.prototype.setSubPmts });
                ChildAggregate_add(Tax1099MISC, { required: true, order: 6, type: tax1099.PayerAddress, read: Tax1099MISC.prototype.getPayerAddress, write: Tax1099MISC.prototype.setPayerAddress });
                Element_add(Tax1099MISC, { name: "PAYERID", required: true, order: 7, type: String, read: Tax1099MISC.prototype.getPayerId, write: Tax1099MISC.prototype.setPayerId });
                ChildAggregate_add(Tax1099MISC, { required: true, order: 8, type: tax1099.RecAddress, read: Tax1099MISC.prototype.getRecAddress, write: Tax1099MISC.prototype.setRecAddress });
                Element_add(Tax1099MISC, { name: "RECID", required: true, order: 9, type: String, read: Tax1099MISC.prototype.getRecId, write: Tax1099MISC.prototype.setRecId });
                Element_add(Tax1099MISC, { name: "RECACCT", required: true, order: 10, type: String, read: Tax1099MISC.prototype.getRecAcct, write: Tax1099MISC.prototype.setRecAcct });
            })(tax1099 = data.tax1099 || (data.tax1099 = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../../../meta/Element_add'/>
///<reference path='PayerAddress'/>
///<reference path='RecAddress'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var tax1099;
            (function (tax1099) {
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                /**
                 * @author Aparna Gawali
                 * aparna.gawali@sungard.com
                 */
                var Tax1099OID = (function () {
                    function Tax1099OID() {
                    }
                    Tax1099OID.prototype.getSrvrtId = function () {
                        return this.srvrtId;
                    };
                    Tax1099OID.prototype.setSrvrtId = function (srvrtId) {
                        this.srvrtId = srvrtId;
                    };
                    Tax1099OID.prototype.getTaxYear = function () {
                        return this.taxYear;
                    };
                    Tax1099OID.prototype.setTaxYear = function (taxYear) {
                        this.taxYear = taxYear;
                    };
                    /**
                     * @return the originalDisc
                     */
                    Tax1099OID.prototype.getOriginalDisc = function () {
                        return this.originalDisc;
                    };
                    /**
                     * @param originalDisc the originalDisc to set
                     */
                    Tax1099OID.prototype.setOriginalDisc = function (originalDisc) {
                        this.originalDisc = originalDisc;
                    };
                    /**
                     * @return the otherPerInt
                     */
                    Tax1099OID.prototype.getOtherPerInt = function () {
                        return this.otherPerInt;
                    };
                    /**
                     * @param otherPerInt the otherPerInt to set
                     */
                    Tax1099OID.prototype.setOtherPerInt = function (otherPerInt) {
                        this.otherPerInt = otherPerInt;
                    };
                    /**
                     * @return the erlWithPen
                     */
                    Tax1099OID.prototype.getErlWithPen = function () {
                        return this.erlWithPen;
                    };
                    /**
                     * @param erlWithPen the erlWithPen to set
                     */
                    Tax1099OID.prototype.setErlWithPen = function (erlWithPen) {
                        this.erlWithPen = erlWithPen;
                    };
                    /**
                     * @return the fedTaxWh
                     */
                    Tax1099OID.prototype.getFedTaxWh = function () {
                        return this.fedTaxWh;
                    };
                    /**
                     * @param fedTaxWh the fedTaxWh to set
                     */
                    Tax1099OID.prototype.setFedTaxWh = function (fedTaxWh) {
                        this.fedTaxWh = fedTaxWh;
                    };
                    /**
                     * @return the desc
                     */
                    Tax1099OID.prototype.getDesc = function () {
                        return this.desc;
                    };
                    /**
                     * @param desc the desc to set
                     */
                    Tax1099OID.prototype.setDesc = function (desc) {
                        this.desc = desc;
                    };
                    /**
                     * @return the oidOnUstres
                     */
                    Tax1099OID.prototype.getOidOnUstres = function () {
                        return this.oidOnUstres;
                    };
                    /**
                     * @param oidOnUstres the oidOnUstres to set
                     */
                    Tax1099OID.prototype.setOidOnUstres = function (oidOnUstres) {
                        this.oidOnUstres = oidOnUstres;
                    };
                    /**
                     * @return the investExp
                     */
                    Tax1099OID.prototype.getInvestExp = function () {
                        return this.investExp;
                    };
                    /**
                     * @param investExp the investExp to set
                     */
                    Tax1099OID.prototype.setInvestExp = function (investExp) {
                        this.investExp = investExp;
                    };
                    /**
                     * @return the payerAddress
                     */
                    Tax1099OID.prototype.getPayerAddress = function () {
                        return this.payerAddress;
                    };
                    /**
                     * @param payerAddress the payerAddress to set
                     */
                    Tax1099OID.prototype.setPayerAddress = function (payerAddress) {
                        this.payerAddress = payerAddress;
                    };
                    /**
                     * @return the payerId
                     */
                    Tax1099OID.prototype.getPayerId = function () {
                        return this.payerId;
                    };
                    /**
                     * @param payerId the payerId to set
                     */
                    Tax1099OID.prototype.setPayerId = function (payerId) {
                        this.payerId = payerId;
                    };
                    /**
                     * @return the recAddress
                     */
                    Tax1099OID.prototype.getRecAddress = function () {
                        return this.recAddress;
                    };
                    /**
                     * @param recAddress the recAddress to set
                     */
                    Tax1099OID.prototype.setRecAddress = function (recAddress) {
                        this.recAddress = recAddress;
                    };
                    /**
                     * @return the recId
                     */
                    Tax1099OID.prototype.getRecId = function () {
                        return this.recId;
                    };
                    /**
                     * @param recId the recId to set
                     */
                    Tax1099OID.prototype.setRecId = function (recId) {
                        this.recId = recId;
                    };
                    /**
                     * @return the recAcct
                     */
                    Tax1099OID.prototype.getRecAcct = function () {
                        return this.recAcct;
                    };
                    /**
                     * @param recAcct the recAcct to set
                     */
                    Tax1099OID.prototype.setRecAcct = function (recAcct) {
                        this.recAcct = recAcct;
                    };
                    return Tax1099OID;
                })();
                tax1099.Tax1099OID = Tax1099OID;
                Aggregate_add(Tax1099OID, "TAX1099OID_V100");
                Element_add(Tax1099OID, { name: "SRVRTID", required: true, order: 0, type: String, read: Tax1099OID.prototype.getSrvrtId, write: Tax1099OID.prototype.setSrvrtId });
                Element_add(Tax1099OID, { name: "TAXYEAR", required: true, order: 1, type: String, read: Tax1099OID.prototype.getTaxYear, write: Tax1099OID.prototype.setTaxYear });
                Element_add(Tax1099OID, { name: "ORIGISDISC", required: false, order: 2, type: String, read: Tax1099OID.prototype.getOriginalDisc, write: Tax1099OID.prototype.setOriginalDisc });
                Element_add(Tax1099OID, { name: "OTHERPERINT", required: false, order: 3, type: String, read: Tax1099OID.prototype.getOtherPerInt, write: Tax1099OID.prototype.setOtherPerInt });
                Element_add(Tax1099OID, { name: "ERLWITHPEN", required: false, order: 4, type: String, read: Tax1099OID.prototype.getErlWithPen, write: Tax1099OID.prototype.setErlWithPen });
                Element_add(Tax1099OID, { name: "FEDTAXWH", required: false, order: 5, type: String, read: Tax1099OID.prototype.getFedTaxWh, write: Tax1099OID.prototype.setFedTaxWh });
                Element_add(Tax1099OID, { name: "DESCRIPTION", required: true, order: 6, type: String, read: Tax1099OID.prototype.getDesc, write: Tax1099OID.prototype.setDesc });
                Element_add(Tax1099OID, { name: "OIDONUSTRES", required: false, order: 7, type: String, read: Tax1099OID.prototype.getOidOnUstres, write: Tax1099OID.prototype.setOidOnUstres });
                Element_add(Tax1099OID, { name: "INVESTEXP", required: false, order: 8, type: String, read: Tax1099OID.prototype.getInvestExp, write: Tax1099OID.prototype.setInvestExp });
                ChildAggregate_add(Tax1099OID, { required: true, order: 9, type: tax1099.PayerAddress, read: Tax1099OID.prototype.getPayerAddress, write: Tax1099OID.prototype.setPayerAddress });
                Element_add(Tax1099OID, { name: "PAYERID", required: true, order: 10, type: String, read: Tax1099OID.prototype.getPayerId, write: Tax1099OID.prototype.setPayerId });
                ChildAggregate_add(Tax1099OID, { required: true, order: 11, type: tax1099.RecAddress, read: Tax1099OID.prototype.getRecAddress, write: Tax1099OID.prototype.setRecAddress });
                Element_add(Tax1099OID, { name: "RECID", required: true, order: 12, type: String, read: Tax1099OID.prototype.getRecId, write: Tax1099OID.prototype.setRecId });
                Element_add(Tax1099OID, { name: "RECACCT", required: true, order: 13, type: String, read: Tax1099OID.prototype.getRecAcct, write: Tax1099OID.prototype.setRecAcct });
            })(tax1099 = data.tax1099 || (data.tax1099 = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../../../meta/Element_add'/>
///<reference path='PayerAddress'/>
///<reference path='RecAddress'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var tax1099;
            (function (tax1099) {
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                /**
                 * @author Aparna Gawali
                 * aparna.gawali@sungard.com
                 */
                var Tax1099R = (function () {
                    function Tax1099R() {
                    }
                    Tax1099R.prototype.getSrvrtId = function () {
                        return this.srvrtId;
                    };
                    Tax1099R.prototype.setSrvrtId = function (srvrtId) {
                        this.srvrtId = srvrtId;
                    };
                    Tax1099R.prototype.getTaxYear = function () {
                        return this.taxYear;
                    };
                    Tax1099R.prototype.setTaxYear = function (taxYear) {
                        this.taxYear = taxYear;
                    };
                    /**
                       * @return the grossDist
                       */
                    Tax1099R.prototype.getGrossDist = function () {
                        return this.grossDist;
                    };
                    /**
                     * @param grossDist the grossDist to set
                     */
                    Tax1099R.prototype.setGrossDist = function (grossDist) {
                        this.grossDist = grossDist;
                    };
                    /**
                     * @return the taxAmt
                     */
                    Tax1099R.prototype.getTaxAmt = function () {
                        return this.taxAmt;
                    };
                    /**
                     * @param taxAmt the taxAmt to set
                     */
                    Tax1099R.prototype.setTaxAmt = function (taxAmt) {
                        this.taxAmt = taxAmt;
                    };
                    /**
                     * @return the taxAmtNd
                     */
                    Tax1099R.prototype.getTaxAmtNd = function () {
                        return this.taxAmtNd;
                    };
                    /**
                     * @param taxAmtNd the taxAmtNd to set
                     */
                    Tax1099R.prototype.setTaxAmtNd = function (taxAmtNd) {
                        this.taxAmtNd = taxAmtNd;
                    };
                    /**
                     * @return the capGain
                     */
                    Tax1099R.prototype.getCapGain = function () {
                        return this.capGain;
                    };
                    /**
                     * @param capGain the capGain to set
                     */
                    Tax1099R.prototype.setCapGain = function (capGain) {
                        this.capGain = capGain;
                    };
                    /**
                     * @return the fedTaxWh
                     */
                    Tax1099R.prototype.getFedTaxWh = function () {
                        return this.fedTaxWh;
                    };
                    /**
                     * @param fedTaxWh the fedTaxWh to set
                     */
                    Tax1099R.prototype.setFedTaxWh = function (fedTaxWh) {
                        this.fedTaxWh = fedTaxWh;
                    };
                    /**
                     * @return the empContins
                     */
                    Tax1099R.prototype.getEmpContins = function () {
                        return this.empContins;
                    };
                    /**
                     * @param empContins the empContins to set
                     */
                    Tax1099R.prototype.setEmpContins = function (empContins) {
                        this.empContins = empContins;
                    };
                    /**
                     * @return the netUnapEmp
                     */
                    Tax1099R.prototype.getNetUnapEmp = function () {
                        return this.netUnapEmp;
                    };
                    /**
                     * @param netUnapEmp the netUnapEmp to set
                     */
                    Tax1099R.prototype.setNetUnapEmp = function (netUnapEmp) {
                        this.netUnapEmp = netUnapEmp;
                    };
                    /**
                     * @return the distCode
                     */
                    Tax1099R.prototype.getDistCode = function () {
                        return this.distCode;
                    };
                    /**
                     * @param distCode the distCode to set
                     */
                    Tax1099R.prototype.setDistCode = function (distCode) {
                        this.distCode = distCode;
                    };
                    /**
                     * @return the iraSepSimp
                     */
                    Tax1099R.prototype.getIraSepSimp = function () {
                        return this.iraSepSimp;
                    };
                    /**
                     * @param iraSepSimp the iraSepSimp to set
                     */
                    Tax1099R.prototype.setIraSepSimp = function (iraSepSimp) {
                        this.iraSepSimp = iraSepSimp;
                    };
                    /**
                     * @return the annCtrctDist
                     */
                    Tax1099R.prototype.getAnnCtrctDist = function () {
                        return this.annCtrctDist;
                    };
                    /**
                     * @param annCtrctDist the annCtrctDist to set
                     */
                    Tax1099R.prototype.setAnnCtrctDist = function (annCtrctDist) {
                        this.annCtrctDist = annCtrctDist;
                    };
                    /**
                     * @return the totEmpCount
                     */
                    Tax1099R.prototype.getTotEmpCount = function () {
                        return this.totEmpCount;
                    };
                    /**
                     * @param totEmpCount the totEmpCount to set
                     */
                    Tax1099R.prototype.setTotEmpCount = function (totEmpCount) {
                        this.totEmpCount = totEmpCount;
                    };
                    /**
                     * @return the payerAddress
                     */
                    Tax1099R.prototype.getPayerAddress = function () {
                        return this.payerAddress;
                    };
                    /**
                     * @param payerAddress the payerAddress to set
                     */
                    Tax1099R.prototype.setPayerAddress = function (payerAddress) {
                        this.payerAddress = payerAddress;
                    };
                    /**
                     * @return the payerId
                     */
                    Tax1099R.prototype.getPayerId = function () {
                        return this.payerId;
                    };
                    /**
                     * @param payerId the payerId to set
                     */
                    Tax1099R.prototype.setPayerId = function (payerId) {
                        this.payerId = payerId;
                    };
                    /**
                     * @return the recAddress
                     */
                    Tax1099R.prototype.getRecAddress = function () {
                        return this.recAddress;
                    };
                    /**
                     * @param recAddress the recAddress to set
                     */
                    Tax1099R.prototype.setRecAddress = function (recAddress) {
                        this.recAddress = recAddress;
                    };
                    /**
                     * @return the recId
                     */
                    Tax1099R.prototype.getRecId = function () {
                        return this.recId;
                    };
                    /**
                     * @param recId the recId to set
                     */
                    Tax1099R.prototype.setRecId = function (recId) {
                        this.recId = recId;
                    };
                    /**
                     * @return the recAcct
                     */
                    Tax1099R.prototype.getRecAcct = function () {
                        return this.recAcct;
                    };
                    /**
                     * @param recAcct the recAcct to set
                     */
                    Tax1099R.prototype.setRecAcct = function (recAcct) {
                        this.recAcct = recAcct;
                    };
                    return Tax1099R;
                })();
                tax1099.Tax1099R = Tax1099R;
                Aggregate_add(Tax1099R, "TAX1099R_V100");
                Element_add(Tax1099R, { name: "SRVRTID", required: true, order: 0, type: String, read: Tax1099R.prototype.getSrvrtId, write: Tax1099R.prototype.setSrvrtId });
                Element_add(Tax1099R, { name: "TAXYEAR", required: true, order: 1, type: String, read: Tax1099R.prototype.getTaxYear, write: Tax1099R.prototype.setTaxYear });
                Element_add(Tax1099R, { name: "GROSSDIST", required: true, order: 2, type: String, read: Tax1099R.prototype.getGrossDist, write: Tax1099R.prototype.setGrossDist });
                Element_add(Tax1099R, { name: "TAXAMT", required: false, order: 3, type: String, read: Tax1099R.prototype.getTaxAmt, write: Tax1099R.prototype.setTaxAmt });
                Element_add(Tax1099R, { name: "TAXAMTND", required: false, order: 4, type: String, read: Tax1099R.prototype.getTaxAmtNd, write: Tax1099R.prototype.setTaxAmtNd });
                Element_add(Tax1099R, { name: "CAPGAIN", required: false, order: 5, type: String, read: Tax1099R.prototype.getCapGain, write: Tax1099R.prototype.setCapGain });
                Element_add(Tax1099R, { name: "FEDTAXWH", required: false, order: 6, type: String, read: Tax1099R.prototype.getFedTaxWh, write: Tax1099R.prototype.setFedTaxWh });
                Element_add(Tax1099R, { name: "EMPCONTINS", required: false, order: 7, type: String, read: Tax1099R.prototype.getEmpContins, write: Tax1099R.prototype.setEmpContins });
                Element_add(Tax1099R, { name: "NETUNAPEMP", required: false, order: 8, type: String, read: Tax1099R.prototype.getNetUnapEmp, write: Tax1099R.prototype.setNetUnapEmp });
                Element_add(Tax1099R, { name: "DISTCODE", required: true, order: 9, type: String, read: Tax1099R.prototype.getDistCode, write: Tax1099R.prototype.setDistCode });
                Element_add(Tax1099R, { name: "IRASEPSIMP", required: true, order: 10, type: String, read: Tax1099R.prototype.getIraSepSimp, write: Tax1099R.prototype.setIraSepSimp });
                Element_add(Tax1099R, { name: "ANNCTRCTDIST", required: false, order: 11, type: String, read: Tax1099R.prototype.getAnnCtrctDist, write: Tax1099R.prototype.setAnnCtrctDist });
                Element_add(Tax1099R, { name: "TOTEMPCONT", required: false, order: 12, type: String, read: Tax1099R.prototype.getTotEmpCount, write: Tax1099R.prototype.setTotEmpCount });
                ChildAggregate_add(Tax1099R, { required: true, order: 13, type: tax1099.PayerAddress, read: Tax1099R.prototype.getPayerAddress, write: Tax1099R.prototype.setPayerAddress });
                Element_add(Tax1099R, { name: "PAYERID", required: true, order: 14, type: String, read: Tax1099R.prototype.getPayerId, write: Tax1099R.prototype.setPayerId });
                ChildAggregate_add(Tax1099R, { required: true, order: 15, type: tax1099.RecAddress, read: Tax1099R.prototype.getRecAddress, write: Tax1099R.prototype.setRecAddress });
                Element_add(Tax1099R, { name: "RECID", required: true, order: 16, type: String, read: Tax1099R.prototype.getRecId, write: Tax1099R.prototype.setRecId });
                Element_add(Tax1099R, { name: "RECACCT", required: true, order: 17, type: String, read: Tax1099R.prototype.getRecAcct, write: Tax1099R.prototype.setRecAcct });
            })(tax1099 = data.tax1099 || (data.tax1099 = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/Element_add'/>
///<reference path='../common/T1099Request'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var tax1099;
            (function (tax1099) {
                var T1099Request = ofx4js.domain.data.common.T1099Request;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var Element_add = ofx4js.meta.Element_add;
                /**
                 * @author Aparna Gawali
                 * aparna.gawali@sungard.com
                 */
                var Tax1099Request = (function (_super) {
                    __extends(Tax1099Request, _super);
                    function Tax1099Request() {
                        _super.apply(this, arguments);
                    }
                    Tax1099Request.prototype.getTaxYear = function () {
                        return this.taxYear;
                    };
                    Tax1099Request.prototype.setTaxYear = function (taxYear) {
                        this.taxYear = taxYear;
                    };
                    return Tax1099Request;
                })(T1099Request);
                tax1099.Tax1099Request = Tax1099Request;
                Aggregate_add(Tax1099Request, "TAX1099RQ");
                Element_add(Tax1099Request, { name: "TAXYEAR", required: true, order: 0, type: String, read: Tax1099Request.prototype.getTaxYear, write: Tax1099Request.prototype.setTaxYear });
            })(tax1099 = data.tax1099 || (data.tax1099 = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../TransactionWrappedRequestMessage'/>
///<reference path='Tax1099Request'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var tax1099;
            (function (tax1099) {
                var TransactionWrappedRequestMessage = ofx4js.domain.data.TransactionWrappedRequestMessage;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                /**
                 * @author Aparna Gawali
                 * aparna.gawali@sungard.com
                 */
                var Tax1099RequestTransaction = (function (_super) {
                    __extends(Tax1099RequestTransaction, _super);
                    function Tax1099RequestTransaction() {
                        _super.apply(this, arguments);
                    }
                    /**
                     * The tax1099Request.
                     *
                     * @return The tax1099Request.
                     */
                    Tax1099RequestTransaction.prototype.getTax1099Request = function () {
                        return this.tax1099Request;
                    };
                    /**
                     * The tax1099Request.
                     *
                     * @param tax1099Request The message.
                     *
                     */
                    Tax1099RequestTransaction.prototype.setTax1099Request = function (tax1099Request) {
                        this.tax1099Request = tax1099Request;
                    };
                    // Inherited.
                    Tax1099RequestTransaction.prototype.setWrappedMessage = function (tax1099Request) {
                        this.setTax1099Request(tax1099Request);
                    };
                    return Tax1099RequestTransaction;
                })(TransactionWrappedRequestMessage);
                tax1099.Tax1099RequestTransaction = Tax1099RequestTransaction;
                Aggregate_add(Tax1099RequestTransaction, "TAX1099TRNRQ");
                ChildAggregate_add(Tax1099RequestTransaction, { required: true, order: 30, type: tax1099.Tax1099Request, read: Tax1099RequestTransaction.prototype.getTax1099Request, write: Tax1099RequestTransaction.prototype.setTax1099Request });
            })(tax1099 = data.tax1099 || (data.tax1099 = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../MessageSetType'/>
///<reference path='../RequestMessageSet'/>
///<reference path='Tax1099RequestTransaction'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var tax1099;
            (function (tax1099) {
                var MessageSetType = ofx4js.domain.data.MessageSetType;
                var RequestMessageSet = ofx4js.domain.data.RequestMessageSet;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                /**
                 * @author aparna.gawali
                 * aparna.gawali@sungard.com
                 *
                 */
                var Tax1099RequestMessageSet = (function (_super) {
                    __extends(Tax1099RequestMessageSet, _super);
                    function Tax1099RequestMessageSet() {
                        _super.apply(this, arguments);
                    }
                    Tax1099RequestMessageSet.prototype.getType = function () {
                        return 11 /* tax1099 */;
                    };
                    /**
                     * The statement request.
                     *
                     * @return The statement request.
                     */
                    Tax1099RequestMessageSet.prototype.getTaxRequestTransaction = function () {
                        return this.taxRequestTransaction;
                    };
                    /**
                     * The statement request.
                     *
                     * @param taxRequestTransaction The statement request.
                     */
                    Tax1099RequestMessageSet.prototype.setTaxRequestTransaction = function (taxRequestTransaction) {
                        this.taxRequestTransaction = taxRequestTransaction;
                    };
                    // Inherited.
                    Tax1099RequestMessageSet.prototype.getRequestMessages = function () {
                        var requestMessages = new Array();
                        if (this.getTaxRequestTransaction() != null) {
                            requestMessages.push(this.getTaxRequestTransaction());
                        }
                        return requestMessages;
                    };
                    return Tax1099RequestMessageSet;
                })(RequestMessageSet);
                tax1099.Tax1099RequestMessageSet = Tax1099RequestMessageSet;
                Aggregate_add(Tax1099RequestMessageSet, "TAX1099MSGSRQV1");
                ChildAggregate_add(Tax1099RequestMessageSet, { order: 0, type: tax1099.Tax1099RequestTransaction, read: Tax1099RequestMessageSet.prototype.getTaxRequestTransaction, write: Tax1099RequestMessageSet.prototype.setTaxRequestTransaction });
            })(tax1099 = data.tax1099 || (data.tax1099 = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../common/T1099Response'/>
///<reference path='Tax1099DIV'/>
///<reference path='Tax1099INT'/>
///<reference path='Tax1099R'/>
///<reference path='Tax1099B'/>
///<reference path='Tax1099MISC'/>
///<reference path='Tax1099OID'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var tax1099;
            (function (tax1099) {
                var T1099Response = ofx4js.domain.data.common.T1099Response;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                /**
                 * @author Aparna Gawali
                 * aparna.gawali@sungard.com
                 */
                var Tax1099Response = (function (_super) {
                    __extends(Tax1099Response, _super);
                    function Tax1099Response() {
                        _super.apply(this, arguments);
                    }
                    /**
                     * @return the lstTax1099DIV
                     */
                    Tax1099Response.prototype.getLstTax1099DIV = function () {
                        return this.lstTax1099DIV;
                    };
                    /**
                     * @param lstTax1099DIV
                     *            the lstTax1099DIV to set
                     */
                    Tax1099Response.prototype.setLstTax1099DIV = function (lstTax1099DIV) {
                        this.lstTax1099DIV = lstTax1099DIV;
                    };
                    Tax1099Response.prototype.getResponseMessageName = function () {
                        return "1099 Tax details";
                    };
                    /**
                     * @return the lstTax1099INT
                     */
                    Tax1099Response.prototype.getLstTax1099INT = function () {
                        return this.lstTax1099INT;
                    };
                    /**
                     * @param lstTax1099INT the lstTax1099INT to set
                     */
                    Tax1099Response.prototype.setLstTax1099INT = function (lstTax1099INT) {
                        this.lstTax1099INT = lstTax1099INT;
                    };
                    /**
                     * @return the lstTax1099R
                     */
                    Tax1099Response.prototype.getLstTax1099R = function () {
                        return this.lstTax1099R;
                    };
                    /**
                     * @param lstTax1099R the lstTax1099R to set
                     */
                    Tax1099Response.prototype.setLstTax1099R = function (lstTax1099R) {
                        this.lstTax1099R = lstTax1099R;
                    };
                    /**
                     * @return the lstTax1099B
                     */
                    Tax1099Response.prototype.getLstTax1099B = function () {
                        return this.lstTax1099B;
                    };
                    /**
                     * @param lstTax1099B the lstTax1099B to set
                     */
                    Tax1099Response.prototype.setLstTax1099B = function (lstTax1099B) {
                        this.lstTax1099B = lstTax1099B;
                    };
                    /**
                     * @return the lstTax1099MISC
                     */
                    Tax1099Response.prototype.getLstTax1099MISC = function () {
                        return this.lstTax1099MISC;
                    };
                    /**
                     * @param lstTax1099MISC the lstTax1099MISC to set
                     */
                    Tax1099Response.prototype.setLstTax1099MISC = function (lstTax1099MISC) {
                        this.lstTax1099MISC = lstTax1099MISC;
                    };
                    /**
                     * @return the lstTax1099OID
                     */
                    Tax1099Response.prototype.getLstTax1099OID = function () {
                        return this.lstTax1099OID;
                    };
                    /**
                     * @param lstTax1099OID the lstTax1099OID to set
                     */
                    Tax1099Response.prototype.setLstTax1099OID = function (lstTax1099OID) {
                        this.lstTax1099OID = lstTax1099OID;
                    };
                    return Tax1099Response;
                })(T1099Response);
                tax1099.Tax1099Response = Tax1099Response;
                Aggregate_add(Tax1099Response, "TAX1099RS");
                ChildAggregate_add(Tax1099Response, { required: false, order: 0, type: Array, collectionEntryType: tax1099.Tax1099DIV, read: Tax1099Response.prototype.getLstTax1099DIV, write: Tax1099Response.prototype.setLstTax1099DIV });
                ChildAggregate_add(Tax1099Response, { required: false, order: 1, type: Array, collectionEntryType: tax1099.Tax1099INT, read: Tax1099Response.prototype.getLstTax1099INT, write: Tax1099Response.prototype.setLstTax1099INT });
                ChildAggregate_add(Tax1099Response, { required: false, order: 2, type: Array, collectionEntryType: tax1099.Tax1099R, read: Tax1099Response.prototype.getLstTax1099R, write: Tax1099Response.prototype.setLstTax1099R });
                ChildAggregate_add(Tax1099Response, { required: false, order: 3, type: Array, collectionEntryType: tax1099.Tax1099B, read: Tax1099Response.prototype.getLstTax1099B, write: Tax1099Response.prototype.setLstTax1099B });
                ChildAggregate_add(Tax1099Response, { required: false, order: 4, type: Array, collectionEntryType: tax1099.Tax1099MISC, read: Tax1099Response.prototype.getLstTax1099MISC, write: Tax1099Response.prototype.setLstTax1099MISC });
                ChildAggregate_add(Tax1099Response, { required: false, order: 5, type: Array, collectionEntryType: tax1099.Tax1099OID, read: Tax1099Response.prototype.getLstTax1099OID, write: Tax1099Response.prototype.setLstTax1099OID });
            })(tax1099 = data.tax1099 || (data.tax1099 = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../TransactionWrappedResponseMessage'/>
///<reference path='Tax1099Response'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var tax1099;
            (function (tax1099) {
                var TransactionWrappedResponseMessage = ofx4js.domain.data.TransactionWrappedResponseMessage;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                /**
                 * @author Aparna Gawali
                 * aparna.gawali@sungard.com
                 */
                var Tax1099ResponseTransaction = (function (_super) {
                    __extends(Tax1099ResponseTransaction, _super);
                    function Tax1099ResponseTransaction() {
                        _super.apply(this, arguments);
                    }
                    /**
                     * The tax1099Response.
                     *
                     * @return The tax1099Response.
                     */
                    Tax1099ResponseTransaction.prototype.getTax1099Response = function () {
                        return this.tax1099Response;
                    };
                    /**
                     * The tax1099Response.
                     *
                     * @param tax1099Response The message.
                     */
                    Tax1099ResponseTransaction.prototype.setTax1099Response = function (tax1099Response) {
                        this.tax1099Response = tax1099Response;
                    };
                    // Inherited.
                    Tax1099ResponseTransaction.prototype.getWrappedMessage = function () {
                        return this.getTax1099Response();
                    };
                    return Tax1099ResponseTransaction;
                })(TransactionWrappedResponseMessage);
                tax1099.Tax1099ResponseTransaction = Tax1099ResponseTransaction;
                Aggregate_add(Tax1099ResponseTransaction, "TAX1099TRNRS");
                ChildAggregate_add(Tax1099ResponseTransaction, { required: false, order: 2, type: tax1099.Tax1099Response, read: Tax1099ResponseTransaction.prototype.getTax1099Response, write: Tax1099ResponseTransaction.prototype.setTax1099Response });
            })(tax1099 = data.tax1099 || (data.tax1099 = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../../../meta/Aggregate_add'/>
///<reference path='../../../meta/ChildAggregate_add'/>
///<reference path='../MessageSetType'/>
///<reference path='../ResponseMessageSet'/>
///<reference path='Tax1099ResponseTransaction'/>
var ofx4js;
(function (ofx4js) {
    var domain;
    (function (domain) {
        var data;
        (function (data) {
            var tax1099;
            (function (tax1099) {
                var MessageSetType = ofx4js.domain.data.MessageSetType;
                var ResponseMessageSet = ofx4js.domain.data.ResponseMessageSet;
                var Aggregate_add = ofx4js.meta.Aggregate_add;
                var ChildAggregate_add = ofx4js.meta.ChildAggregate_add;
                /**
                 * @author Aparna Gawali
                 * aparna.gawali@sungard.com
                 */
                var Tax1099ResponseMessageSet = (function (_super) {
                    __extends(Tax1099ResponseMessageSet, _super);
                    function Tax1099ResponseMessageSet() {
                        _super.apply(this, arguments);
                    }
                    Tax1099ResponseMessageSet.prototype.getType = function () {
                        return 11 /* tax1099 */;
                    };
                    /**
                     * The taxResponseTransaction list.
                     *
                     * Most OFX files have a single statement response, except MT2OFX
                     * which outputs OFX with multiple statement responses
                     * in a single banking response message set.
                     *
                     * @return The taxResponseTransaction list.
                     */
                    Tax1099ResponseMessageSet.prototype.getTaxResponseTransaction = function () {
                        return this.taxResponseTransaction;
                    };
                    /**
                     * The taxResponseTransaction.
                     *
                     * @param taxResponseTransaction The statement responses.
                     */
                    Tax1099ResponseMessageSet.prototype.setTaxResponseTransaction = function (taxResponseTransaction) {
                        if (taxResponseTransaction instanceof Array) {
                            this.taxResponseTransaction = taxResponseTransaction;
                        }
                        else if (taxResponseTransaction instanceof tax1099.Tax1099ResponseTransaction) {
                            this.taxResponseTransaction = [taxResponseTransaction];
                        }
                        else {
                            throw new ofx4js.Error("invalid type");
                        }
                    };
                    // Inherited.
                    Tax1099ResponseMessageSet.prototype.getResponseMessages = function () {
                        return this.taxResponseTransaction;
                    };
                    /**
                     * The first statement response.
                     *
                     * @return the first bank statement response.
                     * @deprecated Use getStatementResponses() because sometimes there are multiple responses
                     */
                    Tax1099ResponseMessageSet.prototype.getStatementResponse = function () {
                        return this.taxResponseTransaction == null || this.taxResponseTransaction.length == 0 ? null : this.taxResponseTransaction[0];
                    };
                    return Tax1099ResponseMessageSet;
                })(ResponseMessageSet);
                tax1099.Tax1099ResponseMessageSet = Tax1099ResponseMessageSet;
                Aggregate_add(Tax1099ResponseMessageSet, "TAX1099MSGSRSV1");
                ChildAggregate_add(Tax1099ResponseMessageSet, { order: 0, type: Array, collectionEntryType: tax1099.Tax1099ResponseTransaction, read: Tax1099ResponseMessageSet.prototype.getTaxResponseTransaction, write: Tax1099ResponseMessageSet.prototype.setTaxResponseTransaction });
            })(tax1099 = data.tax1099 || (data.tax1099 = {}));
        })(data = domain.data || (domain.data = {}));
    })(domain = ofx4js.domain || (ofx4js.domain = {}));
})(ofx4js || (ofx4js = {}));
var ofx4js;
(function (ofx4js) {
    ;
})(ofx4js || (ofx4js = {}));
module.exports = ofx4js;
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///<reference path='../OFXRuntimeException'/>
var ofx4js;
(function (ofx4js) {
    var io;
    (function (io) {
        var OFXRuntimeException = ofx4js.OFXRuntimeException;
        /**
         * Thrown when a required attribute of an aggregate is null or empty.
         *
         * @author Ryan Heaton
         */
        var RequiredAttributeException = (function (_super) {
            __extends(RequiredAttributeException, _super);
            function RequiredAttributeException(message) {
                _super.call(this, message);
            }
            return RequiredAttributeException;
        })(OFXRuntimeException);
        io.RequiredAttributeException = RequiredAttributeException;
    })(io = ofx4js.io || (ofx4js.io = {}));
})(ofx4js || (ofx4js = {}));

//# sourceMappingURL=../lib/ofx4js.js.map