var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("OFXException", [], function (exports_1, context_1) {
    "use strict";
    var OFXException;
    var __moduleName = context_1 && context_1.id;
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2008 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
             * Base exception class.
             *
             * @author Ryan Heaton
             */
            OFXException = /** @class */ (function (_super) {
                __extends(OFXException, _super);
                function OFXException(message, e) {
                    if (message === void 0) { message = null; }
                    if (e === void 0) { e = null; }
                    var _this = _super.call(this, message) || this;
                    _this.message = message;
                    _this.innerError = e;
                    return _this;
                }
                return OFXException;
            }(Error));
            exports_1("OFXException", OFXException);
        }
    };
});
System.register("OFXRuntimeException", ["OFXException"], function (exports_2, context_2) {
    "use strict";
    var OFXException_1, OFXRuntimeException;
    var __moduleName = context_2 && context_2.id;
    return {
        setters: [
            function (OFXException_1_1) {
                OFXException_1 = OFXException_1_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            OFXRuntimeException = /** @class */ (function (_super) {
                __extends(OFXRuntimeException, _super);
                function OFXRuntimeException(message) {
                    if (message === void 0) { message = null; }
                    return _super.call(this, message) || this;
                }
                return OFXRuntimeException;
            }(OFXException_1.OFXException));
            exports_2("OFXRuntimeException", OFXRuntimeException);
        }
    };
});
System.register("meta/PropertyDescriptor", [], function (exports_3, context_3) {
    "use strict";
    var PropertyDescriptor;
    var __moduleName = context_3 && context_3.id;
    /**
     * convenience function to supply a default value if the given value is not specified
     */
    function _default(value, defaultValue) {
        return (typeof value !== 'undefined') ? value : defaultValue;
    }
    exports_3("_default", _default);
    function isAssignableFrom(entryType, assignableTo) {
        return (assignableTo === entryType) ||
            ((typeof entryType === "function") && (assignableTo.prototype instanceof entryType));
    }
    exports_3("isAssignableFrom", isAssignableFrom);
    return {
        setters: [],
        execute: function () {
            ;
            /**
             * an interface to read and write a value into an object
             */
            PropertyDescriptor = /** @class */ (function () {
                function PropertyDescriptor(params) {
                    this.propertyType = params.type;
                    this.readMethod = params.read;
                    this.writeMethod = params.write;
                }
                PropertyDescriptor.prototype.getPropertyType = function () {
                    return this.propertyType;
                };
                PropertyDescriptor.prototype.getReadMethod = function () {
                    return this.readMethod;
                };
                PropertyDescriptor.prototype.getWriteMethod = function () {
                    return this.writeMethod;
                };
                return PropertyDescriptor;
            }());
            exports_3("PropertyDescriptor", PropertyDescriptor);
        }
    };
});
System.register("meta/ChildAggregate", ["meta/PropertyDescriptor"], function (exports_4, context_4) {
    "use strict";
    var PropertyDescriptor_1, ChildAggregate;
    var __moduleName = context_4 && context_4.id;
    return {
        setters: [
            function (PropertyDescriptor_1_1) {
                PropertyDescriptor_1 = PropertyDescriptor_1_1;
            }
        ],
        execute: function () {
            /**
             * Marks a method as providing a child aggregate (or set of them to a top-level aggregate).
             *
             * @author Ryan Heaton
             */
            ChildAggregate = /** @class */ (function (_super) {
                __extends(ChildAggregate, _super);
                function ChildAggregate(params) {
                    var _this = _super.call(this, params) || this;
                    _this._order = params.order;
                    _this._name = PropertyDescriptor_1._default(params.name, "##not_specified##");
                    _this._required = PropertyDescriptor_1._default(params.required, false);
                    _this._collectionEntryType = PropertyDescriptor_1._default(params.collectionEntryType, null);
                    return _this;
                }
                /**
                 * Used to specify the name of the aggregate in its context as a child aggregate.
                 *
                 * @return Used to specify the name of the aggregate in its context as a child aggregate.
                 */
                ChildAggregate.prototype.name = function () {
                    return this._name;
                };
                /**
                 * Whether this aggregate is required.
                 *
                 * @return Whether this aggregate is required.
                 */
                ChildAggregate.prototype.required = function () {
                    return this._required;
                };
                /**
                 * The order this child aggregate comes in its parent aggregate.
                 *
                 * @return The order this child aggregate comes in its parent aggregate.
                 */
                ChildAggregate.prototype.order = function () {
                    return this._order;
                };
                /**
                 * If the type is a collection, return the type of the elements of the collection (otherwise null)
                 */
                ChildAggregate.prototype.collectionEntryType = function () {
                    return this._collectionEntryType;
                };
                return ChildAggregate;
            }(PropertyDescriptor_1.PropertyDescriptor));
            exports_4("ChildAggregate", ChildAggregate);
        }
    };
});
System.register("meta/Header", ["meta/PropertyDescriptor"], function (exports_5, context_5) {
    "use strict";
    var PropertyDescriptor_2, Header;
    var __moduleName = context_5 && context_5.id;
    return {
        setters: [
            function (PropertyDescriptor_2_1) {
                PropertyDescriptor_2 = PropertyDescriptor_2_1;
            }
        ],
        execute: function () {
            /**
             * An OFX element, applied to a javabean property.
             *
             * @author Ryan Heaton
             */
            Header = /** @class */ (function (_super) {
                __extends(Header, _super);
                function Header(params) {
                    var _this = _super.call(this, params) || this;
                    _this._name = params.name;
                    return _this;
                }
                /**
                 * The name of the element.
                 *
                 * @return The name of the element.
                 */
                Header.prototype.name = function () {
                    return this._name;
                };
                return Header;
            }(PropertyDescriptor_2.PropertyDescriptor));
            exports_5("Header", Header);
        }
    };
});
System.register("meta/Element", ["meta/PropertyDescriptor"], function (exports_6, context_6) {
    "use strict";
    var PropertyDescriptor_3, Element;
    var __moduleName = context_6 && context_6.id;
    return {
        setters: [
            function (PropertyDescriptor_3_1) {
                PropertyDescriptor_3 = PropertyDescriptor_3_1;
            }
        ],
        execute: function () {
            /**
             * An OFX element, applied to a javabean property.
             *
             * @author Ryan Heaton
             */
            Element = /** @class */ (function (_super) {
                __extends(Element, _super);
                function Element(params) {
                    var _this = _super.call(this, params) || this;
                    _this._name = params.name;
                    _this._required = PropertyDescriptor_3._default(params.required, false);
                    _this._order = params.order;
                    _this._collectionEntryType = PropertyDescriptor_3._default(params.collectionEntryType, null);
                    return _this;
                }
                /**
                 * The name of the element.
                 *
                 * @return The name of the element.
                 */
                Element.prototype.name = function () {
                    return this._name;
                };
                /**
                 * Whether this element is required.
                 *
                 * @return Whether this element is required.
                 */
                Element.prototype.required = function () {
                    return this._required;
                };
                /**
                 * The order this element comes in its parent aggregate.
                 *
                 * @return The order this element comes in its parent aggregate.
                 */
                Element.prototype.order = function () {
                    return this._order;
                };
                /**
                 * If the type is a collection, return the type of the elements of the collection (otherwise null)
                 */
                Element.prototype.collectionEntryType = function () {
                    return this._collectionEntryType;
                };
                return Element;
            }(PropertyDescriptor_3.PropertyDescriptor));
            exports_6("Element", Element);
        }
    };
});
System.register("log/Log", [], function (exports_7, context_7) {
    "use strict";
    var Log, LogFactory;
    var __moduleName = context_7 && context_7.id;
    return {
        setters: [],
        execute: function () {
            Log = /** @class */ (function () {
                function Log() {
                    this.infoEnabled = false;
                    this.debugEnabled = false;
                }
                Log.prototype.setInfoEnabled = function (value) {
                    this.infoEnabled = value;
                };
                Log.prototype.isInfoEnabled = function () {
                    return this.infoEnabled;
                };
                Log.prototype.info = function () {
                    var texts = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        texts[_i] = arguments[_i];
                    }
                    if (this.isInfoEnabled()) {
                        console.log(texts);
                    }
                };
                Log.prototype.setDebugEnabled = function (value) {
                    this.debugEnabled = value;
                };
                Log.prototype.isDebugEnabled = function () {
                    return this.debugEnabled;
                };
                Log.prototype.debug = function () {
                    var texts = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        texts[_i] = arguments[_i];
                    }
                    if (this.isDebugEnabled()) {
                        console.log(texts);
                    }
                };
                Log.prototype.warning = function () {
                    var texts = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        texts[_i] = arguments[_i];
                    }
                    console.log(texts);
                };
                Log.prototype.error = function () {
                    var texts = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        texts[_i] = arguments[_i];
                    }
                    console.log(texts);
                };
                return Log;
            }());
            exports_7("Log", Log);
            LogFactory = /** @class */ (function () {
                function LogFactory() {
                }
                LogFactory.getLog = function (clazz) {
                    if (!clazz.Log) {
                        clazz.Log = new Log();
                    }
                    return clazz.Log;
                };
                return LogFactory;
            }());
            exports_7("LogFactory", LogFactory);
        }
    };
});
System.register("collections/SortedSet", [], function (exports_8, context_8) {
    "use strict";
    var SortedSet;
    var __moduleName = context_8 && context_8.id;
    return {
        setters: [],
        execute: function () {
            SortedSet = /** @class */ (function () {
                function SortedSet(compareFcn) {
                    this.valueArray = [];
                    this.compareFcn = compareFcn;
                }
                SortedSet.prototype.values = function () {
                    if (!this.isSorted) {
                        console.assert(!!this.compareFcn);
                        this.valueArray.sort(this.compareFcn);
                        this.isSorted = true;
                    }
                    return this.valueArray;
                };
                SortedSet.prototype.insert = function (element) {
                    var index = this.valueArray.indexOf(element);
                    if (index == -1) {
                        this.isSorted = false;
                        this.valueArray.push(element);
                    }
                };
                SortedSet.prototype.push = function (element) {
                    this.insert(element);
                };
                SortedSet.prototype.remove = function (element) {
                    var index = this.valueArray.indexOf(element);
                    if (index == -1) {
                        return false;
                    }
                    this.valueArray = this.valueArray.splice(index, 1);
                };
                SortedSet.prototype.count = function () {
                    return this.valueArray.length;
                };
                return SortedSet;
            }());
            exports_8("SortedSet", SortedSet);
        }
    };
});
System.register("io/AggregateAttribute", ["meta/ChildAggregate", "meta/Element", "collections/SortedSet", "OFXException", "io/AggregateIntrospector"], function (exports_9, context_9) {
    "use strict";
    var ChildAggregate_1, Element_1, SortedSet_1, OFXException_2, AggregateIntrospector_1, AggregateAttributeType, AggregateAttribute;
    var __moduleName = context_9 && context_9.id;
    return {
        setters: [
            function (ChildAggregate_1_1) {
                ChildAggregate_1 = ChildAggregate_1_1;
            },
            function (Element_1_1) {
                Element_1 = Element_1_1;
            },
            function (SortedSet_1_1) {
                SortedSet_1 = SortedSet_1_1;
            },
            function (OFXException_2_1) {
                OFXException_2 = OFXException_2_1;
            },
            function (AggregateIntrospector_1_1) {
                AggregateIntrospector_1 = AggregateIntrospector_1_1;
            }
        ],
        execute: function () {
            //import Log = org.apache.commons.logging.Log;
            //import LogFactory = org.apache.commons.logging.LogFactory;
            (function (AggregateAttributeType) {
                AggregateAttributeType[AggregateAttributeType["CHILD_AGGREGATE"] = 0] = "CHILD_AGGREGATE";
                AggregateAttributeType[AggregateAttributeType["ELEMENT"] = 1] = "ELEMENT";
            })(AggregateAttributeType || (AggregateAttributeType = {}));
            exports_9("AggregateAttributeType", AggregateAttributeType);
            /**
             * A generic descriptor for an attribute of an OFX aggregate.
             *
             * @author Ryan Heaton
             */
            AggregateAttribute = /** @class */ (function () {
                function AggregateAttribute(arg) {
                    if (arg instanceof Element_1.Element) {
                        this.AggregateAttributeFromElement(arg);
                    }
                    else if (arg instanceof ChildAggregate_1.ChildAggregate) {
                        this.AggregateAttributeFromChildAggregate(arg);
                    }
                    else {
                        throw new OFXException_2.OFXException("invalid type");
                    }
                }
                AggregateAttribute.prototype.AggregateAttributeFromElement = function (elementInfo) {
                    this.readMethod = elementInfo.getReadMethod();
                    this.writeMethod = elementInfo.getWriteMethod();
                    if (this.readMethod == null) {
                        throw new OFXException_2.OFXException("Illegal property for aggregate: no read method.");
                    }
                    else if (this.writeMethod == null) {
                        throw new OFXException_2.OFXException("Illegal property for aggregate: no write method.");
                    }
                    this.attributeType = elementInfo.getPropertyType();
                    this.collectionEntryType = null;
                    this.name = elementInfo.name();
                    this.order = elementInfo.order();
                    this.required = elementInfo.required();
                    this.type = AggregateAttributeType.ELEMENT;
                    this.toString_ = "Element '" + this.name + "'";
                    this.collection = false;
                    //todo: validate known/supported element types here?
                };
                AggregateAttribute.prototype.AggregateAttributeFromChildAggregate = function (childAggregate) {
                    this.readMethod = childAggregate.getReadMethod();
                    this.writeMethod = childAggregate.getWriteMethod();
                    if (this.readMethod == null) {
                        throw new OFXException_2.OFXException("Illegal property for aggregate: no read method.");
                    }
                    else if (this.writeMethod == null) {
                        throw new OFXException_2.OFXException("Illegal property for aggregate: no write method.");
                    }
                    this.attributeType = childAggregate.getPropertyType();
                    this.collection = false;
                    if (childAggregate.collectionEntryType()) {
                        this.collection = true;
                        this.name = null;
                        this.collectionEntryType = childAggregate.collectionEntryType();
                    }
                    else if ("##not_specified##" === childAggregate.name()) {
                        var aggregateInfo = AggregateIntrospector_1.AggregateIntrospector.getAggregateInfo(this.attributeType);
                        if (aggregateInfo == null) {
                            throw new OFXException_2.OFXException("Illegal child aggregate type '" + childAggregate.getPropertyType() + "': no aggregate information available.");
                        }
                        this.name = aggregateInfo.getName();
                        if ("##not_specified##" === this.name) {
                            throw new OFXException_2.OFXException("Illegal child aggregate type '" + childAggregate.getPropertyType() + "': a child aggregate name must be specified.");
                        }
                        this.collectionEntryType = null;
                    }
                    else {
                        this.name = childAggregate.name();
                        this.collectionEntryType = null;
                    }
                    this.order = childAggregate.order();
                    this.required = childAggregate.required();
                    this.type = AggregateAttributeType.CHILD_AGGREGATE;
                    this.toString_ = "ChildAggregate '" + this.name + "'";
                };
                AggregateAttribute.prototype.get = function (instance) {
                    var val = this.readMethod.call(instance);
                    if (this.attributeType && val in this.attributeType) {
                        val = this.attributeType[val];
                    }
                    return val;
                };
                AggregateAttribute.prototype.set = function (value, instance) {
                    if (this.collection) {
                        var collection = this.get(instance);
                        if (collection == null) {
                            if (this.attributeType === SortedSet_1.SortedSet) {
                                console.assert("contentCompare" in this.collectionEntryType);
                                collection = new SortedSet_1.SortedSet(this.collectionEntryType.contentCompare);
                            }
                            else {
                                collection = new this.attributeType();
                            }
                        }
                        collection.push(value);
                        value = collection;
                    }
                    this.writeMethod.call(instance, value);
                };
                AggregateAttribute.prototype.getAttributeType = function () {
                    return this.attributeType;
                };
                AggregateAttribute.prototype.getArrayEntryType = function () {
                    return this.collectionEntryType;
                };
                AggregateAttribute.prototype.getName = function () {
                    return this.name;
                };
                AggregateAttribute.prototype.isRequired = function () {
                    return this.required;
                };
                AggregateAttribute.prototype.getOrder = function () {
                    return this.order;
                };
                AggregateAttribute.prototype.getType = function () {
                    return this.type;
                };
                AggregateAttribute.contentCompare = function (left, right) {
                    return left.order - right.order;
                };
                //  public int compareTo(other: AggregateAttribute) {
                //    return this.order - other.order;
                //  }
                AggregateAttribute.prototype.isArray = function () {
                    return this.collection;
                };
                //@Override
                AggregateAttribute.prototype.toString = function () {
                    return this.toString_;
                };
                return AggregateAttribute;
            }());
            exports_9("AggregateAttribute", AggregateAttribute);
        }
    };
});
System.register("io/AggregateInfo", ["collections/SortedSet", "meta/PropertyDescriptor", "io/AggregateAttribute"], function (exports_10, context_10) {
    "use strict";
    var SortedSet_2, PropertyDescriptor_4, AggregateAttribute_1, AggregateInfo;
    var __moduleName = context_10 && context_10.id;
    return {
        setters: [
            function (SortedSet_2_1) {
                SortedSet_2 = SortedSet_2_1;
            },
            function (PropertyDescriptor_4_1) {
                PropertyDescriptor_4 = PropertyDescriptor_4_1;
            },
            function (AggregateAttribute_1_1) {
                AggregateAttribute_1 = AggregateAttribute_1_1;
            }
        ],
        execute: function () {
            /**
             * Holder for meta information about an aggregate class.
             *
             * @author Ryan Heaton
             */
            AggregateInfo = /** @class */ (function () {
                function AggregateInfo(name, owner, parentInfo) {
                    this.name = name;
                    this.owner = owner;
                    this.headers = {};
                    this.attributes = new SortedSet_2.SortedSet(AggregateAttribute_1.AggregateAttribute.contentCompare);
                    if (parentInfo) {
                        for (var header in parentInfo.headers) {
                            this.headers[header] = parentInfo.headers[header];
                        }
                        var parentAttributes = parentInfo.attributes.values();
                        for (var i in parentAttributes) {
                            var attribute = parentAttributes[i];
                            this.attributes.insert(attribute);
                        }
                    }
                }
                /**
                 * The name of the aggregate.
                 *
                 * @return The name of the aggregate.
                 */
                AggregateInfo.prototype.getName = function () {
                    return this.name;
                };
                AggregateInfo.prototype.setName = function (name) {
                    this.name = name;
                };
                AggregateInfo.prototype.getOwner = function () {
                    return this.owner;
                };
                /**
                 * The attributes.
                 *
                 * @return The attributes.
                 */
                AggregateInfo.prototype.getAttributes = function () {
                    return this.attributes;
                };
                /**
                 * Get the attribute by the specified name.
                 *
                 * @param name The name of the attribute.
                 * @param orderHint The order at which the attribute should come after in case there are more than one candidates.
                 * @param assignableTo The class this attribute must be assignable to
                 * @return The attribute by the specified name,
                 * or if there are more than one by that name,
                 * the first one after the specified order,
                 * or if there are none then the first collection that
                 * comes after the order hint, or the latest if there
                 * are none that come after the order hint, or null.
                 */
                AggregateInfo.prototype.getAttribute = function (name, orderHint, assignableTo) {
                    if (assignableTo === void 0) { assignableTo = null; }
                    var candidates = new Array();
                    var collectionBucket = null;
                    for (var i in this.attributes.values()) {
                        var attribute = this.attributes.values()[i];
                        if (name === attribute.getName()) {
                            candidates.push(attribute);
                        }
                        else if (attribute.isArray()) {
                            if (assignableTo != null) {
                                // Verify it's the right generic type.
                                var entryType = attribute.getArrayEntryType();
                                if (entryType != null && !PropertyDescriptor_4.isAssignableFrom(entryType, assignableTo)) {
                                    // Array is of wrong type.
                                    continue;
                                }
                            }
                            if (collectionBucket == null || collectionBucket.getOrder() < orderHint) {
                                //the default is the first collection that comes after the order hint, or the latest if there are none that come after the order hint.
                                collectionBucket = attribute;
                            }
                        }
                    }
                    if (candidates.length != 0) {
                        if (candidates.length == 1) {
                            return candidates[0];
                        }
                        else {
                            for (var _i = 0, candidates_1 = candidates; _i < candidates_1.length; _i++) {
                                var candidate = candidates_1[_i];
                                if (candidate.getOrder() >= orderHint) {
                                    return candidate;
                                }
                            }
                        }
                    }
                    return collectionBucket;
                };
                /**
                 * Whether this aggregate has headers.
                 *
                 * @return Whether this aggregate has headers.
                 */
                AggregateInfo.prototype.hasHeaders = function () {
                    return Object.keys(this.headers).length != 0;
                };
                /**
                 * Get the headers defined by the specific aggregate instance.
                 *
                 * @param instance The aggregate instance.
                 * @return The headers.
                 */
                AggregateInfo.prototype.getHeaders = function (instance) {
                    var headers = {};
                    for (var headerKey in this.headers) {
                        var header = this.headers[headerKey];
                        var headerValue = header.getReadMethod().call(instance);
                        headers[header.name()] = headerValue;
                    }
                    return headers;
                };
                /**
                 * The type of the specified header.
                 *
                 * @param name The header name.
                 * @return The header type, or null if no header by the specified name exists.
                 */
                AggregateInfo.prototype.getHeaderType = function (name) {
                    return (name in this.headers) ? this.headers[name].getPropertyType() : null;
                };
                /**
                 * Set the header value for the specified instance.
                 *
                 * @param instance The instance.
                 * @param name     The name of the header.
                 * @param value    the value of the header.
                 */
                AggregateInfo.prototype.setHeader = function (instance, name, value) {
                    if (name in this.headers) {
                        this.headers[name].getWriteMethod().call(instance, value);
                    }
                };
                AggregateInfo.prototype.addChildAggregate = function (childAggregate) {
                    var attribute = new AggregateAttribute_1.AggregateAttribute(childAggregate);
                    this.attributes.insert(attribute);
                };
                AggregateInfo.prototype.addElement = function (element) {
                    var attribute = new AggregateAttribute_1.AggregateAttribute(element);
                    this.attributes.insert(attribute);
                };
                AggregateInfo.prototype.addHeader = function (header) {
                    console.assert(header.name());
                    this.headers[header.name()] = header;
                };
                return AggregateInfo;
            }());
            exports_10("AggregateInfo", AggregateInfo);
        }
    };
});
System.register("collections/collections", [], function (exports_11, context_11) {
    "use strict";
    var __moduleName = context_11 && context_11.id;
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/AggregateIntrospector", ["log/Log", "io/AggregateInfo"], function (exports_12, context_12) {
    "use strict";
    var Log_1, AggregateInfo_1, LOG, AggregateIntrospector;
    var __moduleName = context_12 && context_12.id;
    return {
        setters: [
            function (Log_1_1) {
                Log_1 = Log_1_1;
            },
            function (AggregateInfo_1_1) {
                AggregateInfo_1 = AggregateInfo_1_1;
            }
        ],
        execute: function () {
            AggregateIntrospector = /** @class */ (function () {
                /**
                 * Introspector for aggregate information.
                 *
                 * @author Ryan Heaton
                 */
                function AggregateIntrospector() {
                }
                /**
                 * Get the aggregate meta information for the specified class.
                 *
                 * @param clazz the aggregate class.
                 * @return The aggregate meta information, or null if the class isn't an aggregate.
                 */
                AggregateIntrospector.getAggregateInfo = function (clazz) {
                    var aggregate = clazz.Aggregate;
                    if (aggregate != null && aggregate.getOwner() === clazz) {
                        return aggregate;
                    }
                    else {
                        return null;
                    }
                };
                AggregateIntrospector.getAncestorAggregateInfo = function (clazz) {
                    // traverse inheritence hierarchy.  This is janky because of typescript's __extends function, and may break in the future
                    for (var proto = clazz.prototype; proto; proto = Object.getPrototypeOf(proto)) {
                        if (proto.constructor && proto.constructor.Aggregate) {
                            return proto.constructor.Aggregate;
                        }
                    }
                    return null;
                };
                /**
                 * Find the aggregate class by name.
                 *
                 * @param aggregateName The name of the aggregate.
                 * @return The aggregate class.
                 */
                AggregateIntrospector.findAggregateByName = function (aggregateName) {
                    return AggregateIntrospector.AGGREGATE_CLASSES_BY_NAME[aggregateName];
                };
                AggregateIntrospector.addAggregate = function (clazz, name) {
                    AggregateIntrospector.AGGREGATE_CLASSES_BY_NAME[name] = clazz;
                    var aggregateInfo = AggregateIntrospector.getAggregateInfo(clazz);
                    if (aggregateInfo) {
                        console.assert(aggregateInfo.getName() === AggregateIntrospector.placeholderName);
                        aggregateInfo.setName(name);
                    }
                    else {
                        var parentInfo = AggregateIntrospector.getAncestorAggregateInfo(clazz);
                        clazz.Aggregate = new AggregateInfo_1.AggregateInfo(name, clazz, parentInfo);
                    }
                };
                AggregateIntrospector.addChildAggregate = function (clazz, childAggregate) {
                    var aggregateInfo = AggregateIntrospector.getAggregateInfo(clazz);
                    if (!aggregateInfo) {
                        var parentInfo = AggregateIntrospector.getAncestorAggregateInfo(clazz);
                        aggregateInfo = clazz.Aggregate = new AggregateInfo_1.AggregateInfo(AggregateIntrospector.placeholderName, clazz, parentInfo);
                    }
                    console.assert(aggregateInfo != null);
                    if (aggregateInfo) {
                        aggregateInfo.addChildAggregate(childAggregate);
                    }
                };
                AggregateIntrospector.addElement = function (clazz, element) {
                    var aggregateInfo = AggregateIntrospector.getAggregateInfo(clazz);
                    if (!aggregateInfo) {
                        var parentInfo = AggregateIntrospector.getAncestorAggregateInfo(clazz);
                        aggregateInfo = clazz.Aggregate = new AggregateInfo_1.AggregateInfo(AggregateIntrospector.placeholderName, clazz, parentInfo);
                    }
                    console.assert(aggregateInfo != null);
                    if (aggregateInfo) {
                        aggregateInfo.addElement(element);
                    }
                };
                AggregateIntrospector.addHeader = function (clazz, header) {
                    var aggregateInfo = AggregateIntrospector.getAggregateInfo(clazz);
                    if (!aggregateInfo) {
                        var parentInfo = AggregateIntrospector.getAncestorAggregateInfo(clazz);
                        aggregateInfo = clazz.Aggregate = new AggregateInfo_1.AggregateInfo(AggregateIntrospector.placeholderName, clazz, parentInfo);
                    }
                    console.assert(aggregateInfo != null);
                    if (aggregateInfo) {
                        aggregateInfo.addHeader(header);
                    }
                };
                AggregateIntrospector.AGGREGATE_CLASSES_BY_NAME = {};
                AggregateIntrospector.placeholderName = "##PLACEHOLDER##";
                return AggregateIntrospector;
            }());
            exports_12("AggregateIntrospector", AggregateIntrospector);
            LOG = Log_1.LogFactory.getLog(AggregateIntrospector);
        }
    };
});
System.register("meta/Aggregate_add", ["io/AggregateIntrospector"], function (exports_13, context_13) {
    "use strict";
    var AggregateIntrospector_2;
    var __moduleName = context_13 && context_13.id;
    function Aggregate_add(clazz, value) {
        if (value === void 0) { value = "#NOT_SET#"; }
        AggregateIntrospector_2.AggregateIntrospector.addAggregate(clazz, value);
    }
    exports_13("Aggregate_add", Aggregate_add);
    return {
        setters: [
            function (AggregateIntrospector_2_1) {
                AggregateIntrospector_2 = AggregateIntrospector_2_1;
            }
        ],
        execute: function () {
        }
    };
});
System.register("meta/Element_add", ["meta/Element", "io/AggregateIntrospector"], function (exports_14, context_14) {
    "use strict";
    var Element_2, AggregateIntrospector_3;
    var __moduleName = context_14 && context_14.id;
    function Element_add(clazz, params) {
        console.assert(params.type != null);
        AggregateIntrospector_3.AggregateIntrospector.addElement(clazz, new Element_2.Element(params));
    }
    exports_14("Element_add", Element_add);
    return {
        setters: [
            function (Element_2_1) {
                Element_2 = Element_2_1;
            },
            function (AggregateIntrospector_3_1) {
                AggregateIntrospector_3 = AggregateIntrospector_3_1;
            }
        ],
        execute: function () {
        }
    };
});
/*
* Copyright 2008 Web Cohesion
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
System.register("domain/data/common/StatusCode", ["OFXException"], function (exports_15, context_15) {
    "use strict";
    var OFXException_3, Severity, StatusCode;
    var __moduleName = context_15 && context_15.id;
    return {
        setters: [
            function (OFXException_3_1) {
                OFXException_3 = OFXException_3_1;
            }
        ],
        execute: function () {
            /*
            * Copyright 2008 Web Cohesion
            *
            * Licensed under the Apache License, Version 2.0 (the "License");
            * you may not use this file except in compliance with the License.
            * You may obtain a copy of the License at
            *
            *   http://www.apache.org/licenses/LICENSE-2.0
            *
            * Unless required by applicable law or agreed to in writing, software
            * distributed under the License is distributed on an "AS IS" BASIS,
            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
            * See the License for the specific language governing permissions and
            * limitations under the License.
            */
            /**
             * Severity of the status.
             */
            (function (Severity) {
                Severity[Severity["INFO"] = 0] = "INFO";
                Severity[Severity["WARN"] = 1] = "WARN";
                Severity[Severity["ERROR"] = 2] = "ERROR";
            })(Severity || (Severity = {}));
            exports_15("Severity", Severity);
            /**
             * @author Ryan Heaton
             */
            StatusCode = /** @class */ (function () {
                function StatusCode() {
                }
                StatusCode.prototype.getCode = function () { throw new OFXException_3.OFXException("abstract"); };
                StatusCode.prototype.getMessage = function () { throw new OFXException_3.OFXException("abstract"); };
                StatusCode.prototype.getDefaultSeverity = function () { throw new OFXException_3.OFXException("abstract"); };
                return StatusCode;
            }());
            exports_15("StatusCode", StatusCode);
        }
    };
});
System.register("domain/data/common/Status", ["meta/Aggregate_add", "meta/Element_add", "domain/data/common/StatusCode"], function (exports_16, context_16) {
    "use strict";
    var Aggregate_add_1, Element_add_1, StatusCode_1, KnownCode, Status;
    var __moduleName = context_16 && context_16.id;
    return {
        setters: [
            function (Aggregate_add_1_1) {
                Aggregate_add_1 = Aggregate_add_1_1;
            },
            function (Element_add_1_1) {
                Element_add_1 = Element_add_1_1;
            },
            function (StatusCode_1_1) {
                StatusCode_1 = StatusCode_1_1;
            }
        ],
        execute: function () {
            KnownCode = /** @class */ (function (_super) {
                __extends(KnownCode, _super);
                function KnownCode(code, message, defaultSeverity) {
                    var _this = _super.call(this) || this;
                    _this.code = code;
                    _this.message = message;
                    _this.defaultSeverity = defaultSeverity;
                    return _this;
                }
                KnownCode.prototype.getCode = function () {
                    return this.code;
                };
                KnownCode.prototype.getMessage = function () {
                    return this.message;
                };
                KnownCode.prototype.getDefaultSeverity = function () {
                    return this.defaultSeverity;
                };
                KnownCode.fromCode = function (code) {
                    for (var i in KnownCode.KnownCodes) {
                        var value = KnownCode.KnownCodes[i];
                        if (value.getCode() == code) {
                            return value;
                        }
                    }
                    return null;
                };
                //@Override
                KnownCode.prototype.toString = function () {
                    return this.code.toString();
                };
                KnownCode.SUCCESS = new KnownCode(0, "Success", StatusCode_1.Severity.INFO);
                KnownCode.CLIENT_UP_TO_DATE = new KnownCode(1, "Client is up-to-date", StatusCode_1.Severity.INFO);
                KnownCode.GENERAL_ERROR = new KnownCode(2000, "General error.", StatusCode_1.Severity.ERROR);
                KnownCode.GENERAL_ACCOUNT_ERROR = new KnownCode(2002, "General account error.", StatusCode_1.Severity.ERROR);
                KnownCode.ACCOUNT_NOT_FOUND = new KnownCode(2003, "Account not found.", StatusCode_1.Severity.ERROR);
                KnownCode.ACCOUNT_CLOSED = new KnownCode(2004, "Account closed.", StatusCode_1.Severity.ERROR);
                KnownCode.ACCOUNT_NOT_AUTHORIZED = new KnownCode(2005, "Account not authorized.", StatusCode_1.Severity.ERROR);
                KnownCode.DATE_TOO_SOON = new KnownCode(2014, "Date too soon", StatusCode_1.Severity.ERROR);
                KnownCode.DUPLICATE_REQUEST = new KnownCode(2019, "Duplicate request.", StatusCode_1.Severity.ERROR);
                KnownCode.UNSUPPORTED_VERSION = new KnownCode(2021, "Unsupported version", StatusCode_1.Severity.ERROR);
                KnownCode.INVALID_TAN = new KnownCode(2022, "Invalid transaction authorization number.", StatusCode_1.Severity.ERROR);
                KnownCode.MFA_CHALLENGE_REQUIRED = new KnownCode(3000, "Further authentication required.", StatusCode_1.Severity.ERROR);
                KnownCode.MFA_CHALLENGE_FAILED = new KnownCode(3001, "MFA failed.", StatusCode_1.Severity.ERROR);
                KnownCode.PASSWORD_CHANGE_REQUIRED = new KnownCode(15000, "Password change required.", StatusCode_1.Severity.INFO);
                KnownCode.SIGNON_INVALID = new KnownCode(15500, "Invalid signon", StatusCode_1.Severity.ERROR);
                KnownCode.CUSTOMER_ACCOUNT_IN_USE = new KnownCode(15501, "Customer account in use.", StatusCode_1.Severity.ERROR);
                KnownCode.PASSWORD_LOCKED = new KnownCode(15502, "Password locked.", StatusCode_1.Severity.ERROR);
                KnownCode.INVALID_CLIENT_UID = new KnownCode(15510, "Invalid client UID.", StatusCode_1.Severity.ERROR);
                KnownCode.CONTACT_FI = new KnownCode(15511, "User must contact FI.", StatusCode_1.Severity.ERROR);
                KnownCode.AUTHTOKEN_REQUIRED = new KnownCode(15512, "Auth token required.", StatusCode_1.Severity.ERROR);
                KnownCode.INVALID_AUTHTOKEN = new KnownCode(15513, "Invalid auth token.", StatusCode_1.Severity.ERROR);
                KnownCode.NO_DATA = new KnownCode(14701, "No Tax Data for Account.", StatusCode_1.Severity.ERROR);
                KnownCode.DB_EXCEPTION = new KnownCode(14702, "Database error has occured.", StatusCode_1.Severity.ERROR);
                KnownCode.NO_TAXSUPPORT = new KnownCode(14703, "This Tax Year is not supported.", StatusCode_1.Severity.ERROR);
                KnownCode.KnownCodes = [
                    KnownCode.SUCCESS,
                    KnownCode.CLIENT_UP_TO_DATE,
                    KnownCode.GENERAL_ERROR,
                    KnownCode.GENERAL_ACCOUNT_ERROR,
                    KnownCode.ACCOUNT_NOT_FOUND,
                    KnownCode.ACCOUNT_CLOSED,
                    KnownCode.ACCOUNT_NOT_AUTHORIZED,
                    KnownCode.DATE_TOO_SOON,
                    KnownCode.DUPLICATE_REQUEST,
                    KnownCode.UNSUPPORTED_VERSION,
                    KnownCode.INVALID_TAN,
                    KnownCode.MFA_CHALLENGE_REQUIRED,
                    KnownCode.MFA_CHALLENGE_FAILED,
                    KnownCode.PASSWORD_CHANGE_REQUIRED,
                    KnownCode.SIGNON_INVALID,
                    KnownCode.CUSTOMER_ACCOUNT_IN_USE,
                    KnownCode.PASSWORD_LOCKED,
                    KnownCode.INVALID_CLIENT_UID,
                    KnownCode.CONTACT_FI,
                    KnownCode.AUTHTOKEN_REQUIRED,
                    KnownCode.INVALID_AUTHTOKEN,
                    KnownCode.NO_DATA,
                    KnownCode.DB_EXCEPTION,
                    KnownCode.NO_TAXSUPPORT,
                ];
                return KnownCode;
            }(StatusCode_1.StatusCode));
            exports_16("KnownCode", KnownCode);
            /**
             * Transaction status element.
             *
             * @author Ryan Heaton
             * @see "Section 3.1.4, OFX Spec"
             */
            Status = /** @class */ (function () {
                function Status() {
                    this.code = KnownCode.SUCCESS;
                    this.severity = undefined;
                }
                /**
                 * Status code.
                 *
                 * @return The status code.
                 */
                Status.prototype.getCode = function () {
                    return this.code;
                };
                /**
                 * Status code.
                 *
                 * @param code Status code.
                 */
                Status.prototype.setCode = function (code) {
                    this.code = code;
                    if (typeof this.severity === 'undefined') {
                        this.severity = code.getDefaultSeverity();
                    }
                };
                /**
                 * The severity.
                 *
                 * @return The severity.
                 */
                Status.prototype.getSeverity = function () {
                    return this.severity;
                };
                /**
                 * The severity.
                 *
                 * @param severity The severity.
                 */
                Status.prototype.setSeverity = function (severity) {
                    this.severity = severity;
                };
                /**
                 * Server-supplied message.
                 *
                 * @return Server-supplied message.
                 */
                Status.prototype.getMessage = function () {
                    return this.message;
                };
                /**
                 * Server-supplied message.
                 *
                 * @param message Server-supplied message.
                 */
                Status.prototype.setMessage = function (message) {
                    this.message = message;
                };
                return Status;
            }());
            exports_16("Status", Status);
            Aggregate_add_1.Aggregate_add(Status, "STATUS");
            Element_add_1.Element_add(Status, { name: "CODE", required: true, order: 0, type: StatusCode_1.StatusCode, read: Status.prototype.getCode, write: Status.prototype.setCode });
            Element_add_1.Element_add(Status, { name: "SEVERITY", required: true, order: 10, type: StatusCode_1.Severity, read: Status.prototype.getSeverity, write: Status.prototype.setSeverity });
            Element_add_1.Element_add(Status, { name: "MESSAGE", order: 20, type: String, read: Status.prototype.getMessage, write: Status.prototype.setMessage });
        }
    };
});
System.register("OFXStatusException", ["OFXException"], function (exports_17, context_17) {
    "use strict";
    var OFXException_4, OFXStatusException;
    var __moduleName = context_17 && context_17.id;
    return {
        setters: [
            function (OFXException_4_1) {
                OFXException_4 = OFXException_4_1;
            }
        ],
        execute: function () {
            /**
             * Exception based on a StatusCode response
             *
             * @author Michael Mosseri
             */
            OFXStatusException = /** @class */ (function (_super) {
                __extends(OFXStatusException, _super);
                function OFXStatusException(status, message) {
                    var _this = _super.call(this, message) || this;
                    _this.status = status;
                    return _this;
                }
                OFXStatusException.prototype.getStatus = function () {
                    return this.status;
                };
                return OFXStatusException;
            }(OFXException_4.OFXException));
            exports_17("OFXStatusException", OFXStatusException);
        }
    };
});
System.register("OFXTransactionException", ["OFXException"], function (exports_18, context_18) {
    "use strict";
    var OFXException_5, OFXTransactionException;
    var __moduleName = context_18 && context_18.id;
    return {
        setters: [
            function (OFXException_5_1) {
                OFXException_5 = OFXException_5_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            OFXTransactionException = /** @class */ (function (_super) {
                __extends(OFXTransactionException, _super);
                function OFXTransactionException(message) {
                    if (message === void 0) { message = null; }
                    return _super.call(this, message) || this;
                }
                return OFXTransactionException;
            }(OFXException_5.OFXException));
            exports_18("OFXTransactionException", OFXTransactionException);
        }
    };
});
System.register("UnsupportedOFXSecurityTypeException", ["OFXException"], function (exports_19, context_19) {
    "use strict";
    var OFXException_6, UnsupportedOFXSecurityTypeException;
    var __moduleName = context_19 && context_19.id;
    return {
        setters: [
            function (OFXException_6_1) {
                OFXException_6 = OFXException_6_1;
            }
        ],
        execute: function () {
            /**
             * Thrown for unsupported OFX security type.
             *
             * @author Ryan Heaton
             */
            UnsupportedOFXSecurityTypeException = /** @class */ (function (_super) {
                __extends(UnsupportedOFXSecurityTypeException, _super);
                function UnsupportedOFXSecurityTypeException(message) {
                    return _super.call(this, message) || this;
                }
                return UnsupportedOFXSecurityTypeException;
            }(OFXException_6.OFXException));
            exports_19("UnsupportedOFXSecurityTypeException", UnsupportedOFXSecurityTypeException);
        }
    };
});
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("domain/data/investment/transactions/TransactionType", [], function (exports_20, context_20) {
    "use strict";
    var TransactionType;
    var __moduleName = context_20 && context_20.id;
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2010 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
             * Type of investment transaction.
             * @see "Section 13.9.2.4.4, OFX Spec"
             *
             * @author Jon Perlow
             */
            (function (TransactionType) {
                TransactionType[TransactionType["BUY_DEBT"] = 0] = "BUY_DEBT";
                TransactionType[TransactionType["BUY_MUTUAL_FUND"] = 1] = "BUY_MUTUAL_FUND";
                TransactionType[TransactionType["BUY_OPTION"] = 2] = "BUY_OPTION";
                TransactionType[TransactionType["BUY_OTHER"] = 3] = "BUY_OTHER";
                TransactionType[TransactionType["BUY_STOCK"] = 4] = "BUY_STOCK";
                TransactionType[TransactionType["CLOSE_OPTION"] = 5] = "CLOSE_OPTION";
                TransactionType[TransactionType["INCOME"] = 6] = "INCOME";
                TransactionType[TransactionType["INVESTMENT_EXPENSE"] = 7] = "INVESTMENT_EXPENSE";
                TransactionType[TransactionType["JOURNAL_FUND"] = 8] = "JOURNAL_FUND";
                TransactionType[TransactionType["JOURNAL_SECURITY"] = 9] = "JOURNAL_SECURITY";
                TransactionType[TransactionType["MARGIN_INTEREST"] = 10] = "MARGIN_INTEREST";
                TransactionType[TransactionType["REINVEST_INCOME"] = 11] = "REINVEST_INCOME";
                TransactionType[TransactionType["RETURN_OF_CAPITAL"] = 12] = "RETURN_OF_CAPITAL";
                TransactionType[TransactionType["SELL_DEBT"] = 13] = "SELL_DEBT";
                TransactionType[TransactionType["SELL_MUTUAL_FUND"] = 14] = "SELL_MUTUAL_FUND";
                TransactionType[TransactionType["SELL_OPTION"] = 15] = "SELL_OPTION";
                TransactionType[TransactionType["SELL_OTHER"] = 16] = "SELL_OTHER";
                TransactionType[TransactionType["SELL_STOCK"] = 17] = "SELL_STOCK";
                TransactionType[TransactionType["SPLIT"] = 18] = "SPLIT";
                TransactionType[TransactionType["TRANSFER"] = 19] = "TRANSFER";
            })(TransactionType || (TransactionType = {}));
            exports_20("TransactionType", TransactionType);
        }
    };
});
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("domain/data/common/CorrectionAction", [], function (exports_21, context_21) {
    "use strict";
    var CorrectionAction;
    var __moduleName = context_21 && context_21.id;
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2008 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
             * @author Ryan Heaton
             */
            (function (CorrectionAction) {
                CorrectionAction[CorrectionAction["REPLACE"] = 0] = "REPLACE";
                CorrectionAction[CorrectionAction["DELETE"] = 1] = "DELETE";
            })(CorrectionAction || (CorrectionAction = {}));
            exports_21("CorrectionAction", CorrectionAction);
        }
    };
});
System.register("domain/data/common/Payee", ["meta/Aggregate_add", "meta/Element_add"], function (exports_22, context_22) {
    "use strict";
    var Aggregate_Add_1, Element_add_2, Payee;
    var __moduleName = context_22 && context_22.id;
    return {
        setters: [
            function (Aggregate_Add_1_1) {
                Aggregate_Add_1 = Aggregate_Add_1_1;
            },
            function (Element_add_2_1) {
                Element_add_2 = Element_add_2_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            Payee = /** @class */ (function () {
                function Payee() {
                }
                /**
                 * The name of the payee.
                 *
                 * @return The name of the payee.
                 */
                Payee.prototype.getName = function () {
                    return this.name;
                };
                /**
                 * The name of the payee.
                 *
                 * @param name The name of the payee.
                 */
                Payee.prototype.setName = function (name) {
                    this.name = name;
                };
                /**
                 * The address of the payee.
                 *
                 * @return The address of the payee.
                 */
                Payee.prototype.getAddress1 = function () {
                    return this.address1;
                };
                /**
                 * The address of the payee.
                 *
                 * @param address1 The address of the payee.
                 */
                Payee.prototype.setAddress1 = function (address1) {
                    this.address1 = address1;
                };
                /**
                 * The address of the payee.
                 *
                 * @return The address of the payee.
                 */
                Payee.prototype.getAddress2 = function () {
                    return this.address2;
                };
                /**
                 * The address of the payee.
                 *
                 * @param address2 The address of the payee.
                 */
                Payee.prototype.setAddress2 = function (address2) {
                    this.address2 = address2;
                };
                /**
                 * The address of the payee.
                 *
                 * @return The address of the payee.
                 */
                Payee.prototype.getAddress3 = function () {
                    return this.address3;
                };
                /**
                 * The address of the payee.
                 *
                 * @param address3 The address of the payee.
                 */
                Payee.prototype.setAddress3 = function (address3) {
                    this.address3 = address3;
                };
                /**
                 * The city of the payee.
                 *
                 * @return The city of the payee.
                 */
                Payee.prototype.getCity = function () {
                    return this.city;
                };
                /**
                 * The city of the payee.
                 *
                 * @param city The city of the payee.
                 */
                Payee.prototype.setCity = function (city) {
                    this.city = city;
                };
                /**
                 * The state of this payee.
                 *
                 * @return The state of this payee.
                 */
                Payee.prototype.getState = function () {
                    return this.state;
                };
                /**
                 * The state of this payee.
                 *
                 * @param state The state of this payee.
                 */
                Payee.prototype.setState = function (state) {
                    this.state = state;
                };
                /**
                 * The postal code of this payee.
                 *
                 * @return The postal code of this payee.
                 */
                Payee.prototype.getZip = function () {
                    return this.zip;
                };
                /**
                 * The postal code of this payee.
                 *
                 * @param zip The postal code of this payee.
                 */
                Payee.prototype.setZip = function (zip) {
                    this.zip = zip;
                };
                /**
                 * The country code for this payee.
                 *
                 * @return The country code for this payee.
                 * @see java.util.Locale#getISO3Country()
                 */
                Payee.prototype.getCountry = function () {
                    return this.country;
                };
                /**
                 * The country code for this payee.
                 *
                 * @param country The country code for this payee.
                 */
                Payee.prototype.setCountry = function (country) {
                    this.country = country;
                };
                /**
                 * The phone number.
                 *
                 * @return The phone number.
                 */
                Payee.prototype.getPhone = function () {
                    return this.phone;
                };
                /**
                 * The phone number.
                 *
                 * @param phone The phone number.
                 */
                Payee.prototype.setPhone = function (phone) {
                    this.phone = phone;
                };
                return Payee;
            }());
            exports_22("Payee", Payee);
            Aggregate_Add_1.Aggregate_add(Payee, "PAYEE");
            Element_add_2.Element_add(Payee, { name: "NAME", order: 30, type: String, read: Payee.prototype.getName, write: Payee.prototype.setName });
            Element_add_2.Element_add(Payee, { name: "ADDR1", required: true, order: 40, type: String, read: Payee.prototype.getAddress1, write: Payee.prototype.setAddress1 });
            Element_add_2.Element_add(Payee, { name: "ADDR2", order: 50, type: String, read: Payee.prototype.getAddress2, write: Payee.prototype.setAddress2 });
            Element_add_2.Element_add(Payee, { name: "ADDR3", order: 60, type: String, read: Payee.prototype.getAddress3, write: Payee.prototype.setAddress3 });
            Element_add_2.Element_add(Payee, { name: "CITY", required: true, order: 70, type: String, read: Payee.prototype.getCity, write: Payee.prototype.setCity });
            Element_add_2.Element_add(Payee, { name: "STATE", required: true, order: 80, type: String, read: Payee.prototype.getState, write: Payee.prototype.setState });
            Element_add_2.Element_add(Payee, { name: "POSTALCODE", required: true, order: 90, type: String, read: Payee.prototype.getZip, write: Payee.prototype.setZip });
            Element_add_2.Element_add(Payee, { name: "COUNTRY", required: true, order: 100, type: String, read: Payee.prototype.getCountry, write: Payee.prototype.setCountry });
            Element_add_2.Element_add(Payee, { name: "PHONE", order: 110, type: String, read: Payee.prototype.getPhone, write: Payee.prototype.setPhone });
        }
    };
});
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("domain/data/common/AccountDetails", [], function (exports_23, context_23) {
    "use strict";
    var __moduleName = context_23 && context_23.id;
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2008 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
        }
    };
});
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("domain/data/banking/AccountType", [], function (exports_24, context_24) {
    "use strict";
    var AccountType;
    var __moduleName = context_24 && context_24.id;
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2008 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
             * @author Ryan Heaton
             *
             * @see "OFX Spec, Section 11.3.1.1"
             */
            (function (AccountType) {
                AccountType[AccountType["CHECKING"] = 0] = "CHECKING";
                AccountType[AccountType["SAVINGS"] = 1] = "SAVINGS";
                AccountType[AccountType["MONEYMRKT"] = 2] = "MONEYMRKT";
                AccountType[AccountType["CREDITLINE"] = 3] = "CREDITLINE";
            })(AccountType || (AccountType = {}));
            exports_24("AccountType", AccountType);
        }
    };
});
System.register("domain/data/banking/BankAccountDetails", ["domain/data/banking/AccountType", "meta/Aggregate_add", "meta/Element_add"], function (exports_25, context_25) {
    "use strict";
    var AccountType_1, Aggregate_Add_2, Element_add_3, BankAccountDetails;
    var __moduleName = context_25 && context_25.id;
    return {
        setters: [
            function (AccountType_1_1) {
                AccountType_1 = AccountType_1_1;
            },
            function (Aggregate_Add_2_1) {
                Aggregate_Add_2 = Aggregate_Add_2_1;
            },
            function (Element_add_3_1) {
                Element_add_3 = Element_add_3_1;
            }
        ],
        execute: function () {
            /**
             * Base bank account details.
             *
             * @author Ryan Heaton
             * @see "OFX Spec, Section 11.3.1"
             */
            BankAccountDetails = /** @class */ (function () {
                function BankAccountDetails() {
                }
                /**
                 * The routing and transit number.
                 *
                 * @return The routing and transit number.
                 */
                BankAccountDetails.prototype.getBankId = function () {
                    return this.bankId;
                };
                /**
                 * The routing and transit number.
                 *
                 * @param bankId The routing and transit number.
                 */
                BankAccountDetails.prototype.setBankId = function (bankId) {
                    this.bankId = bankId;
                };
                /**
                 * The routing and transit number.
                 *
                 * @return The routing and transit number.
                 */
                BankAccountDetails.prototype.getRoutingNumber = function () {
                    return this.getBankId();
                };
                /**
                 * The routing and transit number.
                 *
                 * @param routingNumber The routing and transit number.
                 */
                BankAccountDetails.prototype.setRoutingNumber = function (routingNumber) {
                    this.setBankId(routingNumber);
                };
                /**
                 * The branch id.
                 *
                 * @return The branch id.
                 */
                BankAccountDetails.prototype.getBranchId = function () {
                    return this.branchId;
                };
                /**
                 * The branch id.
                 *
                 * @param branchId The branch id.
                 */
                BankAccountDetails.prototype.setBranchId = function (branchId) {
                    this.branchId = branchId;
                };
                /**
                 * The account number.
                 *
                 * @return The account number.
                 */
                BankAccountDetails.prototype.getAccountNumber = function () {
                    return this.accountNumber;
                };
                /**
                 * The account number.
                 *
                 * @param accountNumber The account number.
                 */
                BankAccountDetails.prototype.setAccountNumber = function (accountNumber) {
                    this.accountNumber = accountNumber;
                };
                /**
                 * The account type.
                 *
                 * @return The account type.
                 */
                BankAccountDetails.prototype.getAccountType = function () {
                    return this.accountType;
                };
                /**
                 * The account type.
                 *
                 * @param accountType The account type.
                 */
                BankAccountDetails.prototype.setAccountType = function (accountType) {
                    this.accountType = accountType;
                };
                /**
                 * The account key.
                 *
                 * @return The account key.
                 */
                BankAccountDetails.prototype.getAccountKey = function () {
                    return this.accountKey;
                };
                /**
                 * The account key.
                 *
                 * @param accountKey The account key.
                 */
                BankAccountDetails.prototype.setAccountKey = function (accountKey) {
                    this.accountKey = accountKey;
                };
                return BankAccountDetails;
            }());
            exports_25("BankAccountDetails", BankAccountDetails);
            Aggregate_Add_2.Aggregate_add(BankAccountDetails);
            Element_add_3.Element_add(BankAccountDetails, { name: "BANKID", required: true, order: 0, type: String, read: BankAccountDetails.prototype.getBankId, write: BankAccountDetails.prototype.setBankId });
            Element_add_3.Element_add(BankAccountDetails, { name: "BRANCHID", order: 10, type: String, read: BankAccountDetails.prototype.getBranchId, write: BankAccountDetails.prototype.setBranchId });
            Element_add_3.Element_add(BankAccountDetails, { name: "ACCTID", required: true, order: 20, type: String, read: BankAccountDetails.prototype.getAccountNumber, write: BankAccountDetails.prototype.setAccountNumber });
            Element_add_3.Element_add(BankAccountDetails, { name: "ACCTTYPE", required: true, order: 30, type: AccountType_1.AccountType, read: BankAccountDetails.prototype.getAccountType, write: BankAccountDetails.prototype.setAccountType });
            Element_add_3.Element_add(BankAccountDetails, { name: "ACCTKEY", order: 40, type: String, read: BankAccountDetails.prototype.getAccountKey, write: BankAccountDetails.prototype.setAccountKey });
        }
    };
});
System.register("domain/data/creditcard/CreditCardAccountDetails", ["meta/Aggregate_add", "meta/Element_add"], function (exports_26, context_26) {
    "use strict";
    var Aggregate_Add_3, Element_add_4, CreditCardAccountDetails;
    var __moduleName = context_26 && context_26.id;
    return {
        setters: [
            function (Aggregate_Add_3_1) {
                Aggregate_Add_3 = Aggregate_Add_3_1;
            },
            function (Element_add_4_1) {
                Element_add_4 = Element_add_4_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             *
             * @see "OFX Spec, Section 11.3.2"
             */
            CreditCardAccountDetails = /** @class */ (function () {
                function CreditCardAccountDetails() {
                }
                /**
                 * The account number.
                 *
                 * @return The account number.
                 */
                CreditCardAccountDetails.prototype.getAccountNumber = function () {
                    return this.accountNumber;
                };
                /**
                 * The account number.
                 *
                 * @param accountNumber The account number.
                 */
                CreditCardAccountDetails.prototype.setAccountNumber = function (accountNumber) {
                    this.accountNumber = accountNumber;
                };
                /**
                 * The account key.
                 *
                 * @return The account key.
                 */
                CreditCardAccountDetails.prototype.getAccountKey = function () {
                    return this.accountKey;
                };
                /**
                 * The account key.
                 *
                 * @param accountKey The account key.
                 */
                CreditCardAccountDetails.prototype.setAccountKey = function (accountKey) {
                    this.accountKey = accountKey;
                };
                return CreditCardAccountDetails;
            }());
            exports_26("CreditCardAccountDetails", CreditCardAccountDetails);
            Aggregate_Add_3.Aggregate_add(CreditCardAccountDetails);
            Element_add_4.Element_add(CreditCardAccountDetails, { name: "ACCTID", required: true, order: 0, type: String, read: CreditCardAccountDetails.prototype.getAccountNumber, write: CreditCardAccountDetails.prototype.setAccountNumber });
            Element_add_4.Element_add(CreditCardAccountDetails, { name: "ACCTKEY", order: 10, type: String, read: CreditCardAccountDetails.prototype.getAccountKey, write: CreditCardAccountDetails.prototype.setAccountKey });
        }
    };
});
System.register("domain/data/common/Currency", ["meta/Aggregate_add", "meta/Element_add"], function (exports_27, context_27) {
    "use strict";
    var Aggregate_Add_4, Element_add_5, Currency;
    var __moduleName = context_27 && context_27.id;
    return {
        setters: [
            function (Aggregate_Add_4_1) {
                Aggregate_Add_4 = Aggregate_Add_4_1;
            },
            function (Element_add_5_1) {
                Element_add_5 = Element_add_5_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             * @see "Section 5.2, OFX Spec"
             */
            Currency = /** @class */ (function () {
                function Currency() {
                    this.code = "USD"; //java.util.Currency.getInstance(Locale.US).getCurrencyCode().toUpperCase();
                }
                /**
                 * The currency code.
                 *
                 * @return The currency code.
                 * @see java.util.Currency#getCurrencyCode()
                 */
                Currency.prototype.getCode = function () {
                    return this.code;
                };
                /**
                 * The currency code
                 *
                 * @param code The currency code
                 */
                Currency.prototype.setCode = function (code) {
                    this.code = code;
                };
                /**
                 * The exchange rate.
                 *
                 * @return The exchange rate.
                 */
                Currency.prototype.getExchangeRate = function () {
                    return this.exchangeRate;
                };
                /**
                 * The exchange rate.
                 *
                 * @param exchangeRate The exchange rate.
                 */
                Currency.prototype.setExchangeRate = function (exchangeRate) {
                    this.exchangeRate = exchangeRate;
                };
                return Currency;
            }());
            exports_27("Currency", Currency);
            Aggregate_Add_4.Aggregate_add(Currency, "CURRENCY");
            Element_add_5.Element_add(Currency, { name: "CURSYM", required: true, order: 0, type: String, read: Currency.prototype.getCode, write: Currency.prototype.setCode });
            Element_add_5.Element_add(Currency, { name: "CURRATE", required: true, order: 10, type: Number, read: Currency.prototype.getExchangeRate, write: Currency.prototype.setExchangeRate });
        }
    };
});
System.register("meta/ChildAggregate_add", ["io/AggregateIntrospector", "meta/ChildAggregate"], function (exports_28, context_28) {
    "use strict";
    var AggregateIntrospector_4, ChildAggregate_2;
    var __moduleName = context_28 && context_28.id;
    function ChildAggregate_add(clazz, params) {
        console.assert(params.type != null);
        AggregateIntrospector_4.AggregateIntrospector.addChildAggregate(clazz, new ChildAggregate_2.ChildAggregate(params));
    }
    exports_28("ChildAggregate_add", ChildAggregate_add);
    return {
        setters: [
            function (AggregateIntrospector_4_1) {
                AggregateIntrospector_4 = AggregateIntrospector_4_1;
            },
            function (ChildAggregate_2_1) {
                ChildAggregate_2 = ChildAggregate_2_1;
            }
        ],
        execute: function () {
        }
    };
});
System.register("domain/data/common/Transaction", ["domain/data/investment/transactions/TransactionType", "domain/data/common/CorrectionAction", "domain/data/common/Payee", "domain/data/banking/BankAccountDetails", "domain/data/creditcard/CreditCardAccountDetails", "domain/data/common/Currency", "meta/Aggregate_add", "meta/Element_add", "meta/ChildAggregate_add"], function (exports_29, context_29) {
    "use strict";
    var TransactionType_1, CorrectionAction_1, Payee_1, BankAccountDetails_1, CreditCardAccountDetails_1, Currency_1, Aggregate_Add_5, Element_add_6, ChildAggregate_add_1, Transaction;
    var __moduleName = context_29 && context_29.id;
    return {
        setters: [
            function (TransactionType_1_1) {
                TransactionType_1 = TransactionType_1_1;
            },
            function (CorrectionAction_1_1) {
                CorrectionAction_1 = CorrectionAction_1_1;
            },
            function (Payee_1_1) {
                Payee_1 = Payee_1_1;
            },
            function (BankAccountDetails_1_1) {
                BankAccountDetails_1 = BankAccountDetails_1_1;
            },
            function (CreditCardAccountDetails_1_1) {
                CreditCardAccountDetails_1 = CreditCardAccountDetails_1_1;
            },
            function (Currency_1_1) {
                Currency_1 = Currency_1_1;
            },
            function (Aggregate_Add_5_1) {
                Aggregate_Add_5 = Aggregate_Add_5_1;
            },
            function (Element_add_6_1) {
                Element_add_6 = Element_add_6_1;
            },
            function (ChildAggregate_add_1_1) {
                ChildAggregate_add_1 = ChildAggregate_add_1_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            Transaction = /** @class */ (function () {
                function Transaction() {
                }
                /**
                 * The transaction type.
                 *
                 * @return The transaction type.
                 */
                Transaction.prototype.getTransactionType = function () {
                    return this.transactionType;
                };
                /**
                 * The transaction type.
                 *
                 * @param transactionType The transaction type.
                 */
                Transaction.prototype.setTransactionType = function (transactionType) {
                    this.transactionType = transactionType;
                };
                /**
                 * The date the transaction was posted.
                 *
                 * @return The date the transaction was posted.
                 */
                Transaction.prototype.getDatePosted = function () {
                    return this.datePosted;
                };
                /**
                 * The date the transaction was posted.
                 *
                 * @param datePosted The date the transaction was posted.
                 */
                Transaction.prototype.setDatePosted = function (datePosted) {
                    this.datePosted = datePosted;
                };
                /**
                 * The date the transaction was initiated.
                 *
                 * @return The date the transaction was initiated.
                 */
                Transaction.prototype.getDateInitiated = function () {
                    return this.dateInitiated;
                };
                /**
                 * The date the transaction was initiated.
                 *
                 * @param dateInitiated The date the transaction was initiated.
                 */
                Transaction.prototype.setDateInitiated = function (dateInitiated) {
                    this.dateInitiated = dateInitiated;
                };
                /**
                 * The date the funds are available.
                 *
                 * @return The date the funds are available.
                 */
                Transaction.prototype.getDateAvailable = function () {
                    return this.dateAvailable;
                };
                /**
                 * The date the funds are available.
                 *
                 * @param dateAvailable The date the funds are available.
                 */
                Transaction.prototype.setDateAvailable = function (dateAvailable) {
                    this.dateAvailable = dateAvailable;
                };
                /**
                 * The transaction amount.
                 *
                 * @return The transaction amount.
                 */
                Transaction.prototype.getAmount = function () {
                    return this.amount;
                };
                /**
                 * The transaction amount.
                 *
                 * @param amount The transaction amount.
                 */
                Transaction.prototype.setAmount = function (amount) {
                    this.amount = amount;
                };
                /**
                 * The transaction amount.
                 *
                 * @return The transaction amount.
                 */
                Transaction.prototype.getBigDecimalAmount = function () {
                    return this.amount;
                };
                /**
                 * The transaction amount.
                 *
                 * @param amount The transaction amount.
                 */
                Transaction.prototype.setBigDecimalAmount = function (amount) {
                    this.amount = amount;
                };
                /**
                 * The transaction id (server-assigned).
                 *
                 * @return The transaction id (server-assigned).
                 */
                Transaction.prototype.getId = function () {
                    return this.id;
                };
                /**
                 * The transaction id (server-assigned).
                 *
                 * @param id The transaction id (server-assigned).
                 */
                Transaction.prototype.setId = function (id) {
                    this.id = id;
                };
                /**
                 * The id of the transaction that this is correcting.
                 *
                 * @return The id of the transaction that this is correcting.
                 */
                Transaction.prototype.getCorrectionId = function () {
                    return this.correctionId;
                };
                /**
                 * The id of the transaction that this is correcting.
                 *
                 * @param correctionId The id of the transaction that this is correcting.
                 */
                Transaction.prototype.setCorrectionId = function (correctionId) {
                    this.correctionId = correctionId;
                };
                /**
                 * The action to take on the {@link #getCorrectionId() corrected transaction}.
                 *
                 * @return The action to take on the {@link #getCorrectionId() corrected transaction}.
                 */
                Transaction.prototype.getCorrectionAction = function () {
                    return this.correctionAction;
                };
                /**
                 * The action to take on the {@link #getCorrectionId() corrected transaction}.
                 *
                 * @param correctionAction The action to take on the {@link #getCorrectionId() corrected transaction}.
                 */
                Transaction.prototype.setCorrectionAction = function (correctionAction) {
                    this.correctionAction = correctionAction;
                };
                /**
                 * The server-assigned temporary id for client-initiated transactions.
                 *
                 * @return The server-assigned temporary id for client-initiated transactions.
                 */
                Transaction.prototype.getTempId = function () {
                    return this.tempId;
                };
                /**
                 * The server-assigned temporary id for client-initiated transactions.
                 *
                 * @param tempId The server-assigned temporary id for client-initiated transactions.
                 */
                Transaction.prototype.setTempId = function (tempId) {
                    this.tempId = tempId;
                };
                /**
                 * The check number.
                 *
                 * @return The check number.
                 */
                Transaction.prototype.getCheckNumber = function () {
                    return this.checkNumber;
                };
                /**
                 * The check number.
                 *
                 * @param checkNumber The check number.
                 */
                Transaction.prototype.setCheckNumber = function (checkNumber) {
                    this.checkNumber = checkNumber;
                };
                /**
                 * The reference number.
                 *
                 * @return The reference number.
                 */
                Transaction.prototype.getReferenceNumber = function () {
                    return this.referenceNumber;
                };
                /**
                 * The reference number.
                 *
                 * @param referenceNumber The reference number.
                 */
                Transaction.prototype.setReferenceNumber = function (referenceNumber) {
                    this.referenceNumber = referenceNumber;
                };
                /**
                 * The standard industrial code.
                 *
                 * @return The standard industrial code.
                 */
                Transaction.prototype.getStandardIndustrialCode = function () {
                    return this.standardIndustrialCode;
                };
                /**
                 * The standard industrial code.
                 *
                 * @param standardIndustrialCode The standard industrial code.
                 */
                Transaction.prototype.setStandardIndustrialCode = function (standardIndustrialCode) {
                    this.standardIndustrialCode = standardIndustrialCode;
                };
                /**
                 * The payee id.
                 *
                 * @return The payee id.
                 */
                Transaction.prototype.getPayeeId = function () {
                    return this.payeeId;
                };
                /**
                 * The payee id.
                 *
                 * @param payeeId The payee id.
                 */
                Transaction.prototype.setPayeeId = function (payeeId) {
                    this.payeeId = payeeId;
                };
                /**
                 * The name (description) or the transaction.
                 *
                 * @return The name (description) or the transaction.
                 */
                Transaction.prototype.getName = function () {
                    return this.name;
                };
                /**
                 * The name (description) or the transaction.
                 *
                 * @param name The name (description) or the transaction.
                 */
                Transaction.prototype.setName = function (name) {
                    this.name = name;
                };
                /**
                 * The payee.
                 *
                 * @return The payee.
                 */
                Transaction.prototype.getPayee = function () {
                    return this.payee;
                };
                /**
                 * The payee.
                 *
                 * @param payee The payee.
                 */
                Transaction.prototype.setPayee = function (payee) {
                    this.payee = payee;
                };
                /**
                 * The bank account the transfer was to.
                 *
                 * @return The bank account the transfer was to.
                 */
                Transaction.prototype.getBankAccountTo = function () {
                    return this.bankAccountTo;
                };
                /**
                 * The bank account the transfer was to.
                 *
                 * @param bankAccountTo The bank account the transfer was to.
                 */
                Transaction.prototype.setBankAccountTo = function (bankAccountTo) {
                    this.bankAccountTo = bankAccountTo;
                };
                /**
                 * The credit-card account the transfer was to.
                 *
                 * @return The credit-card account the transfer was to.
                 */
                Transaction.prototype.getCreditCardAccountTo = function () {
                    return this.creditCardAccountTo;
                };
                /**
                 * The credit-card account the transfer was to.
                 *
                 * @param creditCardAccountTo The credit-card account the transfer was to.
                 */
                Transaction.prototype.setCreditCardAccountTo = function (creditCardAccountTo) {
                    this.creditCardAccountTo = creditCardAccountTo;
                };
                /**
                 * Notes.
                 *
                 * @return Notes.
                 */
                Transaction.prototype.getMemo = function () {
                    return this.memo;
                };
                /**
                 * Notes.
                 *
                 * @param memo Notes.
                 */
                Transaction.prototype.setMemo = function (memo) {
                    this.memo = memo;
                };
                /**
                 * The currency.
                 *
                 * @return The currency.
                 */
                Transaction.prototype.getCurrency = function () {
                    return this.currency;
                };
                /**
                 * The currency.
                 *
                 * @param currency The currency.
                 */
                Transaction.prototype.setCurrency = function (currency) {
                    this.currency = currency;
                };
                /**
                 * The original currency.
                 *
                 * @return The original currency.
                 */
                Transaction.prototype.getOriginalCurrency = function () {
                    return this.originalCurrency;
                };
                /**
                 * The original currency.
                 *
                 * @param originalCurrency The original currency.
                 */
                Transaction.prototype.setOriginalCurrency = function (originalCurrency) {
                    this.originalCurrency = originalCurrency;
                };
                return Transaction;
            }());
            exports_29("Transaction", Transaction);
            Aggregate_Add_5.Aggregate_add(Transaction, "STMTTRN");
            Element_add_6.Element_add(Transaction, { name: "TRNTYPE", required: true, order: 0, type: TransactionType_1.TransactionType, read: Transaction.prototype.getTransactionType, write: Transaction.prototype.setTransactionType });
            Element_add_6.Element_add(Transaction, { name: "DTPOSTED", required: true, order: 10, type: Date, read: Transaction.prototype.getDatePosted, write: Transaction.prototype.setDatePosted });
            Element_add_6.Element_add(Transaction, { name: "DTUSER", order: 20, type: Date, read: Transaction.prototype.getDateInitiated, write: Transaction.prototype.setDateInitiated });
            Element_add_6.Element_add(Transaction, { name: "DTAVAIL", order: 30, type: Date, read: Transaction.prototype.getDateAvailable, write: Transaction.prototype.setDateAvailable });
            Element_add_6.Element_add(Transaction, { name: "TRNAMT", required: true, order: 40, type: Number, read: Transaction.prototype.getBigDecimalAmount, write: Transaction.prototype.setBigDecimalAmount });
            Element_add_6.Element_add(Transaction, { name: "FITID", required: true, order: 50, type: String, read: Transaction.prototype.getId, write: Transaction.prototype.setId });
            Element_add_6.Element_add(Transaction, { name: "CORRECTFITID", order: 60, type: String, read: Transaction.prototype.getCorrectionId, write: Transaction.prototype.setCorrectionId });
            Element_add_6.Element_add(Transaction, { name: "CORRECTACTION", order: 70, type: CorrectionAction_1.CorrectionAction, read: Transaction.prototype.getCorrectionAction, write: Transaction.prototype.setCorrectionAction });
            Element_add_6.Element_add(Transaction, { name: "SRVRTID", order: 80, type: String, read: Transaction.prototype.getTempId, write: Transaction.prototype.setTempId });
            Element_add_6.Element_add(Transaction, { name: "CHECKNUM", order: 90, type: String, read: Transaction.prototype.getCheckNumber, write: Transaction.prototype.setCheckNumber });
            Element_add_6.Element_add(Transaction, { name: "REFNUM", order: 100, type: String, read: Transaction.prototype.getReferenceNumber, write: Transaction.prototype.setReferenceNumber });
            Element_add_6.Element_add(Transaction, { name: "SIC", order: 110, type: String, read: Transaction.prototype.getStandardIndustrialCode, write: Transaction.prototype.setStandardIndustrialCode });
            Element_add_6.Element_add(Transaction, { name: "PAYEEID", order: 120, type: String, read: Transaction.prototype.getPayeeId, write: Transaction.prototype.setPayeeId });
            Element_add_6.Element_add(Transaction, { name: "NAME", order: 130, type: String, read: Transaction.prototype.getName, write: Transaction.prototype.setName });
            ChildAggregate_add_1.ChildAggregate_add(Transaction, { order: 140, type: Payee_1.Payee, read: Transaction.prototype.getPayee, write: Transaction.prototype.setPayee });
            ChildAggregate_add_1.ChildAggregate_add(Transaction, { name: "BANKACCTTO", order: 150, type: BankAccountDetails_1.BankAccountDetails, read: Transaction.prototype.getBankAccountTo, write: Transaction.prototype.setBankAccountTo });
            ChildAggregate_add_1.ChildAggregate_add(Transaction, { name: "CCACCTTO", order: 160, type: CreditCardAccountDetails_1.CreditCardAccountDetails, read: Transaction.prototype.getCreditCardAccountTo, write: Transaction.prototype.setCreditCardAccountTo });
            Element_add_6.Element_add(Transaction, { name: "MEMO", order: 170, type: String, read: Transaction.prototype.getMemo, write: Transaction.prototype.setMemo });
            ChildAggregate_add_1.ChildAggregate_add(Transaction, { order: 180, type: Currency_1.Currency, read: Transaction.prototype.getCurrency, write: Transaction.prototype.setCurrency });
            ChildAggregate_add_1.ChildAggregate_add(Transaction, { name: "ORIGCURRENCY", order: 190, type: Currency_1.Currency, read: Transaction.prototype.getOriginalCurrency, write: Transaction.prototype.setOriginalCurrency });
        }
    };
});
System.register("domain/data/common/TransactionList", ["domain/data/common/Transaction", "meta/Aggregate_add", "meta/Element_add", "meta/ChildAggregate_add"], function (exports_30, context_30) {
    "use strict";
    var Transaction_1, Aggregate_Add_6, Element_add_7, ChildAggregate_add_2, TransactionList;
    var __moduleName = context_30 && context_30.id;
    return {
        setters: [
            function (Transaction_1_1) {
                Transaction_1 = Transaction_1_1;
            },
            function (Aggregate_Add_6_1) {
                Aggregate_Add_6 = Aggregate_Add_6_1;
            },
            function (Element_add_7_1) {
                Element_add_7 = Element_add_7_1;
            },
            function (ChildAggregate_add_2_1) {
                ChildAggregate_add_2 = ChildAggregate_add_2_1;
            }
        ],
        execute: function () {
            //import java.util.Date;
            //import java.util.List;
            /**
             * @author Ryan Heaton
             */
            TransactionList = /** @class */ (function () {
                function TransactionList() {
                }
                /**
                 * The start date.
                 *
                 * @return The start date.
                 */
                TransactionList.prototype.getStart = function () {
                    return this.start;
                };
                /**
                 * The start date.
                 *
                 * @param start The start date.
                 */
                TransactionList.prototype.setStart = function (start) {
                    this.start = start;
                };
                /**
                 * The end date.
                 *
                 * @return The end date.
                 */
                TransactionList.prototype.getEnd = function () {
                    return this.end;
                };
                /**
                 * The end date.
                 *
                 * @param end The end date.
                 */
                TransactionList.prototype.setEnd = function (end) {
                    this.end = end;
                };
                /**
                 * The transaction list.
                 *
                 * @return The transaction list.
                 */
                TransactionList.prototype.getTransactions = function () {
                    return this.transactions;
                };
                /**
                 * The transaction list.
                 *
                 * @param transactions The transaction list.
                 */
                TransactionList.prototype.setTransactions = function (transactions) {
                    this.transactions = transactions;
                };
                return TransactionList;
            }());
            exports_30("TransactionList", TransactionList);
            Aggregate_Add_6.Aggregate_add(TransactionList, "BANKTRANLIST");
            Element_add_7.Element_add(TransactionList, { name: "DTSTART", required: true, order: 0, type: Date, read: TransactionList.prototype.getStart, write: TransactionList.prototype.setStart });
            Element_add_7.Element_add(TransactionList, { name: "DTEND", required: true, order: 10, type: Date, read: TransactionList.prototype.getEnd, write: TransactionList.prototype.setEnd });
            ChildAggregate_add_2.ChildAggregate_add(TransactionList, { order: 20, type: Array, collectionEntryType: Transaction_1.Transaction, read: TransactionList.prototype.getTransactions, write: TransactionList.prototype.setTransactions });
        }
    };
});
System.register("domain/data/common/BalanceInfo", ["meta/Aggregate_add", "meta/Element_add"], function (exports_31, context_31) {
    "use strict";
    var Aggregate_Add_7, Element_add_8, BalanceInfo;
    var __moduleName = context_31 && context_31.id;
    return {
        setters: [
            function (Aggregate_Add_7_1) {
                Aggregate_Add_7 = Aggregate_Add_7_1;
            },
            function (Element_add_8_1) {
                Element_add_8 = Element_add_8_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            BalanceInfo = /** @class */ (function () {
                function BalanceInfo() {
                }
                /**
                 * The amount.
                 *
                 * @return The amount.
                 */
                BalanceInfo.prototype.getAmount = function () {
                    return this.amount;
                };
                /**
                 * The amount.
                 *
                 * @param amount The amount.
                 */
                BalanceInfo.prototype.setAmount = function (amount) {
                    this.amount = amount;
                };
                /**
                 * The as-of date.
                 *
                 * @return The as-of date.
                 */
                BalanceInfo.prototype.getAsOfDate = function () {
                    return this.asOfDate;
                };
                /**
                 * The as-of date.
                 *
                 * @param asOfDate The as-of date.
                 */
                BalanceInfo.prototype.setAsOfDate = function (asOfDate) {
                    this.asOfDate = asOfDate;
                };
                return BalanceInfo;
            }());
            exports_31("BalanceInfo", BalanceInfo);
            Aggregate_Add_7.Aggregate_add(BalanceInfo);
            Element_add_8.Element_add(BalanceInfo, { name: "BALAMT", required: true, order: 0, type: Number, read: BalanceInfo.prototype.getAmount, write: BalanceInfo.prototype.setAmount });
            Element_add_8.Element_add(BalanceInfo, { name: "DTASOF", required: true, order: 10, type: Date, read: BalanceInfo.prototype.getAsOfDate, write: BalanceInfo.prototype.setAsOfDate });
        }
    };
});
System.register("client/AccountStatement", [], function (exports_32, context_32) {
    "use strict";
    var __moduleName = context_32 && context_32.id;
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("client/FinancialInstitutionAccount", [], function (exports_33, context_33) {
    "use strict";
    var __moduleName = context_33 && context_33.id;
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("client/BankAccount", [], function (exports_34, context_34) {
    "use strict";
    var __moduleName = context_34 && context_34.id;
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("client/CreditCardAccount", [], function (exports_35, context_35) {
    "use strict";
    var __moduleName = context_35 && context_35.id;
    return {
        setters: [],
        execute: function () {
        }
    };
});
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("client/FinancialInstitutionData", [], function (exports_36, context_36) {
    "use strict";
    var __moduleName = context_36 && context_36.id;
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2008 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
        }
    };
});
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("domain/data/MessageSetType", [], function (exports_37, context_37) {
    "use strict";
    var MessageSetType;
    var __moduleName = context_37 && context_37.id;
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2008 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
             * The message set type, used to define message set order in the envelope.
             *
             * @author Ryan Heaton
             * @see "Section 2.4.5.2, OFX spec"
             */
            (function (MessageSetType) {
                MessageSetType[MessageSetType["signon"] = 0] = "signon";
                MessageSetType[MessageSetType["signup"] = 1] = "signup";
                MessageSetType[MessageSetType["banking"] = 2] = "banking";
                MessageSetType[MessageSetType["creditcard"] = 3] = "creditcard";
                MessageSetType[MessageSetType["investment"] = 4] = "investment";
                MessageSetType[MessageSetType["interbank_transfer"] = 5] = "interbank_transfer";
                MessageSetType[MessageSetType["wire_transfer"] = 6] = "wire_transfer";
                MessageSetType[MessageSetType["payments"] = 7] = "payments";
                MessageSetType[MessageSetType["email"] = 8] = "email";
                MessageSetType[MessageSetType["investment_security"] = 9] = "investment_security";
                MessageSetType[MessageSetType["profile"] = 10] = "profile";
                MessageSetType[MessageSetType["tax1099"] = 11] = "tax1099";
            })(MessageSetType || (MessageSetType = {}));
            exports_37("MessageSetType", MessageSetType);
        }
    };
});
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("domain/data/ApplicationSecurity", [], function (exports_38, context_38) {
    "use strict";
    var ApplicationSecurity;
    var __moduleName = context_38 && context_38.id;
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2008 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
             * @author Ryan Heaton
             * @see "Section 4, OFX spec"
             */
            (function (ApplicationSecurity) {
                ApplicationSecurity[ApplicationSecurity["NONE"] = 0] = "NONE";
                ApplicationSecurity[ApplicationSecurity["TYPE1"] = 1] = "TYPE1";
            })(ApplicationSecurity || (ApplicationSecurity = {}));
            exports_38("ApplicationSecurity", ApplicationSecurity);
        }
    };
});
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("domain/data/profile/SynchronizationCapability", [], function (exports_39, context_39) {
    "use strict";
    var SynchronizationCapability;
    var __moduleName = context_39 && context_39.id;
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2008 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
             * @author Ryan Heaton
             * @see "Section 7.2.1, OFX Spec"
             */
            (function (SynchronizationCapability) {
                SynchronizationCapability[SynchronizationCapability["FULL"] = 0] = "FULL";
                SynchronizationCapability[SynchronizationCapability["LITE"] = 1] = "LITE";
            })(SynchronizationCapability || (SynchronizationCapability = {}));
            exports_39("SynchronizationCapability", SynchronizationCapability);
        }
    };
});
System.register("domain/data/MessageSetProfile", [], function (exports_40, context_40) {
    "use strict";
    var __moduleName = context_40 && context_40.id;
    return {
        setters: [],
        execute: function () {
        }
    };
});
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("domain/data/profile/CharacterType", [], function (exports_41, context_41) {
    "use strict";
    var CharacterType;
    var __moduleName = context_41 && context_41.id;
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2008 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
             * @author Ryan Heaton
             * @see "Section 7.2.2, OFX Spec"
             */
            (function (CharacterType) {
                CharacterType[CharacterType["ALPHAONLY"] = 0] = "ALPHAONLY";
                CharacterType[CharacterType["NUMERICONLY"] = 1] = "NUMERICONLY";
                CharacterType[CharacterType["ALPHAORNUMERIC"] = 2] = "ALPHAORNUMERIC";
                CharacterType[CharacterType["ALPHAANDNUMERIC"] = 3] = "ALPHAANDNUMERIC";
            })(CharacterType || (CharacterType = {}));
            exports_41("CharacterType", CharacterType);
        }
    };
});
System.register("domain/data/SignonProfile", [], function (exports_42, context_42) {
    "use strict";
    var __moduleName = context_42 && context_42.id;
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("client/FinancialInstitutionProfile", [], function (exports_43, context_43) {
    "use strict";
    var __moduleName = context_43 && context_43.id;
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("domain/data/common/AccountInfo", [], function (exports_44, context_44) {
    "use strict";
    var __moduleName = context_44 && context_44.id;
    return {
        setters: [],
        execute: function () {
        }
    };
});
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("domain/data/common/AccountStatus", [], function (exports_45, context_45) {
    "use strict";
    var AccountStatus;
    var __moduleName = context_45 && context_45.id;
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2008 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
             * @author Ryan Heaton
             */
            (function (AccountStatus) {
                /**
                 * Available, but not yet requested.
                 */
                AccountStatus[AccountStatus["AVAIL"] = 0] = "AVAIL";
                /**
                 * Requested, but not yet available.
                 */
                AccountStatus[AccountStatus["PEND"] = 1] = "PEND";
                /**
                 * Active.
                 */
                AccountStatus[AccountStatus["ACTIVE"] = 2] = "ACTIVE";
            })(AccountStatus || (AccountStatus = {}));
            exports_45("AccountStatus", AccountStatus);
        }
    };
});
System.register("domain/data/banking/BankAccountInfo", ["domain/data/banking/BankAccountDetails", "domain/data/common/AccountStatus", "meta/Aggregate_add", "meta/ChildAggregate_add", "meta/Element_add"], function (exports_46, context_46) {
    "use strict";
    var BankAccountDetails_2, AccountStatus_1, Aggregate_Add_8, ChildAggregate_add_3, Element_add_9, BankAccountInfo;
    var __moduleName = context_46 && context_46.id;
    return {
        setters: [
            function (BankAccountDetails_2_1) {
                BankAccountDetails_2 = BankAccountDetails_2_1;
            },
            function (AccountStatus_1_1) {
                AccountStatus_1 = AccountStatus_1_1;
            },
            function (Aggregate_Add_8_1) {
                Aggregate_Add_8 = Aggregate_Add_8_1;
            },
            function (ChildAggregate_add_3_1) {
                ChildAggregate_add_3 = ChildAggregate_add_3_1;
            },
            function (Element_add_9_1) {
                Element_add_9 = Element_add_9_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            BankAccountInfo = /** @class */ (function () {
                function BankAccountInfo() {
                }
                /**
                 * The bank account this information is referencing.
                 *
                 * @return The bank account this information is referencing.
                 */
                BankAccountInfo.prototype.getBankAccount = function () {
                    return this.bankAccount;
                };
                /**
                 * The bank account this information is referencing.
                 *
                 * @param bankAccount The bank account this information is referencing.
                 */
                BankAccountInfo.prototype.setBankAccount = function (bankAccount) {
                    this.bankAccount = bankAccount;
                };
                // Inherited.
                BankAccountInfo.prototype.getAccountDetails = function () {
                    return this.getBankAccount();
                };
                /**
                 * Whether this account supports download of transaction details.
                 *
                 * @return Whether this account supports download of transaction details.
                 */
                BankAccountInfo.prototype.getSupportsTransactionDetailOperations = function () {
                    return this.supportsTransactionDetailOperations;
                };
                /**
                 * Whether this account supports download of transaction details.
                 *
                 * @param supportsTransactionDetailOperations Whether this account supports download of transaction details.
                 */
                BankAccountInfo.prototype.setSupportsTransactionDetailOperations = function (supportsTransactionDetailOperations) {
                    this.supportsTransactionDetailOperations = supportsTransactionDetailOperations;
                };
                /**
                 * Whether this account supports transfer operations to other accounts.
                 *
                 * @return Whether this account supports transfer operations to other accounts.
                 */
                BankAccountInfo.prototype.getSupportsTransferToOtherAccountOperations = function () {
                    return this.supportsTransferToOtherAccountOperations;
                };
                /**
                 * Whether this account supports transfer operations to other accounts.
                 *
                 * @param supportsTransferToOtherAccountOperations Whether this account supports transfer operations to other accounts.
                 */
                BankAccountInfo.prototype.setSupportsTransferToOtherAccountOperations = function (supportsTransferToOtherAccountOperations) {
                    this.supportsTransferToOtherAccountOperations = supportsTransferToOtherAccountOperations;
                };
                /**
                 * Whether this account supports transfer operations from other accounts.
                 *
                 * @return Whether this account supports transfer operations from other accounts.
                 */
                BankAccountInfo.prototype.getSupportsTransferFromOtherAccountOperations = function () {
                    return this.supportsTransferFromOtherAccountOperations;
                };
                /**
                 * Whether this account supports transfer operations from other accounts.
                 *
                 * @param supportsTransferFromOtherAccountOperations Whether this account supports transfer operations from other accounts.
                 */
                BankAccountInfo.prototype.setSupportsTransferFromOtherAccountOperations = function (supportsTransferFromOtherAccountOperations) {
                    this.supportsTransferFromOtherAccountOperations = supportsTransferFromOtherAccountOperations;
                };
                /**
                 * The account status.
                 *
                 * @return The account status.
                 */
                BankAccountInfo.prototype.getStatus = function () {
                    return this.status;
                };
                /**
                 * The account status.
                 *
                 * @param status The account status.
                 */
                BankAccountInfo.prototype.setStatus = function (status) {
                    this.status = status;
                };
                return BankAccountInfo;
            }());
            exports_46("BankAccountInfo", BankAccountInfo);
            Aggregate_Add_8.Aggregate_add(BankAccountInfo, "BANKACCTINFO");
            ChildAggregate_add_3.ChildAggregate_add(BankAccountInfo, { name: "BANKACCTFROM", required: true, order: 0, type: BankAccountDetails_2.BankAccountDetails, read: BankAccountInfo.prototype.getBankAccount, write: BankAccountInfo.prototype.setBankAccount });
            Element_add_9.Element_add(BankAccountInfo, { name: "SUPTXDL", required: true, order: 10, type: Boolean, read: BankAccountInfo.prototype.getSupportsTransactionDetailOperations, write: BankAccountInfo.prototype.setSupportsTransactionDetailOperations });
            Element_add_9.Element_add(BankAccountInfo, { name: "XFERSRC", required: true, order: 20, type: Boolean, read: BankAccountInfo.prototype.getSupportsTransferToOtherAccountOperations, write: BankAccountInfo.prototype.setSupportsTransferToOtherAccountOperations });
            Element_add_9.Element_add(BankAccountInfo, { name: "XFERDEST", required: true, order: 30, type: Boolean, read: BankAccountInfo.prototype.getSupportsTransferFromOtherAccountOperations, write: BankAccountInfo.prototype.setSupportsTransferFromOtherAccountOperations });
            Element_add_9.Element_add(BankAccountInfo, { name: "SVCSTATUS", required: true, order: 40, type: AccountStatus_1.AccountStatus, read: BankAccountInfo.prototype.getStatus, write: BankAccountInfo.prototype.setStatus });
        }
    };
});
System.register("domain/data/creditcard/CreditCardAccountInfo", ["domain/data/creditcard/CreditCardAccountDetails", "domain/data/common/AccountStatus", "meta/Aggregate_add", "meta/ChildAggregate_add", "meta/Element_add"], function (exports_47, context_47) {
    "use strict";
    var CreditCardAccountDetails_2, AccountStatus_2, Aggregate_Add_9, ChildAggregate_add_4, Element_add_10, CreditCardAccountInfo;
    var __moduleName = context_47 && context_47.id;
    return {
        setters: [
            function (CreditCardAccountDetails_2_1) {
                CreditCardAccountDetails_2 = CreditCardAccountDetails_2_1;
            },
            function (AccountStatus_2_1) {
                AccountStatus_2 = AccountStatus_2_1;
            },
            function (Aggregate_Add_9_1) {
                Aggregate_Add_9 = Aggregate_Add_9_1;
            },
            function (ChildAggregate_add_4_1) {
                ChildAggregate_add_4 = ChildAggregate_add_4_1;
            },
            function (Element_add_10_1) {
                Element_add_10 = Element_add_10_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            CreditCardAccountInfo = /** @class */ (function () {
                function CreditCardAccountInfo() {
                }
                /**
                 * The credit card account this information is referencing.
                 *
                 * @return The credit card account this information is referencing.
                 */
                CreditCardAccountInfo.prototype.getCreditCardAccount = function () {
                    return this.creditCardAccount;
                };
                /**
                 * The credit card account this information is referencing.
                 *
                 * @param creditCardAccount The credit card account this information is referencing.
                 */
                CreditCardAccountInfo.prototype.setCreditCardAccount = function (creditCardAccount) {
                    this.creditCardAccount = creditCardAccount;
                };
                // Inherited.
                CreditCardAccountInfo.prototype.getAccountDetails = function () {
                    return this.getCreditCardAccount();
                };
                /**
                 * Whether this account supports download of transaction details.
                 *
                 * @return Whether this account supports download of transaction details.
                 */
                CreditCardAccountInfo.prototype.getSupportsTransactionDetailOperations = function () {
                    return this.supportsTransactionDetailOperations;
                };
                /**
                 * Whether this account supports download of transaction details.
                 *
                 * @param supportsTransactionDetailOperations Whether this account supports download of transaction details.
                 */
                CreditCardAccountInfo.prototype.setSupportsTransactionDetailOperations = function (supportsTransactionDetailOperations) {
                    this.supportsTransactionDetailOperations = supportsTransactionDetailOperations;
                };
                /**
                 * Whether this account supports transfer operations to other accounts.
                 *
                 * @return Whether this account supports transfer operations to other accounts.
                 */
                CreditCardAccountInfo.prototype.getSupportsTransferToOtherAccountOperations = function () {
                    return this.supportsTransferToOtherAccountOperations;
                };
                /**
                 * Whether this account supports transfer operations to other accounts.
                 *
                 * @param supportsTransferToOtherAccountOperations Whether this account supports transfer operations to other accounts.
                 */
                CreditCardAccountInfo.prototype.setSupportsTransferToOtherAccountOperations = function (supportsTransferToOtherAccountOperations) {
                    this.supportsTransferToOtherAccountOperations = supportsTransferToOtherAccountOperations;
                };
                /**
                 * Whether this account supports transfer operations from other accounts.
                 *
                 * @return Whether this account supports transfer operations from other accounts.
                 */
                CreditCardAccountInfo.prototype.getSupportsTransferFromOtherAccountOperations = function () {
                    return this.supportsTransferFromOtherAccountOperations;
                };
                /**
                 * Whether this account supports transfer operations from other accounts.
                 *
                 * @param supportsTransferFromOtherAccountOperations Whether this account supports transfer operations from other accounts.
                 */
                CreditCardAccountInfo.prototype.setSupportsTransferFromOtherAccountOperations = function (supportsTransferFromOtherAccountOperations) {
                    this.supportsTransferFromOtherAccountOperations = supportsTransferFromOtherAccountOperations;
                };
                /**
                 * The account status.
                 *
                 * @return The account status.
                 */
                CreditCardAccountInfo.prototype.getStatus = function () {
                    return this.status;
                };
                /**
                 * The account status.
                 *
                 * @param status The account status.
                 */
                CreditCardAccountInfo.prototype.setStatus = function (status) {
                    this.status = status;
                };
                return CreditCardAccountInfo;
            }());
            exports_47("CreditCardAccountInfo", CreditCardAccountInfo);
            Aggregate_Add_9.Aggregate_add(CreditCardAccountInfo, "CCACCTINFO");
            ChildAggregate_add_4.ChildAggregate_add(CreditCardAccountInfo, { name: "CCACCTFROM", required: true, order: 0, type: CreditCardAccountDetails_2.CreditCardAccountDetails, read: CreditCardAccountInfo.prototype.getCreditCardAccount, write: CreditCardAccountInfo.prototype.setCreditCardAccount });
            Element_add_10.Element_add(CreditCardAccountInfo, { name: "SUPTXDL", required: true, order: 10, type: Boolean, read: CreditCardAccountInfo.prototype.getSupportsTransactionDetailOperations, write: CreditCardAccountInfo.prototype.setSupportsTransactionDetailOperations });
            Element_add_10.Element_add(CreditCardAccountInfo, { name: "XFERSRC", required: true, order: 20, type: Boolean, read: CreditCardAccountInfo.prototype.getSupportsTransferToOtherAccountOperations, write: CreditCardAccountInfo.prototype.setSupportsTransferToOtherAccountOperations });
            Element_add_10.Element_add(CreditCardAccountInfo, { name: "XFERDEST", required: true, order: 30, type: Boolean, read: CreditCardAccountInfo.prototype.getSupportsTransferFromOtherAccountOperations, write: CreditCardAccountInfo.prototype.setSupportsTransferFromOtherAccountOperations });
            Element_add_10.Element_add(CreditCardAccountInfo, { name: "SVCSTATUS", required: true, order: 40, type: AccountStatus_2.AccountStatus, read: CreditCardAccountInfo.prototype.getStatus, write: CreditCardAccountInfo.prototype.setStatus });
        }
    };
});
System.register("domain/data/investment/accounts/InvestmentAccountDetails", ["meta/Aggregate_add", "meta/Element_add"], function (exports_48, context_48) {
    "use strict";
    var Aggregate_Add_10, Element_add_11, InvestmentAccountDetails;
    var __moduleName = context_48 && context_48.id;
    return {
        setters: [
            function (Aggregate_Add_10_1) {
                Aggregate_Add_10 = Aggregate_Add_10_1;
            },
            function (Element_add_11_1) {
                Element_add_11 = Element_add_11_1;
            }
        ],
        execute: function () {
            /**
             * Aggregate for the details that identifity a brokerage account.
             *
             * @author Jon Perlow
             * @see "OFX Spec, Section 13.6.1"
             */
            InvestmentAccountDetails = /** @class */ (function () {
                function InvestmentAccountDetails() {
                }
                /**
                 * Gets the broker id.
                 *
                 * @return the id of the broker
                 */
                InvestmentAccountDetails.prototype.getBrokerId = function () {
                    return this.brokerId;
                };
                /**
                 * Sets the broker id.
                 *
                 * @param brokerId the id of the broker
                 */
                InvestmentAccountDetails.prototype.setBrokerId = function (brokerId) {
                    this.brokerId = brokerId;
                };
                /**
                 * Gets the account number.
                 *
                 * @return the account number
                 */
                InvestmentAccountDetails.prototype.getAccountNumber = function () {
                    return this.accountNumber;
                };
                /**
                 * Sets the account number.
                 *
                 * @param accountNumber the account number
                 */
                InvestmentAccountDetails.prototype.setAccountNumber = function (accountNumber) {
                    this.accountNumber = accountNumber;
                };
                /**
                 * Gets the account key.
                 *
                 * @return the account key
                 */
                InvestmentAccountDetails.prototype.getAccountKey = function () {
                    return this.accountKey;
                };
                /**
                 * Sets the account key.
                 *
                 * @param accountKey the account key
                 */
                InvestmentAccountDetails.prototype.setAccountKey = function (accountKey) {
                    this.accountKey = accountKey;
                };
                return InvestmentAccountDetails;
            }());
            exports_48("InvestmentAccountDetails", InvestmentAccountDetails);
            Aggregate_Add_10.Aggregate_add(InvestmentAccountDetails);
            Element_add_11.Element_add(InvestmentAccountDetails, { name: "BROKERID", required: true, order: 0, type: String, read: InvestmentAccountDetails.prototype.getBrokerId, write: InvestmentAccountDetails.prototype.setBrokerId });
            Element_add_11.Element_add(InvestmentAccountDetails, { name: "ACCTID", required: true, order: 20, type: String, read: InvestmentAccountDetails.prototype.getAccountNumber, write: InvestmentAccountDetails.prototype.setAccountNumber });
            Element_add_11.Element_add(InvestmentAccountDetails, { name: "ACCTKEY", order: 40, type: String, read: InvestmentAccountDetails.prototype.getAccountKey, write: InvestmentAccountDetails.prototype.setAccountKey });
        }
    };
});
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("domain/data/investment/accounts/UnitedStatesAccountType", [], function (exports_49, context_49) {
    "use strict";
    var UnitedStatesAccountType, ofxMapping;
    var __moduleName = context_49 && context_49.id;
    function UnitedStatesAccountType_fromOfx(ofxVal) {
        return ofxVal == null ? null : ofxMapping[ofxVal];
    }
    exports_49("UnitedStatesAccountType_fromOfx", UnitedStatesAccountType_fromOfx);
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2010 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            //import java.util.HashMap;
            //import java.util.Map;
            /**
             * @author Jon Perlow
             * @see "OFX Spec, Section 13.6.2.1"
             */
            (function (UnitedStatesAccountType) {
                /** A 401(k) retirement account */
                UnitedStatesAccountType[UnitedStatesAccountType["R401K"] = 0] = "R401K";
                /** A 403(B) retirement account */
                UnitedStatesAccountType[UnitedStatesAccountType["R403B"] = 1] = "R403B";
                /** An IRA retirement account */
                UnitedStatesAccountType[UnitedStatesAccountType["IRA"] = 2] = "IRA";
                /** Keough (money purchase/profit sharing) account */
                UnitedStatesAccountType[UnitedStatesAccountType["KEOUGH"] = 3] = "KEOUGH";
                /** Other account type */
                UnitedStatesAccountType[UnitedStatesAccountType["OTHER"] = 4] = "OTHER";
                /** Salary Reduction Employer Pension Plan */
                UnitedStatesAccountType[UnitedStatesAccountType["SARSEP"] = 5] = "SARSEP";
                /** Savings Incentive Match Plan for Employees*/
                UnitedStatesAccountType[UnitedStatesAccountType["SIMPLE"] = 6] = "SIMPLE";
                /** Regular investment account */
                UnitedStatesAccountType[UnitedStatesAccountType["NORMAL"] = 7] = "NORMAL";
                /** Tax Deferred Annuity */
                UnitedStatesAccountType[UnitedStatesAccountType["TDA"] = 8] = "TDA";
                /** Trust (including UTMA) */
                UnitedStatesAccountType[UnitedStatesAccountType["TRUST"] = 9] = "TRUST";
                /** Custodial account */
                UnitedStatesAccountType[UnitedStatesAccountType["UGMA"] = 10] = "UGMA";
            })(UnitedStatesAccountType || (UnitedStatesAccountType = {}));
            exports_49("UnitedStatesAccountType", UnitedStatesAccountType);
            ofxMapping = {
                "401K": UnitedStatesAccountType.R401K,
                "403B": UnitedStatesAccountType.R403B,
                "IRA": UnitedStatesAccountType.IRA,
                "KEOUGH": UnitedStatesAccountType.KEOUGH,
                "OTHER": UnitedStatesAccountType.OTHER,
                "SARSEP": UnitedStatesAccountType.SARSEP,
                "SIMPLE": UnitedStatesAccountType.SIMPLE,
                "NORMAL": UnitedStatesAccountType.NORMAL,
                "TDA": UnitedStatesAccountType.TDA,
                "TRUST": UnitedStatesAccountType.TRUST,
                "UGMA": UnitedStatesAccountType.UGMA,
            };
        }
    };
});
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("domain/data/investment/accounts/ActivationStatus", [], function (exports_50, context_50) {
    "use strict";
    var ActivationStatus;
    var __moduleName = context_50 && context_50.id;
    function ActivationStatus_fromOfx(ofxVal) {
        if ("ACTIVE" === ofxVal) {
            return ActivationStatus.ACTIVE;
        }
        else if ("PEND" === ofxVal) {
            return ActivationStatus.PENDING;
        }
        else if ("AVAIL" === ofxVal) {
            return ActivationStatus.AVAILABLE;
        }
        else {
            return null;
        }
    }
    exports_50("ActivationStatus_fromOfx", ActivationStatus_fromOfx);
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2010 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
             * Activation status of an account.
             * @see "Section 13.6.2, OFX Spec"
             *
             * @author Jon Perlow
             */
            (function (ActivationStatus) {
                ActivationStatus[ActivationStatus["ACTIVE"] = 0] = "ACTIVE";
                ActivationStatus[ActivationStatus["PENDING"] = 1] = "PENDING";
                ActivationStatus[ActivationStatus["AVAILABLE"] = 2] = "AVAILABLE";
            })(ActivationStatus || (ActivationStatus = {}));
            exports_50("ActivationStatus", ActivationStatus);
        }
    };
});
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("domain/data/investment/accounts/AccountType", [], function (exports_51, context_51) {
    "use strict";
    var AccountType;
    var __moduleName = context_51 && context_51.id;
    function AccountType_fromOfx(ofxVal) {
        if ("INDIVIDUAL" === ofxVal) {
            return AccountType.INDIVIDUAL;
        }
        else if ("JOINT" === ofxVal) {
            return AccountType.JOINT;
        }
        else if ("CORPORATE" === ofxVal) {
            return AccountType.CORPORATE;
        }
        else if ("CORPORATE" === ofxVal) {
            return AccountType.CORPORATE;
        }
        else {
            return null;
        }
    }
    exports_51("AccountType_fromOfx", AccountType_fromOfx);
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2010 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
             * Type of investment account.
             *
             * @author Jon Perlow
             * @see "OFX Spec, Section 13.6.2"
             */
            (function (AccountType) {
                AccountType[AccountType["INDIVIDUAL"] = 0] = "INDIVIDUAL";
                AccountType[AccountType["JOINT"] = 1] = "JOINT";
                AccountType[AccountType["TRUST"] = 2] = "TRUST";
                AccountType[AccountType["CORPORATE"] = 3] = "CORPORATE";
            })(AccountType || (AccountType = {}));
            exports_51("AccountType", AccountType);
        }
    };
});
System.register("domain/data/investment/accounts/InvestmentAccountInfo", ["domain/data/investment/accounts/InvestmentAccountDetails", "domain/data/investment/accounts/UnitedStatesAccountType", "domain/data/investment/accounts/ActivationStatus", "domain/data/investment/accounts/AccountType", "meta/Aggregate_add", "meta/ChildAggregate_add", "meta/Element_add"], function (exports_52, context_52) {
    "use strict";
    var InvestmentAccountDetails_1, UnitedStatesAccountType_1, ActivationStatus_1, AccountType_2, Aggregate_Add_11, ChildAggregate_add_5, Element_add_12, InvestmentAccountInfo;
    var __moduleName = context_52 && context_52.id;
    return {
        setters: [
            function (InvestmentAccountDetails_1_1) {
                InvestmentAccountDetails_1 = InvestmentAccountDetails_1_1;
            },
            function (UnitedStatesAccountType_1_1) {
                UnitedStatesAccountType_1 = UnitedStatesAccountType_1_1;
            },
            function (ActivationStatus_1_1) {
                ActivationStatus_1 = ActivationStatus_1_1;
            },
            function (AccountType_2_1) {
                AccountType_2 = AccountType_2_1;
            },
            function (Aggregate_Add_11_1) {
                Aggregate_Add_11 = Aggregate_Add_11_1;
            },
            function (ChildAggregate_add_5_1) {
                ChildAggregate_add_5 = ChildAggregate_add_5_1;
            },
            function (Element_add_12_1) {
                Element_add_12 = Element_add_12_1;
            }
        ],
        execute: function () {
            /**
             * Aggregate for the info about a brokerage account.
             *
             * @author Jon Perlow
             * @see "OFX Spec, Section 13.6.2"
             */
            InvestmentAccountInfo = /** @class */ (function () {
                function InvestmentAccountInfo() {
                }
                /**
                 * Gets the investment account this information is referencing.
                 *
                 * @return the investment account this information is referencing
                 */
                InvestmentAccountInfo.prototype.getInvestmentAccount = function () {
                    return this.investmentAccount;
                };
                /**
                 * Sets the investment account this information is referencing. This is a required field
                 * according to the OFX spec.
                 *
                 * @param investmentAccount the investment account this information is referencing
                 */
                InvestmentAccountInfo.prototype.setInvestmentAccount = function (investmentAccount) {
                    this.investmentAccount = investmentAccount;
                };
                // Inherited.
                InvestmentAccountInfo.prototype.getAccountDetails = function () {
                    return this.getInvestmentAccount();
                };
                /**
                 * Gets the United States account type. This is a required field according to the OFX spec.
                 * @see "OFX Spec, Section 13.6.1"
                 *
                 * @return the United States account type
                 */
                InvestmentAccountInfo.prototype.getUnitedStatesAccountType = function () {
                    return this.unitedStatesAccountType;
                };
                /**
                 * Sets United States account type. This is a required field according to the OFX spec.
                 * @see "OFX Spec, Section 13.6.1"
                 *
                 * @param unitedStatesAccountType the United States account type
                 */
                InvestmentAccountInfo.prototype.setUnitedStatesAccountType = function (unitedStatesAccountType) {
                    this.unitedStatesAccountType = unitedStatesAccountType;
                };
                /**
                 * Gets the United States account type as one of the well-known types.
                 *
                 * @return the account type or null if it's not one of the well-known types
                 */
                InvestmentAccountInfo.prototype.getUnitedStatesAccountTypeEnum = function () {
                    return UnitedStatesAccountType_1.UnitedStatesAccountType_fromOfx(this.unitedStatesAccountType);
                };
                /**
                 * Gets whether the account supports checking. This is a required field according to the OFX spec.
                 * @see "OFX Spec, Section 13.6.1"
                 *
                 * @return whether the account supports checking
                 */
                InvestmentAccountInfo.prototype.getSupportsChecking = function () {
                    return this.supportsChecking;
                };
                /**
                 * Sets whether the account supports checking. This is a required field according to the OFX spec.
                 * @see "OFX Spec, Section 13.6.1"
                 *
                 * @param supportsChecking whether the account supports checking
                 */
                InvestmentAccountInfo.prototype.setSupportsChecking = function (supportsChecking) {
                    this.supportsChecking = supportsChecking;
                };
                /**
                 * Gets the activation status for investment statement download. This is a required field
                 * according to the OFX spec.
                 *
                 * @return the activation status
                 */
                InvestmentAccountInfo.prototype.getActivationStatus = function () {
                    return this.activationStatus;
                };
                /**
                 * Sets the activation status for investment statement download. This is a required field
                 * according to the OFX spec.
                 *
                 * @param activationStatus the activation status
                 */
                InvestmentAccountInfo.prototype.setActivationStatus = function (activationStatus) {
                    this.activationStatus = activationStatus;
                };
                /**
                 * Gets the activation status as one of the well-known types.
                 *
                 * @return the activation status or null if it wasn't one of the well known types
                 */
                InvestmentAccountInfo.prototype.getActivationStatusEnum = function () {
                    return ActivationStatus_1.ActivationStatus_fromOfx(this.getActivationStatus());
                };
                /**
                 * Gets the type of investment account. One of "INDIVIDUAL", "JOINT", "TRUST", or "CORPORATE".
                 * This is an optional field according to the OFX spec.
                 *
                 * @return the type of account
                 */
                InvestmentAccountInfo.prototype.getInvestmentAccountType = function () {
                    return this.investmentAccountType;
                };
                /**
                 * Sets the type of investment account. One of "INDIVIDUAL", "JOINT", "TRUST", or "CORPORATE".
                 * This is an optional field according to the OFX spec.
                 *
                 * @param investmentAccountType the type of account
                 */
                InvestmentAccountInfo.prototype.setInvestmentAccountType = function (investmentAccountType) {
                    this.investmentAccountType = investmentAccountType;
                };
                /**
                 * Gets the type of investment account as one of the well-known types.
                 *
                 * @return the type of investment account or null if it's not one of the well-known types
                 */
                InvestmentAccountInfo.prototype.getInvestmentAccountTypeEnum = function () {
                    return AccountType_2.AccountType_fromOfx(this.getInvestmentAccountType());
                };
                /**
                 * Gets the description of option trading privileges. * This is an optional field according to
                 * the OFX spec.
                 *
                 * @return the description of option trading privileges.
                 */
                InvestmentAccountInfo.prototype.getOptionLevel = function () {
                    return this.optionLevel;
                };
                /**
                 * Sets the description of option trading privileges. * This is an optional field according to
                 * the OFX spec.
                 *
                 * @param optionLevel the description of option trading privileges.
                 */
                InvestmentAccountInfo.prototype.setOptionLevel = function (optionLevel) {
                    this.optionLevel = optionLevel;
                };
                return InvestmentAccountInfo;
            }());
            exports_52("InvestmentAccountInfo", InvestmentAccountInfo);
            Aggregate_Add_11.Aggregate_add(InvestmentAccountInfo, "INVACCTINFO");
            ChildAggregate_add_5.ChildAggregate_add(InvestmentAccountInfo, { name: "INVACCTFROM", required: true, order: 0, type: InvestmentAccountDetails_1.InvestmentAccountDetails, read: InvestmentAccountInfo.prototype.getInvestmentAccount, write: InvestmentAccountInfo.prototype.setInvestmentAccount });
            Element_add_12.Element_add(InvestmentAccountInfo, { name: "USPRODUCTTYPE", required: true, order: 10, type: String, read: InvestmentAccountInfo.prototype.getUnitedStatesAccountType, write: InvestmentAccountInfo.prototype.setUnitedStatesAccountType });
            Element_add_12.Element_add(InvestmentAccountInfo, { name: "CHECKING", required: true, order: 20, type: Boolean, read: InvestmentAccountInfo.prototype.getSupportsChecking, write: InvestmentAccountInfo.prototype.setSupportsChecking });
            Element_add_12.Element_add(InvestmentAccountInfo, { name: "SVCSTATUS", required: true, order: 30, type: String, read: InvestmentAccountInfo.prototype.getActivationStatus, write: InvestmentAccountInfo.prototype.setActivationStatus });
            Element_add_12.Element_add(InvestmentAccountInfo, { name: "INVACCTTYPE", order: 40, type: String, read: InvestmentAccountInfo.prototype.getInvestmentAccountType, write: InvestmentAccountInfo.prototype.setInvestmentAccountType });
            Element_add_12.Element_add(InvestmentAccountInfo, { name: "OPTIONLEVEL", order: 50, type: String, read: InvestmentAccountInfo.prototype.getOptionLevel, write: InvestmentAccountInfo.prototype.setOptionLevel });
        }
    };
});
System.register("domain/data/signup/AccountProfile", ["domain/data/banking/BankAccountInfo", "domain/data/creditcard/CreditCardAccountInfo", "domain/data/investment/accounts/InvestmentAccountInfo", "OFXException", "meta/Aggregate_add", "meta/Element_add", "meta/ChildAggregate_add"], function (exports_53, context_53) {
    "use strict";
    var BankAccountInfo_1, CreditCardAccountInfo_1, InvestmentAccountInfo_1, OFXException_7, Aggregate_Add_12, Element_add_13, ChildAggregate_add_6, AccountProfile;
    var __moduleName = context_53 && context_53.id;
    return {
        setters: [
            function (BankAccountInfo_1_1) {
                BankAccountInfo_1 = BankAccountInfo_1_1;
            },
            function (CreditCardAccountInfo_1_1) {
                CreditCardAccountInfo_1 = CreditCardAccountInfo_1_1;
            },
            function (InvestmentAccountInfo_1_1) {
                InvestmentAccountInfo_1 = InvestmentAccountInfo_1_1;
            },
            function (OFXException_7_1) {
                OFXException_7 = OFXException_7_1;
            },
            function (Aggregate_Add_12_1) {
                Aggregate_Add_12 = Aggregate_Add_12_1;
            },
            function (Element_add_13_1) {
                Element_add_13 = Element_add_13_1;
            },
            function (ChildAggregate_add_6_1) {
                ChildAggregate_add_6 = ChildAggregate_add_6_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            AccountProfile = /** @class */ (function () {
                function AccountProfile() {
                }
                /**
                 * Description of the account.
                 *
                 * @return The description of the account.
                 */
                AccountProfile.prototype.getDescription = function () {
                    return this.description;
                };
                /**
                 * The description of the account.
                 *
                 * @param description The description of the account.
                 */
                AccountProfile.prototype.setDescription = function (description) {
                    this.description = description;
                };
                /**
                 * Phone number for the account.
                 *
                 * @return Phone number for the account.
                 */
                AccountProfile.prototype.getPhone = function () {
                    return this.phone;
                };
                /**
                 * Phone number for the account.
                 *
                 * @param phone Phone number for the account.
                 */
                AccountProfile.prototype.setPhone = function (phone) {
                    this.phone = phone;
                };
                /**
                 * Account specifics.
                 *
                 * @return Account specifics.
                 */
                AccountProfile.prototype.getSpecifics = function () {
                    if (this.getBankSpecifics() != null && this.getCreditCardSpecifics() != null) {
                        throw new OFXException_7.OFXException("Only one account specifics aggregate can be set at a time.");
                    }
                    else if (this.getBankSpecifics() != null) {
                        return this.getBankSpecifics();
                    }
                    else if (this.getInvestmentSpecifics() != null) {
                        return this.getInvestmentSpecifics();
                    }
                    else {
                        return this.getCreditCardSpecifics();
                    }
                };
                /**
                 * Account specifics.
                 *
                 * @param specifics Account specifics.
                 */
                AccountProfile.prototype.setSpecifics = function (specifics) {
                    if (specifics instanceof BankAccountInfo_1.BankAccountInfo) {
                        this.setBankSpecifics(specifics);
                    }
                    else if (specifics instanceof CreditCardAccountInfo_1.CreditCardAccountInfo) {
                        this.setCreditCardSpecifics(specifics);
                    }
                    else if (specifics instanceof InvestmentAccountInfo_1.InvestmentAccountInfo) {
                        this.setInvestmentSpecifics(specifics);
                    }
                    else {
                        throw new OFXException_7.OFXException("Unknown specifics type: " + specifics);
                    }
                };
                /**
                 * Bank-specific info.
                 *
                 * @return Bank-specific info.
                 */
                AccountProfile.prototype.getBankSpecifics = function () {
                    return this.bankSpecifics;
                };
                /**
                 * Bank-specific info.
                 *
                 * @param bankSpecifics Bank-specific info.
                 */
                AccountProfile.prototype.setBankSpecifics = function (bankSpecifics) {
                    this.creditCardSpecifics = null;
                    this.investSpecifics = null;
                    this.bankSpecifics = bankSpecifics;
                };
                /**
                 * Credit-card account info.
                 *
                 * @return Credit-card account info.
                 */
                AccountProfile.prototype.getCreditCardSpecifics = function () {
                    return this.creditCardSpecifics;
                };
                /**
                 * Credit-card account info.
                 *
                 * @param creditCardSpecifics Credit-card account info.
                 */
                AccountProfile.prototype.setCreditCardSpecifics = function (creditCardSpecifics) {
                    this.bankSpecifics = null;
                    this.investSpecifics = null;
                    this.creditCardSpecifics = creditCardSpecifics;
                };
                /**
                 * Investment account info.
                 *
                 * @return Investment account info.
                 */
                AccountProfile.prototype.getInvestmentSpecifics = function () {
                    return this.investSpecifics;
                };
                /**
                 * Investment account info.
                 *
                 * @param investSpecifics Investment account info.
                 */
                AccountProfile.prototype.setInvestmentSpecifics = function (investSpecifics) {
                    this.bankSpecifics = null;
                    this.creditCardSpecifics = null;
                    this.investSpecifics = investSpecifics;
                };
                return AccountProfile;
            }());
            exports_53("AccountProfile", AccountProfile);
            Aggregate_Add_12.Aggregate_add(AccountProfile, "ACCTINFO");
            Element_add_13.Element_add(AccountProfile, { name: "DESC", order: 0, type: String, read: AccountProfile.prototype.getDescription, write: AccountProfile.prototype.setDescription });
            Element_add_13.Element_add(AccountProfile, { name: "PHONE", order: 10, type: String, read: AccountProfile.prototype.getPhone, write: AccountProfile.prototype.setPhone });
            ChildAggregate_add_6.ChildAggregate_add(AccountProfile, { order: 20, type: BankAccountInfo_1.BankAccountInfo, read: AccountProfile.prototype.getBankSpecifics, write: AccountProfile.prototype.setBankSpecifics });
            ChildAggregate_add_6.ChildAggregate_add(AccountProfile, { order: 30, type: CreditCardAccountInfo_1.CreditCardAccountInfo, read: AccountProfile.prototype.getCreditCardSpecifics, write: AccountProfile.prototype.setCreditCardSpecifics });
            ChildAggregate_add_6.ChildAggregate_add(AccountProfile, { order: 40, type: InvestmentAccountInfo_1.InvestmentAccountInfo, read: AccountProfile.prototype.getInvestmentSpecifics, write: AccountProfile.prototype.setInvestmentSpecifics });
        }
    };
});
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("domain/data/ResponseMessage", [], function (exports_54, context_54) {
    "use strict";
    var ResponseMessage;
    var __moduleName = context_54 && context_54.id;
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2008 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
             * A message applicable to a response message set.
             *
             * @author Ryan Heaton
             */
            ResponseMessage = /** @class */ (function () {
                function ResponseMessage() {
                }
                return ResponseMessage;
            }());
            exports_54("ResponseMessage", ResponseMessage);
        }
    };
});
System.register("domain/data/common/StatementResponse", ["domain/data/ResponseMessage", "domain/data/common/TransactionList", "domain/data/common/BalanceInfo", "meta/Element_add", "meta/ChildAggregate_add"], function (exports_55, context_55) {
    "use strict";
    var ResponseMessage_1, TransactionList_1, BalanceInfo_1, Element_add_14, ChildAggregate_add_7, StatementResponse;
    var __moduleName = context_55 && context_55.id;
    return {
        setters: [
            function (ResponseMessage_1_1) {
                ResponseMessage_1 = ResponseMessage_1_1;
            },
            function (TransactionList_1_1) {
                TransactionList_1 = TransactionList_1_1;
            },
            function (BalanceInfo_1_1) {
                BalanceInfo_1 = BalanceInfo_1_1;
            },
            function (Element_add_14_1) {
                Element_add_14 = Element_add_14_1;
            },
            function (ChildAggregate_add_7_1) {
                ChildAggregate_add_7 = ChildAggregate_add_7_1;
            }
        ],
        execute: function () {
            //import java.util.Locale;
            /**
             * @author Ryan Heaton
             */
            StatementResponse = /** @class */ (function (_super) {
                __extends(StatementResponse, _super);
                function StatementResponse() {
                    var _this = _super.call(this) || this;
                    _this.currencyCode = "USD"; //java.util.Currency.getInstance(Locale.US).getCurrencyCode().toUpperCase();
                    return _this;
                }
                /**
                 * The currency code.
                 *
                 * @return The currency code.
                 * @see java.util.Currency#getCurrencyCode()
                 */
                StatementResponse.prototype.getCurrencyCode = function () {
                    return this.currencyCode;
                };
                /**
                 * The currency code.
                 *
                 * @param currencyCode The currency code.
                 */
                StatementResponse.prototype.setCurrencyCode = function (currencyCode) {
                    this.currencyCode = currencyCode;
                };
                /**
                 * The transaction list.
                 *
                 * @return The transaction list.
                 */
                StatementResponse.prototype.getTransactionList = function () {
                    return this.transactionList;
                };
                /**
                 * The transaction list.
                 *
                 * @param transactionList The transaction list.
                 */
                StatementResponse.prototype.setTransactionList = function (transactionList) {
                    this.transactionList = transactionList;
                };
                /**
                 * The ledger balance.
                 *
                 * @return The ledger balance.
                 */
                StatementResponse.prototype.getLedgerBalance = function () {
                    return this.ledgerBalance;
                };
                /**
                 * The ledger balance.
                 *
                 * @param ledgerBalance The ledger balance.
                 */
                StatementResponse.prototype.setLedgerBalance = function (ledgerBalance) {
                    this.ledgerBalance = ledgerBalance;
                };
                /**
                 * The available balance.
                 *
                 * @return The available balance.
                 */
                StatementResponse.prototype.getAvailableBalance = function () {
                    return this.availableBalance;
                };
                /**
                 * The available balance.
                 *
                 * @param availableBalance The available balance.
                 */
                StatementResponse.prototype.setAvailableBalance = function (availableBalance) {
                    this.availableBalance = availableBalance;
                };
                /**
                 * Marketing information. (?)
                 *
                 * @return Marketing information.
                 */
                StatementResponse.prototype.getMarketingInfo = function () {
                    return this.marketingInfo;
                };
                /**
                 * Marketing information. (?)
                 *
                 * @param marketingInfo Marketing information.
                 */
                StatementResponse.prototype.setMarketingInfo = function (marketingInfo) {
                    this.marketingInfo = marketingInfo;
                };
                return StatementResponse;
            }(ResponseMessage_1.ResponseMessage));
            exports_55("StatementResponse", StatementResponse);
            Element_add_14.Element_add(StatementResponse, { name: "CURDEF", required: true, order: 0, type: String, read: StatementResponse.prototype.getCurrencyCode, write: StatementResponse.prototype.setCurrencyCode });
            ChildAggregate_add_7.ChildAggregate_add(StatementResponse, { order: 20, type: TransactionList_1.TransactionList, read: StatementResponse.prototype.getTransactionList, write: StatementResponse.prototype.setTransactionList });
            ChildAggregate_add_7.ChildAggregate_add(StatementResponse, { name: "LEDGERBAL", order: 30, type: BalanceInfo_1.BalanceInfo, read: StatementResponse.prototype.getLedgerBalance, write: StatementResponse.prototype.setLedgerBalance });
            ChildAggregate_add_7.ChildAggregate_add(StatementResponse, { name: "AVAILBAL", order: 40, type: BalanceInfo_1.BalanceInfo, read: StatementResponse.prototype.getAvailableBalance, write: StatementResponse.prototype.setAvailableBalance });
            Element_add_14.Element_add(StatementResponse, { name: "MKTGINFO", order: 50, type: String, read: StatementResponse.prototype.getMarketingInfo, write: StatementResponse.prototype.setMarketingInfo });
        }
    };
});
System.register("domain/data/investment/transactions/InvestmentTransaction", ["meta/Aggregate_add", "meta/Element_add"], function (exports_56, context_56) {
    "use strict";
    var Aggregate_Add_13, Element_add_15, InvestmentTransaction;
    var __moduleName = context_56 && context_56.id;
    return {
        setters: [
            function (Aggregate_Add_13_1) {
                Aggregate_Add_13 = Aggregate_Add_13_1;
            },
            function (Element_add_15_1) {
                Element_add_15 = Element_add_15_1;
            }
        ],
        execute: function () {
            /**
             * Investment transaction aggregate ("INVTRAN").
             * @see "Section 13.9.2.4.1, OFX Spec"
             *
             * @author Jon Perlow
             */
            InvestmentTransaction = /** @class */ (function () {
                function InvestmentTransaction() {
                }
                /**
                 * Gets the unique financial institution assigned transaction id. This is a
                 * required field according to the OFX spec.
                 * @see "Section 13.9.2.4.1, OFX Spec"
                 *
                 * @return the financial institution asssigned transaction id
                 */
                InvestmentTransaction.prototype.getTransactionId = function () {
                    return this.transactionId;
                };
                /**
                 * Sets the unique financial institution assigned transaction id. This is a
                 * required field according to the OFX spec.
                 * @see "Section 13.9.2.4.1, OFX Spec"
                 *
                 * @param transactionId the financial institution asssigned transaction id
                 */
                InvestmentTransaction.prototype.setTransactionId = function (transactionId) {
                    this.transactionId = transactionId;
                };
                /**
                 * Gets the server assigned transaction id. This is an optional field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.4.1, OFX Spec"
                 *
                 * @return the server assigned transaction id
                 */
                InvestmentTransaction.prototype.getServerId = function () {
                    return this.serverId;
                };
                /**
                 * Sets the server assigned transaction id. This is an optional field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.4.1, OFX Spec"
                 *
                 * @param serverId the server assigned transaction id
                 */
                InvestmentTransaction.prototype.setServerId = function (serverId) {
                    this.serverId = serverId;
                };
                /**
                 * Gets the trade date of the transaction. For stock splits, this is the
                 * day of record. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.4.1, OFX Spec"
                 *
                 * @return the trade date
                 */
                InvestmentTransaction.prototype.getTradeDate = function () {
                    return this.tradeDate;
                };
                /**
                 * Sets the trade date of the transaction. For stock splits, this is the
                 * day of record. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.4.1, OFX Spec"
                 *
                 * @param tradeDate the trade date
                 */
                InvestmentTransaction.prototype.setTradeDate = function (tradeDate) {
                    this.tradeDate = tradeDate;
                };
                /**
                 * Gets the settlement date of the transaction. For stock splits, this is the
                 * day of of execution. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.1, OFX Spec"
                 *
                 * @return the trade date
                 */
                InvestmentTransaction.prototype.getSettlementDate = function () {
                    return this.settlementDate;
                };
                /**
                 * Sets the settlement date of the transaction. For stock splits, this is the
                 * day of of execution. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.1, OFX Spec"
                 *
                 * @param settlementDate the trade date
                 */
                InvestmentTransaction.prototype.setSettlementDate = function (settlementDate) {
                    this.settlementDate = settlementDate;
                };
                /**
                 * For a reveral transaction, gets the financial institution assigned
                 * transaction id for the transaction being revesed.
                 * @see "Section 13.9.2.4.1, OFX Spec"
                 *
                 * @return the transaction id of the transaction being reversed
                 */
                InvestmentTransaction.prototype.getReversalTransactionId = function () {
                    return this.reversalTransactionId;
                };
                /**
                 * For a reveral transaction, gets the financial institution assigned
                 * transaction id for the transaction being revesed.
                 * @see "Section 13.9.2.4.1, OFX Spec"
                 *
                 * @param reversalTransactionId the transaction id of the transaction being reversed
                 */
                InvestmentTransaction.prototype.setReversalTransactionId = function (reversalTransactionId) {
                    this.reversalTransactionId = reversalTransactionId;
                };
                /**
                 * Gets the memo associated with the transaction. This is an optional field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.4.1, OFX Spec"
                 *
                 * @return the memo
                 */
                InvestmentTransaction.prototype.getMemo = function () {
                    return this.memo;
                };
                /**
                 * Sets the memo associated with the transaction. This is an optional field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.4.1, OFX Spec"
                 *
                 * @param memo the memo
                 */
                InvestmentTransaction.prototype.setMemo = function (memo) {
                    this.memo = memo;
                };
                return InvestmentTransaction;
            }());
            exports_56("InvestmentTransaction", InvestmentTransaction);
            Aggregate_Add_13.Aggregate_add(InvestmentTransaction, "INVTRAN");
            Element_add_15.Element_add(InvestmentTransaction, { name: "FITID", required: true, order: 0, type: String, read: InvestmentTransaction.prototype.getTransactionId, write: InvestmentTransaction.prototype.setTransactionId });
            Element_add_15.Element_add(InvestmentTransaction, { name: "SRVRTID", order: 10, type: String, read: InvestmentTransaction.prototype.getServerId, write: InvestmentTransaction.prototype.setServerId });
            Element_add_15.Element_add(InvestmentTransaction, { name: "DTTRADE", required: true, order: 20, type: Date, read: InvestmentTransaction.prototype.getTradeDate, write: InvestmentTransaction.prototype.setTradeDate });
            Element_add_15.Element_add(InvestmentTransaction, { name: "DTSETTLE", order: 30, type: Date, read: InvestmentTransaction.prototype.getSettlementDate, write: InvestmentTransaction.prototype.setSettlementDate });
            Element_add_15.Element_add(InvestmentTransaction, { name: "REVERSALFITID", order: 40, type: String, read: InvestmentTransaction.prototype.getReversalTransactionId, write: InvestmentTransaction.prototype.setReversalTransactionId });
            Element_add_15.Element_add(InvestmentTransaction, { name: "MEMO", order: 50, type: String, read: InvestmentTransaction.prototype.getMemo, write: InvestmentTransaction.prototype.setMemo });
        }
    };
});
System.register("domain/data/investment/transactions/BaseInvestmentTransaction", [], function (exports_57, context_57) {
    "use strict";
    var BaseInvestmentTransaction;
    var __moduleName = context_57 && context_57.id;
    return {
        setters: [],
        execute: function () {
            /**
             * Base class for all investment transactions.
             * <br>
             * This class exposes a read-only view of the flattened aggregates that are
             * common to all investment transactions as a convenience to application
             * developers who may not find the ofx aggregation model intuitive.
             *
             * @author Jon Perlow
             */
            BaseInvestmentTransaction = /** @class */ (function () {
                function BaseInvestmentTransaction(transactionType) {
                    this.transactionType = transactionType;
                }
                /**
                 * Gets the type of transaction.
                 *
                 * @return the type of transaction
                 */
                BaseInvestmentTransaction.prototype.getTransactionType = function () {
                    return this.transactionType;
                };
                /**
                 * Gets the unique financial institution assigned transaction id. This is a
                 * required field according to the OFX spec.
                 * @see "Section 13.9.2.4.1, OFX Spec"
                 *
                 * @return the financial institution asssigned transaction id
                 */
                BaseInvestmentTransaction.prototype.getTransactionId = function () {
                    return this.getInvestmentTransaction().getTransactionId();
                };
                /**
                 * Gets the server assigned transaction id. This is an optional field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.4.1, OFX Spec"
                 *
                 * @return the server assigned transaction id
                 */
                BaseInvestmentTransaction.prototype.getServerId = function () {
                    return this.getInvestmentTransaction().getServerId();
                };
                /**
                 * Gets the trade date of the transaction. For stock splits, this is the
                 * day of record. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.4.1, OFX Spec"
                 *
                 * @return the trade date
                 */
                BaseInvestmentTransaction.prototype.getTradeDate = function () {
                    return this.getInvestmentTransaction().getTradeDate();
                };
                /**
                 * Gets the settlement date of the transaction. For stock splits, this is the
                 * day of of execution. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.1, OFX Spec"
                 *
                 * @return the trade date
                 */
                BaseInvestmentTransaction.prototype.getSettlementDate = function () {
                    return this.getInvestmentTransaction().getSettlementDate();
                };
                /**
                 * For a reveral transaction, gets the financial institution assigned
                 * transaction id for the transaction being revesed.
                 * @see "Section 13.9.2.4.1, OFX Spec"
                 *
                 * @return the transaction id of the transaction being reversed
                 */
                BaseInvestmentTransaction.prototype.getReversalTransactionId = function () {
                    return this.getInvestmentTransaction().getReversalTransactionId();
                };
                /**
                 * Gets the memo associated with the transaction. This is an optional field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.4.1, OFX Spec"
                 *
                 * @return the memo
                 */
                BaseInvestmentTransaction.prototype.getMemo = function () {
                    return this.getInvestmentTransaction().getMemo();
                };
                return BaseInvestmentTransaction;
            }());
            exports_57("BaseInvestmentTransaction", BaseInvestmentTransaction);
        }
    };
});
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("domain/data/investment/accounts/SubAccountType", [], function (exports_58, context_58) {
    "use strict";
    var SubAccountType;
    var __moduleName = context_58 && context_58.id;
    function SubAccountType_fromOfx(ofxVal) {
        if ("CASH" === ofxVal) {
            return SubAccountType.CASH;
        }
        else if ("MARGIN" === ofxVal) {
            return SubAccountType.MARGIN;
        }
        else if ("SHORT" === ofxVal) {
            return SubAccountType.SHORT;
        }
        else if ("OTHER" === ofxVal) {
            return SubAccountType.OTHER;
        }
        else {
            return null;
        }
    }
    exports_58("SubAccountType_fromOfx", SubAccountType_fromOfx);
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2010 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
             * Types of well-known sub-accounts.
             * @see "Section 13.9.2.4.2, OFX Spec"
             *
             * @author Jon Perlow
             */
            (function (SubAccountType) {
                SubAccountType[SubAccountType["CASH"] = 0] = "CASH";
                SubAccountType[SubAccountType["MARGIN"] = 1] = "MARGIN";
                SubAccountType[SubAccountType["SHORT"] = 2] = "SHORT";
                SubAccountType[SubAccountType["OTHER"] = 3] = "OTHER";
            })(SubAccountType || (SubAccountType = {}));
            exports_58("SubAccountType", SubAccountType);
        }
    };
});
System.register("domain/data/investment/transactions/InvestmentBankTransaction", ["domain/data/common/Transaction", "domain/data/investment/accounts/SubAccountType", "meta/Aggregate_add", "meta/ChildAggregate_add", "meta/Element_add"], function (exports_59, context_59) {
    "use strict";
    var Transaction_2, SubAccountType_1, Aggregate_Add_14, ChildAggregate_add_8, Element_add_16, InvestmentBankTransaction;
    var __moduleName = context_59 && context_59.id;
    return {
        setters: [
            function (Transaction_2_1) {
                Transaction_2 = Transaction_2_1;
            },
            function (SubAccountType_1_1) {
                SubAccountType_1 = SubAccountType_1_1;
            },
            function (Aggregate_Add_14_1) {
                Aggregate_Add_14 = Aggregate_Add_14_1;
            },
            function (ChildAggregate_add_8_1) {
                ChildAggregate_add_8 = ChildAggregate_add_8_1;
            },
            function (Element_add_16_1) {
                Element_add_16 = Element_add_16_1;
            }
        ],
        execute: function () {
            /**
             * Bank transactions that are part of an investment account statement. Wraps a {@link Transaction}.
             * @see "Section 13.9.2.3, OFX Spec"
             *
             * @author Jon Perlow
             */
            InvestmentBankTransaction = /** @class */ (function () {
                function InvestmentBankTransaction() {
                }
                /**
                 * Gets the wrapped transaction aggregate.
                 * @return the wrapped transaction
                 */
                InvestmentBankTransaction.prototype.getTransaction = function () {
                    return this.transaction;
                };
                /**
                 * Sets the wrapped transaction aggregate.
                 * @param transaction the wrapped transaction
                 */
                InvestmentBankTransaction.prototype.setTransaction = function (transaction) {
                    this.transaction = transaction;
                };
                /**
                 * Gets the sub account type that the security is from (e.g. CASH, MARGIN, SHORT, OTHER).
                 * @see "Section 13.9.2.4.2, OFX Spec"
                 *
                 * @return the sub account fund for the transaction
                 */
                InvestmentBankTransaction.prototype.getSubAccountFund = function () {
                    return this.subAccountFund;
                };
                /**
                 * Sets the sub account type that the security is from (e.g. CASH, MARGIN, SHORT, OTHER).
                 * @see "Section 13.9.2.4.2, OFX Spec"
                 *
                 * @param subAccountFund the sub account fund for the transaction
                 */
                InvestmentBankTransaction.prototype.setSubAccountFund = function (subAccountFund) {
                    this.subAccountFund = subAccountFund;
                };
                /**
                 * Gets the result of getSubAccountFund as one of the well-known types.
                 *
                 * @return the type of null if it wasn't one of the well known types
                 */
                InvestmentBankTransaction.prototype.getSubAccountFundEnum = function () {
                    return SubAccountType_1.SubAccountType_fromOfx(this.getSubAccountFund());
                };
                return InvestmentBankTransaction;
            }());
            exports_59("InvestmentBankTransaction", InvestmentBankTransaction);
            Aggregate_Add_14.Aggregate_add(InvestmentBankTransaction, "INVBANKTRAN");
            ChildAggregate_add_8.ChildAggregate_add(InvestmentBankTransaction, { order: 10, type: Transaction_2.Transaction, read: InvestmentBankTransaction.prototype.getTransaction, write: InvestmentBankTransaction.prototype.setTransaction });
            Element_add_16.Element_add(InvestmentBankTransaction, { name: "SUBACCTFUND", required: true, order: 20, type: String, read: InvestmentBankTransaction.prototype.getSubAccountFund, write: InvestmentBankTransaction.prototype.setSubAccountFund });
        }
    };
});
System.register("domain/data/investment/transactions/InvestmentTransactionList", ["domain/data/investment/transactions/BaseInvestmentTransaction", "domain/data/investment/transactions/InvestmentBankTransaction", "meta/Aggregate_add", "meta/Element_add", "meta/ChildAggregate_add"], function (exports_60, context_60) {
    "use strict";
    var BaseInvestmentTransaction_1, InvestmentBankTransaction_1, Aggregate_Add_15, Element_add_17, ChildAggregate_add_9, InvestmentTransactionList;
    var __moduleName = context_60 && context_60.id;
    return {
        setters: [
            function (BaseInvestmentTransaction_1_1) {
                BaseInvestmentTransaction_1 = BaseInvestmentTransaction_1_1;
            },
            function (InvestmentBankTransaction_1_1) {
                InvestmentBankTransaction_1 = InvestmentBankTransaction_1_1;
            },
            function (Aggregate_Add_15_1) {
                Aggregate_Add_15 = Aggregate_Add_15_1;
            },
            function (Element_add_17_1) {
                Element_add_17 = Element_add_17_1;
            },
            function (ChildAggregate_add_9_1) {
                ChildAggregate_add_9 = ChildAggregate_add_9_1;
            }
        ],
        execute: function () {
            /**
             * The transaction list aggregate.
             * @see "Section 13.9.1.2, OFX Spec"
             *
             * @author Jon Perlow
             */
            InvestmentTransactionList = /** @class */ (function () {
                function InvestmentTransactionList() {
                }
                /**
                 * Gets the start date. This is a required field according to the OFX spec.
                 *
                 * @return The start date
                 */
                InvestmentTransactionList.prototype.getStart = function () {
                    return this.start;
                };
                /**
                 * Sets the start date. This is a required field according to the OFX spec.
                 *
                 * @param start The start date
                 */
                InvestmentTransactionList.prototype.setStart = function (start) {
                    this.start = start;
                };
                /**
                 * Gets the end date. This is a required field according to the OFX spec.
                 *
                 * @return he end date
                 */
                InvestmentTransactionList.prototype.getEnd = function () {
                    return this.end;
                };
                /**
                 * Sets the end date. This is a required field according to the OFX spec.
                 *
                 * @param end the end date
                 */
                InvestmentTransactionList.prototype.setEnd = function (end) {
                    this.end = end;
                };
                /**
                 * Gets the investment transaction list. This is a heterogenous list of different types of
                 * transactions returned in the order the brokerage provides them.
                 *
                 * @return the investment transaction list
                 */
                InvestmentTransactionList.prototype.getInvestmentTransactions = function () {
                    return this.transactions;
                };
                /**
                 * Sets the investment transaction list. This is a heterogenous list of different types of
                 * transactions returned in the order the brokerage provides them.
                 *
                 * @param transactions the investment transaction list
                 */
                InvestmentTransactionList.prototype.setInvestmentTransactions = function (transactions) {
                    this.transactions = transactions;
                };
                /**
                 * Gets the bank transaction list.
                 *
                 * @return the bank transaction list
                 */
                InvestmentTransactionList.prototype.getBankTransactions = function () {
                    return this.bankTransactions;
                };
                /**
                 * Sets the bank transaction list.
                 *
                 * @param bankTransactions the bank transaction list
                 */
                InvestmentTransactionList.prototype.setBankTransactions = function (bankTransactions) {
                    this.bankTransactions = bankTransactions;
                };
                return InvestmentTransactionList;
            }());
            exports_60("InvestmentTransactionList", InvestmentTransactionList);
            Aggregate_Add_15.Aggregate_add(InvestmentTransactionList, "INVTRANLIST");
            Element_add_17.Element_add(InvestmentTransactionList, { name: "DTSTART", required: true, order: 0, type: Date, read: InvestmentTransactionList.prototype.getStart, write: InvestmentTransactionList.prototype.setStart });
            Element_add_17.Element_add(InvestmentTransactionList, { name: "DTEND", required: true, order: 10, type: Date, read: InvestmentTransactionList.prototype.getEnd, write: InvestmentTransactionList.prototype.setEnd });
            ChildAggregate_add_9.ChildAggregate_add(InvestmentTransactionList, { order: 20, type: Array, collectionEntryType: BaseInvestmentTransaction_1.BaseInvestmentTransaction, read: InvestmentTransactionList.prototype.getInvestmentTransactions, write: InvestmentTransactionList.prototype.setInvestmentTransactions });
            ChildAggregate_add_9.ChildAggregate_add(InvestmentTransactionList, { order: 30, type: Array, collectionEntryType: InvestmentBankTransaction_1.InvestmentBankTransaction, read: InvestmentTransactionList.prototype.getBankTransactions, write: InvestmentTransactionList.prototype.setBankTransactions });
        }
    };
});
System.register("domain/data/seclist/SecurityId", ["meta/Aggregate_add", "meta/Element_add"], function (exports_61, context_61) {
    "use strict";
    var Aggregate_Add_16, Element_add_18, SecurityId;
    var __moduleName = context_61 && context_61.id;
    return {
        setters: [
            function (Aggregate_Add_16_1) {
                Aggregate_Add_16 = Aggregate_Add_16_1;
            },
            function (Element_add_18_1) {
                Element_add_18 = Element_add_18_1;
            }
        ],
        execute: function () {
            /**
             * Identifier for a security.
             * @see "Section 13.8.1, OFX Spec"
             *
             * @author Jon Perlow
             */
            SecurityId = /** @class */ (function () {
                function SecurityId() {
                }
                /**
                 * Gets the unique id for the security. This is a required field according to the OFX spec.
                 *
                 * @return the unique id
                 */
                SecurityId.prototype.getUniqueId = function () {
                    return this.uniqueId;
                };
                /**
                 * Sets the unique id for the security. This is a required field according to the OFX spec.
                 *
                 * @param uniqueId the unique id
                 */
                SecurityId.prototype.setUniqueId = function (uniqueId) {
                    this.uniqueId = uniqueId;
                };
                /**
                 * Gets the type of unique id.
                 *
                 * @return the type of unique id
                 */
                SecurityId.prototype.getUniqueIdType = function () {
                    return this.uniqueIdType;
                };
                /**
                 * Sets the type of unique id.
                 *
                 * @param uniqueIdType the type of unique id
                 */
                SecurityId.prototype.setUniqueIdType = function (uniqueIdType) {
                    this.uniqueIdType = uniqueIdType;
                };
                return SecurityId;
            }());
            exports_61("SecurityId", SecurityId);
            Aggregate_Add_16.Aggregate_add(SecurityId, "SECID");
            Element_add_18.Element_add(SecurityId, { name: "UNIQUEID", required: true, order: 10, type: String, read: SecurityId.prototype.getUniqueId, write: SecurityId.prototype.setUniqueId });
            Element_add_18.Element_add(SecurityId, { name: "UNIQUEIDTYPE", required: true, order: 20, type: String, read: SecurityId.prototype.getUniqueIdType, write: SecurityId.prototype.setUniqueIdType });
        }
    };
});
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("domain/data/investment/positions/PositionType", [], function (exports_62, context_62) {
    "use strict";
    var PositionType;
    var __moduleName = context_62 && context_62.id;
    function PositionType_fromOfx(ofxVal) {
        if ("LONG" === ofxVal) {
            return PositionType.LONG;
        }
        else if ("SHORT" === ofxVal) {
            return PositionType.SHORT;
        }
        else {
            return null;
        }
    }
    exports_62("PositionType_fromOfx", PositionType_fromOfx);
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2010 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
             * Type of position.
             * @see "Section 13.9.2.4.4, OFX Spec"
             *
             * @author Jon Perlow
             */
            (function (PositionType) {
                PositionType[PositionType["LONG"] = 0] = "LONG";
                PositionType[PositionType["SHORT"] = 1] = "SHORT";
            })(PositionType || (PositionType = {}));
            exports_62("PositionType", PositionType);
        }
    };
});
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("domain/data/investment/positions/Inv401KSource", [], function (exports_63, context_63) {
    "use strict";
    var Inv401KSource, ofxMapping;
    var __moduleName = context_63 && context_63.id;
    function Inv401KSource_fromOfx(ofxVal) {
        return ofxVal == null ? null : ofxMapping[ofxVal];
    }
    exports_63("Inv401KSource_fromOfx", Inv401KSource_fromOfx);
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2010 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
             * Types of 401(k) sources.
             * @see "Section 13.9.2.4.2, OFX Spec"
             *
             * @author Jon Perlow
             */
            (function (Inv401KSource) {
                Inv401KSource[Inv401KSource["PRETAX"] = 0] = "PRETAX";
                Inv401KSource[Inv401KSource["AFTER_TAX"] = 1] = "AFTER_TAX";
                Inv401KSource[Inv401KSource["MATCH"] = 2] = "MATCH";
                Inv401KSource[Inv401KSource["PROFIT_SHARING"] = 3] = "PROFIT_SHARING";
                Inv401KSource[Inv401KSource["ROLLOVER"] = 4] = "ROLLOVER";
                Inv401KSource[Inv401KSource["OTHER_VEST"] = 5] = "OTHER_VEST";
                Inv401KSource[Inv401KSource["OTHER_NONVEST"] = 6] = "OTHER_NONVEST";
            })(Inv401KSource || (Inv401KSource = {}));
            exports_63("Inv401KSource", Inv401KSource);
            ofxMapping = {
                "PRETAX": Inv401KSource.PRETAX,
                "AFTERTAX": Inv401KSource.AFTER_TAX,
                "MATCH": Inv401KSource.MATCH,
                "PROFITSHARING": Inv401KSource.PROFIT_SHARING,
                "ROLLOVER": Inv401KSource.ROLLOVER,
                "OTHERVEST": Inv401KSource.OTHER_VEST,
                "OTHERNONVEST": Inv401KSource.OTHER_NONVEST,
            };
        }
    };
});
System.register("domain/data/investment/positions/InvestmentPosition", ["domain/data/seclist/SecurityId", "domain/data/investment/accounts/SubAccountType", "domain/data/investment/positions/PositionType", "domain/data/investment/positions/Inv401KSource", "meta/Aggregate_add", "meta/ChildAggregate_add", "meta/Element_add"], function (exports_64, context_64) {
    "use strict";
    var SecurityId_1, SubAccountType_2, PositionType_1, Inv401KSource_1, Aggregate_Add_17, ChildAggregate_add_10, Element_add_19, InvestmentPosition;
    var __moduleName = context_64 && context_64.id;
    return {
        setters: [
            function (SecurityId_1_1) {
                SecurityId_1 = SecurityId_1_1;
            },
            function (SubAccountType_2_1) {
                SubAccountType_2 = SubAccountType_2_1;
            },
            function (PositionType_1_1) {
                PositionType_1 = PositionType_1_1;
            },
            function (Inv401KSource_1_1) {
                Inv401KSource_1 = Inv401KSource_1_1;
            },
            function (Aggregate_Add_17_1) {
                Aggregate_Add_17 = Aggregate_Add_17_1;
            },
            function (ChildAggregate_add_10_1) {
                ChildAggregate_add_10 = ChildAggregate_add_10_1;
            },
            function (Element_add_19_1) {
                Element_add_19 = Element_add_19_1;
            }
        ],
        execute: function () {
            /**
             * Class for the investment position aggregate.
             * @see "Section 13.9.2.6.1, OFX Spec"
             *
             * @author Jon Perlow
             */
            InvestmentPosition = /** @class */ (function () {
                function InvestmentPosition() {
                }
                /**
                 * Gets the security id for the position. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.6.1, OFX Spec"
                 *
                 * @return the security id for the position
                 */
                InvestmentPosition.prototype.getSecurityId = function () {
                    return this.securityId;
                };
                /**
                 * Sets the security id for the position. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.6.1, OFX Spec"
                 *
                 * @param securityId the security id for the position
                 */
                InvestmentPosition.prototype.setSecurityId = function (securityId) {
                    this.securityId = securityId;
                };
                /**
                 * Gets the sub-account type. One of "CASH", "MARGIN", "SHORT", "OTHER". This is a required field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.6.1, OFX Spec"
                 *
                 * @return the sub-account type
                 */
                InvestmentPosition.prototype.getHeldInAccount = function () {
                    return this.heldInAccount;
                };
                /**
                 * Sets the sub-account type. One of "CASH", "MARGIN", "SHORT", "OTHER". This is a required field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.6.1, OFX Spec"
                 *
                 * @param heldInAccount the sub-account type
                 */
                InvestmentPosition.prototype.setHeldInAccount = function (heldInAccount) {
                    this.heldInAccount = heldInAccount;
                };
                /**
                 * Gets the sub-account type as one of the well-known types.
                 * @see "Section 13.9.2.6.1, OFX Spec"
                 *
                 * @return the sub-account type or null if it's not one of the well-known types
                 */
                InvestmentPosition.prototype.getHeldInAccountEnum = function () {
                    return SubAccountType_2.SubAccountType_fromOfx(this.getHeldInAccount());
                };
                /**
                 * Gets the position type. One of SHORT or LONG. This is a required field according to the OFX
                 * spec.
                 * @see "Section 13.9.2.6.1, OFX Spec"
                 *
                 * @return the position type
                 */
                InvestmentPosition.prototype.getPositionType = function () {
                    return this.positionType;
                };
                /**
                 * Sets the position type. One of SHORT or LONG. This is a required field according to the OFX
                 * spec.
                 * @see "Section 13.9.2.6.1, OFX Spec"
                 *
                 * @param positionType the position type
                 */
                InvestmentPosition.prototype.setPositionType = function (positionType) {
                    this.positionType = positionType;
                };
                /**
                 * Gets the position type as one of the well-known types.
                 * @see "Section 13.9.2.6.1, OFX Spec"
                 *
                 * @return the position type or null if it's not one of the well-known types
                 */
                InvestmentPosition.prototype.getPositionTypeEnum = function () {
                    return PositionType_1.PositionType_fromOfx(this.getPositionType());
                };
                /**
                 * Gets the number of units in the position. For stocks, mutual funds, and others, this
                 * is the number of shares. For bonds, this is the face value. For options, this is the number of
                 * contacts. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.6.1, OFX Spec"
                 *
                 * @return the number of units in the position
                 */
                InvestmentPosition.prototype.getUnits = function () {
                    return this.units;
                };
                /**
                 * Sets the number of units in the position. For stocks, mutual funds, and others, this
                 * is the number of shares. For bonds, this is the face value. For options, this is the number of
                 * contacts. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.6.1, OFX Spec"
                 *
                 * @param units the number of units in the position
                 */
                InvestmentPosition.prototype.setUnits = function (units) {
                    this.units = units;
                };
                /**
                 * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
                 * share price. For bonds, this is the percentage of par. For options, this is the per share (not
                 * per contact) price. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.6.1, OFX Spec"
                 *
                 * @return the per unit price
                 */
                InvestmentPosition.prototype.getUnitPrice = function () {
                    return this.unitPrice;
                };
                /**
                 * Sets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
                 * share price. For bonds, this is the percentage of par. For options, this is the per share (not
                 * per contact) price. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.6.1, OFX Spec"
                 *
                 * @param unitPrice the per unit price
                 */
                InvestmentPosition.prototype.setUnitPrice = function (unitPrice) {
                    this.unitPrice = unitPrice;
                };
                /**
                 * Gets the market value of this position. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.6.1, OFX Spec"
                 *
                 * @return the market value of the position
                 */
                InvestmentPosition.prototype.getMarketValue = function () {
                    return this.marketValue;
                };
                /**
                 * Sets the market value of this position. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.6.1, OFX Spec"
                 *
                 * @param marketValue the market value of the position
                 */
                InvestmentPosition.prototype.setMarketValue = function (marketValue) {
                    this.marketValue = marketValue;
                };
                /**
                 * Gets the date and time of the unit price and market value. This is a required field according
                 * to the OFX spec.
                 * @see "Section 13.9.2.6.1, OFX Spec"
                 *
                 * @return the market value date
                 */
                InvestmentPosition.prototype.getMarketValueDate = function () {
                    return this.marketValueDate;
                };
                /**
                 * Sets the date and time of the unit price and market value. This is a required field according
                 * to the OFX spec.
                 * @see "Section 13.9.2.6.1, OFX Spec"
                 *
                 * @param marketValueDate the market value date
                 */
                InvestmentPosition.prototype.setMarketValueDate = function (marketValueDate) {
                    this.marketValueDate = marketValueDate;
                };
                /**
                 * Gets the currency code of the position. This is an optional field according to the OFX spec.
                 * If not present, it's the default currency of the account.
                 * @see "Section 13.9.2.6.1, OFX Spec"
                 *
                 * @return the currency code of the position or null for the default currency
                 */
                InvestmentPosition.prototype.getCurrencyCode = function () {
                    return this.currencyCode;
                };
                /**
                 * Sets the currency code of the position. This is an optional field according to the OFX spec.
                 * If not present, it's the default currency of the account.
                 * @see "Section 13.9.2.6.1, OFX Spec"
                 *
                 * @param currencyCode the currency code of the position or null for the default currency
                 */
                InvestmentPosition.prototype.setCurrencyCode = function (currencyCode) {
                    this.currencyCode = currencyCode;
                };
                /**
                 * Gets the memo associated with the position. This is an optional field according to the OFX
                 * spec.
                 * @see "Section 13.9.2.6.1, OFX Spec"
                 *
                 * @return the memo
                 */
                InvestmentPosition.prototype.getMemo = function () {
                    return this.memo;
                };
                /**
                 * Sets the memo associated with the position. This is an optional field according to the OFX
                 * spec.
                 * @see "Section 13.9.2.6.1, OFX Spec"
                 *
                 * @param memo the memo
                 */
                InvestmentPosition.prototype.setMemo = function (memo) {
                    this.memo = memo;
                };
                /**
                 * Gets the 401K source for the sale. Should be one of "PRETAX", "AFTERTAX", "MATCH",
                 * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the 401k source
                 */
                InvestmentPosition.prototype.get401kSource = function () {
                    return this.inv401kSource;
                };
                /**
                 * Sets the 401K source for the sale. Should be one of "PRETAX", "AFTERTAX", "MATCH",
                 * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param inv401kSource the 401k source
                 */
                InvestmentPosition.prototype.set401kSource = function (inv401kSource) {
                    this.inv401kSource = inv401kSource;
                };
                /**
                 * Gets the 401k source as one of the well-known types.
                 *
                 * @return the 401k source or null if it's not one of the well-known types
                 */
                InvestmentPosition.prototype.get401kSourceEnum = function () {
                    return Inv401KSource_1.Inv401KSource_fromOfx(this.get401kSource());
                };
                return InvestmentPosition;
            }());
            exports_64("InvestmentPosition", InvestmentPosition);
            Aggregate_Add_17.Aggregate_add(InvestmentPosition, "INVPOS");
            ChildAggregate_add_10.ChildAggregate_add(InvestmentPosition, { required: true, order: 10, type: SecurityId_1.SecurityId, read: InvestmentPosition.prototype.getSecurityId, write: InvestmentPosition.prototype.setSecurityId });
            Element_add_19.Element_add(InvestmentPosition, { name: "HELDINACCT", required: true, order: 20, type: String, read: InvestmentPosition.prototype.getHeldInAccount, write: InvestmentPosition.prototype.setHeldInAccount });
            Element_add_19.Element_add(InvestmentPosition, { name: "POSTYPE", required: true, order: 30, type: String, read: InvestmentPosition.prototype.getPositionType, write: InvestmentPosition.prototype.setPositionType });
            Element_add_19.Element_add(InvestmentPosition, { name: "UNITS", required: true, order: 40, type: Number, read: InvestmentPosition.prototype.getUnits, write: InvestmentPosition.prototype.setUnits });
            Element_add_19.Element_add(InvestmentPosition, { name: "UNITPRICE", required: true, order: 50, type: Number, read: InvestmentPosition.prototype.getUnitPrice, write: InvestmentPosition.prototype.setUnitPrice });
            Element_add_19.Element_add(InvestmentPosition, { name: "MKTVAL", required: true, order: 60, type: Number, read: InvestmentPosition.prototype.getMarketValue, write: InvestmentPosition.prototype.setMarketValue });
            Element_add_19.Element_add(InvestmentPosition, { name: "DTPRICEASOF", required: true, order: 70, type: Date, read: InvestmentPosition.prototype.getMarketValueDate, write: InvestmentPosition.prototype.setMarketValueDate });
            Element_add_19.Element_add(InvestmentPosition, { name: "CURRENCY", order: 80, type: String, read: InvestmentPosition.prototype.getCurrencyCode, write: InvestmentPosition.prototype.setCurrencyCode });
            Element_add_19.Element_add(InvestmentPosition, { name: "MEMO", order: 90, type: String, read: InvestmentPosition.prototype.getMemo, write: InvestmentPosition.prototype.setMemo });
            Element_add_19.Element_add(InvestmentPosition, { name: "INV401KSOURCE", order: 100, type: String, read: InvestmentPosition.prototype.get401kSource, write: InvestmentPosition.prototype.set401kSource });
        }
    };
});
System.register("domain/data/investment/positions/BasePosition", ["domain/data/investment/positions/InvestmentPosition", "domain/data/investment/accounts/SubAccountType", "domain/data/investment/positions/PositionType", "domain/data/investment/positions/Inv401KSource", "meta/ChildAggregate_add"], function (exports_65, context_65) {
    "use strict";
    var InvestmentPosition_1, SubAccountType_3, PositionType_2, Inv401KSource_2, ChildAggregate_add_11, BasePosition;
    var __moduleName = context_65 && context_65.id;
    return {
        setters: [
            function (InvestmentPosition_1_1) {
                InvestmentPosition_1 = InvestmentPosition_1_1;
            },
            function (SubAccountType_3_1) {
                SubAccountType_3 = SubAccountType_3_1;
            },
            function (PositionType_2_1) {
                PositionType_2 = PositionType_2_1;
            },
            function (Inv401KSource_2_1) {
                Inv401KSource_2 = Inv401KSource_2_1;
            },
            function (ChildAggregate_add_11_1) {
                ChildAggregate_add_11 = ChildAggregate_add_11_1;
            }
        ],
        execute: function () {
            /**
             * Base class for the various types of positions.
             * <br>
             * This class exposes a read-only view of the flattened aggregates that are
             * common to all positions as a convenience to application
             * developers who may not find the ofx aggregation model intuitive.
             *
             * @author Jon Perlow
             */
            BasePosition = /** @class */ (function () {
                function BasePosition() {
                }
                /**
                 * Gets the investment position child aggregate.
                 *
                 * @return the investment position child aggregate
                 */
                BasePosition.prototype.getInvestmentPosition = function () {
                    return this.investmentPosition;
                };
                /**
                 * Sets the investment position child aggregate.
                 *
                 * @param investmentPosition the investment position child aggregate
                 */
                BasePosition.prototype.setInvestmentPosition = function (investmentPosition) {
                    this.investmentPosition = investmentPosition;
                };
                /**
                 * Gets the security id for the position. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.6.1, OFX Spec"
                 *
                 * @return the security id for the position
                 */
                BasePosition.prototype.getSecurityId = function () {
                    return this.getInvestmentPosition().getSecurityId();
                };
                /**
                 * Gets the sub-account type. One of "CASH", "MARGIN", "SHORT", "OTHER". This is a required field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.6.1, OFX Spec"
                 *
                 * @return the sub-account type
                 */
                BasePosition.prototype.getHeldInAccount = function () {
                    return this.getInvestmentPosition().getHeldInAccount();
                };
                /**
                 * Gets the sub-account type as one of the well-known types.
                 * @see "Section 13.9.2.6.1, OFX Spec"
                 *
                 * @return the sub-account type or null if it's not one of the well-known types
                 */
                BasePosition.prototype.getHeldInAccountEnum = function () {
                    return SubAccountType_3.SubAccountType_fromOfx(this.getHeldInAccount());
                };
                /**
                 * Gets the position type. One of SHORT or LONG. This is a required field according to the OFX
                 * spec.
                 * @see "Section 13.9.2.6.1, OFX Spec"
                 *
                 * @return the position type
                 */
                BasePosition.prototype.getPositionType = function () {
                    return this.getInvestmentPosition().getPositionType();
                };
                /**
                 * Gets the position type as one of the well-known types.
                 * @see "Section 13.9.2.6.1, OFX Spec"
                 *
                 * @return the position type or null if it's not one of the well-known types
                 */
                BasePosition.prototype.getPositionTypeEnum = function () {
                    return PositionType_2.PositionType_fromOfx(this.getPositionType());
                };
                /**
                 * Gets the number of units in the position. For stocks, mutual funds, and others, this
                 * is the number of shares. For bonds, this is the face value. For options, this is the number of
                 * contacts. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.6.1, OFX Spec"
                 *
                 * @return the number of units in the position
                 */
                BasePosition.prototype.getUnits = function () {
                    return this.getInvestmentPosition().getUnits();
                };
                /**
                 * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
                 * share price. For bonds, this is the percentage of par. For options, this is the per share (not
                 * per contact) price. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.6.1, OFX Spec"
                 *
                 * @return the per unit price
                 */
                BasePosition.prototype.getUnitPrice = function () {
                    return this.getInvestmentPosition().getUnitPrice();
                };
                /**
                 * Gets the market value of this position. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.6.1, OFX Spec"
                 *
                 * @return the market value of the position
                 */
                BasePosition.prototype.getMarketValue = function () {
                    return this.getInvestmentPosition().getMarketValue();
                };
                /**
                 * Gets the date and time of the unit price and market value. This is a required field according
                 * to the OFX spec.
                 * @see "Section 13.9.2.6.1, OFX Spec"
                 *
                 * @return the market value date
                 */
                BasePosition.prototype.getMarketValueDate = function () {
                    return this.getInvestmentPosition().getMarketValueDate();
                };
                /**
                 * Gets the currency code of the position. This is an optional field according to the OFX spec.
                 * If not present, it's the default currency of the account.
                 * @see "Section 13.9.2.6.1, OFX Spec"
                 *
                 * @return the currency code of the position or null for the default currency
                 */
                BasePosition.prototype.getCurrencyCode = function () {
                    return this.getInvestmentPosition().getCurrencyCode();
                };
                /**
                 * Gets the memo associated with the position. This is an optional field according to the OFX
                 * spec.
                 * @see "Section 13.9.2.6.1, OFX Spec"
                 *
                 * @return the memo
                 */
                BasePosition.prototype.getMemo = function () {
                    return this.getInvestmentPosition().getMemo();
                };
                /**
                 * Gets the 401K source for the sale. Should be one of "PRETAX", "AFTERTAX", "MATCH",
                 * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the 401k source
                 */
                BasePosition.prototype.get401kSource = function () {
                    return this.getInvestmentPosition().get401kSource();
                };
                /**
                 * Gets the 401k source as one of the well-known types.
                 *
                 * @return the 401k source or null if it's not one of the well-known types
                 */
                BasePosition.prototype.get401kSourceEnum = function () {
                    return Inv401KSource_2.Inv401KSource_fromOfx(this.get401kSource());
                };
                return BasePosition;
            }());
            exports_65("BasePosition", BasePosition);
            ChildAggregate_add_11.ChildAggregate_add(BasePosition, { required: true, order: 10, type: InvestmentPosition_1.InvestmentPosition, read: BasePosition.prototype.getInvestmentPosition, write: BasePosition.prototype.setInvestmentPosition });
        }
    };
});
System.register("domain/data/investment/positions/InvestmentPositionList", ["meta/Aggregate_add", "domain/data/investment/positions/BasePosition", "meta/ChildAggregate_add"], function (exports_66, context_66) {
    "use strict";
    var Aggregate_Add_18, BasePosition_1, ChildAggregate_add_12, InvestmentPositionList;
    var __moduleName = context_66 && context_66.id;
    return {
        setters: [
            function (Aggregate_Add_18_1) {
                Aggregate_Add_18 = Aggregate_Add_18_1;
            },
            function (BasePosition_1_1) {
                BasePosition_1 = BasePosition_1_1;
            },
            function (ChildAggregate_add_12_1) {
                ChildAggregate_add_12 = ChildAggregate_add_12_1;
            }
        ],
        execute: function () {
            /**
             * Aggregate for a list of invesment positions.
             * @see "Section 13.9.2.2, OFX Spec"
             *
             * @author Jon Perlow
             */
            InvestmentPositionList = /** @class */ (function () {
                function InvestmentPositionList() {
                }
                /**
                 * Gets the list of positions
                 *
                 * @return the list of positions
                 */
                InvestmentPositionList.prototype.getPositions = function () {
                    return this.positions;
                };
                /**
                 * Sets the list of positions.
                 *
                 * @param positions the list of positions
                 */
                InvestmentPositionList.prototype.setPositions = function (positions) {
                    this.positions = positions;
                };
                return InvestmentPositionList;
            }());
            exports_66("InvestmentPositionList", InvestmentPositionList);
            Aggregate_Add_18.Aggregate_add(InvestmentPositionList, "INVPOSLIST");
            ChildAggregate_add_12.ChildAggregate_add(InvestmentPositionList, { order: 10, type: Array, collectionEntryType: BasePosition_1.BasePosition, read: InvestmentPositionList.prototype.getPositions, write: InvestmentPositionList.prototype.setPositions });
        }
    };
});
System.register("domain/data/common/BalanceRecord", ["meta/Aggregate_add", "meta/Element_add", "domain/data/common/Currency", "meta/ChildAggregate_add"], function (exports_67, context_67) {
    "use strict";
    var Aggregate_Add_19, Element_add_20, Currency_2, ChildAggregate_add_13, BalanceRecordType, BalanceRecord;
    var __moduleName = context_67 && context_67.id;
    return {
        setters: [
            function (Aggregate_Add_19_1) {
                Aggregate_Add_19 = Aggregate_Add_19_1;
            },
            function (Element_add_20_1) {
                Element_add_20 = Element_add_20_1;
            },
            function (Currency_2_1) {
                Currency_2 = Currency_2_1;
            },
            function (ChildAggregate_add_13_1) {
                ChildAggregate_add_13 = ChildAggregate_add_13_1;
            }
        ],
        execute: function () {
            (function (BalanceRecordType) {
                BalanceRecordType[BalanceRecordType["DOLLAR"] = 0] = "DOLLAR";
                BalanceRecordType[BalanceRecordType["PERCENT"] = 1] = "PERCENT";
                BalanceRecordType[BalanceRecordType["NUMBER"] = 2] = "NUMBER";
            })(BalanceRecordType || (BalanceRecordType = {}));
            exports_67("BalanceRecordType", BalanceRecordType);
            /**
             * @author Ryan Heaton
             * @see "Section 3.1.3, OFX Spec"
             */
            BalanceRecord = /** @class */ (function () {
                function BalanceRecord() {
                }
                /**
                 * Name of the balance.
                 *
                 * @return Name of the balance.
                 */
                BalanceRecord.prototype.getName = function () {
                    return this.name;
                };
                /**
                 * Name of the balance.
                 *
                 * @param name Name of the balance.
                 */
                BalanceRecord.prototype.setName = function (name) {
                    this.name = name;
                };
                /**
                 * Description of the balance.
                 *
                 * @return Description of the balance.
                 */
                BalanceRecord.prototype.getDescription = function () {
                    return this.description;
                };
                /**
                 * Description of the balance.
                 *
                 * @param description Description of the balance.
                 */
                BalanceRecord.prototype.setDescription = function (description) {
                    this.description = description;
                };
                /**
                 * Type of the balance.
                 *
                 * @return Type of the balance.
                 */
                BalanceRecord.prototype.getType = function () {
                    return this.type;
                };
                /**
                 * Type of the balance.
                 *
                 * @param type Type of the balance.
                 */
                BalanceRecord.prototype.setType = function (type) {
                    this.type = type;
                };
                /**
                 * The value of the balance.
                 *
                 * @return The value of the balance.
                 */
                BalanceRecord.prototype.getValue = function () {
                    return this.value;
                };
                /**
                 * The value of the balance.
                 *
                 * @param value The value of the balance.
                 */
                BalanceRecord.prototype.setValue = function (value) {
                    this.value = value;
                };
                /**
                 * Timestamp of the balance.
                 *
                 * @return Timestamp of the balance.
                 */
                BalanceRecord.prototype.getTimestamp = function () {
                    return this.timestamp;
                };
                /**
                 * Timestamp of the balance.
                 *
                 * @param timestamp Timestamp of the balance.
                 */
                BalanceRecord.prototype.setTimestamp = function (timestamp) {
                    this.timestamp = timestamp;
                };
                /**
                 * Currency.
                 *
                 * @return Currency.
                 */
                BalanceRecord.prototype.getCurrency = function () {
                    return this.currency;
                };
                /**
                 * Currency.
                 *
                 * @param currency Currency.
                 */
                BalanceRecord.prototype.setCurrency = function (currency) {
                    this.currency = currency;
                };
                return BalanceRecord;
            }());
            exports_67("BalanceRecord", BalanceRecord);
            Aggregate_Add_19.Aggregate_add(BalanceRecord, "BAL");
            Element_add_20.Element_add(BalanceRecord, { name: "NAME", required: true, order: 0, type: String, read: BalanceRecord.prototype.getName, write: BalanceRecord.prototype.setName });
            Element_add_20.Element_add(BalanceRecord, { name: "DESC", required: true, order: 10, type: String, read: BalanceRecord.prototype.getDescription, write: BalanceRecord.prototype.setDescription });
            Element_add_20.Element_add(BalanceRecord, { name: "BALTYPE", required: true, order: 20, type: BalanceRecordType, read: BalanceRecord.prototype.getType, write: BalanceRecord.prototype.setType });
            Element_add_20.Element_add(BalanceRecord, { name: "VALUE", required: true, order: 30, type: String, read: BalanceRecord.prototype.getValue, write: BalanceRecord.prototype.setValue });
            Element_add_20.Element_add(BalanceRecord, { name: "DTASOF", order: 40, type: Date, read: BalanceRecord.prototype.getTimestamp, write: BalanceRecord.prototype.setTimestamp });
            ChildAggregate_add_13.ChildAggregate_add(BalanceRecord, { order: 50, type: Currency_2.Currency, read: BalanceRecord.prototype.getCurrency, write: BalanceRecord.prototype.setCurrency });
        }
    };
});
System.register("domain/data/investment/statements/BalanceList", ["meta/Aggregate_add", "domain/data/common/BalanceRecord", "meta/ChildAggregate_add"], function (exports_68, context_68) {
    "use strict";
    var Aggregate_Add_20, BalanceRecord_1, ChildAggregate_add_14, BalanceList;
    var __moduleName = context_68 && context_68.id;
    return {
        setters: [
            function (Aggregate_Add_20_1) {
                Aggregate_Add_20 = Aggregate_Add_20_1;
            },
            function (BalanceRecord_1_1) {
                BalanceRecord_1 = BalanceRecord_1_1;
            },
            function (ChildAggregate_add_14_1) {
                ChildAggregate_add_14 = ChildAggregate_add_14_1;
            }
        ],
        execute: function () {
            /**
             * Aggregate for the investment balance list.
             * @see "Section 13.9.2.7, OFX Spec"
             *
             * @author Jon Perlow
             */
            BalanceList = /** @class */ (function () {
                function BalanceList() {
                }
                /**
                 * Gets the list of balance records.
                 *
                 * @return the list of balance records.
                 */
                BalanceList.prototype.getBalanceRecords = function () {
                    return this.balanceRecords;
                };
                /**
                 * Sets the list of balance records.
                 *
                 * @param balanceRecords the list of balance records.
                 */
                BalanceList.prototype.setBalanceRecords = function (balanceRecords) {
                    this.balanceRecords = balanceRecords;
                };
                return BalanceList;
            }());
            exports_68("BalanceList", BalanceList);
            Aggregate_Add_20.Aggregate_add(BalanceList, "BALLIST");
            ChildAggregate_add_14.ChildAggregate_add(BalanceList, { order: 10, type: Array, collectionEntryType: BalanceRecord_1.BalanceRecord, read: BalanceList.prototype.getBalanceRecords, write: BalanceList.prototype.setBalanceRecords });
        }
    };
});
System.register("domain/data/investment/statements/InvestmentBalance", ["domain/data/investment/statements/BalanceList", "meta/Aggregate_add", "meta/Element_add", "meta/ChildAggregate_add"], function (exports_69, context_69) {
    "use strict";
    var BalanceList_1, Aggregate_Add_21, Element_add_21, ChildAggregate_add_15, InvestmentBalance;
    var __moduleName = context_69 && context_69.id;
    return {
        setters: [
            function (BalanceList_1_1) {
                BalanceList_1 = BalanceList_1_1;
            },
            function (Aggregate_Add_21_1) {
                Aggregate_Add_21 = Aggregate_Add_21_1;
            },
            function (Element_add_21_1) {
                Element_add_21 = Element_add_21_1;
            },
            function (ChildAggregate_add_15_1) {
                ChildAggregate_add_15 = ChildAggregate_add_15_1;
            }
        ],
        execute: function () {
            /**
             * Aggregate for the investment balance.
             * @see "Section 13.9.2.7, OFX Spec"
             *
             * @author Jon Perlow
             */
            InvestmentBalance = /** @class */ (function () {
                function InvestmentBalance() {
                }
                /**
                 * Gets the available cash balance across all sub-accounts, including sweep funds. This is
                 * required field according to the OFX spec.
                 *
                 * @return the available cash balance
                 */
                InvestmentBalance.prototype.getAvailableCash = function () {
                    return this.availableCash;
                };
                /**
                 * Sets the available cash balance across all sub-accounts, including sweep funds. This is
                 * required field according to the OFX spec.
                 *
                 * @param availableCash the available cash balance
                 */
                InvestmentBalance.prototype.setAvailableCash = function (availableCash) {
                    this.availableCash = availableCash;
                };
                /**
                 * Gets the margin account balance. A positive balance indicates a positive cash balance, while
                 * a negative balance indicates the customer borrowed funds. This is a required field according
                 * to the OFX spec.
                 *
                 * @return the margin account balance
                 */
                InvestmentBalance.prototype.getMarginBalance = function () {
                    return this.marginBalance;
                };
                /**
                 * Sets the margin account balance. A positive balance indicates a positive cash balance, while
                 * a negative balance indicates the customer borrowed funds. This is a required field according
                 * to the OFX spec.
                 *
                 * @param marginBalance the margin account balance
                 */
                InvestmentBalance.prototype.setMarginBalance = function (marginBalance) {
                    this.marginBalance = marginBalance;
                };
                /**
                 * Gets the market value of all short positions. This is a positive balance. This is a required
                 * field according to the OFX spec.
                 *
                 * @return the market value of all short positions
                 */
                InvestmentBalance.prototype.getShortBalance = function () {
                    return this.shortBalance;
                };
                /**
                 * Sets the market value of all short positions. This is a positive balance. This is a required
                 * field according to the OFX spec.
                 *
                 * @param shortBalance the market value of all short positions
                 */
                InvestmentBalance.prototype.setShortBalance = function (shortBalance) {
                    this.shortBalance = shortBalance;
                };
                /**
                 * Gets the buying power amount. This is an optional field according to the OFX spec.
                 *
                 * @return the buying power
                 */
                InvestmentBalance.prototype.getBuyingPower = function () {
                    return this.buyingPower;
                };
                /**
                 * Sets the buying power amount. This is an optional field according to the OFX spec.
                 *
                 * @param buyingPower the buying power
                 */
                InvestmentBalance.prototype.setBuyingPower = function (buyingPower) {
                    this.buyingPower = buyingPower;
                };
                /**
                 * Gets the investment balance list. This is an optional field according to the OFX spec.
                 *
                 * @return the investment balance list
                 */
                InvestmentBalance.prototype.getBalanceList = function () {
                    return this.balanceList;
                };
                /**
                 * Sets the investment balance list. This is an optional field according to the OFX spec.
                 *
                 * @param balanceList the investment balance list
                 */
                InvestmentBalance.prototype.setBalanceList = function (balanceList) {
                    this.balanceList = balanceList;
                };
                return InvestmentBalance;
            }());
            exports_69("InvestmentBalance", InvestmentBalance);
            Aggregate_Add_21.Aggregate_add(InvestmentBalance, "INVBAL");
            Element_add_21.Element_add(InvestmentBalance, { name: "AVAILCASH", required: true, order: 10, type: Number, read: InvestmentBalance.prototype.getAvailableCash, write: InvestmentBalance.prototype.setAvailableCash });
            Element_add_21.Element_add(InvestmentBalance, { name: "MARGINBALANCE", required: true, order: 20, type: Number, read: InvestmentBalance.prototype.getMarginBalance, write: InvestmentBalance.prototype.setMarginBalance });
            Element_add_21.Element_add(InvestmentBalance, { name: "SHORTBALANCE", required: true, order: 30, type: Number, read: InvestmentBalance.prototype.getShortBalance, write: InvestmentBalance.prototype.setShortBalance });
            Element_add_21.Element_add(InvestmentBalance, { name: "BUYPOWER", order: 40, type: Number, read: InvestmentBalance.prototype.getBuyingPower, write: InvestmentBalance.prototype.setBuyingPower });
            ChildAggregate_add_15.ChildAggregate_add(InvestmentBalance, { order: 50, type: BalanceList_1.BalanceList, read: InvestmentBalance.prototype.getBalanceList, write: InvestmentBalance.prototype.setBalanceList });
        }
    };
});
System.register("domain/data/seclist/SecurityInfo", ["domain/data/seclist/SecurityId", "meta/Aggregate_add", "meta/ChildAggregate_add", "meta/Element_add"], function (exports_70, context_70) {
    "use strict";
    var SecurityId_2, Aggregate_Add_22, ChildAggregate_add_16, Element_add_22, SecurityInfo;
    var __moduleName = context_70 && context_70.id;
    return {
        setters: [
            function (SecurityId_2_1) {
                SecurityId_2 = SecurityId_2_1;
            },
            function (Aggregate_Add_22_1) {
                Aggregate_Add_22 = Aggregate_Add_22_1;
            },
            function (ChildAggregate_add_16_1) {
                ChildAggregate_add_16 = ChildAggregate_add_16_1;
            },
            function (Element_add_22_1) {
                Element_add_22 = Element_add_22_1;
            }
        ],
        execute: function () {
            /**
             * Info about a security.
             * @see "Section 13.8.5.1, OFX Spec"
             *
             * @author Jon Perlow
             */
            SecurityInfo = /** @class */ (function () {
                function SecurityInfo() {
                }
                /**
                 * Gets the unique security id for the security. This is a required field according to the OFX
                 * spec.
                 *
                 * @return the security id
                 */
                SecurityInfo.prototype.getSecurityId = function () {
                    return this.securityId;
                };
                /**
                 * Sets the unique security id for the security. This is a required field according to the OFX
                 * spec.
                 *
                 * @param securityId the security id
                 */
                SecurityInfo.prototype.setSecurityId = function (securityId) {
                    this.securityId = securityId;
                };
                /**
                 * Gets the full name of the security. This is a required field according to the OFX spec.
                 *
                 * @return the full name of the security
                 */
                SecurityInfo.prototype.getSecurityName = function () {
                    return this.securityName;
                };
                /**
                 * Sets the full name of the security. This is a required field according to the OFX spec.
                 *
                 * @param securityName the full name of the security
                 */
                SecurityInfo.prototype.setSecurityName = function (securityName) {
                    this.securityName = securityName;
                };
                /**
                 * Gets the ticker symbol for the security. This is an optional field according to the OFX spec.
                 *
                 * @return the ticket symbol or null if there's no ticker symbol
                 */
                SecurityInfo.prototype.getTickerSymbol = function () {
                    return this.tickerSymbol;
                };
                /**
                 * Sets the ticker symbol for the security. This is an optional field according to the OFX spec.
                 *
                 * @param tickerSymbol the ticket symbol or null if there's no ticker symbol
                 */
                SecurityInfo.prototype.setTickerSymbol = function (tickerSymbol) {
                    this.tickerSymbol = tickerSymbol;
                };
                /**
                 * Gets the FI ID number for the security. This is an optional field according to the OFX spec.
                 *
                 * @return the FI ID number for the security
                 */
                SecurityInfo.prototype.getFiId = function () {
                    return this.fiId;
                };
                /**
                 * Sets the FI ID number for the security. This is an optional field according to the OFX spec.
                 *
                 * @param fiId the FI ID number for the security
                 */
                SecurityInfo.prototype.setFiId = function (fiId) {
                    this.fiId = fiId;
                };
                /**
                 * Gets the rating of the security. This is an optional field according to the OFX spec.
                 *
                 * @return the rating
                 */
                SecurityInfo.prototype.getRating = function () {
                    return this.rating;
                };
                /**
                 * Sets the rating of the security. This is an optional field according to the OFX spec.
                 *
                 * @param rating the rating
                 */
                SecurityInfo.prototype.setRating = function (rating) {
                    this.rating = rating;
                };
                /**
                 * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
                 * share price. For bonds, this is the percentage of par. For options, this is the per share (not
                 * per contact) price. This is a noptional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the per unit price
                 */
                SecurityInfo.prototype.getUnitPrice = function () {
                    return this.unitPrice;
                };
                /**
                 * Sets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
                 * share price. For bonds, this is the percentage of par. For options, this is the per share (not
                 * per contact) price. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param unitPrice the per unit price
                 */
                SecurityInfo.prototype.setUnitPrice = function (unitPrice) {
                    this.unitPrice = unitPrice;
                };
                /**
                 * Gets the date as-of for the unit price. This is an optional field according to the OFX spec.
                 *
                 * @return the date as-of for the unit price
                 */
                SecurityInfo.prototype.getUnitPriceAsOfDate = function () {
                    return this.marketValueDate;
                };
                /**
                 * Sets the date as-of for the unit price. This is an optional field according to the OFX spec.
                 *
                 * param marketValueDate the date as-of for the unit price
                 */
                SecurityInfo.prototype.setUnitPriceAsOfDate = function (marketValueDate) {
                    this.marketValueDate = marketValueDate;
                };
                /**
                 * Gets the overriding currency code for the security. If not set, implies the default currency.
                 * This is an optional field according to the OFX spec.
                 *
                 * @return the overriding currency code or null to mean the default currency
                 */
                SecurityInfo.prototype.getCurrencyCode = function () {
                    return this.currencyCode;
                };
                /**
                 * Sets the overriding currency code for the security. If not set, implies the default currency.
                 * This is an optional field according to the OFX spec.
                 *
                 * @param currencyCode the overriding currency code or null to mean the default currency
                 */
                SecurityInfo.prototype.setCurrencyCode = function (currencyCode) {
                    this.currencyCode = currencyCode;
                };
                /**
                 * Gets any memo associated with the security. This is an optional field according to the OFX
                 * spec.
                 *
                 * @return the memo
                 */
                SecurityInfo.prototype.getMemo = function () {
                    return this.memo;
                };
                /**
                 * Sets any memo associated with the security. This is an optional field according to the OFX
                 * spec.
                 *
                 * @param memo the memo
                 */
                SecurityInfo.prototype.setMemo = function (memo) {
                    this.memo = memo;
                };
                return SecurityInfo;
            }());
            exports_70("SecurityInfo", SecurityInfo);
            Aggregate_Add_22.Aggregate_add(SecurityInfo, "SECINFO");
            ChildAggregate_add_16.ChildAggregate_add(SecurityInfo, { required: true, order: 10, type: SecurityId_2.SecurityId, read: SecurityInfo.prototype.getSecurityId, write: SecurityInfo.prototype.setSecurityId });
            Element_add_22.Element_add(SecurityInfo, { name: "SECNAME", required: true, order: 20, type: String, read: SecurityInfo.prototype.getSecurityName, write: SecurityInfo.prototype.setSecurityName });
            Element_add_22.Element_add(SecurityInfo, { name: "TICKER", order: 30, type: String, read: SecurityInfo.prototype.getTickerSymbol, write: SecurityInfo.prototype.setTickerSymbol });
            Element_add_22.Element_add(SecurityInfo, { name: "FIID", order: 40, type: String, read: SecurityInfo.prototype.getFiId, write: SecurityInfo.prototype.setFiId });
            Element_add_22.Element_add(SecurityInfo, { name: "RATING", order: 50, type: String, read: SecurityInfo.prototype.getRating, write: SecurityInfo.prototype.setRating });
            Element_add_22.Element_add(SecurityInfo, { name: "UNITPRICE", order: 60, type: Number, read: SecurityInfo.prototype.getUnitPrice, write: SecurityInfo.prototype.setUnitPrice });
            Element_add_22.Element_add(SecurityInfo, { name: "DTASOF", order: 70, type: Date, read: SecurityInfo.prototype.getUnitPriceAsOfDate, write: SecurityInfo.prototype.setUnitPriceAsOfDate });
            Element_add_22.Element_add(SecurityInfo, { name: "CURRENCY", order: 80, type: String, read: SecurityInfo.prototype.getCurrencyCode, write: SecurityInfo.prototype.setCurrencyCode });
            Element_add_22.Element_add(SecurityInfo, { name: "MEMO", order: 90, type: String, read: SecurityInfo.prototype.getMemo, write: SecurityInfo.prototype.setMemo });
        }
    };
});
System.register("domain/data/seclist/BaseSecurityInfo", ["meta/ChildAggregate_add", "domain/data/seclist/SecurityInfo"], function (exports_71, context_71) {
    "use strict";
    var ChildAggregate_add_17, SecurityInfo_1, BaseSecurityInfo;
    var __moduleName = context_71 && context_71.id;
    return {
        setters: [
            function (ChildAggregate_add_17_1) {
                ChildAggregate_add_17 = ChildAggregate_add_17_1;
            },
            function (SecurityInfo_1_1) {
                SecurityInfo_1 = SecurityInfo_1_1;
            }
        ],
        execute: function () {
            /**
             * Base class for info about the various types of securities.
             * @see "Section 13.8.5.1, OFX Spec"
             * <br>
             * This class exposes a read-only view of the flattened aggregates that are
             * common to all security info as a convenience to application
             * developers who may not find the ofx aggregation model intuitive.
             *
             * @author Jon Perlow
             */
            BaseSecurityInfo = /** @class */ (function () {
                function BaseSecurityInfo() {
                }
                /**
                 * Gets the security info aggregate.
                 *
                 * @return the security info aggregate.
                 */
                BaseSecurityInfo.prototype.getSecurityInfo = function () {
                    return this.securityInfo;
                };
                /**
                 * Sets the security info aggregate.
                 *
                 * @param securityInfo the security info aggregate.
                 */
                BaseSecurityInfo.prototype.setSecurityInfo = function (securityInfo) {
                    this.securityInfo = securityInfo;
                };
                /**
                 * Gets the unique security id for the security. This is a required field according to the OFX
                 * spec.
                 *
                 * @return the security id
                 */
                BaseSecurityInfo.prototype.getSecurityId = function () {
                    return this.getSecurityInfo().getSecurityId();
                };
                /**
                 * Gets the full name of the security. This is a required field according to the OFX spec.
                 *
                 * @return the full name of the security.
                 */
                BaseSecurityInfo.prototype.getSecurityName = function () {
                    return this.getSecurityInfo().getSecurityName();
                };
                /**
                 * Gets the ticker symbol for the security. This is an optional field according to the OFX spec.
                 *
                 * @return the ticket symbol or null if there's no ticker symbol
                 */
                BaseSecurityInfo.prototype.getTickerSymbol = function () {
                    return this.getSecurityInfo().getTickerSymbol();
                };
                /**
                 * Gets the FI ID number for the security. This is an optional field according to the OFX spec.
                 *
                 * @return the FI ID number for the security
                 */
                BaseSecurityInfo.prototype.getFiId = function () {
                    return this.getSecurityInfo().getFiId();
                };
                /**
                 * Gets the rating of the security. This is an optional field according to the OFX spec.
                 *
                 * @return the rating
                 */
                BaseSecurityInfo.prototype.getRating = function () {
                    return this.getSecurityInfo().getRating();
                };
                /**
                 * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
                 * share price. For bonds, this is the percentage of par. For options, this is the per share (not
                 * per contact) price. This is a noptional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the per unit price
                 */
                BaseSecurityInfo.prototype.getUnitPrice = function () {
                    return this.getSecurityInfo().getUnitPrice();
                };
                /**
                 * Gets the date as-of for the unit price. This is an optional field according to the OFX spec.
                 *
                 * @return the date as-of for the unit price
                 */
                BaseSecurityInfo.prototype.getUnitPriceAsOfDate = function () {
                    return this.getSecurityInfo().getUnitPriceAsOfDate();
                };
                /**
                 * Gets the overriding currency code for the security. If not set, implies the default currency.
                 * This is an optional field according to the OFX spec.
                 *
                 * @return the overriding currency code or null to mean the default currency
                 */
                BaseSecurityInfo.prototype.getCurrencyCode = function () {
                    return this.getSecurityInfo().getCurrencyCode();
                };
                /**
                 * Gets any memo associated with the security. This is an optional field according to the OFX
                 * spec.
                 *
                 * @return the memo
                 */
                BaseSecurityInfo.prototype.getMemo = function () {
                    return this.getSecurityInfo().getMemo();
                };
                return BaseSecurityInfo;
            }());
            exports_71("BaseSecurityInfo", BaseSecurityInfo);
            ChildAggregate_add_17.ChildAggregate_add(BaseSecurityInfo, { required: true, order: 10, type: SecurityInfo_1.SecurityInfo, read: BaseSecurityInfo.prototype.getSecurityInfo, write: BaseSecurityInfo.prototype.setSecurityInfo });
        }
    };
});
System.register("domain/data/seclist/SecurityList", ["domain/data/seclist/BaseSecurityInfo", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_72, context_72) {
    "use strict";
    var BaseSecurityInfo_1, Aggregate_Add_23, ChildAggregate_add_18, SecurityList;
    var __moduleName = context_72 && context_72.id;
    return {
        setters: [
            function (BaseSecurityInfo_1_1) {
                BaseSecurityInfo_1 = BaseSecurityInfo_1_1;
            },
            function (Aggregate_Add_23_1) {
                Aggregate_Add_23 = Aggregate_Add_23_1;
            },
            function (ChildAggregate_add_18_1) {
                ChildAggregate_add_18 = ChildAggregate_add_18_1;
            }
        ],
        execute: function () {
            /**
             * Aggregate for a list of securities.
             * @see "Section 13.8.4, OFX Spec"
             *
             * @author Jon Perlow
             */
            SecurityList = /** @class */ (function () {
                function SecurityList() {
                }
                SecurityList.prototype.getSecurityInfos = function () {
                    return this.securityInfos;
                };
                SecurityList.prototype.setSecurityInfos = function (securityInfos) {
                    this.securityInfos = securityInfos;
                };
                return SecurityList;
            }());
            exports_72("SecurityList", SecurityList);
            Aggregate_Add_23.Aggregate_add(SecurityList, "SECLIST");
            ChildAggregate_add_18.ChildAggregate_add(SecurityList, { order: 10, type: Array, collectionEntryType: BaseSecurityInfo_1.BaseSecurityInfo, read: SecurityList.prototype.getSecurityInfos, write: SecurityList.prototype.setSecurityInfos });
        }
    };
});
System.register("domain/data/investment/statements/InvestmentStatementResponse", ["domain/data/common/StatementResponse", "domain/data/investment/accounts/InvestmentAccountDetails", "domain/data/investment/transactions/InvestmentTransactionList", "domain/data/investment/positions/InvestmentPositionList", "domain/data/investment/statements/InvestmentBalance", "meta/Aggregate_add", "meta/Element_add", "meta/ChildAggregate_add"], function (exports_73, context_73) {
    "use strict";
    var StatementResponse_1, InvestmentAccountDetails_2, InvestmentTransactionList_1, InvestmentPositionList_1, InvestmentBalance_1, Aggregate_Add_24, Element_add_23, ChildAggregate_add_19, InvestmentStatementResponse;
    var __moduleName = context_73 && context_73.id;
    return {
        setters: [
            function (StatementResponse_1_1) {
                StatementResponse_1 = StatementResponse_1_1;
            },
            function (InvestmentAccountDetails_2_1) {
                InvestmentAccountDetails_2 = InvestmentAccountDetails_2_1;
            },
            function (InvestmentTransactionList_1_1) {
                InvestmentTransactionList_1 = InvestmentTransactionList_1_1;
            },
            function (InvestmentPositionList_1_1) {
                InvestmentPositionList_1 = InvestmentPositionList_1_1;
            },
            function (InvestmentBalance_1_1) {
                InvestmentBalance_1 = InvestmentBalance_1_1;
            },
            function (Aggregate_Add_24_1) {
                Aggregate_Add_24 = Aggregate_Add_24_1;
            },
            function (Element_add_23_1) {
                Element_add_23 = Element_add_23_1;
            },
            function (ChildAggregate_add_19_1) {
                ChildAggregate_add_19 = ChildAggregate_add_19_1;
            }
        ],
        execute: function () {
            /**
             * Aggregate for the investment statement download response.
             * @see "Section 13.9.2.2, OFX Spec"
             *
             * @author Jon Perlow
             */
            InvestmentStatementResponse = /** @class */ (function (_super) {
                __extends(InvestmentStatementResponse, _super);
                function InvestmentStatementResponse() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * Gets the name of the response message.
                 *
                 * @return the name of the response message
                 */
                //@Override
                InvestmentStatementResponse.prototype.getResponseMessageName = function () {
                    return "investment statement";
                };
                /**
                 * Gets the date and time for the statement download. This is a required field according to the
                 * OFX spec.
                 *
                 * @return the date and time for the statement download
                 */
                InvestmentStatementResponse.prototype.getDateOfStatement = function () {
                    return this.dateOfStatement;
                };
                /**
                 * Sets the date and time for the statement download. This is a required field according to the
                 * OFX spec.
                 *
                 * @param dateOfStatement the date and time for the statement download
                 */
                InvestmentStatementResponse.prototype.setDateOfStatement = function (dateOfStatement) {
                    this.dateOfStatement = dateOfStatement;
                };
                /**
                 * Gets the account for the statement. This is a required field according to the OFX spec.
                 *
                 * @return the account for the statement
                 */
                InvestmentStatementResponse.prototype.getAccount = function () {
                    return this.account;
                };
                /**
                 * Sets the account for the statement. This is a required field according to the OFX spec.
                 *
                 * @param account the account for the statement
                 */
                InvestmentStatementResponse.prototype.setAccount = function (account) {
                    this.account = account;
                };
                /**
                 * Gets the transaction list aggregate. This is an optional field according to the OFX spec.
                 *
                 * @return the transaction list aggregate
                 */
                InvestmentStatementResponse.prototype.getInvestmentTransactionList = function () {
                    return this.investmentTransactionList;
                };
                /**
                 * Sets the transaction list aggregate. This is an optional field according to the OFX spec.
                 *
                 * @param transactionList the transaction list aggregate
                 */
                InvestmentStatementResponse.prototype.setInvestmentTransactionList = function (transactionList) {
                    this.investmentTransactionList = transactionList;
                };
                /**
                 * Gets the position list aggreate. This is an optional field according to the OFX spec.
                 *
                 * @return the position list aggregate
                 */
                InvestmentStatementResponse.prototype.getPositionList = function () {
                    return this.positionList;
                };
                /**
                 * Sets the position list aggreate. This is an optional field according to the OFX spec.
                 *
                 * @param positionList the position list aggregate
                 */
                InvestmentStatementResponse.prototype.setPositionList = function (positionList) {
                    this.positionList = positionList;
                };
                /**
                 * Gets the account balance. This is an optional field according to the OFX spec.
                 *
                 * @return the account balance
                 */
                InvestmentStatementResponse.prototype.getAccountBalance = function () {
                    return this.accountBalance;
                };
                /**
                 * Sets the account balance. This is an optional field according to the OFX spec.
                 *
                 * @param accountBalance the account balance
                 */
                InvestmentStatementResponse.prototype.setAccountBalance = function (accountBalance) {
                    this.accountBalance = accountBalance;
                };
                /**
                 * Gets the security list aggregate.
                 * <br>
                 * This is not actually technically part of the investment statement responsr aggregate, but
                 * according to Section 13.8.4, OFX spec, this aggregate can appear the overall response and
                 * we provide it here for convenience.
                 *
                 * @return the security list aggregate
                 */
                InvestmentStatementResponse.prototype.getSecurityList = function () {
                    return this.securityList;
                };
                /**
                 * Sets the security list aggregate.
                 * <br>
                 * This is not actually technically part of the investment statement responsr aggregate, but
                 * according to Section 13.8.4, OFX spec, this aggregate can appear the overall response and
                 * we provide it here for convenience.
                 *
                 * @param securityList the security list aggregate
                 */
                InvestmentStatementResponse.prototype.setSecurityList = function (securityList) {
                    this.securityList = securityList;
                };
                return InvestmentStatementResponse;
            }(StatementResponse_1.StatementResponse));
            exports_73("InvestmentStatementResponse", InvestmentStatementResponse);
            Aggregate_Add_24.Aggregate_add(InvestmentStatementResponse, "INVSTMTRS");
            Element_add_23.Element_add(InvestmentStatementResponse, { name: "DTASOF", required: true, order: 60, type: Date, read: InvestmentStatementResponse.prototype.getDateOfStatement, write: InvestmentStatementResponse.prototype.setDateOfStatement });
            ChildAggregate_add_19.ChildAggregate_add(InvestmentStatementResponse, { name: "INVACCTFROM", required: true, order: 10, type: InvestmentAccountDetails_2.InvestmentAccountDetails, read: InvestmentStatementResponse.prototype.getAccount, write: InvestmentStatementResponse.prototype.setAccount });
            ChildAggregate_add_19.ChildAggregate_add(InvestmentStatementResponse, { order: 70, type: InvestmentTransactionList_1.InvestmentTransactionList, read: InvestmentStatementResponse.prototype.getInvestmentTransactionList, write: InvestmentStatementResponse.prototype.setInvestmentTransactionList });
            ChildAggregate_add_19.ChildAggregate_add(InvestmentStatementResponse, { order: 80, type: InvestmentPositionList_1.InvestmentPositionList, read: InvestmentStatementResponse.prototype.getPositionList, write: InvestmentStatementResponse.prototype.setPositionList });
            ChildAggregate_add_19.ChildAggregate_add(InvestmentStatementResponse, { order: 90, type: InvestmentBalance_1.InvestmentBalance, read: InvestmentStatementResponse.prototype.getAccountBalance, write: InvestmentStatementResponse.prototype.setAccountBalance });
        }
    };
});
System.register("domain/data/seclist/SecurityRequest", ["domain/data/seclist/SecurityId", "meta/Aggregate_add", "meta/Element_add"], function (exports_74, context_74) {
    "use strict";
    var SecurityId_3, Aggregate_Add_25, Element_add_24, SecurityRequest;
    var __moduleName = context_74 && context_74.id;
    return {
        setters: [
            function (SecurityId_3_1) {
                SecurityId_3 = SecurityId_3_1;
            },
            function (Aggregate_Add_25_1) {
                Aggregate_Add_25 = Aggregate_Add_25_1;
            },
            function (Element_add_24_1) {
                Element_add_24 = Element_add_24_1;
            }
        ],
        execute: function () {
            /**
             * Security request aggregate.
             * @see "Section 13.8.2.2, OFX Spec"
             *
             * @author Jon Perlow
             */
            SecurityRequest = /** @class */ (function () {
                function SecurityRequest() {
                }
                SecurityRequest.prototype.getSecurityId = function () {
                    return this.securityId;
                };
                SecurityRequest.prototype.setSecurityId = function (securityId) {
                    this.securityId = securityId;
                    this.tickerSymbol = null;
                    this.fiId = null;
                };
                SecurityRequest.prototype.getTickerSymbol = function () {
                    return this.tickerSymbol;
                };
                SecurityRequest.prototype.setTickerSymbol = function (tickerSymbol) {
                    this.tickerSymbol = tickerSymbol;
                    this.securityId = null;
                    this.fiId = null;
                };
                SecurityRequest.prototype.getFiId = function () {
                    return this.fiId;
                };
                SecurityRequest.prototype.setFiId = function (fiId) {
                    this.fiId = fiId;
                    this.securityId = null;
                    this.tickerSymbol = null;
                };
                return SecurityRequest;
            }());
            exports_74("SecurityRequest", SecurityRequest);
            Aggregate_Add_25.Aggregate_add(SecurityRequest, "SECRQ");
            Element_add_24.Element_add(SecurityRequest, { name: "SECID", order: 10, type: SecurityId_3.SecurityId, read: SecurityRequest.prototype.getSecurityId, write: SecurityRequest.prototype.setSecurityId });
            Element_add_24.Element_add(SecurityRequest, { name: "TICKER", order: 20, type: String, read: SecurityRequest.prototype.getTickerSymbol, write: SecurityRequest.prototype.setTickerSymbol });
            Element_add_24.Element_add(SecurityRequest, { name: "FIID", order: 30, type: String, read: SecurityRequest.prototype.getFiId, write: SecurityRequest.prototype.setFiId });
        }
    };
});
System.register("client/InvestmentAccount", [], function (exports_75, context_75) {
    "use strict";
    var __moduleName = context_75 && context_75.id;
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("client/FinancialInstitution", [], function (exports_76, context_76) {
    "use strict";
    var __moduleName = context_76 && context_76.id;
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("client/FinancialInstitutionDataStore", [], function (exports_77, context_77) {
    "use strict";
    var __moduleName = context_77 && context_77.id;
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("client/FinancialInstitutionService", [], function (exports_78, context_78) {
    "use strict";
    var __moduleName = context_78 && context_78.id;
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("client/NoOFXResponseException", ["OFXException"], function (exports_79, context_79) {
    "use strict";
    var OFXException_8, NoOFXResponseException;
    var __moduleName = context_79 && context_79.id;
    return {
        setters: [
            function (OFXException_8_1) {
                OFXException_8 = OFXException_8_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            NoOFXResponseException = /** @class */ (function (_super) {
                __extends(NoOFXResponseException, _super);
                function NoOFXResponseException(message) {
                    if (message === void 0) { message = null; }
                    return _super.call(this, message) || this;
                }
                return NoOFXResponseException;
            }(OFXException_8.OFXException));
            exports_79("NoOFXResponseException", NoOFXResponseException);
        }
    };
});
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("client/context/OFXApplicationContext", [], function (exports_80, context_80) {
    "use strict";
    var __moduleName = context_80 && context_80.id;
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2008 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
        }
    };
});
System.register("client/context/DefaultApplicationContext", [], function (exports_81, context_81) {
    "use strict";
    var DefaultApplicationContext;
    var __moduleName = context_81 && context_81.id;
    return {
        setters: [],
        execute: function () {
            /**
             * Default application context.
             *
             * @author Ryan Heaton
             */
            DefaultApplicationContext = /** @class */ (function () {
                function DefaultApplicationContext(appId, appVersion) {
                    this.appId = appId;
                    this.appVersion = appVersion;
                }
                DefaultApplicationContext.prototype.getAppId = function () {
                    return this.appId;
                };
                DefaultApplicationContext.prototype.getAppVersion = function () {
                    return this.appVersion;
                };
                return DefaultApplicationContext;
            }());
            exports_81("DefaultApplicationContext", DefaultApplicationContext);
        }
    };
});
System.register("client/context/OFXApplicationContextHolder", ["client/context/DefaultApplicationContext"], function (exports_82, context_82) {
    "use strict";
    var DefaultApplicationContext_1, OFXApplicationContextHolder;
    var __moduleName = context_82 && context_82.id;
    return {
        setters: [
            function (DefaultApplicationContext_1_1) {
                DefaultApplicationContext_1 = DefaultApplicationContext_1_1;
            }
        ],
        execute: function () {
            OFXApplicationContextHolder = /** @class */ (function () {
                /**
                 * @author Ryan Heaton
                 */
                function OFXApplicationContextHolder() {
                }
                /**
                 * Get the current (thread-safe) context.
                 *
                 * @return The thread-safe context.
                 */
                OFXApplicationContextHolder.getCurrentContext = function () {
                    //todo: implement a strategy (perhaps for thread-local access or something)?
                    return this.CURRENT_CONTEXT;
                };
                /**
                 * Set the current context.
                 *
                 * @param context The context.
                 */
                OFXApplicationContextHolder.setCurrentContext = function (context) {
                    this.CURRENT_CONTEXT = context;
                };
                OFXApplicationContextHolder.CURRENT_CONTEXT = new DefaultApplicationContext_1.DefaultApplicationContext("Money", "1600"); //some apps fail unless you're Quicken or Money...
                return OFXApplicationContextHolder;
            }());
            exports_82("OFXApplicationContextHolder", OFXApplicationContextHolder);
        }
    };
});
System.register("meta/Header_add", ["meta/Header", "io/AggregateIntrospector"], function (exports_83, context_83) {
    "use strict";
    var Header_1, AggregateIntrospector_5;
    var __moduleName = context_83 && context_83.id;
    function Header_add(clazz, params) {
        console.assert(params.type != null);
        AggregateIntrospector_5.AggregateIntrospector.addHeader(clazz, new Header_1.Header(params));
    }
    exports_83("Header_add", Header_add);
    return {
        setters: [
            function (Header_1_1) {
                Header_1 = Header_1_1;
            },
            function (AggregateIntrospector_5_1) {
                AggregateIntrospector_5 = AggregateIntrospector_5_1;
            }
        ],
        execute: function () {
        }
    };
});
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("domain/data/RequestMessage", [], function (exports_84, context_84) {
    "use strict";
    var RequestMessage;
    var __moduleName = context_84 && context_84.id;
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2008 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
             * A message applicable to a request message set.
             *
             * @author Ryan Heaton
             */
            RequestMessage = /** @class */ (function () {
                function RequestMessage() {
                }
                return RequestMessage;
            }());
            exports_84("RequestMessage", RequestMessage);
        }
    };
});
System.register("domain/data/RequestMessageSet", [], function (exports_85, context_85) {
    "use strict";
    var RequestMessageSet;
    var __moduleName = context_85 && context_85.id;
    return {
        setters: [],
        execute: function () {
            /*
             * Copyright 2008 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
            * A message set enclosed in an OFX request envelope.
            *
            * @author Ryan Heaton
            */
            RequestMessageSet /*implements Comparable<RequestMessageSet>*/ = /** @class */ (function () {
                function RequestMessageSet() {
                    this.version = "1";
                }
                /**
                 * The version of this request message.
                 *
                 * @return The version of this request message.
                 */
                RequestMessageSet.prototype.getVersion = function () {
                    return this.version;
                };
                /**
                 * The version of this request message.
                 *
                 * @param version The version of this request message.
                 */
                RequestMessageSet.prototype.setVersion = function (version) {
                    this.version = version;
                };
                // Inherited.
                /*public compareTo(o: RequestMessageSet): number {
                  return getType().compareTo(o.getType());
                }*/
                RequestMessageSet.contentCompare = function (left, right) {
                    return left.getType() - right.getType();
                };
                return RequestMessageSet;
            }());
            exports_85("RequestMessageSet", RequestMessageSet) /*implements Comparable<RequestMessageSet>*/;
        }
    };
});
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("domain/data/RequestEnvelope", ["uuid", "collections/SortedSet", "meta/Aggregate_add", "meta/ChildAggregate_add", "meta/Header_add", "domain/data/ApplicationSecurity", "domain/data/RequestMessageSet"], function (exports_86, context_86) {
    "use strict";
    var uuid_1, SortedSet_3, Aggregate_add_2, ChildAggregate_add_20, Header_add_1, ApplicationSecurity_1, RequestMessageSet_1, RequestEnvelope;
    var __moduleName = context_86 && context_86.id;
    return {
        setters: [
            function (uuid_1_1) {
                uuid_1 = uuid_1_1;
            },
            function (SortedSet_3_1) {
                SortedSet_3 = SortedSet_3_1;
            },
            function (Aggregate_add_2_1) {
                Aggregate_add_2 = Aggregate_add_2_1;
            },
            function (ChildAggregate_add_20_1) {
                ChildAggregate_add_20 = ChildAggregate_add_20_1;
            },
            function (Header_add_1_1) {
                Header_add_1 = Header_add_1_1;
            },
            function (ApplicationSecurity_1_1) {
                ApplicationSecurity_1 = ApplicationSecurity_1_1;
            },
            function (RequestMessageSet_1_1) {
                RequestMessageSet_1 = RequestMessageSet_1_1;
            }
        ],
        execute: function () {/*
             * Copyright 2008 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            // import java.util.SortedSet;
            // import java.util.UUID;
            /**
             * Envelope for enclosing an OFX request.
             *
             * @author Ryan Heaton
             * @see "Section 2.4.3, OFX Spec"
             */
            RequestEnvelope = /** @class */ (function () {
                function RequestEnvelope(UID) {
                    if (UID === void 0) { UID = uuid_1.default.v1(); }
                    this.security = ApplicationSecurity_1.ApplicationSecurity.NONE;
                    this.UID = UID;
                }
                /**
                 * The security of this envelope.
                 *
                 * @return The security of this envelope.
                 * @see "Section 2.2, OFX spec"
                 */
                RequestEnvelope.prototype.getSecurity = function () {
                    return this.security;
                };
                /**
                 * The security of this envelope.
                 *
                 * @param security The security of this envelope.
                 * @see "Section 2.2, OFX spec"
                 */
                RequestEnvelope.prototype.setSecurity = function (security) {
                    this.security = security;
                };
                /**
                 * The UID for the envelope.
                 *
                 * @return The UID for the envelope.
                 * @see "Section 2.2, OFX spec"
                 */
                RequestEnvelope.prototype.getUID = function () {
                    return this.UID;
                };
                /**
                 * The UID for the envelope.
                 *
                 * @param UID The UID for the envelope.
                 * @see "Section 2.2, OFX spec"
                 */
                RequestEnvelope.prototype.setUID = function (UID) {
                    this.UID = UID;
                };
                /**
                 * The UID of the last-processed request/response (used for file-based error recovery).
                 *
                 * @return The UID of the last-processed request/response (used for file-based error recovery).
                 * @see "Section 2.2, OFX spec"
                 */
                RequestEnvelope.prototype.getLastProcessedUID = function () {
                    return this.lastProcessedUID;
                };
                /**
                 * The UID of the last-processed request/response (used for file-based error recovery).
                 *
                 * @param lastProcessedUID The UID of the last-processed request/response (used for file-based error recovery).
                 * @see "Section 2.2, OFX spec"
                 */
                RequestEnvelope.prototype.setLastProcessedUID = function (lastProcessedUID) {
                    this.lastProcessedUID = lastProcessedUID;
                };
                /**
                 * The message sets that make up the content of this request.
                 *
                 * @return The message sets that make up the content of this request.
                 * @see "Section 2.4.5, OFX Spec"
                 */
                RequestEnvelope.prototype.getMessageSets = function () {
                    return this.messageSets;
                };
                /**
                 * The message sets that make up the content of this request.
                 *
                 * @param messageSets The message sets that make up the content of this request.
                 * @see "Section 2.4.5, OFX Spec"
                 */
                RequestEnvelope.prototype.setMessageSets = function (messageSets) {
                    this.messageSets = messageSets;
                };
                return RequestEnvelope;
            }());
            exports_86("RequestEnvelope", RequestEnvelope);
            Aggregate_add_2.Aggregate_add(RequestEnvelope, "OFX");
            Header_add_1.Header_add(RequestEnvelope, { name: "SECURITY", type: ApplicationSecurity_1.ApplicationSecurity, read: RequestEnvelope.prototype.getSecurity, write: RequestEnvelope.prototype.setSecurity });
            Header_add_1.Header_add(RequestEnvelope, { name: "NEWFILEUID", type: String, read: RequestEnvelope.prototype.getUID, write: RequestEnvelope.prototype.setUID });
            Header_add_1.Header_add(RequestEnvelope, { name: "OLDFILEUID", type: String, read: RequestEnvelope.prototype.getLastProcessedUID, write: RequestEnvelope.prototype.setLastProcessedUID });
            ChildAggregate_add_20.ChildAggregate_add(RequestEnvelope, { order: 1, type: SortedSet_3.SortedSet, collectionEntryType: RequestMessageSet_1.RequestMessageSet, read: RequestEnvelope.prototype.getMessageSets, write: RequestEnvelope.prototype.setMessageSets });
        }
    };
});
System.register("domain/data/ResponseMessageSet", [], function (exports_87, context_87) {
    "use strict";
    var ResponseMessageSet;
    var __moduleName = context_87 && context_87.id;
    return {
        setters: [],
        execute: function () {
            /**
             * A message set enclosed in a response envelope.
             *
             * @author Ryan Heaton
             */
            ResponseMessageSet /*implements Comparable<ResponseMessageSet>*/ = /** @class */ (function () {
                function ResponseMessageSet() {
                    this.version = "1";
                }
                /**
                 * The version of this message set.
                 *
                 * @return The version of this message set.
                 */
                ResponseMessageSet.prototype.getVersion = function () {
                    return this.version;
                };
                /**
                 * The version of this message set.
                 *
                 * @param version The version of this message set.
                 */
                ResponseMessageSet.prototype.setVersion = function (version) {
                    this.version = version;
                };
                /*
                  // Inherited.
                  public compareTo(o: ResponseMessageSet): number {
                    return getType().compareTo(o.getType());
                  }
                */
                ResponseMessageSet.contentCompare = function (left, right) {
                    return left.getType() - right.getType();
                };
                return ResponseMessageSet;
            }());
            exports_87("ResponseMessageSet", ResponseMessageSet) /*implements Comparable<ResponseMessageSet>*/;
        }
    };
});
System.register("domain/data/common/StatusHolder", [], function (exports_88, context_88) {
    "use strict";
    var __moduleName = context_88 && context_88.id;
    function instanceof_StatusHolder(obj) {
        return (obj instanceof Object
            && (typeof obj.getStatusHolderName === 'function')
            && (typeof obj.getStatus === 'function'));
    }
    exports_88("instanceof_StatusHolder", instanceof_StatusHolder);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("domain/data/signon/FinancialInstitution", ["meta/Aggregate_add", "meta/Element_add"], function (exports_89, context_89) {
    "use strict";
    var Aggregate_Add_26, Element_add_25, FinancialInstitution;
    var __moduleName = context_89 && context_89.id;
    return {
        setters: [
            function (Aggregate_Add_26_1) {
                Aggregate_Add_26 = Aggregate_Add_26_1;
            },
            function (Element_add_25_1) {
                Element_add_25 = Element_add_25_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            FinancialInstitution = /** @class */ (function () {
                function FinancialInstitution() {
                }
                /**
                 * Financial institution id.
                 *
                 * @return Financial institution id.
                 */
                FinancialInstitution.prototype.getId = function () {
                    return this.id;
                };
                /**
                 * Financial institution id.
                 *
                 * @param id Financial institution id.
                 */
                FinancialInstitution.prototype.setId = function (id) {
                    this.id = id;
                };
                /**
                 * The organization.
                 *
                 * @return The organization.
                 */
                FinancialInstitution.prototype.getOrganization = function () {
                    return this.organization;
                };
                /**
                 * The organization.
                 *
                 * @param organization The organization.
                 */
                FinancialInstitution.prototype.setOrganization = function (organization) {
                    this.organization = organization;
                };
                return FinancialInstitution;
            }());
            exports_89("FinancialInstitution", FinancialInstitution);
            Aggregate_Add_26.Aggregate_add(FinancialInstitution, "FI");
            Element_add_25.Element_add(FinancialInstitution, { name: "FID", order: 10, type: String, read: FinancialInstitution.prototype.getId, write: FinancialInstitution.prototype.setId });
            Element_add_25.Element_add(FinancialInstitution, { name: "ORG", required: true, order: 0, type: String, read: FinancialInstitution.prototype.getOrganization, write: FinancialInstitution.prototype.setOrganization });
        }
    };
});
System.register("domain/data/signon/SignonResponse", ["domain/data/ResponseMessage", "domain/data/common/Status", "domain/data/signon/FinancialInstitution", "meta/Aggregate_add", "meta/ChildAggregate_add", "meta/Element_add"], function (exports_90, context_90) {
    "use strict";
    var ResponseMessage_2, Status_1, FinancialInstitution_1, Aggregate_Add_27, ChildAggregate_add_21, Element_add_26, SignonResponse;
    var __moduleName = context_90 && context_90.id;
    return {
        setters: [
            function (ResponseMessage_2_1) {
                ResponseMessage_2 = ResponseMessage_2_1;
            },
            function (Status_1_1) {
                Status_1 = Status_1_1;
            },
            function (FinancialInstitution_1_1) {
                FinancialInstitution_1 = FinancialInstitution_1_1;
            },
            function (Aggregate_Add_27_1) {
                Aggregate_Add_27 = Aggregate_Add_27_1;
            },
            function (ChildAggregate_add_21_1) {
                ChildAggregate_add_21 = ChildAggregate_add_21_1;
            },
            function (Element_add_26_1) {
                Element_add_26 = Element_add_26_1;
            }
        ],
        execute: function () {
            /**
             * The signon response message.
             *
             * @author Ryan Heaton
             * @see "Section 2.5.1.2, OFX Spec."
             */
            SignonResponse = /** @class */ (function (_super) {
                __extends(SignonResponse, _super);
                function SignonResponse() {
                    var _this = _super.call(this) || this;
                    _this.language = "ENG"; //Locale.US.getISO3Language();
                    return _this;
                }
                SignonResponse.prototype.getResponseMessageName = function () {
                    return "signon";
                };
                SignonResponse.prototype.getStatusHolderName = function () {
                    return this.getResponseMessageName();
                };
                /**
                 * The signon response status.
                 *
                 * @return The signon response status.
                 */
                SignonResponse.prototype.getStatus = function () {
                    return this.status;
                };
                /**
                 * The signon response status.
                 *
                 * @param status The signon response status.
                 */
                SignonResponse.prototype.setStatus = function (status) {
                    this.status = status;
                };
                /**
                 * The timestamp of this response.
                 *
                 * @return The timestamp of this response.
                 */
                SignonResponse.prototype.getTimestamp = function () {
                    return this.timestamp;
                };
                /**
                 * The timestamp of this response.
                 *
                 * @param timestamp The timestamp of this response.
                 */
                SignonResponse.prototype.setTimestamp = function (timestamp) {
                    this.timestamp = timestamp;
                };
                /**
                 * The userkey that can be used instead of the username/password.
                 *
                 * @return The userkey that can be used instead of the username/password.
                 */
                SignonResponse.prototype.getUserKey = function () {
                    return this.userKey;
                };
                /**
                 * The userkey that can be used instead of the username/password.
                 *
                 * @param userKey The userkey that can be used instead of the username/password.
                 */
                SignonResponse.prototype.setUserKey = function (userKey) {
                    this.userKey = userKey;
                };
                /**
                 * The date/time of the expiration of the user key.
                 *
                 * @return The date/time of the expiration of the user key.
                 */
                SignonResponse.prototype.getUserKeyExpiration = function () {
                    return this.userKeyExpiration;
                };
                /**
                 * The date/time of the expiration of the user key.
                 *
                 * @param userKeyExpiration The date/time of the expiration of the user key.
                 */
                SignonResponse.prototype.setUserKeyExpiration = function (userKeyExpiration) {
                    this.userKeyExpiration = userKeyExpiration;
                };
                /**
                 * The three-letter langauge code.
                 *
                 * @return The three-letter langauge code.
                 * @see java.util.Locale#getISO3Language()
                 */
                SignonResponse.prototype.getLanguage = function () {
                    return this.language;
                };
                /**
                 * The three-letter langauge code.
                 *
                 * @param language The three-letter langauge code.
                 */
                SignonResponse.prototype.setLanguage = function (language) {
                    this.language = language;
                };
                /**
                 * The date/time that the FI profile was last updated.
                 *
                 * @return The date/time that the FI profile was last updated.
                 */
                SignonResponse.prototype.getProfileLastUpdated = function () {
                    return this.profileLastUpdated;
                };
                /**
                 * The date/time that the FI profile was last updated.
                 *
                 * @param profileLastUpdated The date/time that the FI profile was last updated.
                 */
                SignonResponse.prototype.setProfileLastUpdated = function (profileLastUpdated) {
                    this.profileLastUpdated = profileLastUpdated;
                };
                /**
                 * The date/time that the user's account information was updated.
                 *
                 * @return The date/time that the user's account information was updated.
                 */
                SignonResponse.prototype.getAccountLastUpdated = function () {
                    return this.accountLastUpdated;
                };
                /**
                 * The date/time that the user's account information was updated.
                 *
                 * @param accountLastUpdated The date/time that the user's account information was updated.
                 */
                SignonResponse.prototype.setAccountLastUpdated = function (accountLastUpdated) {
                    this.accountLastUpdated = accountLastUpdated;
                };
                /**
                 * The financial instutution identity information.
                 *
                 * @return The financial instutution identity information.
                 */
                SignonResponse.prototype.getFinancialInstitution = function () {
                    return this.financialInstitution;
                };
                /**
                 * The financial instutution identity information.
                 *
                 * @param financialInstitution The financial instutution identity information.
                 */
                SignonResponse.prototype.setFinancialInstitution = function (financialInstitution) {
                    this.financialInstitution = financialInstitution;
                };
                /**
                 * The session id for the client.
                 *
                 * @return The session id for the client.
                 */
                SignonResponse.prototype.getSessionId = function () {
                    return this.sessionId;
                };
                /**
                 * The session id for the client.
                 *
                 * @param sessionId The session id for the client.
                 */
                SignonResponse.prototype.setSessionId = function (sessionId) {
                    this.sessionId = sessionId;
                };
                /**
                 * The access key that the client should return in the next sign-on requuest.
                 *
                 * @return The access key that the client should return in the next sign-on requuest.
                 */
                SignonResponse.prototype.getAccessKey = function () {
                    return this.accessKey;
                };
                /**
                 * The access key that the client should return in the next sign-on requuest.
                 *
                 * @param accessKey The access key that the client should return in the next sign-on requuest.
                 */
                SignonResponse.prototype.setAccessKey = function (accessKey) {
                    this.accessKey = accessKey;
                };
                return SignonResponse;
            }(ResponseMessage_2.ResponseMessage));
            exports_90("SignonResponse", SignonResponse);
            Aggregate_Add_27.Aggregate_add(SignonResponse, "SONRS");
            ChildAggregate_add_21.ChildAggregate_add(SignonResponse, { required: true, order: 0, type: Status_1.Status, read: SignonResponse.prototype.getStatus, write: SignonResponse.prototype.setStatus });
            Element_add_26.Element_add(SignonResponse, { name: "DTSERVER", required: true, order: 10, type: Date, read: SignonResponse.prototype.getTimestamp, write: SignonResponse.prototype.setTimestamp });
            Element_add_26.Element_add(SignonResponse, { name: "USERKEY", order: 20, type: String, read: SignonResponse.prototype.getUserKey, write: SignonResponse.prototype.setUserKey });
            Element_add_26.Element_add(SignonResponse, { name: "TSKEYEXPIRE", order: 30, type: Date, read: SignonResponse.prototype.getUserKeyExpiration, write: SignonResponse.prototype.setUserKeyExpiration });
            Element_add_26.Element_add(SignonResponse, { name: "LANGUAGE", required: true, order: 40, type: String, read: SignonResponse.prototype.getLanguage, write: SignonResponse.prototype.setLanguage });
            Element_add_26.Element_add(SignonResponse, { name: "DTPROFUP", order: 50, type: Date, read: SignonResponse.prototype.getProfileLastUpdated, write: SignonResponse.prototype.setProfileLastUpdated });
            Element_add_26.Element_add(SignonResponse, { name: "DTACCTUP", order: 60, type: Date, read: SignonResponse.prototype.getAccountLastUpdated, write: SignonResponse.prototype.setAccountLastUpdated });
            ChildAggregate_add_21.ChildAggregate_add(SignonResponse, { order: 70, type: FinancialInstitution_1.FinancialInstitution, read: SignonResponse.prototype.getFinancialInstitution, write: SignonResponse.prototype.setFinancialInstitution });
            Element_add_26.Element_add(SignonResponse, { name: "SESSCOOKIE", order: 80, type: String, read: SignonResponse.prototype.getSessionId, write: SignonResponse.prototype.setSessionId });
            Element_add_26.Element_add(SignonResponse, { name: "ACCESSKEY", order: 90, type: String, read: SignonResponse.prototype.getAccessKey, write: SignonResponse.prototype.setAccessKey });
        }
    };
});
System.register("domain/data/TransactionWrappedResponseMessage", ["domain/data/ResponseMessage", "domain/data/common/Status", "meta/Element_add", "meta/ChildAggregate_add"], function (exports_91, context_91) {
    "use strict";
    var ResponseMessage_3, Status_2, Element_add_27, ChildAggregate_add_22, TransactionWrappedResponseMessage;
    var __moduleName = context_91 && context_91.id;
    return {
        setters: [
            function (ResponseMessage_3_1) {
                ResponseMessage_3 = ResponseMessage_3_1;
            },
            function (Status_2_1) {
                Status_2 = Status_2_1;
            },
            function (Element_add_27_1) {
                Element_add_27 = Element_add_27_1;
            },
            function (ChildAggregate_add_22_1) {
                ChildAggregate_add_22 = ChildAggregate_add_22_1;
            }
        ],
        execute: function () {
            /**
             * A response message wrapped in a transaction.
             *
             * @author Ryan Heaton
             * @see "Section 2.4.6, OFX Spec"
             */
            TransactionWrappedResponseMessage = /** @class */ (function (_super) {
                __extends(TransactionWrappedResponseMessage, _super);
                function TransactionWrappedResponseMessage() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * UID of this transaction.
                 *
                 * @return UID of this transaction.
                 */
                TransactionWrappedResponseMessage.prototype.getUID = function () {
                    return this.UID;
                };
                /**
                 * UID of this transaction.
                 *
                 * @param UID UID of this transaction.
                 */
                TransactionWrappedResponseMessage.prototype.setUID = function (UID) {
                    this.UID = UID;
                };
                /**
                 * Client cookie (echoed back by the response).
                 *
                 * @return Client cookie (echoed back by the response).
                 */
                TransactionWrappedResponseMessage.prototype.getClientCookie = function () {
                    return this.clientCookie;
                };
                /**
                 * Client cookie (echoed back by the response).
                 *
                 * @param clientCookie Client cookie (echoed back by the response).
                 */
                TransactionWrappedResponseMessage.prototype.setClientCookie = function (clientCookie) {
                    this.clientCookie = clientCookie;
                };
                // Inherited.
                TransactionWrappedResponseMessage.prototype.getStatusHolderName = function () {
                    return this.getResponseMessageName();
                };
                // Inherited.
                TransactionWrappedResponseMessage.prototype.getResponseMessageName = function () {
                    var name = "transaction response";
                    if (this.getWrappedMessage() != null) {
                        name = this.getWrappedMessage().getResponseMessageName() + " transaction";
                    }
                    //    else if ((<any>(<Object>this).constructor).Aggregate) {
                    //      // TODO- does this work?
                    //      var aggregate: AggregateInfo = (<any>(<Object>this).constructor).Aggregate;
                    //      name = aggregate.getName() + " transaction";
                    //    }
                    return name;
                };
                /**
                 * Status of the transaction.
                 *
                 * @return Status of the transaction.
                 */
                TransactionWrappedResponseMessage.prototype.getStatus = function () {
                    return this.status;
                };
                /**
                 * Status of the transaction.
                 *
                 * @param status Status of the transaction.
                 */
                TransactionWrappedResponseMessage.prototype.setStatus = function (status) {
                    this.status = status;
                };
                return TransactionWrappedResponseMessage;
            }(ResponseMessage_3.ResponseMessage));
            exports_91("TransactionWrappedResponseMessage", TransactionWrappedResponseMessage);
            Element_add_27.Element_add(TransactionWrappedResponseMessage, { name: "TRNUID", required: true, order: 0, type: String, read: TransactionWrappedResponseMessage.prototype.getUID, write: TransactionWrappedResponseMessage.prototype.setUID });
            Element_add_27.Element_add(TransactionWrappedResponseMessage, { name: "CLTCOOKIE", order: 20, type: String, read: TransactionWrappedResponseMessage.prototype.getClientCookie, write: TransactionWrappedResponseMessage.prototype.setClientCookie });
            ChildAggregate_add_22.ChildAggregate_add(TransactionWrappedResponseMessage, { required: true, order: 10, type: Status_2.Status, read: TransactionWrappedResponseMessage.prototype.getStatus, write: TransactionWrappedResponseMessage.prototype.setStatus });
        }
    };
});
System.register("domain/data/signon/PasswordChangeResponse", ["domain/data/ResponseMessage", "meta/Aggregate_add", "meta/Element_add"], function (exports_92, context_92) {
    "use strict";
    var ResponseMessage_4, Aggregate_Add_28, Element_add_28, PasswordChangeResponse;
    var __moduleName = context_92 && context_92.id;
    return {
        setters: [
            function (ResponseMessage_4_1) {
                ResponseMessage_4 = ResponseMessage_4_1;
            },
            function (Aggregate_Add_28_1) {
                Aggregate_Add_28 = Aggregate_Add_28_1;
            },
            function (Element_add_28_1) {
                Element_add_28 = Element_add_28_1;
            }
        ],
        execute: function () {
            /**
             * Response to a change a user password request.
             *
             * @author Ryan Heaton
             * @see "Section 2.5.2.2, OFX Spec."
             */
            PasswordChangeResponse = /** @class */ (function (_super) {
                __extends(PasswordChangeResponse, _super);
                function PasswordChangeResponse() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * The id of the user changing password.
                 *
                 * @return The id of the user changing password.
                 */
                PasswordChangeResponse.prototype.getUserId = function () {
                    return this.userId;
                };
                // Inherited.
                PasswordChangeResponse.prototype.getResponseMessageName = function () {
                    return "password change";
                };
                /**
                 * The id of the user changing password.
                 *
                 * @param userId The id of the user changing password.
                 */
                PasswordChangeResponse.prototype.setUserId = function (userId) {
                    this.userId = userId;
                };
                /**
                 * The timestamp of the password change.
                 *
                 * @return The timestamp of the password change.
                 */
                PasswordChangeResponse.prototype.getChangeTimestamp = function () {
                    return this.changeTimestamp;
                };
                /**
                 * The timestamp of the password change.
                 *
                 * @param changeTimestamp The timestamp of the password change.
                 */
                PasswordChangeResponse.prototype.setChangeTimestamp = function (changeTimestamp) {
                    this.changeTimestamp = changeTimestamp;
                };
                return PasswordChangeResponse;
            }(ResponseMessage_4.ResponseMessage));
            exports_92("PasswordChangeResponse", PasswordChangeResponse);
            Aggregate_Add_28.Aggregate_add(PasswordChangeResponse, "PINCHRQ");
            Element_add_28.Element_add(PasswordChangeResponse, { name: "USERID", required: true, order: 0, type: String, read: PasswordChangeResponse.prototype.getUserId, write: PasswordChangeResponse.prototype.setUserId });
            Element_add_28.Element_add(PasswordChangeResponse, { name: "DTCHANGED", order: 10, type: Date, read: PasswordChangeResponse.prototype.getChangeTimestamp, write: PasswordChangeResponse.prototype.setChangeTimestamp });
        }
    };
});
System.register("domain/data/signon/PasswordChangeResponseTransaction", ["domain/data/TransactionWrappedResponseMessage", "domain/data/signon/PasswordChangeResponse", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_93, context_93) {
    "use strict";
    var TransactionWrappedResponseMessage_1, PasswordChangeResponse_1, Aggregate_Add_29, ChildAggregate_add_23, PasswordChangeResponseTransaction;
    var __moduleName = context_93 && context_93.id;
    return {
        setters: [
            function (TransactionWrappedResponseMessage_1_1) {
                TransactionWrappedResponseMessage_1 = TransactionWrappedResponseMessage_1_1;
            },
            function (PasswordChangeResponse_1_1) {
                PasswordChangeResponse_1 = PasswordChangeResponse_1_1;
            },
            function (Aggregate_Add_29_1) {
                Aggregate_Add_29 = Aggregate_Add_29_1;
            },
            function (ChildAggregate_add_23_1) {
                ChildAggregate_add_23 = ChildAggregate_add_23_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            PasswordChangeResponseTransaction = /** @class */ (function (_super) {
                __extends(PasswordChangeResponseTransaction, _super);
                function PasswordChangeResponseTransaction() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * The message.
                 *
                 * @return The message.
                 */
                PasswordChangeResponseTransaction.prototype.getMessage = function () {
                    return this.message;
                };
                /**
                 * The message.
                 *
                 * @param message The message.
                 */
                PasswordChangeResponseTransaction.prototype.setMessage = function (message) {
                    this.message = message;
                };
                // Inherited.
                PasswordChangeResponseTransaction.prototype.getWrappedMessage = function () {
                    return this.getMessage();
                };
                return PasswordChangeResponseTransaction;
            }(TransactionWrappedResponseMessage_1.TransactionWrappedResponseMessage));
            exports_93("PasswordChangeResponseTransaction", PasswordChangeResponseTransaction);
            Aggregate_Add_29.Aggregate_add(PasswordChangeResponseTransaction, "PINCHTRNRS");
            ChildAggregate_add_23.ChildAggregate_add(PasswordChangeResponseTransaction, { required: true, order: 30, type: PasswordChangeResponse_1.PasswordChangeResponse, read: PasswordChangeResponseTransaction.prototype.getMessage, write: PasswordChangeResponseTransaction.prototype.setMessage });
        }
    };
});
System.register("domain/data/signon/SignonResponseMessageSet", ["domain/data/ResponseMessageSet", "domain/data/signon/SignonResponse", "domain/data/signon/PasswordChangeResponseTransaction", "domain/data/MessageSetType", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_94, context_94) {
    "use strict";
    var ResponseMessageSet_1, SignonResponse_1, PasswordChangeResponseTransaction_1, MessageSetType_1, Aggregate_Add_30, ChildAggregate_add_24, SignonResponseMessageSet;
    var __moduleName = context_94 && context_94.id;
    return {
        setters: [
            function (ResponseMessageSet_1_1) {
                ResponseMessageSet_1 = ResponseMessageSet_1_1;
            },
            function (SignonResponse_1_1) {
                SignonResponse_1 = SignonResponse_1_1;
            },
            function (PasswordChangeResponseTransaction_1_1) {
                PasswordChangeResponseTransaction_1 = PasswordChangeResponseTransaction_1_1;
            },
            function (MessageSetType_1_1) {
                MessageSetType_1 = MessageSetType_1_1;
            },
            function (Aggregate_Add_30_1) {
                Aggregate_Add_30 = Aggregate_Add_30_1;
            },
            function (ChildAggregate_add_24_1) {
                ChildAggregate_add_24 = ChildAggregate_add_24_1;
            }
        ],
        execute: function () {
            /**
             * The sign-on response message set.
             *
             * @author Ryan Heaton
             * @see "Section 2.5, OFX Spec."
             */
            SignonResponseMessageSet = /** @class */ (function (_super) {
                __extends(SignonResponseMessageSet, _super);
                function SignonResponseMessageSet() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                SignonResponseMessageSet.prototype.getType = function () {
                    return MessageSetType_1.MessageSetType.signon;
                };
                /**
                 * The message for this message set.
                 *
                 * @return The message for this message set.
                 */
                SignonResponseMessageSet.prototype.getSignonResponse = function () {
                    return this.signonResponse;
                };
                /**
                 * The message for this message set.
                 *
                 * @param signonResponse The message for this message set.
                 */
                SignonResponseMessageSet.prototype.setSignonResponse = function (signonResponse) {
                    this.signonResponse = signonResponse;
                };
                /**
                 * The password change response.
                 *
                 * @return The password change response.
                 */
                SignonResponseMessageSet.prototype.getPasswordChangeResponse = function () {
                    return this.passwordChangeResponse;
                };
                /**
                 * The password change response.
                 *
                 * @param passwordChangeResponse The password change response.
                 */
                SignonResponseMessageSet.prototype.setPasswordChangeResponse = function (passwordChangeResponse) {
                    this.passwordChangeResponse = passwordChangeResponse;
                };
                //todo: challenge request/response
                // Inherited.
                SignonResponseMessageSet.prototype.getResponseMessages = function () {
                    var messages = new Array();
                    if (this.getSignonResponse() != null) {
                        messages.push(this.getSignonResponse());
                    }
                    return messages;
                };
                return SignonResponseMessageSet;
            }(ResponseMessageSet_1.ResponseMessageSet));
            exports_94("SignonResponseMessageSet", SignonResponseMessageSet);
            Aggregate_Add_30.Aggregate_add(SignonResponseMessageSet, "SIGNONMSGSRSV1");
            ChildAggregate_add_24.ChildAggregate_add(SignonResponseMessageSet, { order: 0, type: SignonResponse_1.SignonResponse, read: SignonResponseMessageSet.prototype.getSignonResponse, write: SignonResponseMessageSet.prototype.setSignonResponse });
            ChildAggregate_add_24.ChildAggregate_add(SignonResponseMessageSet, { order: 10, type: PasswordChangeResponseTransaction_1.PasswordChangeResponseTransaction, read: SignonResponseMessageSet.prototype.getPasswordChangeResponse, write: SignonResponseMessageSet.prototype.setPasswordChangeResponse });
        }
    };
});
System.register("domain/data/ResponseEnvelope", ["meta/Aggregate_add", "meta/Header_add", "meta/ChildAggregate_add", "domain/data/ApplicationSecurity", "collections/SortedSet", "domain/data/ResponseMessageSet", "domain/data/MessageSetType"], function (exports_95, context_95) {
    "use strict";
    var Aggregate_Add_31, Header_add_2, ChildAggregate_add_25, ApplicationSecurity_2, SortedSet_4, ResponseMessageSet_2, MessageSetType_2, ResponseEnvelope;
    var __moduleName = context_95 && context_95.id;
    return {
        setters: [
            function (Aggregate_Add_31_1) {
                Aggregate_Add_31 = Aggregate_Add_31_1;
            },
            function (Header_add_2_1) {
                Header_add_2 = Header_add_2_1;
            },
            function (ChildAggregate_add_25_1) {
                ChildAggregate_add_25 = ChildAggregate_add_25_1;
            },
            function (ApplicationSecurity_2_1) {
                ApplicationSecurity_2 = ApplicationSecurity_2_1;
            },
            function (SortedSet_4_1) {
                SortedSet_4 = SortedSet_4_1;
            },
            function (ResponseMessageSet_2_1) {
                ResponseMessageSet_2 = ResponseMessageSet_2_1;
            },
            function (MessageSetType_2_1) {
                MessageSetType_2 = MessageSetType_2_1;
            }
        ],
        execute: function () {
            //import java.util.SortedSet;
            /**
             * Envelope for enclosing an OFX response.
             *
             * @author Ryan Heaton
             * @see "Section 2.4.3, OFX Spec"
             */
            ResponseEnvelope = /** @class */ (function () {
                function ResponseEnvelope() {
                }
                /**
                 * The security of this envelope.
                 *
                 * @return The security of this envelope.
                 * @see "Section 2.2, OFX spec"
                 */
                ResponseEnvelope.prototype.getSecurity = function () {
                    return this.security;
                };
                /**
                 * The security of this envelope.
                 *
                 * @param security The security of this envelope.
                 * @see "Section 2.2, OFX spec"
                 */
                ResponseEnvelope.prototype.setSecurity = function (security) {
                    this.security = security;
                };
                /**
                 * The UID for the envelope.
                 *
                 * @return The UID for the envelope.
                 * @see "Section 2.2, OFX spec"
                 */
                ResponseEnvelope.prototype.getUID = function () {
                    return this.UID;
                };
                /**
                 * The UID for the envelope.
                 *
                 * @param UID The UID for the envelope.
                 * @see "Section 2.2, OFX spec"
                 */
                ResponseEnvelope.prototype.setUID = function (UID) {
                    this.UID = UID;
                };
                /**
                 * The message sets that make up the content of this response.
                 *
                 * @return The message sets that make up the content of this response.
                 * @see "Section 2.4.5, OFX Spec"
                 */
                ResponseEnvelope.prototype.getMessageSets = function () {
                    return this.messageSets;
                };
                /**
                 * The message sets that make up the content of this response.
                 *
                 * @param messageSets The message sets that make up the content of this response.
                 * @see "Section 2.4.5, OFX Spec"
                 */
                ResponseEnvelope.prototype.setMessageSets = function (messageSets) {
                    this.messageSets = messageSets;
                };
                /**
                 * Helper method for looking up the signon response.
                 *
                 * @return The signon response, or null if none found.
                 */
                ResponseEnvelope.prototype.getSignonResponse = function () {
                    var type = MessageSetType_2.MessageSetType.signon;
                    var message = this.getMessageSet(type);
                    if (message != null) {
                        return message.getSignonResponse();
                    }
                    else {
                        return null;
                    }
                };
                /**
                 * Get the message set of the specified type.
                 *
                 * @param type The type.
                 * @return The message set, or null.
                 */
                ResponseEnvelope.prototype.getMessageSet = function (type) {
                    var message = null;
                    if (this.messageSets != null) {
                        for (var i in this.messageSets.values()) {
                            var messageSet = this.messageSets.values()[i];
                            if (messageSet.getType() == type) {
                                message = messageSet;
                                break;
                            }
                        }
                    }
                    return message;
                };
                return ResponseEnvelope;
            }());
            exports_95("ResponseEnvelope", ResponseEnvelope);
            Aggregate_Add_31.Aggregate_add(ResponseEnvelope, "OFX");
            Header_add_2.Header_add(ResponseEnvelope, { name: "SECURITY", type: ApplicationSecurity_2.ApplicationSecurity, read: ResponseEnvelope.prototype.getSecurity, write: ResponseEnvelope.prototype.setSecurity });
            Header_add_2.Header_add(ResponseEnvelope, { name: "NEWFILEUID", type: String, read: ResponseEnvelope.prototype.getUID, write: ResponseEnvelope.prototype.setUID });
            ChildAggregate_add_25.ChildAggregate_add(ResponseEnvelope, { order: 1, type: SortedSet_4.SortedSet, collectionEntryType: ResponseMessageSet_2.ResponseMessageSet, read: ResponseEnvelope.prototype.getMessageSets, write: ResponseEnvelope.prototype.setMessageSets });
        }
    };
});
System.register("client/net/OFXConnection", [], function (exports_96, context_96) {
    "use strict";
    var __moduleName = context_96 && context_96.id;
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("domain/data/signon/SignonRequest", ["meta/Aggregate_add", "domain/data/RequestMessage", "meta/Element_add", "meta/ChildAggregate_add", "domain/data/signon/FinancialInstitution"], function (exports_97, context_97) {
    "use strict";
    var Aggregate_Add_32, RequestMessage_1, Element_add_29, ChildAggregate_add_26, FinancialInstitution_2, SignonRequest;
    var __moduleName = context_97 && context_97.id;
    return {
        setters: [
            function (Aggregate_Add_32_1) {
                Aggregate_Add_32 = Aggregate_Add_32_1;
            },
            function (RequestMessage_1_1) {
                RequestMessage_1 = RequestMessage_1_1;
            },
            function (Element_add_29_1) {
                Element_add_29 = Element_add_29_1;
            },
            function (ChildAggregate_add_26_1) {
                ChildAggregate_add_26 = ChildAggregate_add_26_1;
            },
            function (FinancialInstitution_2_1) {
                FinancialInstitution_2 = FinancialInstitution_2_1;
            }
        ],
        execute: function () {
            SignonRequest = /** @class */ (function (_super) {
                __extends(SignonRequest, _super);
                function SignonRequest() {
                    var _this = _super.call(this) || this;
                    _this.language = "ENG"; //Locale.US.getISO3Language().toUpperCase();
                    _this.applicationId = "Money"; //many institutions just won't work with an unrecognized app id...
                    _this.applicationVersion = "1600"; //many institutions just won't work with an unrecognized app id...
                    return _this;
                }
                /**
                 * The date and time of the request.
                 *
                 * @return The date and time of the request.
                 */
                SignonRequest.prototype.getTimestamp = function () {
                    return this.timestamp;
                };
                /**
                 * The date and time of the request.
                 *
                 * @param timestamp The date and time of the request.
                 */
                SignonRequest.prototype.setTimestamp = function (timestamp) {
                    this.timestamp = timestamp;
                };
                /**
                 * The user id.
                 *
                 * @return The user id.
                 */
                SignonRequest.prototype.getUserId = function () {
                    return this.userId;
                };
                /**
                 * The user id.
                 *
                 * @param userId The user id.
                 */
                SignonRequest.prototype.setUserId = function (userId) {
                    this.userId = userId;
                };
                /**
                 * The password.
                 *
                 * @return The password.
                 */
                SignonRequest.prototype.getPassword = function () {
                    return this.password;
                };
                /**
                 * The password.
                 *
                 * @param password The password.
                 */
                SignonRequest.prototype.setPassword = function (password) {
                    this.password = password;
                };
                /**
                 * The user key provided by the server so as not to require further username/password authentication.
                 *
                 * @return The user key provided by the server so as not to require further username/password authentication.
                 */
                SignonRequest.prototype.getUserKey = function () {
                    return this.userKey;
                };
                /**
                 * The user key provided by the server so as not to require further username/password authentication.
                 *
                 * @param userKey The user key provided by the server so as not to require further username/password authentication.
                 */
                SignonRequest.prototype.setUserKey = function (userKey) {
                    this.userKey = userKey;
                };
                /**
                 * Whether to request the server to generate a user key.
                 *
                 * @return Whether to request the server to generate a user key.
                 */
                SignonRequest.prototype.getGenerateUserKey = function () {
                    return this.generateUserKey;
                };
                /**
                 * Whether to request the server to generate a user key.
                 *
                 * @param generateUserKey Whether to request the server to generate a user key.
                 */
                SignonRequest.prototype.setGenerateUserKey = function (generateUserKey) {
                    this.generateUserKey = generateUserKey;
                };
                /**
                 * The three-letter langauge code.
                 *
                 * @return The three-letter langauge code.
                 * @see java.util.Locale#getISO3Language()
                 */
                SignonRequest.prototype.getLanguage = function () {
                    return this.language;
                };
                /**
                 * The three-letter langauge code.
                 *
                 * @param language The three-letter langauge code.
                 */
                SignonRequest.prototype.setLanguage = function (language) {
                    this.language = language;
                };
                /**
                 * The financial institution.
                 *
                 * @return The financial institution.
                 */
                SignonRequest.prototype.getFinancialInstitution = function () {
                    return this.financialInstitution;
                };
                /**
                 * The financial institution.
                 *
                 * @param financialInstitution The financial institution.
                 */
                SignonRequest.prototype.setFinancialInstitution = function (financialInstitution) {
                    this.financialInstitution = financialInstitution;
                };
                /**
                 * The server-supplied session id.
                 *
                 * @return The server-supplied session id.
                 */
                SignonRequest.prototype.getSessionId = function () {
                    return this.sessionId;
                };
                /**
                 * The server-supplied session id.
                 *
                 * @param sessionId The server-supplied session id.
                 */
                SignonRequest.prototype.setSessionId = function (sessionId) {
                    this.sessionId = sessionId;
                };
                /**
                 * The application id.
                 *
                 * @return The application id.
                 */
                SignonRequest.prototype.getApplicationId = function () {
                    return this.applicationId;
                };
                /**
                 * The application id.
                 *
                 * @param applicationId The application id.
                 */
                SignonRequest.prototype.setApplicationId = function (applicationId) {
                    this.applicationId = applicationId;
                };
                /**
                 * The application version.
                 *
                 * @return The application version.
                 */
                SignonRequest.prototype.getApplicationVersion = function () {
                    return this.applicationVersion;
                };
                /**
                 * The application version.
                 *
                 * @param applicationVersion The application version.
                 */
                SignonRequest.prototype.setApplicationVersion = function (applicationVersion) {
                    this.applicationVersion = applicationVersion;
                };
                /**
                 * The client-supplied UID.
                 *
                 * @return The client-supplied UID.
                 */
                SignonRequest.prototype.getClientUID = function () {
                    return this.clientUID;
                };
                /**
                 * The client-supplied UID.
                 *
                 * @param clientUID The client-supplied UID.
                 */
                SignonRequest.prototype.setClientUID = function (clientUID) {
                    this.clientUID = clientUID;
                };
                /**
                 * Any additional credentials.
                 *
                 * @return Any additional credentials.
                 */
                SignonRequest.prototype.getAdditionalCredentials1 = function () {
                    return this.additionalCredentials1;
                };
                /**
                 * Any additional credentials.
                 *
                 * @param additionalCredentials1 Any additional credentials.
                 */
                SignonRequest.prototype.setAdditionalCredentials1 = function (additionalCredentials1) {
                    this.additionalCredentials1 = additionalCredentials1;
                };
                /**
                 * Any additional credentials.
                 *
                 * @return Any additional credentials.
                 */
                SignonRequest.prototype.getAdditionalCredentials2 = function () {
                    return this.additionalCredentials2;
                };
                /**
                 * Any additional credentials.
                 *
                 * @param additionalCredentials2 Any additional credentials.
                 */
                SignonRequest.prototype.setAdditionalCredentials2 = function (additionalCredentials2) {
                    this.additionalCredentials2 = additionalCredentials2;
                };
                /**
                 * The authentication token.
                 *
                 * @return The authentication token.
                 */
                SignonRequest.prototype.getAuthToken = function () {
                    return this.authToken;
                };
                /**
                 * The authentication token.
                 *
                 * @param authToken The authentication token.
                 */
                SignonRequest.prototype.setAuthToken = function (authToken) {
                    this.authToken = authToken;
                };
                /**
                 * The access key.
                 *
                 * @return The access key.
                 */
                SignonRequest.prototype.getAccessKey = function () {
                    return this.accessKey;
                };
                /**
                 * The access key.
                 *
                 * @param accessKey The access key.
                 */
                SignonRequest.prototype.setAccessKey = function (accessKey) {
                    this.accessKey = accessKey;
                };
                /**
                 * @see "Section 2.5.1"
                 */
                SignonRequest.ANONYMOUS_USER = "anonymous00000000000000000000000";
                return SignonRequest;
            }(RequestMessage_1.RequestMessage));
            exports_97("SignonRequest", SignonRequest);
            Aggregate_Add_32.Aggregate_add(SignonRequest, "SONRQ");
            Element_add_29.Element_add(SignonRequest, { name: "DTCLIENT", required: true, order: 0, type: Date, read: SignonRequest.prototype.getTimestamp, write: SignonRequest.prototype.setTimestamp });
            Element_add_29.Element_add(SignonRequest, { name: "USERID", order: 10, type: String, read: SignonRequest.prototype.getUserId, write: SignonRequest.prototype.setUserId });
            Element_add_29.Element_add(SignonRequest, { name: "USERPASS", order: 20, type: String, read: SignonRequest.prototype.getPassword, write: SignonRequest.prototype.setPassword });
            Element_add_29.Element_add(SignonRequest, { name: "USERKEY", order: 30, type: String, read: SignonRequest.prototype.getUserKey, write: SignonRequest.prototype.setUserKey });
            Element_add_29.Element_add(SignonRequest, { name: "GENUSERKEY", order: 40, type: Boolean, read: SignonRequest.prototype.getGenerateUserKey, write: SignonRequest.prototype.setGenerateUserKey });
            Element_add_29.Element_add(SignonRequest, { name: "LANGUAGE", required: true, order: 50, type: String, read: SignonRequest.prototype.getLanguage, write: SignonRequest.prototype.setLanguage });
            ChildAggregate_add_26.ChildAggregate_add(SignonRequest, { order: 60, type: FinancialInstitution_2.FinancialInstitution, read: SignonRequest.prototype.getFinancialInstitution, write: SignonRequest.prototype.setFinancialInstitution });
            Element_add_29.Element_add(SignonRequest, { name: "SESSCOOKIE", order: 70, type: String, read: SignonRequest.prototype.getSessionId, write: SignonRequest.prototype.setSessionId });
            Element_add_29.Element_add(SignonRequest, { name: "APPID", required: true, order: 80, type: String, read: SignonRequest.prototype.getApplicationId, write: SignonRequest.prototype.setApplicationId });
            Element_add_29.Element_add(SignonRequest, { name: "APPVER", required: true, order: 90, type: String, read: SignonRequest.prototype.getApplicationVersion, write: SignonRequest.prototype.setApplicationVersion });
            Element_add_29.Element_add(SignonRequest, { name: "CLIENTUID", order: 100, type: String, read: SignonRequest.prototype.getClientUID, write: SignonRequest.prototype.setClientUID });
            Element_add_29.Element_add(SignonRequest, { name: "USERCRED1", order: 110, type: String, read: SignonRequest.prototype.getAdditionalCredentials1, write: SignonRequest.prototype.setAdditionalCredentials1 });
            Element_add_29.Element_add(SignonRequest, { name: "USERCRED2", order: 120, type: String, read: SignonRequest.prototype.getAdditionalCredentials2, write: SignonRequest.prototype.setAdditionalCredentials2 });
            Element_add_29.Element_add(SignonRequest, { name: "AUTHTOKEN", order: 130, type: String, read: SignonRequest.prototype.getAuthToken, write: SignonRequest.prototype.setAuthToken });
            Element_add_29.Element_add(SignonRequest, { name: "ACCESSKEY", order: 140, type: String, read: SignonRequest.prototype.getAccessKey, write: SignonRequest.prototype.setAccessKey });
        }
    };
});
System.register("domain/data/TransactionWrappedRequestMessage", ["uuid", "domain/data/RequestMessage", "meta/Element_add"], function (exports_98, context_98) {
    "use strict";
    var uuid_2, RequestMessage_2, Element_add_30, TransactionWrappedRequestMessage;
    var __moduleName = context_98 && context_98.id;
    return {
        setters: [
            function (uuid_2_1) {
                uuid_2 = uuid_2_1;
            },
            function (RequestMessage_2_1) {
                RequestMessage_2 = RequestMessage_2_1;
            },
            function (Element_add_30_1) {
                Element_add_30 = Element_add_30_1;
            }
        ],
        execute: function () {
            /**
             * A request message wrapped in a transaction.
             *
             * @author Ryan Heaton
             * @see "Section 2.4.6, OFX Spec"
             */
            TransactionWrappedRequestMessage = /** @class */ (function (_super) {
                __extends(TransactionWrappedRequestMessage, _super);
                function TransactionWrappedRequestMessage(UID) {
                    if (UID === void 0) { UID = uuid_2.default.v1(); }
                    var _this = _super.call(this) || this;
                    _this.UID = UID;
                    return _this;
                }
                /**
                 * UID of this transaction.
                 *
                 * @return UID of this transaction.
                 */
                TransactionWrappedRequestMessage.prototype.getUID = function () {
                    return this.UID;
                };
                /**
                 * UID of this transaction.
                 *
                 * @param UID UID of this transaction.
                 */
                TransactionWrappedRequestMessage.prototype.setUID = function (UID) {
                    this.UID = UID;
                };
                /**
                 * Client cookie (echoed back by the response).
                 *
                 * @return Client cookie (echoed back by the response).
                 */
                TransactionWrappedRequestMessage.prototype.getClientCookie = function () {
                    return this.clientCookie;
                };
                /**
                 * Client cookie (echoed back by the response).
                 *
                 * @param clientCookie Client cookie (echoed back by the response).
                 */
                TransactionWrappedRequestMessage.prototype.setClientCookie = function (clientCookie) {
                    this.clientCookie = clientCookie;
                };
                /**
                 * The transaction authorization number.
                 *
                 * @return The transaction authorization number.
                 */
                TransactionWrappedRequestMessage.prototype.getTransactionAuthorizationNumber = function () {
                    return this.transactionAuthorizationNumber;
                };
                /**
                 * The transaction authorization number.
                 *
                 * @param transactionAuthorizationNumber The transaction authorization number.
                 */
                TransactionWrappedRequestMessage.prototype.setTransactionAuthorizationNumber = function (transactionAuthorizationNumber) {
                    this.transactionAuthorizationNumber = transactionAuthorizationNumber;
                };
                return TransactionWrappedRequestMessage;
            }(RequestMessage_2.RequestMessage));
            exports_98("TransactionWrappedRequestMessage", TransactionWrappedRequestMessage);
            Element_add_30.Element_add(TransactionWrappedRequestMessage, { name: "TRNUID", required: true, order: 0, type: String, read: TransactionWrappedRequestMessage.prototype.getUID, write: TransactionWrappedRequestMessage.prototype.setUID });
            Element_add_30.Element_add(TransactionWrappedRequestMessage, { name: "CLTCOOKIE", order: 10, type: String, read: TransactionWrappedRequestMessage.prototype.getClientCookie, write: TransactionWrappedRequestMessage.prototype.setClientCookie });
            Element_add_30.Element_add(TransactionWrappedRequestMessage, { name: "TAN", order: 20, type: String, read: TransactionWrappedRequestMessage.prototype.getTransactionAuthorizationNumber, write: TransactionWrappedRequestMessage.prototype.setTransactionAuthorizationNumber });
        }
    };
});
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("domain/data/profile/ClientRoutingCapability", [], function (exports_99, context_99) {
    "use strict";
    var ClientRoutingCapability;
    var __moduleName = context_99 && context_99.id;
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2008 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
             * @author Ryan Heaton
             * @see "Section 7.1.5, OFX Spec"
             */
            (function (ClientRoutingCapability) {
                ClientRoutingCapability[ClientRoutingCapability["NONE"] = 0] = "NONE";
                ClientRoutingCapability[ClientRoutingCapability["SERVICE"] = 1] = "SERVICE";
                ClientRoutingCapability[ClientRoutingCapability["MESSAGE_SET"] = 2] = "MESSAGE_SET";
            })(ClientRoutingCapability || (ClientRoutingCapability = {}));
            exports_99("ClientRoutingCapability", ClientRoutingCapability);
        }
    };
});
System.register("domain/data/profile/ProfileRequest", ["domain/data/RequestMessage", "domain/data/profile/ClientRoutingCapability", "meta/Aggregate_add", "meta/Element_add"], function (exports_100, context_100) {
    "use strict";
    var RequestMessage_3, ClientRoutingCapability_1, Aggregate_Add_33, Element_add_31, ProfileRequest;
    var __moduleName = context_100 && context_100.id;
    return {
        setters: [
            function (RequestMessage_3_1) {
                RequestMessage_3 = RequestMessage_3_1;
            },
            function (ClientRoutingCapability_1_1) {
                ClientRoutingCapability_1 = ClientRoutingCapability_1_1;
            },
            function (Aggregate_Add_33_1) {
                Aggregate_Add_33 = Aggregate_Add_33_1;
            },
            function (Element_add_31_1) {
                Element_add_31 = Element_add_31_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             * @see "Section 7.1.5, OFX Spec"
             */
            ProfileRequest = /** @class */ (function (_super) {
                __extends(ProfileRequest, _super);
                function ProfileRequest() {
                    var _this = _super.call(this) || this;
                    _this.routingCapability = ClientRoutingCapability_1.ClientRoutingCapability.MESSAGE_SET;
                    return _this;
                }
                /**
                 * The client routing capability.
                 *
                 * @return The client routing capability.
                 */
                ProfileRequest.prototype.getRoutingCapability = function () {
                    return this.routingCapability;
                };
                /**
                 * The client routing capability.
                 *
                 * @param routingCapability The client routing capability.
                 */
                ProfileRequest.prototype.setRoutingCapability = function (routingCapability) {
                    this.routingCapability = routingCapability;
                };
                /**
                 * The date the profile was last updated.
                 *
                 * @return The date the profile was last updated.
                 */
                ProfileRequest.prototype.getProfileLastUpdated = function () {
                    return this.profileLastUpdated;
                };
                /**
                 * The date the profile was last updated.
                 *
                 * @param profileLastUpdated The date the profile was last updated.
                 */
                ProfileRequest.prototype.setProfileLastUpdated = function (profileLastUpdated) {
                    this.profileLastUpdated = profileLastUpdated;
                };
                return ProfileRequest;
            }(RequestMessage_3.RequestMessage));
            exports_100("ProfileRequest", ProfileRequest);
            Aggregate_Add_33.Aggregate_add(ProfileRequest, "PROFRQ");
            Element_add_31.Element_add(ProfileRequest, { name: "CLIENTROUTING", order: 0, type: ClientRoutingCapability_1.ClientRoutingCapability, read: ProfileRequest.prototype.getRoutingCapability, write: ProfileRequest.prototype.setRoutingCapability });
            Element_add_31.Element_add(ProfileRequest, { name: "DTPROFUP", order: 10, type: Date, read: ProfileRequest.prototype.getProfileLastUpdated, write: ProfileRequest.prototype.setProfileLastUpdated });
        }
    };
});
System.register("domain/data/profile/ProfileRequestTransaction", ["domain/data/TransactionWrappedRequestMessage", "domain/data/profile/ProfileRequest", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_101, context_101) {
    "use strict";
    var TransactionWrappedRequestMessage_1, ProfileRequest_1, Aggregate_Add_34, ChildAggregate_add_27, ProfileRequestTransaction;
    var __moduleName = context_101 && context_101.id;
    return {
        setters: [
            function (TransactionWrappedRequestMessage_1_1) {
                TransactionWrappedRequestMessage_1 = TransactionWrappedRequestMessage_1_1;
            },
            function (ProfileRequest_1_1) {
                ProfileRequest_1 = ProfileRequest_1_1;
            },
            function (Aggregate_Add_34_1) {
                Aggregate_Add_34 = Aggregate_Add_34_1;
            },
            function (ChildAggregate_add_27_1) {
                ChildAggregate_add_27 = ChildAggregate_add_27_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            ProfileRequestTransaction = /** @class */ (function (_super) {
                __extends(ProfileRequestTransaction, _super);
                function ProfileRequestTransaction() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * The wrapped message.
                 *
                 * @return The wrapped message.
                 */
                ProfileRequestTransaction.prototype.getMessage = function () {
                    return this.message;
                };
                /**
                 * The wrapped message.
                 *
                 * @param message The wrapped message.
                 */
                ProfileRequestTransaction.prototype.setMessage = function (message) {
                    this.message = message;
                };
                // Inherited.
                ProfileRequestTransaction.prototype.setWrappedMessage = function (message) {
                    this.setMessage(message);
                };
                return ProfileRequestTransaction;
            }(TransactionWrappedRequestMessage_1.TransactionWrappedRequestMessage));
            exports_101("ProfileRequestTransaction", ProfileRequestTransaction);
            Aggregate_Add_34.Aggregate_add(ProfileRequestTransaction, "PROFTRNRQ");
            ChildAggregate_add_27.ChildAggregate_add(ProfileRequestTransaction, { required: true, order: 30, type: ProfileRequest_1.ProfileRequest, read: ProfileRequestTransaction.prototype.getMessage, write: ProfileRequestTransaction.prototype.setMessage });
        }
    };
});
System.register("domain/data/profile/ProfileRequestMessageSet", ["meta/Aggregate_add", "domain/data/RequestMessageSet", "domain/data/profile/ProfileRequestTransaction", "domain/data/MessageSetType", "meta/ChildAggregate_add"], function (exports_102, context_102) {
    "use strict";
    var Aggregate_Add_35, RequestMessageSet_2, ProfileRequestTransaction_1, MessageSetType_3, ChildAggregate_add_28, ProfileRequestMessageSet;
    var __moduleName = context_102 && context_102.id;
    return {
        setters: [
            function (Aggregate_Add_35_1) {
                Aggregate_Add_35 = Aggregate_Add_35_1;
            },
            function (RequestMessageSet_2_1) {
                RequestMessageSet_2 = RequestMessageSet_2_1;
            },
            function (ProfileRequestTransaction_1_1) {
                ProfileRequestTransaction_1 = ProfileRequestTransaction_1_1;
            },
            function (MessageSetType_3_1) {
                MessageSetType_3 = MessageSetType_3_1;
            },
            function (ChildAggregate_add_28_1) {
                ChildAggregate_add_28 = ChildAggregate_add_28_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             * @see "Section 7 OFX Spec"
             */
            ProfileRequestMessageSet = /** @class */ (function (_super) {
                __extends(ProfileRequestMessageSet, _super);
                function ProfileRequestMessageSet() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                ProfileRequestMessageSet.prototype.getType = function () {
                    return MessageSetType_3.MessageSetType.profile;
                };
                /**
                 * The profile request.
                 *
                 * @return The profile request.
                 */
                ProfileRequestMessageSet.prototype.getProfileRequest = function () {
                    return this.profileRequest;
                };
                /**
                 * The profile request.
                 *
                 * @param profileRequest The profile request.
                 */
                ProfileRequestMessageSet.prototype.setProfileRequest = function (profileRequest) {
                    this.profileRequest = profileRequest;
                };
                // Inherited.
                ProfileRequestMessageSet.prototype.getRequestMessages = function () {
                    var requestMessages = new Array();
                    if (this.getProfileRequest() != null) {
                        requestMessages.push(this.getProfileRequest());
                    }
                    return requestMessages;
                };
                return ProfileRequestMessageSet;
            }(RequestMessageSet_2.RequestMessageSet));
            exports_102("ProfileRequestMessageSet", ProfileRequestMessageSet);
            Aggregate_Add_35.Aggregate_add(ProfileRequestMessageSet, "PROFMSGSRQV1");
            ChildAggregate_add_28.ChildAggregate_add(ProfileRequestMessageSet, { required: true, order: 0, type: ProfileRequestTransaction_1.ProfileRequestTransaction, read: ProfileRequestMessageSet.prototype.getProfileRequest, write: ProfileRequestMessageSet.prototype.setProfileRequest });
        }
    };
});
System.register("domain/data/signup/AccountInfoRequest", ["domain/data/RequestMessage", "meta/Aggregate_add", "meta/Element_add"], function (exports_103, context_103) {
    "use strict";
    var RequestMessage_4, Aggregate_Add_36, Element_add_32, AccountInfoRequest;
    var __moduleName = context_103 && context_103.id;
    return {
        setters: [
            function (RequestMessage_4_1) {
                RequestMessage_4 = RequestMessage_4_1;
            },
            function (Aggregate_Add_36_1) {
                Aggregate_Add_36 = Aggregate_Add_36_1;
            },
            function (Element_add_32_1) {
                Element_add_32 = Element_add_32_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            AccountInfoRequest = /** @class */ (function (_super) {
                __extends(AccountInfoRequest, _super);
                function AccountInfoRequest() {
                    var _this = _super.call(this) || this;
                    _this.lastUpdated = new Date(0); //default is never updated.
                    return _this;
                }
                /**
                 * When the account info was last updated.
                 *
                 * @return When the account info was last updated.
                 */
                AccountInfoRequest.prototype.getLastUpdated = function () {
                    return this.lastUpdated;
                };
                /**
                 * When the account info was last updated.
                 *
                 * @param lastUpdated When the account info was last updated.
                 */
                AccountInfoRequest.prototype.setLastUpdated = function (lastUpdated) {
                    this.lastUpdated = lastUpdated;
                };
                return AccountInfoRequest;
            }(RequestMessage_4.RequestMessage));
            exports_103("AccountInfoRequest", AccountInfoRequest);
            Aggregate_Add_36.Aggregate_add(AccountInfoRequest, "ACCTINFORQ");
            Element_add_32.Element_add(AccountInfoRequest, { name: "DTACCTUP", required: true, order: 0, type: Date, read: AccountInfoRequest.prototype.getLastUpdated, write: AccountInfoRequest.prototype.setLastUpdated });
        }
    };
});
System.register("domain/data/signup/AccountInfoRequestTransaction", ["domain/data/TransactionWrappedRequestMessage", "domain/data/signup/AccountInfoRequest", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_104, context_104) {
    "use strict";
    var TransactionWrappedRequestMessage_2, AccountInfoRequest_1, Aggregate_Add_37, ChildAggregate_add_29, AccountInfoRequestTransaction;
    var __moduleName = context_104 && context_104.id;
    return {
        setters: [
            function (TransactionWrappedRequestMessage_2_1) {
                TransactionWrappedRequestMessage_2 = TransactionWrappedRequestMessage_2_1;
            },
            function (AccountInfoRequest_1_1) {
                AccountInfoRequest_1 = AccountInfoRequest_1_1;
            },
            function (Aggregate_Add_37_1) {
                Aggregate_Add_37 = Aggregate_Add_37_1;
            },
            function (ChildAggregate_add_29_1) {
                ChildAggregate_add_29 = ChildAggregate_add_29_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            AccountInfoRequestTransaction = /** @class */ (function (_super) {
                __extends(AccountInfoRequestTransaction, _super);
                function AccountInfoRequestTransaction() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * The wrapped message.
                 *
                 * @return The wrapped message.
                 */
                AccountInfoRequestTransaction.prototype.getMessage = function () {
                    return this.message;
                };
                /**
                 * The wrapped message.
                 *
                 * @param message The wrapped message.
                 */
                AccountInfoRequestTransaction.prototype.setMessage = function (message) {
                    this.message = message;
                };
                // Inherited.
                AccountInfoRequestTransaction.prototype.setWrappedMessage = function (message) {
                    this.setMessage(message);
                };
                return AccountInfoRequestTransaction;
            }(TransactionWrappedRequestMessage_2.TransactionWrappedRequestMessage));
            exports_104("AccountInfoRequestTransaction", AccountInfoRequestTransaction);
            Aggregate_Add_37.Aggregate_add(AccountInfoRequestTransaction, "ACCTINFOTRNRQ");
            ChildAggregate_add_29.ChildAggregate_add(AccountInfoRequestTransaction, { required: true, order: 30, type: AccountInfoRequest_1.AccountInfoRequest, read: AccountInfoRequestTransaction.prototype.getMessage, write: AccountInfoRequestTransaction.prototype.setMessage });
        }
    };
});
System.register("domain/data/signup/SignupRequestMessageSet", ["domain/data/RequestMessageSet", "domain/data/signup/AccountInfoRequestTransaction", "domain/data/MessageSetType", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_105, context_105) {
    "use strict";
    var RequestMessageSet_3, AccountInfoRequestTransaction_1, MessageSetType_4, Aggregate_Add_38, ChildAggregate_add_30, SignupRequestMessageSet;
    var __moduleName = context_105 && context_105.id;
    return {
        setters: [
            function (RequestMessageSet_3_1) {
                RequestMessageSet_3 = RequestMessageSet_3_1;
            },
            function (AccountInfoRequestTransaction_1_1) {
                AccountInfoRequestTransaction_1 = AccountInfoRequestTransaction_1_1;
            },
            function (MessageSetType_4_1) {
                MessageSetType_4 = MessageSetType_4_1;
            },
            function (Aggregate_Add_38_1) {
                Aggregate_Add_38 = Aggregate_Add_38_1;
            },
            function (ChildAggregate_add_30_1) {
                ChildAggregate_add_30 = ChildAggregate_add_30_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            SignupRequestMessageSet = /** @class */ (function (_super) {
                __extends(SignupRequestMessageSet, _super);
                function SignupRequestMessageSet() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                SignupRequestMessageSet.prototype.getType = function () {
                    return MessageSetType_4.MessageSetType.signup;
                };
                /**
                 * The account info request.
                 *
                 * @return The account info request.
                 */
                SignupRequestMessageSet.prototype.getAccountInfoRequest = function () {
                    return this.accountInfoRequest;
                };
                /**
                 * The account info request.
                 *
                 * @param accountInfoRequest The account info request.
                 */
                SignupRequestMessageSet.prototype.setAccountInfoRequest = function (accountInfoRequest) {
                    this.accountInfoRequest = accountInfoRequest;
                };
                /**
                 * The request messages.
                 *
                 * @return The request messages.
                 */
                SignupRequestMessageSet.prototype.getRequestMessages = function () {
                    var messages = new Array();
                    if (this.getAccountInfoRequest() != null) {
                        messages.push(this.getAccountInfoRequest());
                    }
                    return messages;
                };
                return SignupRequestMessageSet;
            }(RequestMessageSet_3.RequestMessageSet));
            exports_105("SignupRequestMessageSet", SignupRequestMessageSet);
            Aggregate_Add_38.Aggregate_add(SignupRequestMessageSet, "SIGNUPMSGSRQV1");
            ChildAggregate_add_30.ChildAggregate_add(SignupRequestMessageSet, { order: 0, type: AccountInfoRequestTransaction_1.AccountInfoRequestTransaction, read: SignupRequestMessageSet.prototype.getAccountInfoRequest, write: SignupRequestMessageSet.prototype.setAccountInfoRequest });
        }
    };
});
System.register("domain/data/creditcard/CreditCardStatementResponse", ["domain/data/common/StatementResponse", "domain/data/creditcard/CreditCardAccountDetails", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_106, context_106) {
    "use strict";
    var StatementResponse_2, CreditCardAccountDetails_3, Aggregate_Add_39, ChildAggregate_add_31, CreditCardStatementResponse;
    var __moduleName = context_106 && context_106.id;
    return {
        setters: [
            function (StatementResponse_2_1) {
                StatementResponse_2 = StatementResponse_2_1;
            },
            function (CreditCardAccountDetails_3_1) {
                CreditCardAccountDetails_3 = CreditCardAccountDetails_3_1;
            },
            function (Aggregate_Add_39_1) {
                Aggregate_Add_39 = Aggregate_Add_39_1;
            },
            function (ChildAggregate_add_31_1) {
                ChildAggregate_add_31 = ChildAggregate_add_31_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            CreditCardStatementResponse = /** @class */ (function (_super) {
                __extends(CreditCardStatementResponse, _super);
                function CreditCardStatementResponse() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                CreditCardStatementResponse.prototype.getResponseMessageName = function () {
                    return "credit card statement";
                };
                /**
                 * The account for the statement.
                 *
                 * @return The account for the statement.
                 */
                CreditCardStatementResponse.prototype.getAccount = function () {
                    return this.account;
                };
                /**
                 * The account for the statement.
                 *
                 * @param account The account for the statement.
                 */
                CreditCardStatementResponse.prototype.setAccount = function (account) {
                    this.account = account;
                };
                return CreditCardStatementResponse;
            }(StatementResponse_2.StatementResponse));
            exports_106("CreditCardStatementResponse", CreditCardStatementResponse);
            Aggregate_Add_39.Aggregate_add(CreditCardStatementResponse, "CCSTMTRS");
            ChildAggregate_add_31.ChildAggregate_add(CreditCardStatementResponse, { name: "CCACCTFROM", order: 10, type: CreditCardAccountDetails_3.CreditCardAccountDetails, read: CreditCardStatementResponse.prototype.getAccount, write: CreditCardStatementResponse.prototype.setAccount });
        }
    };
});
System.register("domain/data/creditcard/CreditCardStatementResponseTransaction", ["domain/data/creditcard/CreditCardStatementResponse", "domain/data/TransactionWrappedResponseMessage", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_107, context_107) {
    "use strict";
    var CreditCardStatementResponse_1, TransactionWrappedResponseMessage_2, Aggregate_Add_40, ChildAggregate_add_32, CreditCardStatementResponseTransaction;
    var __moduleName = context_107 && context_107.id;
    return {
        setters: [
            function (CreditCardStatementResponse_1_1) {
                CreditCardStatementResponse_1 = CreditCardStatementResponse_1_1;
            },
            function (TransactionWrappedResponseMessage_2_1) {
                TransactionWrappedResponseMessage_2 = TransactionWrappedResponseMessage_2_1;
            },
            function (Aggregate_Add_40_1) {
                Aggregate_Add_40 = Aggregate_Add_40_1;
            },
            function (ChildAggregate_add_32_1) {
                ChildAggregate_add_32 = ChildAggregate_add_32_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            CreditCardStatementResponseTransaction = /** @class */ (function (_super) {
                __extends(CreditCardStatementResponseTransaction, _super);
                function CreditCardStatementResponseTransaction() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * The message.
                 *
                 * @return The message.
                 */
                CreditCardStatementResponseTransaction.prototype.getMessage = function () {
                    return this.message;
                };
                /**
                 * The message.
                 *
                 * @param message The message.
                 */
                CreditCardStatementResponseTransaction.prototype.setMessage = function (message) {
                    this.message = message;
                };
                // Inherited.
                CreditCardStatementResponseTransaction.prototype.getWrappedMessage = function () {
                    return this.getMessage();
                };
                return CreditCardStatementResponseTransaction;
            }(TransactionWrappedResponseMessage_2.TransactionWrappedResponseMessage));
            exports_107("CreditCardStatementResponseTransaction", CreditCardStatementResponseTransaction);
            Aggregate_Add_40.Aggregate_add(CreditCardStatementResponseTransaction, "CCSTMTTRNRS");
            ChildAggregate_add_32.ChildAggregate_add(CreditCardStatementResponseTransaction, { required: true, order: 30, type: CreditCardStatementResponse_1.CreditCardStatementResponse, read: CreditCardStatementResponseTransaction.prototype.getMessage, write: CreditCardStatementResponseTransaction.prototype.setMessage });
        }
    };
});
System.register("domain/data/creditcard/CreditCardResponseMessageSet", ["domain/data/ResponseMessageSet", "domain/data/creditcard/CreditCardStatementResponseTransaction", "domain/data/MessageSetType", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_108, context_108) {
    "use strict";
    var ResponseMessageSet_3, CreditCardStatementResponseTransaction_1, MessageSetType_5, Aggregate_Add_41, ChildAggregate_add_33, CreditCardResponseMessageSet;
    var __moduleName = context_108 && context_108.id;
    return {
        setters: [
            function (ResponseMessageSet_3_1) {
                ResponseMessageSet_3 = ResponseMessageSet_3_1;
            },
            function (CreditCardStatementResponseTransaction_1_1) {
                CreditCardStatementResponseTransaction_1 = CreditCardStatementResponseTransaction_1_1;
            },
            function (MessageSetType_5_1) {
                MessageSetType_5 = MessageSetType_5_1;
            },
            function (Aggregate_Add_41_1) {
                Aggregate_Add_41 = Aggregate_Add_41_1;
            },
            function (ChildAggregate_add_33_1) {
                ChildAggregate_add_33 = ChildAggregate_add_33_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            CreditCardResponseMessageSet = /** @class */ (function (_super) {
                __extends(CreditCardResponseMessageSet, _super);
                function CreditCardResponseMessageSet() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                CreditCardResponseMessageSet.prototype.getType = function () {
                    return MessageSetType_5.MessageSetType.creditcard;
                };
                /**
                 * The statement response list.
                 *
                 * Most OFX files have a single statement response, except MT2OFX
                 * which outputs OFX with multiple statement responses
                 * in a single banking response message set.
                 *
                 * @return The statement response list.
                 */
                CreditCardResponseMessageSet.prototype.getStatementResponses = function () {
                    return this.statementResponses;
                };
                /**
                 * The statement reponse list.
                 *
                 * @param statementResponses The statement response list.
                 */
                CreditCardResponseMessageSet.prototype.setStatementResponses = function (statementResponses) {
                    this.statementResponses = statementResponses;
                };
                /**
                 * The first statement response.
                 *
                 * @return the first bank statement response.
                 * @deprecated Use getStatementResponses() because sometimes there are multiple responses
                 */
                CreditCardResponseMessageSet.prototype.getStatementResponse = function () {
                    return this.statementResponses == null || this.statementResponses.length == 0 ? null : this.statementResponses[0];
                };
                /**
                 * The statement response.
                 *
                 * @param statementResponse The statement response.
                 */
                CreditCardResponseMessageSet.prototype.setStatementResponse = function (statementResponse) {
                    this.statementResponses = [statementResponse];
                };
                // Inherited.
                CreditCardResponseMessageSet.prototype.getResponseMessages = function () {
                    return this.statementResponses;
                };
                return CreditCardResponseMessageSet;
            }(ResponseMessageSet_3.ResponseMessageSet));
            exports_108("CreditCardResponseMessageSet", CreditCardResponseMessageSet);
            Aggregate_Add_41.Aggregate_add(CreditCardResponseMessageSet, "CREDITCARDMSGSRSV1");
            ChildAggregate_add_33.ChildAggregate_add(CreditCardResponseMessageSet, { order: 0, type: Array, collectionEntryType: CreditCardStatementResponseTransaction_1.CreditCardStatementResponseTransaction, read: CreditCardResponseMessageSet.prototype.getStatementResponses, write: CreditCardResponseMessageSet.prototype.setStatementResponses });
        }
    };
});
System.register("domain/data/common/StatementRange", ["meta/Aggregate_add", "meta/Element_add"], function (exports_109, context_109) {
    "use strict";
    var Aggregate_Add_42, Element_add_33, StatementRange;
    var __moduleName = context_109 && context_109.id;
    return {
        setters: [
            function (Aggregate_Add_42_1) {
                Aggregate_Add_42 = Aggregate_Add_42_1;
            },
            function (Element_add_33_1) {
                Element_add_33 = Element_add_33_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            StatementRange = /** @class */ (function () {
                function StatementRange() {
                    this.includeTransactions = true;
                }
                /**
                 * The start of the statement range.
                 *
                 * @return The start of the statement range.
                 */
                StatementRange.prototype.getStart = function () {
                    return this.start;
                };
                /**
                 * The start of the statement range.
                 *
                 * @param start The start of the statement range.
                 */
                StatementRange.prototype.setStart = function (start) {
                    this.start = start;
                };
                /**
                 * The end of the statement range.
                 *
                 * @return The end of the statement range.
                 */
                StatementRange.prototype.getEnd = function () {
                    return this.end;
                };
                /**
                 * The end of the statement range.
                 *
                 * @param end The end of the statement range.
                 */
                StatementRange.prototype.setEnd = function (end) {
                    this.end = end;
                };
                /**
                 * Whether to include transactions.
                 *
                 * @return Whether to include transactions.
                 */
                StatementRange.prototype.getIncludeTransactions = function () {
                    return this.includeTransactions;
                };
                /**
                 * Whether to include transactions.
                 *
                 * @param includeTransactions Whether to include transactions.
                 */
                StatementRange.prototype.setIncludeTransactions = function (includeTransactions) {
                    this.includeTransactions = includeTransactions;
                };
                return StatementRange;
            }());
            exports_109("StatementRange", StatementRange);
            Aggregate_Add_42.Aggregate_add(StatementRange, "INCTRAN");
            Element_add_33.Element_add(StatementRange, { name: "DTSTART", order: 0, type: Date, read: StatementRange.prototype.getStart, write: StatementRange.prototype.setStart });
            Element_add_33.Element_add(StatementRange, { name: "DTEND", order: 10, type: Date, read: StatementRange.prototype.getEnd, write: StatementRange.prototype.setEnd });
            Element_add_33.Element_add(StatementRange, { name: "INCLUDE", required: true, order: 20, type: Boolean, read: StatementRange.prototype.getIncludeTransactions, write: StatementRange.prototype.setIncludeTransactions });
        }
    };
});
System.register("domain/data/common/StatementRequest", ["domain/data/RequestMessage", "domain/data/common/StatementRange", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_110, context_110) {
    "use strict";
    var RequestMessage_5, StatementRange_1, Aggregate_Add_43, ChildAggregate_add_34, StatementRequest;
    var __moduleName = context_110 && context_110.id;
    return {
        setters: [
            function (RequestMessage_5_1) {
                RequestMessage_5 = RequestMessage_5_1;
            },
            function (StatementRange_1_1) {
                StatementRange_1 = StatementRange_1_1;
            },
            function (Aggregate_Add_43_1) {
                Aggregate_Add_43 = Aggregate_Add_43_1;
            },
            function (ChildAggregate_add_34_1) {
                ChildAggregate_add_34 = ChildAggregate_add_34_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            StatementRequest = /** @class */ (function (_super) {
                __extends(StatementRequest, _super);
                function StatementRequest() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * The statement range.
                 *
                 * @return The statement range.
                 */
                StatementRequest.prototype.getStatementRange = function () {
                    return this.statementRange;
                };
                /**
                 * The statement range.
                 *
                 * @param statementRange The statement range.
                 */
                StatementRequest.prototype.setStatementRange = function (statementRange) {
                    this.statementRange = statementRange;
                };
                return StatementRequest;
            }(RequestMessage_5.RequestMessage));
            exports_110("StatementRequest", StatementRequest);
            Aggregate_Add_43.Aggregate_add(StatementRequest, "STMTRQ");
            ChildAggregate_add_34.ChildAggregate_add(StatementRequest, { name: "INCTRAN", required: false, order: 10, type: StatementRange_1.StatementRange, read: StatementRequest.prototype.getStatementRange, write: StatementRequest.prototype.setStatementRange });
        }
    };
});
System.register("domain/data/creditcard/CreditCardStatementRequest", ["domain/data/common/StatementRequest", "domain/data/creditcard/CreditCardAccountDetails", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_111, context_111) {
    "use strict";
    var StatementRequest_1, CreditCardAccountDetails_4, Aggregate_Add_44, ChildAggregate_add_35, CreditCardStatementRequest;
    var __moduleName = context_111 && context_111.id;
    return {
        setters: [
            function (StatementRequest_1_1) {
                StatementRequest_1 = StatementRequest_1_1;
            },
            function (CreditCardAccountDetails_4_1) {
                CreditCardAccountDetails_4 = CreditCardAccountDetails_4_1;
            },
            function (Aggregate_Add_44_1) {
                Aggregate_Add_44 = Aggregate_Add_44_1;
            },
            function (ChildAggregate_add_35_1) {
                ChildAggregate_add_35 = ChildAggregate_add_35_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            CreditCardStatementRequest = /** @class */ (function (_super) {
                __extends(CreditCardStatementRequest, _super);
                function CreditCardStatementRequest() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * The account details.
                 *
                 * @return The account details.
                 */
                CreditCardStatementRequest.prototype.getAccount = function () {
                    return this.account;
                };
                /**
                 * The account details.
                 *
                 * @param account The account details.
                 */
                CreditCardStatementRequest.prototype.setAccount = function (account) {
                    this.account = account;
                };
                return CreditCardStatementRequest;
            }(StatementRequest_1.StatementRequest));
            exports_111("CreditCardStatementRequest", CreditCardStatementRequest);
            Aggregate_Add_44.Aggregate_add(CreditCardStatementRequest, "CCSTMTRQ");
            ChildAggregate_add_35.ChildAggregate_add(CreditCardStatementRequest, { name: "CCACCTFROM", required: true, order: 0, type: CreditCardAccountDetails_4.CreditCardAccountDetails, read: CreditCardStatementRequest.prototype.getAccount, write: CreditCardStatementRequest.prototype.setAccount });
        }
    };
});
System.register("domain/data/creditcard/CreditCardStatementRequestTransaction", ["domain/data/creditcard/CreditCardStatementRequest", "domain/data/TransactionWrappedRequestMessage", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_112, context_112) {
    "use strict";
    var CreditCardStatementRequest_1, TransactionWrappedRequestMessage_3, Aggregate_Add_45, ChildAggregate_add_36, CreditCardStatementRequestTransaction;
    var __moduleName = context_112 && context_112.id;
    return {
        setters: [
            function (CreditCardStatementRequest_1_1) {
                CreditCardStatementRequest_1 = CreditCardStatementRequest_1_1;
            },
            function (TransactionWrappedRequestMessage_3_1) {
                TransactionWrappedRequestMessage_3 = TransactionWrappedRequestMessage_3_1;
            },
            function (Aggregate_Add_45_1) {
                Aggregate_Add_45 = Aggregate_Add_45_1;
            },
            function (ChildAggregate_add_36_1) {
                ChildAggregate_add_36 = ChildAggregate_add_36_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            CreditCardStatementRequestTransaction = /** @class */ (function (_super) {
                __extends(CreditCardStatementRequestTransaction, _super);
                function CreditCardStatementRequestTransaction() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * The message.
                 *
                 * @return The message.
                 */
                CreditCardStatementRequestTransaction.prototype.getMessage = function () {
                    return this.message;
                };
                /**
                 * The message.
                 *
                 * @param message The message.
                 *
                 */
                CreditCardStatementRequestTransaction.prototype.setMessage = function (message) {
                    this.message = message;
                };
                // Inherited.
                CreditCardStatementRequestTransaction.prototype.setWrappedMessage = function (message) {
                    this.setMessage(message);
                };
                return CreditCardStatementRequestTransaction;
            }(TransactionWrappedRequestMessage_3.TransactionWrappedRequestMessage));
            exports_112("CreditCardStatementRequestTransaction", CreditCardStatementRequestTransaction);
            Aggregate_Add_45.Aggregate_add(CreditCardStatementRequestTransaction, "CCSTMTTRNRQ");
            ChildAggregate_add_36.ChildAggregate_add(CreditCardStatementRequestTransaction, { required: true, order: 30, type: CreditCardStatementRequest_1.CreditCardStatementRequest, read: CreditCardStatementRequestTransaction.prototype.getMessage, write: CreditCardStatementRequestTransaction.prototype.setMessage });
        }
    };
});
System.register("domain/data/creditcard/CreditCardRequestMessageSet", ["domain/data/RequestMessageSet", "domain/data/creditcard/CreditCardStatementRequestTransaction", "domain/data/MessageSetType", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_113, context_113) {
    "use strict";
    var RequestMessageSet_4, CreditCardStatementRequestTransaction_1, MessageSetType_6, Aggregate_Add_46, ChildAggregate_add_37, CreditCardRequestMessageSet;
    var __moduleName = context_113 && context_113.id;
    return {
        setters: [
            function (RequestMessageSet_4_1) {
                RequestMessageSet_4 = RequestMessageSet_4_1;
            },
            function (CreditCardStatementRequestTransaction_1_1) {
                CreditCardStatementRequestTransaction_1 = CreditCardStatementRequestTransaction_1_1;
            },
            function (MessageSetType_6_1) {
                MessageSetType_6 = MessageSetType_6_1;
            },
            function (Aggregate_Add_46_1) {
                Aggregate_Add_46 = Aggregate_Add_46_1;
            },
            function (ChildAggregate_add_37_1) {
                ChildAggregate_add_37 = ChildAggregate_add_37_1;
            }
        ],
        execute: function () {
            //import java.util.List;
            //import java.util.ArrayList;
            /**
             * @author Ryan Heaton
             */
            CreditCardRequestMessageSet = /** @class */ (function (_super) {
                __extends(CreditCardRequestMessageSet, _super);
                function CreditCardRequestMessageSet() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                CreditCardRequestMessageSet.prototype.getType = function () {
                    return MessageSetType_6.MessageSetType.creditcard;
                };
                /**
                 * The request.
                 *
                 * @return The request.
                 */
                CreditCardRequestMessageSet.prototype.getStatementRequest = function () {
                    return this.statementRequest;
                };
                /**
                 * The request.
                 *
                 * @param statementRequest The request.
                 */
                CreditCardRequestMessageSet.prototype.setStatementRequest = function (statementRequest) {
                    this.statementRequest = statementRequest;
                };
                // Inherited.
                CreditCardRequestMessageSet.prototype.getRequestMessages = function () {
                    var requestMessages = [];
                    if (this.getStatementRequest() != null) {
                        requestMessages.push(this.getStatementRequest());
                    }
                    return requestMessages;
                };
                return CreditCardRequestMessageSet;
            }(RequestMessageSet_4.RequestMessageSet));
            exports_113("CreditCardRequestMessageSet", CreditCardRequestMessageSet);
            Aggregate_Add_46.Aggregate_add(CreditCardRequestMessageSet, "CREDITCARDMSGSRQV1");
            ChildAggregate_add_37.ChildAggregate_add(CreditCardRequestMessageSet, { order: 0, type: CreditCardStatementRequestTransaction_1.CreditCardStatementRequestTransaction, read: CreditCardRequestMessageSet.prototype.getStatementRequest, write: CreditCardRequestMessageSet.prototype.setStatementRequest });
        }
    };
});
System.register("client/impl/CreditCardAccountImpl", ["client/impl/BaseAccountImpl", "domain/data/MessageSetType", "OFXException", "domain/data/creditcard/CreditCardRequestMessageSet", "domain/data/creditcard/CreditCardStatementRequestTransaction", "domain/data/creditcard/CreditCardStatementRequest"], function (exports_114, context_114) {
    "use strict";
    var BaseAccountImpl_1, MessageSetType_7, OFXException_9, CreditCardRequestMessageSet_1, CreditCardStatementRequestTransaction_2, CreditCardStatementRequest_2, CreditCardAccountImpl;
    var __moduleName = context_114 && context_114.id;
    return {
        setters: [
            function (BaseAccountImpl_1_1) {
                BaseAccountImpl_1 = BaseAccountImpl_1_1;
            },
            function (MessageSetType_7_1) {
                MessageSetType_7 = MessageSetType_7_1;
            },
            function (OFXException_9_1) {
                OFXException_9 = OFXException_9_1;
            },
            function (CreditCardRequestMessageSet_1_1) {
                CreditCardRequestMessageSet_1 = CreditCardRequestMessageSet_1_1;
            },
            function (CreditCardStatementRequestTransaction_2_1) {
                CreditCardStatementRequestTransaction_2 = CreditCardStatementRequestTransaction_2_1;
            },
            function (CreditCardStatementRequest_2_1) {
                CreditCardStatementRequest_2 = CreditCardStatementRequest_2_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            CreditCardAccountImpl = /** @class */ (function (_super) {
                __extends(CreditCardAccountImpl, _super);
                function CreditCardAccountImpl(details, username, password, institution) {
                    return _super.call(this, details, username, password, institution) || this;
                }
                CreditCardAccountImpl.prototype.unwrapStatementResponse = function (response) {
                    var creditCardSet = response.getMessageSet(MessageSetType_7.MessageSetType.creditcard);
                    if (creditCardSet == null) {
                        throw new OFXException_9.OFXException("No credit card response message set.");
                    }
                    var statementTransactionResponse = creditCardSet.getStatementResponse();
                    if (statementTransactionResponse == null) {
                        throw new OFXException_9.OFXException("No credit card statement response transaction.");
                    }
                    var statement = statementTransactionResponse.getMessage();
                    if (statement == null) {
                        throw new OFXException_9.OFXException("No credit card statement in the transaction.");
                    }
                    return statement;
                };
                CreditCardAccountImpl.prototype.createRequestMessageSet = function (transaction) {
                    var creditCardRequest = new CreditCardRequestMessageSet_1.CreditCardRequestMessageSet();
                    creditCardRequest.setStatementRequest(transaction);
                    return creditCardRequest;
                };
                CreditCardAccountImpl.prototype.createTransaction = function () {
                    return new CreditCardStatementRequestTransaction_2.CreditCardStatementRequestTransaction();
                };
                CreditCardAccountImpl.prototype.createStatementRequest = function (details, range) {
                    var bankRequest = new CreditCardStatementRequest_2.CreditCardStatementRequest();
                    bankRequest.setAccount(details);
                    bankRequest.setStatementRange(range);
                    return bankRequest;
                };
                return CreditCardAccountImpl;
            }(BaseAccountImpl_1.BaseAccountImpl));
            exports_114("CreditCardAccountImpl", CreditCardAccountImpl);
        }
    };
});
System.register("domain/data/investment/statements/IncludePosition", ["meta/Aggregate_add", "meta/Element_add"], function (exports_115, context_115) {
    "use strict";
    var Aggregate_Add_47, Element_add_34, IncludePosition;
    var __moduleName = context_115 && context_115.id;
    return {
        setters: [
            function (Aggregate_Add_47_1) {
                Aggregate_Add_47 = Aggregate_Add_47_1;
            },
            function (Element_add_34_1) {
                Element_add_34 = Element_add_34_1;
            }
        ],
        execute: function () {
            /**
             * Aggreate to indicate whether position information is requested as part of the statement
             * @see "Section 13.9.1.2, OFX Spec"
             *
             * @author Jon Perlow
             */
            IncludePosition = /** @class */ (function () {
                function IncludePosition() {
                    this.includePositions = true;
                }
                /**
                 * Gets the date that the position should be sent down for. This is an optional field according
                 * to the OFX spec.
                 *
                 * @return the date for the position
                 */
                IncludePosition.prototype.getDateSentDown = function () {
                    return this.sentDownDate;
                };
                /**
                 * Sets the date that the position should be sent down for. This is an optional field according
                 * to the OFX spec.
                 *
                 * @param sentDownDate the date for the position
                 */
                IncludePosition.prototype.setDateSentDown = function (sentDownDate) {
                    this.sentDownDate = sentDownDate;
                };
                /**
                 * Gets whether to include positions in the statement download.
                 *
                 * @return whether to include positions in the statement download
                 */
                IncludePosition.prototype.getIncludePositions = function () {
                    return this.includePositions;
                };
                /**
                 * Sets whether to include positions in the statement download.
                 *
                 * @param includePositions whether to include positions in the statement download
                 */
                IncludePosition.prototype.setIncludePositions = function (includePositions) {
                    this.includePositions = includePositions;
                };
                return IncludePosition;
            }());
            exports_115("IncludePosition", IncludePosition);
            Aggregate_Add_47.Aggregate_add(IncludePosition, "INCPOS");
            Element_add_34.Element_add(IncludePosition, { name: "DTASOF", order: 0, type: Date, read: IncludePosition.prototype.getDateSentDown, write: IncludePosition.prototype.setDateSentDown });
            Element_add_34.Element_add(IncludePosition, { name: "INCLUDE", order: 10, type: Boolean, read: IncludePosition.prototype.getIncludePositions, write: IncludePosition.prototype.setIncludePositions });
        }
    };
});
System.register("domain/data/investment/statements/InvestmentStatementRequest", ["domain/data/common/StatementRequest", "domain/data/investment/accounts/InvestmentAccountDetails", "domain/data/investment/statements/IncludePosition", "meta/Aggregate_add", "meta/ChildAggregate_add", "meta/Element_add"], function (exports_116, context_116) {
    "use strict";
    var StatementRequest_2, InvestmentAccountDetails_3, IncludePosition_1, Aggregate_Add_48, ChildAggregate_add_38, Element_add_35, InvestmentStatementRequest;
    var __moduleName = context_116 && context_116.id;
    return {
        setters: [
            function (StatementRequest_2_1) {
                StatementRequest_2 = StatementRequest_2_1;
            },
            function (InvestmentAccountDetails_3_1) {
                InvestmentAccountDetails_3 = InvestmentAccountDetails_3_1;
            },
            function (IncludePosition_1_1) {
                IncludePosition_1 = IncludePosition_1_1;
            },
            function (Aggregate_Add_48_1) {
                Aggregate_Add_48 = Aggregate_Add_48_1;
            },
            function (ChildAggregate_add_38_1) {
                ChildAggregate_add_38 = ChildAggregate_add_38_1;
            },
            function (Element_add_35_1) {
                Element_add_35 = Element_add_35_1;
            }
        ],
        execute: function () {
            /**
             * Aggregate for the investment statement download request.
             * @see "Section 13.9.1.1, OFX Spec"
             *
             * @author Jon Perlow
             */
            InvestmentStatementRequest = /** @class */ (function (_super) {
                __extends(InvestmentStatementRequest, _super);
                function InvestmentStatementRequest() {
                    var _this = _super.call(this) || this;
                    _this.includeOpenOrders = false;
                    _this.includeBalance = true;
                    return _this;
                }
                /**
                 * The account details.
                 *
                 * @return The account details.
                 */
                InvestmentStatementRequest.prototype.getAccount = function () {
                    return this.account;
                };
                /**
                 * The account details.
                 *
                 * @param account The account details.
                 */
                InvestmentStatementRequest.prototype.setAccount = function (account) {
                    this.account = account;
                };
                /**
                 * Gets whether to include open orders. This is an optional field according to the OFX spec.
                 * <br>
                 * Note, open orders are not yet implemented.
                 *
                 * @return whether to include open orders
                 */
                InvestmentStatementRequest.prototype.getIncludeOpenOrders = function () {
                    return this.includeOpenOrders;
                };
                /**
                 * Sets whether to include open orders. This is an optional field according to the OFX spec.
                 * <br>
                 * Note, open orders are not yet implemented.
                 *
                 * @param includeOpenOrders whether to include open orders
                 */
                InvestmentStatementRequest.prototype.setIncludeOpenOrders = function (includeOpenOrders) {
                    this.includeOpenOrders = includeOpenOrders;
                };
                /**
                 * Gets the include position child aggregate. This is a required field according to the OFX spec.
                 *
                 * @return the include position child aggregate
                 */
                InvestmentStatementRequest.prototype.getIncludePosition = function () {
                    return this.includePosition;
                };
                /**
                 * Gets the include position child aggregate. This is a required field according to the OFX spec.
                 *
                 * @param includePosition the include position child aggregate
                 */
                InvestmentStatementRequest.prototype.setIncludePosition = function (includePosition) {
                    this.includePosition = includePosition;
                };
                /**
                 * Gets whether to include balance info in the response. This is a required field according to
                 * the OFX spec.
                 *
                 * @return whether to include balance info in the response
                 */
                InvestmentStatementRequest.prototype.getIncludeBalance = function () {
                    return this.includeBalance;
                };
                /**
                 * Sets whether to include balance info in the response. This is a required field according to
                 * the OFX spec.
                 *
                 * @param includeBalance whether to include balance info in the response
                 */
                InvestmentStatementRequest.prototype.setIncludeBalance = function (includeBalance) {
                    this.includeBalance = includeBalance;
                };
                return InvestmentStatementRequest;
            }(StatementRequest_2.StatementRequest));
            exports_116("InvestmentStatementRequest", InvestmentStatementRequest);
            Aggregate_Add_48.Aggregate_add(InvestmentStatementRequest, "INVSTMTRQ");
            ChildAggregate_add_38.ChildAggregate_add(InvestmentStatementRequest, { name: "INVACCTFROM", required: true, order: 0, type: InvestmentAccountDetails_3.InvestmentAccountDetails, read: InvestmentStatementRequest.prototype.getAccount, write: InvestmentStatementRequest.prototype.setAccount });
            Element_add_35.Element_add(InvestmentStatementRequest, { name: "INCOO", order: 20, type: Boolean, read: InvestmentStatementRequest.prototype.getIncludeOpenOrders, write: InvestmentStatementRequest.prototype.setIncludeOpenOrders });
            ChildAggregate_add_38.ChildAggregate_add(InvestmentStatementRequest, { name: "INCPOS", required: true, order: 30, type: IncludePosition_1.IncludePosition, read: InvestmentStatementRequest.prototype.getIncludePosition, write: InvestmentStatementRequest.prototype.setIncludePosition });
            Element_add_35.Element_add(InvestmentStatementRequest, { name: "INCBAL", required: true, order: 40, type: Boolean, read: InvestmentStatementRequest.prototype.getIncludeBalance, write: InvestmentStatementRequest.prototype.setIncludeBalance });
        }
    };
});
System.register("domain/data/investment/statements/InvestmentStatementRequestTransaction", ["domain/data/investment/statements/InvestmentStatementRequest", "domain/data/TransactionWrappedRequestMessage", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_117, context_117) {
    "use strict";
    var InvestmentStatementRequest_1, TransactionWrappedRequestMessage_4, Aggregate_Add_49, ChildAggregate_add_39, InvestmentStatementRequestTransaction;
    var __moduleName = context_117 && context_117.id;
    return {
        setters: [
            function (InvestmentStatementRequest_1_1) {
                InvestmentStatementRequest_1 = InvestmentStatementRequest_1_1;
            },
            function (TransactionWrappedRequestMessage_4_1) {
                TransactionWrappedRequestMessage_4 = TransactionWrappedRequestMessage_4_1;
            },
            function (Aggregate_Add_49_1) {
                Aggregate_Add_49 = Aggregate_Add_49_1;
            },
            function (ChildAggregate_add_39_1) {
                ChildAggregate_add_39 = ChildAggregate_add_39_1;
            }
        ],
        execute: function () {
            /**
             * Investment statement transaction request.
             * @see "Section 13.9.1.1, OFX Spec"
             *
             * @author Jon Perlow
             */
            InvestmentStatementRequestTransaction = /** @class */ (function (_super) {
                __extends(InvestmentStatementRequestTransaction, _super);
                function InvestmentStatementRequestTransaction() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * Gets the the statement request message.
                 *
                 * @return the statement request message.
                 */
                InvestmentStatementRequestTransaction.prototype.getMessage = function () {
                    return this.message;
                };
                /**
                 * Sets the the statement request message.
                 *
                 * @param message the statement request message.
                 */
                InvestmentStatementRequestTransaction.prototype.setMessage = function (message) {
                    this.message = message;
                };
                // Inherited.
                InvestmentStatementRequestTransaction.prototype.setWrappedMessage = function (message) {
                    this.setMessage(message);
                };
                return InvestmentStatementRequestTransaction;
            }(TransactionWrappedRequestMessage_4.TransactionWrappedRequestMessage));
            exports_117("InvestmentStatementRequestTransaction", InvestmentStatementRequestTransaction);
            Aggregate_Add_49.Aggregate_add(InvestmentStatementRequestTransaction, "INVSTMTTRNRQ");
            ChildAggregate_add_39.ChildAggregate_add(InvestmentStatementRequestTransaction, { required: true, order: 30, type: InvestmentStatementRequest_1.InvestmentStatementRequest, read: InvestmentStatementRequestTransaction.prototype.getMessage, write: InvestmentStatementRequestTransaction.prototype.setMessage });
        }
    };
});
System.register("domain/data/seclist/SecurityListRequest", ["domain/data/RequestMessage", "domain/data/seclist/SecurityRequest", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_118, context_118) {
    "use strict";
    var RequestMessage_6, SecurityRequest_1, Aggregate_Add_50, ChildAggregate_add_40, SecurityListRequest;
    var __moduleName = context_118 && context_118.id;
    return {
        setters: [
            function (RequestMessage_6_1) {
                RequestMessage_6 = RequestMessage_6_1;
            },
            function (SecurityRequest_1_1) {
                SecurityRequest_1 = SecurityRequest_1_1;
            },
            function (Aggregate_Add_50_1) {
                Aggregate_Add_50 = Aggregate_Add_50_1;
            },
            function (ChildAggregate_add_40_1) {
                ChildAggregate_add_40 = ChildAggregate_add_40_1;
            }
        ],
        execute: function () {
            /**
             * Request aggregate for the security list.
             * @see "Section 13.8.2.2, OFX Spec"
             *
             * @author Jon Perlow
             */
            SecurityListRequest = /** @class */ (function (_super) {
                __extends(SecurityListRequest, _super);
                function SecurityListRequest() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                SecurityListRequest.prototype.getSecurityRequests = function () {
                    return this.securityRequests;
                };
                SecurityListRequest.prototype.setSecurityRequests = function (securityRequests) {
                    this.securityRequests = securityRequests;
                };
                return SecurityListRequest;
            }(RequestMessage_6.RequestMessage));
            exports_118("SecurityListRequest", SecurityListRequest);
            Aggregate_Add_50.Aggregate_add(SecurityListRequest, "SECLISTRQ");
            ChildAggregate_add_40.ChildAggregate_add(SecurityListRequest, { required: true, order: 10, type: Array, collectionEntryType: SecurityRequest_1.SecurityRequest, read: SecurityListRequest.prototype.getSecurityRequests, write: SecurityListRequest.prototype.setSecurityRequests });
        }
    };
});
System.register("domain/data/seclist/SecurityListRequestTransaction", ["domain/data/TransactionWrappedRequestMessage", "domain/data/seclist/SecurityListRequest", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_119, context_119) {
    "use strict";
    var TransactionWrappedRequestMessage_5, SecurityListRequest_1, Aggregate_Add_51, ChildAggregate_add_41, SecurityListRequestTransaction;
    var __moduleName = context_119 && context_119.id;
    return {
        setters: [
            function (TransactionWrappedRequestMessage_5_1) {
                TransactionWrappedRequestMessage_5 = TransactionWrappedRequestMessage_5_1;
            },
            function (SecurityListRequest_1_1) {
                SecurityListRequest_1 = SecurityListRequest_1_1;
            },
            function (Aggregate_Add_51_1) {
                Aggregate_Add_51 = Aggregate_Add_51_1;
            },
            function (ChildAggregate_add_41_1) {
                ChildAggregate_add_41 = ChildAggregate_add_41_1;
            }
        ],
        execute: function () {
            /**
             * Security list transaction request.
             * @see "Section 13.8.2.1, OFX Spec"
             *
             * @author Jon Perlow
             */
            SecurityListRequestTransaction = /** @class */ (function (_super) {
                __extends(SecurityListRequestTransaction, _super);
                function SecurityListRequestTransaction() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * The message.
                 *
                 * @return The message.
                 */
                SecurityListRequestTransaction.prototype.getMessage = function () {
                    return this.message;
                };
                /**
                 * The message.
                 *
                 * @param message The message.
                 *
                 */
                SecurityListRequestTransaction.prototype.setMessage = function (message) {
                    this.message = message;
                };
                // Inherited.
                SecurityListRequestTransaction.prototype.setWrappedMessage = function (message) {
                    this.setMessage(message);
                };
                return SecurityListRequestTransaction;
            }(TransactionWrappedRequestMessage_5.TransactionWrappedRequestMessage));
            exports_119("SecurityListRequestTransaction", SecurityListRequestTransaction);
            Aggregate_Add_51.Aggregate_add(SecurityListRequestTransaction, "SECLISTTRNRQ");
            ChildAggregate_add_41.ChildAggregate_add(SecurityListRequestTransaction, { required: true, order: 30, type: SecurityListRequest_1.SecurityListRequest, read: SecurityListRequestTransaction.prototype.getMessage, write: SecurityListRequestTransaction.prototype.setMessage });
        }
    };
});
System.register("domain/data/investment/statements/InvestmentStatementResponseTransaction", ["domain/data/investment/statements/InvestmentStatementResponse", "domain/data/TransactionWrappedResponseMessage", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_120, context_120) {
    "use strict";
    var InvestmentStatementResponse_1, TransactionWrappedResponseMessage_3, Aggregate_Add_52, ChildAggregate_add_42, InvestmentStatementResponseTransaction;
    var __moduleName = context_120 && context_120.id;
    return {
        setters: [
            function (InvestmentStatementResponse_1_1) {
                InvestmentStatementResponse_1 = InvestmentStatementResponse_1_1;
            },
            function (TransactionWrappedResponseMessage_3_1) {
                TransactionWrappedResponseMessage_3 = TransactionWrappedResponseMessage_3_1;
            },
            function (Aggregate_Add_52_1) {
                Aggregate_Add_52 = Aggregate_Add_52_1;
            },
            function (ChildAggregate_add_42_1) {
                ChildAggregate_add_42 = ChildAggregate_add_42_1;
            }
        ],
        execute: function () {
            /**
             * Investment statement transaction response.
             * @see "Section 13.9.2.1, OFX Spec"
             *
             * @author Jon Perlow
             */
            InvestmentStatementResponseTransaction = /** @class */ (function (_super) {
                __extends(InvestmentStatementResponseTransaction, _super);
                function InvestmentStatementResponseTransaction() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * Gets the the statement response message.
                 *
                 * @return the statement response message.
                 */
                InvestmentStatementResponseTransaction.prototype.getMessage = function () {
                    return this.message;
                };
                /**
                 * Sets the the statement response message.
                 *
                 * @param message the statement response message.
                 */
                InvestmentStatementResponseTransaction.prototype.setMessage = function (message) {
                    this.message = message;
                };
                // Inherited.
                InvestmentStatementResponseTransaction.prototype.getWrappedMessage = function () {
                    return this.getMessage();
                };
                return InvestmentStatementResponseTransaction;
            }(TransactionWrappedResponseMessage_3.TransactionWrappedResponseMessage));
            exports_120("InvestmentStatementResponseTransaction", InvestmentStatementResponseTransaction);
            Aggregate_Add_52.Aggregate_add(InvestmentStatementResponseTransaction, "INVSTMTTRNRS");
            ChildAggregate_add_42.ChildAggregate_add(InvestmentStatementResponseTransaction, { required: true, order: 30, type: InvestmentStatementResponse_1.InvestmentStatementResponse, read: InvestmentStatementResponseTransaction.prototype.getMessage, write: InvestmentStatementResponseTransaction.prototype.setMessage });
        }
    };
});
System.register("domain/data/investment/statements/InvestmentStatementResponseMessageSet", ["domain/data/MessageSetType", "domain/data/ResponseMessageSet", "domain/data/investment/statements/InvestmentStatementResponseTransaction", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_121, context_121) {
    "use strict";
    var MessageSetType_8, ResponseMessageSet_4, InvestmentStatementResponseTransaction_1, Aggregate_Add_53, ChildAggregate_add_43, InvestmentStatementResponseMessageSet;
    var __moduleName = context_121 && context_121.id;
    return {
        setters: [
            function (MessageSetType_8_1) {
                MessageSetType_8 = MessageSetType_8_1;
            },
            function (ResponseMessageSet_4_1) {
                ResponseMessageSet_4 = ResponseMessageSet_4_1;
            },
            function (InvestmentStatementResponseTransaction_1_1) {
                InvestmentStatementResponseTransaction_1 = InvestmentStatementResponseTransaction_1_1;
            },
            function (Aggregate_Add_53_1) {
                Aggregate_Add_53 = Aggregate_Add_53_1;
            },
            function (ChildAggregate_add_43_1) {
                ChildAggregate_add_43 = ChildAggregate_add_43_1;
            }
        ],
        execute: function () {
            /**
             * Investment statement response message set.
             * @see "Section 13.7.1.2.2, OFX Spec"
             *
             * @author Jon Perlow
             */
            InvestmentStatementResponseMessageSet = /** @class */ (function (_super) {
                __extends(InvestmentStatementResponseMessageSet, _super);
                function InvestmentStatementResponseMessageSet() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                InvestmentStatementResponseMessageSet.prototype.getType = function () {
                    return MessageSetType_8.MessageSetType.investment;
                };
                /**
                 * Gets the statement response list. Most OFX files have a single statement response.
                 *
                 * @return the statement response list
                 */
                InvestmentStatementResponseMessageSet.prototype.getStatementResponses = function () {
                    return this.statementResponses;
                };
                /**
                 * Sets the statement reponse list. Most OFX files have a single statement response.
                 *
                 * @param statementResponses the statement response list
                 */
                InvestmentStatementResponseMessageSet.prototype.setStatementResponses = function (statementResponses) {
                    this.statementResponses = statementResponses;
                };
                /**
                 * Gets the first statement response. Use getStatementResponses() if you are expecting multiple
                 * responses.
                 *
                 * @return the first investment statement response.
                 */
                InvestmentStatementResponseMessageSet.prototype.getStatementResponse = function () {
                    return this.statementResponses == null || this.statementResponses.length == 0 ? null : this.statementResponses[0];
                };
                /**
                 * Sets the statement response if there is a single response.
                 *
                 * @param statementResponse The statement response.
                 */
                InvestmentStatementResponseMessageSet.prototype.setStatementResponse = function (statementResponse) {
                    this.statementResponses = [statementResponse];
                };
                // Inherited.
                InvestmentStatementResponseMessageSet.prototype.getResponseMessages = function () {
                    return this.statementResponses;
                };
                return InvestmentStatementResponseMessageSet;
            }(ResponseMessageSet_4.ResponseMessageSet));
            exports_121("InvestmentStatementResponseMessageSet", InvestmentStatementResponseMessageSet);
            Aggregate_Add_53.Aggregate_add(InvestmentStatementResponseMessageSet, "INVSTMTMSGSRSV1");
            ChildAggregate_add_43.ChildAggregate_add(InvestmentStatementResponseMessageSet, { order: 0, type: Array, collectionEntryType: InvestmentStatementResponseTransaction_1.InvestmentStatementResponseTransaction, read: InvestmentStatementResponseMessageSet.prototype.getStatementResponses, write: InvestmentStatementResponseMessageSet.prototype.setStatementResponses });
        }
    };
});
System.register("domain/data/seclist/SecurityListResponse", ["domain/data/ResponseMessage", "meta/Aggregate_add"], function (exports_122, context_122) {
    "use strict";
    var ResponseMessage_5, Aggregate_Add_54, SecurityListResponse;
    var __moduleName = context_122 && context_122.id;
    return {
        setters: [
            function (ResponseMessage_5_1) {
                ResponseMessage_5 = ResponseMessage_5_1;
            },
            function (Aggregate_Add_54_1) {
                Aggregate_Add_54 = Aggregate_Add_54_1;
            }
        ],
        execute: function () {
            /**
             * Security list response. This is an empty aggregate. The actual security information is included
             * in the "SECLIST" aggregate.
             * @see "Section 13.8.3, OFX Spec"
             *
             * @author Jon Perlow
             */
            SecurityListResponse = /** @class */ (function (_super) {
                __extends(SecurityListResponse, _super);
                function SecurityListResponse() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                SecurityListResponse.prototype.getResponseMessageName = function () {
                    return "security list";
                };
                return SecurityListResponse;
            }(ResponseMessage_5.ResponseMessage));
            exports_122("SecurityListResponse", SecurityListResponse);
            Aggregate_Add_54.Aggregate_add(SecurityListResponse, "SECLISTRS");
        }
    };
});
System.register("domain/data/seclist/SecurityListResponseTransaction", ["domain/data/TransactionWrappedResponseMessage", "domain/data/seclist/SecurityListResponse", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_123, context_123) {
    "use strict";
    var TransactionWrappedResponseMessage_4, SecurityListResponse_1, Aggregate_Add_55, ChildAggregate_add_44, SecurityListResponseTransaction;
    var __moduleName = context_123 && context_123.id;
    return {
        setters: [
            function (TransactionWrappedResponseMessage_4_1) {
                TransactionWrappedResponseMessage_4 = TransactionWrappedResponseMessage_4_1;
            },
            function (SecurityListResponse_1_1) {
                SecurityListResponse_1 = SecurityListResponse_1_1;
            },
            function (Aggregate_Add_55_1) {
                Aggregate_Add_55 = Aggregate_Add_55_1;
            },
            function (ChildAggregate_add_44_1) {
                ChildAggregate_add_44 = ChildAggregate_add_44_1;
            }
        ],
        execute: function () {
            /**
             * Security list transaction response.
             * @see "Section 13.8.3.1, OFX Spec"
             *
             * @author Jon Perlow
             */
            SecurityListResponseTransaction = /** @class */ (function (_super) {
                __extends(SecurityListResponseTransaction, _super);
                function SecurityListResponseTransaction() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * The message.
                 *
                 * @return The message.
                 */
                SecurityListResponseTransaction.prototype.getMessage = function () {
                    return this.message;
                };
                /**
                 * The message.
                 *
                 * @param message The message.
                 */
                SecurityListResponseTransaction.prototype.setMessage = function (message) {
                    this.message = message;
                };
                // Inherited.
                SecurityListResponseTransaction.prototype.getWrappedMessage = function () {
                    return this.getMessage();
                };
                return SecurityListResponseTransaction;
            }(TransactionWrappedResponseMessage_4.TransactionWrappedResponseMessage));
            exports_123("SecurityListResponseTransaction", SecurityListResponseTransaction);
            Aggregate_Add_55.Aggregate_add(SecurityListResponseTransaction, "SECLISTTRNRS");
            ChildAggregate_add_44.ChildAggregate_add(SecurityListResponseTransaction, { required: true, order: 30, type: SecurityListResponse_1.SecurityListResponse, read: SecurityListResponseTransaction.prototype.getMessage, write: SecurityListResponseTransaction.prototype.setMessage });
        }
    };
});
System.register("domain/data/seclist/SecurityListResponseMessageSet", ["domain/data/ResponseMessageSet", "domain/data/seclist/SecurityListResponseTransaction", "domain/data/seclist/SecurityList", "domain/data/MessageSetType", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_124, context_124) {
    "use strict";
    var ResponseMessageSet_5, SecurityListResponseTransaction_1, SecurityList_1, MessageSetType_9, Aggregate_Add_56, ChildAggregate_add_45, SecurityListResponseMessageSet;
    var __moduleName = context_124 && context_124.id;
    return {
        setters: [
            function (ResponseMessageSet_5_1) {
                ResponseMessageSet_5 = ResponseMessageSet_5_1;
            },
            function (SecurityListResponseTransaction_1_1) {
                SecurityListResponseTransaction_1 = SecurityListResponseTransaction_1_1;
            },
            function (SecurityList_1_1) {
                SecurityList_1 = SecurityList_1_1;
            },
            function (MessageSetType_9_1) {
                MessageSetType_9 = MessageSetType_9_1;
            },
            function (Aggregate_Add_56_1) {
                Aggregate_Add_56 = Aggregate_Add_56_1;
            },
            function (ChildAggregate_add_45_1) {
                ChildAggregate_add_45 = ChildAggregate_add_45_1;
            }
        ],
        execute: function () {
            /**
             * @author Jon Perlow
             */
            SecurityListResponseMessageSet = /** @class */ (function (_super) {
                __extends(SecurityListResponseMessageSet, _super);
                function SecurityListResponseMessageSet() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                SecurityListResponseMessageSet.prototype.getType = function () {
                    return MessageSetType_9.MessageSetType.investment_security;
                };
                /**
                 * The security list response list transaction.
                 *
                 * Most OFX files have a single security response.
                 *
                 * @return The security list response list.
                 */
                SecurityListResponseMessageSet.prototype.getSecurityListResponse = function () {
                    return this.securityListResponse;
                };
                /**
                 * The security list response.
                 *
                 * @param securityListResponse The security list response.
                 */
                SecurityListResponseMessageSet.prototype.setSecurityListResponse = function (securityListResponse) {
                    this.securityListResponse = securityListResponse;
                };
                SecurityListResponseMessageSet.prototype.getSecurityList = function () {
                    return this.securityList;
                };
                SecurityListResponseMessageSet.prototype.setSecurityList = function (securityList) {
                    this.securityList = securityList;
                };
                // Inherited.
                SecurityListResponseMessageSet.prototype.getResponseMessages = function () {
                    var ret = new Array();
                    ret.push(this.securityListResponse);
                    return ret;
                };
                return SecurityListResponseMessageSet;
            }(ResponseMessageSet_5.ResponseMessageSet));
            exports_124("SecurityListResponseMessageSet", SecurityListResponseMessageSet);
            Aggregate_Add_56.Aggregate_add(SecurityListResponseMessageSet, "SECLISTMSGSRSV1");
            ChildAggregate_add_45.ChildAggregate_add(SecurityListResponseMessageSet, { order: 0, type: SecurityListResponseTransaction_1.SecurityListResponseTransaction, read: SecurityListResponseMessageSet.prototype.getSecurityListResponse, write: SecurityListResponseMessageSet.prototype.setSecurityListResponse });
            ChildAggregate_add_45.ChildAggregate_add(SecurityListResponseMessageSet, { order: 10, type: SecurityList_1.SecurityList, read: SecurityListResponseMessageSet.prototype.getSecurityList, write: SecurityListResponseMessageSet.prototype.setSecurityList });
        }
    };
});
System.register("domain/data/investment/statements/InvestmentStatementRequestMessageSet", ["domain/data/RequestMessageSet", "domain/data/investment/statements/InvestmentStatementRequestTransaction", "domain/data/MessageSetType", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_125, context_125) {
    "use strict";
    var RequestMessageSet_5, InvestmentStatementRequestTransaction_1, MessageSetType_10, Aggregate_Add_57, ChildAggregate_add_46, InvestmentStatementRequestMessageSet;
    var __moduleName = context_125 && context_125.id;
    return {
        setters: [
            function (RequestMessageSet_5_1) {
                RequestMessageSet_5 = RequestMessageSet_5_1;
            },
            function (InvestmentStatementRequestTransaction_1_1) {
                InvestmentStatementRequestTransaction_1 = InvestmentStatementRequestTransaction_1_1;
            },
            function (MessageSetType_10_1) {
                MessageSetType_10 = MessageSetType_10_1;
            },
            function (Aggregate_Add_57_1) {
                Aggregate_Add_57 = Aggregate_Add_57_1;
            },
            function (ChildAggregate_add_46_1) {
                ChildAggregate_add_46 = ChildAggregate_add_46_1;
            }
        ],
        execute: function () {
            /**
             * Investment statement request message set.
             * @see "Section 13.7.1.2.1, OFX Spec"
             *
             * @author Jon Perlow
             */
            InvestmentStatementRequestMessageSet = /** @class */ (function (_super) {
                __extends(InvestmentStatementRequestMessageSet, _super);
                function InvestmentStatementRequestMessageSet() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                InvestmentStatementRequestMessageSet.prototype.getType = function () {
                    return MessageSetType_10.MessageSetType.investment;
                };
                /**
                 * Gets the statement request.
                 *
                 * @return the request
                 */
                InvestmentStatementRequestMessageSet.prototype.getStatementRequest = function () {
                    return this.statementRequest;
                };
                /**
                 * Sets the statement request.
                 *
                 * @param statementRequest the request
                 */
                InvestmentStatementRequestMessageSet.prototype.setStatementRequest = function (statementRequest) {
                    this.statementRequest = statementRequest;
                };
                // Inherited.
                InvestmentStatementRequestMessageSet.prototype.getRequestMessages = function () {
                    var requestMessages = new Array();
                    if (this.getStatementRequest() != null) {
                        requestMessages.push(this.getStatementRequest());
                    }
                    return requestMessages;
                };
                return InvestmentStatementRequestMessageSet;
            }(RequestMessageSet_5.RequestMessageSet));
            exports_125("InvestmentStatementRequestMessageSet", InvestmentStatementRequestMessageSet);
            Aggregate_Add_57.Aggregate_add(InvestmentStatementRequestMessageSet, "INVSTMTMSGSRQV1");
            ChildAggregate_add_46.ChildAggregate_add(InvestmentStatementRequestMessageSet, { order: 0, type: InvestmentStatementRequestTransaction_1.InvestmentStatementRequestTransaction, read: InvestmentStatementRequestMessageSet.prototype.getStatementRequest, write: InvestmentStatementRequestMessageSet.prototype.setStatementRequest });
        }
    };
});
System.register("domain/data/seclist/SecurityListRequestMessageSet", ["domain/data/RequestMessageSet", "domain/data/seclist/SecurityListRequestTransaction", "domain/data/MessageSetType", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_126, context_126) {
    "use strict";
    var RequestMessageSet_6, SecurityListRequestTransaction_1, MessageSetType_11, Aggregate_Add_58, ChildAggregate_add_47, SecurityListRequestMessageSet;
    var __moduleName = context_126 && context_126.id;
    return {
        setters: [
            function (RequestMessageSet_6_1) {
                RequestMessageSet_6 = RequestMessageSet_6_1;
            },
            function (SecurityListRequestTransaction_1_1) {
                SecurityListRequestTransaction_1 = SecurityListRequestTransaction_1_1;
            },
            function (MessageSetType_11_1) {
                MessageSetType_11 = MessageSetType_11_1;
            },
            function (Aggregate_Add_58_1) {
                Aggregate_Add_58 = Aggregate_Add_58_1;
            },
            function (ChildAggregate_add_47_1) {
                ChildAggregate_add_47 = ChildAggregate_add_47_1;
            }
        ],
        execute: function () {
            /**
             * Security list request message set.
             * @see "Section 13.7.2.2.1, OFX Spec"
             *
             * @author Jon Perlow
             */
            SecurityListRequestMessageSet = /** @class */ (function (_super) {
                __extends(SecurityListRequestMessageSet, _super);
                function SecurityListRequestMessageSet() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                SecurityListRequestMessageSet.prototype.getType = function () {
                    return MessageSetType_11.MessageSetType.investment;
                };
                /**
                 * Gets the security list request.
                 *
                 * @return the request
                 */
                SecurityListRequestMessageSet.prototype.getSecurityListRequest = function () {
                    return this.securityListRequest;
                };
                /**
                 * Sets the security list request.
                 *
                 * @param statementRequest the request
                 */
                SecurityListRequestMessageSet.prototype.setSecurityListRequest = function (statementRequest) {
                    this.securityListRequest = statementRequest;
                };
                // Inherited.
                SecurityListRequestMessageSet.prototype.getRequestMessages = function () {
                    var requestMessages = new Array();
                    if (this.getSecurityListRequest() != null) {
                        requestMessages.push(this.getSecurityListRequest());
                    }
                    return requestMessages;
                };
                return SecurityListRequestMessageSet;
            }(RequestMessageSet_6.RequestMessageSet));
            exports_126("SecurityListRequestMessageSet", SecurityListRequestMessageSet);
            Aggregate_Add_58.Aggregate_add(SecurityListRequestMessageSet, "SECLISTMSGSRQV1");
            ChildAggregate_add_47.ChildAggregate_add(SecurityListRequestMessageSet, { order: 0, type: SecurityListRequestTransaction_1.SecurityListRequestTransaction, read: SecurityListRequestMessageSet.prototype.getSecurityListRequest, write: SecurityListRequestMessageSet.prototype.setSecurityListRequest });
        }
    };
});
System.register("client/impl/InvestmentAccountImpl", ["domain/data/common/StatementRange", "domain/data/investment/statements/InvestmentStatementRequestTransaction", "domain/data/seclist/SecurityListRequestTransaction", "domain/data/MessageSetType", "OFXException", "domain/data/investment/statements/InvestmentStatementRequestMessageSet", "domain/data/investment/statements/InvestmentStatementRequest", "domain/data/investment/statements/IncludePosition", "domain/data/seclist/SecurityListRequestMessageSet", "domain/data/seclist/SecurityListRequest"], function (exports_127, context_127) {
    "use strict";
    var StatementRange_2, InvestmentStatementRequestTransaction_2, SecurityListRequestTransaction_2, MessageSetType_12, OFXException_10, InvestmentStatementRequestMessageSet_1, InvestmentStatementRequest_2, IncludePosition_2, SecurityListRequestMessageSet_1, SecurityListRequest_2, InvestmentAccountImpl;
    var __moduleName = context_127 && context_127.id;
    return {
        setters: [
            function (StatementRange_2_1) {
                StatementRange_2 = StatementRange_2_1;
            },
            function (InvestmentStatementRequestTransaction_2_1) {
                InvestmentStatementRequestTransaction_2 = InvestmentStatementRequestTransaction_2_1;
            },
            function (SecurityListRequestTransaction_2_1) {
                SecurityListRequestTransaction_2 = SecurityListRequestTransaction_2_1;
            },
            function (MessageSetType_12_1) {
                MessageSetType_12 = MessageSetType_12_1;
            },
            function (OFXException_10_1) {
                OFXException_10 = OFXException_10_1;
            },
            function (InvestmentStatementRequestMessageSet_1_1) {
                InvestmentStatementRequestMessageSet_1 = InvestmentStatementRequestMessageSet_1_1;
            },
            function (InvestmentStatementRequest_2_1) {
                InvestmentStatementRequest_2 = InvestmentStatementRequest_2_1;
            },
            function (IncludePosition_2_1) {
                IncludePosition_2 = IncludePosition_2_1;
            },
            function (SecurityListRequestMessageSet_1_1) {
                SecurityListRequestMessageSet_1 = SecurityListRequestMessageSet_1_1;
            },
            function (SecurityListRequest_2_1) {
                SecurityListRequest_2 = SecurityListRequest_2_1;
            }
        ],
        execute: function () {
            /**
             * @author Jon Perlow
             */
            InvestmentAccountImpl = /** @class */ (function () {
                function InvestmentAccountImpl(details, username, password, institution) {
                    this.details = details;
                    this.username = username;
                    this.password = password;
                    this.institution = institution;
                }
                InvestmentAccountImpl.prototype.readStatement = function (start, end) {
                    var _this = this;
                    var range = new StatementRange_2.StatementRange();
                    range.setIncludeTransactions(true);
                    range.setStart(start);
                    range.setEnd(end);
                    var request = this.institution.createAuthenticatedRequest(this.username, this.password);
                    var requestTransaction = new InvestmentStatementRequestTransaction_2.InvestmentStatementRequestTransaction();
                    requestTransaction.setWrappedMessage(this.createStatementRequest(this.getDetails(), range));
                    request.getMessageSets().insert(this.createStatementRequestMessageSet(requestTransaction));
                    return this.institution.sendRequest(request)
                        .then(function (response) {
                        _this.institution.doGeneralValidationChecks(request, response);
                        return _this.unwrapStatementResponse(response);
                    });
                };
                InvestmentAccountImpl.prototype.readSecurityList = function (securities) {
                    var _this = this;
                    var request = this.institution.createAuthenticatedRequest(this.username, this.password);
                    var requestTransaction = new SecurityListRequestTransaction_2.SecurityListRequestTransaction();
                    requestTransaction.setWrappedMessage(this.createSecurityListRequest(securities));
                    request.getMessageSets().insert(this.createSecurityListRequestMessageSet(requestTransaction));
                    return this.institution.sendRequest(request)
                        .then(function (response) {
                        _this.institution.doGeneralValidationChecks(request, response);
                        return _this.unwrapSecurityList(response);
                    });
                };
                /**
                 * The details of this account.
                 *
                 * @return The details of this account.
                 */
                InvestmentAccountImpl.prototype.getDetails = function () {
                    return this.details;
                };
                InvestmentAccountImpl.prototype.unwrapStatementResponse = function (response) {
                    var investmentStatementSet = response.getMessageSet(MessageSetType_12.MessageSetType.investment);
                    if (investmentStatementSet == null) {
                        throw new OFXException_10.OFXException("No investment response message set.");
                    }
                    var statementTransactionResponse = investmentStatementSet.getStatementResponse();
                    if (statementTransactionResponse == null) {
                        throw new OFXException_10.OFXException("No investment statement response transaction.");
                    }
                    var statement = statementTransactionResponse.getMessage();
                    if (statement == null) {
                        throw new OFXException_10.OFXException("No investment statement in the transaction.");
                    }
                    // See if there's a security list -- often sent back with an account statement by servers.
                    var securityListMessageSet = response.getMessageSet(MessageSetType_12.MessageSetType.investment_security);
                    if (securityListMessageSet != null) {
                        statement.setSecurityList(securityListMessageSet.getSecurityList());
                    }
                    return statement;
                };
                InvestmentAccountImpl.prototype.createStatementRequestMessageSet = function (transaction) {
                    var investmentStatementRequest = new InvestmentStatementRequestMessageSet_1.InvestmentStatementRequestMessageSet();
                    investmentStatementRequest.setStatementRequest(transaction);
                    return investmentStatementRequest;
                };
                InvestmentAccountImpl.prototype.createStatementRequest = function (details, range) {
                    var investRequest = new InvestmentStatementRequest_2.InvestmentStatementRequest();
                    investRequest.setAccount(details);
                    investRequest.setStatementRange(range);
                    investRequest.setIncludePosition(new IncludePosition_2.IncludePosition());
                    return investRequest;
                };
                InvestmentAccountImpl.prototype.createSecurityListRequestMessageSet = function (transaction) {
                    var securityListRequest = new SecurityListRequestMessageSet_1.SecurityListRequestMessageSet();
                    securityListRequest.setSecurityListRequest(transaction);
                    return securityListRequest;
                };
                InvestmentAccountImpl.prototype.createSecurityListRequest = function (securities) {
                    var securityListRequest = new SecurityListRequest_2.SecurityListRequest();
                    securityListRequest.setSecurityRequests(securities);
                    return securityListRequest;
                };
                InvestmentAccountImpl.prototype.unwrapSecurityList = function (response) {
                    var securityListSet = response.getMessageSet(MessageSetType_12.MessageSetType.investment_security);
                    if (securityListSet == null) {
                        throw new OFXException_10.OFXException("No security list response message set.");
                    }
                    var securityList = securityListSet.getSecurityList();
                    if (securityList == null) {
                        throw new OFXException_10.OFXException("No security list response transaction.");
                    }
                    return securityList;
                };
                return InvestmentAccountImpl;
            }());
            exports_127("InvestmentAccountImpl", InvestmentAccountImpl);
        }
    };
});
System.register("domain/data/signon/PasswordChangeRequest", ["domain/data/RequestMessage", "meta/Aggregate_add", "meta/Element_add"], function (exports_128, context_128) {
    "use strict";
    var RequestMessage_7, Aggregate_Add_59, Element_add_36, PasswordChangeRequest;
    var __moduleName = context_128 && context_128.id;
    return {
        setters: [
            function (RequestMessage_7_1) {
                RequestMessage_7 = RequestMessage_7_1;
            },
            function (Aggregate_Add_59_1) {
                Aggregate_Add_59 = Aggregate_Add_59_1;
            },
            function (Element_add_36_1) {
                Element_add_36 = Element_add_36_1;
            }
        ],
        execute: function () {
            /**
             * Request to change a user password.
             *
             * @author Ryan Heaton
             * @see "Section 2.5.2.1, OFX Spec."
             */
            PasswordChangeRequest = /** @class */ (function (_super) {
                __extends(PasswordChangeRequest, _super);
                function PasswordChangeRequest() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * The id of the user changing password.
                 *
                 * @return The id of the user changing password.
                 */
                PasswordChangeRequest.prototype.getUserId = function () {
                    return this.userId;
                };
                /**
                 * The id of the user changing password.
                 *
                 * @param userId The id of the user changing password.
                 */
                PasswordChangeRequest.prototype.setUserId = function (userId) {
                    this.userId = userId;
                };
                /**
                 * The new password.
                 *
                 * @return The new password.
                 */
                PasswordChangeRequest.prototype.getNewPassword = function () {
                    return this.newPassword;
                };
                /**
                 * The new password.
                 *
                 * @param newPassword The new password.
                 */
                PasswordChangeRequest.prototype.setNewPassword = function (newPassword) {
                    this.newPassword = newPassword;
                };
                return PasswordChangeRequest;
            }(RequestMessage_7.RequestMessage));
            exports_128("PasswordChangeRequest", PasswordChangeRequest);
            Aggregate_Add_59.Aggregate_add(PasswordChangeRequest, "PINCHRQ");
            Element_add_36.Element_add(PasswordChangeRequest, { name: "USERID", required: true, order: 0, type: String, read: PasswordChangeRequest.prototype.getUserId, write: PasswordChangeRequest.prototype.setUserId });
            Element_add_36.Element_add(PasswordChangeRequest, { name: "NEWUSERPASS", required: true, order: 10, type: String, read: PasswordChangeRequest.prototype.getNewPassword, write: PasswordChangeRequest.prototype.setNewPassword });
        }
    };
});
System.register("domain/data/signon/PasswordChangeRequestTransaction", ["domain/data/TransactionWrappedRequestMessage", "domain/data/signon/PasswordChangeRequest", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_129, context_129) {
    "use strict";
    var TransactionWrappedRequestMessage_6, PasswordChangeRequest_1, Aggregate_Add_60, ChildAggregate_add_48, PasswordChangeRequestTransaction;
    var __moduleName = context_129 && context_129.id;
    return {
        setters: [
            function (TransactionWrappedRequestMessage_6_1) {
                TransactionWrappedRequestMessage_6 = TransactionWrappedRequestMessage_6_1;
            },
            function (PasswordChangeRequest_1_1) {
                PasswordChangeRequest_1 = PasswordChangeRequest_1_1;
            },
            function (Aggregate_Add_60_1) {
                Aggregate_Add_60 = Aggregate_Add_60_1;
            },
            function (ChildAggregate_add_48_1) {
                ChildAggregate_add_48 = ChildAggregate_add_48_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            PasswordChangeRequestTransaction = /** @class */ (function (_super) {
                __extends(PasswordChangeRequestTransaction, _super);
                function PasswordChangeRequestTransaction() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * The wrapped message.
                 *
                 * @return The wrapped message.
                 */
                PasswordChangeRequestTransaction.prototype.getMessage = function () {
                    return this.message;
                };
                /**
                 * The wrapped message.
                 *
                 * @param message The wrapped message.
                 */
                PasswordChangeRequestTransaction.prototype.setMessage = function (message) {
                    this.message = message;
                };
                // Inherited.
                PasswordChangeRequestTransaction.prototype.setWrappedMessage = function (message) {
                    this.setMessage(message);
                };
                return PasswordChangeRequestTransaction;
            }(TransactionWrappedRequestMessage_6.TransactionWrappedRequestMessage));
            exports_129("PasswordChangeRequestTransaction", PasswordChangeRequestTransaction);
            Aggregate_Add_60.Aggregate_add(PasswordChangeRequestTransaction, "PINCHTRNRQ");
            ChildAggregate_add_48.ChildAggregate_add(PasswordChangeRequestTransaction, { required: true, order: 30, type: PasswordChangeRequest_1.PasswordChangeRequest, read: PasswordChangeRequestTransaction.prototype.getMessage, write: PasswordChangeRequestTransaction.prototype.setMessage });
        }
    };
});
System.register("domain/data/signon/SignonRequestMessageSet", ["domain/data/RequestMessageSet", "domain/data/signon/SignonRequest", "domain/data/signon/PasswordChangeRequestTransaction", "domain/data/MessageSetType", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_130, context_130) {
    "use strict";
    var RequestMessageSet_7, SignonRequest_1, PasswordChangeRequestTransaction_1, MessageSetType_13, Aggregate_Add_61, ChildAggregate_add_49, SignonRequestMessageSet;
    var __moduleName = context_130 && context_130.id;
    return {
        setters: [
            function (RequestMessageSet_7_1) {
                RequestMessageSet_7 = RequestMessageSet_7_1;
            },
            function (SignonRequest_1_1) {
                SignonRequest_1 = SignonRequest_1_1;
            },
            function (PasswordChangeRequestTransaction_1_1) {
                PasswordChangeRequestTransaction_1 = PasswordChangeRequestTransaction_1_1;
            },
            function (MessageSetType_13_1) {
                MessageSetType_13 = MessageSetType_13_1;
            },
            function (Aggregate_Add_61_1) {
                Aggregate_Add_61 = Aggregate_Add_61_1;
            },
            function (ChildAggregate_add_49_1) {
                ChildAggregate_add_49 = ChildAggregate_add_49_1;
            }
        ],
        execute: function () {
            /**
             * The sign-on request message set.
             *
             * @author Ryan Heaton
             * @see "Section 2.5, OFX Spec."
             */
            SignonRequestMessageSet = /** @class */ (function (_super) {
                __extends(SignonRequestMessageSet, _super);
                function SignonRequestMessageSet() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                SignonRequestMessageSet.prototype.getType = function () {
                    return MessageSetType_13.MessageSetType.signon;
                };
                /**
                 * The message for this message set.
                 *
                 * @return The message for this message set.
                 */
                SignonRequestMessageSet.prototype.getSignonRequest = function () {
                    return this.signonRequest;
                };
                /**
                 * The message for this message set.
                 *
                 * @param signonRequest The message for this message set.
                 */
                SignonRequestMessageSet.prototype.setSignonRequest = function (signonRequest) {
                    this.signonRequest = signonRequest;
                };
                /**
                 * The password change request.
                 *
                 * @return The password change request.
                 */
                SignonRequestMessageSet.prototype.getPasswordChangeRequest = function () {
                    return this.passwordChangeRequest;
                };
                /**
                 * The password change request.
                 *
                 * @param passwordChangeRequest The password change request.
                 */
                SignonRequestMessageSet.prototype.setPasswordChangeRequest = function (passwordChangeRequest) {
                    this.passwordChangeRequest = passwordChangeRequest;
                };
                //todo: challenge request/response
                // Inherited.
                SignonRequestMessageSet.prototype.getRequestMessages = function () {
                    var requestMessages = new Array();
                    if (this.getSignonRequest() != null) {
                        requestMessages.push(this.getSignonRequest());
                    }
                    if (this.getPasswordChangeRequest() != null) {
                        requestMessages.push(this.getPasswordChangeRequest());
                    }
                    return requestMessages;
                };
                return SignonRequestMessageSet;
            }(RequestMessageSet_7.RequestMessageSet));
            exports_130("SignonRequestMessageSet", SignonRequestMessageSet);
            Aggregate_Add_61.Aggregate_add(SignonRequestMessageSet, "SIGNONMSGSRQV1");
            ChildAggregate_add_49.ChildAggregate_add(SignonRequestMessageSet, { required: true, order: 0, type: SignonRequest_1.SignonRequest, read: SignonRequestMessageSet.prototype.getSignonRequest, write: SignonRequestMessageSet.prototype.setSignonRequest });
            ChildAggregate_add_49.ChildAggregate_add(SignonRequestMessageSet, { order: 10, type: PasswordChangeRequestTransaction_1.PasswordChangeRequestTransaction, read: SignonRequestMessageSet.prototype.getPasswordChangeRequest, write: SignonRequestMessageSet.prototype.setPasswordChangeRequest });
        }
    };
});
System.register("domain/data/profile/CoreMessageSetInfo", ["domain/data/ApplicationSecurity", "domain/data/profile/SynchronizationCapability", "meta/Aggregate_add", "meta/Element_add"], function (exports_131, context_131) {
    "use strict";
    var ApplicationSecurity_3, SynchronizationCapability_1, Aggregate_Add_62, Element_add_37, CoreMessageSetInfo;
    var __moduleName = context_131 && context_131.id;
    return {
        setters: [
            function (ApplicationSecurity_3_1) {
                ApplicationSecurity_3 = ApplicationSecurity_3_1;
            },
            function (SynchronizationCapability_1_1) {
                SynchronizationCapability_1 = SynchronizationCapability_1_1;
            },
            function (Aggregate_Add_62_1) {
                Aggregate_Add_62 = Aggregate_Add_62_1;
            },
            function (Element_add_37_1) {
                Element_add_37 = Element_add_37_1;
            }
        ],
        execute: function () {
            /**
             * Core information about a specific version of a specific message set.
             *
             * @author Ryan Heaton
             * @see "Section 7.2.1, OFX Spec"
             */
            CoreMessageSetInfo = /** @class */ (function () {
                function CoreMessageSetInfo() {
                    this.version = "1";
                    this.language = "ENG"; //Locale.US.getISO3Language();
                }
                /**
                 * Version of the message set.
                 *
                 * @return The version of the message set.
                 */
                CoreMessageSetInfo.prototype.getVersion = function () {
                    return this.version;
                };
                /**
                 * The version of the message set.
                 *
                 * @param version The version of the message set.
                 */
                CoreMessageSetInfo.prototype.setVersion = function (version) {
                    this.version = version;
                };
                /**
                 * The name of the service provider (sometimes the message set processing is outsourced).
                 *
                 * @return The name of the service provider (sometimes the message set processing is outsourced).
                 */
                CoreMessageSetInfo.prototype.getServiceProviderName = function () {
                    return this.serviceProviderName;
                };
                /**
                 * The name of the service provider (sometimes the message set processing is outsourced).
                 *
                 * @param serviceProviderName The name of the service provider (sometimes the message set processing is outsourced).
                 */
                CoreMessageSetInfo.prototype.setServiceProviderName = function (serviceProviderName) {
                    this.serviceProviderName = serviceProviderName;
                };
                /**
                 * The URL at which the message set is processed.
                 *
                 * @return The URL at which the message set is processed.
                 */
                CoreMessageSetInfo.prototype.getUrl = function () {
                    return this.url;
                };
                /**
                 * The URL at which the message set is processed.
                 *
                 * @param url The URL at which the message set is processed.
                 */
                CoreMessageSetInfo.prototype.setUrl = function (url) {
                    this.url = url;
                };
                /**
                 * The application-level security required for this message set.
                 *
                 * @return The application-level security required for this message set.
                 */
                CoreMessageSetInfo.prototype.getSecurity = function () {
                    return this.security;
                };
                /**
                 * The application-level security required for this message set.
                 *
                 * @param security The application-level security required for this message set.
                 */
                CoreMessageSetInfo.prototype.setSecurity = function (security) {
                    this.security = security;
                };
                /**
                 * Whether transport-level security is required for this message set.
                 *
                 * @return Whether transport-level security is required for this message set.
                 */
                CoreMessageSetInfo.prototype.getSslRequired = function () {
                    return this.sslRequired;
                };
                /**
                 * Whether transport-level security is required for this message set.
                 *
                 * @param sslRequired Whether transport-level security is required for this message set.
                 */
                CoreMessageSetInfo.prototype.setSslRequired = function (sslRequired) {
                    this.sslRequired = sslRequired;
                };
                /**
                 * The sign-on realm.
                 *
                 * @return The sign-on realm.
                 */
                CoreMessageSetInfo.prototype.getRealm = function () {
                    return this.realm;
                };
                /**
                 * The sign-on realm.
                 *
                 * @param realm The sign-on realm.
                 */
                CoreMessageSetInfo.prototype.setRealm = function (realm) {
                    this.realm = realm;
                };
                /**
                 * The language.
                 *
                 * @return The language.
                 * @see java.util.Locale#getISO3Language()
                 */
                CoreMessageSetInfo.prototype.getLanguage = function () {
                    return this.language;
                };
                /**
                 * The language.
                 *
                 * @param language The language.
                 */
                CoreMessageSetInfo.prototype.setLanguage = function (language) {
                    this.language = language;
                };
                /**
                 * The synchronization capability for this message set.
                 *
                 * @return The synchronization capability for this message set.
                 */
                CoreMessageSetInfo.prototype.getSyncCapability = function () {
                    return this.syncCapability;
                };
                /**
                 * The synchronization capability for this message set.
                 *
                 * @param syncCapability The synchronization capability for this message set.
                 */
                CoreMessageSetInfo.prototype.setSyncCapability = function (syncCapability) {
                    this.syncCapability = syncCapability;
                };
                /**
                 * Whether there exists support for resposne-file based error recovery.
                 *
                 * @return Whether there exists support for resposne-file based error recovery.
                 */
                CoreMessageSetInfo.prototype.getFileBasedErrorRecoverySupport = function () {
                    return this.fileBasedErrorRecoverySupport;
                };
                /**
                 * Whether there exists support for resposne-file based error recovery.
                 *
                 * @param fileBasedErrorRecoverySupport Whether there exists support for resposne-file based error recovery.
                 */
                CoreMessageSetInfo.prototype.setFileBasedErrorRecoverySupport = function (fileBasedErrorRecoverySupport) {
                    this.fileBasedErrorRecoverySupport = fileBasedErrorRecoverySupport;
                };
                /**
                 * Gets the "INTU.TIMEOUT" field. There's no public documentation of this field but E*TRADE sends
                 * it. It likely is some type of timeout in seconds.
                 *
                 * @return the "INTU.TIMEOUT" property
                 */
                CoreMessageSetInfo.prototype.getIntuTimeout = function () {
                    return this.timeout;
                };
                /**
                 * Sets the "INTU.TIMEOUT" field. There's no public documentation of this field but E*TRADE sends
                 * it. It likely is some type of timeout in seconds.
                 *
                 * @param timeout the "INTU.TIMEOUT" property
                 */
                CoreMessageSetInfo.prototype.setIntuTimeout = function (timeout) {
                    this.timeout = timeout;
                };
                return CoreMessageSetInfo;
            }());
            exports_131("CoreMessageSetInfo", CoreMessageSetInfo);
            Aggregate_Add_62.Aggregate_add(CoreMessageSetInfo, "MSGSETCORE");
            Element_add_37.Element_add(CoreMessageSetInfo, { name: "VER", required: true, order: 0, type: String, read: CoreMessageSetInfo.prototype.getVersion, write: CoreMessageSetInfo.prototype.setVersion });
            Element_add_37.Element_add(CoreMessageSetInfo, { name: "SPNAME", order: 10, type: String, read: CoreMessageSetInfo.prototype.getServiceProviderName, write: CoreMessageSetInfo.prototype.setServiceProviderName });
            Element_add_37.Element_add(CoreMessageSetInfo, { name: "URL", required: true, order: 20, type: String, read: CoreMessageSetInfo.prototype.getUrl, write: CoreMessageSetInfo.prototype.setUrl });
            Element_add_37.Element_add(CoreMessageSetInfo, { name: "OFXSEC", required: true, order: 30, type: ApplicationSecurity_3.ApplicationSecurity, read: CoreMessageSetInfo.prototype.getSecurity, write: CoreMessageSetInfo.prototype.setSecurity });
            Element_add_37.Element_add(CoreMessageSetInfo, { name: "TRANSPSEC", required: true, order: 40, type: Boolean, read: CoreMessageSetInfo.prototype.getSslRequired, write: CoreMessageSetInfo.prototype.setSslRequired });
            Element_add_37.Element_add(CoreMessageSetInfo, { name: "SIGNONREALM", required: true, order: 50, type: String, read: CoreMessageSetInfo.prototype.getRealm, write: CoreMessageSetInfo.prototype.setRealm });
            Element_add_37.Element_add(CoreMessageSetInfo, { name: "LANGUAGE", required: true, order: 60, type: String, read: CoreMessageSetInfo.prototype.getLanguage, write: CoreMessageSetInfo.prototype.setLanguage });
            Element_add_37.Element_add(CoreMessageSetInfo, { name: "SYNCMODE", required: true, order: 70, type: SynchronizationCapability_1.SynchronizationCapability, read: CoreMessageSetInfo.prototype.getSyncCapability, write: CoreMessageSetInfo.prototype.setSyncCapability });
            Element_add_37.Element_add(CoreMessageSetInfo, { name: "RESPFILEER", required: true, order: 80, type: Boolean, read: CoreMessageSetInfo.prototype.getFileBasedErrorRecoverySupport, write: CoreMessageSetInfo.prototype.setFileBasedErrorRecoverySupport });
            Element_add_37.Element_add(CoreMessageSetInfo, { name: "INTU.TIMEOUT", order: 90, type: Number, read: CoreMessageSetInfo.prototype.getIntuTimeout, write: CoreMessageSetInfo.prototype.setIntuTimeout });
        }
    };
});
System.register("domain/data/profile/VersionSpecificMessageSetInfo", ["domain/data/profile/CoreMessageSetInfo", "meta/ChildAggregate_add"], function (exports_132, context_132) {
    "use strict";
    var CoreMessageSetInfo_1, ChildAggregate_add_50, VersionSpecificMessageSetInfo;
    var __moduleName = context_132 && context_132.id;
    return {
        setters: [
            function (CoreMessageSetInfo_1_1) {
                CoreMessageSetInfo_1 = CoreMessageSetInfo_1_1;
            },
            function (ChildAggregate_add_50_1) {
                ChildAggregate_add_50 = ChildAggregate_add_50_1;
            }
        ],
        execute: function () {
            /**
             * Information specific to a version of a message set.
             *
             * @author Ryan Heaton
             * @see "Section 7.2.1, OFX Spec"
             */
            VersionSpecificMessageSetInfo = /** @class */ (function () {
                function VersionSpecificMessageSetInfo() {
                }
                /**
                 * The information core.
                 *
                 * @return The information core.
                 */
                VersionSpecificMessageSetInfo.prototype.getCore = function () {
                    return this.core;
                };
                /**
                 * The information core.
                 *
                 * @param core The information core.
                 */
                VersionSpecificMessageSetInfo.prototype.setCore = function (core) {
                    this.core = core;
                };
                VersionSpecificMessageSetInfo.prototype.getVersion = function () {
                    return this.core != null ? this.core.getVersion() : null;
                };
                VersionSpecificMessageSetInfo.prototype.getServiceProviderName = function () {
                    return this.core != null ? this.core.getServiceProviderName() : null;
                };
                VersionSpecificMessageSetInfo.prototype.getUrl = function () {
                    return this.core != null ? this.core.getUrl() : null;
                };
                VersionSpecificMessageSetInfo.prototype.getSecurity = function () {
                    return this.core != null ? this.core.getSecurity() : null;
                };
                VersionSpecificMessageSetInfo.prototype.isSslRequired = function () {
                    return this.core != null && this.core.getSslRequired() != null ? this.core.getSslRequired() : true;
                };
                VersionSpecificMessageSetInfo.prototype.getRealm = function () {
                    return this.core != null ? this.core.getRealm() : null;
                };
                VersionSpecificMessageSetInfo.prototype.getLanguage = function () {
                    return this.core != null ? this.core.getLanguage() : null;
                };
                VersionSpecificMessageSetInfo.prototype.getSyncCapability = function () {
                    return this.core != null ? this.core.getSyncCapability() : null;
                };
                VersionSpecificMessageSetInfo.prototype.hasFileBasedErrorRecoverySupport = function () {
                    return this.core != null && this.core.getFileBasedErrorRecoverySupport() != null ? this.core.getFileBasedErrorRecoverySupport() : false;
                };
                return VersionSpecificMessageSetInfo;
            }());
            exports_132("VersionSpecificMessageSetInfo", VersionSpecificMessageSetInfo);
            ChildAggregate_add_50.ChildAggregate_add(VersionSpecificMessageSetInfo, { order: 0, type: CoreMessageSetInfo_1.CoreMessageSetInfo, read: VersionSpecificMessageSetInfo.prototype.getCore, write: VersionSpecificMessageSetInfo.prototype.setCore });
        }
    };
});
System.register("domain/data/profile/AbstractMessageSetInfo", ["domain/data/profile/VersionSpecificMessageSetInfo", "meta/ChildAggregate_add"], function (exports_133, context_133) {
    "use strict";
    var VersionSpecificMessageSetInfo_1, ChildAggregate_add_51, AbstractMessageSetInfo;
    var __moduleName = context_133 && context_133.id;
    return {
        setters: [
            function (VersionSpecificMessageSetInfo_1_1) {
                VersionSpecificMessageSetInfo_1 = VersionSpecificMessageSetInfo_1_1;
            },
            function (ChildAggregate_add_51_1) {
                ChildAggregate_add_51 = ChildAggregate_add_51_1;
            }
        ],
        execute: function () {
            /**
             * Information about a message set.
             *
             * @author Ryan Heaton
             * @see "Section 7.2.1, OFX Spec"
             */
            AbstractMessageSetInfo = /** @class */ (function () {
                function AbstractMessageSetInfo() {
                }
                /**
                 * List of information about a message set for each version supported.
                 *
                 * @return List of information about a message set for each version supported.
                 */
                AbstractMessageSetInfo.prototype.getVersionSpecificInformationList = function () {
                    return this.versionSpecificInformationList;
                };
                /**
                 * List of information about a message set for each version supported.
                 *
                 * @param versionSpecificInformationList List of information about a message set for each version supported.
                 */
                AbstractMessageSetInfo.prototype.setVersionSpecificInformationList = function (versionSpecificInformationList) {
                    this.versionSpecificInformationList = versionSpecificInformationList;
                };
                return AbstractMessageSetInfo;
            }());
            exports_133("AbstractMessageSetInfo", AbstractMessageSetInfo);
            ChildAggregate_add_51.ChildAggregate_add(AbstractMessageSetInfo, { order: 0, type: Array, collectionEntryType: VersionSpecificMessageSetInfo_1.VersionSpecificMessageSetInfo, read: AbstractMessageSetInfo.prototype.getVersionSpecificInformationList, write: AbstractMessageSetInfo.prototype.setVersionSpecificInformationList });
        }
    };
});
System.register("domain/data/profile/MessageSetInfoList", ["domain/data/profile/AbstractMessageSetInfo", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_134, context_134) {
    "use strict";
    var AbstractMessageSetInfo_1, Aggregate_Add_63, ChildAggregate_add_52, MessageSetInfoList;
    var __moduleName = context_134 && context_134.id;
    return {
        setters: [
            function (AbstractMessageSetInfo_1_1) {
                AbstractMessageSetInfo_1 = AbstractMessageSetInfo_1_1;
            },
            function (Aggregate_Add_63_1) {
                Aggregate_Add_63 = Aggregate_Add_63_1;
            },
            function (ChildAggregate_add_52_1) {
                ChildAggregate_add_52 = ChildAggregate_add_52_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             * @see "Section 7.2, OFX Spec"
             */
            MessageSetInfoList = /** @class */ (function () {
                function MessageSetInfoList() {
                }
                /**
                 * The list of information for each message set.
                 *
                 * @return The list of information for each message set.
                 */
                MessageSetInfoList.prototype.getInformationList = function () {
                    return this.informationList;
                };
                /**
                 * The list of information for each message set.
                 *
                 * @param informationList The list of information for each message set.
                 */
                MessageSetInfoList.prototype.setInformationList = function (informationList) {
                    this.informationList = informationList;
                };
                return MessageSetInfoList;
            }());
            exports_134("MessageSetInfoList", MessageSetInfoList);
            Aggregate_Add_63.Aggregate_add(MessageSetInfoList, "MSGSETLIST");
            ChildAggregate_add_52.ChildAggregate_add(MessageSetInfoList, { order: 0, type: Array, collectionEntryType: AbstractMessageSetInfo_1.AbstractMessageSetInfo, read: MessageSetInfoList.prototype.getInformationList, write: MessageSetInfoList.prototype.setInformationList });
        }
    };
});
System.register("domain/data/profile/SignonInfo", ["domain/data/profile/CharacterType", "meta/Aggregate_add", "meta/Element_add"], function (exports_135, context_135) {
    "use strict";
    var CharacterType_1, Aggregate_Add_64, Element_add_38, SignonInfo;
    var __moduleName = context_135 && context_135.id;
    return {
        setters: [
            function (CharacterType_1_1) {
                CharacterType_1 = CharacterType_1_1;
            },
            function (Aggregate_Add_64_1) {
                Aggregate_Add_64 = Aggregate_Add_64_1;
            },
            function (Element_add_38_1) {
                Element_add_38 = Element_add_38_1;
            }
        ],
        execute: function () {
            /**
             * Sign-on information
             *
             * @author Ryan Heaton
             * @see "Section 7.2.2, OFX Spec"
             */
            SignonInfo = /** @class */ (function () {
                function SignonInfo() {
                    this.passwordCaseSensitive = true;
                    this.passwordSpecialCharsAllowed = true;
                    this.passwordSpacesAllowed = true;
                }
                /**
                 * The name of the sign-on realm.
                 *
                 * @return The name of the sign-on realm.
                 */
                SignonInfo.prototype.getRealm = function () {
                    return this.realm;
                };
                /**
                 * The name of the sign-on realm.
                 *
                 * @param realm The name of the sign-on realm.
                 */
                SignonInfo.prototype.setRealm = function (realm) {
                    this.realm = realm;
                };
                /**
                 * The minimum number of password characters.
                 *
                 * @return The minimum number of password characters.
                 */
                SignonInfo.prototype.getMinPasswordCharacters = function () {
                    return this.minPasswordCharacters;
                };
                /**
                 * The minimum number of password characters.
                 *
                 * @param minPasswordCharacters The minimum number of password characters.
                 */
                SignonInfo.prototype.setMinPasswordCharacters = function (minPasswordCharacters) {
                    this.minPasswordCharacters = minPasswordCharacters;
                };
                /**
                 * The maximum number of password characters.
                 *
                 * @return The maximum number of password characters.
                 */
                SignonInfo.prototype.getMaxPasswordCharacters = function () {
                    return this.maxPasswordCharacters;
                };
                /**
                 * The maximum number of password characters.
                 *
                 * @param maxPasswordCharacters The maximum number of password characters.
                 */
                SignonInfo.prototype.setMaxPasswordCharacters = function (maxPasswordCharacters) {
                    this.maxPasswordCharacters = maxPasswordCharacters;
                };
                /**
                 * The type of password characters supported.
                 *
                 * @return The type of password characters supported.
                 */
                SignonInfo.prototype.getPasswordCharacterType = function () {
                    return this.passwordCharacterType;
                };
                /**
                 * The type of password characters supported.
                 *
                 * @param passwordCharacterType The type of password characters supported.
                 */
                SignonInfo.prototype.setPasswordCharacterType = function (passwordCharacterType) {
                    this.passwordCharacterType = passwordCharacterType;
                };
                /**
                 * Whether the password is case-sensitive.
                 *
                 * @return Whether the password is case-sensitive.
                 */
                SignonInfo.prototype.getPasswordCaseSensitive = function () {
                    return this.passwordCaseSensitive;
                };
                /**
                 * Whether the password is case-sensitive.
                 *
                 * @param passwordCaseSensitive Whether the password is case-sensitive.
                 */
                SignonInfo.prototype.setPasswordCaseSensitive = function (passwordCaseSensitive) {
                    this.passwordCaseSensitive = passwordCaseSensitive;
                };
                /**
                 * Whether special characters are allowed in the password.
                 *
                 * @return Whether special characters are allowed in the password.
                 */
                SignonInfo.prototype.getPasswordSpecialCharsAllowed = function () {
                    return this.passwordSpecialCharsAllowed;
                };
                /**
                 * Whether special characters are allowed in the password.
                 *
                 * @param passwordSpecialCharsAllowed Whether special characters are allowed in the password.
                 */
                SignonInfo.prototype.setPasswordSpecialCharsAllowed = function (passwordSpecialCharsAllowed) {
                    this.passwordSpecialCharsAllowed = passwordSpecialCharsAllowed;
                };
                /**
                 * Whether spaces are allowed in the password.
                 *
                 * @return Whether spaces are allowed in the password.
                 */
                SignonInfo.prototype.getPasswordSpacesAllowed = function () {
                    return this.passwordSpacesAllowed;
                };
                /**
                 * Whether spaces are allowed in the password.
                 *
                 * @param passwordSpacesAllowed Whether spaces are allowed in the password.
                 */
                SignonInfo.prototype.setPasswordSpacesAllowed = function (passwordSpacesAllowed) {
                    this.passwordSpacesAllowed = passwordSpacesAllowed;
                };
                /**
                 * Whether the server can process a password change request for this realm.
                 *
                 * @return Whether the server can process a password change request for this realm.
                 */
                SignonInfo.prototype.getChangePasswordSupported = function () {
                    return this.changePasswordSupported;
                };
                /**
                 * Whether the server can process a password change request for this realm.
                 *
                 * @param changePasswordSupported Whether the server can process a password change request for this realm.
                 */
                SignonInfo.prototype.setChangePasswordSupported = function (changePasswordSupported) {
                    this.changePasswordSupported = changePasswordSupported;
                };
                /**
                 * Whether the server requires the user to change their password as part of their first signon.
                 *
                 * @return Whether the server requires the user to change their password as part of their first signon.
                 */
                SignonInfo.prototype.getChangePasswordFirstRequired = function () {
                    return this.changePasswordFirstRequired;
                };
                /**
                 * Whether the server requires the user to change their password as part of their first signon.
                 *
                 * @param changePasswordFirstRequired Whether the server requires the user to change their password as part of their first signon.
                 */
                SignonInfo.prototype.setChangePasswordFirstRequired = function (changePasswordFirstRequired) {
                    this.changePasswordFirstRequired = changePasswordFirstRequired;
                };
                /**
                 * Label for a set of additional credentials that the user must supply.
                 *
                 * @return Label for a set of additional credentials that the user must supply.
                 */
                SignonInfo.prototype.getAdditionalCredientialsLabel1 = function () {
                    return this.additionalCredientialsLabel1;
                };
                /**
                 * Label for a set of additional credentials that the user must supply.
                 *
                 * @param additionalCredientialsLabel1 Label for a set of additional credentials that the user must supply.
                 */
                SignonInfo.prototype.setAdditionalCredientialsLabel1 = function (additionalCredientialsLabel1) {
                    this.additionalCredientialsLabel1 = additionalCredientialsLabel1;
                };
                /**
                 * Label for a set of additional credentials that the user must supply.
                 *
                 * @return Label for a set of additional credentials that the user must supply.
                 */
                SignonInfo.prototype.getAdditionalCredientialsLabel2 = function () {
                    return this.additionalCredientialsLabel2;
                };
                /**
                 * Label for a set of additional credentials that the user must supply.
                 *
                 * @param additionalCredientialsLabel2 Label for a set of additional credentials that the user must supply.
                 */
                SignonInfo.prototype.setAdditionalCredientialsLabel2 = function (additionalCredientialsLabel2) {
                    this.additionalCredientialsLabel2 = additionalCredientialsLabel2;
                };
                /**
                 * Whether a client UID is required for teh sign-on.
                 *
                 * @return Whether a client UID is required for teh sign-on.
                 */
                SignonInfo.prototype.getClientUIDRequired = function () {
                    return this.clientUIDRequired;
                };
                /**
                 * Whether a client UID is required for teh sign-on.
                 *
                 * @param clientUIDRequired Whether a client UID is required for teh sign-on.
                 */
                SignonInfo.prototype.setClientUIDRequired = function (clientUIDRequired) {
                    this.clientUIDRequired = clientUIDRequired;
                };
                /**
                 * Whether an auth token is required for the sign-on.
                 *
                 * @return Whether an auth token is required for the sign-on.
                 */
                SignonInfo.prototype.getAuthTokenRequiredForFirstSignon = function () {
                    return this.authTokenRequiredForFirstSignon;
                };
                /**
                 * Whether an auth token is required for the sign-on.
                 *
                 * @param authTokenRequiredForFirstSignon
                 *         Whether an auth token is required for the sign-on.
                 */
                SignonInfo.prototype.setAuthTokenRequiredForFirstSignon = function (authTokenRequiredForFirstSignon) {
                    this.authTokenRequiredForFirstSignon = authTokenRequiredForFirstSignon;
                };
                /**
                 * The label of the auth token.
                 *
                 * @return The label of the auth token.
                 */
                SignonInfo.prototype.getAuthTokenLabel = function () {
                    return this.authTokenLabel;
                };
                /**
                 * The label of the auth token.
                 *
                 * @param authTokenLabel The label of the auth token.
                 */
                SignonInfo.prototype.setAuthTokenLabel = function (authTokenLabel) {
                    this.authTokenLabel = authTokenLabel;
                };
                /**
                 * The URL for the auth token information.
                 *
                 * @return The URL for the auth token information.
                 */
                SignonInfo.prototype.getAuthTokenInfoURL = function () {
                    return this.authTokenInfoURL;
                };
                /**
                 * The URL for the auth token information.
                 *
                 * @param authTokenInfoURL The URL for the auth token information.
                 */
                SignonInfo.prototype.setAuthTokenInfoURL = function (authTokenInfoURL) {
                    this.authTokenInfoURL = authTokenInfoURL;
                };
                /**
                 * Whether MFA is supported.
                 *
                 * @return Whether MFA is supported.
                 */
                SignonInfo.prototype.getMfaSupported = function () {
                    return this.mfaSupported;
                };
                /**
                 * Whether MFA is supported.
                 *
                 * @param mfaSupported Whether MFA is supported.
                 */
                SignonInfo.prototype.setMfaSupported = function (mfaSupported) {
                    this.mfaSupported = mfaSupported;
                };
                /**
                 * Whether an MFA challenge request is required for the first sign-on into this realm.
                 *
                 * @return Whether an MFA challenge request is required for the first sign-on into this realm.
                 */
                SignonInfo.prototype.getMfaChallengeRequiredForFirstSignon = function () {
                    return this.mfaChallengeRequiredForFirstSignon;
                };
                /**
                 * Whether an MFA challenge request is required for the first sign-on into this realm.
                 *
                 * @param mfaChallengeRequiredForFirstSignon
                 *         Whether an MFA challenge request is required for the first sign-on into this realm.
                 */
                SignonInfo.prototype.setMfaChallengeRequiredForFirstSignon = function (mfaChallengeRequiredForFirstSignon) {
                    this.mfaChallengeRequiredForFirstSignon = mfaChallengeRequiredForFirstSignon;
                };
                return SignonInfo;
            }());
            exports_135("SignonInfo", SignonInfo);
            Aggregate_Add_64.Aggregate_add(SignonInfo, "SIGNONINFO");
            Element_add_38.Element_add(SignonInfo, { name: "SIGNONREALM", required: true, order: 0, type: String, read: SignonInfo.prototype.getRealm, write: SignonInfo.prototype.setRealm });
            Element_add_38.Element_add(SignonInfo, { name: "MIN", required: true, order: 10, type: Number, read: SignonInfo.prototype.getMinPasswordCharacters, write: SignonInfo.prototype.setMinPasswordCharacters });
            Element_add_38.Element_add(SignonInfo, { name: "MAX", required: true, order: 20, type: Number, read: SignonInfo.prototype.getMaxPasswordCharacters, write: SignonInfo.prototype.setMaxPasswordCharacters });
            Element_add_38.Element_add(SignonInfo, { name: "CHARTYPE", required: true, order: 30, type: CharacterType_1.CharacterType, read: SignonInfo.prototype.getPasswordCharacterType, write: SignonInfo.prototype.setPasswordCharacterType });
            Element_add_38.Element_add(SignonInfo, { name: "CASESEN", required: true, order: 40, type: Boolean, read: SignonInfo.prototype.getPasswordCaseSensitive, write: SignonInfo.prototype.setPasswordCaseSensitive });
            Element_add_38.Element_add(SignonInfo, { name: "SPECIAL", required: true, order: 50, type: Boolean, read: SignonInfo.prototype.getPasswordSpecialCharsAllowed, write: SignonInfo.prototype.setPasswordSpecialCharsAllowed });
            Element_add_38.Element_add(SignonInfo, { name: "SPACES", required: true, order: 60, type: Boolean, read: SignonInfo.prototype.getPasswordSpacesAllowed, write: SignonInfo.prototype.setPasswordSpacesAllowed });
            Element_add_38.Element_add(SignonInfo, { name: "PINCH", required: true, order: 70, type: Boolean, read: SignonInfo.prototype.getChangePasswordSupported, write: SignonInfo.prototype.setChangePasswordSupported });
            Element_add_38.Element_add(SignonInfo, { name: "CHGPINFIRST", required: true, order: 80, type: Boolean, read: SignonInfo.prototype.getChangePasswordFirstRequired, write: SignonInfo.prototype.setChangePasswordFirstRequired });
            Element_add_38.Element_add(SignonInfo, { name: "USERCRED1LABEL", order: 90, type: String, read: SignonInfo.prototype.getAdditionalCredientialsLabel1, write: SignonInfo.prototype.setAdditionalCredientialsLabel1 });
            Element_add_38.Element_add(SignonInfo, { name: "USERCRED2LABEL", order: 100, type: String, read: SignonInfo.prototype.getAdditionalCredientialsLabel2, write: SignonInfo.prototype.setAdditionalCredientialsLabel2 });
            Element_add_38.Element_add(SignonInfo, { name: "CLIENTUIDREQ", order: 110, type: Boolean, read: SignonInfo.prototype.getClientUIDRequired, write: SignonInfo.prototype.setClientUIDRequired });
            Element_add_38.Element_add(SignonInfo, { name: "AUTHTOKENFIRST", order: 120, type: Boolean, read: SignonInfo.prototype.getAuthTokenRequiredForFirstSignon, write: SignonInfo.prototype.setAuthTokenRequiredForFirstSignon });
            Element_add_38.Element_add(SignonInfo, { name: "AUTHTOKENLABEL", order: 130, type: String, read: SignonInfo.prototype.getAuthTokenLabel, write: SignonInfo.prototype.setAuthTokenLabel });
            Element_add_38.Element_add(SignonInfo, { name: "AUTHTOKENINFOURL", order: 140, type: String, read: SignonInfo.prototype.getAuthTokenInfoURL, write: SignonInfo.prototype.setAuthTokenInfoURL });
            Element_add_38.Element_add(SignonInfo, { name: "MFACHALLENGESUPT", order: 150, type: Boolean, read: SignonInfo.prototype.getMfaSupported, write: SignonInfo.prototype.setMfaSupported });
            Element_add_38.Element_add(SignonInfo, { name: "MFACHALLENGEFIRST", order: 160, type: Boolean, read: SignonInfo.prototype.getMfaChallengeRequiredForFirstSignon, write: SignonInfo.prototype.setMfaChallengeRequiredForFirstSignon });
        }
    };
});
System.register("domain/data/profile/SignonInfoList", ["domain/data/profile/SignonInfo", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_136, context_136) {
    "use strict";
    var SignonInfo_1, Aggregate_Add_65, ChildAggregate_add_53, SignonInfoList;
    var __moduleName = context_136 && context_136.id;
    return {
        setters: [
            function (SignonInfo_1_1) {
                SignonInfo_1 = SignonInfo_1_1;
            },
            function (Aggregate_Add_65_1) {
                Aggregate_Add_65 = Aggregate_Add_65_1;
            },
            function (ChildAggregate_add_53_1) {
                ChildAggregate_add_53 = ChildAggregate_add_53_1;
            }
        ],
        execute: function () {
            /**
             * List of signon information.
             *
             * @author Ryan Heaton
             * @see "Section 7.2.2, OFX Spec"
             */
            SignonInfoList = /** @class */ (function () {
                function SignonInfoList() {
                }
                /**
                 * List of sign-on information.
                 *
                 * @return List of sign-on information.
                 */
                SignonInfoList.prototype.getInfoList = function () {
                    return this.infoList;
                };
                /**
                 * List of sign-on information.
                 *
                 * @param infoList List of sign-on information.
                 */
                SignonInfoList.prototype.setInfoList = function (infoList) {
                    this.infoList = infoList;
                };
                return SignonInfoList;
            }());
            exports_136("SignonInfoList", SignonInfoList);
            Aggregate_Add_65.Aggregate_add(SignonInfoList, "SIGNONINFOLIST");
            ChildAggregate_add_53.ChildAggregate_add(SignonInfoList, { order: 0, type: Array, collectionEntryType: SignonInfo_1.SignonInfo, read: SignonInfoList.prototype.getInfoList, write: SignonInfoList.prototype.setInfoList });
        }
    };
});
System.register("domain/data/profile/ProfileResponse", ["meta/Aggregate_add", "domain/data/ResponseMessage", "domain/data/profile/MessageSetInfoList", "domain/data/profile/SignonInfoList", "OFXException", "meta/ChildAggregate_add", "meta/Element_add"], function (exports_137, context_137) {
    "use strict";
    var Aggregate_Add_66, ResponseMessage_6, MessageSetInfoList_1, SignonInfoList_1, OFXException_11, ChildAggregate_add_54, Element_add_39, ProfileResponse;
    var __moduleName = context_137 && context_137.id;
    return {
        setters: [
            function (Aggregate_Add_66_1) {
                Aggregate_Add_66 = Aggregate_Add_66_1;
            },
            function (ResponseMessage_6_1) {
                ResponseMessage_6 = ResponseMessage_6_1;
            },
            function (MessageSetInfoList_1_1) {
                MessageSetInfoList_1 = MessageSetInfoList_1_1;
            },
            function (SignonInfoList_1_1) {
                SignonInfoList_1 = SignonInfoList_1_1;
            },
            function (OFXException_11_1) {
                OFXException_11 = OFXException_11_1;
            },
            function (ChildAggregate_add_54_1) {
                ChildAggregate_add_54 = ChildAggregate_add_54_1;
            },
            function (Element_add_39_1) {
                Element_add_39 = Element_add_39_1;
            }
        ],
        execute: function () {
            //import java.net.URL;
            /**
             * @author Ryan Heaton
             * @see "Section 7.2 OFX Spec"
             */
            ProfileResponse = /** @class */ (function (_super) {
                __extends(ProfileResponse, _super);
                function ProfileResponse() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * List of message set information.
                 * @return List of message set information.
                 */
                ProfileResponse.prototype.getMessageSetList = function () {
                    return this.messageSetList;
                };
                /**
                 * List of message set information.
                 *
                 * @param messageSetList List of message set information.
                 */
                ProfileResponse.prototype.setMessageSetList = function (messageSetList) {
                    this.messageSetList = messageSetList;
                };
                /**
                 * List of signon information.
                 *
                 * @return List of signon information.
                 */
                ProfileResponse.prototype.getSignonInfoList = function () {
                    return this.signonInfoList;
                };
                /**
                 * List of signon information.
                 *
                 * @param signonInfoList List of signon information.
                 */
                ProfileResponse.prototype.setSignonInfoList = function (signonInfoList) {
                    this.signonInfoList = signonInfoList;
                };
                // Inherited.
                ProfileResponse.prototype.getResponseMessageName = function () {
                    return "profile";
                };
                // Inherited.
                ProfileResponse.prototype.getLastUpdated = function () {
                    return this.getTimestamp();
                };
                /**
                 * The timestamp of this profile update.
                 *
                 * @return The timestamp of this profile update.
                 */
                ProfileResponse.prototype.getTimestamp = function () {
                    return this.timestamp;
                };
                /**
                 * The timestamp of this profile update.
                 *
                 * @param timestamp The timestamp of this profile update.
                 */
                ProfileResponse.prototype.setTimestamp = function (timestamp) {
                    this.timestamp = timestamp;
                };
                /**
                 * The name of the financial institution.
                 *
                 * @return The name of the financial institution.
                 */
                ProfileResponse.prototype.getFinancialInstitutionName = function () {
                    return this.financialInstitutionName;
                };
                /**
                 * The name of the financial institution.
                 *
                 * @param financialInstitutionName The name of the financial institution.
                 */
                ProfileResponse.prototype.setFinancialInstitutionName = function (financialInstitutionName) {
                    this.financialInstitutionName = financialInstitutionName;
                };
                /**
                 * The address of the financial institution.
                 *
                 * @return The address of the financial institution.
                 */
                ProfileResponse.prototype.getAddress1 = function () {
                    return this.address1;
                };
                /**
                 * The address of the financial institution.
                 *
                 * @param address1 The address of the financial institution.
                 */
                ProfileResponse.prototype.setAddress1 = function (address1) {
                    this.address1 = address1;
                };
                /**
                 * The address of the financial institution.
                 *
                 * @return The address of the financial institution.
                 */
                ProfileResponse.prototype.getAddress2 = function () {
                    return this.address2;
                };
                /**
                 * The address of the financial institution.
                 *
                 * @param address2 The address of the financial institution.
                 */
                ProfileResponse.prototype.setAddress2 = function (address2) {
                    this.address2 = address2;
                };
                /**
                 * The address of the financial institution.
                 *
                 * @return The address of the financial institution.
                 */
                ProfileResponse.prototype.getAddress3 = function () {
                    return this.address3;
                };
                /**
                 * The address of the financial institution.
                 *
                 * @param address3 The address of the financial institution.
                 */
                ProfileResponse.prototype.setAddress3 = function (address3) {
                    this.address3 = address3;
                };
                /**
                 * The city of the financial institution.
                 *
                 * @return The city of the financial institution.
                 */
                ProfileResponse.prototype.getCity = function () {
                    return this.city;
                };
                /**
                 * The city of the financial institution.
                 *
                 * @param city The city of the financial institution.
                 */
                ProfileResponse.prototype.setCity = function (city) {
                    this.city = city;
                };
                /**
                 * The state of this financial institution.
                 *
                 * @return The state of this financial institution.
                 */
                ProfileResponse.prototype.getState = function () {
                    return this.state;
                };
                /**
                 * The state of this financial institution.
                 *
                 * @param state The state of this financial institution.
                 */
                ProfileResponse.prototype.setState = function (state) {
                    this.state = state;
                };
                /**
                 * The postal code of this financial institution.
                 *
                 * @return The postal code of this financial institution.
                 */
                ProfileResponse.prototype.getZip = function () {
                    return this.zip;
                };
                /**
                 * The postal code of this financial institution.
                 *
                 * @param zip The postal code of this financial institution.
                 */
                ProfileResponse.prototype.setZip = function (zip) {
                    this.zip = zip;
                };
                /**
                 * The country code for this financial institution.
                 *
                 * @return The country code for this financial institution.
                 * @see java.util.Locale#getISO3Country()
                 */
                ProfileResponse.prototype.getCountry = function () {
                    return this.country;
                };
                /**
                 * The country code for this financial institution.
                 *
                 * @param country The country code for this financial institution.
                 */
                ProfileResponse.prototype.setCountry = function (country) {
                    this.country = country;
                };
                /**
                 * The phone number to customer service.
                 *
                 * @return The phone number to customer service.
                 */
                ProfileResponse.prototype.getCustomerServicePhone = function () {
                    return this.customerServicePhone;
                };
                /**
                 * The phone number to customer service.
                 *
                 * @param customerServicePhone The phone number to customer service.
                 */
                ProfileResponse.prototype.setCustomerServicePhone = function (customerServicePhone) {
                    this.customerServicePhone = customerServicePhone;
                };
                /**
                 * The phone number to tech support.
                 *
                 * @return The phone number to tech support.
                 */
                ProfileResponse.prototype.getTechnicalSupportPhone = function () {
                    return this.technicalSupportPhone;
                };
                /**
                 * The phone number to tech support.
                 *
                 * @param technicalSupportPhone The phone number to tech support.
                 */
                ProfileResponse.prototype.setTechnicalSupportPhone = function (technicalSupportPhone) {
                    this.technicalSupportPhone = technicalSupportPhone;
                };
                /**
                 * The fax number.
                 *
                 * @return The fax number.
                 */
                ProfileResponse.prototype.getFax = function () {
                    return this.fax;
                };
                /**
                 * The fax number.
                 *
                 * @param fax The fax number.
                 */
                ProfileResponse.prototype.setFax = function (fax) {
                    this.fax = fax;
                };
                /**
                 * URL for the financial institution.
                 *
                 * @return URL for the financial institution.
                 */
                ProfileResponse.prototype.getSiteURL = function () {
                    return this.siteURL;
                };
                /**
                 * URL for the financial institution.
                 *
                 * @param siteURL URL for the financial institution.
                 */
                ProfileResponse.prototype.setSiteURL = function (siteURL) {
                    this.siteURL = siteURL;
                };
                /**
                 * The email for this FI
                 *
                 * @return The email for this FI
                 */
                ProfileResponse.prototype.getEmail = function () {
                    return this.email;
                };
                /**
                 * The email for this FI
                 *
                 * @param email The email for this FI
                 */
                ProfileResponse.prototype.setEmail = function (email) {
                    this.email = email;
                };
                ProfileResponse.prototype.getMessageSetProfile = function (type, version) {
                    if (version === void 0) { version = null; }
                    return (version === null) ?
                        this.getMessageSetProfile_noversion(type) :
                        this.getMessageSetProfile_version(type, version);
                };
                ProfileResponse.prototype.getMessageSetProfile_noversion = function (type) {
                    var profiles = this.getProfiles(type);
                    if (profiles.length > 1) {
                        throw new OFXException_11.OFXException("More than one profile of type " + type);
                    }
                    else if (profiles.length == 0) {
                        return null;
                    }
                    else {
                        return profiles[0];
                    }
                };
                /**
                 * Get all the profiles of the specified type.
                 *
                 * @param type The type.
                 * @return The profiles.
                 */
                ProfileResponse.prototype.getProfiles = function (type) {
                    var profiles = new Array();
                    if (this.getMessageSetList() != null && this.getMessageSetList().getInformationList() != null) {
                        for (var _i = 0, _a = this.getMessageSetList().getInformationList(); _i < _a.length; _i++) {
                            var info = _a[_i];
                            if (info.getVersionSpecificInformationList() != null) {
                                for (var _b = 0, _c = info.getVersionSpecificInformationList(); _b < _c.length; _b++) {
                                    var versionSpecificInfo = _c[_b];
                                    if (versionSpecificInfo.getMessageSetType() == type) {
                                        profiles.push(versionSpecificInfo);
                                    }
                                }
                            }
                        }
                    }
                    return profiles;
                };
                ProfileResponse.prototype.getMessageSetProfile_version = function (type, version) {
                    for (var _i = 0, _a = this.getProfiles(type); _i < _a.length; _i++) {
                        var profile = _a[_i];
                        if (version == null) {
                            if (profile.getVersion() == null) {
                                return profile;
                            }
                        }
                        else if (version === profile.getVersion()) {
                            return profile;
                        }
                    }
                    return null;
                };
                ProfileResponse.prototype.getSignonProfile = function (messageSet) {
                    if (this.getSignonInfoList() != null && this.getSignonInfoList().getInfoList() != null) {
                        for (var _i = 0, _a = this.getSignonInfoList().getInfoList(); _i < _a.length; _i++) {
                            var signonInfo = _a[_i];
                            if (messageSet.getRealm() == null) {
                                if (signonInfo.getRealm() == null) {
                                    return signonInfo;
                                }
                            }
                            else if (messageSet.getRealm() === signonInfo.getRealm()) {
                                return signonInfo;
                            }
                        }
                    }
                    return null;
                };
                return ProfileResponse;
            }(ResponseMessage_6.ResponseMessage));
            exports_137("ProfileResponse", ProfileResponse);
            Aggregate_Add_66.Aggregate_add(ProfileResponse, "PROFRS");
            ChildAggregate_add_54.ChildAggregate_add(ProfileResponse, { order: 0, type: MessageSetInfoList_1.MessageSetInfoList, read: ProfileResponse.prototype.getMessageSetList, write: ProfileResponse.prototype.setMessageSetList });
            ChildAggregate_add_54.ChildAggregate_add(ProfileResponse, { order: 10, type: SignonInfoList_1.SignonInfoList, read: ProfileResponse.prototype.getSignonInfoList, write: ProfileResponse.prototype.setSignonInfoList });
            Element_add_39.Element_add(ProfileResponse, { name: "DTPROFUP", order: 20, type: Date, read: ProfileResponse.prototype.getTimestamp, write: ProfileResponse.prototype.setTimestamp });
            Element_add_39.Element_add(ProfileResponse, { name: "FINAME", order: 30, type: String, read: ProfileResponse.prototype.getFinancialInstitutionName, write: ProfileResponse.prototype.setFinancialInstitutionName });
            Element_add_39.Element_add(ProfileResponse, { name: "ADDR1", required: true, order: 40, type: String, read: ProfileResponse.prototype.getAddress1, write: ProfileResponse.prototype.setAddress1 });
            Element_add_39.Element_add(ProfileResponse, { name: "ADDR2", order: 50, type: String, read: ProfileResponse.prototype.getAddress2, write: ProfileResponse.prototype.setAddress2 });
            Element_add_39.Element_add(ProfileResponse, { name: "ADDR3", order: 60, type: String, read: ProfileResponse.prototype.getAddress3, write: ProfileResponse.prototype.setAddress3 });
            Element_add_39.Element_add(ProfileResponse, { name: "CITY", required: true, order: 70, type: String, read: ProfileResponse.prototype.getCity, write: ProfileResponse.prototype.setCity });
            Element_add_39.Element_add(ProfileResponse, { name: "STATE", required: true, order: 80, type: String, read: ProfileResponse.prototype.getState, write: ProfileResponse.prototype.setState });
            Element_add_39.Element_add(ProfileResponse, { name: "POSTALCODE", required: true, order: 90, type: String, read: ProfileResponse.prototype.getZip, write: ProfileResponse.prototype.setZip });
            Element_add_39.Element_add(ProfileResponse, { name: "COUNTRY", required: true, order: 100, type: String, read: ProfileResponse.prototype.getCountry, write: ProfileResponse.prototype.setCountry });
            Element_add_39.Element_add(ProfileResponse, { name: "CSPHONE", order: 110, type: String, read: ProfileResponse.prototype.getCustomerServicePhone, write: ProfileResponse.prototype.setCustomerServicePhone });
            Element_add_39.Element_add(ProfileResponse, { name: "TSPHONE", order: 120, type: String, read: ProfileResponse.prototype.getTechnicalSupportPhone, write: ProfileResponse.prototype.setTechnicalSupportPhone });
            Element_add_39.Element_add(ProfileResponse, { name: "FAXPHONE", order: 130, type: String, read: ProfileResponse.prototype.getFax, write: ProfileResponse.prototype.setFax });
            Element_add_39.Element_add(ProfileResponse, { name: "URL", order: 140, type: String, read: ProfileResponse.prototype.getSiteURL, write: ProfileResponse.prototype.setSiteURL });
            Element_add_39.Element_add(ProfileResponse, { name: "EMAIL", order: 150, type: String, read: ProfileResponse.prototype.getEmail, write: ProfileResponse.prototype.setEmail });
        }
    };
});
System.register("domain/data/profile/ProfileResponseTransaction", ["domain/data/TransactionWrappedResponseMessage", "domain/data/profile/ProfileResponse", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_138, context_138) {
    "use strict";
    var TransactionWrappedResponseMessage_5, ProfileResponse_1, Aggregate_Add_67, ChildAggregate_add_55, ProfileResponseTransaction;
    var __moduleName = context_138 && context_138.id;
    return {
        setters: [
            function (TransactionWrappedResponseMessage_5_1) {
                TransactionWrappedResponseMessage_5 = TransactionWrappedResponseMessage_5_1;
            },
            function (ProfileResponse_1_1) {
                ProfileResponse_1 = ProfileResponse_1_1;
            },
            function (Aggregate_Add_67_1) {
                Aggregate_Add_67 = Aggregate_Add_67_1;
            },
            function (ChildAggregate_add_55_1) {
                ChildAggregate_add_55 = ChildAggregate_add_55_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            ProfileResponseTransaction = /** @class */ (function (_super) {
                __extends(ProfileResponseTransaction, _super);
                function ProfileResponseTransaction() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * The message.
                 *
                 * @return The message.
                 */
                ProfileResponseTransaction.prototype.getMessage = function () {
                    return this.message;
                };
                /**
                 * The message.
                 *
                 * @param message The message.
                 */
                ProfileResponseTransaction.prototype.setMessage = function (message) {
                    this.message = message;
                };
                // Inherited.
                ProfileResponseTransaction.prototype.getWrappedMessage = function () {
                    return this.getMessage();
                };
                return ProfileResponseTransaction;
            }(TransactionWrappedResponseMessage_5.TransactionWrappedResponseMessage));
            exports_138("ProfileResponseTransaction", ProfileResponseTransaction);
            Aggregate_Add_67.Aggregate_add(ProfileResponseTransaction, "PROFTRNRS");
            ChildAggregate_add_55.ChildAggregate_add(ProfileResponseTransaction, { required: true, order: 30, type: ProfileResponse_1.ProfileResponse, read: ProfileResponseTransaction.prototype.getMessage, write: ProfileResponseTransaction.prototype.setMessage });
        }
    };
});
System.register("domain/data/profile/ProfileResponseMessageSet", ["meta/Aggregate_add", "domain/data/ResponseMessageSet", "domain/data/profile/ProfileResponseTransaction", "domain/data/MessageSetType", "meta/ChildAggregate_add"], function (exports_139, context_139) {
    "use strict";
    var Aggregate_Add_68, ResponseMessageSet_6, ProfileResponseTransaction_1, MessageSetType_14, ChildAggregate_add_56, ProfileResponseMessageSet;
    var __moduleName = context_139 && context_139.id;
    return {
        setters: [
            function (Aggregate_Add_68_1) {
                Aggregate_Add_68 = Aggregate_Add_68_1;
            },
            function (ResponseMessageSet_6_1) {
                ResponseMessageSet_6 = ResponseMessageSet_6_1;
            },
            function (ProfileResponseTransaction_1_1) {
                ProfileResponseTransaction_1 = ProfileResponseTransaction_1_1;
            },
            function (MessageSetType_14_1) {
                MessageSetType_14 = MessageSetType_14_1;
            },
            function (ChildAggregate_add_56_1) {
                ChildAggregate_add_56 = ChildAggregate_add_56_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             * @see "Section 7 OFX Spec"
             */
            ProfileResponseMessageSet = /** @class */ (function (_super) {
                __extends(ProfileResponseMessageSet, _super);
                function ProfileResponseMessageSet() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                ProfileResponseMessageSet.prototype.getType = function () {
                    return MessageSetType_14.MessageSetType.profile;
                };
                /**
                 * The profile response.
                 *
                 * @return The profile response.
                 */
                ProfileResponseMessageSet.prototype.getProfileResponse = function () {
                    return this.profileResponse;
                };
                /**
                 * The profile response.
                 *
                 * @param profileResponse The profile response.
                 */
                ProfileResponseMessageSet.prototype.setProfileResponse = function (profileResponse) {
                    this.profileResponse = profileResponse;
                };
                // Inherited.
                ProfileResponseMessageSet.prototype.getResponseMessages = function () {
                    var messages = new Array();
                    if (this.getProfileResponse() != null) {
                        messages.push(this.getProfileResponse());
                    }
                    return messages;
                };
                return ProfileResponseMessageSet;
            }(ResponseMessageSet_6.ResponseMessageSet));
            exports_139("ProfileResponseMessageSet", ProfileResponseMessageSet);
            Aggregate_Add_68.Aggregate_add(ProfileResponseMessageSet, "PROFMSGSRSV1");
            ChildAggregate_add_56.ChildAggregate_add(ProfileResponseMessageSet, { required: true, order: 0, type: ProfileResponseTransaction_1.ProfileResponseTransaction, read: ProfileResponseMessageSet.prototype.getProfileResponse, write: ProfileResponseMessageSet.prototype.setProfileResponse });
        }
    };
});
System.register("domain/data/signup/AccountInfoResponse", ["domain/data/ResponseMessage", "domain/data/signup/AccountProfile", "meta/Aggregate_add", "meta/Element_add", "meta/ChildAggregate_add"], function (exports_140, context_140) {
    "use strict";
    var ResponseMessage_7, AccountProfile_1, Aggregate_Add_69, Element_add_40, ChildAggregate_add_57, AccountInfoResponse;
    var __moduleName = context_140 && context_140.id;
    return {
        setters: [
            function (ResponseMessage_7_1) {
                ResponseMessage_7 = ResponseMessage_7_1;
            },
            function (AccountProfile_1_1) {
                AccountProfile_1 = AccountProfile_1_1;
            },
            function (Aggregate_Add_69_1) {
                Aggregate_Add_69 = Aggregate_Add_69_1;
            },
            function (Element_add_40_1) {
                Element_add_40 = Element_add_40_1;
            },
            function (ChildAggregate_add_57_1) {
                ChildAggregate_add_57 = ChildAggregate_add_57_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            AccountInfoResponse = /** @class */ (function (_super) {
                __extends(AccountInfoResponse, _super);
                function AccountInfoResponse() {
                    var _this = _super.call(this) || this;
                    _this.lastUpdated = new Date(0); //default is never updated.
                    return _this;
                }
                AccountInfoResponse.prototype.getResponseMessageName = function () {
                    return "account info";
                };
                /**
                 * When the account info was last updated.
                 *
                 * @return When the account info was last updated.
                 */
                AccountInfoResponse.prototype.getLastUpdated = function () {
                    return this.lastUpdated;
                };
                /**
                 * When the account info was last updated.
                 *
                 * @param lastUpdated When the account info was last updated.
                 */
                AccountInfoResponse.prototype.setLastUpdated = function (lastUpdated) {
                    this.lastUpdated = lastUpdated;
                };
                /**
                 * The accounts.
                 *
                 * @return The accounts.
                 */
                AccountInfoResponse.prototype.getAccounts = function () {
                    return this.accounts;
                };
                /**
                 * The accounts.
                 *
                 * @param accounts The accounts.
                 */
                AccountInfoResponse.prototype.setAccounts = function (accounts) {
                    this.accounts = accounts;
                };
                return AccountInfoResponse;
            }(ResponseMessage_7.ResponseMessage));
            exports_140("AccountInfoResponse", AccountInfoResponse);
            Aggregate_Add_69.Aggregate_add(AccountInfoResponse, "ACCTINFORS");
            Element_add_40.Element_add(AccountInfoResponse, { name: "DTACCTUP", required: true, order: 0, type: Date, read: AccountInfoResponse.prototype.getLastUpdated, write: AccountInfoResponse.prototype.setLastUpdated });
            ChildAggregate_add_57.ChildAggregate_add(AccountInfoResponse, { order: 10, type: Array, collectionEntryType: AccountProfile_1.AccountProfile, read: AccountInfoResponse.prototype.getAccounts, write: AccountInfoResponse.prototype.setAccounts });
        }
    };
});
System.register("domain/data/signup/AccountInfoResponseTransaction", ["domain/data/signup/AccountInfoResponse", "domain/data/TransactionWrappedResponseMessage", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_141, context_141) {
    "use strict";
    var AccountInfoResponse_1, TransactionWrappedResponseMessage_6, Aggregate_Add_70, ChildAggregate_add_58, AccountInfoResponseTransaction;
    var __moduleName = context_141 && context_141.id;
    return {
        setters: [
            function (AccountInfoResponse_1_1) {
                AccountInfoResponse_1 = AccountInfoResponse_1_1;
            },
            function (TransactionWrappedResponseMessage_6_1) {
                TransactionWrappedResponseMessage_6 = TransactionWrappedResponseMessage_6_1;
            },
            function (Aggregate_Add_70_1) {
                Aggregate_Add_70 = Aggregate_Add_70_1;
            },
            function (ChildAggregate_add_58_1) {
                ChildAggregate_add_58 = ChildAggregate_add_58_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            AccountInfoResponseTransaction = /** @class */ (function (_super) {
                __extends(AccountInfoResponseTransaction, _super);
                function AccountInfoResponseTransaction() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * The wrapped message.
                 *
                 * @return The wrapped message.
                 */
                AccountInfoResponseTransaction.prototype.getMessage = function () {
                    return this.message;
                };
                /**
                 * The wrapped message.
                 *
                 * @param message The wrapped message.
                 */
                AccountInfoResponseTransaction.prototype.setMessage = function (message) {
                    this.message = message;
                };
                // Inherited.
                AccountInfoResponseTransaction.prototype.getWrappedMessage = function () {
                    return this.getMessage();
                };
                return AccountInfoResponseTransaction;
            }(TransactionWrappedResponseMessage_6.TransactionWrappedResponseMessage));
            exports_141("AccountInfoResponseTransaction", AccountInfoResponseTransaction);
            Aggregate_Add_70.Aggregate_add(AccountInfoResponseTransaction, "ACCTINFOTRNRS");
            ChildAggregate_add_58.ChildAggregate_add(AccountInfoResponseTransaction, { required: true, order: 30, type: AccountInfoResponse_1.AccountInfoResponse, read: AccountInfoResponseTransaction.prototype.getMessage, write: AccountInfoResponseTransaction.prototype.setMessage });
        }
    };
});
System.register("domain/data/signup/SignupResponseMessageSet", ["meta/Aggregate_add", "domain/data/ResponseMessageSet", "domain/data/signup/AccountInfoResponseTransaction", "domain/data/MessageSetType", "meta/ChildAggregate_add"], function (exports_142, context_142) {
    "use strict";
    var Aggregate_Add_71, ResponseMessageSet_7, AccountInfoResponseTransaction_1, MessageSetType_15, ChildAggregate_add_59, SignupResponseMessageSet;
    var __moduleName = context_142 && context_142.id;
    return {
        setters: [
            function (Aggregate_Add_71_1) {
                Aggregate_Add_71 = Aggregate_Add_71_1;
            },
            function (ResponseMessageSet_7_1) {
                ResponseMessageSet_7 = ResponseMessageSet_7_1;
            },
            function (AccountInfoResponseTransaction_1_1) {
                AccountInfoResponseTransaction_1 = AccountInfoResponseTransaction_1_1;
            },
            function (MessageSetType_15_1) {
                MessageSetType_15 = MessageSetType_15_1;
            },
            function (ChildAggregate_add_59_1) {
                ChildAggregate_add_59 = ChildAggregate_add_59_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            SignupResponseMessageSet = /** @class */ (function (_super) {
                __extends(SignupResponseMessageSet, _super);
                function SignupResponseMessageSet() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                SignupResponseMessageSet.prototype.getType = function () {
                    return MessageSetType_15.MessageSetType.signup;
                };
                /**
                 * The account info response.
                 *
                 * @return The account info response.
                 */
                SignupResponseMessageSet.prototype.getAccountInfoResponse = function () {
                    return this.accountInfoResponse;
                };
                /**
                 * The account info response.
                 *
                 * @param accountInfoResponse The account info response.
                 */
                SignupResponseMessageSet.prototype.setAccountInfoResponse = function (accountInfoResponse) {
                    this.accountInfoResponse = accountInfoResponse;
                };
                /**
                 * The response messages.
                 *
                 * @return The response messages.
                 */
                SignupResponseMessageSet.prototype.getResponseMessages = function () {
                    var messages = new Array();
                    if (this.getAccountInfoResponse() != null) {
                        messages.push(this.getAccountInfoResponse());
                    }
                    return messages;
                };
                return SignupResponseMessageSet;
            }(ResponseMessageSet_7.ResponseMessageSet));
            exports_142("SignupResponseMessageSet", SignupResponseMessageSet);
            Aggregate_Add_71.Aggregate_add(SignupResponseMessageSet, "SIGNUPMSGSRSV1");
            ChildAggregate_add_59.ChildAggregate_add(SignupResponseMessageSet, { order: 0, type: AccountInfoResponseTransaction_1.AccountInfoResponseTransaction, read: SignupResponseMessageSet.prototype.getAccountInfoResponse, write: SignupResponseMessageSet.prototype.setAccountInfoResponse });
        }
    };
});
System.register("client/impl/FinancialInstitutionImpl", ["OFXException", "domain/data/RequestEnvelope", "domain/data/signon/SignonRequest", "domain/data/profile/ProfileRequestMessageSet", "domain/data/signup/SignupRequestMessageSet", "client/impl/BankingAccountImpl", "client/impl/CreditCardAccountImpl", "client/impl/InvestmentAccountImpl", "collections/SortedSet", "domain/data/RequestMessageSet", "domain/data/signon/SignonRequestMessageSet", "domain/data/MessageSetType", "domain/data/ApplicationSecurity", "UnsupportedOFXSecurityTypeException", "client/NoOFXResponseException", "domain/data/TransactionWrappedRequestMessage", "domain/data/common/StatusHolder", "domain/data/TransactionWrappedResponseMessage", "OFXTransactionException", "domain/data/common/Status", "OFXStatusException", "domain/data/profile/ProfileRequestTransaction", "domain/data/profile/ProfileRequest", "client/context/OFXApplicationContextHolder", "domain/data/signup/AccountInfoRequestTransaction", "domain/data/signup/AccountInfoRequest", "domain/data/signon/FinancialInstitution"], function (exports_143, context_143) {
    "use strict";
    var OFXException_12, RequestEnvelope_1, SignonRequest_2, ProfileRequestMessageSet_1, SignupRequestMessageSet_1, BankingAccountImpl_1, CreditCardAccountImpl_1, InvestmentAccountImpl_1, SortedSet_5, RequestMessageSet_8, SignonRequestMessageSet_1, MessageSetType_16, ApplicationSecurity_4, UnsupportedOFXSecurityTypeException_1, NoOFXResponseException_1, TransactionWrappedRequestMessage_7, StatusHolder_1, TransactionWrappedResponseMessage_7, OFXTransactionException_1, Status_3, OFXStatusException_1, ProfileRequestTransaction_2, ProfileRequest_2, OFXApplicationContextHolder_1, AccountInfoRequestTransaction_2, AccountInfoRequest_2, FinancialInstitution_3, FinancialInstitutionImpl;
    var __moduleName = context_143 && context_143.id;
    return {
        setters: [
            function (OFXException_12_1) {
                OFXException_12 = OFXException_12_1;
            },
            function (RequestEnvelope_1_1) {
                RequestEnvelope_1 = RequestEnvelope_1_1;
            },
            function (SignonRequest_2_1) {
                SignonRequest_2 = SignonRequest_2_1;
            },
            function (ProfileRequestMessageSet_1_1) {
                ProfileRequestMessageSet_1 = ProfileRequestMessageSet_1_1;
            },
            function (SignupRequestMessageSet_1_1) {
                SignupRequestMessageSet_1 = SignupRequestMessageSet_1_1;
            },
            function (BankingAccountImpl_1_1) {
                BankingAccountImpl_1 = BankingAccountImpl_1_1;
            },
            function (CreditCardAccountImpl_1_1) {
                CreditCardAccountImpl_1 = CreditCardAccountImpl_1_1;
            },
            function (InvestmentAccountImpl_1_1) {
                InvestmentAccountImpl_1 = InvestmentAccountImpl_1_1;
            },
            function (SortedSet_5_1) {
                SortedSet_5 = SortedSet_5_1;
            },
            function (RequestMessageSet_8_1) {
                RequestMessageSet_8 = RequestMessageSet_8_1;
            },
            function (SignonRequestMessageSet_1_1) {
                SignonRequestMessageSet_1 = SignonRequestMessageSet_1_1;
            },
            function (MessageSetType_16_1) {
                MessageSetType_16 = MessageSetType_16_1;
            },
            function (ApplicationSecurity_4_1) {
                ApplicationSecurity_4 = ApplicationSecurity_4_1;
            },
            function (UnsupportedOFXSecurityTypeException_1_1) {
                UnsupportedOFXSecurityTypeException_1 = UnsupportedOFXSecurityTypeException_1_1;
            },
            function (NoOFXResponseException_1_1) {
                NoOFXResponseException_1 = NoOFXResponseException_1_1;
            },
            function (TransactionWrappedRequestMessage_7_1) {
                TransactionWrappedRequestMessage_7 = TransactionWrappedRequestMessage_7_1;
            },
            function (StatusHolder_1_1) {
                StatusHolder_1 = StatusHolder_1_1;
            },
            function (TransactionWrappedResponseMessage_7_1) {
                TransactionWrappedResponseMessage_7 = TransactionWrappedResponseMessage_7_1;
            },
            function (OFXTransactionException_1_1) {
                OFXTransactionException_1 = OFXTransactionException_1_1;
            },
            function (Status_3_1) {
                Status_3 = Status_3_1;
            },
            function (OFXStatusException_1_1) {
                OFXStatusException_1 = OFXStatusException_1_1;
            },
            function (ProfileRequestTransaction_2_1) {
                ProfileRequestTransaction_2 = ProfileRequestTransaction_2_1;
            },
            function (ProfileRequest_2_1) {
                ProfileRequest_2 = ProfileRequest_2_1;
            },
            function (OFXApplicationContextHolder_1_1) {
                OFXApplicationContextHolder_1 = OFXApplicationContextHolder_1_1;
            },
            function (AccountInfoRequestTransaction_2_1) {
                AccountInfoRequestTransaction_2 = AccountInfoRequestTransaction_2_1;
            },
            function (AccountInfoRequest_2_1) {
                AccountInfoRequest_2 = AccountInfoRequest_2_1;
            },
            function (FinancialInstitution_3_1) {
                FinancialInstitution_3 = FinancialInstitution_3_1;
            }
        ],
        execute: function () {
            //import java.net.URL;
            /**
             * Base implementation for the financial institution.
             *
             * @author Ryan Heaton
             */
            FinancialInstitutionImpl = /** @class */ (function (_super) {
                __extends(FinancialInstitutionImpl, _super);
                function FinancialInstitutionImpl(data, connection) {
                    var _this = _super.call(this) || this;
                    if (data == null) {
                        throw new OFXException_12.OFXException("Data cannot be null");
                    }
                    if (connection == null) {
                        throw new OFXException_12.OFXException("An OFX connection must be supplied");
                    }
                    _this.data = data;
                    _this.connection = connection;
                    return _this;
                }
                // Inherited.
                FinancialInstitutionImpl.prototype.readProfile = function () {
                    var _this = this;
                    var request = this.createAuthenticatedRequest(SignonRequest_2.SignonRequest.ANONYMOUS_USER, SignonRequest_2.SignonRequest.ANONYMOUS_USER);
                    var profileRequest = new ProfileRequestMessageSet_1.ProfileRequestMessageSet();
                    profileRequest.setProfileRequest(this.createProfileTransaction());
                    request.getMessageSets().insert(profileRequest);
                    return this.sendRequest(request, this.getData().getOFXURL())
                        .then(function (response) {
                        _this.doGeneralValidationChecks(request, response);
                        return _this.getProfile(response);
                    });
                };
                // Inherited.
                FinancialInstitutionImpl.prototype.readAccountProfiles = function (username, password) {
                    var _this = this;
                    var request = this.createAuthenticatedRequest(username, password);
                    var signupRequest = new SignupRequestMessageSet_1.SignupRequestMessageSet();
                    signupRequest.setAccountInfoRequest(this.createAccountInfoTransaction());
                    request.getMessageSets().insert(signupRequest);
                    return this.sendRequest(request, this.getData().getOFXURL())
                        .then(function (response) {
                        _this.doGeneralValidationChecks(request, response);
                        return _this.getAccountProfiles(response);
                    });
                };
                // Inherited.
                FinancialInstitutionImpl.prototype.loadBankAccount = function (details, username, password) {
                    return new BankingAccountImpl_1.BankingAccountImpl(details, username, password, this);
                };
                // Inherited.
                FinancialInstitutionImpl.prototype.loadCreditCardAccount = function (details, username, password) {
                    return new CreditCardAccountImpl_1.CreditCardAccountImpl(details, username, password, this);
                };
                // Inherited
                FinancialInstitutionImpl.prototype.loadInvestmentAccount = function (details, username, password) {
                    return new InvestmentAccountImpl_1.InvestmentAccountImpl(details, username, password, this);
                };
                /**
                 * Create an authenticated request envelope.
                 *
                 * @param username The username.
                 * @param password The password.
                 * @return The request envelope.
                 */
                FinancialInstitutionImpl.prototype.createAuthenticatedRequest = function (username, password) {
                    var request = new RequestEnvelope_1.RequestEnvelope();
                    var messageSets = new SortedSet_5.SortedSet(RequestMessageSet_8.RequestMessageSet.contentCompare);
                    var signonRequest = new SignonRequestMessageSet_1.SignonRequestMessageSet();
                    signonRequest.setSignonRequest(this.createSignonRequest(username, password));
                    messageSets.insert(signonRequest);
                    request.setMessageSets(messageSets);
                    return request;
                };
                //  /**
                //   * Send a request.
                //   *
                //   * @param request The request.
                //   * @return The request.
                //   */
                //  protected sendRequest(request: RequestEnvelope) /*throws OFXConnectionException*/: ResponseEnvelope {
                //    return this.getConnection().sendRequest(request, getData().getOFXURL());
                //  }
                /**
                 * Send a request to a specific URL.
                 *
                 * @param request The request.
                 * @param url The url.
                 * @return The request.
                 */
                FinancialInstitutionImpl.prototype.sendRequest = function (request, url) {
                    if (url === void 0) { url = this.getData().getOFXURL(); }
                    return this.getConnection().sendRequest(request, url);
                };
                /**
                 * Open the specified response envelope and look for the profile.
                 *
                 * @param response The response envelope.
                 * @return The profile.
                 */
                FinancialInstitutionImpl.prototype.getProfile = function (response) {
                    var profileSet = response.getMessageSet(MessageSetType_16.MessageSetType.profile);
                    if (profileSet == null) {
                        throw new OFXException_12.OFXException("No profile response set.");
                    }
                    var transactionResponse = profileSet.getProfileResponse();
                    if (transactionResponse == null) {
                        throw new OFXException_12.OFXException("No profile transaction wrapper.");
                    }
                    var message = transactionResponse.getMessage();
                    if (message == null) {
                        throw new OFXException_12.OFXException("No profile message.");
                    }
                    return message;
                };
                /**
                 * General validation checks on the specified response.
                 *
                 * @param request The request.
                 * @param response Their response.
                 * @throws OFXException Upon invalid response.
                 */
                FinancialInstitutionImpl.prototype.doGeneralValidationChecks = function (request, response) {
                    if (response.getSecurity() != ApplicationSecurity_4.ApplicationSecurity.NONE) {
                        throw new UnsupportedOFXSecurityTypeException_1.UnsupportedOFXSecurityTypeException("Unable to participate in " + response.getSecurity() + " security.");
                    }
                    if (request.getUID() !== response.getUID()) {
                        throw new OFXException_12.OFXException("Invalid transaction ID '" + response.getUID() + "' in response.  Expected: " + request);
                    }
                    for (var _i = 0, _a = request.getMessageSets().values(); _i < _a.length; _i++) {
                        var requestSet = _a[_i];
                        var responseSet = response.getMessageSet(requestSet.getType());
                        if (responseSet == null) {
                            throw new NoOFXResponseException_1.NoOFXResponseException("No response for the " + requestSet.getType() + " request.");
                        }
                        if (responseSet.getType() == MessageSetType_16.MessageSetType.signon) {
                            var signonResponse = responseSet.getSignonResponse();
                            if (signonResponse == null) {
                                throw new NoOFXResponseException_1.NoOFXResponseException("No signon response.");
                            }
                        }
                        var transactionIds = {};
                        for (var _b = 0, _c = requestSet.getRequestMessages(); _b < _c.length; _b++) {
                            var requestMessage = _c[_b];
                            if (requestMessage instanceof TransactionWrappedRequestMessage_7.TransactionWrappedRequestMessage) {
                                transactionIds[requestMessage.getUID()] = true;
                            }
                        }
                        for (var _d = 0, _e = responseSet.getResponseMessages(); _d < _e.length; _d++) {
                            var responseMessage = _e[_d];
                            if (StatusHolder_1.instanceof_StatusHolder(responseMessage)) {
                                this.validateStatus(responseMessage);
                            }
                            if (responseMessage instanceof TransactionWrappedResponseMessage_7.TransactionWrappedResponseMessage) {
                                var uid = responseMessage.getUID();
                                if (uid == null) {
                                    throw new OFXTransactionException_1.OFXTransactionException("Invalid response transaction: no UID.");
                                }
                                else if (!(uid in transactionIds)) {
                                    throw new OFXTransactionException_1.OFXTransactionException("Response to an unknown transaction: " + uid + ".");
                                }
                                else {
                                    delete transactionIds[uid];
                                }
                            }
                        }
                        if (Object.keys(transactionIds).length != 0) {
                            throw new OFXTransactionException_1.OFXTransactionException("No response to the following transactions: " + transactionIds);
                        }
                    }
                };
                /**
                 * Validate the status of the given status holder.
                 *
                 * @param statusHolder The status holder.
                 */
                FinancialInstitutionImpl.prototype.validateStatus = function (statusHolder) {
                    var status = statusHolder.getStatus();
                    if (status == null) {
                        throw new OFXException_12.OFXException("Invalid OFX response: no status returned in the " + statusHolder.getStatusHolderName() + " response.");
                    }
                    if (Status_3.KnownCode.SUCCESS != status.getCode()) {
                        var message = status.getMessage();
                        if (message == null) {
                            message = "No response status code.";
                            if (status.getCode() != null) {
                                message = status.getCode().getMessage();
                            }
                        }
                        throw new OFXStatusException_1.OFXStatusException(status, "Invalid " + statusHolder.getStatusHolderName() + ": " + message);
                    }
                };
                /**
                 * Create a transaction message for a profile request.
                 *
                 * @return The transaction message.
                 */
                FinancialInstitutionImpl.prototype.createProfileTransaction = function () {
                    var profileTx = new ProfileRequestTransaction_2.ProfileRequestTransaction();
                    profileTx.setMessage(this.createProfileRequest());
                    return profileTx;
                };
                /**
                 * Create a profile request.
                 *
                 * @return The profile request.
                 */
                FinancialInstitutionImpl.prototype.createProfileRequest = function () {
                    var profileRequest = new ProfileRequest_2.ProfileRequest();
                    profileRequest.setProfileLastUpdated(new Date(0));
                    return profileRequest;
                };
                /**
                 * Create a sign-on request for the specified user.
                 *
                 * @param username The username.
                 * @param password The password.
                 * @return The signon request.
                 */
                FinancialInstitutionImpl.prototype.createSignonRequest = function (username, password) {
                    var signonRequest = new SignonRequest_2.SignonRequest();
                    signonRequest.setTimestamp(new Date());
                    var fi = new FinancialInstitution_3.FinancialInstitution();
                    fi.setId(this.getData().getFinancialInstitutionId());
                    fi.setOrganization(this.getData().getOrganization());
                    signonRequest.setFinancialInstitution(fi);
                    signonRequest.setUserId(username);
                    signonRequest.setPassword(password);
                    signonRequest.setApplicationId(OFXApplicationContextHolder_1.OFXApplicationContextHolder.getCurrentContext().getAppId());
                    signonRequest.setApplicationVersion(OFXApplicationContextHolder_1.OFXApplicationContextHolder.getCurrentContext().getAppVersion());
                    return signonRequest;
                };
                /**
                 * Create a transaction for an account info request.
                 *
                 * @return The transaction.
                 */
                FinancialInstitutionImpl.prototype.createAccountInfoTransaction = function () {
                    var transaction = new AccountInfoRequestTransaction_2.AccountInfoRequestTransaction();
                    transaction.setMessage(this.createAccountInfoRequest());
                    return transaction;
                };
                /**
                 * Create an account info request.
                 *
                 * @return The account info request.
                 */
                FinancialInstitutionImpl.prototype.createAccountInfoRequest = function () {
                    return new AccountInfoRequest_2.AccountInfoRequest();
                };
                /**
                 * Get the account profiles for the specified response envelope.
                 *
                 * @param response The response envelope.
                 * @return The account profiles.
                 */
                FinancialInstitutionImpl.prototype.getAccountProfiles = function (response) {
                    var messageSet = response.getMessageSet(MessageSetType_16.MessageSetType.signup);
                    if (messageSet == null) {
                        throw new OFXException_12.OFXException("No signup response message set.");
                    }
                    var transaction = messageSet.getAccountInfoResponse();
                    if (transaction == null) {
                        throw new OFXException_12.OFXException("No account info transaction in the signup response.");
                    }
                    var infoResponse = transaction.getMessage();
                    if (infoResponse == null) {
                        throw new OFXException_12.OFXException("No account info response in the transaction.");
                    }
                    return infoResponse.getAccounts();
                };
                /**
                 * The connection used by this implementation.
                 *
                 * @return The connection used by this implementation.
                 */
                FinancialInstitutionImpl.prototype.getConnection = function () {
                    return this.connection;
                };
                /**
                 * The financial institution data.
                 *
                 * @return The financial institution data.
                 */
                FinancialInstitutionImpl.prototype.getData = function () {
                    return this.data;
                };
                return FinancialInstitutionImpl;
            }(FinancialInstitution_3.FinancialInstitution));
            exports_143("FinancialInstitutionImpl", FinancialInstitutionImpl);
        }
    };
});
System.register("client/impl/BaseAccountImpl", ["domain/data/MessageSetType", "domain/data/banking/BankAccountDetails", "domain/data/creditcard/CreditCardAccountDetails", "domain/data/investment/accounts/InvestmentAccountDetails", "OFXException", "domain/data/common/StatementRange"], function (exports_144, context_144) {
    "use strict";
    var MessageSetType_17, BankAccountDetails_3, CreditCardAccountDetails_5, InvestmentAccountDetails_4, OFXException_13, StatementRange_3, BaseAccountImpl;
    var __moduleName = context_144 && context_144.id;
    return {
        setters: [
            function (MessageSetType_17_1) {
                MessageSetType_17 = MessageSetType_17_1;
            },
            function (BankAccountDetails_3_1) {
                BankAccountDetails_3 = BankAccountDetails_3_1;
            },
            function (CreditCardAccountDetails_5_1) {
                CreditCardAccountDetails_5 = CreditCardAccountDetails_5_1;
            },
            function (InvestmentAccountDetails_4_1) {
                InvestmentAccountDetails_4 = InvestmentAccountDetails_4_1;
            },
            function (OFXException_13_1) {
                OFXException_13 = OFXException_13_1;
            },
            function (StatementRange_3_1) {
                StatementRange_3 = StatementRange_3_1;
            }
        ],
        execute: function () {
            /**
             * Base account implementation. Supports banking and credit card accounts.
             *
             * @author Ryan Heaton
             */
            BaseAccountImpl = /** @class */ (function () {
                function BaseAccountImpl(details, username, password, institution) {
                    this.details = details;
                    this.username = username;
                    this.password = password;
                    this.institution = institution;
                    this.messageType = this.getMessageSetType(details);
                }
                /**
                 * Get the message set type of the specified details.
                 *
                 * @param details The details.
                 * @return The message set type.
                 */
                BaseAccountImpl.prototype.getMessageSetType = function (details) {
                    var messageType;
                    if (details instanceof BankAccountDetails_3.BankAccountDetails) {
                        messageType = MessageSetType_17.MessageSetType.banking;
                    }
                    else if (this.getDetails() instanceof CreditCardAccountDetails_5.CreditCardAccountDetails) {
                        messageType = MessageSetType_17.MessageSetType.creditcard;
                    }
                    else if (this.getDetails() instanceof InvestmentAccountDetails_4.InvestmentAccountDetails) {
                        messageType = MessageSetType_17.MessageSetType.investment;
                    }
                    else {
                        throw new OFXException_13.OFXException("Illegal details");
                    }
                    return messageType;
                };
                BaseAccountImpl.prototype.readStatement = function (start, end) {
                    var _this = this;
                    var range = new StatementRange_3.StatementRange();
                    range.setIncludeTransactions(true);
                    range.setStart(start);
                    range.setEnd(end);
                    var request = this.institution.createAuthenticatedRequest(this.username, this.password);
                    var requestTransaction = this.createTransaction();
                    requestTransaction.setWrappedMessage(this.createStatementRequest(this.getDetails(), range));
                    request.getMessageSets().insert(this.createRequestMessageSet(requestTransaction));
                    return this.institution.sendRequest(request)
                        .then(function (response) {
                        _this.institution.doGeneralValidationChecks(request, response);
                        return _this.unwrapStatementResponse(response);
                    });
                };
                /**
                 * The details of this account.
                 *
                 * @return The details of this account.
                 */
                BaseAccountImpl.prototype.getDetails = function () {
                    return this.details;
                };
                /**
                 * The message set type.
                 *
                 * @return The message set type.
                 */
                BaseAccountImpl.prototype.getMessageType = function () {
                    return this.messageType;
                };
                return BaseAccountImpl;
            }());
            exports_144("BaseAccountImpl", BaseAccountImpl);
        }
    };
});
System.register("domain/data/banking/BankStatementResponse", ["domain/data/common/StatementResponse", "domain/data/banking/BankAccountDetails", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_145, context_145) {
    "use strict";
    var StatementResponse_3, BankAccountDetails_4, Aggregate_Add_72, ChildAggregate_add_60, BankStatementResponse;
    var __moduleName = context_145 && context_145.id;
    return {
        setters: [
            function (StatementResponse_3_1) {
                StatementResponse_3 = StatementResponse_3_1;
            },
            function (BankAccountDetails_4_1) {
                BankAccountDetails_4 = BankAccountDetails_4_1;
            },
            function (Aggregate_Add_72_1) {
                Aggregate_Add_72 = Aggregate_Add_72_1;
            },
            function (ChildAggregate_add_60_1) {
                ChildAggregate_add_60 = ChildAggregate_add_60_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            BankStatementResponse = /** @class */ (function (_super) {
                __extends(BankStatementResponse, _super);
                function BankStatementResponse() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                BankStatementResponse.prototype.getResponseMessageName = function () {
                    return "bank statement";
                };
                /**
                 * The account for the statement.
                 *
                 * @return The account for the statement.
                 */
                BankStatementResponse.prototype.getAccount = function () {
                    return this.account;
                };
                /**
                 * The account for the statement.
                 *
                 * @param account The account for the statement.
                 */
                BankStatementResponse.prototype.setAccount = function (account) {
                    this.account = account;
                };
                return BankStatementResponse;
            }(StatementResponse_3.StatementResponse));
            exports_145("BankStatementResponse", BankStatementResponse);
            Aggregate_Add_72.Aggregate_add(BankStatementResponse, "STMTRS");
            ChildAggregate_add_60.ChildAggregate_add(BankStatementResponse, { name: "BANKACCTFROM", order: 10, type: BankAccountDetails_4.BankAccountDetails, read: BankStatementResponse.prototype.getAccount, write: BankStatementResponse.prototype.setAccount });
        }
    };
});
System.register("domain/data/banking/BankStatementResponseTransaction", ["domain/data/TransactionWrappedResponseMessage", "domain/data/banking/BankStatementResponse", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_146, context_146) {
    "use strict";
    var TransactionWrappedResponseMessage_8, BankStatementResponse_1, Aggregate_Add_73, ChildAggregate_add_61, BankStatementResponseTransaction;
    var __moduleName = context_146 && context_146.id;
    return {
        setters: [
            function (TransactionWrappedResponseMessage_8_1) {
                TransactionWrappedResponseMessage_8 = TransactionWrappedResponseMessage_8_1;
            },
            function (BankStatementResponse_1_1) {
                BankStatementResponse_1 = BankStatementResponse_1_1;
            },
            function (Aggregate_Add_73_1) {
                Aggregate_Add_73 = Aggregate_Add_73_1;
            },
            function (ChildAggregate_add_61_1) {
                ChildAggregate_add_61 = ChildAggregate_add_61_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            BankStatementResponseTransaction = /** @class */ (function (_super) {
                __extends(BankStatementResponseTransaction, _super);
                function BankStatementResponseTransaction() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * The message.
                 *
                 * @return The message.
                 */
                BankStatementResponseTransaction.prototype.getMessage = function () {
                    return this.message;
                };
                /**
                 * The message.
                 *
                 * @param message The message.
                 */
                BankStatementResponseTransaction.prototype.setMessage = function (message) {
                    this.message = message;
                };
                // Inherited.
                BankStatementResponseTransaction.prototype.getWrappedMessage = function () {
                    return this.getMessage();
                };
                return BankStatementResponseTransaction;
            }(TransactionWrappedResponseMessage_8.TransactionWrappedResponseMessage));
            exports_146("BankStatementResponseTransaction", BankStatementResponseTransaction);
            Aggregate_Add_73.Aggregate_add(BankStatementResponseTransaction, "STMTTRNRS");
            ChildAggregate_add_61.ChildAggregate_add(BankStatementResponseTransaction, { required: true, order: 30, type: BankStatementResponse_1.BankStatementResponse, read: BankStatementResponseTransaction.prototype.getMessage, write: BankStatementResponseTransaction.prototype.setMessage });
        }
    };
});
System.register("domain/data/banking/BankingResponseMessageSet", ["domain/data/ResponseMessageSet", "domain/data/banking/BankStatementResponseTransaction", "domain/data/MessageSetType", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_147, context_147) {
    "use strict";
    var ResponseMessageSet_8, BankStatementResponseTransaction_1, MessageSetType_18, Aggregate_Add_74, ChildAggregate_add_62, BankingResponseMessageSet;
    var __moduleName = context_147 && context_147.id;
    return {
        setters: [
            function (ResponseMessageSet_8_1) {
                ResponseMessageSet_8 = ResponseMessageSet_8_1;
            },
            function (BankStatementResponseTransaction_1_1) {
                BankStatementResponseTransaction_1 = BankStatementResponseTransaction_1_1;
            },
            function (MessageSetType_18_1) {
                MessageSetType_18 = MessageSetType_18_1;
            },
            function (Aggregate_Add_74_1) {
                Aggregate_Add_74 = Aggregate_Add_74_1;
            },
            function (ChildAggregate_add_62_1) {
                ChildAggregate_add_62 = ChildAggregate_add_62_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            BankingResponseMessageSet = /** @class */ (function (_super) {
                __extends(BankingResponseMessageSet, _super);
                function BankingResponseMessageSet() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                BankingResponseMessageSet.prototype.getType = function () {
                    return MessageSetType_18.MessageSetType.banking;
                };
                /**
                 * The statement response list.
                 *
                 * Most OFX files have a single statement response, except MT2OFX
                 * which outputs OFX with multiple statement responses
                 * in a single banking response message set.
                 *
                 * @return The statement response list.
                 */
                BankingResponseMessageSet.prototype.getStatementResponses = function () {
                    return this.statementResponses;
                };
                /**
                 * The statement response.
                 *
                 * @param statementResponses The statement responses.
                 */
                BankingResponseMessageSet.prototype.setStatementResponses = function (statementResponses) {
                    this.statementResponses = statementResponses;
                };
                // Inherited.
                BankingResponseMessageSet.prototype.getResponseMessages = function () {
                    return this.statementResponses;
                };
                /**
                 * The first statement response.
                 *
                 * @return the first bank statement response.
                 * @deprecated Use getStatementResponses() because sometimes there are multiple responses
                 */
                BankingResponseMessageSet.prototype.getStatementResponse = function () {
                    return this.statementResponses == null || this.statementResponses.length == 0 ? null : this.statementResponses[0];
                };
                BankingResponseMessageSet.prototype.setStatementResponse = function (statementResponse) {
                    this.statementResponses = [statementResponse];
                };
                return BankingResponseMessageSet;
            }(ResponseMessageSet_8.ResponseMessageSet));
            exports_147("BankingResponseMessageSet", BankingResponseMessageSet);
            Aggregate_Add_74.Aggregate_add(BankingResponseMessageSet, "BANKMSGSRSV1");
            ChildAggregate_add_62.ChildAggregate_add(BankingResponseMessageSet, { order: 0, type: Array, collectionEntryType: BankStatementResponseTransaction_1.BankStatementResponseTransaction, read: BankingResponseMessageSet.prototype.getStatementResponses, write: BankingResponseMessageSet.prototype.setStatementResponses });
        }
    };
});
System.register("domain/data/banking/BankStatementRequest", ["domain/data/common/StatementRequest", "domain/data/banking/BankAccountDetails", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_148, context_148) {
    "use strict";
    var StatementRequest_3, BankAccountDetails_5, Aggregate_Add_75, ChildAggregate_add_63, BankStatementRequest;
    var __moduleName = context_148 && context_148.id;
    return {
        setters: [
            function (StatementRequest_3_1) {
                StatementRequest_3 = StatementRequest_3_1;
            },
            function (BankAccountDetails_5_1) {
                BankAccountDetails_5 = BankAccountDetails_5_1;
            },
            function (Aggregate_Add_75_1) {
                Aggregate_Add_75 = Aggregate_Add_75_1;
            },
            function (ChildAggregate_add_63_1) {
                ChildAggregate_add_63 = ChildAggregate_add_63_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            BankStatementRequest = /** @class */ (function (_super) {
                __extends(BankStatementRequest, _super);
                function BankStatementRequest() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * The account details.
                 *
                 * @return The account details.
                 */
                BankStatementRequest.prototype.getAccount = function () {
                    return this.account;
                };
                /**
                 * The account details.
                 *
                 * @param account The account details.
                 */
                BankStatementRequest.prototype.setAccount = function (account) {
                    this.account = account;
                };
                return BankStatementRequest;
            }(StatementRequest_3.StatementRequest));
            exports_148("BankStatementRequest", BankStatementRequest);
            Aggregate_Add_75.Aggregate_add(BankStatementRequest, "STMTRQ");
            ChildAggregate_add_63.ChildAggregate_add(BankStatementRequest, { name: "BANKACCTFROM", required: true, order: 0, type: BankAccountDetails_5.BankAccountDetails, read: BankStatementRequest.prototype.getAccount, write: BankStatementRequest.prototype.setAccount });
        }
    };
});
System.register("domain/data/banking/BankStatementRequestTransaction", ["domain/data/TransactionWrappedRequestMessage", "domain/data/banking/BankStatementRequest", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_149, context_149) {
    "use strict";
    var TransactionWrappedRequestMessage_8, BankStatementRequest_1, Aggregate_Add_76, ChildAggregate_add_64, BankStatementRequestTransaction;
    var __moduleName = context_149 && context_149.id;
    return {
        setters: [
            function (TransactionWrappedRequestMessage_8_1) {
                TransactionWrappedRequestMessage_8 = TransactionWrappedRequestMessage_8_1;
            },
            function (BankStatementRequest_1_1) {
                BankStatementRequest_1 = BankStatementRequest_1_1;
            },
            function (Aggregate_Add_76_1) {
                Aggregate_Add_76 = Aggregate_Add_76_1;
            },
            function (ChildAggregate_add_64_1) {
                ChildAggregate_add_64 = ChildAggregate_add_64_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            BankStatementRequestTransaction = /** @class */ (function (_super) {
                __extends(BankStatementRequestTransaction, _super);
                function BankStatementRequestTransaction() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * The message.
                 *
                 * @return The message.
                 */
                BankStatementRequestTransaction.prototype.getMessage = function () {
                    return this.message;
                };
                /**
                 * The message.
                 *
                 * @param message The message.
                 *
                 */
                BankStatementRequestTransaction.prototype.setMessage = function (message) {
                    this.message = message;
                };
                // Inherited.
                BankStatementRequestTransaction.prototype.setWrappedMessage = function (message) {
                    this.setMessage(message);
                };
                return BankStatementRequestTransaction;
            }(TransactionWrappedRequestMessage_8.TransactionWrappedRequestMessage));
            exports_149("BankStatementRequestTransaction", BankStatementRequestTransaction);
            Aggregate_Add_76.Aggregate_add(BankStatementRequestTransaction, "STMTTRNRQ");
            ChildAggregate_add_64.ChildAggregate_add(BankStatementRequestTransaction, { required: true, order: 30, type: BankStatementRequest_1.BankStatementRequest, read: BankStatementRequestTransaction.prototype.getMessage, write: BankStatementRequestTransaction.prototype.setMessage });
        }
    };
});
System.register("domain/data/banking/BankingRequestMessageSet", ["domain/data/RequestMessageSet", "domain/data/banking/BankStatementRequestTransaction", "domain/data/MessageSetType", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_150, context_150) {
    "use strict";
    var RequestMessageSet_9, BankStatementRequestTransaction_1, MessageSetType_19, Aggregate_Add_77, ChildAggregate_add_65, BankingRequestMessageSet;
    var __moduleName = context_150 && context_150.id;
    return {
        setters: [
            function (RequestMessageSet_9_1) {
                RequestMessageSet_9 = RequestMessageSet_9_1;
            },
            function (BankStatementRequestTransaction_1_1) {
                BankStatementRequestTransaction_1 = BankStatementRequestTransaction_1_1;
            },
            function (MessageSetType_19_1) {
                MessageSetType_19 = MessageSetType_19_1;
            },
            function (Aggregate_Add_77_1) {
                Aggregate_Add_77 = Aggregate_Add_77_1;
            },
            function (ChildAggregate_add_65_1) {
                ChildAggregate_add_65 = ChildAggregate_add_65_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            BankingRequestMessageSet = /** @class */ (function (_super) {
                __extends(BankingRequestMessageSet, _super);
                function BankingRequestMessageSet() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                BankingRequestMessageSet.prototype.getType = function () {
                    return MessageSetType_19.MessageSetType.banking;
                };
                /**
                 * The statement request.
                 *
                 * @return The statement request.
                 */
                BankingRequestMessageSet.prototype.getStatementRequest = function () {
                    return this.statementRequest;
                };
                /**
                 * The statement request.
                 *
                 * @param statementRequest The statement request.
                 */
                BankingRequestMessageSet.prototype.setStatementRequest = function (statementRequest) {
                    this.statementRequest = statementRequest;
                };
                // Inherited.
                BankingRequestMessageSet.prototype.getRequestMessages = function () {
                    var requestMessages = [];
                    if (this.getStatementRequest() != null) {
                        requestMessages.push(this.getStatementRequest());
                    }
                    return requestMessages;
                };
                return BankingRequestMessageSet;
            }(RequestMessageSet_9.RequestMessageSet));
            exports_150("BankingRequestMessageSet", BankingRequestMessageSet);
            Aggregate_Add_77.Aggregate_add(BankingRequestMessageSet, "BANKMSGSRQV1");
            ChildAggregate_add_65.ChildAggregate_add(BankingRequestMessageSet, { order: 0, type: BankStatementRequestTransaction_1.BankStatementRequestTransaction, read: BankingRequestMessageSet.prototype.getStatementRequest, write: BankingRequestMessageSet.prototype.setStatementRequest });
        }
    };
});
System.register("client/impl/BankingAccountImpl", ["client/impl/BaseAccountImpl", "domain/data/MessageSetType", "OFXException", "domain/data/banking/BankingRequestMessageSet", "domain/data/banking/BankStatementRequestTransaction", "domain/data/banking/BankStatementRequest"], function (exports_151, context_151) {
    "use strict";
    var BaseAccountImpl_2, MessageSetType_20, OFXException_14, BankingRequestMessageSet_1, BankStatementRequestTransaction_2, BankStatementRequest_2, BankingAccountImpl;
    var __moduleName = context_151 && context_151.id;
    return {
        setters: [
            function (BaseAccountImpl_2_1) {
                BaseAccountImpl_2 = BaseAccountImpl_2_1;
            },
            function (MessageSetType_20_1) {
                MessageSetType_20 = MessageSetType_20_1;
            },
            function (OFXException_14_1) {
                OFXException_14 = OFXException_14_1;
            },
            function (BankingRequestMessageSet_1_1) {
                BankingRequestMessageSet_1 = BankingRequestMessageSet_1_1;
            },
            function (BankStatementRequestTransaction_2_1) {
                BankStatementRequestTransaction_2 = BankStatementRequestTransaction_2_1;
            },
            function (BankStatementRequest_2_1) {
                BankStatementRequest_2 = BankStatementRequest_2_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            BankingAccountImpl = /** @class */ (function (_super) {
                __extends(BankingAccountImpl, _super);
                function BankingAccountImpl(details, username, password, institution) {
                    return _super.call(this, details, username, password, institution) || this;
                }
                BankingAccountImpl.prototype.unwrapStatementResponse = function (response) {
                    var bankingSet = response.getMessageSet(MessageSetType_20.MessageSetType.banking);
                    if (bankingSet == null) {
                        throw new OFXException_14.OFXException("No banking response message set.");
                    }
                    var statementTransactionResponse = bankingSet.getStatementResponse();
                    if (statementTransactionResponse == null) {
                        throw new OFXException_14.OFXException("No banking statement response transaction.");
                    }
                    var statement = statementTransactionResponse.getMessage();
                    if (statement == null) {
                        throw new OFXException_14.OFXException("No banking statement in the transaction.");
                    }
                    return statement;
                };
                BankingAccountImpl.prototype.createRequestMessageSet = function (transaction) {
                    var bankingRequest = new BankingRequestMessageSet_1.BankingRequestMessageSet();
                    bankingRequest.setStatementRequest(transaction);
                    return bankingRequest;
                };
                BankingAccountImpl.prototype.createTransaction = function () {
                    return new BankStatementRequestTransaction_2.BankStatementRequestTransaction();
                };
                BankingAccountImpl.prototype.createStatementRequest = function (details, range) {
                    var bankRequest = new BankStatementRequest_2.BankStatementRequest();
                    bankRequest.setAccount(details);
                    bankRequest.setStatementRange(range);
                    return bankRequest;
                };
                return BankingAccountImpl;
            }(BaseAccountImpl_2.BaseAccountImpl));
            exports_151("BankingAccountImpl", BankingAccountImpl);
        }
    };
});
System.register("client/impl/BaseFinancialInstitutionData", [], function (exports_152, context_152) {
    "use strict";
    var BaseFinancialInstitutionData;
    var __moduleName = context_152 && context_152.id;
    return {
        setters: [],
        execute: function () {
            //import java.net.URL;
            /**
             * Base bean for FI data.
             *
             * @author Ryan Heaton
             */
            BaseFinancialInstitutionData = /** @class */ (function () {
                function BaseFinancialInstitutionData(id) {
                    this.id = id;
                }
                BaseFinancialInstitutionData.prototype.getId = function () {
                    return this.id;
                };
                BaseFinancialInstitutionData.prototype.setId = function (id) {
                    this.id = id;
                };
                BaseFinancialInstitutionData.prototype.getFinancialInstitutionId = function () {
                    return this.fid;
                };
                BaseFinancialInstitutionData.prototype.setFinancialInstitutionId = function (id) {
                    this.fid = id;
                };
                BaseFinancialInstitutionData.prototype.getName = function () {
                    return this.name;
                };
                BaseFinancialInstitutionData.prototype.setName = function (name) {
                    this.name = name;
                };
                BaseFinancialInstitutionData.prototype.getOrganization = function () {
                    return this.organization;
                };
                BaseFinancialInstitutionData.prototype.setOrganization = function (organization) {
                    this.organization = organization;
                };
                BaseFinancialInstitutionData.prototype.getOFXURL = function () {
                    return this.ofxUrl;
                };
                BaseFinancialInstitutionData.prototype.setOFXURL = function (OFXURL) {
                    this.ofxUrl = OFXURL;
                };
                BaseFinancialInstitutionData.prototype.getBrokerId = function () {
                    return this.brokerId;
                };
                BaseFinancialInstitutionData.prototype.setBrokerId = function (brokerId) {
                    this.brokerId = brokerId;
                };
                return BaseFinancialInstitutionData;
            }());
            exports_152("BaseFinancialInstitutionData", BaseFinancialInstitutionData);
        }
    };
});
System.register("client/net/OFXConnectionException", ["OFXException"], function (exports_153, context_153) {
    "use strict";
    var OFXException_15, OFXConnectionException;
    var __moduleName = context_153 && context_153.id;
    return {
        setters: [
            function (OFXException_15_1) {
                OFXException_15 = OFXException_15_1;
            }
        ],
        execute: function () {
            /**
             * Error with a particular OFX connection.
             *
             * @author Ryan Heaton
             */
            OFXConnectionException = /** @class */ (function (_super) {
                __extends(OFXConnectionException, _super);
                function OFXConnectionException(message, e) {
                    if (e === void 0) { e = null; }
                    return _super.call(this, message, e) || this;
                }
                return OFXConnectionException;
            }(OFXException_15.OFXException));
            exports_153("OFXConnectionException", OFXConnectionException);
        }
    };
});
System.register("client/net/OFXServerException", ["client/net/OFXConnectionException"], function (exports_154, context_154) {
    "use strict";
    var OFXConnectionException_1, OFXServerException;
    var __moduleName = context_154 && context_154.id;
    return {
        setters: [
            function (OFXConnectionException_1_1) {
                OFXConnectionException_1 = OFXConnectionException_1_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            OFXServerException = /** @class */ (function (_super) {
                __extends(OFXServerException, _super);
                function OFXServerException(message, httpCode) {
                    var _this = _super.call(this, message) || this;
                    _this.httpCode = httpCode;
                    return _this;
                }
                OFXServerException.prototype.getHttpCode = function () {
                    return this.httpCode;
                };
                return OFXServerException;
            }(OFXConnectionException_1.OFXConnectionException));
            exports_154("OFXServerException", OFXServerException);
        }
    };
});
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("io/StringConversion", [], function (exports_155, context_155) {
    "use strict";
    var __moduleName = context_155 && context_155.id;
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2008 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
        }
    };
});
System.register("domain/data/common/UnknownStatusCode", ["domain/data/common/StatusCode"], function (exports_156, context_156) {
    "use strict";
    var StatusCode_2, UnknownStatusCode;
    var __moduleName = context_156 && context_156.id;
    return {
        setters: [
            function (StatusCode_2_1) {
                StatusCode_2 = StatusCode_2_1;
            }
        ],
        execute: function () {
            /**
             * Holder for an unknown status code.
             *
             * @author Ryan Heaton
             */
            UnknownStatusCode = /** @class */ (function (_super) {
                __extends(UnknownStatusCode, _super);
                function UnknownStatusCode(code, message, defaultSeverity) {
                    var _this = _super.call(this) || this;
                    _this.code = code;
                    _this.message = message;
                    _this.defaultSeverity = defaultSeverity;
                    return _this;
                }
                UnknownStatusCode.prototype.getCode = function () {
                    return this.code;
                };
                UnknownStatusCode.prototype.getMessage = function () {
                    return this.message;
                };
                UnknownStatusCode.prototype.getDefaultSeverity = function () {
                    return this.defaultSeverity;
                };
                //@Override
                UnknownStatusCode.prototype.toString = function () {
                    return this.code.toString();
                };
                return UnknownStatusCode;
            }(StatusCode_2.StatusCode));
            exports_156("UnknownStatusCode", UnknownStatusCode);
        }
    };
});
System.register("io/DefaultStringConversion", ["domain/data/common/Status", "domain/data/common/StatusCode", "domain/data/common/UnknownStatusCode", "meta/PropertyDescriptor"], function (exports_157, context_157) {
    "use strict";
    var Status_4, StatusCode_3, UnknownStatusCode_1, PropertyDescriptor_5, DefaultStringConversion;
    var __moduleName = context_157 && context_157.id;
    return {
        setters: [
            function (Status_4_1) {
                Status_4 = Status_4_1;
            },
            function (StatusCode_3_1) {
                StatusCode_3 = StatusCode_3_1;
            },
            function (UnknownStatusCode_1_1) {
                UnknownStatusCode_1 = UnknownStatusCode_1_1;
            },
            function (PropertyDescriptor_5_1) {
                PropertyDescriptor_5 = PropertyDescriptor_5_1;
            }
        ],
        execute: function () {
            /**
             * Utility class for conversion to/from OFX strings.
             *
             * @author Ryan Heaton
             */
            DefaultStringConversion = /** @class */ (function () {
                function DefaultStringConversion() {
                }
                DefaultStringConversion.prototype.toString = function (value) {
                    if (!value) {
                        return null;
                    }
                    else if (typeof value === "boolean") {
                        return value ? "Y" : "N";
                    }
                    else if (value instanceof Date) {
                        return this.formatDate(value);
                    }
                    else if (typeof value === "number") {
                        return value + "";
                    }
                    else {
                        return value.toString();
                    }
                };
                DefaultStringConversion.prototype.fromString = function (clazz, value) {
                    if (!value) {
                        return null;
                    }
                    else if (clazz === StatusCode_3.StatusCode) {
                        var code = value;
                        var statusCode = Status_4.KnownCode.fromCode(code);
                        if (!statusCode) {
                            statusCode = new UnknownStatusCode_1.UnknownStatusCode(code, "Unknown status code.", StatusCode_3.Severity.ERROR);
                        }
                        return statusCode;
                    }
                    else if (PropertyDescriptor_5.isAssignableFrom(Number, clazz)) {
                        return parseFloat(value);
                    }
                    else if (PropertyDescriptor_5.isAssignableFrom(Boolean, clazz)) {
                        return ("Y" === value.toUpperCase());
                    }
                    else if (PropertyDescriptor_5.isAssignableFrom(Date, clazz)) {
                        return this.parseDate(value);
                    }
                    // this goes last because a lot of things are objects
                    else if (typeof clazz === "object") {
                        // enum
                        console.assert(value in clazz);
                        if (value in clazz) {
                            return clazz[value];
                        }
                    }
                    return value;
                };
                /**
                 * Parses a date according to OFX.
                 *
                 * @param value The value of the date.
                 * @return The date value.
                 */
                DefaultStringConversion.prototype.parseDate = function (value) {
                    var year = parseInt(value.substr(0, 4));
                    var month = parseInt(value.substr(4, 2)) - 1; // javascript month numbers are zero-based
                    var day = parseInt(value.substr(6, 2));
                    var hour = parseInt(value.substr(8, 2));
                    var minute = parseInt(value.substr(10, 2));
                    var second = parseInt(value.substr(12, 2)) || 0;
                    var milli = parseInt(value.substr(15, 3)) || 0;
                    // add timezone offset
                    var bracket = value.indexOf("[");
                    if (bracket != -1) {
                        var close = value.indexOf(":");
                        if (close === -1) {
                            close = value.indexOf("]");
                        }
                        var gmtOffset = value.substring(bracket + 1, close);
                        hour -= 1.0 * gmtOffset;
                    }
                    // create date as UTC
                    return new Date(Date.UTC(year, month, day, hour, minute, second, milli));
                };
                /**
                 * Format the date according to the OFX spec.
                 *
                 * @param date The date.
                 * @return The date format.
                 */
                DefaultStringConversion.prototype.formatDate = function (date) {
                    var gmt = new Date(date.valueOf() + date.getTimezoneOffset() * 60000);
                    return this.pad(gmt.getFullYear(), 4) +
                        this.pad(gmt.getMonth() + 1, 2) +
                        this.pad(gmt.getDate(), 2) +
                        this.pad(gmt.getHours(), 2) +
                        this.pad(gmt.getMinutes(), 2) +
                        this.pad(gmt.getSeconds(), 2) +
                        "." +
                        this.dpad(gmt.getMilliseconds(), 3);
                };
                /**
                 * Pad a number with leading zeroes until it is of <tt>size</tt> length
                 *
                 * @param num number
                 * @param size number of digits in final number
                 * @return padded number
                 */
                DefaultStringConversion.prototype.pad = function (num, size) {
                    var s = num + "";
                    while (s.length < size) {
                        s = "0" + s;
                    }
                    return s;
                };
                /**
                 * Pad a number with trailing zeroes until it is of <tt>size</tt> length.
                 * Intended for numbers after a decimal point to get a fixed number of decimals
                 *
                 * @param num number
                 * @param size number of digits in final number
                 * @return padded number
                 */
                DefaultStringConversion.prototype.dpad = function (num, size) {
                    var s = num + "";
                    while (s.length < size) {
                        s = s + "0";
                    }
                    return s;
                };
                return DefaultStringConversion;
            }());
            exports_157("DefaultStringConversion", DefaultStringConversion);
        }
    };
});
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("io/OFXWriter", [], function (exports_158, context_158) {
    "use strict";
    var __moduleName = context_158 && context_158.id;
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2008 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
        }
    };
});
System.register("io/AggregateMarshaller", ["log/Log", "io/DefaultStringConversion", "io/AggregateIntrospector", "OFXException", "collections/SortedSet", "io/AggregateAttribute"], function (exports_159, context_159) {
    "use strict";
    var Log_2, DefaultStringConversion_1, AggregateIntrospector_6, OFXException_16, SortedSet_6, AggregateAttribute_2, LOG, AggregateMarshaller;
    var __moduleName = context_159 && context_159.id;
    return {
        setters: [
            function (Log_2_1) {
                Log_2 = Log_2_1;
            },
            function (DefaultStringConversion_1_1) {
                DefaultStringConversion_1 = DefaultStringConversion_1_1;
            },
            function (AggregateIntrospector_6_1) {
                AggregateIntrospector_6 = AggregateIntrospector_6_1;
            },
            function (OFXException_16_1) {
                OFXException_16 = OFXException_16_1;
            },
            function (SortedSet_6_1) {
                SortedSet_6 = SortedSet_6_1;
            },
            function (AggregateAttribute_2_1) {
                AggregateAttribute_2 = AggregateAttribute_2_1;
            }
        ],
        execute: function () {
            /**
             * Marshaller for aggregate objects.
             *
             * @author Ryan Heaton
             */
            AggregateMarshaller = /** @class */ (function () {
                function AggregateMarshaller() {
                    this.conversion = new DefaultStringConversion_1.DefaultStringConversion();
                }
                /**
                 * Marshal the specified aggregate object.
                 *
                 * @param aggregate The aggregate to marshal.
                 * @param writer    The writer.
                 */
                AggregateMarshaller.prototype.marshal = function (aggregate, writer) {
                    var aggregateInfo = AggregateIntrospector_6.AggregateIntrospector.getAggregateInfo(aggregate.constructor);
                    if (aggregateInfo == null) {
                        throw new OFXException_16.OFXException("Unable to marshal object (no aggregate metadata found).");
                    }
                    if (aggregateInfo.hasHeaders()) {
                        var headerValues = aggregateInfo.getHeaders(aggregate);
                        var convertedValues = {};
                        for (var header in headerValues) {
                            convertedValues[header] = this.getConversion().toString(headerValues[header]);
                        }
                        writer.writeHeaders(convertedValues);
                    }
                    writer.writeStartAggregate(aggregateInfo.getName());
                    var AggregateAttributes = aggregateInfo.getAttributes();
                    this.writeAggregateAttributes(aggregate, writer, AggregateAttributes);
                    writer.writeEndAggregate(aggregateInfo.getName());
                };
                /**
                 * Write the aggregate attributes for the specified aggregate.
                 *
                 * @param aggregate           The aggregate.
                 * @param writer              The writer.
                 * @param aggregateAttributes The aggregate attributes.
                 */
                AggregateMarshaller.prototype.writeAggregateAttributes = function (aggregate, writer, aggregateAttributes) {
                    for (var i in aggregateAttributes.values()) {
                        var aggregateAttribute = aggregateAttributes.values()[i];
                        var childValue = null;
                        try {
                            childValue = aggregateAttribute.get(aggregate);
                        }
                        catch (e) {
                            LOG.error("Unable to get " + aggregateAttribute.toString(), e);
                        }
                        if (childValue != null) {
                            switch (aggregateAttribute.getType()) {
                                case AggregateAttribute_2.AggregateAttributeType.CHILD_AGGREGATE:
                                    var childValues;
                                    if (childValue instanceof Array) {
                                        childValues = childValue;
                                    }
                                    else if (childValue instanceof SortedSet_6.SortedSet) {
                                        childValues = childValue.values();
                                    }
                                    else {
                                        childValues = [childValue];
                                    }
                                    for (var _i = 0, childValues_1 = childValues; _i < childValues_1.length; _i++) {
                                        var objValue = childValues_1[_i];
                                        var aggregateInfo = AggregateIntrospector_6.AggregateIntrospector.getAggregateInfo(objValue.constructor);
                                        if (aggregateInfo == null) {
                                            throw new OFXException_16.OFXException("Unable to marshal object of type " + objValue.constructor.name + " (no aggregate metadata found).");
                                        }
                                        var attributeName = aggregateAttribute.getName();
                                        if (aggregateAttribute.isArray()) {
                                            attributeName = aggregateInfo.getName();
                                        }
                                        writer.writeStartAggregate(attributeName);
                                        this.writeAggregateAttributes(objValue, writer, aggregateInfo.getAttributes());
                                        writer.writeEndAggregate(attributeName);
                                    }
                                    break;
                                case AggregateAttribute_2.AggregateAttributeType.ELEMENT:
                                    var strValue = this.getConversion().toString(childValue);
                                    if ((strValue != null) && ("" !== strValue.trim())) {
                                        writer.writeElement(aggregateAttribute.getName(), strValue);
                                    }
                                    break;
                                default:
                                    throw new OFXException_16.OFXException("Unknown aggregate attribute type: " + aggregateAttribute.getType());
                            }
                        }
                        else if (aggregateAttribute.isRequired()) {
                            throw new OFXException_16.OFXException("Required " + aggregateAttribute.toString() + " is null or empty.");
                        }
                    }
                };
                /**
                 * The conversion.
                 *
                 * @return The conversion.
                 */
                AggregateMarshaller.prototype.getConversion = function () {
                    return this.conversion;
                };
                /**
                 * The conversion.
                 *
                 * @param conversion The conversion.
                 */
                AggregateMarshaller.prototype.setConversion = function (conversion) {
                    this.conversion = conversion;
                };
                return AggregateMarshaller;
            }());
            exports_159("AggregateMarshaller", AggregateMarshaller);
            LOG = Log_2.LogFactory.getLog(AggregateMarshaller);
        }
    };
});
System.register("io/StringReader", [], function (exports_160, context_160) {
    "use strict";
    var StringReader;
    var __moduleName = context_160 && context_160.id;
    return {
        setters: [],
        execute: function () {
            StringReader = /** @class */ (function () {
                function StringReader(text) {
                    this._text = text;
                    this._cursor = 0;
                    this._mark = 0;
                }
                StringReader.prototype.read = function (cbuf, offset, length) {
                    if (this._cursor >= this._text.length) {
                        return -1;
                    }
                    else {
                        if (arguments.length === 0) {
                            return this.readChar();
                        }
                        else {
                            offset = offset || 0;
                            length = length || cbuf.length;
                            length = Math.min(length, this._text.length - this._cursor);
                            for (var i = 0; i < length; i++) {
                                cbuf[offset + i] = this.readChar();
                            }
                            return length;
                        }
                    }
                };
                StringReader.prototype.readChar = function () {
                    console.assert(this._cursor < this._text.length);
                    var ch = this._text[this._cursor];
                    this._cursor++;
                    return ch;
                };
                StringReader.prototype.close = function () {
                    this._text = null;
                    this._cursor = null;
                    this._mark = null;
                };
                StringReader.prototype.mark = function ( /*readLimit*/) {
                    this._mark = this._cursor;
                };
                StringReader.prototype.reset = function () {
                    this._cursor = this._mark;
                };
                StringReader.prototype.remainder = function () {
                    return this._text.substring(this._cursor);
                };
                return StringReader;
            }());
            exports_160("StringReader", StringReader);
        }
    };
});
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("io/OFXHandler", [], function (exports_161, context_161) {
    "use strict";
    var __moduleName = context_161 && context_161.id;
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2008 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
        }
    };
});
System.register("io/OFXReader", [], function (exports_162, context_162) {
    "use strict";
    var __moduleName = context_162 && context_162.id;
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("io/DefaultHandler", [], function (exports_163, context_163) {
    "use strict";
    var DefaultHandler;
    var __moduleName = context_163 && context_163.id;
    return {
        setters: [],
        execute: function () {
            /**
             * Default (no-op) implementation of an OFX handler.
             *
             * @author Ryan Heaton
             */
            DefaultHandler = /** @class */ (function () {
                function DefaultHandler() {
                }
                DefaultHandler.prototype.onHeader = function (name, value) {
                };
                DefaultHandler.prototype.onElement = function (name, value) {
                };
                DefaultHandler.prototype.startAggregate = function (aggregateName) {
                };
                DefaultHandler.prototype.endAggregate = function (aggregateName) {
                };
                return DefaultHandler;
            }());
            exports_163("DefaultHandler", DefaultHandler);
        }
    };
});
System.register("io/OFXParseException", ["OFXException"], function (exports_164, context_164) {
    "use strict";
    var OFXException_17, OFXParseException;
    var __moduleName = context_164 && context_164.id;
    return {
        setters: [
            function (OFXException_17_1) {
                OFXException_17 = OFXException_17_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            OFXParseException = /** @class */ (function (_super) {
                __extends(OFXParseException, _super);
                function OFXParseException(message) {
                    return _super.call(this, message) || this;
                }
                return OFXParseException;
            }(OFXException_17.OFXException));
            exports_164("OFXParseException", OFXParseException);
        }
    };
});
System.register("collections/Stack", [], function (exports_165, context_165) {
    "use strict";
    var Stack;
    var __moduleName = context_165 && context_165.id;
    return {
        setters: [],
        execute: function () {
            Stack = /** @class */ (function () {
                function Stack() {
                    this.values = [];
                }
                Stack.prototype.push = function () {
                    var values = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        values[_i] = arguments[_i];
                    }
                    return Array.prototype.push.apply(this.values, arguments);
                };
                Stack.prototype.pop = function () {
                    return Array.prototype.pop.call(this.values);
                };
                Stack.prototype.peek = function () {
                    if (this.values.length === 0) {
                        return null;
                    }
                    else {
                        return this.values[this.values.length - 1];
                    }
                };
                Stack.prototype.isEmpty = function () {
                    return this.values.length === 0;
                };
                return Stack;
            }());
            exports_165("Stack", Stack);
        }
    };
});
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("io/OFXParseEvent", [], function (exports_166, context_166) {
    "use strict";
    var OFXParseEventType, OFXParseEvent;
    var __moduleName = context_166 && context_166.id;
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2008 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            (function (OFXParseEventType) {
                OFXParseEventType[OFXParseEventType["CHARACTERS"] = 0] = "CHARACTERS";
                OFXParseEventType[OFXParseEventType["ELEMENT"] = 1] = "ELEMENT";
            })(OFXParseEventType || (OFXParseEventType = {}));
            exports_166("OFXParseEventType", OFXParseEventType);
            /**
             * An event during OFX parsing.
             *
             * @author Ryan Heaton
             */
            OFXParseEvent = /** @class */ (function () {
                function OFXParseEvent(eventType, eventValue) {
                    this.eventType = eventType;
                    this.eventValue = eventValue;
                }
                OFXParseEvent.prototype.getEventType = function () {
                    return this.eventType;
                };
                OFXParseEvent.prototype.getEventValue = function () {
                    return this.eventValue;
                };
                return OFXParseEvent;
            }());
            exports_166("OFXParseEvent", OFXParseEvent);
        }
    };
});
System.register("io/OFXV2ContentHandler", ["collections/Stack", "io/OFXParseEvent", "log/Log", "OFXException"], function (exports_167, context_167) {
    "use strict";
    var Stack_1, OFXParseEvent_1, Log_3, OFXException_18, LOG, OFXV2ContentHandler;
    var __moduleName = context_167 && context_167.id;
    return {
        setters: [
            function (Stack_1_1) {
                Stack_1 = Stack_1_1;
            },
            function (OFXParseEvent_1_1) {
                OFXParseEvent_1 = OFXParseEvent_1_1;
            },
            function (Log_3_1) {
                Log_3 = Log_3_1;
            },
            function (OFXException_18_1) {
                OFXException_18 = OFXException_18_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            OFXV2ContentHandler = /** @class */ (function () {
                function OFXV2ContentHandler(ofxHandler) {
                    this.eventStack = new Stack_1.Stack();
                    this.startedEvents = new Array();
                    if (ofxHandler == null) {
                        throw new OFXException_18.OFXException("An OFX handler must be supplied.");
                    }
                    this.ofxHandler = ofxHandler;
                }
                OFXV2ContentHandler.prototype.install = function (parser) {
                    parser.ontext = this.ontext.bind(this);
                    parser.onopentag = this.onopentag.bind(this);
                    parser.onclosetag = this.onclosetag.bind(this);
                };
                OFXV2ContentHandler.prototype.onopentag = function (node) {
                    var qName = node.name;
                    if (LOG.isDebugEnabled()) {
                        LOG.debug("START ELEMENT: " + qName);
                    }
                    if ((!this.eventStack.isEmpty()) && (this.eventStack.peek().getEventType() == OFXParseEvent_1.OFXParseEventType.ELEMENT) && (!this.isAlreadyStarted(this.eventStack.peek()))) {
                        var eventValue = this.eventStack.peek().getEventValue();
                        if (LOG.isDebugEnabled()) {
                            LOG.debug("Element " + qName + " is starting aggregate " + eventValue);
                        }
                        //the last element started was not ended; we are assuming we've started a new aggregate.
                        this.ofxHandler.startAggregate(eventValue);
                        this.startedEvents.push(this.eventStack.peek());
                    }
                    this.eventStack.push(new OFXParseEvent_1.OFXParseEvent(OFXParseEvent_1.OFXParseEventType.ELEMENT, qName));
                };
                /**
                 * Whether the specified element aggregate has already been started.
                 *
                 * @param event The event containing the start.
                 * @return Whether the specified element aggregate has already been started.
                 */
                OFXV2ContentHandler.prototype.isAlreadyStarted = function (event) {
                    return this.startedEvents.indexOf(event) != -1;
                };
                OFXV2ContentHandler.prototype.onclosetag = function (qName) {
                    if (LOG.isDebugEnabled()) {
                        LOG.debug("END ELEMENT: " + qName);
                    }
                    var eventToFinish = this.eventStack.pop();
                    if (eventToFinish.getEventType() == OFXParseEvent_1.OFXParseEventType.CHARACTERS) {
                        var chars = eventToFinish.getEventValue().trim();
                        if (this.eventStack.isEmpty()) {
                            throw new OFXException_18.OFXException("Illegal character data outside main OFX root element: \"" + chars + "\".");
                        }
                        else {
                            var elementEvent = this.eventStack.pop();
                            if (elementEvent.getEventType() != OFXParseEvent_1.OFXParseEventType.ELEMENT) {
                                throw new OFXException_18.OFXException("Illegal OFX event before characters \"" + chars + "\" (" + elementEvent.getEventType() + ")!");
                            }
                            else {
                                var value = elementEvent.getEventValue();
                                if (LOG.isDebugEnabled()) {
                                    LOG.debug("Element " + value + " processed with value " + chars);
                                }
                                this.ofxHandler.onElement(value, chars);
                            }
                        }
                    }
                    else if (eventToFinish.getEventType() == OFXParseEvent_1.OFXParseEventType.ELEMENT) {
                        //we're ending an aggregate (no character data on the stack).
                        if (qName === eventToFinish.getEventValue()) {
                            //the last element on the stack is ours; we're ending an OFX aggregate.
                            var value = eventToFinish.getEventValue();
                            if (LOG.isDebugEnabled()) {
                                LOG.debug("Ending aggregate " + value);
                            }
                            this.ofxHandler.endAggregate(value);
                            var i = this.startedEvents.indexOf(eventToFinish);
                            console.assert(i !== -1);
                            if (i > -1) {
                                this.startedEvents.splice(i, 1);
                            }
                        }
                        else {
                            throw new OFXException_18.OFXException("Unexpected end tag: " + eventToFinish.getEventValue());
                        }
                    }
                    else {
                        throw new OFXException_18.OFXException("Illegal OFX event: " + eventToFinish.getEventType());
                    }
                };
                OFXV2ContentHandler.prototype.ontext = function (value) {
                    if (value.trim().length > 0) {
                        var event;
                        if ((!this.eventStack.isEmpty()) && (this.eventStack.peek().getEventType() == OFXParseEvent_1.OFXParseEventType.CHARACTERS)) {
                            //append the characters...
                            event = new OFXParseEvent_1.OFXParseEvent(OFXParseEvent_1.OFXParseEventType.CHARACTERS, this.eventStack.pop().getEventValue() + value);
                        }
                        else {
                            event = new OFXParseEvent_1.OFXParseEvent(OFXParseEvent_1.OFXParseEventType.CHARACTERS, value);
                        }
                        this.eventStack.push(event);
                    }
                };
                return OFXV2ContentHandler;
            }());
            exports_167("OFXV2ContentHandler", OFXV2ContentHandler);
            LOG = Log_3.LogFactory.getLog(OFXV2ContentHandler);
        }
    };
});
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("io/BaseOFXReader", ["sax", "log/Log", "io/DefaultHandler", "io/OFXParseException", "io/OFXV2ContentHandler"], function (exports_168, context_168) {
    "use strict";
    var sax_1, Log_4, DefaultHandler_1, OFXParseException_1, OFXV2ContentHandler_1, LOG, BaseOFXReader;
    var __moduleName = context_168 && context_168.id;
    function arraysEqual(a1, a2) {
        if (a1.length !== a2.length) {
            return false;
        }
        for (var i = 0; i < a1.length; i++) {
            if (a1[i] !== a2[i]) {
                return false;
            }
        }
        return true;
    }
    return {
        setters: [
            function (sax_1_1) {
                sax_1 = sax_1_1;
            },
            function (Log_4_1) {
                Log_4 = Log_4_1;
            },
            function (DefaultHandler_1_1) {
                DefaultHandler_1 = DefaultHandler_1_1;
            },
            function (OFXParseException_1_1) {
                OFXParseException_1 = OFXParseException_1_1;
            },
            function (OFXV2ContentHandler_1_1) {
                OFXV2ContentHandler_1 = OFXV2ContentHandler_1_1;
            }
        ],
        execute: function () {/*
             * Copyright 2008 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            BaseOFXReader = /** @class */ (function () {
                function BaseOFXReader() {
                    this.contentHandler = new DefaultHandler_1.DefaultHandler();
                }
                /**
                 * The content handler.
                 *
                 * @return The content handler.
                 */
                BaseOFXReader.prototype.getContentHandler = function () {
                    return this.contentHandler;
                };
                /**
                 * The content handler.
                 *
                 * @param handler The content handler.
                 */
                BaseOFXReader.prototype.setContentHandler = function (handler) {
                    this.contentHandler = handler;
                };
                /**
                 * Parse the reader, including the headers.
                 *
                 * @param reader The reader.
                 */
                BaseOFXReader.prototype.parse = function (reader) {
                    var header = "";
                    var firstElementStart = this.getFirstElementStart();
                    var buffer = new Array(firstElementStart.length);
                    reader.mark( /*firstElementStart.length*/);
                    var ch = reader.read(buffer);
                    while ((ch != -1) && (!arraysEqual(buffer, firstElementStart))) {
                        if (!this.contains(buffer, '<')) {
                            //if the buffer contains a '<', then we might already have marked the beginning.
                            reader.mark( /*firstElementStart.length*/);
                        }
                        ch = reader.read();
                        var shifted = this.shiftAndAppend(buffer, ch);
                        header += shifted;
                    }
                    if (ch == -1) {
                        throw new OFXParseException_1.OFXParseException("Invalid OFX: no root <OFX> element!");
                    }
                    else {
                        var matches = BaseOFXReader.OFX_2_PROCESSING_INSTRUCTION_PATTERN.exec(header);
                        if (matches) {
                            if (LOG.isInfoEnabled()) {
                                LOG.info("Processing OFX 2 header...");
                            }
                            this.processOFXv2Headers(matches[1]);
                            reader.reset();
                            this.parseV2FromFirstElement(reader.remainder());
                        }
                        else {
                            LOG.info("Processing OFX 1 headers...");
                            this.processOFXv1Headers(header);
                            reader.reset();
                            this.parseV1FromFirstElement(reader.remainder());
                        }
                    }
                };
                /**
                 * The first characters of the first OFX element, '<', 'O', 'F', 'X'
                 *
                 * @return The first characters of the OFX element.
                 */
                BaseOFXReader.prototype.getFirstElementStart = function () {
                    return ['<', 'O', 'F', 'X'];
                };
                /**
                 * Whether the specified buffer contains the specified character.
                 *
                 * @param buffer The buffer.
                 * @param c The character to search for.
                 * @return Whether the specified buffer contains the specified character.
                 */
                BaseOFXReader.prototype.contains = function (buffer, c) {
                    for (var i = 0; i < buffer.length; i++) {
                        var ch = buffer[i];
                        if (ch === c) {
                            return true;
                        }
                    }
                    return false;
                };
                BaseOFXReader.prototype.shiftAndAppend = function (buffer, c) {
                    var shifted = buffer[0];
                    for (var i = 0; i + 1 < buffer.length; i++) {
                        buffer[i] = buffer[i + 1];
                    }
                    buffer[buffer.length - 1] = c;
                    return shifted;
                };
                /**
                 * Parse an OFX version 1 stream from the first OFX element (defined by the {@link #getFirstElementStart() first element characters}).
                 *
                 * @param text The text.
                 */
                BaseOFXReader.prototype.parseV1FromFirstElement = function (text) {
                    var strict = false;
                    var parser = sax_1.default.parser(strict, {});
                    var handler = new OFXV2ContentHandler_1.OFXV2ContentHandler(this.getContentHandler());
                    handler.install(parser);
                    parser.write(text);
                };
                /**
                 * Parse an OFX version 2 stream from the first OFX element (defined by the {@link #getFirstElementStart() first element characters}).
                 *
                 * @param text The text.
                 */
                BaseOFXReader.prototype.parseV2FromFirstElement = function (text) {
                    var strict = true;
                    var parser = sax_1.default.parser(strict, {});
                    var handler = new OFXV2ContentHandler_1.OFXV2ContentHandler(this.getContentHandler());
                    handler.install(parser);
                    parser.write(text);
                };
                /**
                 * Process the given characters as OFX version 1 headers.
                 *
                 * @param chars The characters to process.
                 */
                BaseOFXReader.prototype.processOFXv1Headers = function (chars) {
                    var lines = chars.split(/(\n|\r\n)/);
                    for (var i = 0; i < lines.length; i++) {
                        var line = lines[i];
                        var colonIndex = line.indexOf(':');
                        if (colonIndex >= 0) {
                            var name = line.substring(0, colonIndex);
                            var value = line.length > colonIndex ? line.substring(colonIndex + 1) : "";
                            this.contentHandler.onHeader(name, value);
                        }
                    }
                };
                /**
                 * Process the given characters as OFX version 2 headers.
                 *
                 * @param chars The characters to process.
                 */
                BaseOFXReader.prototype.processOFXv2Headers = function (chars) {
                    var nameValuePairs = chars.split("\\s+");
                    for (var _i = 0, nameValuePairs_1 = nameValuePairs; _i < nameValuePairs_1.length; _i++) {
                        var nameValuePair = nameValuePairs_1[_i];
                        var equalsIndex = nameValuePair.indexOf('=');
                        if (equalsIndex >= 0) {
                            var name = nameValuePair.substring(0, equalsIndex);
                            var value = nameValuePair.length > equalsIndex ? nameValuePair.substring(equalsIndex + 1) : "";
                            value = value.replace('"', ' ');
                            value = value.replace('\'', ' ');
                            value = value.trim();
                            this.contentHandler.onHeader(name, value);
                        }
                    }
                };
                BaseOFXReader.OFX_2_PROCESSING_INSTRUCTION_PATTERN = /<\\?OFX ([^\\?]+)\\?>/;
                return BaseOFXReader;
            }());
            exports_168("BaseOFXReader", BaseOFXReader);
            LOG = Log_4.LogFactory.getLog(BaseOFXReader);
        }
    };
});
System.register("io/OFXSyntaxException", ["io/OFXParseException"], function (exports_169, context_169) {
    "use strict";
    var OFXParseException_2, OFXSyntaxException;
    var __moduleName = context_169 && context_169.id;
    return {
        setters: [
            function (OFXParseException_2_1) {
                OFXParseException_2 = OFXParseException_2_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            OFXSyntaxException = /** @class */ (function (_super) {
                __extends(OFXSyntaxException, _super);
                function OFXSyntaxException(message) {
                    return _super.call(this, message) || this;
                }
                return OFXSyntaxException;
            }(OFXParseException_2.OFXParseException));
            exports_169("OFXSyntaxException", OFXSyntaxException);
        }
    };
});
System.register("io/AggregateStackContentHandler", ["log/Log", "OFXException", "collections/Stack", "io/AggregateIntrospector", "io/AggregateAttribute", "io/OFXSyntaxException"], function (exports_170, context_170) {
    "use strict";
    var Log_5, OFXException_19, Stack_2, AggregateIntrospector_7, AggregateAttribute_3, OFXSyntaxException_1, LOG, AggregateInfoHolder, AggregateStackContentHandler;
    var __moduleName = context_170 && context_170.id;
    return {
        setters: [
            function (Log_5_1) {
                Log_5 = Log_5_1;
            },
            function (OFXException_19_1) {
                OFXException_19 = OFXException_19_1;
            },
            function (Stack_2_1) {
                Stack_2 = Stack_2_1;
            },
            function (AggregateIntrospector_7_1) {
                AggregateIntrospector_7 = AggregateIntrospector_7_1;
            },
            function (AggregateAttribute_3_1) {
                AggregateAttribute_3 = AggregateAttribute_3_1;
            },
            function (OFXSyntaxException_1_1) {
                OFXSyntaxException_1 = OFXSyntaxException_1_1;
            }
        ],
        execute: function () {
            AggregateInfoHolder = /** @class */ (function () {
                function AggregateInfoHolder(arg1, arg2, arg3) {
                    this.currentAttributeIndex = 0;
                    switch (arguments.length) {
                        case 1:
                            this.AggregateInfoHolder1.apply(this, arguments);
                            break;
                        case 3:
                            this.AggregateInfoHolder3.apply(this, arguments);
                            break;
                        default:
                            throw new OFXException_19.OFXException("invalid number of arguments");
                    }
                }
                AggregateInfoHolder.prototype.AggregateInfoHolder1 = function (ignoredAggregateName) {
                    this.aggregate = null;
                    this.info = null;
                    this.aggregateName = ignoredAggregateName;
                };
                AggregateInfoHolder.prototype.AggregateInfoHolder3 = function (aggregate, info, aggregateName) {
                    this.aggregateName = aggregateName;
                    this.aggregate = aggregate;
                    this.info = info;
                };
                AggregateInfoHolder.prototype.isBeingSkipped = function () {
                    return this.aggregate == null || this.info == null;
                };
                AggregateInfoHolder.prototype.isSkipping = function (aggregateName) {
                    return this.isBeingSkipped() && aggregateName === this.aggregateName;
                };
                return AggregateInfoHolder;
            }());
            /**
             * Content handler that manages the aggregate using a stack-based implementation.
             *
             * @author Ryan Heaton
             */
            AggregateStackContentHandler = /** @class */ (function () {
                function AggregateStackContentHandler(root, conversion) {
                    this.stack = new Stack_2.Stack();
                    this.parsingRoot = false;
                    this.stack = new Stack_2.Stack();
                    this.parsingRoot = false;
                    var aggregateInfo = AggregateIntrospector_7.AggregateIntrospector.getAggregateInfo(root.constructor);
                    if (aggregateInfo == null) {
                        throw new OFXException_19.OFXException("Unable to marshal object of type '" + root.constructor.name + "' (no aggregate metadata found).");
                    }
                    this.stack.push(new AggregateInfoHolder(root, aggregateInfo, aggregateInfo.getName()));
                    this.conversion = conversion;
                }
                AggregateStackContentHandler.prototype.onHeader = function (name, value) {
                    var headerType = this.stack.peek().info.getHeaderType(name);
                    if (headerType != null) {
                        this.stack.peek().info.setHeader(this.stack.peek().aggregate, name, this.conversion.fromString(headerType, value));
                    }
                };
                AggregateStackContentHandler.prototype.onElement = function (name, value) {
                    if (!this.stack.peek().isBeingSkipped()) {
                        var attribute = this.stack.peek().info.getAttribute(name, this.stack.peek().currentAttributeIndex);
                        if (attribute != null && attribute.getType() == AggregateAttribute_3.AggregateAttributeType.ELEMENT) {
                            try {
                                attribute.set(this.conversion.fromString(attribute.getAttributeType(), value), this.stack.peek().aggregate);
                            }
                            catch (e) {
                                LOG.error("Unable to set " + attribute.toString(), e);
                            }
                            this.stack.peek().currentAttributeIndex = attribute.getOrder();
                        }
                        else if (LOG.isInfoEnabled()) {
                            LOG.info("Element " + name + " is not supported on aggregate " + this.stack.peek().info.getName() + " at index " + this.stack.peek().currentAttributeIndex);
                        }
                    }
                };
                AggregateStackContentHandler.prototype.startAggregate = function (aggregateName) {
                    if (this.stack.peek().isBeingSkipped()) {
                        this.stack.push(new AggregateInfoHolder(aggregateName));
                    }
                    else if (!this.parsingRoot) {
                        if (aggregateName !== this.stack.peek().info.getName()) {
                            throw new OFXException_19.OFXException("Unexpected root element: " + aggregateName);
                        }
                        this.parsingRoot = true;
                    }
                    else {
                        var infoHolder;
                        var attribute = this.stack.peek().info.getAttribute(aggregateName, this.stack.peek().currentAttributeIndex);
                        if (attribute != null) {
                            if (attribute.getType() == AggregateAttribute_3.AggregateAttributeType.CHILD_AGGREGATE) {
                                var aggregateType;
                                if (attribute.isArray()) {
                                    aggregateType = AggregateIntrospector_7.AggregateIntrospector.findAggregateByName(aggregateName);
                                }
                                else {
                                    aggregateType = attribute.getAttributeType();
                                }
                                if (aggregateType != null) {
                                    var aggregateInfo = AggregateIntrospector_7.AggregateIntrospector.getAggregateInfo(aggregateType);
                                    if (aggregateInfo == null) {
                                        throw new OFXException_19.OFXException("Unable to locate aggregate info for type " + aggregateType.getName());
                                    }
                                    var aggregate = aggregate = new aggregateType();
                                    infoHolder = new AggregateInfoHolder(aggregate, aggregateInfo, aggregateName);
                                }
                                else {
                                    if (LOG.isInfoEnabled()) {
                                        LOG.info("Child aggregate " + aggregateName + " is not supported on aggregate " + this.stack.peek().info.getName() + ": name not assigned a type.");
                                    }
                                    //element not supported.  push a skipping aggregate on the stack.
                                    infoHolder = new AggregateInfoHolder(aggregateName);
                                }
                                this.stack.peek().currentAttributeIndex = attribute.getOrder();
                            }
                            else {
                                if (LOG.isInfoEnabled()) {
                                    LOG.info("Child aggregate " + aggregateName + " is not supported on aggregate " + this.stack.peek().info.getName() + ": no child aggregate, but there does exist an element by that name.");
                                }
                                //child aggregate not supported.  push a skipping aggregate on the stack.
                                infoHolder = new AggregateInfoHolder(aggregateName);
                            }
                        }
                        else {
                            if (LOG.isInfoEnabled()) {
                                LOG.info("Child aggregate " + aggregateName + " is not supported on aggregate " + this.stack.peek().info.getName() + ": no attributes found by that name after index " + this.stack.peek().currentAttributeIndex);
                            }
                            //child aggregate not supported.  push a skipping aggregate on the stack.
                            infoHolder = new AggregateInfoHolder(aggregateName);
                        }
                        this.stack.push(infoHolder);
                    }
                };
                AggregateStackContentHandler.prototype.endAggregate = function (aggregateName) {
                    var infoHolder = this.stack.pop();
                    if (aggregateName !== infoHolder.aggregateName) {
                        throw new OFXSyntaxException_1.OFXSyntaxException("Unexpected end aggregate " + aggregateName + ". (Perhaps " +
                            infoHolder.aggregateName + " is an element with an empty value, making it impossible to parse.)");
                    }
                    if (!this.stack.isEmpty()) {
                        if (!infoHolder.isSkipping(aggregateName)) {
                            //we're not skipping the top aggregate, so process it.
                            var attribute = this.stack.peek().info.getAttribute(aggregateName, this.stack.peek().currentAttributeIndex, infoHolder.aggregate.constructor);
                            try {
                                if (attribute != null) {
                                    attribute.set(infoHolder.aggregate, this.stack.peek().aggregate);
                                }
                                else {
                                    if (LOG.isInfoEnabled()) {
                                        LOG.info("Child aggregate " + aggregateName + " is not supported on aggregate " + this.stack.peek().info.getName() + ": no attributes found by that name after index " + this.stack.peek().currentAttributeIndex);
                                    }
                                }
                            }
                            catch (e) {
                                LOG.error("Unable to set " + attribute.toString(), e);
                            }
                            if (attribute != null) {
                                this.stack.peek().currentAttributeIndex = attribute.getOrder();
                            }
                        }
                    }
                    else {
                        //ended the root element.
                    }
                };
                return AggregateStackContentHandler;
            }());
            exports_170("AggregateStackContentHandler", AggregateStackContentHandler);
            LOG = Log_5.LogFactory.getLog(AggregateStackContentHandler);
        }
    };
});
System.register("io/AggregateUnmarshaller", ["io/DefaultStringConversion", "io/StringReader", "io/BaseOFXReader", "io/AggregateStackContentHandler"], function (exports_171, context_171) {
    "use strict";
    var DefaultStringConversion_2, StringReader_1, BaseOFXReader_1, AggregateStackContentHandler_1, AggregateUnmarshaller;
    var __moduleName = context_171 && context_171.id;
    return {
        setters: [
            function (DefaultStringConversion_2_1) {
                DefaultStringConversion_2 = DefaultStringConversion_2_1;
            },
            function (StringReader_1_1) {
                StringReader_1 = StringReader_1_1;
            },
            function (BaseOFXReader_1_1) {
                BaseOFXReader_1 = BaseOFXReader_1_1;
            },
            function (AggregateStackContentHandler_1_1) {
                AggregateStackContentHandler_1 = AggregateStackContentHandler_1_1;
            }
        ],
        execute: function () {
            /**
             * Unmarshaller for aggregate objects.
             *
             * @author Ryan Heaton
             */
            AggregateUnmarshaller = /** @class */ (function () {
                function AggregateUnmarshaller(clazz) {
                    this.clazz = clazz;
                    this.conversion = new DefaultStringConversion_2.DefaultStringConversion();
                }
                AggregateUnmarshaller.prototype.unmarshal = function (arg) {
                    var stream = (arg instanceof StringReader_1.StringReader) ? arg : new StringReader_1.StringReader(arg);
                    var aggregate = new this.clazz();
                    var reader = this.newReader();
                    reader.setContentHandler(new AggregateStackContentHandler_1.AggregateStackContentHandler(aggregate, this.getConversion()));
                    reader.parse(stream);
                    return aggregate;
                };
                /**
                 * New OFX reader.
                 *
                 * @return new OFX reader.
                 */
                AggregateUnmarshaller.prototype.newReader = function () {
                    return new BaseOFXReader_1.BaseOFXReader();
                };
                /**
                 * The conversion.
                 *
                 * @return The conversion.
                 */
                AggregateUnmarshaller.prototype.getConversion = function () {
                    return this.conversion;
                };
                /**
                 * The conversion.
                 *
                 * @param conversion The conversion.
                 */
                AggregateUnmarshaller.prototype.setConversion = function (conversion) {
                    this.conversion = conversion;
                };
                return AggregateUnmarshaller;
            }());
            exports_171("AggregateUnmarshaller", AggregateUnmarshaller);
        }
    };
});
System.register("io/StreamWriter", [], function (exports_172, context_172) {
    "use strict";
    var OutputBuffer, StreamWriter;
    var __moduleName = context_172 && context_172.id;
    return {
        setters: [],
        execute: function () {
            OutputBuffer = /** @class */ (function () {
                function OutputBuffer() {
                    this.data = [];
                }
                OutputBuffer.prototype.toString = function (encoding) {
                    return this.data.join('');
                };
                OutputBuffer.prototype.append = function (data) {
                    this.data.push(data);
                };
                OutputBuffer.prototype.size = function () {
                    return this.data.reduce(function (previousValue, currentValue) {
                        return currentValue.length;
                    }, 0);
                };
                return OutputBuffer;
            }());
            exports_172("OutputBuffer", OutputBuffer);
            StreamWriter = /** @class */ (function () {
                function StreamWriter(out, encoding) {
                    this.out = out;
                    this.encoding = encoding;
                }
                StreamWriter.prototype.flush = function () {
                };
                StreamWriter.prototype.close = function () {
                };
                StreamWriter.prototype.write = function (data) {
                    this.out.append(data);
                    //TODO
                    //Array.prototype.push.apply(this.out, data.split(''));
                };
                return StreamWriter;
            }());
            exports_172("StreamWriter", StreamWriter);
        }
    };
});
System.register("io/v1/OFXV1Writer", ["io/StreamWriter", "OFXException"], function (exports_173, context_173) {
    "use strict";
    var StreamWriter_1, OFXException_20, OFXV1Writer;
    var __moduleName = context_173 && context_173.id;
    return {
        setters: [
            function (StreamWriter_1_1) {
                StreamWriter_1 = StreamWriter_1_1;
            },
            function (OFXException_20_1) {
                OFXException_20 = OFXException_20_1;
            }
        ],
        execute: function () {
            //import Map = java.util.Map;
            /**
             * OFX writer to SGML, suitable for OFX versions < 2.0.
             *
             * @author Ryan Heaton
             */
            OFXV1Writer = /** @class */ (function () {
                function OFXV1Writer(out) {
                    this.LINE_SEPARATOR = "\r\n";
                    this.headersWritten = false;
                    this.writeAttributesOnNewLine = false;
                    if (out instanceof StreamWriter_1.StreamWriter) {
                        this.writer = out;
                    }
                    else if (out instanceof StreamWriter_1.OutputBuffer) {
                        this.writer = this.newWriter(out);
                    }
                    else {
                        throw new OFXException_20.OFXException("invalid parameter type");
                    }
                }
                OFXV1Writer.prototype.newWriter = function (out) {
                    return new StreamWriter_1.StreamWriter(out, "ISO-8859-1");
                };
                OFXV1Writer.prototype.writeHeaders = function (headers) {
                    if (this.headersWritten) {
                        throw new OFXException_20.OFXException("Headers have already been written!");
                    }
                    //write out the 1.0 headers
                    this.println("OFXHEADER:100");
                    this.println("DATA:OFXSGML");
                    this.println("VERSION:102");
                    this.print("SECURITY:");
                    var security = headers["SECURITY"];
                    if (security == null) {
                        security = "NONE";
                    }
                    this.println(security);
                    this.println("ENCODING:USASCII"); //too many ofx v1 servers don't read unicode...
                    this.println("CHARSET:1252"); //windows-compatible.
                    this.println("COMPRESSION:NONE");
                    this.print("OLDFILEUID:");
                    var olduid = headers["OLDFILEUID"];
                    if (olduid == null) {
                        olduid = "NONE";
                    }
                    this.println(olduid);
                    this.print("NEWFILEUID:");
                    var uid = headers["NEWFILEUID"];
                    if (uid == null) {
                        uid = "NONE";
                    }
                    this.println(uid);
                    this.println();
                    this.headersWritten = true;
                };
                OFXV1Writer.prototype.writeStartAggregate = function (aggregateName) {
                    this.print('<');
                    this.print(aggregateName);
                    this.print('>');
                    if (this.isWriteAttributesOnNewLine()) {
                        this.println();
                    }
                };
                OFXV1Writer.prototype.writeElement = function (name, value) {
                    if ((value == null) || ("" === value)) {
                        throw new OFXException_20.OFXException("Illegal element value for element '" + name + "' (value must not be null or empty).");
                    }
                    //todo: optimize performance of the character escaping
                    if (value.indexOf('&') >= 0) {
                        value = value.replace(/\\&/g, "&amp;");
                    }
                    if (value.indexOf('<') >= 0) {
                        value = value.replace(/</g, "&lt;");
                    }
                    if (value.indexOf('>') >= 0) {
                        value = value.replace(/>/g, "&gt;");
                    }
                    this.print('<');
                    this.print(name);
                    this.print('>');
                    this.print(value);
                    if (this.isWriteAttributesOnNewLine()) {
                        this.println();
                    }
                };
                OFXV1Writer.prototype.writeEndAggregate = function (aggregateName) {
                    this.print("</");
                    this.print(aggregateName);
                    this.print('>');
                    if (this.isWriteAttributesOnNewLine()) {
                        this.println();
                    }
                };
                OFXV1Writer.prototype.isWriteAttributesOnNewLine = function () {
                    return this.writeAttributesOnNewLine;
                };
                OFXV1Writer.prototype.setWriteAttributesOnNewLine = function (writeAttributesOnNewLine) {
                    this.writeAttributesOnNewLine = writeAttributesOnNewLine;
                };
                OFXV1Writer.prototype.close = function () {
                    this.flush();
                    this.writer.close();
                };
                OFXV1Writer.prototype.flush = function () {
                    this.writer.flush();
                };
                /*protected*/ OFXV1Writer.prototype.println = function (line) {
                    if (line === void 0) { line = null; }
                    if (line != null) {
                        this.print(line);
                    }
                    this.writer.write(this.LINE_SEPARATOR);
                };
                /*protected*/ OFXV1Writer.prototype.print = function (line) {
                    this.writer.write(line == null ? "null" : line);
                };
                return OFXV1Writer;
            }());
            exports_173("OFXV1Writer", OFXV1Writer);
        }
    };
});
System.register("client/net/OFXV1Connection", ["log/Log", "OFXException", "io/AggregateMarshaller", "io/AggregateUnmarshaller", "domain/data/ResponseEnvelope", "io/StreamWriter", "io/StringReader", "client/net/OFXConnectionException", "io/v1/OFXV1Writer"], function (exports_174, context_174) {
    "use strict";
    var Log_6, OFXException_21, AggregateMarshaller_1, AggregateUnmarshaller_1, ResponseEnvelope_1, StreamWriter_2, StringReader_2, OFXConnectionException_2, OFXV1Writer_1, LOG, OFXV1Connection;
    var __moduleName = context_174 && context_174.id;
    function DefaultAjaxHandler(url, verb, headers, data, async) {
        return new Promise(function (resolve, reject) {
            var request = new XMLHttpRequest();
            var onloadCalled = false;
            request.open("POST", url, async);
            for (var header in headers) {
                request.setRequestHeader(header, headers[header]);
            }
            request.onload = function () {
                onloadCalled = true;
                if (request.status >= 200 && request.status < 300) {
                    resolve(request.responseText);
                }
                else if (request.status >= 400 && request.status < 500) {
                    reject(new OFXException_21.OFXException("Error " + request.status + " with client request: " + request.responseText));
                }
                else {
                    reject(new OFXException_21.OFXException("Invalid response code from OFX server: " + request.status));
                }
            };
            request.onerror = function () {
                reject(new OFXException_21.OFXException("Network error"));
            };
            request.send(data);
            if (!async && !onloadCalled) {
                request.onload();
            }
        });
    }
    return {
        setters: [
            function (Log_6_1) {
                Log_6 = Log_6_1;
            },
            function (OFXException_21_1) {
                OFXException_21 = OFXException_21_1;
            },
            function (AggregateMarshaller_1_1) {
                AggregateMarshaller_1 = AggregateMarshaller_1_1;
            },
            function (AggregateUnmarshaller_1_1) {
                AggregateUnmarshaller_1 = AggregateUnmarshaller_1_1;
            },
            function (ResponseEnvelope_1_1) {
                ResponseEnvelope_1 = ResponseEnvelope_1_1;
            },
            function (StreamWriter_2_1) {
                StreamWriter_2 = StreamWriter_2_1;
            },
            function (StringReader_2_1) {
                StringReader_2 = StringReader_2_1;
            },
            function (OFXConnectionException_2_1) {
                OFXConnectionException_2 = OFXConnectionException_2_1;
            },
            function (OFXV1Writer_1_1) {
                OFXV1Writer_1 = OFXV1Writer_1_1;
            }
        ],
        execute: function () {
            /**
             * Base implementation for an OFX connection.
             *
             * @author Ryan Heaton
             */
            OFXV1Connection = /** @class */ (function () {
                function OFXV1Connection() {
                    this.async = true;
                    this.marshaller = new AggregateMarshaller_1.AggregateMarshaller();
                    this.unmarshaller = new AggregateUnmarshaller_1.AggregateUnmarshaller(ResponseEnvelope_1.ResponseEnvelope);
                    this.ajax = DefaultAjaxHandler;
                }
                // Inherited.
                OFXV1Connection.prototype.sendRequest = function (request, url) {
                    //    if (!url.protocol().toLowerCase().startsWith("http")) {
                    //      throw new OFXException("Invalid URL: " + url + " only http(s) is supported.");
                    //    }
                    var _this = this;
                    //marshal to memory so we can determine the size...
                    var outBuffer = new StreamWriter_2.OutputBuffer();
                    var ofxWriter = this.newOFXWriter(outBuffer);
                    this.getMarshaller().marshal(request, ofxWriter);
                    ofxWriter.close();
                    this.logRequest(outBuffer);
                    return this.sendBuffer(url, outBuffer)
                        .then(function (in_) {
                        _this.logResponse(in_);
                        return _this.unmarshal(in_);
                    });
                };
                /**
                 * Log a request buffer.
                 *
                 * @param outBuffer The buffer to log.
                 */
                OFXV1Connection.prototype.logRequest = function (outBuffer) {
                    if (LOG.isInfoEnabled()) {
                        LOG.info("Marshalling " + outBuffer.size() + " bytes of the OFX request.");
                        if (LOG.isDebugEnabled()) {
                            LOG.debug(outBuffer.toString("utf-8"));
                        }
                    }
                };
                OFXV1Connection.prototype.logResponse = function (inBuffer) {
                    if (LOG.isInfoEnabled()) {
                        if (LOG.isDebugEnabled()) {
                            LOG.debug("Received OFX response:", inBuffer);
                        }
                    }
                };
                /**
                 * Send the specified buffer to the specified URL.
                 *
                 * @param url The URL.
                 * @param outBuffer The buffer.
                 * @return a promise that resolves with the response.
                 */
                OFXV1Connection.prototype.sendBuffer = function (url, outBuffer) {
                    var outText = outBuffer.toString();
                    var async = this.getAsync();
                    var headers = {
                        "Content-Type": "application/x-ofx",
                        "Accept": "*/*, application/x-ofx"
                    };
                    return this.ajax(url, "POST", headers, outText, async);
                };
                /**
                 * Unmarshal the input stream.
                 *
                 * @param in The input stream.
                 * @return The response envelope.
                 */
                OFXV1Connection.prototype.unmarshal = function (in_) {
                    try {
                        var reader = new StringReader_2.StringReader(in_);
                        return this.getUnmarshaller().unmarshal(reader);
                    }
                    catch (e) {
                        throw new OFXConnectionException_2.OFXConnectionException("Unable to parse the OFX response.", e);
                    }
                };
                /**
                 * Create a new OFX writer.
                 *
                 * @param out The output stream for the writer.
                 * @return The OFX writer.
                 */
                OFXV1Connection.prototype.newOFXWriter = function (out) {
                    return new OFXV1Writer_1.OFXV1Writer(out);
                };
                /**
                 * The marshaller.
                 *
                 * @return The marshaller.
                 */
                OFXV1Connection.prototype.getMarshaller = function () {
                    return this.marshaller;
                };
                /**
                 * The marshaller.
                 *
                 * @param marshaller The marshaller.
                 */
                OFXV1Connection.prototype.setMarshaller = function (marshaller) {
                    this.marshaller = marshaller;
                };
                /**
                 * The unmarshaller.
                 *
                 * @return The unmarshaller.
                 */
                OFXV1Connection.prototype.getUnmarshaller = function () {
                    return this.unmarshaller;
                };
                /**
                 * The unmarshaller.
                 *
                 * @param unmarshaller The unmarshaller.
                 */
                OFXV1Connection.prototype.setUnmarshaller = function (unmarshaller) {
                    this.unmarshaller = unmarshaller;
                };
                /**
                 * Async mode
                 *
                 * @return {bool} Whether in async mode.
                 */
                OFXV1Connection.prototype.getAsync = function () {
                    return this.async;
                };
                /**
                 * Async mode
                 *
                 * @param {bool} async async mode.
                 */
                OFXV1Connection.prototype.setAsync = function (async) {
                    this.async = async;
                };
                /**
                 * Async mode
                 *
                 * @return {bool} Whether in async mode.
                 */
                OFXV1Connection.prototype.getAjax = function () {
                    return this.ajax;
                };
                /**
                 * Async mode
                 *
                 * @param {bool} async async mode.
                 */
                OFXV1Connection.prototype.setAjax = function (ajax) {
                    this.ajax = ajax;
                };
                return OFXV1Connection;
            }());
            exports_174("OFXV1Connection", OFXV1Connection);
            LOG = Log_6.LogFactory.getLog(OFXV1Connection);
        }
    };
});
System.register("io/v2/OFXV2Writer", ["io/v1/OFXV1Writer", "io/StreamWriter", "OFXException"], function (exports_175, context_175) {
    "use strict";
    var OFXV1Writer_2, StreamWriter_3, OFXException_22, OFXV2Writer;
    var __moduleName = context_175 && context_175.id;
    return {
        setters: [
            function (OFXV1Writer_2_1) {
                OFXV1Writer_2 = OFXV1Writer_2_1;
            },
            function (StreamWriter_3_1) {
                StreamWriter_3 = StreamWriter_3_1;
            },
            function (OFXException_22_1) {
                OFXException_22 = OFXException_22_1;
            }
        ],
        execute: function () {
            /**
             * OFX writer to XML, suitable for OFX version 2.0.
             *
             * @author Ryan Heaton
             */
            OFXV2Writer = /** @class */ (function (_super) {
                __extends(OFXV2Writer, _super);
                function OFXV2Writer(out) {
                    return _super.call(this, out) || this;
                }
                //@Override
                OFXV2Writer.prototype.newWriter = function (out) {
                    return new StreamWriter_3.StreamWriter(out, "UTF-8");
                };
                OFXV2Writer.prototype.writeHeaders = function (headers) {
                    if (this.headersWritten) {
                        throw new OFXException_22.OFXException("Headers have already been written!");
                    }
                    //write out the XML PI
                    this.print("<?xml version=\"1.0\" encoding=\"utf-8\" ?>");
                    var security = headers["SECURITY"];
                    if (security == null) {
                        security = "NONE";
                    }
                    var olduid = headers["OLDFILEUID"];
                    if (olduid == null) {
                        olduid = "NONE";
                    }
                    // println(olduid);
                    var uid = headers["NEWFILEUID"];
                    if (uid == null) {
                        uid = "NONE";
                    }
                    this.print("<?OFX OFXHEADER=\"200\" VERSION=\"202\" SECURITY=\"" + security + "\" OLDFILEUID=\"" + olduid + "\" NEWFILEUID=\"" + uid + "\"?>");
                    this.headersWritten = true;
                };
                OFXV2Writer.prototype.writeElement = function (name, value) {
                    _super.prototype.writeElement.call(this, name, value);
                    this.print("</");
                    this.print(name);
                    this.print('>');
                };
                //@Override
                OFXV2Writer.prototype.isWriteAttributesOnNewLine = function () {
                    return false;
                };
                return OFXV2Writer;
            }(OFXV1Writer_2.OFXV1Writer));
            exports_175("OFXV2Writer", OFXV2Writer);
        }
    };
});
System.register("client/net/OFXV2Connection", ["client/net/OFXV1Connection", "io/v2/OFXV2Writer"], function (exports_176, context_176) {
    "use strict";
    var OFXV1Connection_1, OFXV2Writer_1, OFXV2Connection;
    var __moduleName = context_176 && context_176.id;
    return {
        setters: [
            function (OFXV1Connection_1_1) {
                OFXV1Connection_1 = OFXV1Connection_1_1;
            },
            function (OFXV2Writer_1_1) {
                OFXV2Writer_1 = OFXV2Writer_1_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            OFXV2Connection = /** @class */ (function (_super) {
                __extends(OFXV2Connection, _super);
                function OFXV2Connection() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                //@Override
                OFXV2Connection.prototype.newOFXWriter = function (out) {
                    return new OFXV2Writer_1.OFXV2Writer(out);
                };
                return OFXV2Connection;
            }(OFXV1Connection_1.OFXV1Connection));
            exports_176("OFXV2Connection", OFXV2Connection);
        }
    };
});
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Support for "bill pay" features of the OFX spec.
 */
/*
 * Copyright 2012 TheStash
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("domain/data/common/ProcessorDayOff", [], function (exports_177, context_177) {
    "use strict";
    var ProcessorDayOff;
    var __moduleName = context_177 && context_177.id;
    function ProcessorDayOff_fromOfx(ofxVal) {
        if ("MONDAY" === ofxVal) {
            return ProcessorDayOff.MONDAY;
        }
        else if ("TUESDAY" === ofxVal) {
            return ProcessorDayOff.TUESDAY;
        }
        else if ("WEDNESDAY" === ofxVal) {
            return ProcessorDayOff.WEDNESDAY;
        }
        else if ("THURSDAY" === ofxVal) {
            return ProcessorDayOff.THURSDAY;
        }
        else if ("FRIDAY" === ofxVal) {
            return ProcessorDayOff.FRIDAY;
        }
        else if ("SATURDAY" === ofxVal) {
            return ProcessorDayOff.SATURDAY;
        }
        else if ("SUNDAY" === ofxVal) {
            return ProcessorDayOff.SUNDAY;
        }
        else {
            return null;
        }
    }
    exports_177("ProcessorDayOff_fromOfx", ProcessorDayOff_fromOfx);
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2012 TheStash
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
             * Day of week used in "PROCDAYSOFF" lists.
             *
             * @author Scott Priddy
             * @see "OFX Spec, Section 13.6.2"
             */
            (function (ProcessorDayOff) {
                ProcessorDayOff[ProcessorDayOff["MONDAY"] = 0] = "MONDAY";
                ProcessorDayOff[ProcessorDayOff["TUESDAY"] = 1] = "TUESDAY";
                ProcessorDayOff[ProcessorDayOff["WEDNESDAY"] = 2] = "WEDNESDAY";
                ProcessorDayOff[ProcessorDayOff["THURSDAY"] = 3] = "THURSDAY";
                ProcessorDayOff[ProcessorDayOff["FRIDAY"] = 4] = "FRIDAY";
                ProcessorDayOff[ProcessorDayOff["SATURDAY"] = 5] = "SATURDAY";
                ProcessorDayOff[ProcessorDayOff["SUNDAY"] = 6] = "SUNDAY";
            })(ProcessorDayOff || (ProcessorDayOff = {}));
            exports_177("ProcessorDayOff", ProcessorDayOff);
        }
    };
});
System.register("domain/data/common/T1099Request", ["domain/data/RequestMessage", "meta/Aggregate_add"], function (exports_178, context_178) {
    "use strict";
    var RequestMessage_8, Aggregate_Add_78, T1099Request;
    var __moduleName = context_178 && context_178.id;
    return {
        setters: [
            function (RequestMessage_8_1) {
                RequestMessage_8 = RequestMessage_8_1;
            },
            function (Aggregate_Add_78_1) {
                Aggregate_Add_78 = Aggregate_Add_78_1;
            }
        ],
        execute: function () {
            /**
             * @author Aparna Gawali
             * aparna.gawali@sungard.com
             */
            T1099Request = /** @class */ (function (_super) {
                __extends(T1099Request, _super);
                function T1099Request() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return T1099Request;
            }(RequestMessage_8.RequestMessage));
            exports_178("T1099Request", T1099Request);
            Aggregate_Add_78.Aggregate_add(T1099Request, "STMTRQ");
        }
    };
});
System.register("domain/data/common/T1099Response", ["domain/data/ResponseMessage"], function (exports_179, context_179) {
    "use strict";
    var ResponseMessage_8, T1099Response;
    var __moduleName = context_179 && context_179.id;
    return {
        setters: [
            function (ResponseMessage_8_1) {
                ResponseMessage_8 = ResponseMessage_8_1;
            }
        ],
        execute: function () {
            //import java.util.Locale;
            /**
             * @author Aparna Gawali
             * aparna.gawali@sungard.com
             */
            T1099Response = /** @class */ (function (_super) {
                __extends(T1099Response, _super);
                function T1099Response() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return T1099Response;
            }(ResponseMessage_8.ResponseMessage));
            exports_179("T1099Response", T1099Response);
        }
    };
});
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("domain/data/common/TransactionType", [], function (exports_180, context_180) {
    "use strict";
    var TransactionType;
    var __moduleName = context_180 && context_180.id;
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2008 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
             * @author Ryan Heaton
             */
            (function (TransactionType) {
                /**
                 * generic credit.
                 */
                TransactionType[TransactionType["CREDIT"] = 0] = "CREDIT";
                /**
                 * genertic debit.
                 */
                TransactionType[TransactionType["DEBIT"] = 1] = "DEBIT";
                /**
                 * interest earned.
                 */
                TransactionType[TransactionType["INT"] = 2] = "INT";
                /**
                 * dividend.
                 */
                TransactionType[TransactionType["DIV"] = 3] = "DIV";
                /**
                 * bank fee.
                 */
                TransactionType[TransactionType["FEE"] = 4] = "FEE";
                /**
                 * service charge.
                 */
                TransactionType[TransactionType["SRVCHG"] = 5] = "SRVCHG";
                /**
                 * deposit.
                 */
                TransactionType[TransactionType["DEP"] = 6] = "DEP";
                /**
                 * ATM transaction.
                 */
                TransactionType[TransactionType["ATM"] = 7] = "ATM";
                /**
                 * point of sale
                 */
                TransactionType[TransactionType["POS"] = 8] = "POS";
                /**
                 * transfer
                 */
                TransactionType[TransactionType["XFER"] = 9] = "XFER";
                /**
                 * check
                 */
                TransactionType[TransactionType["CHECK"] = 10] = "CHECK";
                /**
                 * electronic payment
                 */
                TransactionType[TransactionType["PAYMENT"] = 11] = "PAYMENT";
                /**
                 * cash.
                 */
                TransactionType[TransactionType["CASH"] = 12] = "CASH";
                /**
                 * direct deposit.
                 */
                TransactionType[TransactionType["DIRECTDEP"] = 13] = "DIRECTDEP";
                /**
                 * merchant-initiated debit
                 */
                TransactionType[TransactionType["DIRECTDEBIT"] = 14] = "DIRECTDEBIT";
                /**
                 * repeating payment.
                 */
                TransactionType[TransactionType["REPEATPMT"] = 15] = "REPEATPMT";
                /**
                 * other
                 */
                TransactionType[TransactionType["OTHER"] = 16] = "OTHER";
            })(TransactionType || (TransactionType = {}));
            exports_180("TransactionType", TransactionType);
        }
    };
});
System.register("domain/data/common/TransferInfo", ["domain/data/banking/BankAccountDetails", "domain/data/creditcard/CreditCardAccountDetails", "OFXException", "meta/Aggregate_add", "meta/ChildAggregate_add", "meta/Element_add"], function (exports_181, context_181) {
    "use strict";
    var BankAccountDetails_6, CreditCardAccountDetails_6, OFXException_23, Aggregate_Add_79, ChildAggregate_add_66, Element_add_41, TransferInfo;
    var __moduleName = context_181 && context_181.id;
    return {
        setters: [
            function (BankAccountDetails_6_1) {
                BankAccountDetails_6 = BankAccountDetails_6_1;
            },
            function (CreditCardAccountDetails_6_1) {
                CreditCardAccountDetails_6 = CreditCardAccountDetails_6_1;
            },
            function (OFXException_23_1) {
                OFXException_23 = OFXException_23_1;
            },
            function (Aggregate_Add_79_1) {
                Aggregate_Add_79 = Aggregate_Add_79_1;
            },
            function (ChildAggregate_add_66_1) {
                ChildAggregate_add_66 = ChildAggregate_add_66_1;
            },
            function (Element_add_41_1) {
                Element_add_41 = Element_add_41_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            TransferInfo = /** @class */ (function () {
                function TransferInfo() {
                }
                /**
                 * The bank account to transfer from.
                 *
                 * @return The bank account to transfer from.
                 */
                TransferInfo.prototype.getBankAccountFrom = function () {
                    return this.bankAccountFrom;
                };
                /**
                 * The bank account to transfer from.
                 *
                 * @param bankAccountFrom The bank account to transfer from.
                 */
                TransferInfo.prototype.setBankAccountFrom = function (bankAccountFrom) {
                    this.creditCardAccountFrom = null;
                    this.bankAccountFrom = bankAccountFrom;
                };
                /**
                 * The account to transfer from.
                 *
                 * @param acct The account to transfer from.
                 */
                TransferInfo.prototype.setAccountFrom = function (acct) {
                    if (acct instanceof BankAccountDetails_6.BankAccountDetails) {
                        this.setBankAccountFrom(acct);
                    }
                    else {
                        this.setCreditCardAccountFrom(acct);
                    }
                };
                /**
                 * The credit card to transfer from.
                 *
                 * @return The credit card to transfer from.
                 */
                TransferInfo.prototype.getCreditCardAccountFrom = function () {
                    return this.creditCardAccountFrom;
                };
                /**
                 * The credit card to transfer from.
                 *
                 * @param creditCardAccountFrom The credit card to transfer from.
                 */
                TransferInfo.prototype.setCreditCardAccountFrom = function (creditCardAccountFrom) {
                    this.bankAccountFrom = null;
                    this.creditCardAccountFrom = creditCardAccountFrom;
                };
                /**
                 * The bank account to transfer to.
                 *
                 * @return The bank account to transfer to.
                 */
                TransferInfo.prototype.getBankAccountTo = function () {
                    return this.bankAccountTo;
                };
                /**
                 * The bank account to transfer to.
                 *
                 * @param bankAccountTo The bank account to transfer to.
                 */
                TransferInfo.prototype.setBankAccountTo = function (bankAccountTo) {
                    this.creditCardAccountTo = null;
                    this.bankAccountTo = bankAccountTo;
                };
                /**
                 * The bank or credit card account to transfer to.
                 *
                 * @param accountTo The account to transfer to.
                 */
                TransferInfo.prototype.setAccountTo = function (accountTo) {
                    if (accountTo instanceof BankAccountDetails_6.BankAccountDetails)
                        this.setBankAccountTo(accountTo);
                    else if (accountTo instanceof CreditCardAccountDetails_6.CreditCardAccountDetails)
                        this.setCreditCardAccountTo(accountTo);
                    else
                        throw new OFXException_23.OFXException("invalid type");
                };
                /**
                 * The credit card account to transfer to.
                 *
                 * @return The credit card account to transfer to.
                 */
                TransferInfo.prototype.getCreditCardAccountTo = function () {
                    return this.creditCardAccountTo;
                };
                /**
                 * The credit card account to transfer to.
                 *
                 * @param creditCardAccountTo The credit card account to transfer to.
                 */
                TransferInfo.prototype.setCreditCardAccountTo = function (creditCardAccountTo) {
                    this.bankAccountTo = null;
                    this.creditCardAccountTo = creditCardAccountTo;
                };
                /**
                 * The amount.
                 *
                 * @return The amount.
                 */
                TransferInfo.prototype.getAmount = function () {
                    return this.amount;
                };
                /**
                 * The amount.
                 *
                 * @param amount The amount.
                 */
                TransferInfo.prototype.setAmount = function (amount) {
                    this.amount = amount;
                };
                /**
                 * The due date.
                 *
                 * @return The due date.
                 */
                TransferInfo.prototype.getDue = function () {
                    return this.due;
                };
                /**
                 * The due date.
                 *
                 * @param due The due date.
                 */
                TransferInfo.prototype.setDue = function (due) {
                    this.due = due;
                };
                return TransferInfo;
            }());
            exports_181("TransferInfo", TransferInfo);
            Aggregate_Add_79.Aggregate_add(TransferInfo, "XFERINFO");
            ChildAggregate_add_66.ChildAggregate_add(TransferInfo, { name: "BANKACCTFROM", order: 0, type: BankAccountDetails_6.BankAccountDetails, read: TransferInfo.prototype.getBankAccountFrom, write: TransferInfo.prototype.setBankAccountFrom });
            ChildAggregate_add_66.ChildAggregate_add(TransferInfo, { name: "CCACCTFROM", order: 10, type: CreditCardAccountDetails_6.CreditCardAccountDetails, read: TransferInfo.prototype.getCreditCardAccountFrom, write: TransferInfo.prototype.setCreditCardAccountFrom });
            ChildAggregate_add_66.ChildAggregate_add(TransferInfo, { name: "BANKACCTTO", order: 20, type: BankAccountDetails_6.BankAccountDetails, read: TransferInfo.prototype.getBankAccountTo, write: TransferInfo.prototype.setBankAccountTo });
            ChildAggregate_add_66.ChildAggregate_add(TransferInfo, { name: "CCACCTTO", order: 30, type: CreditCardAccountDetails_6.CreditCardAccountDetails, read: TransferInfo.prototype.getCreditCardAccountTo, write: TransferInfo.prototype.setCreditCardAccountTo });
            Element_add_41.Element_add(TransferInfo, { name: "TRNAMT", required: true, order: 40, type: Number, read: TransferInfo.prototype.getAmount, write: TransferInfo.prototype.setAmount });
            Element_add_41.Element_add(TransferInfo, { name: "DTDUE", order: 50, type: Date, read: TransferInfo.prototype.getDue, write: TransferInfo.prototype.setDue });
        }
    };
});
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("domain/data/common/TransferStatusEvent", [], function (exports_182, context_182) {
    "use strict";
    var TransferStatusEvent;
    var __moduleName = context_182 && context_182.id;
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2008 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
             * @author Ryan Heaton
             */
            (function (TransferStatusEvent) {
                TransferStatusEvent[TransferStatusEvent["WILLPROCESSON"] = 0] = "WILLPROCESSON";
                TransferStatusEvent[TransferStatusEvent["POSTEDON"] = 1] = "POSTEDON";
                TransferStatusEvent[TransferStatusEvent["NOFUNDSON"] = 2] = "NOFUNDSON";
                TransferStatusEvent[TransferStatusEvent["CANCELEDON"] = 3] = "CANCELEDON";
                TransferStatusEvent[TransferStatusEvent["FAILEDON"] = 4] = "FAILEDON";
            })(TransferStatusEvent || (TransferStatusEvent = {}));
            exports_182("TransferStatusEvent", TransferStatusEvent);
        }
    };
});
System.register("domain/data/common/TransferStatus", ["domain/data/common/TransferStatusEvent", "meta/Aggregate_add", "meta/Element_add"], function (exports_183, context_183) {
    "use strict";
    var TransferStatusEvent_1, Aggregate_Add_80, Element_add_42, TransferStatus;
    var __moduleName = context_183 && context_183.id;
    return {
        setters: [
            function (TransferStatusEvent_1_1) {
                TransferStatusEvent_1 = TransferStatusEvent_1_1;
            },
            function (Aggregate_Add_80_1) {
                Aggregate_Add_80 = Aggregate_Add_80_1;
            },
            function (Element_add_42_1) {
                Element_add_42 = Element_add_42_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            TransferStatus = /** @class */ (function () {
                function TransferStatus() {
                }
                /**
                 * The event.
                 *
                 * @return The event.
                 */
                TransferStatus.prototype.getEvent = function () {
                    return this.event;
                };
                /**
                 * The event.
                 *
                 * @param event The event.
                 */
                TransferStatus.prototype.setEvent = function (event) {
                    this.event = event;
                };
                /**
                 * The date of the event.
                 *
                 * @return The date of the event.
                 */
                TransferStatus.prototype.getDate = function () {
                    return this.date;
                };
                /**
                 * The date of the event.
                 *
                 * @param date The date of the event.
                 */
                TransferStatus.prototype.setDate = function (date) {
                    this.date = date;
                };
                return TransferStatus;
            }());
            exports_183("TransferStatus", TransferStatus);
            Aggregate_Add_80.Aggregate_add(TransferStatus, "XFERPRCSTS");
            Element_add_42.Element_add(TransferStatus, { name: "XFERPRCCODE", required: true, order: 0, type: TransferStatusEvent_1.TransferStatusEvent, read: TransferStatus.prototype.getEvent, write: TransferStatus.prototype.setEvent });
            Element_add_42.Element_add(TransferStatus, { name: "DTXFERPRC", required: true, order: 10, type: Date, read: TransferStatus.prototype.getDate, write: TransferStatus.prototype.setDate });
        }
    };
});
System.register("domain/data/investment/positions/DebtPosition", ["domain/data/investment/positions/BasePosition", "meta/Aggregate_add"], function (exports_184, context_184) {
    "use strict";
    var BasePosition_2, Aggregate_Add_81, DebtPosition;
    var __moduleName = context_184 && context_184.id;
    return {
        setters: [
            function (BasePosition_2_1) {
                BasePosition_2 = BasePosition_2_1;
            },
            function (Aggregate_Add_81_1) {
                Aggregate_Add_81 = Aggregate_Add_81_1;
            }
        ],
        execute: function () {
            /**
             * Represents a debt position.
             * @see "Section 13.9.2.6.1, OFX Spec"
             *
             * @author Jon Perlow
             */
            DebtPosition = /** @class */ (function (_super) {
                __extends(DebtPosition, _super);
                function DebtPosition() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return DebtPosition;
            }(BasePosition_2.BasePosition));
            exports_184("DebtPosition", DebtPosition);
            Aggregate_Add_81.Aggregate_add(DebtPosition, "POSDEBT");
        }
    };
});
System.register("domain/data/investment/positions/MutualFundPosition", ["domain/data/investment/positions/BasePosition", "meta/Aggregate_add", "meta/Element_add"], function (exports_185, context_185) {
    "use strict";
    var BasePosition_3, Aggregate_Add_82, Element_add_43, MutualFundPosition;
    var __moduleName = context_185 && context_185.id;
    return {
        setters: [
            function (BasePosition_3_1) {
                BasePosition_3 = BasePosition_3_1;
            },
            function (Aggregate_Add_82_1) {
                Aggregate_Add_82 = Aggregate_Add_82_1;
            },
            function (Element_add_43_1) {
                Element_add_43 = Element_add_43_1;
            }
        ],
        execute: function () {
            /**
             * Represents a mutual fund position.
             * @see "Section 13.9.2.6.1, OFX Spec"
             *
             * @author Jon Perlow
             */
            MutualFundPosition = /** @class */ (function (_super) {
                __extends(MutualFundPosition, _super);
                function MutualFundPosition() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * Gets the number of units in the financial insititution's street name.
                 *
                 * @return the number of units in the financial insititution's street name.
                 */
                MutualFundPosition.prototype.getUnitsStreet = function () {
                    return this.unitsStreet;
                };
                /**
                 * Sets the number of units in the financial insititution's street name.
                 *
                 * @param unitsStreet the number of units in the financial insititution's street name.
                 */
                MutualFundPosition.prototype.setUnitsStreet = function (unitsStreet) {
                    this.unitsStreet = unitsStreet;
                };
                /**
                 * Gets the number of units in the user's name.
                 *
                 * @return the number of units in the user's name.
                 */
                MutualFundPosition.prototype.getUnitsUser = function () {
                    return this.unitsUser;
                };
                /**
                 * Sets the number of units in the user's name.
                 *
                 * @param unitsUser the number of units in the user's name.
                 */
                MutualFundPosition.prototype.setUnitsUser = function (unitsUser) {
                    this.unitsUser = unitsUser;
                };
                /**
                 * Gets whether dividends are automatically reinvested.
                 *
                 * @return whether dividends are automatically reinvested
                 */
                MutualFundPosition.prototype.getReinvestDividends = function () {
                    return this.reinvestDividends;
                };
                /**
                 * Sets whether dividends are automatically reinvested.
                 *
                 * @param reinvestDividends whether dividends are automatically reinvested
                 */
                MutualFundPosition.prototype.setReinvestDividends = function (reinvestDividends) {
                    this.reinvestDividends = reinvestDividends;
                };
                /**
                 * Gets whether capital gains are automatically reinvested.
                 *
                 * @return whether capital gains are automatically reinvested
                 */
                MutualFundPosition.prototype.getReinvestCapitalGains = function () {
                    return this.reinvestCapitalGains;
                };
                /**
                 * Sets whether capital gains are automatically reinvested.
                 *
                 * @param reinvestCapitalGains whether capital gains are automatically reinvested
                 */
                MutualFundPosition.prototype.setReinvestCapitalGains = function (reinvestCapitalGains) {
                    this.reinvestCapitalGains = reinvestCapitalGains;
                };
                return MutualFundPosition;
            }(BasePosition_3.BasePosition));
            exports_185("MutualFundPosition", MutualFundPosition);
            Aggregate_Add_82.Aggregate_add(MutualFundPosition, "POSMF");
            Element_add_43.Element_add(MutualFundPosition, { name: "UNITSSTREET", order: 20, type: Number, read: MutualFundPosition.prototype.getUnitsStreet, write: MutualFundPosition.prototype.setUnitsStreet });
            Element_add_43.Element_add(MutualFundPosition, { name: "UNITSUSER", order: 30, type: Number, read: MutualFundPosition.prototype.getUnitsUser, write: MutualFundPosition.prototype.setUnitsUser });
            Element_add_43.Element_add(MutualFundPosition, { name: "REINVDIV", order: 50, type: Boolean, read: MutualFundPosition.prototype.getReinvestDividends, write: MutualFundPosition.prototype.setReinvestDividends });
            Element_add_43.Element_add(MutualFundPosition, { name: "REINVCG", order: 60, type: Boolean, read: MutualFundPosition.prototype.getReinvestCapitalGains, write: MutualFundPosition.prototype.setReinvestCapitalGains });
        }
    };
});
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("domain/data/investment/positions/ShortOptionSecurity", [], function (exports_186, context_186) {
    "use strict";
    var ShortOptionSecurity;
    var __moduleName = context_186 && context_186.id;
    function ShortOptionSecurity_fromOfx(ofxVal) {
        if ("NAKED" === ofxVal) {
            return ShortOptionSecurity.NAKED;
        }
        else if ("COVERED" === ofxVal) {
            return ShortOptionSecurity.COVERED;
        }
        else {
            return null;
        }
    }
    exports_186("ShortOptionSecurity_fromOfx", ShortOptionSecurity_fromOfx);
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2010 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
             * How a short option is secured.
             * @see "Section 13.9.2.4.4, OFX Spec"
             *
             * @author Jon Perlow
             */
            (function (ShortOptionSecurity) {
                ShortOptionSecurity[ShortOptionSecurity["NAKED"] = 0] = "NAKED";
                ShortOptionSecurity[ShortOptionSecurity["COVERED"] = 1] = "COVERED";
            })(ShortOptionSecurity || (ShortOptionSecurity = {}));
            exports_186("ShortOptionSecurity", ShortOptionSecurity);
        }
    };
});
System.register("domain/data/investment/positions/OptionsPosition", ["domain/data/investment/positions/BasePosition", "domain/data/investment/positions/ShortOptionSecurity", "meta/Aggregate_add", "meta/Element_add"], function (exports_187, context_187) {
    "use strict";
    var BasePosition_4, ShortOptionSecurity_1, Aggregate_Add_83, Element_add_44, OptionsPosition;
    var __moduleName = context_187 && context_187.id;
    return {
        setters: [
            function (BasePosition_4_1) {
                BasePosition_4 = BasePosition_4_1;
            },
            function (ShortOptionSecurity_1_1) {
                ShortOptionSecurity_1 = ShortOptionSecurity_1_1;
            },
            function (Aggregate_Add_83_1) {
                Aggregate_Add_83 = Aggregate_Add_83_1;
            },
            function (Element_add_44_1) {
                Element_add_44 = Element_add_44_1;
            }
        ],
        execute: function () {
            /**
             * Represents an options position.
             * @see "Section 13.9.2.6.1, OFX Spec"
             *
             * @author Jon Perlow
             */
            OptionsPosition = /** @class */ (function (_super) {
                __extends(OptionsPosition, _super);
                function OptionsPosition() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * Gets how the options position is secured (for short positions).
                 *
                 * @return how the options position is secured
                 */
                OptionsPosition.prototype.getSecured = function () {
                    return this.secured;
                };
                /**
                 * Sets how the options position is secured (for short positions).
                 *
                 * @param secured how the options position is secured
                 */
                OptionsPosition.prototype.setSecured = function (secured) {
                    this.secured = secured;
                };
                /**
                 * Gets how the options position is secured as a well-known type.
                 *
                 * @return how the option position is secured or null if it's not a well-known type
                 */
                OptionsPosition.prototype.getSecuredEnum = function () {
                    return ShortOptionSecurity_1.ShortOptionSecurity_fromOfx(this.getSecured());
                };
                return OptionsPosition;
            }(BasePosition_4.BasePosition));
            exports_187("OptionsPosition", OptionsPosition);
            Aggregate_Add_83.Aggregate_add(OptionsPosition, "POSOPT");
            Element_add_44.Element_add(OptionsPosition, { name: "SECURED", order: 20, type: String, read: OptionsPosition.prototype.getSecured, write: OptionsPosition.prototype.setSecured });
        }
    };
});
System.register("domain/data/investment/positions/OtherPosition", ["domain/data/investment/positions/BasePosition", "meta/Aggregate_add"], function (exports_188, context_188) {
    "use strict";
    var BasePosition_5, Aggregate_Add_84, OtherPosition;
    var __moduleName = context_188 && context_188.id;
    return {
        setters: [
            function (BasePosition_5_1) {
                BasePosition_5 = BasePosition_5_1;
            },
            function (Aggregate_Add_84_1) {
                Aggregate_Add_84 = Aggregate_Add_84_1;
            }
        ],
        execute: function () {
            /**
             * Represents other types of positions.
             * @see "Section 13.9.2.6.1, OFX Spec"
             *
             * @author Jon Perlow
             */
            OtherPosition = /** @class */ (function (_super) {
                __extends(OtherPosition, _super);
                function OtherPosition() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return OtherPosition;
            }(BasePosition_5.BasePosition));
            exports_188("OtherPosition", OtherPosition);
            Aggregate_Add_84.Aggregate_add(OtherPosition, "POSOTHER");
        }
    };
});
System.register("domain/data/investment/positions/StockPosition", ["domain/data/investment/positions/BasePosition", "meta/Aggregate_add", "meta/Element_add"], function (exports_189, context_189) {
    "use strict";
    var BasePosition_6, Aggregate_Add_85, Element_add_45, StockPosition;
    var __moduleName = context_189 && context_189.id;
    return {
        setters: [
            function (BasePosition_6_1) {
                BasePosition_6 = BasePosition_6_1;
            },
            function (Aggregate_Add_85_1) {
                Aggregate_Add_85 = Aggregate_Add_85_1;
            },
            function (Element_add_45_1) {
                Element_add_45 = Element_add_45_1;
            }
        ],
        execute: function () {
            /**
             * Represents a stock position.
             * @see "Section 13.9.2.6.1, OFX Spec"
             *
             * @author Jon Perlow
             */
            StockPosition = /** @class */ (function (_super) {
                __extends(StockPosition, _super);
                function StockPosition() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * Gets the number of units in the financial insititution's street name.
                 *
                 * @return the number of units in the financial insititution's street name.
                 */
                StockPosition.prototype.getUnitsStreet = function () {
                    return this.unitsStreet;
                };
                /**
                 * Sets the number of units in the financial insititution's street name.
                 *
                 * @param unitsStreet the number of units in the financial insititution's street name.
                 */
                StockPosition.prototype.setUnitsStreet = function (unitsStreet) {
                    this.unitsStreet = unitsStreet;
                };
                /**
                 * Gets the number of units in the user's name.
                 *
                 * @return the number of units in the user's name.
                 */
                StockPosition.prototype.getUnitsUser = function () {
                    return this.unitsUser;
                };
                /**
                 * Sets the number of units in the user's name.
                 *
                 * @param unitsUser the number of units in the user's name.
                 */
                StockPosition.prototype.setUnitsUser = function (unitsUser) {
                    this.unitsUser = unitsUser;
                };
                /**
                 * Gets whether dividends are automatically reinvested.
                 *
                 * @return whether dividends are automatically reinvested
                 */
                StockPosition.prototype.getReinvestDividends = function () {
                    return this.reinvestDividends;
                };
                /**
                 * Sets whether dividends are automatically reinvested.
                 *
                 * @param reinvestDividends whether dividends are automatically reinvested
                 */
                StockPosition.prototype.setReinvestDividends = function (reinvestDividends) {
                    this.reinvestDividends = reinvestDividends;
                };
                return StockPosition;
            }(BasePosition_6.BasePosition));
            exports_189("StockPosition", StockPosition);
            Aggregate_Add_85.Aggregate_add(StockPosition, "POSSTOCK");
            Element_add_45.Element_add(StockPosition, { name: "UNITSSTREET", order: 20, type: Number, read: StockPosition.prototype.getUnitsStreet, write: StockPosition.prototype.setUnitsStreet });
            Element_add_45.Element_add(StockPosition, { name: "UNITSUSER", order: 30, type: Number, read: StockPosition.prototype.getUnitsUser, write: StockPosition.prototype.setUnitsUser });
            Element_add_45.Element_add(StockPosition, { name: "REINVDIV", order: 40, type: Boolean, read: StockPosition.prototype.getReinvestDividends, write: StockPosition.prototype.setReinvestDividends });
        }
    };
});
System.register("domain/data/investment/transactions/TransactionWithSecurity", [], function (exports_190, context_190) {
    "use strict";
    var __moduleName = context_190 && context_190.id;
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("domain/data/investment/transactions/OriginalCurrency", ["meta/Aggregate_add", "meta/Element_add"], function (exports_191, context_191) {
    "use strict";
    var Aggregate_Add_86, Element_add_46, OriginalCurrency;
    var __moduleName = context_191 && context_191.id;
    return {
        setters: [
            function (Aggregate_Add_86_1) {
                Aggregate_Add_86 = Aggregate_Add_86_1;
            },
            function (Element_add_46_1) {
                Element_add_46 = Element_add_46_1;
            }
        ],
        execute: function () {
            /**
             * Original currency aggregate ("ORIGCURRENCY"). For investment transactions in other currencies,
             * the financial institution can report the transaction as converted into the default currency
             * and then include this child aggregate to report what the original currency was and what the
             * rate of conversion was.
             * @see "Section 5.2, OFX Spec"
             *
             * @author Jon Perlow
             */
            OriginalCurrency = /** @class */ (function () {
                function OriginalCurrency() {
                }
                /**
                 * Gets the rate of currency conversion. This is the ratio of "CURDEF" (the default currency in
                 * the transaction response) to "CURSYM" (the original currency code below).
                 *
                 * @return the currency rate
                 */
                OriginalCurrency.prototype.getCurrencyRate = function () {
                    return this.currencyRate;
                };
                /**
                 * Sets the rate of currency conversion. This is the ratio of "CURDEF" (the default currency in
                 * the transaction response) to "CURSYM" (the original currency code below).
                 *
                 * @param currencyRate the currency rate
                 */
                OriginalCurrency.prototype.setCurrencyRate = function (currencyRate) {
                    this.currencyRate = currencyRate;
                };
                /**
                 * Gets the ISO-4217 3-letter currency identifier of the original currency.
                 * @see java.util.Currency#getCurrencyCode()
                 *
                 * @return the currency code
                 */
                OriginalCurrency.prototype.getCurrencyCode = function () {
                    return this.currencyCode;
                };
                /**
                 * Sets the ISO-4217 3-letter currency identifier of the original currency.
                 * @see java.util.Currency#getCurrencyCode()
                 *
                 * @param currencyCode the currency code
                 */
                OriginalCurrency.prototype.setCurrencyCode = function (currencyCode) {
                    this.currencyCode = currencyCode;
                };
                return OriginalCurrency;
            }());
            exports_191("OriginalCurrency", OriginalCurrency);
            Aggregate_Add_86.Aggregate_add(OriginalCurrency, "ORIGCURRENCY");
            Element_add_46.Element_add(OriginalCurrency, { name: "CURRATE", required: true, order: 10, type: Number, read: OriginalCurrency.prototype.getCurrencyRate, write: OriginalCurrency.prototype.setCurrencyRate });
            Element_add_46.Element_add(OriginalCurrency, { name: "CURSYM", required: true, order: 20, type: String, read: OriginalCurrency.prototype.getCurrencyCode, write: OriginalCurrency.prototype.setCurrencyCode });
        }
    };
});
System.register("domain/data/investment/transactions/BuyInvestmentTransaction", ["domain/data/investment/transactions/InvestmentTransaction", "domain/data/seclist/SecurityId", "domain/data/investment/transactions/OriginalCurrency", "domain/data/investment/accounts/SubAccountType", "meta/Aggregate_add", "meta/ChildAggregate_add", "meta/Element_add"], function (exports_192, context_192) {
    "use strict";
    var InvestmentTransaction_1, SecurityId_4, OriginalCurrency_1, SubAccountType_4, Aggregate_Add_87, ChildAggregate_add_67, Element_add_47, BuyInvestmentTransaction;
    var __moduleName = context_192 && context_192.id;
    return {
        setters: [
            function (InvestmentTransaction_1_1) {
                InvestmentTransaction_1 = InvestmentTransaction_1_1;
            },
            function (SecurityId_4_1) {
                SecurityId_4 = SecurityId_4_1;
            },
            function (OriginalCurrency_1_1) {
                OriginalCurrency_1 = OriginalCurrency_1_1;
            },
            function (SubAccountType_4_1) {
                SubAccountType_4 = SubAccountType_4_1;
            },
            function (Aggregate_Add_87_1) {
                Aggregate_Add_87 = Aggregate_Add_87_1;
            },
            function (ChildAggregate_add_67_1) {
                ChildAggregate_add_67 = ChildAggregate_add_67_1;
            },
            function (Element_add_47_1) {
                Element_add_47 = Element_add_47_1;
            }
        ],
        execute: function () {
            /**
             * Buy investment transaction aggregate ("INVBUY").
             * @see "Section 13.9.2.4.3, OFX Spec"
             *
             * @author Jon Perlow
             */
            BuyInvestmentTransaction = /** @class */ (function () {
                function BuyInvestmentTransaction() {
                }
                /**
                 * Gets the investment transaction child aggregate.
                 *
                 * @return the investment transaction child aggregate
                 */
                BuyInvestmentTransaction.prototype.getInvestmentTransaction = function () {
                    return this.investmentTransaction;
                };
                /**
                 * Sets the investment transaction child aggregate.
                 *
                 * @param investmentTransaction the investment transaction child aggregate
                 */
                BuyInvestmentTransaction.prototype.setInvestmentTransaction = function (investmentTransaction) {
                    this.investmentTransaction = investmentTransaction;
                };
                /**
                 * Gets the id of the security that was bought. This is a required field according to the OFX
                 * spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the security id of the security that was bought
                 */
                BuyInvestmentTransaction.prototype.getSecurityId = function () {
                    return this.securityId;
                };
                /**
                 * Sets the id of the security that was bought. This is a required field according to the OFX
                 * spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param securityId the security id of the security that was bought
                 */
                BuyInvestmentTransaction.prototype.setSecurityId = function (securityId) {
                    this.securityId = securityId;
                };
                /**
                 * Gets the number of units of the security that was bought. For security-based actions other
                 * than stock splits, this is the quantity bought. For stocks, mutual funds, and others, this
                 * is the number of shares. For bonds, this is the face value. For options, this is the number of
                 * contacts. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the number of units purchased.
                 */
                BuyInvestmentTransaction.prototype.getUnits = function () {
                    return this.units;
                };
                /**
                 * Sets the number of units of the security that was bought. For security-based actions other
                 * than stock splits, this is the quantity bought. For stocks, mutual funds, and others, this
                 * is the number of shares. For bonds, this is the face value. For options, this is the number of
                 * contacts. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param units the number of units purchased.
                 */
                BuyInvestmentTransaction.prototype.setUnits = function (units) {
                    this.units = units;
                };
                /**
                 * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
                 * share price. For bonds, this is the percentage of par. For options, this is the per share (not
                 * per contact) price. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the per unit price
                 */
                BuyInvestmentTransaction.prototype.getUnitPrice = function () {
                    return this.unitPrice;
                };
                /**
                 * Sets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
                 * share price. For bonds, this is the percentage of par. For options, this is the per share (not
                 * per contact) price. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param unitPrice the per unit price
                 */
                BuyInvestmentTransaction.prototype.setUnitPrice = function (unitPrice) {
                    this.unitPrice = unitPrice;
                };
                /**
                 * Gets the portion of the unit price that is attributed to the dealer markup. This is an
                 * optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the per unit markeup price
                 */
                BuyInvestmentTransaction.prototype.getMarkup = function () {
                    return this.markup;
                };
                /**
                 * Sets the portion of the unit price that is attributed to the dealer markup. This is an
                 * optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param markup the per unit markeup price
                 */
                BuyInvestmentTransaction.prototype.setMarkup = function (markup) {
                    this.markup = markup;
                };
                /**
                 * Gets the transaction commission for the purchase. This is an optional field according to the
                 * OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the transaction commision
                 */
                BuyInvestmentTransaction.prototype.getCommission = function () {
                    return this.commission;
                };
                /**
                 * Sets the transaction commission for the purchase. This is an optional field according to the
                 * OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param commission the transaction commision
                 */
                BuyInvestmentTransaction.prototype.setCommission = function (commission) {
                    this.commission = commission;
                };
                /**
                 * Gets the taxes for the purchase. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the transaction taxes
                 */
                BuyInvestmentTransaction.prototype.getTaxes = function () {
                    return this.taxes;
                };
                /**
                 * Sets the taxes for the purchase. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param taxes the transaction taxes
                 */
                BuyInvestmentTransaction.prototype.setTaxes = function (taxes) {
                    this.taxes = taxes;
                };
                /**
                 * Gets the fees for the purchase. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the transaction fees
                 */
                BuyInvestmentTransaction.prototype.getFees = function () {
                    return this.fees;
                };
                /**
                 * Sets the fees for the purchase. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param fees the transaction fees
                 */
                BuyInvestmentTransaction.prototype.setFees = function (fees) {
                    this.fees = fees;
                };
                /**
                 * Gets the load for the purchase. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the load
                 */
                BuyInvestmentTransaction.prototype.getLoad = function () {
                    return this.load;
                };
                /**
                 * Sets the load for the purchase. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param load the load
                 */
                BuyInvestmentTransaction.prototype.setLoad = function (load) {
                    this.load = load;
                };
                /**
                 * Gets the total for the purchase. Should be equal to
                 * (units * (unitPrice + markup)) + (commision + fees + taxes) according to the OFX
                 * spec. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the total
                 */
                BuyInvestmentTransaction.prototype.getTotal = function () {
                    return this.total;
                };
                /**
                 * Sets the total for the purchase. Should be equal to
                 * (units * (unitPrice + markup)) + (commision + fees + taxes) according to the OFX
                 * spec. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param total the total
                 */
                BuyInvestmentTransaction.prototype.setTotal = function (total) {
                    this.total = total;
                };
                /**
                 * Gets the currency code for the transaction. Only one of currency code or original currency
                 * info should be set according to the OFX spec. If neither are set, means the default currency.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the currency code for the transaction.
                 */
                BuyInvestmentTransaction.prototype.getCurrencyCode = function () {
                    return this.currencyCode;
                };
                /**
                 * Sets the currency code for the transaction. Only one of currency code or original currency
                 * info may be set according to the OFX spec. If neither are set, means the default currency.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param currencyCode the currency code for the transaction.
                 */
                BuyInvestmentTransaction.prototype.setCurrencyCode = function (currencyCode) {
                    this.currencyCode = currencyCode;
                    this.originalCurrencyInfo = null;
                };
                /**
                 * Gets the original currency info for the transaction.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the original currency info for the transaction
                 */
                BuyInvestmentTransaction.prototype.getOriginalCurrencyInfo = function () {
                    return this.originalCurrencyInfo;
                };
                /**
                 * Sets the original currency info for the transaction
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param originalCurrencyInfo the original currency info for the transaction
                 */
                BuyInvestmentTransaction.prototype.setOriginalCurrencyInfo = function (originalCurrencyInfo) {
                    this.originalCurrencyInfo = originalCurrencyInfo;
                    this.currencyCode = null;
                };
                /**
                  * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
                  * @see "Section 13.9.2.4.3, OFX Spec"
                  *
                  * @return the sub account type
                  */
                BuyInvestmentTransaction.prototype.getSubAccountSecurity = function () {
                    return this.subAccountSecurity;
                };
                /**
                  * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
                  * @see "Section 13.9.2.4.3, OFX Spec"
                  *
                  * @param subAccountSecurity the sub account type
                  */
                BuyInvestmentTransaction.prototype.setSubAccountSecurity = function (subAccountSecurity) {
                    this.subAccountSecurity = subAccountSecurity;
                };
                /**
                 * Gets the result of getSubAccountSecurity as one of the well-known types.
                 *
                 * @return the type of null if it wasn't one of the well known types.
                 */
                BuyInvestmentTransaction.prototype.getSubAccountSecurityEnum = function () {
                    return SubAccountType_4.SubAccountType_fromOfx(this.getSubAccountSecurity());
                };
                /**
                 * Gets the sub account type that the money came from. (e.g. CASH, MARGIN, SHORT, OTHER).
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the sub account fund
                 */
                BuyInvestmentTransaction.prototype.getSubAccountFund = function () {
                    return this.subAccountFund;
                };
                /**
                 * Sets the sub account type that the money came from. (e.g. CASH, MARGIN, SHORT, OTHER).
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param subAcctFund the sub account fund
                 */
                BuyInvestmentTransaction.prototype.setSubAccountFund = function (subAcctFund) {
                    this.subAccountFund = subAcctFund;
                };
                /**
                 * Gets the result of getSubAccountFund as one of the well-known types.
                 *
                 * @return the type or null if it wasn't one of the well known types.
                 */
                BuyInvestmentTransaction.prototype.getSubAccountFundEnum = function () {
                    return SubAccountType_4.SubAccountType_fromOfx(this.getSubAccountFund());
                };
                return BuyInvestmentTransaction;
            }());
            exports_192("BuyInvestmentTransaction", BuyInvestmentTransaction);
            Aggregate_Add_87.Aggregate_add(BuyInvestmentTransaction, "INVBUY");
            ChildAggregate_add_67.ChildAggregate_add(BuyInvestmentTransaction, { order: 10, type: InvestmentTransaction_1.InvestmentTransaction, read: BuyInvestmentTransaction.prototype.getInvestmentTransaction, write: BuyInvestmentTransaction.prototype.setInvestmentTransaction });
            ChildAggregate_add_67.ChildAggregate_add(BuyInvestmentTransaction, { required: true, order: 20, type: SecurityId_4.SecurityId, read: BuyInvestmentTransaction.prototype.getSecurityId, write: BuyInvestmentTransaction.prototype.setSecurityId });
            Element_add_47.Element_add(BuyInvestmentTransaction, { name: "UNITS", required: true, order: 30, type: Number, read: BuyInvestmentTransaction.prototype.getUnits, write: BuyInvestmentTransaction.prototype.setUnits });
            Element_add_47.Element_add(BuyInvestmentTransaction, { name: "UNITPRICE", required: true, order: 40, type: Number, read: BuyInvestmentTransaction.prototype.getUnitPrice, write: BuyInvestmentTransaction.prototype.setUnitPrice });
            Element_add_47.Element_add(BuyInvestmentTransaction, { name: "MARKUP", order: 50, type: Number, read: BuyInvestmentTransaction.prototype.getMarkup, write: BuyInvestmentTransaction.prototype.setMarkup });
            Element_add_47.Element_add(BuyInvestmentTransaction, { name: "COMMISSION", order: 60, type: Number, read: BuyInvestmentTransaction.prototype.getCommission, write: BuyInvestmentTransaction.prototype.setCommission });
            Element_add_47.Element_add(BuyInvestmentTransaction, { name: "TAXES", order: 70, type: Number, read: BuyInvestmentTransaction.prototype.getTaxes, write: BuyInvestmentTransaction.prototype.setTaxes });
            Element_add_47.Element_add(BuyInvestmentTransaction, { name: "FEES", order: 80, type: Number, read: BuyInvestmentTransaction.prototype.getFees, write: BuyInvestmentTransaction.prototype.setFees });
            Element_add_47.Element_add(BuyInvestmentTransaction, { name: "LOAD", order: 90, type: Number, read: BuyInvestmentTransaction.prototype.getLoad, write: BuyInvestmentTransaction.prototype.setLoad });
            Element_add_47.Element_add(BuyInvestmentTransaction, { name: "TOTAL", required: true, order: 100, type: Number, read: BuyInvestmentTransaction.prototype.getTotal, write: BuyInvestmentTransaction.prototype.setTotal });
            Element_add_47.Element_add(BuyInvestmentTransaction, { name: "CURRENCY", order: 110, type: String, read: BuyInvestmentTransaction.prototype.getCurrencyCode, write: BuyInvestmentTransaction.prototype.setCurrencyCode });
            ChildAggregate_add_67.ChildAggregate_add(BuyInvestmentTransaction, { order: 120, type: OriginalCurrency_1.OriginalCurrency, read: BuyInvestmentTransaction.prototype.getOriginalCurrencyInfo, write: BuyInvestmentTransaction.prototype.setOriginalCurrencyInfo });
            Element_add_47.Element_add(BuyInvestmentTransaction, { name: "SUBACCTSEC", order: 130, type: String, read: BuyInvestmentTransaction.prototype.getSubAccountSecurity, write: BuyInvestmentTransaction.prototype.setSubAccountSecurity });
            Element_add_47.Element_add(BuyInvestmentTransaction, { name: "SUBACCTFUND", order: 140, type: String, read: BuyInvestmentTransaction.prototype.getSubAccountFund, write: BuyInvestmentTransaction.prototype.setSubAccountFund });
        }
    };
});
System.register("domain/data/investment/transactions/BaseBuyInvestmentTransaction", ["domain/data/investment/transactions/BaseInvestmentTransaction", "domain/data/investment/transactions/BuyInvestmentTransaction", "domain/data/investment/accounts/SubAccountType", "meta/ChildAggregate_add"], function (exports_193, context_193) {
    "use strict";
    var BaseInvestmentTransaction_2, BuyInvestmentTransaction_1, SubAccountType_5, ChildAggregate_add_68, BaseBuyInvestmentTransaction;
    var __moduleName = context_193 && context_193.id;
    return {
        setters: [
            function (BaseInvestmentTransaction_2_1) {
                BaseInvestmentTransaction_2 = BaseInvestmentTransaction_2_1;
            },
            function (BuyInvestmentTransaction_1_1) {
                BuyInvestmentTransaction_1 = BuyInvestmentTransaction_1_1;
            },
            function (SubAccountType_5_1) {
                SubAccountType_5 = SubAccountType_5_1;
            },
            function (ChildAggregate_add_68_1) {
                ChildAggregate_add_68 = ChildAggregate_add_68_1;
            }
        ],
        execute: function () {
            /**
             * Base class for all investment transactions for buying securities.
             * <br>
             * This class exposes a read-only view of the flattened aggregates that are
             * common to all buy investment transactions as a convenience to application
             * developers who may not find the ofx aggregation model intuitive.
             *
             * @author Jon Perlow
             */
            BaseBuyInvestmentTransaction = /** @class */ (function (_super) {
                __extends(BaseBuyInvestmentTransaction, _super);
                function BaseBuyInvestmentTransaction(transactionType) {
                    return _super.call(this, transactionType) || this;
                }
                /**
                 * Gets the buy investment transaction child aggregate.
                 *
                 * @return the buy investment transaction child aggregate
                 */
                BaseBuyInvestmentTransaction.prototype.getBuyInvestment = function () {
                    return this.buyInvestment;
                };
                /**
                 * Sets the buy investment transaction child aggregate.
                 *
                 * @param buyInvestment the buy investment transaction child aggregate
                 */
                BaseBuyInvestmentTransaction.prototype.setBuyInvestment = function (buyInvestment) {
                    this.buyInvestment = buyInvestment;
                };
                /**
                 * Gets the investment transaction aggregate.
                 *
                 * @return the investment transaction aggregate
                 */
                // @Overridden
                BaseBuyInvestmentTransaction.prototype.getInvestmentTransaction = function () {
                    return this.getBuyInvestment().getInvestmentTransaction();
                };
                /**
                 * Gets the id of the security that was bought. This is a required field according to the OFX
                 * spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the security id of the security that was bought
                 */
                BaseBuyInvestmentTransaction.prototype.getSecurityId = function () {
                    return this.getBuyInvestment().getSecurityId();
                };
                /**
                 * Gets the number of units of the security that was bought. For security-based actions other
                 * than stock splits, this is the quantity bought. For stocks, mutual funds, and others, this
                 * is the number of shares. For bonds, this is the face value. For options, this is the number of
                 * contacts. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the number of units purchased.
                 */
                BaseBuyInvestmentTransaction.prototype.getUnits = function () {
                    return this.getBuyInvestment().getUnits();
                };
                /**
                 * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
                 * share price. For bonds, this is the percentage of par. For options, this is the per share (not
                 * per contact) price. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the per unit price
                 */
                BaseBuyInvestmentTransaction.prototype.getUnitPrice = function () {
                    return this.getBuyInvestment().getUnitPrice();
                };
                /**
                 * Gets the portion of the unit price that is attributed to the dealer markup. This is an
                 * optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the per unit markeup price
                 */
                BaseBuyInvestmentTransaction.prototype.getMarkup = function () {
                    return this.getBuyInvestment().getMarkup();
                };
                /**
                 * Gets the transaction commission for the purchase. This is an optional field according to the
                 * OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the transaction commision
                 */
                BaseBuyInvestmentTransaction.prototype.getCommission = function () {
                    return this.getBuyInvestment().getCommission();
                };
                /**
                 * Gets the taxes for the purchase. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the transaction taxes
                 */
                BaseBuyInvestmentTransaction.prototype.getTaxes = function () {
                    return this.getBuyInvestment().getTaxes();
                };
                /**
                 * Gets the fees for the purchase. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the transaction fees
                 */
                BaseBuyInvestmentTransaction.prototype.getFees = function () {
                    return this.getBuyInvestment().getFees();
                };
                /**
                 * Gets the load for the purchase. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the load
                 */
                BaseBuyInvestmentTransaction.prototype.getLoad = function () {
                    return this.getBuyInvestment().getLoad();
                };
                /**
                 * Gets the total for the purchase. Should be equal to
                 * (units * (unitPrice + markup)) + (commision + fees + load + taxes) according to the OFX
                 * spec. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the total
                 */
                BaseBuyInvestmentTransaction.prototype.getTotal = function () {
                    return this.getBuyInvestment().getTotal();
                };
                /**
                 * Gets the currency code for the transaction. Only one of currency code or original currency
                 * info should be set according to the OFX spec. If neither are set, means the default currency.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the currency code for the transaction
                 */
                BaseBuyInvestmentTransaction.prototype.getCurrencyCode = function () {
                    return this.getBuyInvestment().getCurrencyCode();
                };
                /**
                 * Gets the original currency info for the transaction.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the original currency info for the transaction
                 */
                BaseBuyInvestmentTransaction.prototype.getOriginalCurrencyInfo = function () {
                    return this.getBuyInvestment().getOriginalCurrencyInfo();
                };
                /**
                 * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the sub account type
                 */
                BaseBuyInvestmentTransaction.prototype.getSubAccountSecurity = function () {
                    return this.getBuyInvestment().getSubAccountSecurity();
                };
                /**
                 * Gets the result of getSubAccountSecurity as one of the well-known types.
                 *
                 * @return the type of null if it wasn't one of the well known types
                 */
                BaseBuyInvestmentTransaction.prototype.getSubAccountSecurityEnum = function () {
                    return SubAccountType_5.SubAccountType_fromOfx(this.getSubAccountSecurity());
                };
                /**
                 * Gets the sub account type that the money came from. (e.g. CASH, MARGIN, SHORT, OTHER).
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the sub account fund
                 */
                BaseBuyInvestmentTransaction.prototype.getSubAccountFund = function () {
                    return this.getBuyInvestment().getSubAccountFund();
                };
                /**
                 * Gets the result of getSubAccountFund as one of the well-known types.
                 *
                 * @return the type or null if it wasn't one of the well known types.
                 */
                BaseBuyInvestmentTransaction.prototype.getSubAccountFundEnum = function () {
                    return SubAccountType_5.SubAccountType_fromOfx(this.getSubAccountFund());
                };
                return BaseBuyInvestmentTransaction;
            }(BaseInvestmentTransaction_2.BaseInvestmentTransaction));
            exports_193("BaseBuyInvestmentTransaction", BaseBuyInvestmentTransaction);
            ChildAggregate_add_68.ChildAggregate_add(BaseBuyInvestmentTransaction, { order: 10, type: BuyInvestmentTransaction_1.BuyInvestmentTransaction, read: BaseBuyInvestmentTransaction.prototype.getBuyInvestment, write: BaseBuyInvestmentTransaction.prototype.setBuyInvestment });
        }
    };
});
System.register("domain/data/investment/transactions/BaseOtherInvestmentTransaction", ["domain/data/investment/transactions/InvestmentTransaction", "domain/data/investment/transactions/BaseInvestmentTransaction", "meta/ChildAggregate_add"], function (exports_194, context_194) {
    "use strict";
    var InvestmentTransaction_2, BaseInvestmentTransaction_3, ChildAggregate_add_69, BaseOtherInvestmentTransaction;
    var __moduleName = context_194 && context_194.id;
    return {
        setters: [
            function (InvestmentTransaction_2_1) {
                InvestmentTransaction_2 = InvestmentTransaction_2_1;
            },
            function (BaseInvestmentTransaction_3_1) {
                BaseInvestmentTransaction_3 = BaseInvestmentTransaction_3_1;
            },
            function (ChildAggregate_add_69_1) {
                ChildAggregate_add_69 = ChildAggregate_add_69_1;
            }
        ],
        execute: function () {
            /**
             * Base class for investment transactions that aren't buys or sales..
             * <br>
             * This class exposes a read-only view of the flattened aggregates that are
             * common to all investment transactions as a convenience to application
             * developers who may not find the ofx aggregation model intuitive.
             *
             * @author Jon Perlow
             */
            BaseOtherInvestmentTransaction = /** @class */ (function (_super) {
                __extends(BaseOtherInvestmentTransaction, _super);
                function BaseOtherInvestmentTransaction(transactionType) {
                    return _super.call(this, transactionType) || this;
                }
                /**
                 * Gets the {@link InvestmentTransaction} aggregate.
                 *
                 * @return the {@link InvestmentTransaction} aggregate
                 */
                // @Override
                BaseOtherInvestmentTransaction.prototype.getInvestmentTransaction = function () {
                    return this.investmentTransaction;
                };
                /**
                 * Sets the {@link InvestmentTransaction} aggregate.
                 *
                 * @param investmentTransaction the {@link InvestmentTransaction} aggregate
                 */
                BaseOtherInvestmentTransaction.prototype.setInvestmentTransaction = function (investmentTransaction) {
                    this.investmentTransaction = investmentTransaction;
                };
                return BaseOtherInvestmentTransaction;
            }(BaseInvestmentTransaction_3.BaseInvestmentTransaction));
            exports_194("BaseOtherInvestmentTransaction", BaseOtherInvestmentTransaction);
            ChildAggregate_add_69.ChildAggregate_add(BaseOtherInvestmentTransaction, { order: 10, type: InvestmentTransaction_2.InvestmentTransaction, read: BaseOtherInvestmentTransaction.prototype.getInvestmentTransaction, write: BaseOtherInvestmentTransaction.prototype.setInvestmentTransaction });
        }
    };
});
System.register("domain/data/investment/transactions/SellInvestmentTransaction", ["domain/data/investment/transactions/InvestmentTransaction", "domain/data/seclist/SecurityId", "domain/data/investment/transactions/OriginalCurrency", "domain/data/investment/accounts/SubAccountType", "domain/data/investment/positions/Inv401KSource", "meta/Aggregate_add", "meta/ChildAggregate_add", "meta/Element_add"], function (exports_195, context_195) {
    "use strict";
    var InvestmentTransaction_3, SecurityId_5, OriginalCurrency_2, SubAccountType_6, Inv401KSource_3, Aggregate_Add_88, ChildAggregate_add_70, Element_add_48, SellInvestmentTransaction;
    var __moduleName = context_195 && context_195.id;
    return {
        setters: [
            function (InvestmentTransaction_3_1) {
                InvestmentTransaction_3 = InvestmentTransaction_3_1;
            },
            function (SecurityId_5_1) {
                SecurityId_5 = SecurityId_5_1;
            },
            function (OriginalCurrency_2_1) {
                OriginalCurrency_2 = OriginalCurrency_2_1;
            },
            function (SubAccountType_6_1) {
                SubAccountType_6 = SubAccountType_6_1;
            },
            function (Inv401KSource_3_1) {
                Inv401KSource_3 = Inv401KSource_3_1;
            },
            function (Aggregate_Add_88_1) {
                Aggregate_Add_88 = Aggregate_Add_88_1;
            },
            function (ChildAggregate_add_70_1) {
                ChildAggregate_add_70 = ChildAggregate_add_70_1;
            },
            function (Element_add_48_1) {
                Element_add_48 = Element_add_48_1;
            }
        ],
        execute: function () {
            /**
             * Sell investment transaction aggregate ("INVSELL").
             * @see "Section 13.9.2.4.3, OFX Spec"
             *
             * @author Jon Perlow
             */
            SellInvestmentTransaction = /** @class */ (function () {
                function SellInvestmentTransaction() {
                }
                /**
                 * Gets the investment transaction child aggregate.
                 *
                 * @return the investment transaction child aggregate
                 */
                SellInvestmentTransaction.prototype.getInvestmentTransaction = function () {
                    return this.investmentTransaction;
                };
                /**
                 * Sets the investment transaction child aggregate.
                 *
                 * @param investmentTransaction the investment transaction child aggregate
                 */
                SellInvestmentTransaction.prototype.setInvestmentTransaction = function (investmentTransaction) {
                    this.investmentTransaction = investmentTransaction;
                };
                /**
                 * Gets the id of the security that was sold. This is a required field according to the OFX
                 * spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the security id of the security that was sold
                 */
                SellInvestmentTransaction.prototype.getSecurityId = function () {
                    return this.securityId;
                };
                /**
                 * Sets the id of the security that was sold. This is a required field according to the OFX
                 * spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param securityId the security id of the security that was sold
                 */
                SellInvestmentTransaction.prototype.setSecurityId = function (securityId) {
                    this.securityId = securityId;
                };
                /**
                 * Gets the number of units of the security that was sold. For security-based actions other
                 * than stock splits, this is the quantity sold. For stocks, mutual funds, and others, this
                 * is the number of shares. For bonds, this is the face value. For options, this is the number of
                 * contacts. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the number of units sold
                 */
                SellInvestmentTransaction.prototype.getUnits = function () {
                    return this.units;
                };
                /**
                 * Sets the number of units of the security that was sold. For security-based actions other
                 * than stock splits, this is the quantity sold. For stocks, mutual funds, and others, this
                 * is the number of shares. For bonds, this is the face value. For options, this is the number of
                 * contacts. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param units the number of units sold
                 */
                SellInvestmentTransaction.prototype.setUnits = function (units) {
                    this.units = units;
                };
                /**
                 * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
                 * share price. For bonds, this is the percentage of par. For options, this is the per share (not
                 * per contact) price. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the per unit price
                 */
                SellInvestmentTransaction.prototype.getUnitPrice = function () {
                    return this.unitPrice;
                };
                /**
                 * Sets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
                 * share price. For bonds, this is the percentage of par. For options, this is the per share (not
                 * per contact) price. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param unitPrice the per unit price
                 */
                SellInvestmentTransaction.prototype.setUnitPrice = function (unitPrice) {
                    this.unitPrice = unitPrice;
                };
                /**
                 * Gets the portion of the unit price that is attributed to the dealer markdown. This is an
                 * optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the per unit markedown price
                 */
                SellInvestmentTransaction.prototype.getMarkdown = function () {
                    return this.markdown;
                };
                /**
                 * Sets the portion of the unit price that is attributed to the dealer markdown. This is an
                 * optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param markdown the per unit markedown price
                 */
                SellInvestmentTransaction.prototype.setMarkdown = function (markdown) {
                    this.markdown = markdown;
                };
                /**
                 * Gets the transaction commission for the sale. This is an optional field according to the
                 * OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the transaction commision
                 */
                SellInvestmentTransaction.prototype.getCommission = function () {
                    return this.commission;
                };
                /**
                 * Sets the transaction commission for the sale. This is an optional field according to the
                 * OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param commission the transaction commision
                 */
                SellInvestmentTransaction.prototype.setCommission = function (commission) {
                    this.commission = commission;
                };
                /**
                 * Gets the taxes for the sale. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the transaction taxes
                 */
                SellInvestmentTransaction.prototype.getTaxes = function () {
                    return this.taxes;
                };
                /**
                 * Sets the taxes for the sale. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param taxes the transaction taxes
                 */
                SellInvestmentTransaction.prototype.setTaxes = function (taxes) {
                    this.taxes = taxes;
                };
                /**
                 * Gets the fees for the sale. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the transaction fees
                 */
                SellInvestmentTransaction.prototype.getFees = function () {
                    return this.fees;
                };
                /**
                 * Sets the fees for the sale. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param fees the transaction fees
                 */
                SellInvestmentTransaction.prototype.setFees = function (fees) {
                    this.fees = fees;
                };
                /**
                 * Gets the load for the sale. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the load
                 */
                SellInvestmentTransaction.prototype.getLoad = function () {
                    return this.load;
                };
                /**
                 * Sets the load for the sale. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param load the load
                 */
                SellInvestmentTransaction.prototype.setLoad = function (load) {
                    this.load = load;
                };
                /**
                 * Gets the withholding for the sale. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the withholding
                 */
                SellInvestmentTransaction.prototype.getWithholding = function () {
                    return this.withholding;
                };
                /**
                 * Sets the withholding for the sale. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param withholding the withholding
                 */
                SellInvestmentTransaction.prototype.setWithholding = function (withholding) {
                    this.withholding = withholding;
                };
                /**
                 * Gets whether the sale was tax exempt. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return whether the transaction was tax exempt
                 */
                SellInvestmentTransaction.prototype.getTaxExempt = function () {
                    return this.taxExempt;
                };
                /**
                 * Sets whether the sale was tax exempt. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param taxExempt whether the transaction was tax exempt
                 */
                SellInvestmentTransaction.prototype.setTaxExempt = function (taxExempt) {
                    this.taxExempt = taxExempt;
                };
                /**
                 * Gets the total for the sale. Should be equal to
                 * (units * (unitPrice + markdown)) + (commision + fees + load + taxes + penalty + withholding +
                 * statewithholding) according to the OFX spec. This is a required field according to the OFX
                 * spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the total
                 */
                SellInvestmentTransaction.prototype.getTotal = function () {
                    return this.total;
                };
                /**
                 * Sets the total for the sale. Should be equal to
                 * (units * (unitPrice + markdown)) + (commision + fees + load + taxes + penalty + withholding +
                 * statewithholding) according to the OFX spec. This is a required field according to the OFX
                 * spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param total the total
                 */
                SellInvestmentTransaction.prototype.setTotal = function (total) {
                    this.total = total;
                };
                /**
                 * Gets the gain sale. This is aan optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the gain for the sale
                 */
                SellInvestmentTransaction.prototype.getGain = function () {
                    return this.gain;
                };
                /**
                 * Sets the gain sale. This is aan optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param gain the gain for the sale
                 */
                SellInvestmentTransaction.prototype.setGain = function (gain) {
                    this.gain = gain;
                };
                /**
                 * Gets the currency code for the transaction. Only one of currency code or original currency
                 * code should be set according to the OFX spec. If neither are set, means the default currency.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the currency code for the transaction
                 */
                SellInvestmentTransaction.prototype.getCurrencyCode = function () {
                    return this.currencyCode;
                };
                /**
                 * sets the currency code for the transaction. Only one of currency code or original currency
                 * code should be set according to the OFX spec. If neither are set, means the default currency.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param currencyCode the currency code for the transaction
                 */
                SellInvestmentTransaction.prototype.setCurrencyCode = function (currencyCode) {
                    this.currencyCode = currencyCode;
                    this.originalCurrencyInfo = null;
                };
                /**
                 * Gets the original currency info for the transaction.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the original currency info for the transaction
                 */
                SellInvestmentTransaction.prototype.getOriginalCurrencyInfo = function () {
                    return this.originalCurrencyInfo;
                };
                /**
                 * Sets the original currency info for the transaction.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param originalCurrencyInfo the original currency info for the transaction
                 */
                SellInvestmentTransaction.prototype.setOriginalCurrencyInfo = function (originalCurrencyInfo) {
                    this.originalCurrencyInfo = originalCurrencyInfo;
                    this.currencyCode = null;
                };
                /**
                 * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the sub account type
                 */
                SellInvestmentTransaction.prototype.getSubAccountSecurity = function () {
                    return this.subAccountSecurity;
                };
                /**
                 * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param subAccountSecurity the sub account type
                 */
                SellInvestmentTransaction.prototype.setSubAccountSecurity = function (subAccountSecurity) {
                    this.subAccountSecurity = subAccountSecurity;
                };
                /**
                 * Gets the result of getSubAccountSecurity as one of the well-known types.
                 *
                 * @return the type of null if it wasn't one of the well known types.
                 */
                SellInvestmentTransaction.prototype.getSubAccountSecurityEnum = function () {
                    return SubAccountType_6.SubAccountType_fromOfx(this.getSubAccountSecurity());
                };
                /**
                 * Gets the sub account type that the security is being transfered from
                 * (e.g. CASH, MARGIN, SHORT, OTHER).
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the sub account fund
                 */
                SellInvestmentTransaction.prototype.getSubAccountFund = function () {
                    return this.subAccountFund;
                };
                /**
                 * Sets the sub account type that the security is being transfered from
                 * (e.g. CASH, MARGIN, SHORT, OTHER).
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param subAccountFund the sub account fund
                 */
                SellInvestmentTransaction.prototype.setSubAccountFund = function (subAccountFund) {
                    this.subAccountFund = subAccountFund;
                };
                /**
                 * Gets the result of getSubAccountFund as one of the well-known types.
                 *
                 * @return the type of null if it wasn't one of the well known types
                 */
                SellInvestmentTransaction.prototype.getSubAccountFundEnum = function () {
                    return SubAccountType_6.SubAccountType_fromOfx(this.getSubAccountFund());
                };
                /**
                 * Gets the loan id if this transaction was due to a loan or loan repayment on a 401k. This is an
                 * optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the loan id
                 */
                SellInvestmentTransaction.prototype.getLoanId = function () {
                    return this.loanId;
                };
                /**
                 * Sets the loan id if this transaction was due to a loan or loan repayment on a 401k. This is an
                 * optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param loanId the loan id
                 */
                SellInvestmentTransaction.prototype.setLoanId = function (loanId) {
                    this.loanId = loanId;
                };
                /**
                 * Gets the state withholding for the sale. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the state withholding
                 */
                SellInvestmentTransaction.prototype.getStateWithholding = function () {
                    return this.stateWithholding;
                };
                /**
                 * Sets the state withholding for the sale. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param stateWithholding the state withholding
                 */
                SellInvestmentTransaction.prototype.setStateWithholding = function (stateWithholding) {
                    this.stateWithholding = stateWithholding;
                };
                /**
                 * Gets the penalty for the sale. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the state withholding
                 */
                SellInvestmentTransaction.prototype.getPenalty = function () {
                    return this.penalty;
                };
                /**
                 * Sets the penalty for the sale. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param penalty the state withholding
                 */
                SellInvestmentTransaction.prototype.setPenalty = function (penalty) {
                    this.penalty = penalty;
                };
                /**
                 * Gets the 401K source for the sale. Should be one of "PRETAX", "AFTERTAX", "MATCH",
                 * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the 401k source
                 */
                SellInvestmentTransaction.prototype.get401kSource = function () {
                    return this.inv401kSource;
                };
                /**
                 * Sets the 401K source for the sale. Should be one of "PRETAX", "AFTERTAX", "MATCH",
                 * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param inv401kSource the 401k source
                 */
                SellInvestmentTransaction.prototype.set401kSource = function (inv401kSource) {
                    this.inv401kSource = inv401kSource;
                };
                /**
                 * Gets the 401k source as one of the well-known types.
                 *
                 * @return the 401k source or null if its not one of the well-known types
                 */
                SellInvestmentTransaction.prototype.get401kSourceEnum = function () {
                    return Inv401KSource_3.Inv401KSource_fromOfx(this.get401kSource());
                };
                return SellInvestmentTransaction;
            }());
            exports_195("SellInvestmentTransaction", SellInvestmentTransaction);
            Aggregate_Add_88.Aggregate_add(SellInvestmentTransaction, "INVSELL");
            ChildAggregate_add_70.ChildAggregate_add(SellInvestmentTransaction, { order: 10, type: InvestmentTransaction_3.InvestmentTransaction, read: SellInvestmentTransaction.prototype.getInvestmentTransaction, write: SellInvestmentTransaction.prototype.setInvestmentTransaction });
            ChildAggregate_add_70.ChildAggregate_add(SellInvestmentTransaction, { required: true, order: 20, type: SecurityId_5.SecurityId, read: SellInvestmentTransaction.prototype.getSecurityId, write: SellInvestmentTransaction.prototype.setSecurityId });
            Element_add_48.Element_add(SellInvestmentTransaction, { name: "UNITS", required: true, order: 30, type: Number, read: SellInvestmentTransaction.prototype.getUnits, write: SellInvestmentTransaction.prototype.setUnits });
            Element_add_48.Element_add(SellInvestmentTransaction, { name: "UNITPRICE", required: true, order: 40, type: Number, read: SellInvestmentTransaction.prototype.getUnitPrice, write: SellInvestmentTransaction.prototype.setUnitPrice });
            Element_add_48.Element_add(SellInvestmentTransaction, { name: "MARKDOWN", order: 50, type: Number, read: SellInvestmentTransaction.prototype.getMarkdown, write: SellInvestmentTransaction.prototype.setMarkdown });
            Element_add_48.Element_add(SellInvestmentTransaction, { name: "COMMISSION", order: 60, type: Number, read: SellInvestmentTransaction.prototype.getCommission, write: SellInvestmentTransaction.prototype.setCommission });
            Element_add_48.Element_add(SellInvestmentTransaction, { name: "TAXES", order: 70, type: Number, read: SellInvestmentTransaction.prototype.getTaxes, write: SellInvestmentTransaction.prototype.setTaxes });
            Element_add_48.Element_add(SellInvestmentTransaction, { name: "FEES", order: 80, type: Number, read: SellInvestmentTransaction.prototype.getFees, write: SellInvestmentTransaction.prototype.setFees });
            Element_add_48.Element_add(SellInvestmentTransaction, { name: "LOAD", order: 90, type: Number, read: SellInvestmentTransaction.prototype.getLoad, write: SellInvestmentTransaction.prototype.setLoad });
            Element_add_48.Element_add(SellInvestmentTransaction, { name: "WITHHOLDING", order: 93, type: Number, read: SellInvestmentTransaction.prototype.getWithholding, write: SellInvestmentTransaction.prototype.setWithholding });
            Element_add_48.Element_add(SellInvestmentTransaction, { name: "TAXEXEMPT", order: 97, type: Boolean, read: SellInvestmentTransaction.prototype.getTaxExempt, write: SellInvestmentTransaction.prototype.setTaxExempt });
            Element_add_48.Element_add(SellInvestmentTransaction, { name: "TOTAL", required: true, order: 100, type: Number, read: SellInvestmentTransaction.prototype.getTotal, write: SellInvestmentTransaction.prototype.setTotal });
            Element_add_48.Element_add(SellInvestmentTransaction, { name: "GAIN", order: 105, type: Number, read: SellInvestmentTransaction.prototype.getGain, write: SellInvestmentTransaction.prototype.setGain });
            Element_add_48.Element_add(SellInvestmentTransaction, { name: "CURRENCY", order: 110, type: String, read: SellInvestmentTransaction.prototype.getCurrencyCode, write: SellInvestmentTransaction.prototype.setCurrencyCode });
            Element_add_48.Element_add(SellInvestmentTransaction, { name: "ORIGCURRENCY", order: 120, type: OriginalCurrency_2.OriginalCurrency, read: SellInvestmentTransaction.prototype.getOriginalCurrencyInfo, write: SellInvestmentTransaction.prototype.setOriginalCurrencyInfo });
            Element_add_48.Element_add(SellInvestmentTransaction, { name: "SUBACCTSEC", order: 130, type: String, read: SellInvestmentTransaction.prototype.getSubAccountSecurity, write: SellInvestmentTransaction.prototype.setSubAccountSecurity });
            Element_add_48.Element_add(SellInvestmentTransaction, { name: "SUBACCTFUND", order: 140, type: String, read: SellInvestmentTransaction.prototype.getSubAccountFund, write: SellInvestmentTransaction.prototype.setSubAccountFund });
            Element_add_48.Element_add(SellInvestmentTransaction, { name: "LOANID", order: 150, type: String, read: SellInvestmentTransaction.prototype.getLoanId, write: SellInvestmentTransaction.prototype.setLoanId });
            Element_add_48.Element_add(SellInvestmentTransaction, { name: "STATEWITHHOLDING", order: 160, type: Number, read: SellInvestmentTransaction.prototype.getStateWithholding, write: SellInvestmentTransaction.prototype.setStateWithholding });
            Element_add_48.Element_add(SellInvestmentTransaction, { name: "PENALTY", order: 170, type: Number, read: SellInvestmentTransaction.prototype.getPenalty, write: SellInvestmentTransaction.prototype.setPenalty });
            Element_add_48.Element_add(SellInvestmentTransaction, { name: "INV401KSOURCE", order: 180, type: String, read: SellInvestmentTransaction.prototype.get401kSource, write: SellInvestmentTransaction.prototype.set401kSource });
        }
    };
});
System.register("domain/data/investment/transactions/BaseSellInvestmentTransaction", ["domain/data/investment/transactions/BaseInvestmentTransaction", "domain/data/investment/transactions/SellInvestmentTransaction", "domain/data/investment/accounts/SubAccountType", "domain/data/investment/positions/Inv401KSource", "meta/ChildAggregate_add"], function (exports_196, context_196) {
    "use strict";
    var BaseInvestmentTransaction_4, SellInvestmentTransaction_1, SubAccountType_7, Inv401KSource_4, ChildAggregate_add_71, BaseSellInvestmentTransaction;
    var __moduleName = context_196 && context_196.id;
    return {
        setters: [
            function (BaseInvestmentTransaction_4_1) {
                BaseInvestmentTransaction_4 = BaseInvestmentTransaction_4_1;
            },
            function (SellInvestmentTransaction_1_1) {
                SellInvestmentTransaction_1 = SellInvestmentTransaction_1_1;
            },
            function (SubAccountType_7_1) {
                SubAccountType_7 = SubAccountType_7_1;
            },
            function (Inv401KSource_4_1) {
                Inv401KSource_4 = Inv401KSource_4_1;
            },
            function (ChildAggregate_add_71_1) {
                ChildAggregate_add_71 = ChildAggregate_add_71_1;
            }
        ],
        execute: function () {
            /**
             * Base class for all investment transactions for selling securities.
             * <br>
             * This class exposes a read-only view of the flattened aggregates that are
             * common to all sell investment transactions as a convenience to application
             * developers who may not find the ofx aggregation model intuitive.
             *
             * @author Jon Perlow
             */
            BaseSellInvestmentTransaction = /** @class */ (function (_super) {
                __extends(BaseSellInvestmentTransaction, _super);
                function BaseSellInvestmentTransaction(transactionType) {
                    return _super.call(this, transactionType) || this;
                }
                /**
                 * Gets the sell investment transaction child aggregate.
                 *
                 * @return the sell investment transaction child aggregate
                 */
                // @Override
                BaseSellInvestmentTransaction.prototype.getSellInvestment = function () {
                    return this.sellInvestment;
                };
                /**
                 * Sets the sell investment transaction child aggregate.
                 *
                 * @param sellInvestment the sell investment transaction child aggregate
                 */
                BaseSellInvestmentTransaction.prototype.setSellInvestment = function (sellInvestment) {
                    this.sellInvestment = sellInvestment;
                };
                /**
                 * Gets the investment transaction aggregate.
                 *
                 * @return the investment transaction aggregate
                 */
                // @Overridden
                BaseSellInvestmentTransaction.prototype.getInvestmentTransaction = function () {
                    return this.getSellInvestment().getInvestmentTransaction();
                };
                /**
                 * Gets the id of the security that was sold. This is a required field according to the OFX
                 * spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the security id of the security that was bought
                 */
                BaseSellInvestmentTransaction.prototype.getSecurityId = function () {
                    return this.getSellInvestment().getSecurityId();
                };
                /**
                 * Gets the number of units of the security that was sold. For security-based actions other
                 * than stock splits, this is the quantity sold. For stocks, mutual funds, and others, this
                 * is the number of shares. For bonds, this is the face value. For options, this is the number of
                 * contacts. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the number of units purchased.
                 */
                BaseSellInvestmentTransaction.prototype.getUnits = function () {
                    return this.getSellInvestment().getUnits();
                };
                /**
                 * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
                 * share price. For bonds, this is the percentage of par. For options, this is the per share (not
                 * per contact) price. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the per unit price
                 */
                BaseSellInvestmentTransaction.prototype.getUnitPrice = function () {
                    return this.getSellInvestment().getUnitPrice();
                };
                /**
                 * Gets the portion of the unit price that is attributed to the dealer markdown. This is an
                 * optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the per unit markedown price
                 */
                BaseSellInvestmentTransaction.prototype.getMarkdown = function () {
                    return this.getSellInvestment().getMarkdown();
                };
                /**
                 * Gets the transaction commission for the sale. This is an optional field according to the
                 * OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the transaction commision
                 */
                BaseSellInvestmentTransaction.prototype.getCommission = function () {
                    return this.getSellInvestment().getCommission();
                };
                /**
                 * Gets the taxes for the sale. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the transaction taxes
                 */
                BaseSellInvestmentTransaction.prototype.getTaxes = function () {
                    return this.getSellInvestment().getTaxes();
                };
                /**
                 * Gets the fees for the sale. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the transaction fees
                 */
                BaseSellInvestmentTransaction.prototype.getFees = function () {
                    return this.getSellInvestment().getFees();
                };
                /**
                 * Gets the load for the sale. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the load
                 */
                BaseSellInvestmentTransaction.prototype.getLoad = function () {
                    return this.getSellInvestment().getLoad();
                };
                /**
                 * Gets the withholding for the sale. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the withholding
                 */
                BaseSellInvestmentTransaction.prototype.getWithholding = function () {
                    return this.getSellInvestment().getWithholding();
                };
                /**
                 * Gets whether the sale was tax exempt. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return whether the transaction was tax exempt
                 */
                BaseSellInvestmentTransaction.prototype.getTaxExempt = function () {
                    return this.getSellInvestment().getTaxExempt();
                };
                /**
                 * Gets the total for the sale. Should be equal to
                 * (units * (unitPrice + markdown)) + (commision + fees + load + taxes + penalty + withholding +
                 * statewithholding) according to the OFX spec. This is a required field according to the OFX
                 * spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the total
                 */
                BaseSellInvestmentTransaction.prototype.getTotal = function () {
                    return this.getSellInvestment().getTotal();
                };
                /**
                 * Gets the gain sale. This is aan optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the gain for the sale
                 */
                BaseSellInvestmentTransaction.prototype.getGain = function () {
                    return this.getSellInvestment().getGain();
                };
                /**
                 * Gets the currency code for the transaction. Only one of currency code or original currency
                 * info should be set according to the OFX spec. If neither are set, means the default currency.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the currency code for the transaction.
                 */
                BaseSellInvestmentTransaction.prototype.getCurrencyCode = function () {
                    return this.getSellInvestment().getCurrencyCode();
                };
                /**
                 * Gets the origianl currency info for the transaction.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the currency info for the transaction.
                 */
                BaseSellInvestmentTransaction.prototype.getOriginalCurrencyInfo = function () {
                    return this.getSellInvestment().getOriginalCurrencyInfo();
                };
                /**
                 * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the sub account type
                 */
                BaseSellInvestmentTransaction.prototype.getSubAccountSecurity = function () {
                    return this.getSellInvestment().getSubAccountSecurity();
                };
                /**
                 * Gets the result of getSubAccountSecurity as one of the well-known types.
                 *
                 * @return the type of null if it wasn't one of the well known types.
                 */
                BaseSellInvestmentTransaction.prototype.getSubAccountSecurityEnum = function () {
                    return SubAccountType_7.SubAccountType_fromOfx(this.getSubAccountSecurity());
                };
                /**
                 * Gets the sub account type that the money went to  (e.g. CASH, MARGIN, SHORT, OTHER).
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the sub account fund
                 */
                BaseSellInvestmentTransaction.prototype.getSubAccountFund = function () {
                    return this.getSellInvestment().getSubAccountFund();
                };
                /**
                 * Gets the result of getSubAccountFund as one of the well-known types.
                 *
                 * @return the type of null if it wasn't one of the well known types.
                 */
                BaseSellInvestmentTransaction.prototype.getSubAccountFundEnum = function () {
                    return SubAccountType_7.SubAccountType_fromOfx(this.getSubAccountFund());
                };
                /**
                 * Gets the loan id if this transaction was due to a loan or loan repayment on a 401k. This is an
                 * optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the loan id
                 */
                BaseSellInvestmentTransaction.prototype.getLoadId = function () {
                    return this.getSellInvestment().getLoanId();
                };
                /**
                 * Gets the state withholding for the sale. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the state withholding
                 */
                BaseSellInvestmentTransaction.prototype.getStateWithholding = function () {
                    return this.getSellInvestment().getStateWithholding();
                };
                /**
                 * Gets the penalty for the sale. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the state withholding
                 */
                BaseSellInvestmentTransaction.prototype.getPenalty = function () {
                    return this.getSellInvestment().getPenalty();
                };
                /**
                 * Gets the 401K source for the sale. Should be one of "PRETAX", "AFTERTAX", "MATCH",
                 * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the 401k source
                 */
                BaseSellInvestmentTransaction.prototype.get401kSource = function () {
                    return this.getSellInvestment().get401kSource();
                };
                /**
                 * Gets the 401k source as one of the well-known types.
                 *
                 * @return the 401k source or null if its not one of the well-known types
                 */
                BaseSellInvestmentTransaction.prototype.get401kSourceEnum = function () {
                    return Inv401KSource_4.Inv401KSource_fromOfx(this.get401kSource());
                };
                return BaseSellInvestmentTransaction;
            }(BaseInvestmentTransaction_4.BaseInvestmentTransaction));
            exports_196("BaseSellInvestmentTransaction", BaseSellInvestmentTransaction);
            ChildAggregate_add_71.ChildAggregate_add(BaseSellInvestmentTransaction, { order: 10, type: SellInvestmentTransaction_1.SellInvestmentTransaction, read: BaseSellInvestmentTransaction.prototype.getSellInvestment, write: BaseSellInvestmentTransaction.prototype.setSellInvestment });
        }
    };
});
System.register("domain/data/investment/transactions/BuyDebtTransaction", ["domain/data/investment/transactions/TransactionType", "domain/data/investment/transactions/BaseBuyInvestmentTransaction", "meta/Aggregate_add", "meta/Element_add"], function (exports_197, context_197) {
    "use strict";
    var TransactionType_2, BaseBuyInvestmentTransaction_1, Aggregate_Add_89, Element_add_49, BuyDebtTransaction;
    var __moduleName = context_197 && context_197.id;
    return {
        setters: [
            function (TransactionType_2_1) {
                TransactionType_2 = TransactionType_2_1;
            },
            function (BaseBuyInvestmentTransaction_1_1) {
                BaseBuyInvestmentTransaction_1 = BaseBuyInvestmentTransaction_1_1;
            },
            function (Aggregate_Add_89_1) {
                Aggregate_Add_89 = Aggregate_Add_89_1;
            },
            function (Element_add_49_1) {
                Element_add_49 = Element_add_49_1;
            }
        ],
        execute: function () {
            /**
             * Transaction for buying debt (i.e. bonds, CDs, etc.,).
             * @see "Section 13.9.2.4.4, OFX Spec"
             *
             * @author Jon Perlow
             */
            BuyDebtTransaction = /** @class */ (function (_super) {
                __extends(BuyDebtTransaction, _super);
                function BuyDebtTransaction() {
                    return _super.call(this, TransactionType_2.TransactionType.BUY_DEBT) || this;
                }
                /**
                 * Gets the amount of accrued interest on the debt. This is an optional field according to the
                 * OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @return the amount of accrued interest
                 */
                BuyDebtTransaction.prototype.getAccruedInterest = function () {
                    return this.accruedInterest;
                };
                /**
                 * Sets the amount of accrued interest on the debt. This is an optional field according to the
                 * OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @param accruedInterest the amount of accrued interest
                 */
                BuyDebtTransaction.prototype.setAccruedInterest = function (accruedInterest) {
                    this.accruedInterest = accruedInterest;
                };
                return BuyDebtTransaction;
            }(BaseBuyInvestmentTransaction_1.BaseBuyInvestmentTransaction));
            exports_197("BuyDebtTransaction", BuyDebtTransaction);
            Aggregate_Add_89.Aggregate_add(BuyDebtTransaction, "BUYDEBT");
            Element_add_49.Element_add(BuyDebtTransaction, { name: "ACCRDINT", order: 20, type: Number, read: BuyDebtTransaction.prototype.getAccruedInterest, write: BuyDebtTransaction.prototype.setAccruedInterest });
        }
    };
});
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("domain/data/investment/transactions/BuyType", [], function (exports_198, context_198) {
    "use strict";
    var BuyType;
    var __moduleName = context_198 && context_198.id;
    function BuyType_fromOfx(ofxVal) {
        if ("BUY" === ofxVal) {
            return BuyType.BUY;
        }
        else if ("BUYTOCOVER" === ofxVal) {
            return BuyType.BUY_TO_COVER;
        }
        else {
            return null;
        }
    }
    exports_198("BuyType_fromOfx", BuyType_fromOfx);
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2010 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
             * Type of purchase for stocks and mutual funds.
             * @see "Section 13.9.2.4.2, OFX Spec"
             *
             * @author Jon Perlow
             */
            (function (BuyType) {
                BuyType[BuyType["BUY"] = 0] = "BUY";
                BuyType[BuyType["BUY_TO_COVER"] = 1] = "BUY_TO_COVER";
            })(BuyType || (BuyType = {}));
            exports_198("BuyType", BuyType);
        }
    };
});
System.register("domain/data/investment/transactions/BuyMutualFundTransaction", ["domain/data/investment/transactions/TransactionType", "domain/data/investment/transactions/BaseBuyInvestmentTransaction", "domain/data/investment/transactions/BuyType", "meta/Aggregate_add", "meta/Element_add"], function (exports_199, context_199) {
    "use strict";
    var TransactionType_3, BaseBuyInvestmentTransaction_2, BuyType_1, Aggregate_Add_90, Element_add_50, BuyMutualFundTransaction;
    var __moduleName = context_199 && context_199.id;
    return {
        setters: [
            function (TransactionType_3_1) {
                TransactionType_3 = TransactionType_3_1;
            },
            function (BaseBuyInvestmentTransaction_2_1) {
                BaseBuyInvestmentTransaction_2 = BaseBuyInvestmentTransaction_2_1;
            },
            function (BuyType_1_1) {
                BuyType_1 = BuyType_1_1;
            },
            function (Aggregate_Add_90_1) {
                Aggregate_Add_90 = Aggregate_Add_90_1;
            },
            function (Element_add_50_1) {
                Element_add_50 = Element_add_50_1;
            }
        ],
        execute: function () {
            /**
             * Transaction for buying mutual funds.
             * @see "Section 13.9.2.4.4, OFX Spec"
             *
             * @author Jon Perlow
             */
            BuyMutualFundTransaction = /** @class */ (function (_super) {
                __extends(BuyMutualFundTransaction, _super);
                function BuyMutualFundTransaction() {
                    return _super.call(this, TransactionType_3.TransactionType.BUY_MUTUAL_FUND) || this;
                }
                /**
                 * Gets the type of purchase (i.e. "BUY" or "BUYTOCOVER"). This is a required field according to
                 * the OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @return the buy type
                 */
                BuyMutualFundTransaction.prototype.getBuyType = function () {
                    return this.buyType;
                };
                /**
                 * Sets the type of purchase (i.e. "BUY" or "BUYTOCOVER"). This is a required field according to
                 * the OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @param buyType the buy type
                 */
                BuyMutualFundTransaction.prototype.setBuyType = function (buyType) {
                    this.buyType = buyType;
                };
                /**
                 * Gets the buy type as one of the well-known types.
                 *
                 * @return the type of purchase or null if it's not known
                 */
                BuyMutualFundTransaction.prototype.getBuyTypeEnum = function () {
                    return BuyType_1.BuyType_fromOfx(this.buyType);
                };
                /**
                 * Gets any related transaction id for a mutual fund purchase (e.g. for a mutual fund exchange).
                 * This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @return the related transaction id
                 */
                BuyMutualFundTransaction.prototype.getRelatedTransactionId = function () {
                    return this.relatedTransactionId;
                };
                /**
                 * Sets any related transaction id for a mutual fund purchase (e.g. for a mutual fund exchange).
                 * This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @param relatedTransactionId the related transaction id
                 */
                BuyMutualFundTransaction.prototype.setRelatedTransactionId = function (relatedTransactionId) {
                    this.relatedTransactionId = relatedTransactionId;
                };
                return BuyMutualFundTransaction;
            }(BaseBuyInvestmentTransaction_2.BaseBuyInvestmentTransaction));
            exports_199("BuyMutualFundTransaction", BuyMutualFundTransaction);
            Aggregate_Add_90.Aggregate_add(BuyMutualFundTransaction, "BUYMF");
            Element_add_50.Element_add(BuyMutualFundTransaction, { name: "BUYTYPE", required: true, order: 20, type: String, read: BuyMutualFundTransaction.prototype.getBuyType, write: BuyMutualFundTransaction.prototype.setBuyType });
            Element_add_50.Element_add(BuyMutualFundTransaction, { name: "RELFITID", order: 30, type: String, read: BuyMutualFundTransaction.prototype.getRelatedTransactionId, write: BuyMutualFundTransaction.prototype.setRelatedTransactionId });
        }
    };
});
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("domain/data/investment/transactions/OptionBuyType", [], function (exports_200, context_200) {
    "use strict";
    var OptionBuyType;
    var __moduleName = context_200 && context_200.id;
    function OptionBuyType_fromOfx(ofxVal) {
        if ("BUYTOOPEN" === ofxVal) {
            return OptionBuyType.BUY_TO_OPEN;
        }
        else if ("BUYTOCLOSE" === ofxVal) {
            return OptionBuyType.BUY_TO_CLOSE;
        }
        else {
            return null;
        }
    }
    exports_200("OptionBuyType_fromOfx", OptionBuyType_fromOfx);
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2010 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
             * Type of purchase for options.
             * @see "Section 13.9.2.4.2, OFX Spec"
             *
             * @author Jon Perlow
             */
            (function (OptionBuyType) {
                OptionBuyType[OptionBuyType["BUY_TO_OPEN"] = 0] = "BUY_TO_OPEN";
                OptionBuyType[OptionBuyType["BUY_TO_CLOSE"] = 1] = "BUY_TO_CLOSE";
            })(OptionBuyType || (OptionBuyType = {}));
            exports_200("OptionBuyType", OptionBuyType);
        }
    };
});
System.register("domain/data/investment/transactions/BuyOptionTransaction", ["domain/data/investment/transactions/TransactionType", "domain/data/investment/transactions/BaseBuyInvestmentTransaction", "domain/data/investment/transactions/OptionBuyType", "meta/Aggregate_add", "meta/Element_add"], function (exports_201, context_201) {
    "use strict";
    var TransactionType_4, BaseBuyInvestmentTransaction_3, OptionBuyType_1, Aggregate_Add_91, Element_add_51, BuyOptionTransaction;
    var __moduleName = context_201 && context_201.id;
    return {
        setters: [
            function (TransactionType_4_1) {
                TransactionType_4 = TransactionType_4_1;
            },
            function (BaseBuyInvestmentTransaction_3_1) {
                BaseBuyInvestmentTransaction_3 = BaseBuyInvestmentTransaction_3_1;
            },
            function (OptionBuyType_1_1) {
                OptionBuyType_1 = OptionBuyType_1_1;
            },
            function (Aggregate_Add_91_1) {
                Aggregate_Add_91 = Aggregate_Add_91_1;
            },
            function (Element_add_51_1) {
                Element_add_51 = Element_add_51_1;
            }
        ],
        execute: function () {
            /**
             * Transaction for buying options.
             * @see "Section 13.9.2.4.4, OFX Spec"
             *
             * @author Jon Perlow
             */
            BuyOptionTransaction = /** @class */ (function (_super) {
                __extends(BuyOptionTransaction, _super);
                function BuyOptionTransaction() {
                    return _super.call(this, TransactionType_4.TransactionType.BUY_OPTION) || this;
                }
                /**
                 * Gets the type of option purchase (i.e. "BUYTOOPEN" or "BUYTOCLOSE"). This is a required field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @return the option buy type
                 */
                BuyOptionTransaction.prototype.getOptionBuyType = function () {
                    return this.optionBuyType;
                };
                /**
                 * Sets the type of option purchase (i.e. "BUYTOOPEN" or "BUYTOCLOSE"). This is a required field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @param optionBuyType the option buy type
                 */
                BuyOptionTransaction.prototype.setOptionBuyType = function (optionBuyType) {
                    this.optionBuyType = optionBuyType;
                };
                /**
                 * Gets the option buy type as one of the well-known types.
                 *
                 * @return the type of purchase or null if it's not known
                 */
                BuyOptionTransaction.prototype.getOptionBuyTypeEnum = function () {
                    return OptionBuyType_1.OptionBuyType_fromOfx(this.optionBuyType);
                };
                /**
                 * Gets the number of shares per contact. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @return the number of shares per contact
                 */
                BuyOptionTransaction.prototype.getSharesPerContract = function () {
                    return this.sharesPerContact;
                };
                /**
                 * Sets the number of shares per contact. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @param sharesPerContact the number of shares per contact
                 */
                BuyOptionTransaction.prototype.setSharesPerContract = function (sharesPerContact) {
                    this.sharesPerContact = sharesPerContact;
                };
                return BuyOptionTransaction;
            }(BaseBuyInvestmentTransaction_3.BaseBuyInvestmentTransaction));
            exports_201("BuyOptionTransaction", BuyOptionTransaction);
            Aggregate_Add_91.Aggregate_add(BuyOptionTransaction, "BUYOPT");
            Element_add_51.Element_add(BuyOptionTransaction, { name: "OPTBUYTYPE", required: true, order: 20, type: String, read: BuyOptionTransaction.prototype.getOptionBuyType, write: BuyOptionTransaction.prototype.setOptionBuyType });
            Element_add_51.Element_add(BuyOptionTransaction, { name: "SHPERCTRCT", required: true, order: 30, type: Number, read: BuyOptionTransaction.prototype.getSharesPerContract, write: BuyOptionTransaction.prototype.setSharesPerContract });
        }
    };
});
System.register("domain/data/investment/transactions/BuyOtherTransaction", ["domain/data/investment/transactions/TransactionType", "domain/data/investment/transactions/BaseBuyInvestmentTransaction", "meta/Aggregate_add"], function (exports_202, context_202) {
    "use strict";
    var TransactionType_5, BaseBuyInvestmentTransaction_4, Aggregate_Add_92, BuyOtherTransaction;
    var __moduleName = context_202 && context_202.id;
    return {
        setters: [
            function (TransactionType_5_1) {
                TransactionType_5 = TransactionType_5_1;
            },
            function (BaseBuyInvestmentTransaction_4_1) {
                BaseBuyInvestmentTransaction_4 = BaseBuyInvestmentTransaction_4_1;
            },
            function (Aggregate_Add_92_1) {
                Aggregate_Add_92 = Aggregate_Add_92_1;
            }
        ],
        execute: function () {
            /**
             * Transaction for buying other types of securities.
             * @see "Section 13.9.2.4.4, OFX Spec"
             *
             * @author Jon Perlow
             */
            BuyOtherTransaction = /** @class */ (function (_super) {
                __extends(BuyOtherTransaction, _super);
                function BuyOtherTransaction() {
                    return _super.call(this, TransactionType_5.TransactionType.BUY_OTHER) || this;
                }
                return BuyOtherTransaction;
            }(BaseBuyInvestmentTransaction_4.BaseBuyInvestmentTransaction));
            exports_202("BuyOtherTransaction", BuyOtherTransaction);
            Aggregate_Add_92.Aggregate_add(BuyOtherTransaction, "BUYOTHER");
        }
    };
});
System.register("domain/data/investment/transactions/BuyStockTransaction", ["domain/data/investment/transactions/TransactionType", "domain/data/investment/transactions/BaseBuyInvestmentTransaction", "domain/data/investment/transactions/BuyType", "meta/Aggregate_add", "meta/Element_add"], function (exports_203, context_203) {
    "use strict";
    var TransactionType_6, BaseBuyInvestmentTransaction_5, BuyType_2, Aggregate_Add_93, Element_add_52, BuyStockTransaction;
    var __moduleName = context_203 && context_203.id;
    return {
        setters: [
            function (TransactionType_6_1) {
                TransactionType_6 = TransactionType_6_1;
            },
            function (BaseBuyInvestmentTransaction_5_1) {
                BaseBuyInvestmentTransaction_5 = BaseBuyInvestmentTransaction_5_1;
            },
            function (BuyType_2_1) {
                BuyType_2 = BuyType_2_1;
            },
            function (Aggregate_Add_93_1) {
                Aggregate_Add_93 = Aggregate_Add_93_1;
            },
            function (Element_add_52_1) {
                Element_add_52 = Element_add_52_1;
            }
        ],
        execute: function () {
            /**
             * Transaction for buying stock.
             * @see "Section 13.9.2.4.4, OFX Spec"
             *
             * @author Jon Perlow
             */
            BuyStockTransaction = /** @class */ (function (_super) {
                __extends(BuyStockTransaction, _super);
                function BuyStockTransaction() {
                    return _super.call(this, TransactionType_6.TransactionType.BUY_STOCK) || this;
                }
                /**
                 * Gets the type of stock purchase (i.e. "BUY" or "BUYTOCOVER"). This is a required field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @return the buy type
                 */
                BuyStockTransaction.prototype.getBuyType = function () {
                    return this.buyType;
                };
                /**
                 * Sets the type of stock purchase (i.e. "BUY" or "BUYTOCOVER"). This is a required field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @param buyType the buy type
                 */
                BuyStockTransaction.prototype.setBuyType = function (buyType) {
                    this.buyType = buyType;
                };
                /**
                 * Gets the buy type as one of the well-known types.
                 *
                 * @return the type of purchase or null if it's not well known
                 */
                BuyStockTransaction.prototype.getBuyTypeEnum = function () {
                    return BuyType_2.BuyType_fromOfx(this.buyType);
                };
                return BuyStockTransaction;
            }(BaseBuyInvestmentTransaction_5.BaseBuyInvestmentTransaction));
            exports_203("BuyStockTransaction", BuyStockTransaction);
            Aggregate_Add_93.Aggregate_add(BuyStockTransaction, "BUYSTOCK");
            Element_add_52.Element_add(BuyStockTransaction, { name: "BUYTYPE", required: true, order: 20, type: String, read: BuyStockTransaction.prototype.getBuyType, write: BuyStockTransaction.prototype.setBuyType });
        }
    };
});
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("domain/data/investment/transactions/CloseOptionAction", [], function (exports_204, context_204) {
    "use strict";
    var CloseOptionAction;
    var __moduleName = context_204 && context_204.id;
    function CloseOptionAction_fromOfx(ofxVal) {
        if ("EXERCISE" === ofxVal) {
            return CloseOptionAction.EXERCISE;
        }
        else if ("ASSIGN" === ofxVal) {
            return CloseOptionAction.ASSIGN;
        }
        else if ("EXPIRE" === ofxVal) {
            return CloseOptionAction.EXPIRE;
        }
        else {
            return null;
        }
    }
    exports_204("CloseOptionAction_fromOfx", CloseOptionAction_fromOfx);
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2010 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
             * Type of action for closing a stock option.
             * @see "Section 13.9.2.4.2, OFX Spec"
             *
             * @author Jon Perlow
             */
            (function (CloseOptionAction) {
                CloseOptionAction[CloseOptionAction["EXERCISE"] = 0] = "EXERCISE";
                CloseOptionAction[CloseOptionAction["ASSIGN"] = 1] = "ASSIGN";
                CloseOptionAction[CloseOptionAction["EXPIRE"] = 2] = "EXPIRE";
            })(CloseOptionAction || (CloseOptionAction = {}));
            exports_204("CloseOptionAction", CloseOptionAction);
        }
    };
});
System.register("domain/data/investment/transactions/CloseOptionTransaction", ["domain/data/investment/transactions/TransactionType", "domain/data/investment/transactions/BaseOtherInvestmentTransaction", "domain/data/seclist/SecurityId", "domain/data/investment/transactions/CloseOptionAction", "domain/data/investment/accounts/SubAccountType", "meta/Aggregate_add", "meta/ChildAggregate_add", "meta/Element_add"], function (exports_205, context_205) {
    "use strict";
    var TransactionType_7, BaseOtherInvestmentTransaction_1, SecurityId_6, CloseOptionAction_1, SubAccountType_8, Aggregate_Add_94, ChildAggregate_add_72, Element_add_53, CloseOptionTransaction;
    var __moduleName = context_205 && context_205.id;
    return {
        setters: [
            function (TransactionType_7_1) {
                TransactionType_7 = TransactionType_7_1;
            },
            function (BaseOtherInvestmentTransaction_1_1) {
                BaseOtherInvestmentTransaction_1 = BaseOtherInvestmentTransaction_1_1;
            },
            function (SecurityId_6_1) {
                SecurityId_6 = SecurityId_6_1;
            },
            function (CloseOptionAction_1_1) {
                CloseOptionAction_1 = CloseOptionAction_1_1;
            },
            function (SubAccountType_8_1) {
                SubAccountType_8 = SubAccountType_8_1;
            },
            function (Aggregate_Add_94_1) {
                Aggregate_Add_94 = Aggregate_Add_94_1;
            },
            function (ChildAggregate_add_72_1) {
                ChildAggregate_add_72 = ChildAggregate_add_72_1;
            },
            function (Element_add_53_1) {
                Element_add_53 = Element_add_53_1;
            }
        ],
        execute: function () {
            /**
             * Transaction for closing an option position due to expiration, exercise, or assignment.
             * @see "Section 13.9.2.4.4, OFX Spec"
             *
             * @author Jon Perlow
             */
            CloseOptionTransaction = /** @class */ (function (_super) {
                __extends(CloseOptionTransaction, _super);
                function CloseOptionTransaction() {
                    return _super.call(this, TransactionType_7.TransactionType.CLOSE_OPTION) || this;
                }
                /**
                 * Gets the security id of the option.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @return the security id of the option
                 */
                CloseOptionTransaction.prototype.getSecurityId = function () {
                    return this.securityId;
                };
                /**
                 * Sets the security id of the option.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @param securityId the security id of the option
                 */
                CloseOptionTransaction.prototype.setSecurityId = function (securityId) {
                    this.securityId = securityId;
                };
                /**
                 * Gets the action being performed (i.e. "EXERCISE", "ASSIGN", "EXPIRE" This is a required field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @return the option action
                 */
                CloseOptionTransaction.prototype.getOptionAction = function () {
                    return this.optionAction;
                };
                /**
                 * Sets the action being performed (i.e. "EXERCISE", "ASSIGN", "EXPIRE" This is a required field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @param optionAction the option action
                 */
                CloseOptionTransaction.prototype.setOptionAction = function (optionAction) {
                    this.optionAction = optionAction;
                };
                /**
                 * Gets the action as one of the well-known types.
                 *
                 * @return the type of close or null if it's not a well-known type
                 */
                CloseOptionTransaction.prototype.getOptionActionEnum = function () {
                    return CloseOptionAction_1.CloseOptionAction_fromOfx(this.getOptionAction());
                };
                /**
                 * Gets the number of units of the option that were closed. This is a required field according
                 * to the OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @return the number of units closed
                 */
                CloseOptionTransaction.prototype.getUnits = function () {
                    return this.units;
                };
                /**
                 * Sets the number of units of the option that were closed. This is a required field according
                 * to the OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @param units the number of units closed
                 */
                CloseOptionTransaction.prototype.setUnits = function (units) {
                    this.units = units;
                };
                /**
                 * Gets the number of shares per contact. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @return the number of shares per contact
                 */
                CloseOptionTransaction.prototype.getSharesPerContact = function () {
                    return this.sharesPerContact;
                };
                /**
                 * Sets the number of shares per contact. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @param sharesPerContact the number of shares per contact
                 */
                CloseOptionTransaction.prototype.setSharesPerContact = function (sharesPerContact) {
                    this.sharesPerContact = sharesPerContact;
                };
                /**
                 * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @return the sub account type
                 */
                CloseOptionTransaction.prototype.getSubAccountSecurity = function () {
                    return this.subAccountSecurity;
                };
                /**
                 * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @param subAccountSecurity the sub account type
                 */
                CloseOptionTransaction.prototype.setSubAccountSecurity = function (subAccountSecurity) {
                    this.subAccountSecurity = subAccountSecurity;
                };
                /**
                 * Gets the result of getSubAccountFund as one of the well-known types.
                 *
                 * @return the type of null if it wasn't one of the well known types
                 */
                CloseOptionTransaction.prototype.getSubAccountSecurityEnum = function () {
                    return SubAccountType_8.SubAccountType_fromOfx(this.getSubAccountSecurity());
                };
                /**
                 * Gets the related transaction id for the related buy or sell corresponding to the
                 * EXERCISE or ASSIGN action. This is a required field according to the OFX spec if the
                 * action or EXERCISE or ASSIGN.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @return the related transaction id
                 */
                CloseOptionTransaction.prototype.getRelatedTransactionId = function () {
                    return this.relatedTransactionId;
                };
                /**
                 * Sets the related transaction id for the related buy or sell corresponding to the
                 * EXERCISE or ASSIGN action. This is a required field according to the OFX spec if the
                 * action or EXERCISE or ASSIGN.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @param relatedTransactionId the related transaction id
                 */
                CloseOptionTransaction.prototype.setRelatedTransactionId = function (relatedTransactionId) {
                    this.relatedTransactionId = relatedTransactionId;
                };
                /**
                 * Gets the gain related to the transaction. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @return the gain related to the transaction
                 */
                CloseOptionTransaction.prototype.getGain = function () {
                    return this.gain;
                };
                /**
                 * Sets the gain related to the transaction. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @param gain the gain related to the transaction
                 */
                CloseOptionTransaction.prototype.setGain = function (gain) {
                    this.gain = gain;
                };
                return CloseOptionTransaction;
            }(BaseOtherInvestmentTransaction_1.BaseOtherInvestmentTransaction));
            exports_205("CloseOptionTransaction", CloseOptionTransaction);
            Aggregate_Add_94.Aggregate_add(CloseOptionTransaction, "CLOSUREOPT");
            ChildAggregate_add_72.ChildAggregate_add(CloseOptionTransaction, { order: 20, type: SecurityId_6.SecurityId, read: CloseOptionTransaction.prototype.getSecurityId, write: CloseOptionTransaction.prototype.setSecurityId });
            Element_add_53.Element_add(CloseOptionTransaction, { name: "OPTACTION", required: true, order: 30, type: String, read: CloseOptionTransaction.prototype.getOptionAction, write: CloseOptionTransaction.prototype.setOptionAction });
            Element_add_53.Element_add(CloseOptionTransaction, { name: "UNITS", required: true, order: 40, type: Number, read: CloseOptionTransaction.prototype.getUnits, write: CloseOptionTransaction.prototype.setUnits });
            Element_add_53.Element_add(CloseOptionTransaction, { name: "SHPERCTRCT", required: true, order: 50, type: Number, read: CloseOptionTransaction.prototype.getSharesPerContact, write: CloseOptionTransaction.prototype.setSharesPerContact });
            Element_add_53.Element_add(CloseOptionTransaction, { name: "SUBACCTSEC", required: true, order: 60, type: String, read: CloseOptionTransaction.prototype.getSubAccountSecurity, write: CloseOptionTransaction.prototype.setSubAccountSecurity });
            Element_add_53.Element_add(CloseOptionTransaction, { name: "RELFITID", order: 70, type: String, read: CloseOptionTransaction.prototype.getRelatedTransactionId, write: CloseOptionTransaction.prototype.setRelatedTransactionId });
            Element_add_53.Element_add(CloseOptionTransaction, { name: "GAIN", order: 80, type: Number, read: CloseOptionTransaction.prototype.getGain, write: CloseOptionTransaction.prototype.setGain });
        }
    };
});
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("domain/data/investment/transactions/IncomeType", [], function (exports_206, context_206) {
    "use strict";
    var IncomeType;
    var __moduleName = context_206 && context_206.id;
    function IncomeType_fromOfx(ofxVal) {
        if ("CGLONG" === ofxVal) {
            return IncomeType.LONG_TERM_CAP_GAINS;
        }
        else if ("CGSHORT" === ofxVal) {
            return IncomeType.SHORT_TERM_CAP_GAINS;
        }
        else if ("DIV" === ofxVal) {
            return IncomeType.DIVIDEND;
        }
        else if ("INTEREST" === ofxVal) {
            return IncomeType.INTEREST;
        }
        else if ("MISC" === ofxVal) {
            return IncomeType.MISC;
        }
        else {
            return null;
        }
    }
    exports_206("IncomeType_fromOfx", IncomeType_fromOfx);
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2010 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
             * Type of income.
             * @see "Section 13.9.2.4.2, OFX Spec"
             *
             * @author Jon Perlow
             */
            (function (IncomeType) {
                IncomeType[IncomeType["LONG_TERM_CAP_GAINS"] = 0] = "LONG_TERM_CAP_GAINS";
                IncomeType[IncomeType["SHORT_TERM_CAP_GAINS"] = 1] = "SHORT_TERM_CAP_GAINS";
                IncomeType[IncomeType["DIVIDEND"] = 2] = "DIVIDEND";
                IncomeType[IncomeType["INTEREST"] = 3] = "INTEREST";
                IncomeType[IncomeType["MISC"] = 4] = "MISC";
            })(IncomeType || (IncomeType = {}));
            exports_206("IncomeType", IncomeType);
        }
    };
});
System.register("domain/data/investment/transactions/IncomeTransaction", ["domain/data/investment/transactions/BaseOtherInvestmentTransaction", "domain/data/investment/transactions/TransactionType", "domain/data/seclist/SecurityId", "domain/data/investment/transactions/OriginalCurrency", "domain/data/investment/transactions/IncomeType", "domain/data/investment/accounts/SubAccountType", "domain/data/investment/positions/Inv401KSource", "meta/Aggregate_add", "meta/ChildAggregate_add", "meta/Element_add"], function (exports_207, context_207) {
    "use strict";
    var BaseOtherInvestmentTransaction_2, TransactionType_8, SecurityId_7, OriginalCurrency_3, IncomeType_1, SubAccountType_9, Inv401KSource_5, Aggregate_Add_95, ChildAggregate_add_73, Element_add_54, IncomeTransaction;
    var __moduleName = context_207 && context_207.id;
    return {
        setters: [
            function (BaseOtherInvestmentTransaction_2_1) {
                BaseOtherInvestmentTransaction_2 = BaseOtherInvestmentTransaction_2_1;
            },
            function (TransactionType_8_1) {
                TransactionType_8 = TransactionType_8_1;
            },
            function (SecurityId_7_1) {
                SecurityId_7 = SecurityId_7_1;
            },
            function (OriginalCurrency_3_1) {
                OriginalCurrency_3 = OriginalCurrency_3_1;
            },
            function (IncomeType_1_1) {
                IncomeType_1 = IncomeType_1_1;
            },
            function (SubAccountType_9_1) {
                SubAccountType_9 = SubAccountType_9_1;
            },
            function (Inv401KSource_5_1) {
                Inv401KSource_5 = Inv401KSource_5_1;
            },
            function (Aggregate_Add_95_1) {
                Aggregate_Add_95 = Aggregate_Add_95_1;
            },
            function (ChildAggregate_add_73_1) {
                ChildAggregate_add_73 = ChildAggregate_add_73_1;
            },
            function (Element_add_54_1) {
                Element_add_54 = Element_add_54_1;
            }
        ],
        execute: function () {
            /**
             * Transaction for investment income that is realized as cash into the investment account.
             * @see "Section 13.9.2.4.4, OFX Spec"
             *
             * @author Jon Perlow
             */
            IncomeTransaction = /** @class */ (function (_super) {
                __extends(IncomeTransaction, _super);
                function IncomeTransaction() {
                    return _super.call(this, TransactionType_8.TransactionType.INCOME) || this;
                }
                /**
                 * Gets the id of the security that the income was for. This is a required field according to the
                 * OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @return the security id of the security that the income was for
                 */
                IncomeTransaction.prototype.getSecurityId = function () {
                    return this.securityId;
                };
                /**
                 * Sets the id of the security that the income was for. This is a required field according to the
                 * OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @param securityId the security id of the security that the income was for
                 */
                IncomeTransaction.prototype.setSecurityId = function (securityId) {
                    this.securityId = securityId;
                };
                /**
                 * Gets the type of income. One of "CGLONG" (long term capital gains), "CGSHORT" (short term
                 * capital gains), "DIV" (dividend), INTEREST, or MISC>
                 * @see "Section 13.9.2.4.4, OFX Spec" This is a required field according to the OFX spec.
                 *
                 * @return the type of income
                 */
                IncomeTransaction.prototype.getIncomeType = function () {
                    return this.incomeType;
                };
                /**
                 * Sets the type of income. One of "CGLONG" (long term capital gains), "CGSHORT" (short term
                 * capital gains), "DIV" (dividend), INTEREST, or MISC>
                 * @see "Section 13.9.2.4.4, OFX Spec" This is a required field according to the OFX spec.
                 *
                 * @param incomeType the type of income
                 */
                IncomeTransaction.prototype.setIncomeType = function (incomeType) {
                    this.incomeType = incomeType;
                };
                /**
                 * Gets the income type as one of the well-known types.
                 *
                 * @return the income type or null if it's not well known
                 */
                IncomeTransaction.prototype.getIncomeTypeEnum = function () {
                    return IncomeType_1.IncomeType_fromOfx(this.getIncomeType());
                };
                /**
                 * Gets the total income received.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @return the total
                 */
                IncomeTransaction.prototype.getTotal = function () {
                    return this.total;
                };
                /**
                 * Sets the total income received.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @param total the total
                 */
                IncomeTransaction.prototype.setTotal = function (total) {
                    this.total = total;
                };
                /**
                 * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the sub account type
                 */
                IncomeTransaction.prototype.getSubAccountSecurity = function () {
                    return this.subAccountSecurity;
                };
                /**
                 * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param subAcctSec the sub account type
                 */
                IncomeTransaction.prototype.setSubAccountSecurity = function (subAcctSec) {
                    this.subAccountSecurity = subAcctSec;
                };
                /**
                 * Gets the result of getSubAccountSecurity as one of the well-known types.
                 *
                 * @return the type of null if it wasn't one of the well known types.
                 */
                IncomeTransaction.prototype.getSubAccountSecurityEnum = function () {
                    return SubAccountType_9.SubAccountType_fromOfx(this.getSubAccountSecurity());
                };
                /**
                 * Gets the sub account type that the security is from (e.g. CASH, MARGIN, SHORT, OTHER).
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the sub account fund for the transaction
                 */
                IncomeTransaction.prototype.getSubAccountFund = function () {
                    return this.subAccountFund;
                };
                /**
                 * Sets the sub account type that the security is from (e.g. CASH, MARGIN, SHORT, OTHER).
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param subAcctFund the sub account fund for the transaction
                 */
                IncomeTransaction.prototype.setSubAccountFund = function (subAcctFund) {
                    this.subAccountFund = subAcctFund;
                };
                /**
                 * Gets the result of getSubAccountFund as one of the well-known types.
                 *
                 * @return the type of null if it wasn't one of the well known types
                 */
                IncomeTransaction.prototype.getSubAccountFundEnum = function () {
                    return SubAccountType_9.SubAccountType_fromOfx(this.getSubAccountFund());
                };
                /**
                 * Gets whether the income was tax exempt. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return whether the transaction was tax exempt
                 */
                IncomeTransaction.prototype.getTaxExempt = function () {
                    return this.taxExempt;
                };
                /**
                 * Sets whether the income was tax exempt. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param taxExempt whether the transaction was tax exempt
                 */
                IncomeTransaction.prototype.setTaxExempt = function (taxExempt) {
                    this.taxExempt = taxExempt;
                };
                /**
                 * Gets the withholding for the income. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the withholding
                 */
                IncomeTransaction.prototype.getWithholding = function () {
                    return this.withholding;
                };
                /**
                 * Sets the withholding for the income. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param withholding the withholding
                 */
                IncomeTransaction.prototype.setWithholding = function (withholding) {
                    this.withholding = withholding;
                };
                /**
                 * Gets the currency code for the transaction. Only one of currency code or original currency
                 * info should be set according to the OFX spec. If neither are set, means the default currency.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the currency code for the transaction
                 */
                IncomeTransaction.prototype.getCurrencyCode = function () {
                    return this.currencyCode;
                };
                /**
                 * Sets the currency code for the transaction. Only one of currency code or original currency
                 * info should be set according to the OFX spec. If neither are set, means the default currency.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param currencyCode the currency code for the transaction
                 */
                IncomeTransaction.prototype.setCurrencyCode = function (currencyCode) {
                    this.currencyCode = currencyCode;
                    this.originalCurrencyInfo = null;
                };
                /**
                 * Gets the original currency info for the transaction.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the currency info for the transaction
                 */
                IncomeTransaction.prototype.getOriginalCurrencyInfo = function () {
                    return this.originalCurrencyInfo;
                };
                /**
                 * Sets the original currency info for the transaction.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param originalCurrencyInfo the currency info for the transaction
                 */
                IncomeTransaction.prototype.setOriginalCurrencyInfo = function (originalCurrencyInfo) {
                    this.originalCurrencyInfo = originalCurrencyInfo;
                    this.currencyCode = null;
                };
                /**
                 * Gets the 401K source for the sale. Should be one of "PRETAX", "AFTERTAX", "MATCH",
                 * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the state withholding
                 */
                IncomeTransaction.prototype.get401kSource = function () {
                    return this.inv401kSource;
                };
                /**
                 * Sets the 401K source for the sale. Should be one of "PRETAX", "AFTERTAX", "MATCH",
                 * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param inv401kSource the state withholding
                 */
                IncomeTransaction.prototype.set401kSource = function (inv401kSource) {
                    this.inv401kSource = inv401kSource;
                };
                /**
                 * Gets the 401(k) source as one of the well-known types.
                 *
                 * @return the type of close or null if it's not well known.
                 */
                IncomeTransaction.prototype.get401kSourceEnum = function () {
                    return Inv401KSource_5.Inv401KSource_fromOfx(this.get401kSource());
                };
                return IncomeTransaction;
            }(BaseOtherInvestmentTransaction_2.BaseOtherInvestmentTransaction));
            exports_207("IncomeTransaction", IncomeTransaction);
            Aggregate_Add_95.Aggregate_add(IncomeTransaction, "INCOME");
            ChildAggregate_add_73.ChildAggregate_add(IncomeTransaction, { required: true, order: 20, type: SecurityId_7.SecurityId, read: IncomeTransaction.prototype.getSecurityId, write: IncomeTransaction.prototype.setSecurityId });
            Element_add_54.Element_add(IncomeTransaction, { name: "INCOMETYPE", required: true, order: 30, type: String, read: IncomeTransaction.prototype.getIncomeType, write: IncomeTransaction.prototype.setIncomeType });
            Element_add_54.Element_add(IncomeTransaction, { name: "TOTAL", required: true, order: 40, type: Number, read: IncomeTransaction.prototype.getTotal, write: IncomeTransaction.prototype.setTotal });
            Element_add_54.Element_add(IncomeTransaction, { name: "SUBACCTSEC", order: 50, type: String, read: IncomeTransaction.prototype.getSubAccountSecurity, write: IncomeTransaction.prototype.setSubAccountSecurity });
            Element_add_54.Element_add(IncomeTransaction, { name: "SUBACCTFUND", order: 60, type: String, read: IncomeTransaction.prototype.getSubAccountFund, write: IncomeTransaction.prototype.setSubAccountFund });
            Element_add_54.Element_add(IncomeTransaction, { name: "TAXEXEMPT", order: 70, type: Boolean, read: IncomeTransaction.prototype.getTaxExempt, write: IncomeTransaction.prototype.setTaxExempt });
            Element_add_54.Element_add(IncomeTransaction, { name: "WITHHOLDING", order: 80, type: Number, read: IncomeTransaction.prototype.getWithholding, write: IncomeTransaction.prototype.setWithholding });
            Element_add_54.Element_add(IncomeTransaction, { name: "CURRENCY", order: 90, type: String, read: IncomeTransaction.prototype.getCurrencyCode, write: IncomeTransaction.prototype.setCurrencyCode });
            ChildAggregate_add_73.ChildAggregate_add(IncomeTransaction, { order: 120, type: OriginalCurrency_3.OriginalCurrency, read: IncomeTransaction.prototype.getOriginalCurrencyInfo, write: IncomeTransaction.prototype.setOriginalCurrencyInfo });
            Element_add_54.Element_add(IncomeTransaction, { name: "INV401KSOURCE", order: 110, type: String, read: IncomeTransaction.prototype.get401kSource, write: IncomeTransaction.prototype.set401kSource });
        }
    };
});
System.register("domain/data/investment/transactions/InvestmentExpenseTransaction", ["meta/Aggregate_add", "meta/Element_add", "domain/data/investment/transactions/BaseOtherInvestmentTransaction", "domain/data/seclist/SecurityId", "domain/data/investment/transactions/OriginalCurrency", "domain/data/investment/transactions/TransactionType", "domain/data/investment/accounts/SubAccountType", "domain/data/investment/positions/Inv401KSource", "meta/ChildAggregate_add"], function (exports_208, context_208) {
    "use strict";
    var Aggregate_Add_96, Element_add_55, BaseOtherInvestmentTransaction_3, SecurityId_8, OriginalCurrency_4, TransactionType_9, SubAccountType_10, Inv401KSource_6, ChildAggregate_add_74, InvestmentExpenseTransaction;
    var __moduleName = context_208 && context_208.id;
    return {
        setters: [
            function (Aggregate_Add_96_1) {
                Aggregate_Add_96 = Aggregate_Add_96_1;
            },
            function (Element_add_55_1) {
                Element_add_55 = Element_add_55_1;
            },
            function (BaseOtherInvestmentTransaction_3_1) {
                BaseOtherInvestmentTransaction_3 = BaseOtherInvestmentTransaction_3_1;
            },
            function (SecurityId_8_1) {
                SecurityId_8 = SecurityId_8_1;
            },
            function (OriginalCurrency_4_1) {
                OriginalCurrency_4 = OriginalCurrency_4_1;
            },
            function (TransactionType_9_1) {
                TransactionType_9 = TransactionType_9_1;
            },
            function (SubAccountType_10_1) {
                SubAccountType_10 = SubAccountType_10_1;
            },
            function (Inv401KSource_6_1) {
                Inv401KSource_6 = Inv401KSource_6_1;
            },
            function (ChildAggregate_add_74_1) {
                ChildAggregate_add_74 = ChildAggregate_add_74_1;
            }
        ],
        execute: function () {
            /**
             * Transaction for an investment expense
             * @see "Section 13.9.2.4.4, OFX Spec"
             *
             * @author Jon Perlow
             */
            InvestmentExpenseTransaction = /** @class */ (function (_super) {
                __extends(InvestmentExpenseTransaction, _super);
                function InvestmentExpenseTransaction() {
                    return _super.call(this, TransactionType_9.TransactionType.INVESTMENT_EXPENSE) || this;
                }
                /**
                 * Gets the id of the security for the expense. This is a required field according to the OFX
                 * spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the security id of the security for the expsense
                 */
                InvestmentExpenseTransaction.prototype.getSecurityId = function () {
                    return this.securityId;
                };
                /**
                 * Sets the id of the security for the expense. This is a required field according to the OFX
                 * spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param securityId the security id of the security for the expsense
                 */
                InvestmentExpenseTransaction.prototype.setSecurityId = function (securityId) {
                    this.securityId = securityId;
                };
                /**
                 * Gets the total for the expense.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the total
                 */
                InvestmentExpenseTransaction.prototype.getTotal = function () {
                    return this.total;
                };
                /**
                 * Sets the total for the expense.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param total the total
                 */
                InvestmentExpenseTransaction.prototype.setTotal = function (total) {
                    this.total = total;
                };
                /**
                 * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the sub account type
                 */
                InvestmentExpenseTransaction.prototype.getSubAccountSecurity = function () {
                    return this.subAccountSecurity;
                };
                /**
                 * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param subAccountSecurity the sub account type
                 */
                InvestmentExpenseTransaction.prototype.setSubAccountSecurity = function (subAccountSecurity) {
                    this.subAccountSecurity = subAccountSecurity;
                };
                /**
                 * Gets the result of getSubAccountSecurity as one of the well-known types.
                 *
                 * @return the type of null if it wasn't one of the well known types.
                 */
                InvestmentExpenseTransaction.prototype.getSubAccountSecurityEnum = function () {
                    return SubAccountType_10.SubAccountType_fromOfx(this.getSubAccountSecurity());
                };
                /**
                 * Gets the sub account type for the fund. (e.g. CASH, MARGIN, SHORT, OTHER).
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the sub account fund
                 */
                InvestmentExpenseTransaction.prototype.getSubAccountFund = function () {
                    return this.subAccountFund;
                };
                /**
                 * Sets the sub account type for the fund. (e.g. CASH, MARGIN, SHORT, OTHER).
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param subAccountFund the sub account fund
                 */
                InvestmentExpenseTransaction.prototype.setSubAccountFund = function (subAccountFund) {
                    this.subAccountFund = subAccountFund;
                };
                /**
                 * Gets the result of getSubAccountFund as one of the well-known types.
                 *
                 * @return the type of null if it wasn't one of the well known types
                 */
                InvestmentExpenseTransaction.prototype.getSubAccountFundEnum = function () {
                    return SubAccountType_10.SubAccountType_fromOfx(this.getSubAccountFund());
                };
                /**
                 * Gets the currency code for the transaction. Only one of currency code or original currency
                 * code should be set according to the OFX spec. If neither are set, means the default currency.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the currency code for the transaction
                 */
                InvestmentExpenseTransaction.prototype.getCurrencyCode = function () {
                    return this.currencyCode;
                };
                /**
                 * sets the currency code for the transaction. Only one of currency code or original currency
                 * code should be set according to the OFX spec. If neither are set, means the default currency.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param currencyCode the currency code for the transaction
                 */
                InvestmentExpenseTransaction.prototype.setCurrencyCode = function (currencyCode) {
                    this.currencyCode = currencyCode;
                    this.originalCurrencyInfo = null;
                };
                /**
                 * Gets the original currency info for the transaction.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the original currency info for the transaction
                 */
                InvestmentExpenseTransaction.prototype.getOriginalCurrencyInfo = function () {
                    return this.originalCurrencyInfo;
                };
                /**
                 * Sets the original currency info for the transaction.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param originalCurrencyInfo the original currency info for the transaction
                 */
                InvestmentExpenseTransaction.prototype.setOriginalCurrencyInfo = function (originalCurrencyInfo) {
                    this.originalCurrencyInfo = originalCurrencyInfo;
                    this.currencyCode = null;
                };
                /**
                 * Gets the 401K source for the transaction. Should be one of "PRETAX", "AFTERTAX", "MATCH",
                 * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the 401k source
                 */
                InvestmentExpenseTransaction.prototype.get401kSource = function () {
                    return this.inv401kSource;
                };
                /**
                 * Sets the 401K source for the transaction. Should be one of "PRETAX", "AFTERTAX", "MATCH",
                 * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param inv401kSource the 401k source
                 */
                InvestmentExpenseTransaction.prototype.set401kSource = function (inv401kSource) {
                    this.inv401kSource = inv401kSource;
                };
                /**
                 * Gets the 401k source as one of the well-known types.
                 *
                 * @return the 401k source or null if its not one of the well-known types
                 */
                InvestmentExpenseTransaction.prototype.get401kSourceEnum = function () {
                    return Inv401KSource_6.Inv401KSource_fromOfx(this.get401kSource());
                };
                return InvestmentExpenseTransaction;
            }(BaseOtherInvestmentTransaction_3.BaseOtherInvestmentTransaction));
            exports_208("InvestmentExpenseTransaction", InvestmentExpenseTransaction);
            Aggregate_Add_96.Aggregate_add(InvestmentExpenseTransaction, "INVEXPENSE");
            ChildAggregate_add_74.ChildAggregate_add(InvestmentExpenseTransaction, { required: true, order: 20, type: SecurityId_8.SecurityId, read: InvestmentExpenseTransaction.prototype.getSecurityId, write: InvestmentExpenseTransaction.prototype.setSecurityId });
            Element_add_55.Element_add(InvestmentExpenseTransaction, { name: "TOTAL", required: true, order: 30, type: Number, read: InvestmentExpenseTransaction.prototype.getTotal, write: InvestmentExpenseTransaction.prototype.setTotal });
            Element_add_55.Element_add(InvestmentExpenseTransaction, { name: "SUBACCTSEC", order: 40, type: String, read: InvestmentExpenseTransaction.prototype.getSubAccountSecurity, write: InvestmentExpenseTransaction.prototype.setSubAccountSecurity });
            Element_add_55.Element_add(InvestmentExpenseTransaction, { name: "SUBACCTFUND", order: 50, type: String, read: InvestmentExpenseTransaction.prototype.getSubAccountFund, write: InvestmentExpenseTransaction.prototype.setSubAccountFund });
            Element_add_55.Element_add(InvestmentExpenseTransaction, { name: "CURRENCY", order: 60, type: String, read: InvestmentExpenseTransaction.prototype.getCurrencyCode, write: InvestmentExpenseTransaction.prototype.setCurrencyCode });
            Element_add_55.Element_add(InvestmentExpenseTransaction, { name: "ORIGCURRENCY", order: 70, type: OriginalCurrency_4.OriginalCurrency, read: InvestmentExpenseTransaction.prototype.getOriginalCurrencyInfo, write: InvestmentExpenseTransaction.prototype.setOriginalCurrencyInfo });
            Element_add_55.Element_add(InvestmentExpenseTransaction, { name: "INV401KSOURCE", order: 180, type: String, read: InvestmentExpenseTransaction.prototype.get401kSource, write: InvestmentExpenseTransaction.prototype.set401kSource });
        }
    };
});
System.register("domain/data/investment/transactions/JournalFundTransaction", ["domain/data/investment/transactions/TransactionType", "domain/data/investment/transactions/BaseOtherInvestmentTransaction", "domain/data/investment/accounts/SubAccountType", "meta/Aggregate_add", "meta/Element_add"], function (exports_209, context_209) {
    "use strict";
    var TransactionType_10, BaseOtherInvestmentTransaction_4, SubAccountType_11, Aggregate_Add_97, Element_add_56, JournalFundTransaction;
    var __moduleName = context_209 && context_209.id;
    return {
        setters: [
            function (TransactionType_10_1) {
                TransactionType_10 = TransactionType_10_1;
            },
            function (BaseOtherInvestmentTransaction_4_1) {
                BaseOtherInvestmentTransaction_4 = BaseOtherInvestmentTransaction_4_1;
            },
            function (SubAccountType_11_1) {
                SubAccountType_11 = SubAccountType_11_1;
            },
            function (Aggregate_Add_97_1) {
                Aggregate_Add_97 = Aggregate_Add_97_1;
            },
            function (Element_add_56_1) {
                Element_add_56 = Element_add_56_1;
            }
        ],
        execute: function () {
            /**
             * Transaction for journal fund transactions between sub-accounts within the same investment
             * account.
             * @see "Section 13.9.2.4.4, OFX Spec"
             *
             * @author Jon Perlow
             */
            JournalFundTransaction = /** @class */ (function (_super) {
                __extends(JournalFundTransaction, _super);
                function JournalFundTransaction() {
                    return _super.call(this, TransactionType_10.TransactionType.JOURNAL_FUND) || this;
                }
                /**
                 * Gets the sub account type the transer is from (e.g. CASH, MARGIN, SHORT, OTHER).
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @return the sub account type
                 */
                JournalFundTransaction.prototype.getFromSubAccountFund = function () {
                    return this.subAccountFrom;
                };
                /**
                 * Sets the sub account type the transer is from (e.g. CASH, MARGIN, SHORT, OTHER).
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @param subAccountFrom the sub account type
                 */
                JournalFundTransaction.prototype.setFromSubAccountFund = function (subAccountFrom) {
                    this.subAccountFrom = subAccountFrom;
                };
                /**
                 * Gets the result of getFromSubAccountFund as one of the well-known types.
                 *
                 * @return the type of null if it wasn't one of the well known types.
                 */
                JournalFundTransaction.prototype.getFromSubAccountFundEnum = function () {
                    return SubAccountType_11.SubAccountType_fromOfx(this.getFromSubAccountFund());
                };
                /**
                 * Gets the sub account type that the transfer is to (e.g. CASH, MARGIN, SHORT, OTHER).
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @return the sub account fund
                 */
                JournalFundTransaction.prototype.getToSubAccountFund = function () {
                    return this.subAccountTo;
                };
                /**
                 * Sets the sub account type that the transfer is to (e.g. CASH, MARGIN, SHORT, OTHER).
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @param subAccountTo the sub account fund
                 */
                JournalFundTransaction.prototype.setToSubAccountFund = function (subAccountTo) {
                    this.subAccountTo = subAccountTo;
                };
                /**
                 * Gets the result of getToSubAccountFund as one of the well-known types.
                 *
                 * @return the type of null if it wasn't one of the well known types.
                 */
                JournalFundTransaction.prototype.getToSubAccountFundEnum = function () {
                    return SubAccountType_11.SubAccountType_fromOfx(this.getToSubAccountFund());
                };
                /**
                 * Gets the total for the transaction.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @return the total
                 */
                JournalFundTransaction.prototype.getTotal = function () {
                    return this.total;
                };
                /**
                 * Sets the total for the transaction.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @param total the total
                 */
                JournalFundTransaction.prototype.setTotal = function (total) {
                    this.total = total;
                };
                return JournalFundTransaction;
            }(BaseOtherInvestmentTransaction_4.BaseOtherInvestmentTransaction));
            exports_209("JournalFundTransaction", JournalFundTransaction);
            Aggregate_Add_97.Aggregate_add(JournalFundTransaction, "JRNLFUND");
            Element_add_56.Element_add(JournalFundTransaction, { name: "SUBACCTFROM", order: 20, type: String, read: JournalFundTransaction.prototype.getFromSubAccountFund, write: JournalFundTransaction.prototype.setFromSubAccountFund });
            Element_add_56.Element_add(JournalFundTransaction, { name: "SUBACCTTO", order: 30, type: String, read: JournalFundTransaction.prototype.getToSubAccountFund, write: JournalFundTransaction.prototype.setToSubAccountFund });
            Element_add_56.Element_add(JournalFundTransaction, { name: "TOTAL", order: 40, type: Number, read: JournalFundTransaction.prototype.getTotal, write: JournalFundTransaction.prototype.setTotal });
        }
    };
});
System.register("domain/data/investment/transactions/JournalSecurityTransaction", ["domain/data/investment/transactions/TransactionType", "domain/data/investment/transactions/BaseOtherInvestmentTransaction", "domain/data/seclist/SecurityId", "domain/data/investment/accounts/SubAccountType", "meta/Aggregate_add", "meta/ChildAggregate_add", "meta/Element_add"], function (exports_210, context_210) {
    "use strict";
    var TransactionType_11, BaseOtherInvestmentTransaction_5, SecurityId_9, SubAccountType_12, Aggregate_Add_98, ChildAggregate_add_75, Element_add_57, JournalSecurityTransaction;
    var __moduleName = context_210 && context_210.id;
    return {
        setters: [
            function (TransactionType_11_1) {
                TransactionType_11 = TransactionType_11_1;
            },
            function (BaseOtherInvestmentTransaction_5_1) {
                BaseOtherInvestmentTransaction_5 = BaseOtherInvestmentTransaction_5_1;
            },
            function (SecurityId_9_1) {
                SecurityId_9 = SecurityId_9_1;
            },
            function (SubAccountType_12_1) {
                SubAccountType_12 = SubAccountType_12_1;
            },
            function (Aggregate_Add_98_1) {
                Aggregate_Add_98 = Aggregate_Add_98_1;
            },
            function (ChildAggregate_add_75_1) {
                ChildAggregate_add_75 = ChildAggregate_add_75_1;
            },
            function (Element_add_57_1) {
                Element_add_57 = Element_add_57_1;
            }
        ],
        execute: function () {
            /**
             * Transaction for journal security transactions between sub-accounts within the same investment
             * account.
             * @see "Section 13.9.2.4.4, OFX Spec"
             *
             * @author Jon Perlow
             */
            JournalSecurityTransaction = /** @class */ (function (_super) {
                __extends(JournalSecurityTransaction, _super);
                function JournalSecurityTransaction() {
                    return _super.call(this, TransactionType_11.TransactionType.JOURNAL_SECURITY) || this;
                }
                /**
                 * Gets the id of the security that was transferred. This is a required field according to the OFX
                 * spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the security id of the security that was bought
                 */
                JournalSecurityTransaction.prototype.getSecurityId = function () {
                    return this.securityId;
                };
                /**
                 * Sets the id of the security that was transferred. This is a required field according to the OFX
                 * spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param securityId the security id of the security that was bought
                 */
                JournalSecurityTransaction.prototype.setSecurityId = function (securityId) {
                    this.securityId = securityId;
                };
                /**
                 * Gets the sub account type the transer is from (e.g. CASH, MARGIN, SHORT, OTHER).
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @return the sub account type
                 */
                JournalSecurityTransaction.prototype.getFromSubAccountFund = function () {
                    return this.subAccountFrom;
                };
                /**
                 * Sets the sub account type the transer is from (e.g. CASH, MARGIN, SHORT, OTHER).
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @param subAccountFrom the sub account type
                 */
                JournalSecurityTransaction.prototype.setFromSubAccountFund = function (subAccountFrom) {
                    this.subAccountFrom = subAccountFrom;
                };
                /**
                 * Gets the result of getFromSubAccountFund as one of the well-known types.
                 *
                 * @return the type of null if it wasn't one of the well known types.
                 */
                JournalSecurityTransaction.prototype.getFromSubAccountFundEnum = function () {
                    return SubAccountType_12.SubAccountType_fromOfx(this.getFromSubAccountFund());
                };
                /**
                 * Gets the sub account type that the transfer is to (e.g. CASH, MARGIN, SHORT, OTHER).
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @return the sub account fund
                 */
                JournalSecurityTransaction.prototype.getToSubAccountFund = function () {
                    return this.subAccountTo;
                };
                /**
                 * sets the sub account type that the transfer is to (e.g. CASH, MARGIN, SHORT, OTHER).
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @param subAccountTo the sub account fund
                 */
                JournalSecurityTransaction.prototype.setToSubAccountFund = function (subAccountTo) {
                    this.subAccountTo = subAccountTo;
                };
                /**
                 * Gets the result of getToSubAccountFund as one of the well-known types.
                 *
                 * @return the type of null if it wasn't one of the well known types.
                 */
                JournalSecurityTransaction.prototype.getToSubAccountFundEnum = function () {
                    return SubAccountType_12.SubAccountType_fromOfx(this.getToSubAccountFund());
                };
                /**
                 * Gets the total for the transaction.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @return the total
                 */
                JournalSecurityTransaction.prototype.getTotal = function () {
                    return this.total;
                };
                /**
                 * Sets the total for the transaction.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @param total the total
                 */
                JournalSecurityTransaction.prototype.setTotal = function (total) {
                    this.total = total;
                };
                return JournalSecurityTransaction;
            }(BaseOtherInvestmentTransaction_5.BaseOtherInvestmentTransaction));
            exports_210("JournalSecurityTransaction", JournalSecurityTransaction);
            Aggregate_Add_98.Aggregate_add(JournalSecurityTransaction, "JRNLSEC");
            ChildAggregate_add_75.ChildAggregate_add(JournalSecurityTransaction, { required: true, order: 20, type: SecurityId_9.SecurityId, read: JournalSecurityTransaction.prototype.getSecurityId, write: JournalSecurityTransaction.prototype.setSecurityId });
            Element_add_57.Element_add(JournalSecurityTransaction, { name: "SUBACCTFROM", order: 30, type: String, read: JournalSecurityTransaction.prototype.getFromSubAccountFund, write: JournalSecurityTransaction.prototype.setFromSubAccountFund });
            Element_add_57.Element_add(JournalSecurityTransaction, { name: "SUBACCTTO", order: 40, type: String, read: JournalSecurityTransaction.prototype.getToSubAccountFund, write: JournalSecurityTransaction.prototype.setToSubAccountFund });
            Element_add_57.Element_add(JournalSecurityTransaction, { name: "TOTAL", order: 50, type: Number, read: JournalSecurityTransaction.prototype.getTotal, write: JournalSecurityTransaction.prototype.setTotal });
        }
    };
});
System.register("domain/data/investment/transactions/MarginInterestTransaction", ["domain/data/investment/transactions/TransactionType", "domain/data/investment/transactions/BaseOtherInvestmentTransaction", "domain/data/investment/transactions/OriginalCurrency", "domain/data/investment/accounts/SubAccountType", "meta/Aggregate_add", "meta/Element_add"], function (exports_211, context_211) {
    "use strict";
    var TransactionType_12, BaseOtherInvestmentTransaction_6, OriginalCurrency_5, SubAccountType_13, Aggregate_Add_99, Element_add_58, MarginInterestTransaction;
    var __moduleName = context_211 && context_211.id;
    return {
        setters: [
            function (TransactionType_12_1) {
                TransactionType_12 = TransactionType_12_1;
            },
            function (BaseOtherInvestmentTransaction_6_1) {
                BaseOtherInvestmentTransaction_6 = BaseOtherInvestmentTransaction_6_1;
            },
            function (OriginalCurrency_5_1) {
                OriginalCurrency_5 = OriginalCurrency_5_1;
            },
            function (SubAccountType_13_1) {
                SubAccountType_13 = SubAccountType_13_1;
            },
            function (Aggregate_Add_99_1) {
                Aggregate_Add_99 = Aggregate_Add_99_1;
            },
            function (Element_add_58_1) {
                Element_add_58 = Element_add_58_1;
            }
        ],
        execute: function () {
            /**
             * Transaction for journal security transactions between sub-accounts within the same investment
             * account.
             * @see "Section 13.9.2.4.4, OFX Spec"
             *
             * @author Jon Perlow
             */
            MarginInterestTransaction = /** @class */ (function (_super) {
                __extends(MarginInterestTransaction, _super);
                function MarginInterestTransaction() {
                    return _super.call(this, TransactionType_12.TransactionType.MARGIN_INTEREST) || this;
                }
                /**
                 * Gets the sub account type the margin interest affects (e.g. CASH, MARGIN, SHORT, OTHER).
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @return the sub account type
                 */
                MarginInterestTransaction.prototype.getSubAccountFund = function () {
                    return this.subAccountFund;
                };
                /**
                 * Sets the sub account type the margin interest affects (e.g. CASH, MARGIN, SHORT, OTHER).
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @param subAccountFund the sub account type
                 */
                MarginInterestTransaction.prototype.setSubAccountFund = function (subAccountFund) {
                    this.subAccountFund = subAccountFund;
                };
                /**
                 * Gets the result of getSubAccountFund as one of the well-known types.
                 *
                 * @return the type of null if it wasn't one of the well known types.
                 */
                MarginInterestTransaction.prototype.getSubAccountFundEnum = function () {
                    var type = this.getSubAccountFund();
                    return type != null ? SubAccountType_13.SubAccountType[type] : null;
                };
                /**
                 * Gets the total for the transaction.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @return the total
                 */
                MarginInterestTransaction.prototype.getTotal = function () {
                    return this.total;
                };
                /**
                 * Sets the total for the transaction.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @param total the total
                 */
                MarginInterestTransaction.prototype.setTotal = function (total) {
                    this.total = total;
                };
                /**
                 * Gets the currency code for the transaction. Only one of currency code or original currency
                 * info should be set according to the OFX spec. If neither are set, means the default currency.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the currency code for the transaction.
                 */
                MarginInterestTransaction.prototype.getCurrencyCode = function () {
                    return this.currencyCode;
                };
                /**
                 * Sets the currency code for the transaction. Only one of currency code or original currency
                 * info should be set according to the OFX spec. If neither are set, means the default currency.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param currencyCode the currency code for the transaction.
                 */
                MarginInterestTransaction.prototype.setCurrencyCode = function (currencyCode) {
                    this.currencyCode = currencyCode;
                    this.originalCurrencyInfo = null;
                };
                /**
                 * Gets the original currency info for the transaction.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the original currency info for the transaction.
                 */
                MarginInterestTransaction.prototype.getOriginalCurrencyInfo = function () {
                    return this.originalCurrencyInfo;
                };
                /**
                 * Sets the original currency info for the transaction.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param originalCurrency the original currency info for the transaction.
                 */
                MarginInterestTransaction.prototype.setOriginalCurrencyInfo = function (originalCurrency) {
                    this.originalCurrencyInfo = originalCurrency;
                    this.currencyCode = null;
                };
                return MarginInterestTransaction;
            }(BaseOtherInvestmentTransaction_6.BaseOtherInvestmentTransaction));
            exports_211("MarginInterestTransaction", MarginInterestTransaction);
            Aggregate_Add_99.Aggregate_add(MarginInterestTransaction, "MARGININTEREST");
            Element_add_58.Element_add(MarginInterestTransaction, { name: "SUBACCTFUND", order: 30, type: String, read: MarginInterestTransaction.prototype.getSubAccountFund, write: MarginInterestTransaction.prototype.setSubAccountFund });
            Element_add_58.Element_add(MarginInterestTransaction, { name: "TOTAL", order: 40, type: Number, read: MarginInterestTransaction.prototype.getTotal, write: MarginInterestTransaction.prototype.setTotal });
            Element_add_58.Element_add(MarginInterestTransaction, { name: "CURRENCY", order: 110, type: String, read: MarginInterestTransaction.prototype.getCurrencyCode, write: MarginInterestTransaction.prototype.setCurrencyCode });
            Element_add_58.Element_add(MarginInterestTransaction, { name: "ORIGCURRENCY", order: 120, type: OriginalCurrency_5.OriginalCurrency, read: MarginInterestTransaction.prototype.getOriginalCurrencyInfo, write: MarginInterestTransaction.prototype.setOriginalCurrencyInfo });
        }
    };
});
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("domain/data/investment/transactions/OptionSellType", [], function (exports_212, context_212) {
    "use strict";
    var OptionSellType;
    var __moduleName = context_212 && context_212.id;
    function OptionSellType_fromOfx(ofxVal) {
        if ("SELLTOOPEN" === ofxVal) {
            return OptionSellType.SELL_TO_OPEN;
        }
        else if ("SELLTOCLOSE" === ofxVal) {
            return OptionSellType.SELL_TO_CLOSE;
        }
        else {
            return null;
        }
    }
    exports_212("OptionSellType_fromOfx", OptionSellType_fromOfx);
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2010 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
             * Type of sale for options.
             * @see "Section 13.9.2.4.2, OFX Spec"
             *
             * @author Jon Perlow
             */
            (function (OptionSellType) {
                OptionSellType[OptionSellType["SELL_TO_CLOSE"] = 0] = "SELL_TO_CLOSE";
                OptionSellType[OptionSellType["SELL_TO_OPEN"] = 1] = "SELL_TO_OPEN";
            })(OptionSellType || (OptionSellType = {}));
            exports_212("OptionSellType", OptionSellType);
        }
    };
});
System.register("domain/data/investment/transactions/ReinvestIncomeTransaction", ["domain/data/investment/transactions/TransactionType", "domain/data/investment/transactions/BaseOtherInvestmentTransaction", "domain/data/seclist/SecurityId", "domain/data/investment/transactions/OriginalCurrency", "domain/data/investment/transactions/IncomeType", "domain/data/investment/accounts/SubAccountType", "domain/data/investment/positions/Inv401KSource", "meta/Aggregate_add", "meta/ChildAggregate_add", "meta/Element_add"], function (exports_213, context_213) {
    "use strict";
    var TransactionType_13, BaseOtherInvestmentTransaction_7, SecurityId_10, OriginalCurrency_6, IncomeType_2, SubAccountType_14, Inv401KSource_7, Aggregate_Add_100, ChildAggregate_add_76, Element_add_59, ReinvestIncomeTransaction;
    var __moduleName = context_213 && context_213.id;
    return {
        setters: [
            function (TransactionType_13_1) {
                TransactionType_13 = TransactionType_13_1;
            },
            function (BaseOtherInvestmentTransaction_7_1) {
                BaseOtherInvestmentTransaction_7 = BaseOtherInvestmentTransaction_7_1;
            },
            function (SecurityId_10_1) {
                SecurityId_10 = SecurityId_10_1;
            },
            function (OriginalCurrency_6_1) {
                OriginalCurrency_6 = OriginalCurrency_6_1;
            },
            function (IncomeType_2_1) {
                IncomeType_2 = IncomeType_2_1;
            },
            function (SubAccountType_14_1) {
                SubAccountType_14 = SubAccountType_14_1;
            },
            function (Inv401KSource_7_1) {
                Inv401KSource_7 = Inv401KSource_7_1;
            },
            function (Aggregate_Add_100_1) {
                Aggregate_Add_100 = Aggregate_Add_100_1;
            },
            function (ChildAggregate_add_76_1) {
                ChildAggregate_add_76 = ChildAggregate_add_76_1;
            },
            function (Element_add_59_1) {
                Element_add_59 = Element_add_59_1;
            }
        ],
        execute: function () {
            /**
             * Transaction for reinvestment transactions.
             * @see "Section 13.9.2.4.4, OFX Spec"
             *
             * @author Jon Perlow
             */
            ReinvestIncomeTransaction = /** @class */ (function (_super) {
                __extends(ReinvestIncomeTransaction, _super);
                function ReinvestIncomeTransaction() {
                    return _super.call(this, TransactionType_13.TransactionType.REINVEST_INCOME) || this;
                }
                /**
                 * Gets the id of the security that was reinvested in. This is a required field according to the
                 * OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the security id of the security that was reinvested in
                 */
                ReinvestIncomeTransaction.prototype.getSecurityId = function () {
                    return this.securityId;
                };
                /**
                 * Sets the id of the security that was reinvested in. This is a required field according to the
                 * OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param securityId the security id of the security that was reinvested in
                 */
                ReinvestIncomeTransaction.prototype.setSecurityId = function (securityId) {
                    this.securityId = securityId;
                };
                /**
                 * Gets the type of income. One of "CGLONG" (long term capital gains), "CGSHORT" (short term
                 * capital gains), "DIV" (dividend), INTEREST, or MISC. This is a required field according to the
                 * OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec" This is a required field according to the OFX spec.
                 *
                 * @return the type of income
                 */
                ReinvestIncomeTransaction.prototype.getIncomeType = function () {
                    return this.incomeType;
                };
                /**
                 * Sets the type of income. One of "CGLONG" (long term capital gains), "CGSHORT" (short term
                 * capital gains), "DIV" (dividend), INTEREST, or MISC. This is a required field according to the
                 * OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec" This is a required field according to the OFX spec.
                 *
                 * @param incomeType the type of income
                 */
                ReinvestIncomeTransaction.prototype.setIncomeType = function (incomeType) {
                    this.incomeType = incomeType;
                };
                /**
                 * Gets the type of income as one of the well-known types.
                 *
                 * @return the income type or null if it's not one of the well-known types
                 */
                ReinvestIncomeTransaction.prototype.getIncomeTypeEnum = function () {
                    return IncomeType_2.IncomeType_fromOfx(this.getIncomeType());
                };
                /**
                 * Gets the total income received. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @return the total
                 */
                ReinvestIncomeTransaction.prototype.getTotal = function () {
                    return this.total;
                };
                /**
                 * Sets the total income received. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @param total the total
                 */
                ReinvestIncomeTransaction.prototype.setTotal = function (total) {
                    this.total = total;
                };
                /**
                 * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER). This is a
                 * required field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the sub account type
                 */
                ReinvestIncomeTransaction.prototype.getSubAccountSecurity = function () {
                    return this.subAccountSecurity;
                };
                /**
                 * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER). This is a
                 * required field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param subAccountSecurity the sub account type
                 */
                ReinvestIncomeTransaction.prototype.setSubAccountSecurity = function (subAccountSecurity) {
                    this.subAccountSecurity = subAccountSecurity;
                };
                /**
                 * Gets the result of getSubAccountSecurity as one of the well-known types.
                 *
                 * @return the type of null if it wasn't one of the well known types
                 */
                ReinvestIncomeTransaction.prototype.getSubAccountSecurityEnum = function () {
                    return SubAccountType_14.SubAccountType_fromOfx(this.getSubAccountSecurity());
                };
                /**
                 * Gets the number of units of the security that was reinvested in. This is a required field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the number of units purchased
                 */
                ReinvestIncomeTransaction.prototype.getUnits = function () {
                    return this.units;
                };
                /**
                 * Sets the number of units of the security that was reinvested in. This is a required field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param units the number of units purchased
                 */
                ReinvestIncomeTransaction.prototype.setUnits = function (units) {
                    this.units = units;
                };
                /**
                 * Gets the price per commonly-quoted unit. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the per unit price
                 */
                ReinvestIncomeTransaction.prototype.getUnitPrice = function () {
                    return this.unitPrice;
                };
                /**
                 * Sets the price per commonly-quoted unit. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param unitPrice the per unit price
                 */
                ReinvestIncomeTransaction.prototype.setUnitPrice = function (unitPrice) {
                    this.unitPrice = unitPrice;
                };
                /**
                 * Gets the transaction commission for the reinvestment. This is an optional field according to
                 * the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the transaction commision
                 */
                ReinvestIncomeTransaction.prototype.getCommission = function () {
                    return this.commission;
                };
                /**
                 * Sets the transaction commission for the reinvestment. This is an optional field according to
                 * the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param commission the transaction commision
                 */
                ReinvestIncomeTransaction.prototype.setCommission = function (commission) {
                    this.commission = commission;
                };
                /**
                 * Gets the taxes for the reinvestment. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the transaction taxes
                 */
                ReinvestIncomeTransaction.prototype.getTaxes = function () {
                    return this.taxes;
                };
                /**
                 * Sets the taxes for the reinvestment. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param taxes the transaction taxes
                 */
                ReinvestIncomeTransaction.prototype.setTaxes = function (taxes) {
                    this.taxes = taxes;
                };
                /**
                 * Gets the fees for the reinvestment. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the transaction fees
                 */
                ReinvestIncomeTransaction.prototype.getFees = function () {
                    return this.fees;
                };
                /**
                 * Sets the fees for the reinvestment. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param fees the transaction fees
                 */
                ReinvestIncomeTransaction.prototype.setFees = function (fees) {
                    this.fees = fees;
                };
                /**
                 * Gets the load for the reinvestment. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the load
                 */
                ReinvestIncomeTransaction.prototype.getLoad = function () {
                    return this.load;
                };
                /**
                 * Sets the load for the reinvestment. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param load the load
                 */
                ReinvestIncomeTransaction.prototype.setLoad = function (load) {
                    this.load = load;
                };
                /**
                 * Gets whether the income was tax exempt. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return whether the transaction was tax exempt
                 */
                ReinvestIncomeTransaction.prototype.getTaxExempt = function () {
                    return this.taxExempt;
                };
                /**
                 * Sets whether the income was tax exempt. This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param taxExempt whether the transaction was tax exempt
                 */
                ReinvestIncomeTransaction.prototype.setTaxExempt = function (taxExempt) {
                    this.taxExempt = taxExempt;
                };
                /**
                 * Gets the currency code for the transaction. Only one of currency code or original currency
                 * info should be set according to the OFX spec. If neither are set, means the default currency.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the currency code for the transaction
                 */
                ReinvestIncomeTransaction.prototype.getCurrencyCode = function () {
                    return this.currencyCode;
                };
                /**
                 * Sets the currency code for the transaction. Only one of currency code or original currency
                 * info should be set according to the OFX spec. If neither are set, means the default currency.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param currencyCode the currency code for the transaction
                 */
                ReinvestIncomeTransaction.prototype.setCurrencyCode = function (currencyCode) {
                    this.currencyCode = currencyCode;
                    this.originalCurrencyInfo = null;
                };
                /**
                 * Gets the original currency info for the transaction.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the original currency info for the transaction.
                 */
                ReinvestIncomeTransaction.prototype.getOriginalCurrencyInfo = function () {
                    return this.originalCurrencyInfo;
                };
                /**
                 * Sets the original currency info for the transaction.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param originalCurrencyInfo the original currency info for the transaction.
                 */
                ReinvestIncomeTransaction.prototype.setOriginalCurrencyInfo = function (originalCurrencyInfo) {
                    this.originalCurrencyInfo = originalCurrencyInfo;
                    this.currencyCode = null;
                };
                /**
                 * Gets the 401K source for the reinvestment. Should be one of "PRETAX", "AFTERTAX", "MATCH",
                 * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the state withholding
                 */
                ReinvestIncomeTransaction.prototype.get401kSource = function () {
                    return this.inv401kSource;
                };
                /**
                 * Sets the 401K source for the reinvestment. Should be one of "PRETAX", "AFTERTAX", "MATCH",
                 * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param inv401kSource the state withholding
                 */
                ReinvestIncomeTransaction.prototype.set401kSource = function (inv401kSource) {
                    this.inv401kSource = inv401kSource;
                };
                /**
                 * Gets the 401(k) source as one of the well-known types.
                 *
                 * @return the type of close or null if it's not well known
                 */
                ReinvestIncomeTransaction.prototype.get401kSourceEnum = function () {
                    return Inv401KSource_7.Inv401KSource_fromOfx(this.get401kSource());
                };
                return ReinvestIncomeTransaction;
            }(BaseOtherInvestmentTransaction_7.BaseOtherInvestmentTransaction));
            exports_213("ReinvestIncomeTransaction", ReinvestIncomeTransaction);
            Aggregate_Add_100.Aggregate_add(ReinvestIncomeTransaction, "REINVEST");
            ChildAggregate_add_76.ChildAggregate_add(ReinvestIncomeTransaction, { required: true, order: 20, type: SecurityId_10.SecurityId, read: ReinvestIncomeTransaction.prototype.getSecurityId, write: ReinvestIncomeTransaction.prototype.setSecurityId });
            Element_add_59.Element_add(ReinvestIncomeTransaction, { name: "INCOMETYPE", required: true, order: 30, type: String, read: ReinvestIncomeTransaction.prototype.getIncomeType, write: ReinvestIncomeTransaction.prototype.setIncomeType });
            Element_add_59.Element_add(ReinvestIncomeTransaction, { name: "TOTAL", required: true, order: 40, type: Number, read: ReinvestIncomeTransaction.prototype.getTotal, write: ReinvestIncomeTransaction.prototype.setTotal });
            Element_add_59.Element_add(ReinvestIncomeTransaction, { name: "SUBACCTSEC", order: 50, type: String, read: ReinvestIncomeTransaction.prototype.getSubAccountSecurity, write: ReinvestIncomeTransaction.prototype.setSubAccountSecurity });
            Element_add_59.Element_add(ReinvestIncomeTransaction, { name: "UNITS", required: true, order: 60, type: Number, read: ReinvestIncomeTransaction.prototype.getUnits, write: ReinvestIncomeTransaction.prototype.setUnits });
            Element_add_59.Element_add(ReinvestIncomeTransaction, { name: "UNITPRICE", required: true, order: 70, type: Number, read: ReinvestIncomeTransaction.prototype.getUnitPrice, write: ReinvestIncomeTransaction.prototype.setUnitPrice });
            Element_add_59.Element_add(ReinvestIncomeTransaction, { name: "COMMISSION", order: 80, type: Number, read: ReinvestIncomeTransaction.prototype.getCommission, write: ReinvestIncomeTransaction.prototype.setCommission });
            Element_add_59.Element_add(ReinvestIncomeTransaction, { name: "TAXES", order: 90, type: Number, read: ReinvestIncomeTransaction.prototype.getTaxes, write: ReinvestIncomeTransaction.prototype.setTaxes });
            Element_add_59.Element_add(ReinvestIncomeTransaction, { name: "FEES", order: 100, type: Number, read: ReinvestIncomeTransaction.prototype.getFees, write: ReinvestIncomeTransaction.prototype.setFees });
            Element_add_59.Element_add(ReinvestIncomeTransaction, { name: "LOAD", order: 110, type: Number, read: ReinvestIncomeTransaction.prototype.getLoad, write: ReinvestIncomeTransaction.prototype.setLoad });
            Element_add_59.Element_add(ReinvestIncomeTransaction, { name: "TAXEXEMPT", order: 120, type: Boolean, read: ReinvestIncomeTransaction.prototype.getTaxExempt, write: ReinvestIncomeTransaction.prototype.setTaxExempt });
            Element_add_59.Element_add(ReinvestIncomeTransaction, { name: "CURRENCY", order: 130, type: String, read: ReinvestIncomeTransaction.prototype.getCurrencyCode, write: ReinvestIncomeTransaction.prototype.setCurrencyCode });
            Element_add_59.Element_add(ReinvestIncomeTransaction, { name: "ORIGCURRENCY", order: 140, type: OriginalCurrency_6.OriginalCurrency, read: ReinvestIncomeTransaction.prototype.getOriginalCurrencyInfo, write: ReinvestIncomeTransaction.prototype.setOriginalCurrencyInfo });
            Element_add_59.Element_add(ReinvestIncomeTransaction, { name: "INV401KSOURCE", order: 150, type: String, read: ReinvestIncomeTransaction.prototype.get401kSource, write: ReinvestIncomeTransaction.prototype.set401kSource });
        }
    };
});
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("domain/data/investment/transactions/RelatedOptionType", [], function (exports_214, context_214) {
    "use strict";
    var RelatedOptionType;
    var __moduleName = context_214 && context_214.id;
    function RelatedOptionType_fromOfx(ofxVal) {
        if ("SPREAD" === ofxVal) {
            return RelatedOptionType.SPREAD;
        }
        else if ("STRADDLE" === ofxVal) {
            return RelatedOptionType.STRADDLE;
        }
        else if ("NONE" === ofxVal) {
            return RelatedOptionType.NONE;
        }
        else if ("OTHER" === ofxVal) {
            return RelatedOptionType.OTHER;
        }
        else {
            return null;
        }
    }
    exports_214("RelatedOptionType_fromOfx", RelatedOptionType_fromOfx);
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2010 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
            * Related option transaction type.
            * @see "Section 13.9.2.4.4, OFX Spec"
            *
            * @author Jon Perlow
            */
            (function (RelatedOptionType) {
                RelatedOptionType[RelatedOptionType["SPREAD"] = 0] = "SPREAD";
                RelatedOptionType[RelatedOptionType["STRADDLE"] = 1] = "STRADDLE";
                RelatedOptionType[RelatedOptionType["NONE"] = 2] = "NONE";
                RelatedOptionType[RelatedOptionType["OTHER"] = 3] = "OTHER";
            })(RelatedOptionType || (RelatedOptionType = {}));
            exports_214("RelatedOptionType", RelatedOptionType);
        }
    };
});
System.register("domain/data/investment/transactions/ReturnOfCapitalTransaction", ["domain/data/investment/transactions/TransactionType", "domain/data/investment/transactions/BaseOtherInvestmentTransaction", "domain/data/seclist/SecurityId", "domain/data/investment/transactions/OriginalCurrency", "domain/data/investment/accounts/SubAccountType", "domain/data/investment/positions/Inv401KSource", "meta/Aggregate_add", "meta/ChildAggregate_add", "meta/Element_add"], function (exports_215, context_215) {
    "use strict";
    var TransactionType_14, BaseOtherInvestmentTransaction_8, SecurityId_11, OriginalCurrency_7, SubAccountType_15, Inv401KSource_8, Aggregate_Add_101, ChildAggregate_add_77, Element_add_60, ReturnOfCapitalTransaction;
    var __moduleName = context_215 && context_215.id;
    return {
        setters: [
            function (TransactionType_14_1) {
                TransactionType_14 = TransactionType_14_1;
            },
            function (BaseOtherInvestmentTransaction_8_1) {
                BaseOtherInvestmentTransaction_8 = BaseOtherInvestmentTransaction_8_1;
            },
            function (SecurityId_11_1) {
                SecurityId_11 = SecurityId_11_1;
            },
            function (OriginalCurrency_7_1) {
                OriginalCurrency_7 = OriginalCurrency_7_1;
            },
            function (SubAccountType_15_1) {
                SubAccountType_15 = SubAccountType_15_1;
            },
            function (Inv401KSource_8_1) {
                Inv401KSource_8 = Inv401KSource_8_1;
            },
            function (Aggregate_Add_101_1) {
                Aggregate_Add_101 = Aggregate_Add_101_1;
            },
            function (ChildAggregate_add_77_1) {
                ChildAggregate_add_77 = ChildAggregate_add_77_1;
            },
            function (Element_add_60_1) {
                Element_add_60 = Element_add_60_1;
            }
        ],
        execute: function () {
            /**
             * Transaction for return of capital transactions.
             * @see "Section 13.9.2.4.4, OFX Spec"
             *
             * @author Jon Perlow
             */
            ReturnOfCapitalTransaction = /** @class */ (function (_super) {
                __extends(ReturnOfCapitalTransaction, _super);
                function ReturnOfCapitalTransaction() {
                    return _super.call(this, TransactionType_14.TransactionType.RETURN_OF_CAPITAL) || this;
                }
                /**
                 * Gets the id of the security that capital was returned from. This is a required field according
                 * to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the security id of the security that capital was returned from
                 */
                ReturnOfCapitalTransaction.prototype.getSecurityId = function () {
                    return this.securityId;
                };
                /**
                 * Sets the id of the security that capital was returned from. This is a required field according
                 * to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param securityId the security id of the security that capital was returned from
                 */
                ReturnOfCapitalTransaction.prototype.setSecurityId = function (securityId) {
                    this.securityId = securityId;
                };
                /**
                 * Gets the total amount of capital returned. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @return the total
                 */
                ReturnOfCapitalTransaction.prototype.getTotal = function () {
                    return this.total;
                };
                /**
                 * Sets the total amount of capital returned. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @param total the total
                 */
                ReturnOfCapitalTransaction.prototype.setTotal = function (total) {
                    this.total = total;
                };
                /**
                 * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER). This is a
                 * required field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the sub account type
                 */
                ReturnOfCapitalTransaction.prototype.getSubAccountSecurity = function () {
                    return this.subAccountSecurity;
                };
                /**
                 * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER). This is a
                 * required field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param subAccountSecurity the sub account type
                 */
                ReturnOfCapitalTransaction.prototype.setSubAccountSecurity = function (subAccountSecurity) {
                    this.subAccountSecurity = subAccountSecurity;
                };
                /**
                 * Gets the result of getSubAccountSecurity as one of the well-known types.
                 *
                 * @return the type of null if it wasn't one of the well known types.
                 */
                ReturnOfCapitalTransaction.prototype.getSubAccountSecurityEnum = function () {
                    return SubAccountType_15.SubAccountType_fromOfx(this.getSubAccountSecurity());
                };
                /**
                 * Gets the sub account type that the transaction affects.
                 * (e.g. CASH, MARGIN, SHORT, OTHER). This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the sub account fund
                 */
                ReturnOfCapitalTransaction.prototype.getSubAccountFund = function () {
                    return this.subAccountFund;
                };
                /**
                 * Sets the sub account type that the transaction affects.
                 * (e.g. CASH, MARGIN, SHORT, OTHER). This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param subAccountFund the sub account fund
                 */
                ReturnOfCapitalTransaction.prototype.setSubAccountFund = function (subAccountFund) {
                    this.subAccountFund = subAccountFund;
                };
                /**
                 * Gets the result of getSubAccountFund as one of the well-known types.
                 *
                 * @return the type of null if it wasn't one of the well known types
                 */
                ReturnOfCapitalTransaction.prototype.getSubAccountFundEnum = function () {
                    return SubAccountType_15.SubAccountType_fromOfx(this.getSubAccountFund());
                };
                /**
                 * Gets the currency code for the transaction. Only one of currency code or original currency
                 * info should be set according to the OFX spec. If neither are set, means the default currency.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the currency code for the transaction
                 */
                ReturnOfCapitalTransaction.prototype.getCurrencyCode = function () {
                    return this.currencyCode;
                };
                /**
                 * Sets the currency code for the transaction. Only one of currency code or original currency
                 * info should be set according to the OFX spec. If neither are set, means the default currency.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param currencyCode the currency code for the transaction
                 */
                ReturnOfCapitalTransaction.prototype.setCurrencyCode = function (currencyCode) {
                    this.currencyCode = currencyCode;
                    this.originalCurrencyInfo = null;
                };
                /**
                 * Gets the original currency info for the transaction.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the currency code for the transaction.
                 */
                ReturnOfCapitalTransaction.prototype.getOriginalCurrencyInfo = function () {
                    return this.originalCurrencyInfo;
                };
                /**
                 * Sets the original currency info for the transaction.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param originalCurrencyInfo the currency code for the transaction.
                 */
                ReturnOfCapitalTransaction.prototype.setOriginalCurrencyInfo = function (originalCurrencyInfo) {
                    this.originalCurrencyInfo = originalCurrencyInfo;
                    this.currencyCode = null;
                };
                /**
                 * Gets the 401K source for the reinvestment. Should be one of "PRETAX", "AFTERTAX", "MATCH",
                 * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the state withholding
                 */
                ReturnOfCapitalTransaction.prototype.get401kSource = function () {
                    return this.inv401kSource;
                };
                /**
                 * Sets the 401K source for the reinvestment. Should be one of "PRETAX", "AFTERTAX", "MATCH",
                 * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param inv401kSource the state withholding
                 */
                ReturnOfCapitalTransaction.prototype.set401kSource = function (inv401kSource) {
                    this.inv401kSource = inv401kSource;
                };
                /**
                 * Gets the 401(k) source as one of the well-known types.
                 *
                 * @return the type of close or null if it's not well known.
                 */
                ReturnOfCapitalTransaction.prototype.get401kSourceEnum = function () {
                    return Inv401KSource_8.Inv401KSource_fromOfx(this.get401kSource());
                };
                return ReturnOfCapitalTransaction;
            }(BaseOtherInvestmentTransaction_8.BaseOtherInvestmentTransaction));
            exports_215("ReturnOfCapitalTransaction", ReturnOfCapitalTransaction);
            Aggregate_Add_101.Aggregate_add(ReturnOfCapitalTransaction, "RETOFCAP");
            ChildAggregate_add_77.ChildAggregate_add(ReturnOfCapitalTransaction, { required: true, order: 20, type: SecurityId_11.SecurityId, read: ReturnOfCapitalTransaction.prototype.getSecurityId, write: ReturnOfCapitalTransaction.prototype.setSecurityId });
            Element_add_60.Element_add(ReturnOfCapitalTransaction, { name: "TOTAL", required: true, order: 40, type: Number, read: ReturnOfCapitalTransaction.prototype.getTotal, write: ReturnOfCapitalTransaction.prototype.setTotal });
            Element_add_60.Element_add(ReturnOfCapitalTransaction, { name: "SUBACCTSEC", order: 50, type: String, read: ReturnOfCapitalTransaction.prototype.getSubAccountSecurity, write: ReturnOfCapitalTransaction.prototype.setSubAccountSecurity });
            Element_add_60.Element_add(ReturnOfCapitalTransaction, { name: "SUBACCTFUND", order: 140, type: String, read: ReturnOfCapitalTransaction.prototype.getSubAccountFund, write: ReturnOfCapitalTransaction.prototype.setSubAccountFund });
            Element_add_60.Element_add(ReturnOfCapitalTransaction, { name: "CURRENCY", order: 110, type: String, read: ReturnOfCapitalTransaction.prototype.getCurrencyCode, write: ReturnOfCapitalTransaction.prototype.setCurrencyCode });
            Element_add_60.Element_add(ReturnOfCapitalTransaction, { name: "ORIGCURRENCY", order: 120, type: OriginalCurrency_7.OriginalCurrency, read: ReturnOfCapitalTransaction.prototype.getOriginalCurrencyInfo, write: ReturnOfCapitalTransaction.prototype.setOriginalCurrencyInfo });
            Element_add_60.Element_add(ReturnOfCapitalTransaction, { name: "INV401KSOURCE", order: 180, type: String, read: ReturnOfCapitalTransaction.prototype.get401kSource, write: ReturnOfCapitalTransaction.prototype.set401kSource });
        }
    };
});
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("domain/data/investment/transactions/SellDebtReason", [], function (exports_216, context_216) {
    "use strict";
    var SellDebtReason;
    var __moduleName = context_216 && context_216.id;
    function SellDebtReason_fromOfx(ofxVal) {
        if ("CALL" === ofxVal) {
            return SellDebtReason.CALL;
        }
        else if ("SELL" === ofxVal) {
            return SellDebtReason.SELL;
        }
        else if ("MATURITY" === ofxVal) {
            return SellDebtReason.MATURITY;
        }
        else {
            return null;
        }
    }
    exports_216("SellDebtReason_fromOfx", SellDebtReason_fromOfx);
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2010 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
             * Reason debt was sold.
             * @see "Section 13.9.2.4.2, OFX Spec"
             *
             * @author Jon Perlow
             */
            (function (SellDebtReason) {
                SellDebtReason[SellDebtReason["CALL"] = 0] = "CALL";
                SellDebtReason[SellDebtReason["SELL"] = 1] = "SELL";
                SellDebtReason[SellDebtReason["MATURITY"] = 2] = "MATURITY";
            })(SellDebtReason || (SellDebtReason = {}));
            exports_216("SellDebtReason", SellDebtReason);
        }
    };
});
System.register("domain/data/investment/transactions/SellDebtTransaction", ["domain/data/investment/transactions/TransactionType", "domain/data/investment/transactions/BaseSellInvestmentTransaction", "domain/data/investment/transactions/SellDebtReason", "meta/Aggregate_add", "meta/Element_add"], function (exports_217, context_217) {
    "use strict";
    var TransactionType_15, BaseSellInvestmentTransaction_1, SellDebtReason_1, Aggregate_Add_102, Element_add_61, SellDebtTransaction;
    var __moduleName = context_217 && context_217.id;
    return {
        setters: [
            function (TransactionType_15_1) {
                TransactionType_15 = TransactionType_15_1;
            },
            function (BaseSellInvestmentTransaction_1_1) {
                BaseSellInvestmentTransaction_1 = BaseSellInvestmentTransaction_1_1;
            },
            function (SellDebtReason_1_1) {
                SellDebtReason_1 = SellDebtReason_1_1;
            },
            function (Aggregate_Add_102_1) {
                Aggregate_Add_102 = Aggregate_Add_102_1;
            },
            function (Element_add_61_1) {
                Element_add_61 = Element_add_61_1;
            }
        ],
        execute: function () {
            /**
             * Transaction for selling debt (i.e. bonds, CDs, etc.,).
             * @see "Section 13.9.2.4.4, OFX Spec"
             *
             * @author Jon Perlow
             */
            SellDebtTransaction = /** @class */ (function (_super) {
                __extends(SellDebtTransaction, _super);
                function SellDebtTransaction() {
                    return _super.call(this, TransactionType_15.TransactionType.SELL_DEBT) || this;
                }
                /**
                 * Gets the reason for the sale. One of "CALL" (the debt was called), "SELL" (the debt was sold),
                 * "MATURITY" (the debt reached maturity).
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @return The reason for the sale
                 */
                SellDebtTransaction.prototype.getSellReason = function () {
                    return this.sellReason;
                };
                /**
                 * Sets the reason for the sale. One of "CALL" (the debt was called), "SELL" (the debt was sold),
                 * "MATURITY" (the debt reached maturity).
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @param sellReason The reason for the sale
                 */
                SellDebtTransaction.prototype.setSellReason = function (sellReason) {
                    this.sellReason = sellReason;
                };
                /**
                 * Gets the sell reason as one of the well-known types.
                 *
                 * @return the sell reason or null if it's not well known
                 */
                SellDebtTransaction.prototype.getSellReasonEnum = function () {
                    return SellDebtReason_1.SellDebtReason_fromOfx(this.getSellReason());
                };
                /**
                 * Gets the amount of accrued interest on the debt. This is an optional field according to the
                 * OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @return the amount of accrued interest
                 */
                SellDebtTransaction.prototype.getAccruedInterest = function () {
                    return this.accruedInterest;
                };
                /**
                 * Sets the amount of accrued interest on the debt. This is an optional field according to the
                 * OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @param accruedInterest the amount of accrued interest
                 */
                SellDebtTransaction.prototype.setAccruedInterest = function (accruedInterest) {
                    this.accruedInterest = accruedInterest;
                };
                return SellDebtTransaction;
            }(BaseSellInvestmentTransaction_1.BaseSellInvestmentTransaction));
            exports_217("SellDebtTransaction", SellDebtTransaction);
            Aggregate_Add_102.Aggregate_add(SellDebtTransaction, "SELLDEBT");
            Element_add_61.Element_add(SellDebtTransaction, { name: "SELLREASON", order: 30, type: String, read: SellDebtTransaction.prototype.getSellReason, write: SellDebtTransaction.prototype.setSellReason });
            Element_add_61.Element_add(SellDebtTransaction, { name: "ACCRDINT", order: 40, type: Number, read: SellDebtTransaction.prototype.getAccruedInterest, write: SellDebtTransaction.prototype.setAccruedInterest });
        }
    };
});
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("domain/data/investment/transactions/SellType", [], function (exports_218, context_218) {
    "use strict";
    var SellType;
    var __moduleName = context_218 && context_218.id;
    function SellType_fromOfx(ofxVal) {
        if ("SELL" === ofxVal) {
            return SellType.SELL;
        }
        else if ("SELLSHORT" === ofxVal) {
            return SellType.SELL_SHORT;
        }
        else {
            return null;
        }
    }
    exports_218("SellType_fromOfx", SellType_fromOfx);
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2010 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
             * Type of sale for stocks and mutual funds.
             *
             * @author Jon Perlow
             */
            (function (SellType) {
                SellType[SellType["SELL"] = 0] = "SELL";
                SellType[SellType["SELL_SHORT"] = 1] = "SELL_SHORT";
            })(SellType || (SellType = {}));
            exports_218("SellType", SellType);
        }
    };
});
System.register("domain/data/investment/transactions/SellMutualFundTransaction", ["domain/data/investment/transactions/TransactionType", "domain/data/investment/transactions/BaseSellInvestmentTransaction", "domain/data/investment/transactions/SellType", "meta/Aggregate_add", "meta/Element_add"], function (exports_219, context_219) {
    "use strict";
    var TransactionType_16, BaseSellInvestmentTransaction_2, SellType_1, Aggregate_Add_103, Element_add_62, SellMutualFundTransaction;
    var __moduleName = context_219 && context_219.id;
    return {
        setters: [
            function (TransactionType_16_1) {
                TransactionType_16 = TransactionType_16_1;
            },
            function (BaseSellInvestmentTransaction_2_1) {
                BaseSellInvestmentTransaction_2 = BaseSellInvestmentTransaction_2_1;
            },
            function (SellType_1_1) {
                SellType_1 = SellType_1_1;
            },
            function (Aggregate_Add_103_1) {
                Aggregate_Add_103 = Aggregate_Add_103_1;
            },
            function (Element_add_62_1) {
                Element_add_62 = Element_add_62_1;
            }
        ],
        execute: function () {
            /**
             * Transaction for selling mutual fund.
             * @see "Section 13.9.2.4.4, OFX Spec"
             *
             * @author Jon Perlow
             */
            SellMutualFundTransaction = /** @class */ (function (_super) {
                __extends(SellMutualFundTransaction, _super);
                function SellMutualFundTransaction() {
                    return _super.call(this, TransactionType_16.TransactionType.SELL_MUTUAL_FUND) || this;
                }
                /**
                 * Gets the type of sale. One of "SELL" or "SELLSHORT".
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @return The type of sale
                 */
                SellMutualFundTransaction.prototype.getSellType = function () {
                    return this.sellType;
                };
                /**
                 * Sets the type of sale. One of "SELL" or "SELLSHORT".
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @param sellType The type of sale
                 */
                SellMutualFundTransaction.prototype.setSellType = function (sellType) {
                    this.sellType = sellType;
                };
                /**
                 * Gets the sell type as one of the well-known types.
                 *
                 * @return the type of sale or null if it's not known.
                 */
                SellMutualFundTransaction.prototype.getSellTypeEnum = function () {
                    return SellType_1.SellType_fromOfx(this.sellType);
                };
                /**
                 * Gets the average cost basis of the sale.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @return The average cost basis of the sale
                 */
                SellMutualFundTransaction.prototype.getAverageCostBasis = function () {
                    return this.averageCostBasis;
                };
                /**
                 * Sets the average cost basis of the sale.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @param averageCostBasis The average cost basis of the sale
                 */
                SellMutualFundTransaction.prototype.setAverageCostBasis = function (averageCostBasis) {
                    this.averageCostBasis = averageCostBasis;
                };
                /**
                 * Gets any related transaction id for a mutual fund sale (e.g. for a mutual fund exchange).
                 * This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @return the related transaction id
                 */
                SellMutualFundTransaction.prototype.getRelatedTransactionId = function () {
                    return this.relatedTransactionId;
                };
                /**
                 * Sets any related transaction id for a mutual fund sale (e.g. for a mutual fund exchange).
                 * This is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @param relatedTransactionId the related transaction id
                 */
                SellMutualFundTransaction.prototype.setRelatedTransactionId = function (relatedTransactionId) {
                    this.relatedTransactionId = relatedTransactionId;
                };
                return SellMutualFundTransaction;
            }(BaseSellInvestmentTransaction_2.BaseSellInvestmentTransaction));
            exports_219("SellMutualFundTransaction", SellMutualFundTransaction);
            Aggregate_Add_103.Aggregate_add(SellMutualFundTransaction, "SELLMF");
            Element_add_62.Element_add(SellMutualFundTransaction, { name: "SELLTYPE", order: 20, type: String, read: SellMutualFundTransaction.prototype.getSellType, write: SellMutualFundTransaction.prototype.setSellType });
            Element_add_62.Element_add(SellMutualFundTransaction, { name: "AVGCOSTBASIS", order: 30, type: Number, read: SellMutualFundTransaction.prototype.getAverageCostBasis, write: SellMutualFundTransaction.prototype.setAverageCostBasis });
            Element_add_62.Element_add(SellMutualFundTransaction, { name: "RELFITID", order: 40, type: String, read: SellMutualFundTransaction.prototype.getRelatedTransactionId, write: SellMutualFundTransaction.prototype.setRelatedTransactionId });
        }
    };
});
System.register("domain/data/investment/transactions/SellOptionTransaction", ["domain/data/investment/transactions/BaseSellInvestmentTransaction", "domain/data/investment/transactions/TransactionType", "domain/data/investment/transactions/OptionSellType", "domain/data/investment/transactions/RelatedOptionType", "domain/data/investment/positions/ShortOptionSecurity", "meta/Aggregate_add", "meta/Element_add"], function (exports_220, context_220) {
    "use strict";
    var BaseSellInvestmentTransaction_3, TransactionType_17, OptionSellType_1, RelatedOptionType_1, ShortOptionSecurity_2, Aggregate_Add_104, Element_add_63, SellOptionTransaction;
    var __moduleName = context_220 && context_220.id;
    return {
        setters: [
            function (BaseSellInvestmentTransaction_3_1) {
                BaseSellInvestmentTransaction_3 = BaseSellInvestmentTransaction_3_1;
            },
            function (TransactionType_17_1) {
                TransactionType_17 = TransactionType_17_1;
            },
            function (OptionSellType_1_1) {
                OptionSellType_1 = OptionSellType_1_1;
            },
            function (RelatedOptionType_1_1) {
                RelatedOptionType_1 = RelatedOptionType_1_1;
            },
            function (ShortOptionSecurity_2_1) {
                ShortOptionSecurity_2 = ShortOptionSecurity_2_1;
            },
            function (Aggregate_Add_104_1) {
                Aggregate_Add_104 = Aggregate_Add_104_1;
            },
            function (Element_add_63_1) {
                Element_add_63 = Element_add_63_1;
            }
        ],
        execute: function () {
            /**
             * Transaction for selling options.
             * @see "Section 13.9.2.4.4, OFX Spec"
             *
             * @author Jon Perlow
             */
            SellOptionTransaction = /** @class */ (function (_super) {
                __extends(SellOptionTransaction, _super);
                function SellOptionTransaction() {
                    return _super.call(this, TransactionType_17.TransactionType.SELL_OPTION) || this;
                }
                /**
                 * Gets the type of option sale (i.e. "SELLTOCLOSE" or "SELLTOOPEN"). This is a required field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @return the option sell type
                 */
                SellOptionTransaction.prototype.getOptionSellType = function () {
                    return this.optionSellType;
                };
                /**
                 * Sets the type of option sale (i.e. "SELLTOCLOSE" or "SELLTOOPEN"). This is a required field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @param optionSellType the option sell type
                 */
                SellOptionTransaction.prototype.setOptionSellType = function (optionSellType) {
                    this.optionSellType = optionSellType;
                };
                /**
                 * Gets the option sell type as one of the well-known types.
                 *
                 * @return the type of sale or null if it's not known.
                 */
                SellOptionTransaction.prototype.getOptionSellTypeEnum = function () {
                    return OptionSellType_1.OptionSellType_fromOfx(this.optionSellType);
                };
                /**
                 * Gets the number of shares per contact. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @return the number of shares per contact
                 */
                SellOptionTransaction.prototype.getSharesPerContact = function () {
                    return this.sharesPerContact;
                };
                /**
                 * Sets the number of shares per contact. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @param sharesPerContact the number of shares per contact
                 */
                SellOptionTransaction.prototype.setSharesPerContact = function (sharesPerContact) {
                    this.sharesPerContact = sharesPerContact;
                };
                /**
                 * Gets a related transaction for the option sale for complex option transactions. This
                 * is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @return The related transaction id
                 */
                SellOptionTransaction.prototype.getRelatedTransactionId = function () {
                    return this.relatedTransactionId;
                };
                /**
                 * Sets a related transaction for the option sale for complex option transactions. This
                 * is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @param relatedTransactionId The related transaction id
                 */
                SellOptionTransaction.prototype.setRelatedTransactionId = function (relatedTransactionId) {
                    this.relatedTransactionId = relatedTransactionId;
                };
                /**
                 * Gets the type for the related transaction. One of "SPREAD", "STRADDLE", "NONE", "OTHER". This
                 * is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @return The related tansaction type
                 */
                SellOptionTransaction.prototype.getRelatedType = function () {
                    return this.relatedType;
                };
                /**
                 * Sets the type for the related transaction. One of "SPREAD", "STRADDLE", "NONE", "OTHER". This
                 * is an optional field according to the OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @param relatedType The related tansaction type
                 */
                SellOptionTransaction.prototype.setRelatedType = function (relatedType) {
                    this.relatedType = relatedType;
                };
                /**
                 * Gets the related transaction as one of the well-known types.
                 *
                 * @return the related tansaction type or null if it's not well known
                 */
                SellOptionTransaction.prototype.getRelatedTypeEnum = function () {
                    return RelatedOptionType_1.RelatedOptionType_fromOfx(this.getRelatedType());
                };
                /**
                 * Gets how the option sale is secured. One of "NAKED" or "COVERED". This is an optional field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @return how the option sale is secured
                 */
                SellOptionTransaction.prototype.getSecured = function () {
                    return this.secured;
                };
                /**
                 * Sets how the option sale is secured. One of "NAKED" or "COVERED". This is an optional field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @param secured how the option sale is secured
                 */
                SellOptionTransaction.prototype.setSecured = function (secured) {
                    this.secured = secured;
                };
                /**
                 * Gets how the option sale is secured as one of the well-known types.
                 *
                 * @return the type indicating how the option is secured or null if it's not well known.
                 */
                SellOptionTransaction.prototype.getSecuredEnum = function () {
                    return ShortOptionSecurity_2.ShortOptionSecurity_fromOfx(this.getSecured());
                };
                return SellOptionTransaction;
            }(BaseSellInvestmentTransaction_3.BaseSellInvestmentTransaction));
            exports_220("SellOptionTransaction", SellOptionTransaction);
            Aggregate_Add_104.Aggregate_add(SellOptionTransaction, "SELLOPT");
            Element_add_63.Element_add(SellOptionTransaction, { name: "OPTSELLTYPE", required: true, order: 20, type: String, read: SellOptionTransaction.prototype.getOptionSellType, write: SellOptionTransaction.prototype.setOptionSellType });
            Element_add_63.Element_add(SellOptionTransaction, { name: "SHPERCTRCT", required: true, order: 30, type: Number, read: SellOptionTransaction.prototype.getSharesPerContact, write: SellOptionTransaction.prototype.setSharesPerContact });
            Element_add_63.Element_add(SellOptionTransaction, { name: "RELFITID", order: 40, type: String, read: SellOptionTransaction.prototype.getRelatedTransactionId, write: SellOptionTransaction.prototype.setRelatedTransactionId });
            Element_add_63.Element_add(SellOptionTransaction, { name: "RELTYPE", order: 50, type: String, read: SellOptionTransaction.prototype.getRelatedType, write: SellOptionTransaction.prototype.setRelatedType });
            Element_add_63.Element_add(SellOptionTransaction, { name: "SECURED", order: 60, type: String, read: SellOptionTransaction.prototype.getSecured, write: SellOptionTransaction.prototype.setSecured });
        }
    };
});
System.register("domain/data/investment/transactions/SellOtherTransaction", ["domain/data/investment/transactions/TransactionType", "domain/data/investment/transactions/BaseSellInvestmentTransaction", "meta/Aggregate_add"], function (exports_221, context_221) {
    "use strict";
    var TransactionType_18, BaseSellInvestmentTransaction_4, Aggregate_Add_105, SellOtherTransaction;
    var __moduleName = context_221 && context_221.id;
    return {
        setters: [
            function (TransactionType_18_1) {
                TransactionType_18 = TransactionType_18_1;
            },
            function (BaseSellInvestmentTransaction_4_1) {
                BaseSellInvestmentTransaction_4 = BaseSellInvestmentTransaction_4_1;
            },
            function (Aggregate_Add_105_1) {
                Aggregate_Add_105 = Aggregate_Add_105_1;
            }
        ],
        execute: function () {
            /**
             * Transaction for buying other types of securities.
             * @see "Section 13.9.2.4.4, OFX Spec"
             *
             * @author Jon Perlow
             */
            SellOtherTransaction = /** @class */ (function (_super) {
                __extends(SellOtherTransaction, _super);
                function SellOtherTransaction() {
                    return _super.call(this, TransactionType_18.TransactionType.SELL_OTHER) || this;
                }
                return SellOtherTransaction;
            }(BaseSellInvestmentTransaction_4.BaseSellInvestmentTransaction));
            exports_221("SellOtherTransaction", SellOtherTransaction);
            Aggregate_Add_105.Aggregate_add(SellOtherTransaction, "SELLOTHER");
        }
    };
});
System.register("domain/data/investment/transactions/SellStockTransaction", ["domain/data/investment/transactions/BaseSellInvestmentTransaction", "domain/data/investment/transactions/TransactionType", "domain/data/investment/transactions/SellType", "meta/Aggregate_add", "meta/Element_add"], function (exports_222, context_222) {
    "use strict";
    var BaseSellInvestmentTransaction_5, TransactionType_19, SellType_2, Aggregate_Add_106, Element_add_64, SellStockTransaction;
    var __moduleName = context_222 && context_222.id;
    return {
        setters: [
            function (BaseSellInvestmentTransaction_5_1) {
                BaseSellInvestmentTransaction_5 = BaseSellInvestmentTransaction_5_1;
            },
            function (TransactionType_19_1) {
                TransactionType_19 = TransactionType_19_1;
            },
            function (SellType_2_1) {
                SellType_2 = SellType_2_1;
            },
            function (Aggregate_Add_106_1) {
                Aggregate_Add_106 = Aggregate_Add_106_1;
            },
            function (Element_add_64_1) {
                Element_add_64 = Element_add_64_1;
            }
        ],
        execute: function () {
            /**
             * Transaction for selling stock.
             * @see "Section 13.9.2.4.4, OFX Spec"
             *
             * @author Jon Perlow
             */
            SellStockTransaction = /** @class */ (function (_super) {
                __extends(SellStockTransaction, _super);
                function SellStockTransaction() {
                    return _super.call(this, TransactionType_19.TransactionType.SELL_STOCK) || this;
                }
                /**
                 * Gets the type of stock sale (i.e. "SELL" or "SELLSHORT"). This is a required field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @return the sell type
                 */
                SellStockTransaction.prototype.getSellType = function () {
                    return this.sellType;
                };
                /**
                 * Sets the type of stock sale (i.e. "SELL" or "SELLSHORT"). This is a required field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.4.4, OFX Spec"
                 *
                 * @param sellType the sell type
                 */
                SellStockTransaction.prototype.setSellType = function (sellType) {
                    this.sellType = sellType;
                };
                /**
                 * Gets the sell type as one of the well-known types.
                 *
                 * @return the type of sale or null if it's not known
                 */
                SellStockTransaction.prototype.getSellTypeEnum = function () {
                    return SellType_2.SellType_fromOfx(this.sellType);
                };
                return SellStockTransaction;
            }(BaseSellInvestmentTransaction_5.BaseSellInvestmentTransaction));
            exports_222("SellStockTransaction", SellStockTransaction);
            Aggregate_Add_106.Aggregate_add(SellStockTransaction, "SELLSTOCK");
            Element_add_64.Element_add(SellStockTransaction, { name: "SELLTYPE", required: true, order: 20, type: String, read: SellStockTransaction.prototype.getSellType, write: SellStockTransaction.prototype.setSellType });
        }
    };
});
System.register("domain/data/investment/transactions/SplitTransaction", ["domain/data/investment/transactions/BaseOtherInvestmentTransaction", "domain/data/seclist/SecurityId", "domain/data/investment/transactions/OriginalCurrency", "domain/data/investment/transactions/TransactionType", "domain/data/investment/accounts/SubAccountType", "domain/data/investment/positions/Inv401KSource", "meta/Aggregate_add", "meta/ChildAggregate_add", "meta/Element_add"], function (exports_223, context_223) {
    "use strict";
    var BaseOtherInvestmentTransaction_9, SecurityId_12, OriginalCurrency_8, TransactionType_20, SubAccountType_16, Inv401KSource_9, Aggregate_Add_107, ChildAggregate_add_78, Element_add_65, SplitTransaction;
    var __moduleName = context_223 && context_223.id;
    return {
        setters: [
            function (BaseOtherInvestmentTransaction_9_1) {
                BaseOtherInvestmentTransaction_9 = BaseOtherInvestmentTransaction_9_1;
            },
            function (SecurityId_12_1) {
                SecurityId_12 = SecurityId_12_1;
            },
            function (OriginalCurrency_8_1) {
                OriginalCurrency_8 = OriginalCurrency_8_1;
            },
            function (TransactionType_20_1) {
                TransactionType_20 = TransactionType_20_1;
            },
            function (SubAccountType_16_1) {
                SubAccountType_16 = SubAccountType_16_1;
            },
            function (Inv401KSource_9_1) {
                Inv401KSource_9 = Inv401KSource_9_1;
            },
            function (Aggregate_Add_107_1) {
                Aggregate_Add_107 = Aggregate_Add_107_1;
            },
            function (ChildAggregate_add_78_1) {
                ChildAggregate_add_78 = ChildAggregate_add_78_1;
            },
            function (Element_add_65_1) {
                Element_add_65 = Element_add_65_1;
            }
        ],
        execute: function () {
            /**
             * Transaction for a stock split.
             * @see "Section 13.9.2.4.4, OFX Spec"
             *
             * @author Jon Perlow
             */
            SplitTransaction = /** @class */ (function (_super) {
                __extends(SplitTransaction, _super);
                function SplitTransaction() {
                    return _super.call(this, TransactionType_20.TransactionType.SPLIT) || this;
                }
                /**
                 * Gets the id of the security for the split. This is a required field according to the OFX
                 * spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the security id of the security for the expsense
                 */
                SplitTransaction.prototype.getSecurityId = function () {
                    return this.securityId;
                };
                /**
                 * Sets the id of the security for the split. This is a required field according to the OFX
                 * spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param securityId the security id of the security for the expsense
                 */
                SplitTransaction.prototype.setSecurityId = function (securityId) {
                    this.securityId = securityId;
                };
                /**
                 * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER). This is a
                 * required field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the sub account type
                 */
                SplitTransaction.prototype.getSubAccountSecurity = function () {
                    return this.subAccountSecurity;
                };
                /**
                 * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER). This is a
                 * required field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param subAccountSecurity the sub account type
                 */
                SplitTransaction.prototype.setSubAccountSecurity = function (subAccountSecurity) {
                    this.subAccountSecurity = subAccountSecurity;
                };
                /**
                 * Gets the result of getSubAccountSecurity as one of the well-known types.
                 *
                 * @return the type of null if it wasn't one of the well known types.
                 */
                SplitTransaction.prototype.getSubAccountSecurityEnum = function () {
                    return SubAccountType_16.SubAccountType_fromOfx(this.getSubAccountSecurity());
                };
                /**
                 * Gets the old number of units for the split. This is a required field according to the OFX
                 * spec.
                 *
                 * @return the old number of units.
                 */
                SplitTransaction.prototype.getOldUnits = function () {
                    return this.oldUnits;
                };
                /**
                 * Sets the old number of units for the split. This is a  equired field according to the OFX
                 * spec.
                 *
                 * @param oldUnits the old number of units.
                 */
                SplitTransaction.prototype.setOldUnits = function (oldUnits) {
                    this.oldUnits = oldUnits;
                };
                /**
                 * Gets the new number of units for the split. This is a required field according to the OFX
                 * spec.
                 *
                 * @return the new number of units.
                 */
                SplitTransaction.prototype.getNewUnits = function () {
                    return this.newUnits;
                };
                /**
                 * Sets the new number of units for the split. This is a required field according to the OFX
                 * spec.
                 *
                 * @param newUnits the new number of units.
                 */
                SplitTransaction.prototype.setNewUnits = function (newUnits) {
                    this.newUnits = newUnits;
                };
                /**
                 * Gets the numerator for the split ratio. This is a required field according to the OFX spec.
                 *
                 * @return the numerator for the split ratio
                 */
                SplitTransaction.prototype.getNumerator = function () {
                    return this.numerator;
                };
                /**
                 * Sets the numerator for the split ratio. This is a required field according to the OFX spec.
                 *
                 * @param numerator the numerator for the split ratio
                 */
                SplitTransaction.prototype.setNumerator = function (numerator) {
                    this.numerator = numerator;
                };
                /**
                 * Gets the denominator for the split ratio. This is a required field according to the OFX spec.
                 *
                 * @return the numerator for the split ratio
                 */
                SplitTransaction.prototype.getDenominator = function () {
                    return this.denominator;
                };
                /**
                 * Sets the denominator for the split ratio. This is a required field according to the OFX spec.
                 *
                 * @param denominator the numerator for the split ratio
                 */
                SplitTransaction.prototype.setDenominator = function (denominator) {
                    this.denominator = denominator;
                };
                /**
                 * Gets the currency code for the transaction. Only one of currency code or original currency
                 * code should be set according to the OFX spec. If neither are set, means the default currency.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the currency code for the transaction
                 */
                SplitTransaction.prototype.getCurrencyCode = function () {
                    return this.currencyCode;
                };
                /**
                 * sets the currency code for the transaction. Only one of currency code or original currency
                 * code should be set according to the OFX spec. If neither are set, means the default currency.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the currency code for the transaction
                 */
                SplitTransaction.prototype.setCurrencyCode = function (currencyCode) {
                    this.currencyCode = currencyCode;
                    this.originalCurrencyInfo = null;
                };
                /**
                 * Gets the original currency info for the transaction.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the original currency info for the transaction
                 */
                SplitTransaction.prototype.getOriginalCurrencyInfo = function () {
                    return this.originalCurrencyInfo;
                };
                /**
                 * Sets the original currency info for the transaction.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the original currency info for the transaction
                 */
                SplitTransaction.prototype.setOriginalCurrencyInfo = function (originalCurrencyInfo) {
                    this.originalCurrencyInfo = originalCurrencyInfo;
                    this.currencyCode = null;
                };
                /**
                 * Gets the cash for fractional units.
                 *
                 * @return the cash for fractional units
                 */
                SplitTransaction.prototype.getCashForFractionalUnits = function () {
                    return this.cashForFractionalUnits;
                };
                /**
                 * Sets the cash for fractional units.
                 *
                 * @param cashForFractionalUnits the cash for fractional units
                 */
                SplitTransaction.prototype.setCashForFractionalUnits = function (cashForFractionalUnits) {
                    this.cashForFractionalUnits = cashForFractionalUnits;
                };
                /**
                 * Gets the sub account type for the fund. (e.g. CASH, MARGIN, SHORT, OTHER).
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the sub account fund
                 */
                SplitTransaction.prototype.getSubAccountFund = function () {
                    return this.subAccountFund;
                };
                /**
                 * Sets the sub account type for the fund. (e.g. CASH, MARGIN, SHORT, OTHER).
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param subAccountFund the sub account fund
                 */
                SplitTransaction.prototype.setSubAccountFund = function (subAccountFund) {
                    this.subAccountFund = subAccountFund;
                };
                /**
                 * Gets the result of getSubAccountFund as one of the well-known types.
                 *
                 * @return the type of null if it wasn't one of the well known types
                 */
                SplitTransaction.prototype.getSubAccountFundEnum = function () {
                    return SubAccountType_16.SubAccountType_fromOfx(this.getSubAccountFund());
                };
                /**
                 * Gets the 401K source for the transaction. Should be one of "PRETAX", "AFTERTAX", "MATCH",
                 * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the 401k source
                 */
                SplitTransaction.prototype.get401kSource = function () {
                    return this.inv401kSource;
                };
                /**
                 * Sets the 401K source for the transaction. Should be one of "PRETAX", "AFTERTAX", "MATCH",
                 * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param inv401kSource the 401k source
                 */
                SplitTransaction.prototype.set401kSource = function (inv401kSource) {
                    this.inv401kSource = inv401kSource;
                };
                /**
                 * Gets the 401k source as one of the well-known types.
                 *
                 * @return the 401k source or null if its not one of the well-known types
                 */
                SplitTransaction.prototype.get401kSourceEnum = function () {
                    return Inv401KSource_9.Inv401KSource_fromOfx(this.get401kSource());
                };
                return SplitTransaction;
            }(BaseOtherInvestmentTransaction_9.BaseOtherInvestmentTransaction));
            exports_223("SplitTransaction", SplitTransaction);
            Aggregate_Add_107.Aggregate_add(SplitTransaction, "SPLIT");
            ChildAggregate_add_78.ChildAggregate_add(SplitTransaction, { required: true, order: 20, type: SecurityId_12.SecurityId, read: SplitTransaction.prototype.getSecurityId, write: SplitTransaction.prototype.setSecurityId });
            Element_add_65.Element_add(SplitTransaction, { name: "SUBACCTSEC", order: 30, type: String, read: SplitTransaction.prototype.getSubAccountSecurity, write: SplitTransaction.prototype.setSubAccountSecurity });
            Element_add_65.Element_add(SplitTransaction, { name: "OLDUNITS", order: 40, type: Number, read: SplitTransaction.prototype.getOldUnits, write: SplitTransaction.prototype.setOldUnits });
            Element_add_65.Element_add(SplitTransaction, { name: "NEWUNITS", order: 50, type: Number, read: SplitTransaction.prototype.getNewUnits, write: SplitTransaction.prototype.setNewUnits });
            Element_add_65.Element_add(SplitTransaction, { name: "NUMERATOR", order: 60, type: Number, read: SplitTransaction.prototype.getNumerator, write: SplitTransaction.prototype.setNumerator });
            Element_add_65.Element_add(SplitTransaction, { name: "DENOMINATOR", order: 70, type: Number, read: SplitTransaction.prototype.getDenominator, write: SplitTransaction.prototype.setDenominator });
            Element_add_65.Element_add(SplitTransaction, { name: "CURRENCY", order: 80, type: String, read: SplitTransaction.prototype.getCurrencyCode, write: SplitTransaction.prototype.setCurrencyCode });
            Element_add_65.Element_add(SplitTransaction, { name: "ORIGCURRENCY", order: 90, type: OriginalCurrency_8.OriginalCurrency, read: SplitTransaction.prototype.getOriginalCurrencyInfo, write: SplitTransaction.prototype.setOriginalCurrencyInfo });
            Element_add_65.Element_add(SplitTransaction, { name: "FRACCASH", order: 100, type: Number, read: SplitTransaction.prototype.getCashForFractionalUnits, write: SplitTransaction.prototype.setCashForFractionalUnits });
            Element_add_65.Element_add(SplitTransaction, { name: "SUBACCTFUND", order: 110, type: String, read: SplitTransaction.prototype.getSubAccountFund, write: SplitTransaction.prototype.setSubAccountFund });
            Element_add_65.Element_add(SplitTransaction, { name: "INV401KSOURCE", order: 120, type: String, read: SplitTransaction.prototype.get401kSource, write: SplitTransaction.prototype.set401kSource });
        }
    };
});
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("domain/data/investment/transactions/TransferAction", [], function (exports_224, context_224) {
    "use strict";
    var TransferAction;
    var __moduleName = context_224 && context_224.id;
    function TransferAction_fromOfx(ofxVal) {
        if ("IN" === ofxVal) {
            return TransferAction.IN;
        }
        else if ("OUT" === ofxVal) {
            return TransferAction.OUT;
        }
        else {
            return null;
        }
    }
    exports_224("TransferAction_fromOfx", TransferAction_fromOfx);
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2010 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
             * Type of transfer.
             * @see "Section 13.9.2.4.4, OFX Spec"
             *
             * @author Jon Perlow
             */
            (function (TransferAction) {
                TransferAction[TransferAction["IN"] = 0] = "IN";
                TransferAction[TransferAction["OUT"] = 1] = "OUT";
            })(TransferAction || (TransferAction = {}));
            exports_224("TransferAction", TransferAction);
        }
    };
});
System.register("domain/data/investment/transactions/TransferInvestmentTransaction", ["domain/data/investment/transactions/BaseOtherInvestmentTransaction", "domain/data/seclist/SecurityId", "domain/data/investment/transactions/TransactionType", "domain/data/investment/accounts/SubAccountType", "domain/data/investment/transactions/TransferAction", "domain/data/investment/positions/PositionType", "domain/data/investment/positions/Inv401KSource", "meta/Aggregate_add", "meta/ChildAggregate_add", "meta/Element_add"], function (exports_225, context_225) {
    "use strict";
    var BaseOtherInvestmentTransaction_10, SecurityId_13, TransactionType_21, SubAccountType_17, TransferAction_1, PositionType_3, Inv401KSource_10, Aggregate_Add_108, ChildAggregate_add_79, Element_add_66, TransferInvestmentTransaction;
    var __moduleName = context_225 && context_225.id;
    return {
        setters: [
            function (BaseOtherInvestmentTransaction_10_1) {
                BaseOtherInvestmentTransaction_10 = BaseOtherInvestmentTransaction_10_1;
            },
            function (SecurityId_13_1) {
                SecurityId_13 = SecurityId_13_1;
            },
            function (TransactionType_21_1) {
                TransactionType_21 = TransactionType_21_1;
            },
            function (SubAccountType_17_1) {
                SubAccountType_17 = SubAccountType_17_1;
            },
            function (TransferAction_1_1) {
                TransferAction_1 = TransferAction_1_1;
            },
            function (PositionType_3_1) {
                PositionType_3 = PositionType_3_1;
            },
            function (Inv401KSource_10_1) {
                Inv401KSource_10 = Inv401KSource_10_1;
            },
            function (Aggregate_Add_108_1) {
                Aggregate_Add_108 = Aggregate_Add_108_1;
            },
            function (ChildAggregate_add_79_1) {
                ChildAggregate_add_79 = ChildAggregate_add_79_1;
            },
            function (Element_add_66_1) {
                Element_add_66 = Element_add_66_1;
            }
        ],
        execute: function () {
            /**
             * Transaction for transfers.
             * @see "Section 13.9.2.4.4, OFX Spec"
             *
             * @author Jon Perlow
             */
            TransferInvestmentTransaction = /** @class */ (function (_super) {
                __extends(TransferInvestmentTransaction, _super);
                // TODO (jonp) -- INVACCTFROM
                function TransferInvestmentTransaction() {
                    return _super.call(this, TransactionType_21.TransactionType.TRANSFER) || this;
                }
                /**
                 * Gets the id of the security that was transferred. This is a required field according to the OFX
                 * spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the security id of the security that was transferred
                 */
                TransferInvestmentTransaction.prototype.getSecurityId = function () {
                    return this.securityId;
                };
                /**
                 * Sets the id of the security that was transferred. This is a required field according to the OFX
                 * spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param securityId the security id of the security that was transferred
                 */
                TransferInvestmentTransaction.prototype.setSecurityId = function (securityId) {
                    this.securityId = securityId;
                };
                /**
                  * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
                  * @see "Section 13.9.2.4.3, OFX Spec"
                  *
                  * @return the sub account type
                  */
                TransferInvestmentTransaction.prototype.getSubAccountSecurity = function () {
                    return this.subAccountSecurity;
                };
                /**
                  * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
                  * @see "Section 13.9.2.4.3, OFX Spec"
                  *
                  * @param subAccountSecurity the sub account type
                  */
                TransferInvestmentTransaction.prototype.setSubAccountSecurity = function (subAccountSecurity) {
                    this.subAccountSecurity = subAccountSecurity;
                };
                /**
                 * Gets the result of getSubAccountSecurity as one of the well-known types.
                 *
                 * @return the type of null if it wasn't one of the well known types.
                 */
                TransferInvestmentTransaction.prototype.getSubAccountSecurityEnum = function () {
                    return SubAccountType_17.SubAccountType_fromOfx(this.getSubAccountSecurity());
                };
                /**
                 * Gets the number of units of the security that was transferred. For security-based actions other
                 * than stock splits, this is the quantity bought. For stocks, mutual funds, and others, this
                 * is the number of shares. For bonds, this is the face value. For options, this is the number of
                 * contacts. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the number of units transferred
                 */
                TransferInvestmentTransaction.prototype.getUnits = function () {
                    return this.units;
                };
                /**
                 * Sets the number of units of the security that was transferred. For security-based actions other
                 * than stock splits, this is the quantity bought. For stocks, mutual funds, and others, this
                 * is the number of shares. For bonds, this is the face value. For options, this is the number of
                 * contacts. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param units the number of units transferred
                 */
                TransferInvestmentTransaction.prototype.setUnits = function (units) {
                    this.units = units;
                };
                /**
                 * Gets the type of transfer. One of "IN" or "OUT". This is a required field according to the
                 * OFX spec.
                 *
                 * @return the type of transfer
                 */
                TransferInvestmentTransaction.prototype.getTransferAction = function () {
                    return this.transferAction;
                };
                /**
                 * Sets the type of transfer. One of "IN" or "OUT". This is a required field according to the
                 * OFX spec.
                 *
                 * @param transferAction the type of transfer
                 */
                TransferInvestmentTransaction.prototype.setTransferAction = function (transferAction) {
                    this.transferAction = transferAction;
                };
                /**
                 * Gets the transfer action as one of the well-known types.
                 *
                 * @return the type of transfer or null if it's not well known
                 */
                TransferInvestmentTransaction.prototype.getTransferActionEnum = function () {
                    return TransferAction_1.TransferAction_fromOfx(this.getTransferAction());
                };
                /**
                 * Gets the type of position. One of "LONG" or "SHORT". This is a required field according to the
                 * OFX spec.
                 *
                 * @return the position type
                 */
                TransferInvestmentTransaction.prototype.getPositionType = function () {
                    return this.positionType;
                };
                /**
                 * Sets the type of position. One of "LONG" or "SHORT". This is a required field according to the
                 * OFX spec.
                 *
                 * @param positionType the position type
                 */
                TransferInvestmentTransaction.prototype.setPositionType = function (positionType) {
                    this.positionType = positionType;
                };
                /**
                 * Gets the position type as one of the well-known types.
                 *
                 * @return the position type or null if it's not well known
                 */
                TransferInvestmentTransaction.prototype.getPositionTypeEnum = function () {
                    return PositionType_3.PositionType_fromOfx(this.getPositionType());
                };
                /**
                 * Gets the average cost basis for the securities being transfered. This is an optional field
                 * according to the ofx spec.
                 *
                 * @return the average cost basis
                 */
                TransferInvestmentTransaction.prototype.getAverageCostBasis = function () {
                    return this.averageCostBasis;
                };
                /**
                 * Sets the average cost basis for the securities being transfered. This is an optional field
                 * according to the ofx spec.
                 *
                 * @param averageCostBasis the average cost basis
                 */
                TransferInvestmentTransaction.prototype.setAverageCostBasis = function (averageCostBasis) {
                    this.averageCostBasis = averageCostBasis;
                };
                /**
                 * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
                 * share price. For bonds, this is the percentage of par. For options, this is the per share (not
                 * per contact) price. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the per unit price
                 */
                TransferInvestmentTransaction.prototype.getUnitPrice = function () {
                    return this.unitPrice;
                };
                /**
                 * Sets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
                 * share price. For bonds, this is the percentage of par. For options, this is the per share (not
                 * per contact) price. This is a required field according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param unitPrice the per unit price
                 */
                TransferInvestmentTransaction.prototype.setUnitPrice = function (unitPrice) {
                    this.unitPrice = unitPrice;
                };
                /**
                 * Gets the original date of purchase for the securities. This is an optional field according to
                 * the ofx spec.
                 *
                 * @return the original date of purchase
                 */
                TransferInvestmentTransaction.prototype.getPurchaseDate = function () {
                    return this.purchaseDate;
                };
                /**
                 * Sets the original date of purchase for the securities. This is an optional field according to
                 * the ofx spec.
                 *
                 * @param purchaseDate the original date of purchase
                 */
                TransferInvestmentTransaction.prototype.setPurchaseDate = function (purchaseDate) {
                    this.purchaseDate = purchaseDate;
                };
                /**
                 * Gets the 401K source for the transfer. Should be one of "PRETAX", "AFTERTAX", "MATCH",
                 * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @return the state withholding
                 */
                TransferInvestmentTransaction.prototype.get401kSource = function () {
                    return this.inv401kSource;
                };
                /**
                 * Sets the 401K source for the transfer. Should be one of "PRETAX", "AFTERTAX", "MATCH",
                 * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
                 * according to the OFX spec.
                 * @see "Section 13.9.2.4.3, OFX Spec"
                 *
                 * @param inv401kSource the state withholding
                 */
                TransferInvestmentTransaction.prototype.set401kSource = function (inv401kSource) {
                    this.inv401kSource = inv401kSource;
                };
                /**
                 * Gets the 401(k) source as one of the well-known types.
                 *
                 * @return the type of close or null if it's not well known.
                 */
                TransferInvestmentTransaction.prototype.get401kSourceEnum = function () {
                    return Inv401KSource_10.Inv401KSource_fromOfx(this.get401kSource());
                };
                return TransferInvestmentTransaction;
            }(BaseOtherInvestmentTransaction_10.BaseOtherInvestmentTransaction));
            exports_225("TransferInvestmentTransaction", TransferInvestmentTransaction);
            Aggregate_Add_108.Aggregate_add(TransferInvestmentTransaction, "TRANSFER");
            ChildAggregate_add_79.ChildAggregate_add(TransferInvestmentTransaction, { required: true, order: 20, type: SecurityId_13.SecurityId, read: TransferInvestmentTransaction.prototype.getSecurityId, write: TransferInvestmentTransaction.prototype.setSecurityId });
            Element_add_66.Element_add(TransferInvestmentTransaction, { name: "SUBACCTSEC", order: 30, type: String, read: TransferInvestmentTransaction.prototype.getSubAccountSecurity, write: TransferInvestmentTransaction.prototype.setSubAccountSecurity });
            Element_add_66.Element_add(TransferInvestmentTransaction, { name: "UNITS", required: true, order: 40, type: Number, read: TransferInvestmentTransaction.prototype.getUnits, write: TransferInvestmentTransaction.prototype.setUnits });
            Element_add_66.Element_add(TransferInvestmentTransaction, { name: "TFERACTION", required: true, order: 50, type: String, read: TransferInvestmentTransaction.prototype.getTransferAction, write: TransferInvestmentTransaction.prototype.setTransferAction });
            Element_add_66.Element_add(TransferInvestmentTransaction, { name: "POSTYPE", required: true, order: 60, type: String, read: TransferInvestmentTransaction.prototype.getPositionType, write: TransferInvestmentTransaction.prototype.setPositionType });
            Element_add_66.Element_add(TransferInvestmentTransaction, { name: "AVGCOSTBASIS", order: 70, type: Number, read: TransferInvestmentTransaction.prototype.getAverageCostBasis, write: TransferInvestmentTransaction.prototype.setAverageCostBasis });
            Element_add_66.Element_add(TransferInvestmentTransaction, { name: "UNITPRICE", required: true, order: 80, type: Number, read: TransferInvestmentTransaction.prototype.getUnitPrice, write: TransferInvestmentTransaction.prototype.setUnitPrice });
            Element_add_66.Element_add(TransferInvestmentTransaction, { name: "DTPURCHASE", order: 90, type: Date, read: TransferInvestmentTransaction.prototype.getPurchaseDate, write: TransferInvestmentTransaction.prototype.setPurchaseDate });
            Element_add_66.Element_add(TransferInvestmentTransaction, { name: "INV401KSOURCE", order: 100, type: String, read: TransferInvestmentTransaction.prototype.get401kSource, write: TransferInvestmentTransaction.prototype.set401kSource });
        }
    };
});
System.register("domain/data/profile/info/common/TransferProfile", ["domain/data/common/ProcessorDayOff", "meta/Aggregate_add", "meta/Element_add"], function (exports_226, context_226) {
    "use strict";
    var ProcessorDayOff_1, Aggregate_Add_109, Element_add_67, TransferProfile;
    var __moduleName = context_226 && context_226.id;
    return {
        setters: [
            function (ProcessorDayOff_1_1) {
                ProcessorDayOff_1 = ProcessorDayOff_1_1;
            },
            function (Aggregate_Add_109_1) {
                Aggregate_Add_109 = Aggregate_Add_109_1;
            },
            function (Element_add_67_1) {
                Element_add_67 = Element_add_67_1;
            }
        ],
        execute: function () {
            /**
             * Funds Transfer Profile
             * @author Scott Priddy
             * @see "Section 11.13.2.2 OFX Spec"
             */
            TransferProfile = /** @class */ (function () {
                function TransferProfile() {
                }
                /**
                 * Days of week that no processing occurs: MONDAY, TUESDAY, WEDNESDAY, THURSDAY,
                 * FRIDAY, SATURDAY, or SUNDAY. 0 or more <PROCDAYSOFF> can be sent.
                 * @return List of days during the week that no processing occurs.
                 */
                TransferProfile.prototype.getProcessorDaysOff = function () {
                    return this.processorDaysOff;
                };
                TransferProfile.prototype.setProcessorDaysOff = function (processorDaysOff) {
                    this.processorDaysOff = processorDaysOff;
                };
                /**
                 * Gets time of day that day's processing ends.
                 *
                 * Time formatted as "HHMMSS.XXX[gmt offset[:tz name]]",
                 * the milliseconds and time zone are still optional, and default to GMT.
                 * @see "Section 3.2.8.3 OFX Spec"
                 * @return Time String formatted as "HHMMSS.XXX[gmt offset[:tz name]]"
                 */
                TransferProfile.prototype.getProcessEndTime = function () {
                    return this.processEndTime;
                };
                /**
                 * Sets the time of day that day's processing ends.
                 *
                 * Time formatted as "HHMMSS.XXX[gmt offset[:tz name]]",
                 * the milliseconds and time zone are still optional, and default to GMT.
              
                 * @see "Section 3.2.8.3 OFX Spec"
                 * @param processEndTime formatted as "HHMMSS.XXX[gmt offset[:tz name]]"
                 */
                TransferProfile.prototype.setProcessEndTime = function (processEndTime) {
                    this.processEndTime = processEndTime;
                };
                TransferProfile.prototype.getSupportsScheduledTransfers = function () {
                    return this.supportsScheduledTransfers;
                };
                TransferProfile.prototype.setSupportsScheduledTransfers = function (supportsScheduledTransfers) {
                    this.supportsScheduledTransfers = supportsScheduledTransfers;
                };
                /**
                 * Requires <CANSCHED>
                 * @return Boolean whether supports recurring transfers
                 */
                TransferProfile.prototype.getSupportsRecurringTransfers = function () {
                    return this.supportsRecurringTransfers;
                };
                TransferProfile.prototype.setSupportsRecurringTransfers = function (supportsRecurringTransfers) {
                    this.supportsRecurringTransfers = supportsRecurringTransfers;
                };
                /**
                 * <CANLOAN>Y must be present for transfers to involve loans
                 * @return Boolean whether supports loan transfers
                 */
                TransferProfile.prototype.getSupportsLoanTransfers = function () {
                    return this.supportsLoanTransfers;
                };
                TransferProfile.prototype.setSupportsLoanTransfers = function (supportsLoanTransfers) {
                    this.supportsLoanTransfers = supportsLoanTransfers;
                };
                TransferProfile.prototype.getSupportsScheduledLoanTransfers = function () {
                    return this.supportsScheduledLoanTransfers;
                };
                TransferProfile.prototype.setSupportsScheduledLoanTransfers = function (supportsScheduledLoanTransfers) {
                    this.supportsScheduledLoanTransfers = supportsScheduledLoanTransfers;
                };
                TransferProfile.prototype.getSupportsRecurringLoanTransfers = function () {
                    return this.supportsRecurringLoanTransfers;
                };
                TransferProfile.prototype.setSupportsRecurringLoanTransfers = function (supportsRecurringLoanTransfers) {
                    this.supportsRecurringLoanTransfers = supportsRecurringLoanTransfers;
                };
                TransferProfile.prototype.getSupportsTransferModification = function () {
                    return this.supportsTransferModification;
                };
                TransferProfile.prototype.setSupportsTransferModification = function (supportsTransferModification) {
                    this.supportsTransferModification = supportsTransferModification;
                };
                TransferProfile.prototype.getSupportsModelModification = function () {
                    return this.supportsModelModification;
                };
                TransferProfile.prototype.setSupportsModelModification = function (supportsModelModification) {
                    this.supportsModelModification = supportsModelModification;
                };
                /**
                 * Model window
                 * the number of days before a recurring transaction is scheduled to be processed that it is
                 * instantiated on the system
                 * @return Number number of days before a recurring transaction is scheduled to be processed that it is instantiated on the system
                 */
                TransferProfile.prototype.getModelWindow = function () {
                    return this.modelWindow;
                };
                TransferProfile.prototype.setModelWindow = function (modelWindow) {
                    this.modelWindow = modelWindow;
                };
                /**
                 * Number of days before processing date that funds are withdrawn
                 * @return Number number of days before processing date that funds are withdrawn
                 */
                TransferProfile.prototype.getWithdrawnDays = function () {
                    return this.withdrawnDays;
                };
                TransferProfile.prototype.setWithdrawnDays = function (withdrawnDays) {
                    this.withdrawnDays = withdrawnDays;
                };
                /**
                 * Default number of days to pay
                 * @return Number Default number of days to pay
                 */
                TransferProfile.prototype.getDefaultDaysToPay = function () {
                    return this.defaultDaysToPay;
                };
                TransferProfile.prototype.setDefaultDaysToPay = function (defaultDaysToPay) {
                    this.defaultDaysToPay = defaultDaysToPay;
                };
                return TransferProfile;
            }());
            exports_226("TransferProfile", TransferProfile);
            Aggregate_Add_109.Aggregate_add(TransferProfile, "XFERPROF");
            Element_add_67.Element_add(TransferProfile, { name: "PROCDAYSOFF", order: 0, type: Array, collectionEntryType: ProcessorDayOff_1.ProcessorDayOff, read: TransferProfile.prototype.getProcessorDaysOff, write: TransferProfile.prototype.setProcessorDaysOff });
            Element_add_67.Element_add(TransferProfile, { name: "PROCENDTM", required: true, order: 10, type: String, read: TransferProfile.prototype.getProcessEndTime, write: TransferProfile.prototype.setProcessEndTime });
            Element_add_67.Element_add(TransferProfile, { name: "CANSCHED", required: true, order: 20, type: Boolean, read: TransferProfile.prototype.getSupportsScheduledTransfers, write: TransferProfile.prototype.setSupportsScheduledTransfers });
            Element_add_67.Element_add(TransferProfile, { name: "CANRECUR", required: true, order: 30, type: Boolean, read: TransferProfile.prototype.getSupportsRecurringTransfers, write: TransferProfile.prototype.setSupportsRecurringTransfers });
            Element_add_67.Element_add(TransferProfile, { name: "CANLOAN", order: 40, type: Boolean, read: TransferProfile.prototype.getSupportsLoanTransfers, write: TransferProfile.prototype.setSupportsLoanTransfers });
            Element_add_67.Element_add(TransferProfile, { name: "CANSCHEDLOAN", order: 50, type: Boolean, read: TransferProfile.prototype.getSupportsScheduledLoanTransfers, write: TransferProfile.prototype.setSupportsScheduledLoanTransfers });
            Element_add_67.Element_add(TransferProfile, { name: "CANRECURLOAN", order: 60, type: Boolean, read: TransferProfile.prototype.getSupportsRecurringLoanTransfers, write: TransferProfile.prototype.setSupportsRecurringLoanTransfers });
            Element_add_67.Element_add(TransferProfile, { name: "CANMODXFERS", required: true, order: 70, type: Boolean, read: TransferProfile.prototype.getSupportsTransferModification, write: TransferProfile.prototype.setSupportsTransferModification });
            Element_add_67.Element_add(TransferProfile, { name: "CANMODMDLS", required: true, order: 80, type: Boolean, read: TransferProfile.prototype.getSupportsModelModification, write: TransferProfile.prototype.setSupportsModelModification });
            Element_add_67.Element_add(TransferProfile, { name: "MODELWND", required: true, order: 90, type: Number, read: TransferProfile.prototype.getModelWindow, write: TransferProfile.prototype.setModelWindow });
            Element_add_67.Element_add(TransferProfile, { name: "DAYSWITH", required: true, order: 100, type: Number, read: TransferProfile.prototype.getWithdrawnDays, write: TransferProfile.prototype.setWithdrawnDays });
            Element_add_67.Element_add(TransferProfile, { name: "DFLTDAYSTOPAY", required: true, order: 110, type: Number, read: TransferProfile.prototype.getDefaultDaysToPay, write: TransferProfile.prototype.setDefaultDaysToPay });
        }
    };
});
System.register("domain/data/profile/info/banking/StopCheckProfile", ["domain/data/common/ProcessorDayOff", "meta/Aggregate_add", "meta/Element_add"], function (exports_227, context_227) {
    "use strict";
    var ProcessorDayOff_2, Aggregate_Add_110, Element_add_68, StopCheckProfile;
    var __moduleName = context_227 && context_227.id;
    return {
        setters: [
            function (ProcessorDayOff_2_1) {
                ProcessorDayOff_2 = ProcessorDayOff_2_1;
            },
            function (Aggregate_Add_110_1) {
                Aggregate_Add_110 = Aggregate_Add_110_1;
            },
            function (Element_add_68_1) {
                Element_add_68 = Element_add_68_1;
            }
        ],
        execute: function () {
            /**
             * Stop Check Profile
             * @author Scott Priddy
             * @see "Section 11.13.2.3 OFX Spec"
             */
            StopCheckProfile = /** @class */ (function () {
                function StopCheckProfile() {
                }
                /**
                 * Days of week that no processing occurs: MONDAY, TUESDAY, WEDNESDAY, THURSDAY,
                 * FRIDAY, SATURDAY, or SUNDAY. 0 or more <PROCDAYSOFF> can be sent.
                 * @return List of days during the week that no processing occurs.
                 */
                StopCheckProfile.prototype.getProcessorDaysOff = function () {
                    return this.processorDaysOff;
                };
                StopCheckProfile.prototype.setProcessorDaysOff = function (processorDaysOff) {
                    this.processorDaysOff = processorDaysOff;
                };
                /**
                 * Gets time of day that day's processing ends.
                 *
                 * Time formatted as "HHMMSS.XXX[gmt offset[:tz name]]",
                 * the milliseconds and time zone are still optional, and default to GMT.
                 * @see "Section 3.2.8.3 OFX Spec"
                 * @return Time String formatted as "HHMMSS.XXX[gmt offset[:tz name]]"
                 */
                StopCheckProfile.prototype.getProcessEndTime = function () {
                    return this.processEndTime;
                };
                /**
                 * Sets the time of day that day's processing ends.
                 *
                 * Time formatted as "HHMMSS.XXX[gmt offset[:tz name]]",
                 * the milliseconds and time zone are still optional, and default to GMT.
              
                 * @see "Section 3.2.8.3 OFX Spec"
                 * @param processEndTime formatted as "HHMMSS.XXX[gmt offset[:tz name]]"
                 */
                StopCheckProfile.prototype.setProcessEndTime = function (processEndTime) {
                    this.processEndTime = processEndTime;
                };
                StopCheckProfile.prototype.getCanUseRange = function () {
                    return this.canUseRange;
                };
                StopCheckProfile.prototype.setCanUseRange = function (canUseRange) {
                    this.canUseRange = canUseRange;
                };
                StopCheckProfile.prototype.getCanUseDescription = function () {
                    return this.canUseDescription;
                };
                StopCheckProfile.prototype.setCanUseDescription = function (canUseDescription) {
                    this.canUseDescription = canUseDescription;
                };
                StopCheckProfile.prototype.getStopCheckFee = function () {
                    return this.stopCheckFee;
                };
                StopCheckProfile.prototype.setStopCheckFee = function (stopCheckFee) {
                    this.stopCheckFee = stopCheckFee;
                };
                return StopCheckProfile;
            }());
            exports_227("StopCheckProfile", StopCheckProfile);
            Aggregate_Add_110.Aggregate_add(StopCheckProfile, "STPCHKPROF");
            Element_add_68.Element_add(StopCheckProfile, { name: "PROCDAYSOFF", order: 0, type: Array, collectionEntryType: ProcessorDayOff_2.ProcessorDayOff, read: StopCheckProfile.prototype.getProcessorDaysOff, write: StopCheckProfile.prototype.setProcessorDaysOff });
            Element_add_68.Element_add(StopCheckProfile, { name: "PROCENDTM", required: true, order: 10, type: String, read: StopCheckProfile.prototype.getProcessEndTime, write: StopCheckProfile.prototype.setProcessEndTime });
            Element_add_68.Element_add(StopCheckProfile, { name: "CANUSERANGE", required: true, order: 20, type: Boolean, read: StopCheckProfile.prototype.getCanUseRange, write: StopCheckProfile.prototype.setCanUseRange });
            Element_add_68.Element_add(StopCheckProfile, { name: "CANUSEDESC", required: true, order: 30, type: Boolean, read: StopCheckProfile.prototype.getCanUseDescription, write: StopCheckProfile.prototype.setCanUseDescription });
            Element_add_68.Element_add(StopCheckProfile, { name: "STPCHKFEE", required: true, order: 40, type: Number, read: StopCheckProfile.prototype.getStopCheckFee, write: StopCheckProfile.prototype.setStopCheckFee });
        }
    };
});
System.register("domain/data/profile/info/banking/EmailProfile", ["meta/Aggregate_add", "meta/Element_add"], function (exports_228, context_228) {
    "use strict";
    var Aggregate_Add_111, Element_add_69, EmailProfile;
    var __moduleName = context_228 && context_228.id;
    return {
        setters: [
            function (Aggregate_Add_111_1) {
                Aggregate_Add_111 = Aggregate_Add_111_1;
            },
            function (Element_add_69_1) {
                Element_add_69 = Element_add_69_1;
            }
        ],
        execute: function () {
            /**
             * Email Profile
             * @author Scott Priddy
             * @see "Section 11.13.2.3 OFX Spec"
             */
            EmailProfile = /** @class */ (function () {
                function EmailProfile() {
                }
                EmailProfile.prototype.getCanEmail = function () {
                    return this.canEmail;
                };
                EmailProfile.prototype.setCanEmail = function (canEmail) {
                    this.canEmail = canEmail;
                };
                EmailProfile.prototype.getCanNotify = function () {
                    return this.canNotify;
                };
                EmailProfile.prototype.setCanNotify = function (canNotify) {
                    this.canNotify = canNotify;
                };
                return EmailProfile;
            }());
            exports_228("EmailProfile", EmailProfile);
            Aggregate_Add_111.Aggregate_add(EmailProfile, "EMAILPROF");
            Element_add_69.Element_add(EmailProfile, { name: "CANEMAIL", required: true, order: 10, type: Boolean, read: EmailProfile.prototype.getCanEmail, write: EmailProfile.prototype.setCanEmail });
            Element_add_69.Element_add(EmailProfile, { name: "CANNOTIFY", required: true, order: 20, type: Boolean, read: EmailProfile.prototype.getCanNotify, write: EmailProfile.prototype.setCanNotify });
        }
    };
});
System.register("domain/data/profile/info/common/ImageProfile", ["meta/Aggregate_add", "meta/Element_add"], function (exports_229, context_229) {
    "use strict";
    var Aggregate_Add_112, Element_add_70, ImageProfile;
    var __moduleName = context_229 && context_229.id;
    return {
        setters: [
            function (Aggregate_Add_112_1) {
                Aggregate_Add_112 = Aggregate_Add_112_1;
            },
            function (Element_add_70_1) {
                Element_add_70 = Element_add_70_1;
            }
        ],
        execute: function () {
            /**
             * Image Profile
             * @author Scott Priddy
             * @see "Section 3.1.6.2 OFX Spec"
             */
            ImageProfile = /** @class */ (function () {
                function ImageProfile() {
                }
                ImageProfile.prototype.getClosingImageAvailable = function () {
                    return this.closingImageAvailable;
                };
                ImageProfile.prototype.setClosingImageAvailable = function (closingImageAvailable) {
                    this.closingImageAvailable = closingImageAvailable;
                };
                ImageProfile.prototype.getTransactionImageAvailable = function () {
                    return this.transactionImageAvailable;
                };
                ImageProfile.prototype.setTransactionImageAvailable = function (transactionImageAvailable) {
                    this.transactionImageAvailable = transactionImageAvailable;
                };
                return ImageProfile;
            }());
            exports_229("ImageProfile", ImageProfile);
            Aggregate_Add_112.Aggregate_add(ImageProfile, "IMAGEPROF");
            Element_add_70.Element_add(ImageProfile, { name: "CLOSINGIMGAVAIL", required: true, order: 10, type: Boolean, read: ImageProfile.prototype.getClosingImageAvailable, write: ImageProfile.prototype.setClosingImageAvailable });
            Element_add_70.Element_add(ImageProfile, { name: "TRANIMGAVAIL", required: true, order: 20, type: Boolean, read: ImageProfile.prototype.getTransactionImageAvailable, write: ImageProfile.prototype.setTransactionImageAvailable });
        }
    };
});
System.register("domain/data/profile/info/BankingV1MessageSetInfo", ["domain/data/profile/VersionSpecificMessageSetInfo", "domain/data/banking/AccountType", "domain/data/profile/info/common/TransferProfile", "domain/data/profile/info/banking/StopCheckProfile", "domain/data/profile/info/banking/EmailProfile", "domain/data/profile/info/common/ImageProfile", "domain/data/MessageSetType", "meta/Aggregate_add", "meta/ChildAggregate_add", "meta/Element_add"], function (exports_230, context_230) {
    "use strict";
    var VersionSpecificMessageSetInfo_2, AccountType_3, TransferProfile_1, StopCheckProfile_1, EmailProfile_1, ImageProfile_1, MessageSetType_21, Aggregate_Add_113, ChildAggregate_add_80, Element_add_71, BankingV1MessageSetInfo;
    var __moduleName = context_230 && context_230.id;
    return {
        setters: [
            function (VersionSpecificMessageSetInfo_2_1) {
                VersionSpecificMessageSetInfo_2 = VersionSpecificMessageSetInfo_2_1;
            },
            function (AccountType_3_1) {
                AccountType_3 = AccountType_3_1;
            },
            function (TransferProfile_1_1) {
                TransferProfile_1 = TransferProfile_1_1;
            },
            function (StopCheckProfile_1_1) {
                StopCheckProfile_1 = StopCheckProfile_1_1;
            },
            function (EmailProfile_1_1) {
                EmailProfile_1 = EmailProfile_1_1;
            },
            function (ImageProfile_1_1) {
                ImageProfile_1 = ImageProfile_1_1;
            },
            function (MessageSetType_21_1) {
                MessageSetType_21 = MessageSetType_21_1;
            },
            function (Aggregate_Add_113_1) {
                Aggregate_Add_113 = Aggregate_Add_113_1;
            },
            function (ChildAggregate_add_80_1) {
                ChildAggregate_add_80 = ChildAggregate_add_80_1;
            },
            function (Element_add_71_1) {
                Element_add_71 = Element_add_71_1;
            }
        ],
        execute: function () {
            /**
             * Banking Message Set Profile
             * @author Scott Priddy
             * @author Ryan Heaton
             * @see "Section 11.13.2.1 OFX Spec"
             */
            BankingV1MessageSetInfo = /** @class */ (function (_super) {
                __extends(BankingV1MessageSetInfo, _super);
                function BankingV1MessageSetInfo() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                BankingV1MessageSetInfo.prototype.getMessageSetType = function () {
                    return MessageSetType_21.MessageSetType.banking;
                };
                /**
                 * The invalidAccountTypes list.
                 *
                 * @return The invalidAccountTypes list.
                 */
                BankingV1MessageSetInfo.prototype.getInvalidAccountTypes = function () {
                    return this.invalidAccountTypes;
                };
                /**
                 * The invalidAccountTypes list.
                 *
                 * @param invalidAccountTypes The invalidAccountTypes list.
                 */
                BankingV1MessageSetInfo.prototype.setInvalidAccountTypes = function (invalidAccountTypes) {
                    this.invalidAccountTypes = invalidAccountTypes;
                };
                /**
                 * Gets whether closing statement information is available
                 *
                 * @return whether closing statement information is available
                 */
                BankingV1MessageSetInfo.prototype.getClosingAvail = function () {
                    return this.closingAvail;
                };
                /**
                 * Sets whether closing statement information is available
                 *
                 * @param closingAvail whether closing statement information is available
                 */
                BankingV1MessageSetInfo.prototype.setClosingAvail = function (closingAvail) {
                    this.closingAvail = closingAvail;
                };
                BankingV1MessageSetInfo.prototype.getTransferProfile = function () {
                    return this.transferProfile;
                };
                BankingV1MessageSetInfo.prototype.setTransferProfile = function (transferProfile) {
                    this.transferProfile = transferProfile;
                };
                BankingV1MessageSetInfo.prototype.getStopCheckProfile = function () {
                    return this.stopCheckProfile;
                };
                BankingV1MessageSetInfo.prototype.setStopCheckProfile = function (stopCheckProfile) {
                    this.stopCheckProfile = stopCheckProfile;
                };
                BankingV1MessageSetInfo.prototype.getEmailProfile = function () {
                    return this.emailProfile;
                };
                BankingV1MessageSetInfo.prototype.setEmailProfile = function (emailProfile) {
                    this.emailProfile = emailProfile;
                };
                BankingV1MessageSetInfo.prototype.getImageProfile = function () {
                    return this.imageProfile;
                };
                BankingV1MessageSetInfo.prototype.setImageProfile = function (imageProfile) {
                    this.imageProfile = imageProfile;
                };
                return BankingV1MessageSetInfo;
            }(VersionSpecificMessageSetInfo_2.VersionSpecificMessageSetInfo));
            exports_230("BankingV1MessageSetInfo", BankingV1MessageSetInfo);
            Aggregate_Add_113.Aggregate_add(BankingV1MessageSetInfo, "BANKMSGSETV1");
            ChildAggregate_add_80.ChildAggregate_add(BankingV1MessageSetInfo, { order: 10, type: Array, collectionEntryType: AccountType_3.AccountType, read: BankingV1MessageSetInfo.prototype.getInvalidAccountTypes, write: BankingV1MessageSetInfo.prototype.setInvalidAccountTypes });
            Element_add_71.Element_add(BankingV1MessageSetInfo, { name: "CLOSINGAVAIL", required: true, order: 20, type: Boolean, read: BankingV1MessageSetInfo.prototype.getClosingAvail, write: BankingV1MessageSetInfo.prototype.setClosingAvail });
            ChildAggregate_add_80.ChildAggregate_add(BankingV1MessageSetInfo, { name: "XFERPROF", order: 30, type: TransferProfile_1.TransferProfile, read: BankingV1MessageSetInfo.prototype.getTransferProfile, write: BankingV1MessageSetInfo.prototype.setTransferProfile });
            ChildAggregate_add_80.ChildAggregate_add(BankingV1MessageSetInfo, { name: "STPCKPROF", order: 40, type: StopCheckProfile_1.StopCheckProfile, read: BankingV1MessageSetInfo.prototype.getStopCheckProfile, write: BankingV1MessageSetInfo.prototype.setStopCheckProfile });
            ChildAggregate_add_80.ChildAggregate_add(BankingV1MessageSetInfo, { name: "EMAILPROF", required: true, order: 50, type: EmailProfile_1.EmailProfile, read: BankingV1MessageSetInfo.prototype.getEmailProfile, write: BankingV1MessageSetInfo.prototype.setEmailProfile });
            ChildAggregate_add_80.ChildAggregate_add(BankingV1MessageSetInfo, { name: "IMAGEPROF", order: 60, type: ImageProfile_1.ImageProfile, read: BankingV1MessageSetInfo.prototype.getImageProfile, write: BankingV1MessageSetInfo.prototype.setImageProfile });
        }
    };
});
System.register("domain/data/profile/info/BankingMessageSetInfo", ["domain/data/profile/AbstractMessageSetInfo", "domain/data/profile/info/BankingV1MessageSetInfo", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_231, context_231) {
    "use strict";
    var AbstractMessageSetInfo_2, BankingV1MessageSetInfo_1, Aggregate_Add_114, ChildAggregate_add_81, BankingMessageSetInfo;
    var __moduleName = context_231 && context_231.id;
    return {
        setters: [
            function (AbstractMessageSetInfo_2_1) {
                AbstractMessageSetInfo_2 = AbstractMessageSetInfo_2_1;
            },
            function (BankingV1MessageSetInfo_1_1) {
                BankingV1MessageSetInfo_1 = BankingV1MessageSetInfo_1_1;
            },
            function (Aggregate_Add_114_1) {
                Aggregate_Add_114 = Aggregate_Add_114_1;
            },
            function (ChildAggregate_add_81_1) {
                ChildAggregate_add_81 = ChildAggregate_add_81_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            BankingMessageSetInfo = /** @class */ (function (_super) {
                __extends(BankingMessageSetInfo, _super);
                function BankingMessageSetInfo() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                BankingMessageSetInfo.prototype.getVersion1Info = function () {
                    return this.version1Info;
                };
                BankingMessageSetInfo.prototype.setVersion1Info = function (version1Info) {
                    this.version1Info = version1Info;
                };
                return BankingMessageSetInfo;
            }(AbstractMessageSetInfo_2.AbstractMessageSetInfo));
            exports_231("BankingMessageSetInfo", BankingMessageSetInfo);
            Aggregate_Add_114.Aggregate_add(BankingMessageSetInfo, "BANKMSGSET");
            ChildAggregate_add_81.ChildAggregate_add(BankingMessageSetInfo, { order: 0, type: BankingV1MessageSetInfo_1.BankingV1MessageSetInfo, read: BankingMessageSetInfo.prototype.getVersion1Info, write: BankingMessageSetInfo.prototype.setVersion1Info });
        }
    };
});
System.register("domain/data/profile/info/BillpayV1MessageSetInfo", ["domain/data/profile/VersionSpecificMessageSetInfo", "domain/data/MessageSetType", "meta/Aggregate_add", "meta/Element_add"], function (exports_232, context_232) {
    "use strict";
    var VersionSpecificMessageSetInfo_3, MessageSetType_22, Aggregate_Add_115, Element_add_72, BillpayV1MessageSetInfo;
    var __moduleName = context_232 && context_232.id;
    return {
        setters: [
            function (VersionSpecificMessageSetInfo_3_1) {
                VersionSpecificMessageSetInfo_3 = VersionSpecificMessageSetInfo_3_1;
            },
            function (MessageSetType_22_1) {
                MessageSetType_22 = MessageSetType_22_1;
            },
            function (Aggregate_Add_115_1) {
                Aggregate_Add_115 = Aggregate_Add_115_1;
            },
            function (Element_add_72_1) {
                Element_add_72 = Element_add_72_1;
            }
        ],
        execute: function () {
            /**
             * BillPay Message Set Profile
             * @author Scott Priddy
             * @author Ryan Heaton
             * @see "Section 12.11.2 OFX Spec"
             */
            BillpayV1MessageSetInfo = /** @class */ (function (_super) {
                __extends(BillpayV1MessageSetInfo, _super);
                function BillpayV1MessageSetInfo() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                BillpayV1MessageSetInfo.prototype.getMessageSetType = function () {
                    return MessageSetType_22.MessageSetType.payments;
                };
                BillpayV1MessageSetInfo.prototype.getDaysWith = function () {
                    return this.daysWith;
                };
                BillpayV1MessageSetInfo.prototype.setDaysWith = function (daysWith) {
                    this.daysWith = daysWith;
                };
                BillpayV1MessageSetInfo.prototype.getDefaultDaysToPay = function () {
                    return this.defaultDaysToPay;
                };
                BillpayV1MessageSetInfo.prototype.setDefaultDaysToPay = function (defaultDaysToPay) {
                    this.defaultDaysToPay = defaultDaysToPay;
                };
                BillpayV1MessageSetInfo.prototype.getTransferDaysWith = function () {
                    return this.transferDaysWith;
                };
                BillpayV1MessageSetInfo.prototype.setTransferDaysWith = function (transferDaysWith) {
                    this.transferDaysWith = transferDaysWith;
                };
                BillpayV1MessageSetInfo.prototype.getTransferDefaultDaysToPay = function () {
                    return this.transferDefaultDaysToPay;
                };
                BillpayV1MessageSetInfo.prototype.setTransferDefaultDaysToPay = function (transferDefaultDaysToPay) {
                    this.transferDefaultDaysToPay = transferDefaultDaysToPay;
                };
                BillpayV1MessageSetInfo.prototype.getProcessorDaysOff = function () {
                    return this.processorDaysOff;
                };
                BillpayV1MessageSetInfo.prototype.setProcessorDaysOff = function (processorDaysOff) {
                    this.processorDaysOff = processorDaysOff;
                };
                BillpayV1MessageSetInfo.prototype.getProcessorEndTime = function () {
                    return this.processorEndTime;
                };
                BillpayV1MessageSetInfo.prototype.setProcessorEndTime = function (processorEndTime) {
                    this.processorEndTime = processorEndTime;
                };
                BillpayV1MessageSetInfo.prototype.getModelWindow = function () {
                    return this.modelWindow;
                };
                BillpayV1MessageSetInfo.prototype.setModelWindow = function (modelWindow) {
                    this.modelWindow = modelWindow;
                };
                BillpayV1MessageSetInfo.prototype.getPostProcessorWindow = function () {
                    return this.postProcessorWindow;
                };
                BillpayV1MessageSetInfo.prototype.setPostProcessorWindow = function (postProcessorWindow) {
                    this.postProcessorWindow = postProcessorWindow;
                };
                BillpayV1MessageSetInfo.prototype.getSupportsStatusUpdateViaPaymentModificationResponse = function () {
                    return this.supportsStatusUpdateViaPaymentModificationResponse;
                };
                BillpayV1MessageSetInfo.prototype.setSupportsStatusUpdateViaPaymentModificationResponse = function (supportsStatusUpdateViaPaymentModificationResponse) {
                    this.supportsStatusUpdateViaPaymentModificationResponse = supportsStatusUpdateViaPaymentModificationResponse;
                };
                BillpayV1MessageSetInfo.prototype.getSupportsPaymentByAddress = function () {
                    return this.supportsPaymentByAddress;
                };
                BillpayV1MessageSetInfo.prototype.setSupportsPaymentByAddress = function (supportsPaymentByAddress) {
                    this.supportsPaymentByAddress = supportsPaymentByAddress;
                };
                BillpayV1MessageSetInfo.prototype.getSupportsPaymentByTransfer = function () {
                    return this.supportsPaymentByTransfer;
                };
                BillpayV1MessageSetInfo.prototype.setSupportsPaymentByTransfer = function (supportsPaymentByTransfer) {
                    this.supportsPaymentByTransfer = supportsPaymentByTransfer;
                };
                BillpayV1MessageSetInfo.prototype.getSupportsPaymentByPayeeId = function () {
                    return this.supportsPaymentByPayeeId;
                };
                BillpayV1MessageSetInfo.prototype.setSupportsPaymentByPayeeId = function (supportsPaymentByPayeeId) {
                    this.supportsPaymentByPayeeId = supportsPaymentByPayeeId;
                };
                BillpayV1MessageSetInfo.prototype.getUserCanAddPayee = function () {
                    return this.userCanAddPayee;
                };
                BillpayV1MessageSetInfo.prototype.setUserCanAddPayee = function (userCanAddPayee) {
                    this.userCanAddPayee = userCanAddPayee;
                };
                BillpayV1MessageSetInfo.prototype.getSupportsExtendedPayment = function () {
                    return this.supportsExtendedPayment;
                };
                BillpayV1MessageSetInfo.prototype.setSupportsExtendedPayment = function (supportsExtendedPayment) {
                    this.supportsExtendedPayment = supportsExtendedPayment;
                };
                BillpayV1MessageSetInfo.prototype.getCanModifyPayments = function () {
                    return this.canModifyPayments;
                };
                BillpayV1MessageSetInfo.prototype.setCanModifyPayments = function (canModifyPayments) {
                    this.canModifyPayments = canModifyPayments;
                };
                BillpayV1MessageSetInfo.prototype.getCanModifyModels = function () {
                    return this.canModifyModels;
                };
                BillpayV1MessageSetInfo.prototype.setCanModifyModels = function (canModifyModels) {
                    this.canModifyModels = canModifyModels;
                };
                BillpayV1MessageSetInfo.prototype.getSupportsDifferentFirstPayment = function () {
                    return this.supportsDifferentFirstPayment;
                };
                BillpayV1MessageSetInfo.prototype.setSupportsDifferentFirstPayment = function (supportsDifferentFirstPayment) {
                    this.supportsDifferentFirstPayment = supportsDifferentFirstPayment;
                };
                BillpayV1MessageSetInfo.prototype.getSupportsDifferentLastPayment = function () {
                    return this.supportsDifferentLastPayment;
                };
                BillpayV1MessageSetInfo.prototype.setSupportsDifferentLastPayment = function (supportsDifferentLastPayment) {
                    this.supportsDifferentLastPayment = supportsDifferentLastPayment;
                };
                BillpayV1MessageSetInfo.prototype.getSupportsBillPresentmentContext = function () {
                    return this.supportsBillPresentmentContext;
                };
                BillpayV1MessageSetInfo.prototype.setSupportsBillPresentmentContext = function (supportsBillPresentmentContext) {
                    this.supportsBillPresentmentContext = supportsBillPresentmentContext;
                };
                return BillpayV1MessageSetInfo;
            }(VersionSpecificMessageSetInfo_3.VersionSpecificMessageSetInfo));
            exports_232("BillpayV1MessageSetInfo", BillpayV1MessageSetInfo);
            Aggregate_Add_115.Aggregate_add(BillpayV1MessageSetInfo, "BILLPAYMSGSETV1");
            Element_add_72.Element_add(BillpayV1MessageSetInfo, { name: "DAYSWITH", required: true, order: 10, type: Number, read: BillpayV1MessageSetInfo.prototype.getDaysWith, write: BillpayV1MessageSetInfo.prototype.setDaysWith });
            Element_add_72.Element_add(BillpayV1MessageSetInfo, { name: "DFLTDAYSTOPAY", required: true, order: 20, type: Number, read: BillpayV1MessageSetInfo.prototype.getDefaultDaysToPay, write: BillpayV1MessageSetInfo.prototype.setDefaultDaysToPay });
            Element_add_72.Element_add(BillpayV1MessageSetInfo, { name: "XFERDAYSWITH", required: true, order: 30, type: Number, read: BillpayV1MessageSetInfo.prototype.getTransferDaysWith, write: BillpayV1MessageSetInfo.prototype.setTransferDaysWith });
            Element_add_72.Element_add(BillpayV1MessageSetInfo, { name: "XFERDFLTDAYSTOPAY", required: true, order: 40, type: Number, read: BillpayV1MessageSetInfo.prototype.getTransferDefaultDaysToPay, write: BillpayV1MessageSetInfo.prototype.setTransferDefaultDaysToPay });
            Element_add_72.Element_add(BillpayV1MessageSetInfo, { name: "PROCDAYSOFF", order: 50, type: Array, /*collectionEntryType: ProcessorDayOff,*/ read: BillpayV1MessageSetInfo.prototype.getProcessorDaysOff, write: BillpayV1MessageSetInfo.prototype.setProcessorDaysOff });
            Element_add_72.Element_add(BillpayV1MessageSetInfo, { name: "PROCENDTM", required: true, order: 60, type: String, read: BillpayV1MessageSetInfo.prototype.getProcessorEndTime, write: BillpayV1MessageSetInfo.prototype.setProcessorEndTime });
            Element_add_72.Element_add(BillpayV1MessageSetInfo, { name: "MODELWND", required: true, order: 70, type: Number, read: BillpayV1MessageSetInfo.prototype.getModelWindow, write: BillpayV1MessageSetInfo.prototype.setModelWindow });
            Element_add_72.Element_add(BillpayV1MessageSetInfo, { name: "POSTPROCWND", required: true, order: 80, type: Number, read: BillpayV1MessageSetInfo.prototype.getPostProcessorWindow, write: BillpayV1MessageSetInfo.prototype.setPostProcessorWindow });
            Element_add_72.Element_add(BillpayV1MessageSetInfo, { name: "STSVIAMODS", required: true, order: 90, type: Boolean, read: BillpayV1MessageSetInfo.prototype.getSupportsStatusUpdateViaPaymentModificationResponse, write: BillpayV1MessageSetInfo.prototype.setSupportsStatusUpdateViaPaymentModificationResponse });
            Element_add_72.Element_add(BillpayV1MessageSetInfo, { name: "PMTBYADDR", required: true, order: 100, type: Boolean, read: BillpayV1MessageSetInfo.prototype.getSupportsPaymentByAddress, write: BillpayV1MessageSetInfo.prototype.setSupportsPaymentByAddress });
            Element_add_72.Element_add(BillpayV1MessageSetInfo, { name: "PMTBYXFER", required: true, order: 110, type: Boolean, read: BillpayV1MessageSetInfo.prototype.getSupportsPaymentByTransfer, write: BillpayV1MessageSetInfo.prototype.setSupportsPaymentByTransfer });
            Element_add_72.Element_add(BillpayV1MessageSetInfo, { name: "PMTBYPAYEEID", required: true, order: 120, type: Boolean, read: BillpayV1MessageSetInfo.prototype.getSupportsPaymentByPayeeId, write: BillpayV1MessageSetInfo.prototype.setSupportsPaymentByPayeeId });
            Element_add_72.Element_add(BillpayV1MessageSetInfo, { name: "CANADDPAYEE", required: true, order: 130, type: Boolean, read: BillpayV1MessageSetInfo.prototype.getUserCanAddPayee, write: BillpayV1MessageSetInfo.prototype.setUserCanAddPayee });
            Element_add_72.Element_add(BillpayV1MessageSetInfo, { name: "HASEXTDPMT", required: true, order: 140, type: Boolean, read: BillpayV1MessageSetInfo.prototype.getSupportsExtendedPayment, write: BillpayV1MessageSetInfo.prototype.setSupportsExtendedPayment });
            Element_add_72.Element_add(BillpayV1MessageSetInfo, { name: "CANMODPMTS", required: true, order: 150, type: Boolean, read: BillpayV1MessageSetInfo.prototype.getCanModifyPayments, write: BillpayV1MessageSetInfo.prototype.setCanModifyPayments });
            Element_add_72.Element_add(BillpayV1MessageSetInfo, { name: "CANMODMDLS", required: true, order: 160, type: Boolean, read: BillpayV1MessageSetInfo.prototype.getCanModifyModels, write: BillpayV1MessageSetInfo.prototype.setCanModifyModels });
            Element_add_72.Element_add(BillpayV1MessageSetInfo, { name: "DIFFFIRSTPMT", required: true, order: 170, type: Boolean, read: BillpayV1MessageSetInfo.prototype.getSupportsDifferentFirstPayment, write: BillpayV1MessageSetInfo.prototype.setSupportsDifferentFirstPayment });
            Element_add_72.Element_add(BillpayV1MessageSetInfo, { name: "DIFFLASTPMT", required: true, order: 180, type: Boolean, read: BillpayV1MessageSetInfo.prototype.getSupportsDifferentLastPayment, write: BillpayV1MessageSetInfo.prototype.setSupportsDifferentLastPayment });
            Element_add_72.Element_add(BillpayV1MessageSetInfo, { name: "BILLPUBCONTEXT", order: 190, type: Boolean, read: BillpayV1MessageSetInfo.prototype.getSupportsBillPresentmentContext, write: BillpayV1MessageSetInfo.prototype.setSupportsBillPresentmentContext });
        }
    };
});
System.register("domain/data/profile/info/BillpayMessageSetInfo", ["domain/data/profile/AbstractMessageSetInfo", "domain/data/profile/info/BillpayV1MessageSetInfo", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_233, context_233) {
    "use strict";
    var AbstractMessageSetInfo_3, BillpayV1MessageSetInfo_1, Aggregate_Add_116, ChildAggregate_add_82, BillpayMessageSetInfo;
    var __moduleName = context_233 && context_233.id;
    return {
        setters: [
            function (AbstractMessageSetInfo_3_1) {
                AbstractMessageSetInfo_3 = AbstractMessageSetInfo_3_1;
            },
            function (BillpayV1MessageSetInfo_1_1) {
                BillpayV1MessageSetInfo_1 = BillpayV1MessageSetInfo_1_1;
            },
            function (Aggregate_Add_116_1) {
                Aggregate_Add_116 = Aggregate_Add_116_1;
            },
            function (ChildAggregate_add_82_1) {
                ChildAggregate_add_82 = ChildAggregate_add_82_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            BillpayMessageSetInfo = /** @class */ (function (_super) {
                __extends(BillpayMessageSetInfo, _super);
                function BillpayMessageSetInfo() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                BillpayMessageSetInfo.prototype.getVersion1Info = function () {
                    return this.version1Info;
                };
                BillpayMessageSetInfo.prototype.setVersion1Info = function (version1Info) {
                    this.version1Info = version1Info;
                };
                return BillpayMessageSetInfo;
            }(AbstractMessageSetInfo_3.AbstractMessageSetInfo));
            exports_233("BillpayMessageSetInfo", BillpayMessageSetInfo);
            Aggregate_Add_116.Aggregate_add(BillpayMessageSetInfo, "BILLPAYMSGSET");
            ChildAggregate_add_82.ChildAggregate_add(BillpayMessageSetInfo, { order: 0, type: BillpayV1MessageSetInfo_1.BillpayV1MessageSetInfo, read: BillpayMessageSetInfo.prototype.getVersion1Info, write: BillpayMessageSetInfo.prototype.setVersion1Info });
        }
    };
});
System.register("domain/data/profile/info/CreditCardV1MessageSetInfo", ["domain/data/profile/VersionSpecificMessageSetInfo", "domain/data/profile/info/common/ImageProfile", "domain/data/MessageSetType", "meta/Aggregate_add", "meta/Element_add", "meta/ChildAggregate_add"], function (exports_234, context_234) {
    "use strict";
    var VersionSpecificMessageSetInfo_4, ImageProfile_2, MessageSetType_23, Aggregate_Add_117, Element_add_73, ChildAggregate_add_83, CreditCardV1MessageSetInfo;
    var __moduleName = context_234 && context_234.id;
    return {
        setters: [
            function (VersionSpecificMessageSetInfo_4_1) {
                VersionSpecificMessageSetInfo_4 = VersionSpecificMessageSetInfo_4_1;
            },
            function (ImageProfile_2_1) {
                ImageProfile_2 = ImageProfile_2_1;
            },
            function (MessageSetType_23_1) {
                MessageSetType_23 = MessageSetType_23_1;
            },
            function (Aggregate_Add_117_1) {
                Aggregate_Add_117 = Aggregate_Add_117_1;
            },
            function (Element_add_73_1) {
                Element_add_73 = Element_add_73_1;
            },
            function (ChildAggregate_add_83_1) {
                ChildAggregate_add_83 = ChildAggregate_add_83_1;
            }
        ],
        execute: function () {
            /**
             * Credit Card Message Set Profile
             * @author Scott Priddy
             * @author Ryan Heaton
             * @see "Section 11.13.3 OFX Spec"
             */
            CreditCardV1MessageSetInfo = /** @class */ (function (_super) {
                __extends(CreditCardV1MessageSetInfo, _super);
                function CreditCardV1MessageSetInfo() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                CreditCardV1MessageSetInfo.prototype.getMessageSetType = function () {
                    return MessageSetType_23.MessageSetType.creditcard;
                };
                /**
                 * Closing statement information available
                 * @return Boolean
                 */
                CreditCardV1MessageSetInfo.prototype.getClosingAvail = function () {
                    return this.closingAvail;
                };
                CreditCardV1MessageSetInfo.prototype.setClosingAvail = function (closingAvail) {
                    this.closingAvail = closingAvail;
                };
                /**
                 * Image profile (if supported)
                 * @return ImageProfile
                 */
                CreditCardV1MessageSetInfo.prototype.getImageProfile = function () {
                    return this.imageProfile;
                };
                CreditCardV1MessageSetInfo.prototype.setImageProfile = function (imageProfile) {
                    this.imageProfile = imageProfile;
                };
                return CreditCardV1MessageSetInfo;
            }(VersionSpecificMessageSetInfo_4.VersionSpecificMessageSetInfo));
            exports_234("CreditCardV1MessageSetInfo", CreditCardV1MessageSetInfo);
            Aggregate_Add_117.Aggregate_add(CreditCardV1MessageSetInfo, "CREDITCARDMSGSETV1");
            Element_add_73.Element_add(CreditCardV1MessageSetInfo, { name: "CLOSINGAVAIL", required: true, order: 20, type: Boolean, read: CreditCardV1MessageSetInfo.prototype.getClosingAvail, write: CreditCardV1MessageSetInfo.prototype.setClosingAvail });
            ChildAggregate_add_83.ChildAggregate_add(CreditCardV1MessageSetInfo, { name: "IMAGEPROF", order: 10, type: ImageProfile_2.ImageProfile, read: CreditCardV1MessageSetInfo.prototype.getImageProfile, write: CreditCardV1MessageSetInfo.prototype.setImageProfile });
        }
    };
});
System.register("domain/data/profile/info/CreditCardMessageSetInfo", ["domain/data/profile/AbstractMessageSetInfo", "domain/data/profile/info/CreditCardV1MessageSetInfo", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_235, context_235) {
    "use strict";
    var AbstractMessageSetInfo_4, CreditCardV1MessageSetInfo_1, Aggregate_Add_118, ChildAggregate_add_84, CreditCardMessageSetInfo;
    var __moduleName = context_235 && context_235.id;
    return {
        setters: [
            function (AbstractMessageSetInfo_4_1) {
                AbstractMessageSetInfo_4 = AbstractMessageSetInfo_4_1;
            },
            function (CreditCardV1MessageSetInfo_1_1) {
                CreditCardV1MessageSetInfo_1 = CreditCardV1MessageSetInfo_1_1;
            },
            function (Aggregate_Add_118_1) {
                Aggregate_Add_118 = Aggregate_Add_118_1;
            },
            function (ChildAggregate_add_84_1) {
                ChildAggregate_add_84 = ChildAggregate_add_84_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            CreditCardMessageSetInfo = /** @class */ (function (_super) {
                __extends(CreditCardMessageSetInfo, _super);
                function CreditCardMessageSetInfo() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                CreditCardMessageSetInfo.prototype.getVersion1Info = function () {
                    return this.version1Info;
                };
                CreditCardMessageSetInfo.prototype.setVersion1Info = function (version1Info) {
                    this.version1Info = version1Info;
                };
                return CreditCardMessageSetInfo;
            }(AbstractMessageSetInfo_4.AbstractMessageSetInfo));
            exports_235("CreditCardMessageSetInfo", CreditCardMessageSetInfo);
            Aggregate_Add_118.Aggregate_add(CreditCardMessageSetInfo, "CREDITCARDMSGSET");
            ChildAggregate_add_84.ChildAggregate_add(CreditCardMessageSetInfo, { order: 0, type: CreditCardV1MessageSetInfo_1.CreditCardV1MessageSetInfo, read: CreditCardMessageSetInfo.prototype.getVersion1Info, write: CreditCardMessageSetInfo.prototype.setVersion1Info });
        }
    };
});
System.register("domain/data/profile/info/EmailV1MessageSetInfo", ["domain/data/profile/VersionSpecificMessageSetInfo", "domain/data/MessageSetType", "meta/Aggregate_add", "meta/Element_add"], function (exports_236, context_236) {
    "use strict";
    var VersionSpecificMessageSetInfo_5, MessageSetType_24, Aggregate_Add_119, Element_add_74, EmailV1MessageSetInfo;
    var __moduleName = context_236 && context_236.id;
    return {
        setters: [
            function (VersionSpecificMessageSetInfo_5_1) {
                VersionSpecificMessageSetInfo_5 = VersionSpecificMessageSetInfo_5_1;
            },
            function (MessageSetType_24_1) {
                MessageSetType_24 = MessageSetType_24_1;
            },
            function (Aggregate_Add_119_1) {
                Aggregate_Add_119 = Aggregate_Add_119_1;
            },
            function (Element_add_74_1) {
                Element_add_74 = Element_add_74_1;
            }
        ],
        execute: function () {
            /**
             * Email Message Set Profile Information
             * @author Scott Priddy
             * @author Ryan Heaton
             * @see "Section 9.4.2 OFX Spec"
             */
            EmailV1MessageSetInfo = /** @class */ (function (_super) {
                __extends(EmailV1MessageSetInfo, _super);
                function EmailV1MessageSetInfo() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                EmailV1MessageSetInfo.prototype.getMessageSetType = function () {
                    return MessageSetType_24.MessageSetType.email;
                };
                /**
                 * Y if server supports <MAILRQ> request.
                 * N if server supports only the <MAILSYNCRQ> request.
                 * @return Boolean
                 */
                EmailV1MessageSetInfo.prototype.getSupportsMail = function () {
                    return this.supportsMail;
                };
                EmailV1MessageSetInfo.prototype.setSupportsMail = function (supportsMail) {
                    this.supportsMail = supportsMail;
                };
                /**
                 * Y if server supports get MIME message
                 * @return Boolean
                 */
                EmailV1MessageSetInfo.prototype.getSupportsMimeType = function () {
                    return this.supportsMimeType;
                };
                EmailV1MessageSetInfo.prototype.setSupportsMimeType = function (supportsMimeType) {
                    this.supportsMimeType = supportsMimeType;
                };
                return EmailV1MessageSetInfo;
            }(VersionSpecificMessageSetInfo_5.VersionSpecificMessageSetInfo));
            exports_236("EmailV1MessageSetInfo", EmailV1MessageSetInfo);
            Aggregate_Add_119.Aggregate_add(EmailV1MessageSetInfo, "EMAILMSGSETV1");
            Element_add_74.Element_add(EmailV1MessageSetInfo, { name: "MAILSUP", required: true, order: 10, type: Boolean, read: EmailV1MessageSetInfo.prototype.getSupportsMail, write: EmailV1MessageSetInfo.prototype.setSupportsMail });
            Element_add_74.Element_add(EmailV1MessageSetInfo, { name: "GETMIMESUP", required: true, order: 20, type: Boolean, read: EmailV1MessageSetInfo.prototype.getSupportsMimeType, write: EmailV1MessageSetInfo.prototype.setSupportsMimeType });
        }
    };
});
System.register("domain/data/profile/info/EmailMessageSetInfo", ["domain/data/profile/AbstractMessageSetInfo", "domain/data/profile/info/EmailV1MessageSetInfo", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_237, context_237) {
    "use strict";
    var AbstractMessageSetInfo_5, EmailV1MessageSetInfo_1, Aggregate_Add_120, ChildAggregate_add_85, EmailMessageSetInfo;
    var __moduleName = context_237 && context_237.id;
    return {
        setters: [
            function (AbstractMessageSetInfo_5_1) {
                AbstractMessageSetInfo_5 = AbstractMessageSetInfo_5_1;
            },
            function (EmailV1MessageSetInfo_1_1) {
                EmailV1MessageSetInfo_1 = EmailV1MessageSetInfo_1_1;
            },
            function (Aggregate_Add_120_1) {
                Aggregate_Add_120 = Aggregate_Add_120_1;
            },
            function (ChildAggregate_add_85_1) {
                ChildAggregate_add_85 = ChildAggregate_add_85_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            EmailMessageSetInfo = /** @class */ (function (_super) {
                __extends(EmailMessageSetInfo, _super);
                function EmailMessageSetInfo() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                EmailMessageSetInfo.prototype.getVersion1Info = function () {
                    return this.version1Info;
                };
                EmailMessageSetInfo.prototype.setVersion1Info = function (version1Info) {
                    this.version1Info = version1Info;
                };
                return EmailMessageSetInfo;
            }(AbstractMessageSetInfo_5.AbstractMessageSetInfo));
            exports_237("EmailMessageSetInfo", EmailMessageSetInfo);
            Aggregate_Add_120.Aggregate_add(EmailMessageSetInfo, "EMAILMSGSET");
            ChildAggregate_add_85.ChildAggregate_add(EmailMessageSetInfo, { order: 0, type: EmailV1MessageSetInfo_1.EmailV1MessageSetInfo, read: EmailMessageSetInfo.prototype.getVersion1Info, write: EmailMessageSetInfo.prototype.setVersion1Info });
        }
    };
});
System.register("domain/data/profile/info/InterbankTransferV1MessageSetInfo", ["domain/data/profile/VersionSpecificMessageSetInfo", "domain/data/profile/info/common/TransferProfile", "domain/data/MessageSetType", "meta/Aggregate_add", "meta/ChildAggregate_add", "meta/Element_add"], function (exports_238, context_238) {
    "use strict";
    var VersionSpecificMessageSetInfo_6, TransferProfile_2, MessageSetType_25, Aggregate_Add_121, ChildAggregate_add_86, Element_add_75, InterbankTransferV1MessageSetInfo;
    var __moduleName = context_238 && context_238.id;
    return {
        setters: [
            function (VersionSpecificMessageSetInfo_6_1) {
                VersionSpecificMessageSetInfo_6 = VersionSpecificMessageSetInfo_6_1;
            },
            function (TransferProfile_2_1) {
                TransferProfile_2 = TransferProfile_2_1;
            },
            function (MessageSetType_25_1) {
                MessageSetType_25 = MessageSetType_25_1;
            },
            function (Aggregate_Add_121_1) {
                Aggregate_Add_121 = Aggregate_Add_121_1;
            },
            function (ChildAggregate_add_86_1) {
                ChildAggregate_add_86 = ChildAggregate_add_86_1;
            },
            function (Element_add_75_1) {
                Element_add_75 = Element_add_75_1;
            }
        ],
        execute: function () {
            /**
             * Interbank Funds Transfer Message Set Profile
             * @author Scott Priddy
             * @author Ryan Heaton
             * @see "Section 11.13.4 OFX Spec"
             */
            InterbankTransferV1MessageSetInfo = /** @class */ (function (_super) {
                __extends(InterbankTransferV1MessageSetInfo, _super);
                function InterbankTransferV1MessageSetInfo() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                InterbankTransferV1MessageSetInfo.prototype.getMessageSetType = function () {
                    return MessageSetType_25.MessageSetType.interbank_transfer;
                };
                InterbankTransferV1MessageSetInfo.prototype.getTransferProfile = function () {
                    return this.transferProfile;
                };
                InterbankTransferV1MessageSetInfo.prototype.setTransferProfile = function (transferProfile) {
                    this.transferProfile = transferProfile;
                };
                InterbankTransferV1MessageSetInfo.prototype.getSupportsBillPay = function () {
                    return this.supportsBillPay;
                };
                InterbankTransferV1MessageSetInfo.prototype.setSupportsBillPay = function (supportsBillPay) {
                    this.supportsBillPay = supportsBillPay;
                };
                InterbankTransferV1MessageSetInfo.prototype.getCancelWindow = function () {
                    return this.cancelWindow;
                };
                InterbankTransferV1MessageSetInfo.prototype.setCancelWindow = function (cancelWindow) {
                    this.cancelWindow = cancelWindow;
                };
                InterbankTransferV1MessageSetInfo.prototype.getDomesticInterbankTransferFee = function () {
                    return this.domesticInterbankTransferFee;
                };
                InterbankTransferV1MessageSetInfo.prototype.setDomesticInterbankTransferFee = function (domesticInterbankTransferFee) {
                    this.domesticInterbankTransferFee = domesticInterbankTransferFee;
                };
                InterbankTransferV1MessageSetInfo.prototype.getInternationalInterbankTransferFee = function () {
                    return this.internationalInterbankTransferFee;
                };
                InterbankTransferV1MessageSetInfo.prototype.setInternationalInterbankTransferFee = function (internationalInterbankTransferFee) {
                    this.internationalInterbankTransferFee = internationalInterbankTransferFee;
                };
                return InterbankTransferV1MessageSetInfo;
            }(VersionSpecificMessageSetInfo_6.VersionSpecificMessageSetInfo));
            exports_238("InterbankTransferV1MessageSetInfo", InterbankTransferV1MessageSetInfo);
            Aggregate_Add_121.Aggregate_add(InterbankTransferV1MessageSetInfo, "INTERXFERMSGSETV1");
            ChildAggregate_add_86.ChildAggregate_add(InterbankTransferV1MessageSetInfo, { name: "XFERPROF", required: true, order: 10, type: TransferProfile_2.TransferProfile, read: InterbankTransferV1MessageSetInfo.prototype.getTransferProfile, write: InterbankTransferV1MessageSetInfo.prototype.setTransferProfile });
            Element_add_75.Element_add(InterbankTransferV1MessageSetInfo, { name: "CANBILLPAY", required: true, order: 20, type: Boolean, read: InterbankTransferV1MessageSetInfo.prototype.getSupportsBillPay, write: InterbankTransferV1MessageSetInfo.prototype.setSupportsBillPay });
            Element_add_75.Element_add(InterbankTransferV1MessageSetInfo, { name: "CANCELWND", required: true, order: 30, type: Number, read: InterbankTransferV1MessageSetInfo.prototype.getCancelWindow, write: InterbankTransferV1MessageSetInfo.prototype.setCancelWindow });
            Element_add_75.Element_add(InterbankTransferV1MessageSetInfo, { name: "DOMXFERFEE", required: true, order: 40, type: Number, read: InterbankTransferV1MessageSetInfo.prototype.getDomesticInterbankTransferFee, write: InterbankTransferV1MessageSetInfo.prototype.setDomesticInterbankTransferFee });
            Element_add_75.Element_add(InterbankTransferV1MessageSetInfo, { name: "INTLXFERFEE", required: true, order: 50, type: Number, read: InterbankTransferV1MessageSetInfo.prototype.getInternationalInterbankTransferFee, write: InterbankTransferV1MessageSetInfo.prototype.setInternationalInterbankTransferFee });
        }
    };
});
System.register("domain/data/profile/info/InterbankTransferMessageSetInfo", ["domain/data/profile/AbstractMessageSetInfo", "domain/data/profile/info/InterbankTransferV1MessageSetInfo", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_239, context_239) {
    "use strict";
    var AbstractMessageSetInfo_6, InterbankTransferV1MessageSetInfo_1, Aggregate_Add_122, ChildAggregate_add_87, InterbankTransferMessageSetInfo;
    var __moduleName = context_239 && context_239.id;
    return {
        setters: [
            function (AbstractMessageSetInfo_6_1) {
                AbstractMessageSetInfo_6 = AbstractMessageSetInfo_6_1;
            },
            function (InterbankTransferV1MessageSetInfo_1_1) {
                InterbankTransferV1MessageSetInfo_1 = InterbankTransferV1MessageSetInfo_1_1;
            },
            function (Aggregate_Add_122_1) {
                Aggregate_Add_122 = Aggregate_Add_122_1;
            },
            function (ChildAggregate_add_87_1) {
                ChildAggregate_add_87 = ChildAggregate_add_87_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            InterbankTransferMessageSetInfo = /** @class */ (function (_super) {
                __extends(InterbankTransferMessageSetInfo, _super);
                function InterbankTransferMessageSetInfo() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                InterbankTransferMessageSetInfo.prototype.getVersion1Info = function () {
                    return this.version1Info;
                };
                InterbankTransferMessageSetInfo.prototype.setVersion1Info = function (version1Info) {
                    this.version1Info = version1Info;
                };
                return InterbankTransferMessageSetInfo;
            }(AbstractMessageSetInfo_6.AbstractMessageSetInfo));
            exports_239("InterbankTransferMessageSetInfo", InterbankTransferMessageSetInfo);
            Aggregate_Add_122.Aggregate_add(InterbankTransferMessageSetInfo, "INTERXFERMSGSET");
            ChildAggregate_add_87.ChildAggregate_add(InterbankTransferMessageSetInfo, { order: 0, type: InterbankTransferV1MessageSetInfo_1.InterbankTransferV1MessageSetInfo, read: InterbankTransferMessageSetInfo.prototype.getVersion1Info, write: InterbankTransferMessageSetInfo.prototype.setVersion1Info });
        }
    };
});
System.register("domain/data/profile/info/InvestmentV1MessageSetInfo", ["domain/data/profile/VersionSpecificMessageSetInfo", "domain/data/MessageSetType", "meta/Aggregate_add", "meta/Element_add"], function (exports_240, context_240) {
    "use strict";
    var VersionSpecificMessageSetInfo_7, MessageSetType_26, Aggregate_Add_123, Element_add_76, InvestmentV1MessageSetInfo;
    var __moduleName = context_240 && context_240.id;
    return {
        setters: [
            function (VersionSpecificMessageSetInfo_7_1) {
                VersionSpecificMessageSetInfo_7 = VersionSpecificMessageSetInfo_7_1;
            },
            function (MessageSetType_26_1) {
                MessageSetType_26 = MessageSetType_26_1;
            },
            function (Aggregate_Add_123_1) {
                Aggregate_Add_123 = Aggregate_Add_123_1;
            },
            function (Element_add_76_1) {
                Element_add_76 = Element_add_76_1;
            }
        ],
        execute: function () {
            /**
             * @see "Section 13.7.1.1, OFX Spec"
             *
             * @author Jon Perlow
             * @author Ryan Heaton
             */
            InvestmentV1MessageSetInfo = /** @class */ (function (_super) {
                __extends(InvestmentV1MessageSetInfo, _super);
                function InvestmentV1MessageSetInfo() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                InvestmentV1MessageSetInfo.prototype.getMessageSetType = function () {
                    return MessageSetType_26.MessageSetType.investment;
                };
                InvestmentV1MessageSetInfo.prototype.getSupportsStatementsDownload = function () {
                    return this.supportsStatementsDownload;
                };
                InvestmentV1MessageSetInfo.prototype.setSupportsStatementsDownload = function (supportsStatementsDownload) {
                    this.supportsStatementsDownload = supportsStatementsDownload;
                };
                InvestmentV1MessageSetInfo.prototype.getSupportsOpenOrdersDownload = function () {
                    return this.supportsOpenOrdersDownload;
                };
                InvestmentV1MessageSetInfo.prototype.setSupportsOpenOrdersDownload = function (supportsOpenOrdersDownload) {
                    this.supportsOpenOrdersDownload = supportsOpenOrdersDownload;
                };
                InvestmentV1MessageSetInfo.prototype.getSupportsPositionsDownload = function () {
                    return this.supportsPositionsDownload;
                };
                InvestmentV1MessageSetInfo.prototype.setSupportsPositionsDownload = function (supportsPositionsDownload) {
                    this.supportsPositionsDownload = supportsPositionsDownload;
                };
                InvestmentV1MessageSetInfo.prototype.getSupportsBalanceDownload = function () {
                    return this.supportsBalanceDownload;
                };
                InvestmentV1MessageSetInfo.prototype.setSupportsBalanceDownload = function (supportsBalanceDownload) {
                    this.supportsBalanceDownload = supportsBalanceDownload;
                };
                InvestmentV1MessageSetInfo.prototype.getSupportsEmail = function () {
                    return this.supportsEmail;
                };
                InvestmentV1MessageSetInfo.prototype.setSupportsEmail = function (supportsEmail) {
                    this.supportsEmail = supportsEmail;
                };
                InvestmentV1MessageSetInfo.prototype.getSupports401kInformation = function () {
                    return this.supports401kInformation;
                };
                InvestmentV1MessageSetInfo.prototype.setSupports401kInformation = function (supports401kInformation) {
                    this.supports401kInformation = supports401kInformation;
                };
                InvestmentV1MessageSetInfo.prototype.getSupportsClosingStatements = function () {
                    return this.supportsClosingStatements;
                };
                InvestmentV1MessageSetInfo.prototype.setSupportsClosingStatements = function (supportsClosingStatements) {
                    this.supportsClosingStatements = supportsClosingStatements;
                };
                return InvestmentV1MessageSetInfo;
            }(VersionSpecificMessageSetInfo_7.VersionSpecificMessageSetInfo));
            exports_240("InvestmentV1MessageSetInfo", InvestmentV1MessageSetInfo);
            Aggregate_Add_123.Aggregate_add(InvestmentV1MessageSetInfo, "INVSTMTMSGSETV1");
            Element_add_76.Element_add(InvestmentV1MessageSetInfo, { name: "TRANDNLD", required: true, order: 10, type: Boolean, read: InvestmentV1MessageSetInfo.prototype.getSupportsStatementsDownload, write: InvestmentV1MessageSetInfo.prototype.setSupportsStatementsDownload });
            Element_add_76.Element_add(InvestmentV1MessageSetInfo, { name: "OODNLD", required: true, order: 20, type: Boolean, read: InvestmentV1MessageSetInfo.prototype.getSupportsOpenOrdersDownload, write: InvestmentV1MessageSetInfo.prototype.setSupportsOpenOrdersDownload });
            Element_add_76.Element_add(InvestmentV1MessageSetInfo, { name: "POSDNLD", required: true, order: 30, type: Boolean, read: InvestmentV1MessageSetInfo.prototype.getSupportsPositionsDownload, write: InvestmentV1MessageSetInfo.prototype.setSupportsPositionsDownload });
            Element_add_76.Element_add(InvestmentV1MessageSetInfo, { name: "BALDNLD", required: true, order: 40, type: Boolean, read: InvestmentV1MessageSetInfo.prototype.getSupportsBalanceDownload, write: InvestmentV1MessageSetInfo.prototype.setSupportsBalanceDownload });
            Element_add_76.Element_add(InvestmentV1MessageSetInfo, { name: "CANEMAIL", required: true, order: 50, type: Boolean, read: InvestmentV1MessageSetInfo.prototype.getSupportsEmail, write: InvestmentV1MessageSetInfo.prototype.setSupportsEmail });
            Element_add_76.Element_add(InvestmentV1MessageSetInfo, { name: "INV401KDNLD", order: 60, type: Boolean, read: InvestmentV1MessageSetInfo.prototype.getSupports401kInformation, write: InvestmentV1MessageSetInfo.prototype.setSupports401kInformation });
            Element_add_76.Element_add(InvestmentV1MessageSetInfo, { name: "CLOSINGAVAIL", order: 70, type: Boolean, read: InvestmentV1MessageSetInfo.prototype.getSupportsClosingStatements, write: InvestmentV1MessageSetInfo.prototype.setSupportsClosingStatements });
        }
    };
});
System.register("domain/data/profile/info/InvestmentMessageSetInfo", ["domain/data/profile/AbstractMessageSetInfo", "domain/data/profile/info/InvestmentV1MessageSetInfo", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_241, context_241) {
    "use strict";
    var AbstractMessageSetInfo_7, InvestmentV1MessageSetInfo_1, Aggregate_Add_124, ChildAggregate_add_88, InvestmentMessageSetInfo;
    var __moduleName = context_241 && context_241.id;
    return {
        setters: [
            function (AbstractMessageSetInfo_7_1) {
                AbstractMessageSetInfo_7 = AbstractMessageSetInfo_7_1;
            },
            function (InvestmentV1MessageSetInfo_1_1) {
                InvestmentV1MessageSetInfo_1 = InvestmentV1MessageSetInfo_1_1;
            },
            function (Aggregate_Add_124_1) {
                Aggregate_Add_124 = Aggregate_Add_124_1;
            },
            function (ChildAggregate_add_88_1) {
                ChildAggregate_add_88 = ChildAggregate_add_88_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            InvestmentMessageSetInfo = /** @class */ (function (_super) {
                __extends(InvestmentMessageSetInfo, _super);
                function InvestmentMessageSetInfo() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                InvestmentMessageSetInfo.prototype.getVersion1Info = function () {
                    return this.version1Info;
                };
                InvestmentMessageSetInfo.prototype.setVersion1Info = function (version1Info) {
                    this.version1Info = version1Info;
                };
                return InvestmentMessageSetInfo;
            }(AbstractMessageSetInfo_7.AbstractMessageSetInfo));
            exports_241("InvestmentMessageSetInfo", InvestmentMessageSetInfo);
            Aggregate_Add_124.Aggregate_add(InvestmentMessageSetInfo, "INVSTMTMSGSET");
            ChildAggregate_add_88.ChildAggregate_add(InvestmentMessageSetInfo, { order: 0, type: InvestmentV1MessageSetInfo_1.InvestmentV1MessageSetInfo, read: InvestmentMessageSetInfo.prototype.getVersion1Info, write: InvestmentMessageSetInfo.prototype.setVersion1Info });
        }
    };
});
System.register("domain/data/profile/info/ProfileV1MessageSetInfo", ["domain/data/profile/VersionSpecificMessageSetInfo", "domain/data/MessageSetType", "meta/Aggregate_add"], function (exports_242, context_242) {
    "use strict";
    var VersionSpecificMessageSetInfo_8, MessageSetType_27, Aggregate_Add_125, ProfileV1MessageSetInfo;
    var __moduleName = context_242 && context_242.id;
    return {
        setters: [
            function (VersionSpecificMessageSetInfo_8_1) {
                VersionSpecificMessageSetInfo_8 = VersionSpecificMessageSetInfo_8_1;
            },
            function (MessageSetType_27_1) {
                MessageSetType_27 = MessageSetType_27_1;
            },
            function (Aggregate_Add_125_1) {
                Aggregate_Add_125 = Aggregate_Add_125_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            ProfileV1MessageSetInfo = /** @class */ (function (_super) {
                __extends(ProfileV1MessageSetInfo, _super);
                function ProfileV1MessageSetInfo() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                ProfileV1MessageSetInfo.prototype.getMessageSetType = function () {
                    return MessageSetType_27.MessageSetType.profile;
                };
                return ProfileV1MessageSetInfo;
            }(VersionSpecificMessageSetInfo_8.VersionSpecificMessageSetInfo));
            exports_242("ProfileV1MessageSetInfo", ProfileV1MessageSetInfo);
            Aggregate_Add_125.Aggregate_add(ProfileV1MessageSetInfo, "PROFMSGSETV1");
        }
    };
});
System.register("domain/data/profile/info/ProfileMessageSetInfo", ["domain/data/profile/AbstractMessageSetInfo", "domain/data/profile/info/ProfileV1MessageSetInfo", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_243, context_243) {
    "use strict";
    var AbstractMessageSetInfo_8, ProfileV1MessageSetInfo_1, Aggregate_Add_126, ChildAggregate_add_89, ProfileMessageSetInfo;
    var __moduleName = context_243 && context_243.id;
    return {
        setters: [
            function (AbstractMessageSetInfo_8_1) {
                AbstractMessageSetInfo_8 = AbstractMessageSetInfo_8_1;
            },
            function (ProfileV1MessageSetInfo_1_1) {
                ProfileV1MessageSetInfo_1 = ProfileV1MessageSetInfo_1_1;
            },
            function (Aggregate_Add_126_1) {
                Aggregate_Add_126 = Aggregate_Add_126_1;
            },
            function (ChildAggregate_add_89_1) {
                ChildAggregate_add_89 = ChildAggregate_add_89_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            ProfileMessageSetInfo = /** @class */ (function (_super) {
                __extends(ProfileMessageSetInfo, _super);
                function ProfileMessageSetInfo() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                ProfileMessageSetInfo.prototype.getVersion1Info = function () {
                    return this.version1Info;
                };
                ProfileMessageSetInfo.prototype.setVersion1Info = function (version1Info) {
                    this.version1Info = version1Info;
                };
                return ProfileMessageSetInfo;
            }(AbstractMessageSetInfo_8.AbstractMessageSetInfo));
            exports_243("ProfileMessageSetInfo", ProfileMessageSetInfo);
            Aggregate_Add_126.Aggregate_add(ProfileMessageSetInfo, "PROFMSGSET");
            ChildAggregate_add_89.ChildAggregate_add(ProfileMessageSetInfo, { order: 0, type: ProfileV1MessageSetInfo_1.ProfileV1MessageSetInfo, read: ProfileMessageSetInfo.prototype.getVersion1Info, write: ProfileMessageSetInfo.prototype.setVersion1Info });
        }
    };
});
System.register("domain/data/profile/info/SecurityListV1MessageSetInfo", ["domain/data/profile/VersionSpecificMessageSetInfo", "domain/data/MessageSetType", "meta/Aggregate_add", "meta/Element_add"], function (exports_244, context_244) {
    "use strict";
    var VersionSpecificMessageSetInfo_9, MessageSetType_28, Aggregate_Add_127, Element_add_77, SecurityListV1MessageSetInfo;
    var __moduleName = context_244 && context_244.id;
    return {
        setters: [
            function (VersionSpecificMessageSetInfo_9_1) {
                VersionSpecificMessageSetInfo_9 = VersionSpecificMessageSetInfo_9_1;
            },
            function (MessageSetType_28_1) {
                MessageSetType_28 = MessageSetType_28_1;
            },
            function (Aggregate_Add_127_1) {
                Aggregate_Add_127 = Aggregate_Add_127_1;
            },
            function (Element_add_77_1) {
                Element_add_77 = Element_add_77_1;
            }
        ],
        execute: function () {
            /**
             * @see "Section 13.7.2.1, OFX Spec"
             *
             * @author Jon Perlow
             * @author Ryan Heaton
             */
            SecurityListV1MessageSetInfo = /** @class */ (function (_super) {
                __extends(SecurityListV1MessageSetInfo, _super);
                function SecurityListV1MessageSetInfo() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                SecurityListV1MessageSetInfo.prototype.getMessageSetType = function () {
                    return MessageSetType_28.MessageSetType.investment_security;
                };
                SecurityListV1MessageSetInfo.prototype.getSupportsSecurityListDownload = function () {
                    return this.supportsSecurityListDownload;
                };
                SecurityListV1MessageSetInfo.prototype.setSupportsSecurityListDownload = function (supportsSecurityListDownload) {
                    this.supportsSecurityListDownload = supportsSecurityListDownload;
                };
                return SecurityListV1MessageSetInfo;
            }(VersionSpecificMessageSetInfo_9.VersionSpecificMessageSetInfo));
            exports_244("SecurityListV1MessageSetInfo", SecurityListV1MessageSetInfo);
            Aggregate_Add_127.Aggregate_add(SecurityListV1MessageSetInfo, "SECLISTMSGSETV1");
            Element_add_77.Element_add(SecurityListV1MessageSetInfo, { name: "SECLISTRQDNLD", required: true, order: 10, type: Boolean, read: SecurityListV1MessageSetInfo.prototype.getSupportsSecurityListDownload, write: SecurityListV1MessageSetInfo.prototype.setSupportsSecurityListDownload });
        }
    };
});
System.register("domain/data/profile/info/SecurityListMessageSetInfo", ["domain/data/profile/AbstractMessageSetInfo", "domain/data/profile/info/SecurityListV1MessageSetInfo", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_245, context_245) {
    "use strict";
    var AbstractMessageSetInfo_9, SecurityListV1MessageSetInfo_1, Aggregate_Add_128, ChildAggregate_add_90, SecurityListMessageSetInfo;
    var __moduleName = context_245 && context_245.id;
    return {
        setters: [
            function (AbstractMessageSetInfo_9_1) {
                AbstractMessageSetInfo_9 = AbstractMessageSetInfo_9_1;
            },
            function (SecurityListV1MessageSetInfo_1_1) {
                SecurityListV1MessageSetInfo_1 = SecurityListV1MessageSetInfo_1_1;
            },
            function (Aggregate_Add_128_1) {
                Aggregate_Add_128 = Aggregate_Add_128_1;
            },
            function (ChildAggregate_add_90_1) {
                ChildAggregate_add_90 = ChildAggregate_add_90_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            SecurityListMessageSetInfo = /** @class */ (function (_super) {
                __extends(SecurityListMessageSetInfo, _super);
                function SecurityListMessageSetInfo() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                SecurityListMessageSetInfo.prototype.getVersion1Info = function () {
                    return this.version1Info;
                };
                SecurityListMessageSetInfo.prototype.setVersion1Info = function (version1Info) {
                    this.version1Info = version1Info;
                };
                return SecurityListMessageSetInfo;
            }(AbstractMessageSetInfo_9.AbstractMessageSetInfo));
            exports_245("SecurityListMessageSetInfo", SecurityListMessageSetInfo);
            Aggregate_Add_128.Aggregate_add(SecurityListMessageSetInfo, "SECLISTMSGSET");
            ChildAggregate_add_90.ChildAggregate_add(SecurityListMessageSetInfo, { order: 0, type: SecurityListV1MessageSetInfo_1.SecurityListV1MessageSetInfo, read: SecurityListMessageSetInfo.prototype.getVersion1Info, write: SecurityListMessageSetInfo.prototype.setVersion1Info });
        }
    };
});
System.register("domain/data/profile/info/SignOnV1MessageSetInfo", ["domain/data/profile/VersionSpecificMessageSetInfo", "domain/data/MessageSetType", "meta/Aggregate_add"], function (exports_246, context_246) {
    "use strict";
    var VersionSpecificMessageSetInfo_10, MessageSetType_29, Aggregate_Add_129, SignOnV1MessageSetInfo;
    var __moduleName = context_246 && context_246.id;
    return {
        setters: [
            function (VersionSpecificMessageSetInfo_10_1) {
                VersionSpecificMessageSetInfo_10 = VersionSpecificMessageSetInfo_10_1;
            },
            function (MessageSetType_29_1) {
                MessageSetType_29 = MessageSetType_29_1;
            },
            function (Aggregate_Add_129_1) {
                Aggregate_Add_129 = Aggregate_Add_129_1;
            }
        ],
        execute: function () {
            /**
             * @author Jon Perlow
             */
            SignOnV1MessageSetInfo = /** @class */ (function (_super) {
                __extends(SignOnV1MessageSetInfo, _super);
                function SignOnV1MessageSetInfo() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                SignOnV1MessageSetInfo.prototype.getMessageSetType = function () {
                    return MessageSetType_29.MessageSetType.signon;
                };
                return SignOnV1MessageSetInfo;
            }(VersionSpecificMessageSetInfo_10.VersionSpecificMessageSetInfo));
            exports_246("SignOnV1MessageSetInfo", SignOnV1MessageSetInfo);
            Aggregate_Add_129.Aggregate_add(SignOnV1MessageSetInfo, "SIGNONMSGSETV1");
        }
    };
});
System.register("domain/data/profile/info/SignOnMessageSetInfo", ["domain/data/profile/AbstractMessageSetInfo", "domain/data/profile/info/SignOnV1MessageSetInfo", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_247, context_247) {
    "use strict";
    var AbstractMessageSetInfo_10, SignOnV1MessageSetInfo_1, Aggregate_Add_130, ChildAggregate_add_91, SignOnMessageSetInfo;
    var __moduleName = context_247 && context_247.id;
    return {
        setters: [
            function (AbstractMessageSetInfo_10_1) {
                AbstractMessageSetInfo_10 = AbstractMessageSetInfo_10_1;
            },
            function (SignOnV1MessageSetInfo_1_1) {
                SignOnV1MessageSetInfo_1 = SignOnV1MessageSetInfo_1_1;
            },
            function (Aggregate_Add_130_1) {
                Aggregate_Add_130 = Aggregate_Add_130_1;
            },
            function (ChildAggregate_add_91_1) {
                ChildAggregate_add_91 = ChildAggregate_add_91_1;
            }
        ],
        execute: function () {
            /**
             * @author Jon Perlow
             */
            SignOnMessageSetInfo = /** @class */ (function (_super) {
                __extends(SignOnMessageSetInfo, _super);
                function SignOnMessageSetInfo() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                SignOnMessageSetInfo.prototype.getVersion1Info = function () {
                    return this.version1Info;
                };
                SignOnMessageSetInfo.prototype.setVersion1Info = function (version1Info) {
                    this.version1Info = version1Info;
                };
                return SignOnMessageSetInfo;
            }(AbstractMessageSetInfo_10.AbstractMessageSetInfo));
            exports_247("SignOnMessageSetInfo", SignOnMessageSetInfo);
            Aggregate_Add_130.Aggregate_add(SignOnMessageSetInfo, "SIGNONMSGSET");
            ChildAggregate_add_91.ChildAggregate_add(SignOnMessageSetInfo, { order: 0, type: SignOnV1MessageSetInfo_1.SignOnV1MessageSetInfo, read: SignOnMessageSetInfo.prototype.getVersion1Info, write: SignOnMessageSetInfo.prototype.setVersion1Info });
        }
    };
});
System.register("domain/data/profile/info/signup/ClientEnrollment", ["meta/Aggregate_add", "meta/Element_add"], function (exports_248, context_248) {
    "use strict";
    var Aggregate_Add_131, Element_add_78, ClientEnrollment;
    var __moduleName = context_248 && context_248.id;
    return {
        setters: [
            function (Aggregate_Add_131_1) {
                Aggregate_Add_131 = Aggregate_Add_131_1;
            },
            function (Element_add_78_1) {
                Element_add_78 = Element_add_78_1;
            }
        ],
        execute: function () {
            /**
             * Client Enrollment option, contains indicator as to whether the account number is required as part of enrollment
             * @author Scott Priddy
             * @see "Section 8.8 OFX Spec"
             */
            ClientEnrollment = /** @class */ (function () {
                function ClientEnrollment() {
                }
                /**
                 * Y if account number is required as part of enrollment
                 * @return Boolean
                 */
                ClientEnrollment.prototype.getAccountRequired = function () {
                    return this.accountRequired;
                };
                ClientEnrollment.prototype.setAccountRequired = function (accountRequired) {
                    this.accountRequired = accountRequired;
                };
                return ClientEnrollment;
            }());
            exports_248("ClientEnrollment", ClientEnrollment);
            Aggregate_Add_131.Aggregate_add(ClientEnrollment, "CLIENTENROLL");
            Element_add_78.Element_add(ClientEnrollment, { name: "ACCTREQUIRED", required: true, order: 0, type: Boolean, read: ClientEnrollment.prototype.getAccountRequired, write: ClientEnrollment.prototype.setAccountRequired });
        }
    };
});
System.register("domain/data/profile/info/signup/WebEnrollment", ["meta/Aggregate_add", "meta/Element_add"], function (exports_249, context_249) {
    "use strict";
    var Aggregate_Add_132, Element_add_79, WebEnrollment;
    var __moduleName = context_249 && context_249.id;
    return {
        setters: [
            function (Aggregate_Add_132_1) {
                Aggregate_Add_132 = Aggregate_Add_132_1;
            },
            function (Element_add_79_1) {
                Element_add_79 = Element_add_79_1;
            }
        ],
        execute: function () {
            /**
             * Web Enrollment option containing URL to direct user for web based enrollment, if supported.
             * @author Scott Priddy
             * @see "Section 8.8 OFX Spec"
             */
            WebEnrollment = /** @class */ (function () {
                function WebEnrollment() {
                }
                /**
                 * URL to start enrollment process
                 * @return String
                 */
                WebEnrollment.prototype.getUrl = function () {
                    return this.url;
                };
                WebEnrollment.prototype.setUrl = function (url) {
                    this.url = url;
                };
                return WebEnrollment;
            }());
            exports_249("WebEnrollment", WebEnrollment);
            Aggregate_Add_132.Aggregate_add(WebEnrollment, "WEBENROLL");
            Element_add_79.Element_add(WebEnrollment, { name: "URL", required: true, order: 0, type: String, read: WebEnrollment.prototype.getUrl, write: WebEnrollment.prototype.setUrl });
        }
    };
});
System.register("domain/data/profile/info/signup/OtherEnrollment", ["meta/Aggregate_add", "meta/Element_add"], function (exports_250, context_250) {
    "use strict";
    var Aggregate_Add_133, Element_add_80, OtherEnrollment;
    var __moduleName = context_250 && context_250.id;
    return {
        setters: [
            function (Aggregate_Add_133_1) {
                Aggregate_Add_133 = Aggregate_Add_133_1;
            },
            function (Element_add_80_1) {
                Element_add_80 = Element_add_80_1;
            }
        ],
        execute: function () {
            /**
             * Other Enrollment option containing a text message directing users to some other method (such as a phone call)
             * @author Scott Priddy
             * @see "Section 8.8 OFX Spec"
             */
            OtherEnrollment = /** @class */ (function () {
                function OtherEnrollment() {
                }
                /**
                 * Message to consumer about what to do next (for example, a phone number),
                 * @return String
                 */
                OtherEnrollment.prototype.getMessage = function () {
                    return this.message;
                };
                OtherEnrollment.prototype.setMessage = function (message) {
                    this.message = message;
                };
                return OtherEnrollment;
            }());
            exports_250("OtherEnrollment", OtherEnrollment);
            Aggregate_Add_133.Aggregate_add(OtherEnrollment, "OTHERENROLL");
            Element_add_80.Element_add(OtherEnrollment, { name: "MESSAGE", required: true, order: 0, type: String, read: OtherEnrollment.prototype.getMessage, write: OtherEnrollment.prototype.setMessage });
        }
    };
});
System.register("domain/data/profile/info/SignupV1MessageSetInfo", ["domain/data/profile/VersionSpecificMessageSetInfo", "domain/data/profile/info/signup/ClientEnrollment", "domain/data/profile/info/signup/WebEnrollment", "domain/data/profile/info/signup/OtherEnrollment", "domain/data/MessageSetType", "meta/Aggregate_add", "meta/ChildAggregate_add", "meta/Element_add"], function (exports_251, context_251) {
    "use strict";
    var VersionSpecificMessageSetInfo_11, ClientEnrollment_1, WebEnrollment_1, OtherEnrollment_1, MessageSetType_30, Aggregate_Add_134, ChildAggregate_add_92, Element_add_81, SignupV1MessageSetInfo;
    var __moduleName = context_251 && context_251.id;
    return {
        setters: [
            function (VersionSpecificMessageSetInfo_11_1) {
                VersionSpecificMessageSetInfo_11 = VersionSpecificMessageSetInfo_11_1;
            },
            function (ClientEnrollment_1_1) {
                ClientEnrollment_1 = ClientEnrollment_1_1;
            },
            function (WebEnrollment_1_1) {
                WebEnrollment_1 = WebEnrollment_1_1;
            },
            function (OtherEnrollment_1_1) {
                OtherEnrollment_1 = OtherEnrollment_1_1;
            },
            function (MessageSetType_30_1) {
                MessageSetType_30 = MessageSetType_30_1;
            },
            function (Aggregate_Add_134_1) {
                Aggregate_Add_134 = Aggregate_Add_134_1;
            },
            function (ChildAggregate_add_92_1) {
                ChildAggregate_add_92 = ChildAggregate_add_92_1;
            },
            function (Element_add_81_1) {
                Element_add_81 = Element_add_81_1;
            }
        ],
        execute: function () {
            /**
             * Servers use the Signup Message Set Profile Information to define how enrollment should proceed.
             *
             * This aggregate should contain 1 Enrollment option among <CLIENTENROLL>, <WEBENROLL>, or <OTHERENROLL>.
             * todo: review how best to enforce this constraint
             *
             * @author Scott Priddy
             * @author Ryan Heaton
             * @see "Section 8.8 OFX Spec"
             */
            SignupV1MessageSetInfo = /** @class */ (function (_super) {
                __extends(SignupV1MessageSetInfo, _super);
                function SignupV1MessageSetInfo() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                SignupV1MessageSetInfo.prototype.getMessageSetType = function () {
                    return MessageSetType_30.MessageSetType.signup;
                };
                SignupV1MessageSetInfo.prototype.getClientEnrollment = function () {
                    return this.clientEnrollment;
                };
                SignupV1MessageSetInfo.prototype.setClientEnrollment = function (clientEnrollment) {
                    this.clientEnrollment = clientEnrollment;
                };
                SignupV1MessageSetInfo.prototype.getWebEnrollment = function () {
                    return this.webEnrollment;
                };
                SignupV1MessageSetInfo.prototype.setWebEnrollment = function (webEnrollment) {
                    this.webEnrollment = webEnrollment;
                };
                SignupV1MessageSetInfo.prototype.getOtherEnrollment = function () {
                    return this.otherEnrollment;
                };
                SignupV1MessageSetInfo.prototype.setOtherEnrollment = function (otherEnrollment) {
                    this.otherEnrollment = otherEnrollment;
                };
                /**
                 * Y if server supports client-based user information changes,
                 * @return Boolean
                 */
                SignupV1MessageSetInfo.prototype.getSupportsClientUserInfoChanges = function () {
                    return this.supportsClientUserInfoChanges;
                };
                SignupV1MessageSetInfo.prototype.setSupportsClientUserInfoChanges = function (supportsClientUserInfoChanges) {
                    this.supportsClientUserInfoChanges = supportsClientUserInfoChanges;
                };
                /**
                 * Y if server can provide information on accounts with SVCSTATUS available,
                 * N means client should expect to ask user for specific account information
                 * @return Boolean
                 */
                SignupV1MessageSetInfo.prototype.getSupportsAvailableAccounts = function () {
                    return this.supportsAvailableAccounts;
                };
                SignupV1MessageSetInfo.prototype.setSupportsAvailableAccounts = function (supportsAvailableAccounts) {
                    this.supportsAvailableAccounts = supportsAvailableAccounts;
                };
                /**
                 * Y if server allows clients to make service activation requests (<ACCTRQ>),
                 * N if server will only advise clients via synchronization of service additions,
                 * changes, or deletions.
                 * @return Boolean
                 */
                SignupV1MessageSetInfo.prototype.getSupportsClientServiceActivationRequests = function () {
                    return this.supportsClientServiceActivationRequests;
                };
                SignupV1MessageSetInfo.prototype.setSupportsClientServiceActivationRequests = function (supportsClientServiceActivationRequests) {
                    this.supportsClientServiceActivationRequests = supportsClientServiceActivationRequests;
                };
                return SignupV1MessageSetInfo;
            }(VersionSpecificMessageSetInfo_11.VersionSpecificMessageSetInfo));
            exports_251("SignupV1MessageSetInfo", SignupV1MessageSetInfo);
            Aggregate_Add_134.Aggregate_add(SignupV1MessageSetInfo, "SIGNUPMSGSETV1");
            ChildAggregate_add_92.ChildAggregate_add(SignupV1MessageSetInfo, { name: "CLIENTENROLL", order: 10, type: ClientEnrollment_1.ClientEnrollment, read: SignupV1MessageSetInfo.prototype.getClientEnrollment, write: SignupV1MessageSetInfo.prototype.setClientEnrollment });
            ChildAggregate_add_92.ChildAggregate_add(SignupV1MessageSetInfo, { name: "WEBENROLL", order: 20, type: WebEnrollment_1.WebEnrollment, read: SignupV1MessageSetInfo.prototype.getWebEnrollment, write: SignupV1MessageSetInfo.prototype.setWebEnrollment });
            ChildAggregate_add_92.ChildAggregate_add(SignupV1MessageSetInfo, { name: "OTHERENROLL", order: 30, type: OtherEnrollment_1.OtherEnrollment, read: SignupV1MessageSetInfo.prototype.getOtherEnrollment, write: SignupV1MessageSetInfo.prototype.setOtherEnrollment });
            Element_add_81.Element_add(SignupV1MessageSetInfo, { name: "CHGUSERINFO", required: true, order: 40, type: Boolean, read: SignupV1MessageSetInfo.prototype.getSupportsClientUserInfoChanges, write: SignupV1MessageSetInfo.prototype.setSupportsClientUserInfoChanges });
            Element_add_81.Element_add(SignupV1MessageSetInfo, { name: "AVAILACCTS", required: true, order: 50, type: Boolean, read: SignupV1MessageSetInfo.prototype.getSupportsAvailableAccounts, write: SignupV1MessageSetInfo.prototype.setSupportsAvailableAccounts });
            Element_add_81.Element_add(SignupV1MessageSetInfo, { name: "CLIENTACTREQ", required: true, order: 60, type: Boolean, read: SignupV1MessageSetInfo.prototype.getSupportsClientServiceActivationRequests, write: SignupV1MessageSetInfo.prototype.setSupportsClientServiceActivationRequests });
        }
    };
});
System.register("domain/data/profile/info/SignupMessageSetInfo", ["domain/data/profile/AbstractMessageSetInfo", "domain/data/profile/info/SignupV1MessageSetInfo", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_252, context_252) {
    "use strict";
    var AbstractMessageSetInfo_11, SignupV1MessageSetInfo_1, Aggregate_Add_135, ChildAggregate_add_93, SignupMessageSetInfo;
    var __moduleName = context_252 && context_252.id;
    return {
        setters: [
            function (AbstractMessageSetInfo_11_1) {
                AbstractMessageSetInfo_11 = AbstractMessageSetInfo_11_1;
            },
            function (SignupV1MessageSetInfo_1_1) {
                SignupV1MessageSetInfo_1 = SignupV1MessageSetInfo_1_1;
            },
            function (Aggregate_Add_135_1) {
                Aggregate_Add_135 = Aggregate_Add_135_1;
            },
            function (ChildAggregate_add_93_1) {
                ChildAggregate_add_93 = ChildAggregate_add_93_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            SignupMessageSetInfo = /** @class */ (function (_super) {
                __extends(SignupMessageSetInfo, _super);
                function SignupMessageSetInfo() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                SignupMessageSetInfo.prototype.getVersion1Info = function () {
                    return this.version1Info;
                };
                SignupMessageSetInfo.prototype.setVersion1Info = function (version1Info) {
                    this.version1Info = version1Info;
                };
                return SignupMessageSetInfo;
            }(AbstractMessageSetInfo_11.AbstractMessageSetInfo));
            exports_252("SignupMessageSetInfo", SignupMessageSetInfo);
            Aggregate_Add_135.Aggregate_add(SignupMessageSetInfo, "SIGNUPMSGSET");
            ChildAggregate_add_93.ChildAggregate_add(SignupMessageSetInfo, { order: 0, type: SignupV1MessageSetInfo_1.SignupV1MessageSetInfo, read: SignupMessageSetInfo.prototype.getVersion1Info, write: SignupMessageSetInfo.prototype.setVersion1Info });
        }
    };
});
System.register("domain/data/profile/info/WireTransferV1MessageSetInfo", ["meta/Aggregate_add", "domain/data/profile/VersionSpecificMessageSetInfo", "domain/data/common/ProcessorDayOff", "domain/data/MessageSetType", "meta/Element_add"], function (exports_253, context_253) {
    "use strict";
    var Aggregate_Add_136, VersionSpecificMessageSetInfo_12, ProcessorDayOff_3, MessageSetType_31, Element_add_82, WireTransferV1MessageSetInfo;
    var __moduleName = context_253 && context_253.id;
    return {
        setters: [
            function (Aggregate_Add_136_1) {
                Aggregate_Add_136 = Aggregate_Add_136_1;
            },
            function (VersionSpecificMessageSetInfo_12_1) {
                VersionSpecificMessageSetInfo_12 = VersionSpecificMessageSetInfo_12_1;
            },
            function (ProcessorDayOff_3_1) {
                ProcessorDayOff_3 = ProcessorDayOff_3_1;
            },
            function (MessageSetType_31_1) {
                MessageSetType_31 = MessageSetType_31_1;
            },
            function (Element_add_82_1) {
                Element_add_82 = Element_add_82_1;
            }
        ],
        execute: function () {
            /**
             * Wire Transfer Message Set Profile
             * @author Scott Priddy
             * @author Ryan Heaton
             * @see "Section 11.13.5 OFX Spec"
             */
            WireTransferV1MessageSetInfo = /** @class */ (function (_super) {
                __extends(WireTransferV1MessageSetInfo, _super);
                function WireTransferV1MessageSetInfo() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                WireTransferV1MessageSetInfo.prototype.getMessageSetType = function () {
                    return MessageSetType_31.MessageSetType.wire_transfer;
                };
                WireTransferV1MessageSetInfo.prototype.getProcessorDaysOff = function () {
                    return this.processorDaysOff;
                };
                WireTransferV1MessageSetInfo.prototype.setProcessorDaysOff = function (processorDaysOff) {
                    this.processorDaysOff = processorDaysOff;
                };
                WireTransferV1MessageSetInfo.prototype.getProcessEndTime = function () {
                    return this.processEndTime;
                };
                WireTransferV1MessageSetInfo.prototype.setProcessEndTime = function (processEndTime) {
                    this.processEndTime = processEndTime;
                };
                WireTransferV1MessageSetInfo.prototype.getSupportsScheduledTransfers = function () {
                    return this.supportsScheduledTransfers;
                };
                WireTransferV1MessageSetInfo.prototype.setSupportsScheduledTransfers = function (supportsScheduledTransfers) {
                    this.supportsScheduledTransfers = supportsScheduledTransfers;
                };
                WireTransferV1MessageSetInfo.prototype.getDomesticWireTransferFee = function () {
                    return this.domesticWireTransferFee;
                };
                WireTransferV1MessageSetInfo.prototype.setDomesticWireTransferFee = function (domesticWireTransferFee) {
                    this.domesticWireTransferFee = domesticWireTransferFee;
                };
                WireTransferV1MessageSetInfo.prototype.getInternationalWireTransferFee = function () {
                    return this.internationalWireTransferFee;
                };
                WireTransferV1MessageSetInfo.prototype.setInternationalWireTransferFee = function (internationalWireTransferFee) {
                    this.internationalWireTransferFee = internationalWireTransferFee;
                };
                return WireTransferV1MessageSetInfo;
            }(VersionSpecificMessageSetInfo_12.VersionSpecificMessageSetInfo));
            exports_253("WireTransferV1MessageSetInfo", WireTransferV1MessageSetInfo);
            Aggregate_Add_136.Aggregate_add(WireTransferV1MessageSetInfo, "WIREXFERMSGSETV1");
            Element_add_82.Element_add(WireTransferV1MessageSetInfo, { name: "PROCDAYSOFF", order: 10, type: Array, collectionEntryType: ProcessorDayOff_3.ProcessorDayOff, read: WireTransferV1MessageSetInfo.prototype.getProcessorDaysOff, write: WireTransferV1MessageSetInfo.prototype.setProcessorDaysOff });
            Element_add_82.Element_add(WireTransferV1MessageSetInfo, { name: "PROCENDTM", required: true, order: 20, type: String, read: WireTransferV1MessageSetInfo.prototype.getProcessEndTime, write: WireTransferV1MessageSetInfo.prototype.setProcessEndTime });
            Element_add_82.Element_add(WireTransferV1MessageSetInfo, { name: "CANSCHED", required: true, order: 30, type: Boolean, read: WireTransferV1MessageSetInfo.prototype.getSupportsScheduledTransfers, write: WireTransferV1MessageSetInfo.prototype.setSupportsScheduledTransfers });
            Element_add_82.Element_add(WireTransferV1MessageSetInfo, { name: "DOMXFERFEE", required: true, order: 40, type: Number, read: WireTransferV1MessageSetInfo.prototype.getDomesticWireTransferFee, write: WireTransferV1MessageSetInfo.prototype.setDomesticWireTransferFee });
            Element_add_82.Element_add(WireTransferV1MessageSetInfo, { name: "INTLXFERFEE", required: true, order: 50, type: Number, read: WireTransferV1MessageSetInfo.prototype.getInternationalWireTransferFee, write: WireTransferV1MessageSetInfo.prototype.setInternationalWireTransferFee });
        }
    };
});
System.register("domain/data/profile/info/WireTransferMessageSetInfo", ["domain/data/profile/AbstractMessageSetInfo", "domain/data/profile/info/WireTransferV1MessageSetInfo", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_254, context_254) {
    "use strict";
    var AbstractMessageSetInfo_12, WireTransferV1MessageSetInfo_1, Aggregate_Add_137, ChildAggregate_add_94, WireTransferMessageSetInfo;
    var __moduleName = context_254 && context_254.id;
    return {
        setters: [
            function (AbstractMessageSetInfo_12_1) {
                AbstractMessageSetInfo_12 = AbstractMessageSetInfo_12_1;
            },
            function (WireTransferV1MessageSetInfo_1_1) {
                WireTransferV1MessageSetInfo_1 = WireTransferV1MessageSetInfo_1_1;
            },
            function (Aggregate_Add_137_1) {
                Aggregate_Add_137 = Aggregate_Add_137_1;
            },
            function (ChildAggregate_add_94_1) {
                ChildAggregate_add_94 = ChildAggregate_add_94_1;
            }
        ],
        execute: function () {
            /**
             * @author Ryan Heaton
             */
            WireTransferMessageSetInfo = /** @class */ (function (_super) {
                __extends(WireTransferMessageSetInfo, _super);
                function WireTransferMessageSetInfo() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                WireTransferMessageSetInfo.prototype.getVersion1Info = function () {
                    return this.version1Info;
                };
                WireTransferMessageSetInfo.prototype.setVersion1Info = function (version1Info) {
                    this.version1Info = version1Info;
                };
                return WireTransferMessageSetInfo;
            }(AbstractMessageSetInfo_12.AbstractMessageSetInfo));
            exports_254("WireTransferMessageSetInfo", WireTransferMessageSetInfo);
            Aggregate_Add_137.Aggregate_add(WireTransferMessageSetInfo, "WIREXFERMSGSET");
            ChildAggregate_add_94.ChildAggregate_add(WireTransferMessageSetInfo, { order: 0, type: WireTransferV1MessageSetInfo_1.WireTransferV1MessageSetInfo, read: WireTransferMessageSetInfo.prototype.getVersion1Info, write: WireTransferMessageSetInfo.prototype.setVersion1Info });
        }
    };
});
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("domain/data/seclist/AssetClass", [], function (exports_255, context_255) {
    "use strict";
    var AssetClass;
    var __moduleName = context_255 && context_255.id;
    function AssetClass_fromOfx(ofxVal) {
        if ("DOMESTICBOND" === ofxVal) {
            return AssetClass.DOMESTIC_BOND;
        }
        else if ("INTLBOND" === ofxVal) {
            return AssetClass.INTL_BOND;
        }
        else if ("LARGESTOCK" === ofxVal) {
            return AssetClass.LARGE_STOCK;
        }
        else if ("SMALLSTOCK" === ofxVal) {
            return AssetClass.SMALL_STOCK;
        }
        else if ("INTLSTOCK" === ofxVal) {
            return AssetClass.INTL_STOCK;
        }
        else if ("MONEYMARKET" === ofxVal) {
            return AssetClass.MONEY_MARKET;
        }
        else if ("OTHER" === ofxVal) {
            return AssetClass.OTHER;
        }
        else {
            return null;
        }
    }
    exports_255("AssetClass_fromOfx", AssetClass_fromOfx);
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2010 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
            * Asset class for debt.
            * @see "Section 13.8.5.7, OFX Spec"
            *
            * @author Jon Perlow
            */
            (function (AssetClass) {
                /**
                 * Government or corporate bonds issued in the United States.
                 */
                AssetClass[AssetClass["DOMESTIC_BOND"] = 0] = "DOMESTIC_BOND";
                /**
                 * Government or corporate bonds issued in foreign countries or the United States.
                 */
                AssetClass[AssetClass["INTL_BOND"] = 1] = "INTL_BOND";
                /**
                 * Stocks for US companies with market caps of $2B or more.
                 */
                AssetClass[AssetClass["LARGE_STOCK"] = 2] = "LARGE_STOCK";
                /**
                 * Stocks for US companies with market caps of ~$100M to $2B.
                 */
                AssetClass[AssetClass["SMALL_STOCK"] = 3] = "SMALL_STOCK";
                /**
                 * Publicallt traded stocks for companies based in foreign countries.
                 */
                AssetClass[AssetClass["INTL_STOCK"] = 4] = "INTL_STOCK";
                /**
                 * Stable, short-term investments which provide income that rises and falls with short-term
                 * interest rates.
                 */
                AssetClass[AssetClass["MONEY_MARKET"] = 5] = "MONEY_MARKET";
                /**
                 * Investments which do not fit into any of the other types.
                 */
                AssetClass[AssetClass["OTHER"] = 6] = "OTHER";
            })(AssetClass || (AssetClass = {}));
            exports_255("AssetClass", AssetClass);
        }
    };
});
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("domain/data/seclist/CallType", [], function (exports_256, context_256) {
    "use strict";
    var CallType;
    var __moduleName = context_256 && context_256.id;
    function CallType_fromOfx(ofxVal) {
        if ("CALL" === ofxVal) {
            return CallType.CALL;
        }
        else if ("PUT" === ofxVal) {
            return CallType.PUT;
        }
        else if ("PREFUND" === ofxVal) {
            return CallType.PREFUND;
        }
        else if ("MATURITY" === ofxVal) {
            return CallType.MATURITY;
        }
        else {
            return null;
        }
    }
    exports_256("CallType_fromOfx", CallType_fromOfx);
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2010 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
             * Call type for debt.
             * @see "Section 13.8.5.2, OFX Spec"
             *
             * @author Jon Perlow
             */
            (function (CallType) {
                CallType[CallType["CALL"] = 0] = "CALL";
                CallType[CallType["PUT"] = 1] = "PUT";
                CallType[CallType["PREFUND"] = 2] = "PREFUND";
                CallType[CallType["MATURITY"] = 3] = "MATURITY";
            })(CallType || (CallType = {}));
            exports_256("CallType", CallType);
        }
    };
});
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("domain/data/seclist/CouponFrequency", [], function (exports_257, context_257) {
    "use strict";
    var CouponFrequency;
    var __moduleName = context_257 && context_257.id;
    function CouponFrequency_fromOfx(ofxVal) {
        if ("MONTHLY" === ofxVal) {
            return CouponFrequency.MONTHLY;
        }
        else if ("QUARTERLY" === ofxVal) {
            return CouponFrequency.QUARTERLY;
        }
        else if ("SEMIANNUAL" === ofxVal) {
            return CouponFrequency.SEMIANNUAL;
        }
        else if ("ANNUAL" === ofxVal) {
            return CouponFrequency.ANNUAL;
        }
        else if ("OTHER" === ofxVal) {
            return CouponFrequency.OTHER;
        }
        else {
            return null;
        }
    }
    exports_257("CouponFrequency_fromOfx", CouponFrequency_fromOfx);
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2010 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
             * Coupon freqency for debt.
             * @see "Section 13.8.5.2, OFX Spec"
             *
             * @author Jon Perlow
             */
            (function (CouponFrequency) {
                CouponFrequency[CouponFrequency["MONTHLY"] = 0] = "MONTHLY";
                CouponFrequency[CouponFrequency["QUARTERLY"] = 1] = "QUARTERLY";
                CouponFrequency[CouponFrequency["SEMIANNUAL"] = 2] = "SEMIANNUAL";
                CouponFrequency[CouponFrequency["ANNUAL"] = 3] = "ANNUAL";
                CouponFrequency[CouponFrequency["OTHER"] = 4] = "OTHER";
            })(CouponFrequency || (CouponFrequency = {}));
            exports_257("CouponFrequency", CouponFrequency);
        }
    };
});
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("domain/data/seclist/DebtClass", [], function (exports_258, context_258) {
    "use strict";
    var DebtClass;
    var __moduleName = context_258 && context_258.id;
    function DebtClass_fromOfx(ofxVal) {
        if ("TREASURY" === ofxVal) {
            return DebtClass.TREASURY;
        }
        else if ("MUNICIPAL" === ofxVal) {
            return DebtClass.MUNICIPAL;
        }
        else if ("CORPORATE" === ofxVal) {
            return DebtClass.CORPORATE;
        }
        else if ("OTHER" === ofxVal) {
            return DebtClass.OTHER;
        }
        else {
            return null;
        }
    }
    exports_258("DebtClass_fromOfx", DebtClass_fromOfx);
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2010 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
             * The class of debt.
             * @see "Section 13.8.5.2, OFX Spec"
             *
             * @author Jon Perlow
             */
            (function (DebtClass) {
                DebtClass[DebtClass["TREASURY"] = 0] = "TREASURY";
                DebtClass[DebtClass["MUNICIPAL"] = 1] = "MUNICIPAL";
                DebtClass[DebtClass["CORPORATE"] = 2] = "CORPORATE";
                DebtClass[DebtClass["OTHER"] = 3] = "OTHER";
            })(DebtClass || (DebtClass = {}));
            exports_258("DebtClass", DebtClass);
        }
    };
});
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("domain/data/seclist/DebtType", [], function (exports_259, context_259) {
    "use strict";
    var DebtType;
    var __moduleName = context_259 && context_259.id;
    function DebtType_fromOfx(ofxVal) {
        if ("COUPON" === ofxVal) {
            return DebtType.COUPON;
        }
        else if ("ZERO" === ofxVal) {
            return DebtType.ZERO;
        }
        else {
            return null;
        }
    }
    exports_259("DebtType_fromOfx", DebtType_fromOfx);
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2010 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
             * The type of debt.
             * @see "Section 13.8.5.2, OFX Spec"
             *
             * @author Jon Perlow
             */
            (function (DebtType) {
                DebtType[DebtType["COUPON"] = 0] = "COUPON";
                DebtType[DebtType["ZERO"] = 1] = "ZERO";
            })(DebtType || (DebtType = {}));
            exports_259("DebtType", DebtType);
        }
    };
});
System.register("domain/data/seclist/DebtSecurityInfo", ["meta/Aggregate_add", "domain/data/seclist/BaseSecurityInfo", "domain/data/seclist/DebtType", "domain/data/seclist/DebtClass", "domain/data/seclist/CouponFrequency", "domain/data/seclist/CallType", "domain/data/seclist/AssetClass", "meta/Element_add"], function (exports_260, context_260) {
    "use strict";
    var Aggregate_Add_138, BaseSecurityInfo_2, DebtType_1, DebtClass_1, CouponFrequency_1, CallType_1, AssetClass_1, Element_add_83, DebtSecurityInfo;
    var __moduleName = context_260 && context_260.id;
    return {
        setters: [
            function (Aggregate_Add_138_1) {
                Aggregate_Add_138 = Aggregate_Add_138_1;
            },
            function (BaseSecurityInfo_2_1) {
                BaseSecurityInfo_2 = BaseSecurityInfo_2_1;
            },
            function (DebtType_1_1) {
                DebtType_1 = DebtType_1_1;
            },
            function (DebtClass_1_1) {
                DebtClass_1 = DebtClass_1_1;
            },
            function (CouponFrequency_1_1) {
                CouponFrequency_1 = CouponFrequency_1_1;
            },
            function (CallType_1_1) {
                CallType_1 = CallType_1_1;
            },
            function (AssetClass_1_1) {
                AssetClass_1 = AssetClass_1_1;
            },
            function (Element_add_83_1) {
                Element_add_83 = Element_add_83_1;
            }
        ],
        execute: function () {
            /**
             * Info about a debt security.
             * @see "Section 13.8.5.2, OFX Spec"
             *
             * @author Jon Perlow
             */
            DebtSecurityInfo = /** @class */ (function (_super) {
                __extends(DebtSecurityInfo, _super);
                function DebtSecurityInfo() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * Gets the par value of the debt. This is a required field according to the OFX spec.
                 *
                 * @return the par value of the debt
                 */
                DebtSecurityInfo.prototype.getParValue = function () {
                    return this.parValue;
                };
                /**
                 * Sets the par value of the debt. This is a required field according to the OFX spec.
                 *
                 * @param parValue the par value of the debt
                 */
                DebtSecurityInfo.prototype.setParValue = function (parValue) {
                    this.parValue = parValue;
                };
                /**
                 * Gets the type of debt. One of "COUPON" or "ZERO". This is a required field according to the
                 * OFX spec.
                 *
                 * @return the type of debt
                 */
                DebtSecurityInfo.prototype.getDebtType = function () {
                    return this.debtType;
                };
                /**
                 * Sets the type of debt. One of "COUPON" or "ZERO". This is a required field according to the
                 * OFX spec.
                 *
                 * @param debtType the type of debt
                 */
                DebtSecurityInfo.prototype.setDebtType = function (debtType) {
                    this.debtType = debtType;
                };
                /**
                 * Gets the type of debt as one of the well-known types.
                 *
                 * @return the type of debt or null if it's not one of the well-known types
                 */
                DebtSecurityInfo.prototype.getDebtTypeEnum = function () {
                    return DebtType_1.DebtType_fromOfx(this.getDebtType());
                };
                /**
                 * Gets the class of debt. One of "TREASURY", "MUNICIPAL", "CORPORATE", or "OTHER".
                 * This is an optional field according to the OFX spec.
                 *
                 * @return the class of debt
                 */
                DebtSecurityInfo.prototype.getDebtClass = function () {
                    return this.debtClass;
                };
                /**
                 * Sets the class of debt. One of "TREASURY", "MUNICIPAL", "CORPORATE", or "OTHER".
                 * This is an optional field according to the OFX spec.
                 *
                 * @param debtClass the class of debt
                 */
                DebtSecurityInfo.prototype.setDebtClass = function (debtClass) {
                    this.debtClass = debtClass;
                };
                /**
                 * Gets the class of debt as one of the well-known types.
                 *
                 * @return the class of debt or null if it's not one of the well-known types
                 */
                DebtSecurityInfo.prototype.getDebtClassEnum = function () {
                    return DebtClass_1.DebtClass_fromOfx(this.debtClass);
                };
                /**
                 * Gets the coupon rate of the debt for the next closest call date.
                 * This is an optional field according to the OFX spec.
                 *
                 * @return the coupon rate
                 */
                DebtSecurityInfo.prototype.getCouponRate = function () {
                    return this.couponRate;
                };
                /**
                 * Sets the coupon rate of the debt for the next closest call date.
                 * This is an optional field according to the OFX spec.
                 *
                 * @param couponRate the coupon rate
                 */
                DebtSecurityInfo.prototype.setCouponRate = function (couponRate) {
                    this.couponRate = couponRate;
                };
                /**
                 * Gets the next maturity date for the next coupon.
                 * This is an optional field according to the OFX spec.
                 *
                 * @return the maturity date for the next coupon
                 */
                DebtSecurityInfo.prototype.getNextMaturityDate = function () {
                    return this.nextMaturityDate;
                };
                /**
                 * Sets the next maturity date for the next coupon.
                 * This is an optional field according to the OFX spec.
                 *
                 * @param nextMaturityDate the maturity date for the next coupon.
                 */
                DebtSecurityInfo.prototype.setNextMaturityDate = function (nextMaturityDate) {
                    this.nextMaturityDate = nextMaturityDate;
                };
                /**
                 * Gets the coupon frequency. One of "MONTHLY", "QUARTERLY", "SEMIANNUAL", "ANNUAL", or "OTHER".
                 * This is an optional field according to the OFX spec.
                 *
                 * @return the coupon frequency
                 */
                DebtSecurityInfo.prototype.getCouponFrequency = function () {
                    return this.couponFrequency;
                };
                /**
                 * Sets the coupon frequency. One of "MONTHLY", "QUARTERLY", "SEMIANNUAL", "ANNUAL", or "OTHER".
                 * This is an optional field according to the OFX spec.
                 *
                 * @param couponFrequency the coupon frequency
                 */
                DebtSecurityInfo.prototype.setCouponFrequency = function (couponFrequency) {
                    this.couponFrequency = couponFrequency;
                };
                /**
                 * Gets the coupon frequency as one of the well-known types.
                 *
                 * @return the coupon frequency or null if it's not one of the well-known types
                 */
                DebtSecurityInfo.prototype.getCouponFrequencyEnum = function () {
                    return CouponFrequency_1.CouponFrequency_fromOfx(this.getCouponFrequency());
                };
                /**
                 * Gets the bond price. This is an optional field according to the OFX spec.
                 *
                 * @return the bond price
                 */
                DebtSecurityInfo.prototype.getCallPrice = function () {
                    return this.callPrice;
                };
                /**
                 * Sets the bond price. This is an optional field according to the OFX spec.
                 *
                 * @param callPrice the bond price
                 */
                DebtSecurityInfo.prototype.setCallPrice = function (callPrice) {
                    this.callPrice = callPrice;
                };
                /**
                 * Gets the yield to call as a rate. This is an optional field according to the OFX spec.
                 *
                 * @return the yield to call rate
                 */
                DebtSecurityInfo.prototype.getYieldToCall = function () {
                    return this.yieldToCall;
                };
                /**
                 * Sets the yield to call as a rate. This is an optional field according to the OFX spec.
                 *
                 * @param yieldToCall the yield to call rate
                 */
                DebtSecurityInfo.prototype.setYieldToCall = function (yieldToCall) {
                    this.yieldToCall = yieldToCall;
                };
                /**
                 * Gets the next call date. This is an optional field according to the OFX spec.
                 *
                 * @return the next call date.
                 */
                DebtSecurityInfo.prototype.getNextCallDate = function () {
                    return this.nextCallDate;
                };
                /**
                 * Sets the next call date. This is an optional field according to the OFX spec.
                 *
                 * @param nextCallDate the next call date.
                 */
                DebtSecurityInfo.prototype.setNextCallDate = function (nextCallDate) {
                    this.nextCallDate = nextCallDate;
                };
                /**
                 * Gets the type of call.
                 *
                 * @return the type of call
                 */
                DebtSecurityInfo.prototype.getCallType = function () {
                    return this.callType;
                };
                /**
                 * Sets the type of call.
                 *
                 * @param callType the type of call
                 */
                DebtSecurityInfo.prototype.setCallType = function (callType) {
                    this.callType = callType;
                };
                /**
                 * Gets the type of call as one of the well-known types.
                 *
                 * @return the type of call or null if it's not one of the well-known types
                 */
                DebtSecurityInfo.prototype.getCallTypeEnum = function () {
                    return CallType_1.CallType_fromOfx(this.getCallType());
                };
                /**
                 * Gets the yield to maturity as a rate. This is an optional field according to the OFX spec.
                 *
                 * @return the yield to call rate
                 */
                DebtSecurityInfo.prototype.getYieldToMaturity = function () {
                    return this.yieldToMaturity;
                };
                /**
                 * Sets the yield to maturity as a rate. This is an optional field according to the OFX spec.
                 *
                 * @param yieldToMaturity the yield to call rate
                 */
                DebtSecurityInfo.prototype.setYieldToMaturity = function (yieldToMaturity) {
                    this.yieldToMaturity = yieldToMaturity;
                };
                /**
                 * Gets the date when the debt matures. This is an optional field according to the OFX spec.
                 *
                 * @return the date when the debt matures
                 */
                DebtSecurityInfo.prototype.getDebtMaturityDate = function () {
                    return this.debtMaturityDate;
                };
                /**
                 * Sets the date when the debt matures. This is an optional field according to the OFX spec.
                 *
                 * @param debtMaturityDate the date when the debt matures
                 */
                DebtSecurityInfo.prototype.setDebtMaturityDate = function (debtMaturityDate) {
                    this.debtMaturityDate = debtMaturityDate;
                };
                /**
                 * Gets the asset class of the debt. This is an optional field according to the OFX spec.
                 *
                 * @return the asset class of the debt
                 */
                DebtSecurityInfo.prototype.getAssetClass = function () {
                    return this.assetClass;
                };
                /**
                 * Sets the asset class of the debt. This is an optional field according to the OFX spec.
                 *
                 * @param assetClass the asset class of the debt
                 */
                DebtSecurityInfo.prototype.setAssetClass = function (assetClass) {
                    this.assetClass = assetClass;
                };
                /**
                 * Gets the assert class as one of the well-known types.
                 *
                 * @return the asset class or null if it's not one of the well-known types
                 */
                DebtSecurityInfo.prototype.getAssetClassEnum = function () {
                    return AssetClass_1.AssetClass_fromOfx(this.getAssetClass());
                };
                /**
                 * Gets the FI-defined asset class of the debt. This is an optional field according to the OFX
                 * spec.
                 *
                 * @return the FI-defined asset class of the debt
                 */
                DebtSecurityInfo.prototype.getFiAssetClass = function () {
                    return this.fiAssetClass;
                };
                /**
                 * Sets the FI-defined asset class of the debt. This is an optional field according to the OFX
                 * spec.
                 *
                 * @param fiAssetClass the FI-defined asset class of the debt
                 */
                DebtSecurityInfo.prototype.setFiAssetClass = function (fiAssetClass) {
                    this.fiAssetClass = fiAssetClass;
                };
                return DebtSecurityInfo;
            }(BaseSecurityInfo_2.BaseSecurityInfo));
            exports_260("DebtSecurityInfo", DebtSecurityInfo);
            Aggregate_Add_138.Aggregate_add(DebtSecurityInfo, "DEBTINFO");
            Element_add_83.Element_add(DebtSecurityInfo, { name: "PARVALUE", required: true, order: 20, type: Number, read: DebtSecurityInfo.prototype.getParValue, write: DebtSecurityInfo.prototype.setParValue });
            Element_add_83.Element_add(DebtSecurityInfo, { name: "DEBTTYPE", required: true, order: 30, type: String, read: DebtSecurityInfo.prototype.getDebtType, write: DebtSecurityInfo.prototype.setDebtType });
            Element_add_83.Element_add(DebtSecurityInfo, { name: "DEBTCLASS", order: 40, type: String, read: DebtSecurityInfo.prototype.getDebtClass, write: DebtSecurityInfo.prototype.setDebtClass });
            Element_add_83.Element_add(DebtSecurityInfo, { name: "COUPONRT", order: 50, type: Number, read: DebtSecurityInfo.prototype.getCouponRate, write: DebtSecurityInfo.prototype.setCouponRate });
            Element_add_83.Element_add(DebtSecurityInfo, { name: "DTCOUPON", order: 60, type: Date, read: DebtSecurityInfo.prototype.getNextMaturityDate, write: DebtSecurityInfo.prototype.setNextMaturityDate });
            Element_add_83.Element_add(DebtSecurityInfo, { name: "COUPONFREQ", order: 70, type: String, read: DebtSecurityInfo.prototype.getCouponFrequency, write: DebtSecurityInfo.prototype.setCouponFrequency });
            Element_add_83.Element_add(DebtSecurityInfo, { name: "CALLPRICE", order: 80, type: Number, read: DebtSecurityInfo.prototype.getCallPrice, write: DebtSecurityInfo.prototype.setCallPrice });
            Element_add_83.Element_add(DebtSecurityInfo, { name: "YIELDTOCALL", order: 90, type: Number, read: DebtSecurityInfo.prototype.getYieldToCall, write: DebtSecurityInfo.prototype.setYieldToCall });
            Element_add_83.Element_add(DebtSecurityInfo, { name: "DTCALL", order: 100, type: Date, read: DebtSecurityInfo.prototype.getNextCallDate, write: DebtSecurityInfo.prototype.setNextCallDate });
            Element_add_83.Element_add(DebtSecurityInfo, { name: "CALLTYPE", order: 110, type: String, read: DebtSecurityInfo.prototype.getCallType, write: DebtSecurityInfo.prototype.setCallType });
            Element_add_83.Element_add(DebtSecurityInfo, { name: "YIELDTOMAT", order: 120, type: Number, read: DebtSecurityInfo.prototype.getYieldToMaturity, write: DebtSecurityInfo.prototype.setYieldToMaturity });
            Element_add_83.Element_add(DebtSecurityInfo, { name: "DTMAT", order: 130, type: Date, read: DebtSecurityInfo.prototype.getDebtMaturityDate, write: DebtSecurityInfo.prototype.setDebtMaturityDate });
            Element_add_83.Element_add(DebtSecurityInfo, { name: "ASSETCLASS", order: 140, type: String, read: DebtSecurityInfo.prototype.getAssetClass, write: DebtSecurityInfo.prototype.setAssetClass });
            Element_add_83.Element_add(DebtSecurityInfo, { name: "FIASSETCLASS", order: 150, type: String, read: DebtSecurityInfo.prototype.getFiAssetClass, write: DebtSecurityInfo.prototype.setFiAssetClass });
        }
    };
});
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("domain/data/seclist/MutualFundType", [], function (exports_261, context_261) {
    "use strict";
    var MutualFundType;
    var __moduleName = context_261 && context_261.id;
    function MutualFundType_fromOfx(ofxVal) {
        if ("OPENEND" === ofxVal) {
            return MutualFundType.OPEN_END;
        }
        else if ("CLOSEEND" === ofxVal) {
            return MutualFundType.CLOSE_END;
        }
        else if ("OTHER" === ofxVal) {
            return MutualFundType.OTHER;
        }
        else {
            return null;
        }
    }
    exports_261("MutualFundType_fromOfx", MutualFundType_fromOfx);
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2010 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
             * The type of mutual fund.
             * @see "Section 13.8.5.2, OFX Spec"
             *
             * @author Jon Perlow
             */
            (function (MutualFundType) {
                MutualFundType[MutualFundType["OPEN_END"] = 0] = "OPEN_END";
                MutualFundType[MutualFundType["CLOSE_END"] = 1] = "CLOSE_END";
                MutualFundType[MutualFundType["OTHER"] = 2] = "OTHER";
            })(MutualFundType || (MutualFundType = {}));
            exports_261("MutualFundType", MutualFundType);
        }
    };
});
System.register("domain/data/seclist/MutualFundSecurityInfo", ["meta/Aggregate_add", "domain/data/seclist/BaseSecurityInfo", "domain/data/seclist/MutualFundType", "meta/Element_add"], function (exports_262, context_262) {
    "use strict";
    var Aggregate_Add_139, BaseSecurityInfo_3, MutualFundType_1, Element_add_84, MutualFundSecurityInfo;
    var __moduleName = context_262 && context_262.id;
    return {
        setters: [
            function (Aggregate_Add_139_1) {
                Aggregate_Add_139 = Aggregate_Add_139_1;
            },
            function (BaseSecurityInfo_3_1) {
                BaseSecurityInfo_3 = BaseSecurityInfo_3_1;
            },
            function (MutualFundType_1_1) {
                MutualFundType_1 = MutualFundType_1_1;
            },
            function (Element_add_84_1) {
                Element_add_84 = Element_add_84_1;
            }
        ],
        execute: function () {
            /**
             * Info about a mutual fund security.
             * @see "Section 13.8.5.3, OFX Spec"
             *
             * @author Jon Perlow
             */
            MutualFundSecurityInfo = /** @class */ (function (_super) {
                __extends(MutualFundSecurityInfo, _super);
                function MutualFundSecurityInfo() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * Gets the mutual fund type. One of "OPENEND", "CLOSEEND", or "OTHER". This is an optional field
                 * according to the OFX spec.
                 *
                 * @return the mutual fund type
                 */
                MutualFundSecurityInfo.prototype.getType = function () {
                    return this.mfType;
                };
                /**
                 * Sets the mutual fund type. One of "OPENEND", "CLOSEEND", or "OTHER". This is an optional field
                 * according to the OFX spec.
                 *
                 * @param mfType the mutual fund type
                 */
                MutualFundSecurityInfo.prototype.setType = function (mfType) {
                    this.mfType = mfType;
                };
                /**
                 * Gets the mutual fund type as one of the well-known types.
                 *
                 * @return the mutual fund type or null if it's not one of the well-known types
                 */
                MutualFundSecurityInfo.prototype.getTypeEnum = function () {
                    return MutualFundType_1.MutualFundType_fromOfx(this.getType());
                };
                /**
                 * Gets the yield as a rate. This is an optional field according to the OFX spec.
                 *
                 * @return the yield as a rate
                 */
                MutualFundSecurityInfo.prototype.getYield = function () {
                    return this.yield;
                };
                /**
                 * Sets the yield as a rate. This is an optional field according to the OFX spec.
                 *
                 * @param yield the yield as a rate
                 */
                MutualFundSecurityInfo.prototype.setYield = function (yield_) {
                    this.yield = yield_;
                };
                /**
                 * Gets the as-of date for the yield. This is an optional field according to the OFX spec.
                 *
                 * @return the as-of date for the yield
                 */
                MutualFundSecurityInfo.prototype.getDateYieldAsOf = function () {
                    return this.dateYieldAsOf;
                };
                /**
                 * Sets the as-of date for the yield. This is an optional field according to the OFX spec.
                 *
                 * @param dateYieldAsOf the as-of date for the yield
                 */
                MutualFundSecurityInfo.prototype.setDateYieldAsOf = function (dateYieldAsOf) {
                    this.dateYieldAsOf = dateYieldAsOf;
                };
                return MutualFundSecurityInfo;
            }(BaseSecurityInfo_3.BaseSecurityInfo));
            exports_262("MutualFundSecurityInfo", MutualFundSecurityInfo);
            Aggregate_Add_139.Aggregate_add(MutualFundSecurityInfo, "MFINFO");
            Element_add_84.Element_add(MutualFundSecurityInfo, { name: "MFTYPE", order: 20, type: String, read: MutualFundSecurityInfo.prototype.getType, write: MutualFundSecurityInfo.prototype.setType });
            Element_add_84.Element_add(MutualFundSecurityInfo, { name: "YIELD", order: 30, type: Number, read: MutualFundSecurityInfo.prototype.getYield, write: MutualFundSecurityInfo.prototype.setYield });
            Element_add_84.Element_add(MutualFundSecurityInfo, { name: "DTYIELDASOF", order: 40, type: Date, read: MutualFundSecurityInfo.prototype.getDateYieldAsOf, write: MutualFundSecurityInfo.prototype.setDateYieldAsOf });
        }
    };
});
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("domain/data/seclist/OptionType", [], function (exports_263, context_263) {
    "use strict";
    var OptionType;
    var __moduleName = context_263 && context_263.id;
    function OptionType_fromOfx(ofxVal) {
        if ("PUT" === ofxVal) {
            return OptionType.PUT;
        }
        else if ("CALL" === ofxVal) {
            return OptionType.CALL;
        }
        else {
            return null;
        }
    }
    exports_263("OptionType_fromOfx", OptionType_fromOfx);
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2010 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
             * Type of option.
             * @see "Section 13.8.5.4, OFX Spec"
             *
             * @author Jon Perlow
             */
            (function (OptionType) {
                OptionType[OptionType["PUT"] = 0] = "PUT";
                OptionType[OptionType["CALL"] = 1] = "CALL";
            })(OptionType || (OptionType = {}));
            exports_263("OptionType", OptionType);
        }
    };
});
System.register("domain/data/seclist/OptionSecurityInfo", ["meta/Aggregate_add", "domain/data/seclist/BaseSecurityInfo", "domain/data/seclist/SecurityId", "domain/data/seclist/OptionType", "domain/data/seclist/AssetClass", "meta/Element_add"], function (exports_264, context_264) {
    "use strict";
    var Aggregate_Add_140, BaseSecurityInfo_4, SecurityId_14, OptionType_1, AssetClass_2, Element_add_85, OptionSecurityInfo;
    var __moduleName = context_264 && context_264.id;
    return {
        setters: [
            function (Aggregate_Add_140_1) {
                Aggregate_Add_140 = Aggregate_Add_140_1;
            },
            function (BaseSecurityInfo_4_1) {
                BaseSecurityInfo_4 = BaseSecurityInfo_4_1;
            },
            function (SecurityId_14_1) {
                SecurityId_14 = SecurityId_14_1;
            },
            function (OptionType_1_1) {
                OptionType_1 = OptionType_1_1;
            },
            function (AssetClass_2_1) {
                AssetClass_2 = AssetClass_2_1;
            },
            function (Element_add_85_1) {
                Element_add_85 = Element_add_85_1;
            }
        ],
        execute: function () {
            /**
             * Info about an option security.
             * @see "Section 13.8.5.4, OFX Spec"
             *
             * @author Jon Perlow
             */
            OptionSecurityInfo = /** @class */ (function (_super) {
                __extends(OptionSecurityInfo, _super);
                function OptionSecurityInfo() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * Gets the type of option. One of "PUT" or "CALL". This is a required field according to the
                 * OFX spec.
                 *
                 * @return the option type
                 */
                OptionSecurityInfo.prototype.getOptionType = function () {
                    return this.optionType;
                };
                /**
                 * Sets the type of option. One of "PUT" or "CALL". This is a required field according to the
                 * OFX spec.
                 *
                 * @param optionType the option type
                 */
                OptionSecurityInfo.prototype.setOptionType = function (optionType) {
                    this.optionType = optionType;
                };
                /**
                 * Gets the option type as a well-known enum value.
                 *
                 * @return the option type or null if it's not one of the well-known types
                 */
                OptionSecurityInfo.prototype.getOptionTypeEnum = function () {
                    return OptionType_1.OptionType_fromOfx(this.getOptionType());
                };
                /**
                 * Gets the strike price of the option. This is a required field according to the OFX spec.
                 *
                 * @return the option strike price
                 */
                OptionSecurityInfo.prototype.getStrikePrice = function () {
                    return this.strikePrice;
                };
                /**
                 * Sets the strike price of the option. This is a required field according to the OFX spec.
                 *
                 * @param strikePrice the option strike price
                 */
                OptionSecurityInfo.prototype.setStrikePrice = function (strikePrice) {
                    this.strikePrice = strikePrice;
                };
                /**
                 * Gets the expiration date of the option. This is a required field according to the OFX spec.
                 *
                 * @return the expiration date of the option
                 */
                OptionSecurityInfo.prototype.getExpirationDate = function () {
                    return this.expirationDate;
                };
                /**
                 * Sets the expiration date of the option. This is a required field according to the OFX spec.
                 *
                 * @param expirationDate the expiration date of the option
                 */
                OptionSecurityInfo.prototype.setExpirationDate = function (expirationDate) {
                    this.expirationDate = expirationDate;
                };
                /**
                 * Gets the number of shares per option contact. This is a required field according to the OFX
                 * spec.
                 *
                 * @return the number of shares per option contact
                 */
                OptionSecurityInfo.prototype.getSharesPerContact = function () {
                    return this.sharesPerContact;
                };
                /**
                 * Sets the number of shares per option contact. This is a required field according to the OFX
                 * spec.
                 *
                 * @param sharesPerContact the number of shares per option contact
                 */
                OptionSecurityInfo.prototype.setSharesPerContact = function (sharesPerContact) {
                    this.sharesPerContact = sharesPerContact;
                };
                /**
                 * Gets the security id of the underling security. This is an optional field according to the OFX
                 * spec.
                 *
                 * @return the security id of the underlying security
                 */
                OptionSecurityInfo.prototype.getUnderlyingSecurity = function () {
                    return this.underlyingSecurity;
                };
                /**
                 * Sets the security id of the underling security. This is an optional field according to the OFX
                 * spec.
                 *
                 * @param underlyingSecurity the security id of the underlying security
                 */
                OptionSecurityInfo.prototype.setUnderlyingSecurity = function (underlyingSecurity) {
                    this.underlyingSecurity = underlyingSecurity;
                };
                /**
                 * Gets the asset class of the option. This is an optional field according to the OFX spec.
                 *
                 * @return the asset class of the option
                 */
                OptionSecurityInfo.prototype.getAssetClass = function () {
                    return this.assetClass;
                };
                /**
                 * Sets the asset class of the option. This is an optional field according to the OFX spec.
                 *
                 * @param assetClass the asset class of the option
                 */
                OptionSecurityInfo.prototype.setAssetClass = function (assetClass) {
                    this.assetClass = assetClass;
                };
                /**
                 * Gets the assert class as one of the well-known types.
                 *
                 * @return the asset class or null if it's not one of the well-known types
                 */
                OptionSecurityInfo.prototype.getAssetClassEnum = function () {
                    return AssetClass_2.AssetClass_fromOfx(this.getAssetClass());
                };
                /**
                 * Gets the FI-defined asset class of the option. This is an optional field according to the OFX
                 * spec.
                 *
                 * @return the FI-defined asset class of the option
                 */
                OptionSecurityInfo.prototype.getFiAssetClass = function () {
                    return this.fiAssetClass;
                };
                /**
                 * Sets the FI-defined asset class of the option. This is an optional field according to the OFX
                 * spec.
                 *
                 * @param fiAssetClass the FI-defined asset class of the option
                 */
                OptionSecurityInfo.prototype.setFiAssetClass = function (fiAssetClass) {
                    this.fiAssetClass = fiAssetClass;
                };
                return OptionSecurityInfo;
            }(BaseSecurityInfo_4.BaseSecurityInfo));
            exports_264("OptionSecurityInfo", OptionSecurityInfo);
            Aggregate_Add_140.Aggregate_add(OptionSecurityInfo, "OPTINFO");
            Element_add_85.Element_add(OptionSecurityInfo, { name: "OPTTYPE", order: 20, type: String, read: OptionSecurityInfo.prototype.getOptionType, write: OptionSecurityInfo.prototype.setOptionType });
            Element_add_85.Element_add(OptionSecurityInfo, { name: "STRIKEPRICE", order: 30, type: Number, read: OptionSecurityInfo.prototype.getStrikePrice, write: OptionSecurityInfo.prototype.setStrikePrice });
            Element_add_85.Element_add(OptionSecurityInfo, { name: "DTEXPIRE", order: 40, type: Date, read: OptionSecurityInfo.prototype.getExpirationDate, write: OptionSecurityInfo.prototype.setExpirationDate });
            Element_add_85.Element_add(OptionSecurityInfo, { name: "SHPERCTRCT", order: 50, type: Number, read: OptionSecurityInfo.prototype.getSharesPerContact, write: OptionSecurityInfo.prototype.setSharesPerContact });
            Element_add_85.Element_add(OptionSecurityInfo, { name: "SECID", order: 60, type: SecurityId_14.SecurityId, read: OptionSecurityInfo.prototype.getUnderlyingSecurity, write: OptionSecurityInfo.prototype.setUnderlyingSecurity });
            Element_add_85.Element_add(OptionSecurityInfo, { name: "ASSETCLASS", order: 70, type: String, read: OptionSecurityInfo.prototype.getAssetClass, write: OptionSecurityInfo.prototype.setAssetClass });
            Element_add_85.Element_add(OptionSecurityInfo, { name: "FIASSETCLASS", order: 80, type: String, read: OptionSecurityInfo.prototype.getFiAssetClass, write: OptionSecurityInfo.prototype.setFiAssetClass });
        }
    };
});
System.register("domain/data/seclist/OtherSecurityInfo", ["domain/data/seclist/AssetClass", "domain/data/seclist/BaseSecurityInfo", "meta/Aggregate_add", "meta/Element_add"], function (exports_265, context_265) {
    "use strict";
    var AssetClass_3, BaseSecurityInfo_5, Aggregate_Add_141, Element_add_86, OtherSecurityInfo;
    var __moduleName = context_265 && context_265.id;
    return {
        setters: [
            function (AssetClass_3_1) {
                AssetClass_3 = AssetClass_3_1;
            },
            function (BaseSecurityInfo_5_1) {
                BaseSecurityInfo_5 = BaseSecurityInfo_5_1;
            },
            function (Aggregate_Add_141_1) {
                Aggregate_Add_141 = Aggregate_Add_141_1;
            },
            function (Element_add_86_1) {
                Element_add_86 = Element_add_86_1;
            }
        ],
        execute: function () {
            /**
             * Info about any other type of security.
             * @see "Section 13.8.5.5, OFX Spec"
             *
             * @author Jon Perlow
             */
            OtherSecurityInfo = /** @class */ (function (_super) {
                __extends(OtherSecurityInfo, _super);
                function OtherSecurityInfo() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * Gets a description of the type of security. This is an optional field according to the OFX
                 * spec.
                 *
                 * @return the description of the security
                 */
                OtherSecurityInfo.prototype.getTypeDesc = function () {
                    return this.typeDesc;
                };
                /**
                 * Sets a description of the type of security. This is an optional field according to the OFX
                 * spec.
                 *
                 * @param typeDesc the description of the security
                 */
                OtherSecurityInfo.prototype.setTypeDesc = function (typeDesc) {
                    this.typeDesc = typeDesc;
                };
                /**
                 * Gets the asset class of the option. This is an optional field according to the OFX spec.
                 *
                 * @return the asset class of the debt
                 */
                OtherSecurityInfo.prototype.getAssetClass = function () {
                    return this.assetClass;
                };
                /**
                 * Sets the asset class of the debt. This is an optional field according to the OFX spec.
                 *
                 * @param assetClass the asset class of the debt
                 */
                OtherSecurityInfo.prototype.setAssetClass = function (assetClass) {
                    this.assetClass = assetClass;
                };
                /**
                 * Gets the assert class as one of the well-known types.
                 *
                 * @return the asset class or null if it's not one of the well-known types
                 */
                OtherSecurityInfo.prototype.getAssetClassEnum = function () {
                    return AssetClass_3.AssetClass_fromOfx(this.getAssetClass());
                };
                /**
                 * Gets the FI-defined asset class of the debt. This is an optional field according to the OFX
                 * spec.
                 *
                 * @return the FI-defined asset class of the debt
                 */
                OtherSecurityInfo.prototype.getFiAssetClass = function () {
                    return this.fiAssetClass;
                };
                /**
                 * Sets the FI-defined asset class of the debt. This is an optional field according to the OFX
                 * spec.
                 *
                 * @param fiAssetClass the FI-defined asset class of the debt
                 */
                OtherSecurityInfo.prototype.setFiAssetClass = function (fiAssetClass) {
                    this.fiAssetClass = fiAssetClass;
                };
                return OtherSecurityInfo;
            }(BaseSecurityInfo_5.BaseSecurityInfo));
            exports_265("OtherSecurityInfo", OtherSecurityInfo);
            Aggregate_Add_141.Aggregate_add(OtherSecurityInfo, "OTHERINFO");
            Element_add_86.Element_add(OtherSecurityInfo, { name: "TYPEDESC", order: 20, type: String, read: OtherSecurityInfo.prototype.getTypeDesc, write: OtherSecurityInfo.prototype.setTypeDesc });
            Element_add_86.Element_add(OtherSecurityInfo, { name: "ASSETCLASS", order: 30, type: String, read: OtherSecurityInfo.prototype.getAssetClass, write: OtherSecurityInfo.prototype.setAssetClass });
            Element_add_86.Element_add(OtherSecurityInfo, { name: "FIASSETCLASS", order: 40, type: String, read: OtherSecurityInfo.prototype.getFiAssetClass, write: OtherSecurityInfo.prototype.setFiAssetClass });
        }
    };
});
/*
 * Copyright 2010 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("domain/data/seclist/StockType", [], function (exports_266, context_266) {
    "use strict";
    var StockType;
    var __moduleName = context_266 && context_266.id;
    function StockType_fromOfx(ofxVal) {
        if ("COMMON" === ofxVal) {
            return StockType.COMMON;
        }
        else if ("PREFERRED" === ofxVal) {
            return StockType.PREFERRED;
        }
        else if ("CONVERTIBLE" === ofxVal) {
            return StockType.CONVERTIBLE;
        }
        else if ("OTHER" === ofxVal) {
            return StockType.OTHER;
        }
        else {
            return null;
        }
    }
    exports_266("StockType_fromOfx", StockType_fromOfx);
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2010 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
             * The type of debt.
             * @see "Section 13.8.5.6, OFX Spec"
             *
             * @author Jon Perlow
             */
            (function (StockType) {
                StockType[StockType["COMMON"] = 0] = "COMMON";
                StockType[StockType["PREFERRED"] = 1] = "PREFERRED";
                StockType[StockType["CONVERTIBLE"] = 2] = "CONVERTIBLE";
                StockType[StockType["OTHER"] = 3] = "OTHER";
            })(StockType || (StockType = {}));
            exports_266("StockType", StockType);
        }
    };
});
System.register("domain/data/seclist/StockSecurityInfo", ["domain/data/seclist/BaseSecurityInfo", "domain/data/seclist/StockType", "domain/data/seclist/AssetClass", "meta/Aggregate_add", "meta/Element_add"], function (exports_267, context_267) {
    "use strict";
    var BaseSecurityInfo_6, StockType_1, AssetClass_4, Aggregate_Add_142, Element_add_87, StockSecurityInfo;
    var __moduleName = context_267 && context_267.id;
    return {
        setters: [
            function (BaseSecurityInfo_6_1) {
                BaseSecurityInfo_6 = BaseSecurityInfo_6_1;
            },
            function (StockType_1_1) {
                StockType_1 = StockType_1_1;
            },
            function (AssetClass_4_1) {
                AssetClass_4 = AssetClass_4_1;
            },
            function (Aggregate_Add_142_1) {
                Aggregate_Add_142 = Aggregate_Add_142_1;
            },
            function (Element_add_87_1) {
                Element_add_87 = Element_add_87_1;
            }
        ],
        execute: function () {
            /**
             * Info about a stock security.
             * @see "Section 13.8.5.6, OFX Spec"
             *
             * @author Jon Perlow
             */
            StockSecurityInfo = /** @class */ (function (_super) {
                __extends(StockSecurityInfo, _super);
                function StockSecurityInfo() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * Gets the type of stock. One of "COMMON", "PREFERRED", "CONVERTIBLE", or "OTHER". This is an
                 * optional field according to the OFX spec.
                 *
                 * @return the type of stock
                 */
                StockSecurityInfo.prototype.getType = function () {
                    return this.stockType;
                };
                /**
                 * Sets the type of stock. One of "COMMON", "PREFERRED", "CONVERTIBLE", or "OTHER". This is an
                 * optional field according to the OFX spec.
                 *
                 * @param stockType the type of stock
                 */
                StockSecurityInfo.prototype.setType = function (stockType) {
                    this.stockType = stockType;
                };
                /**
                 * Gets the type of stock as one of the well-known types.
                 *
                 * @return the type of stock or null if it's not one of the well-known types
                 */
                StockSecurityInfo.prototype.getTypeEnum = function () {
                    return StockType_1.StockType_fromOfx(this.getType());
                };
                /**
                 * Gets the current yield reported as the dividend expressed as a portion of the current stock
                 * price, a rate. This is an optional field according to the OFX spec.
                 *
                 * @return the dividend yield
                 */
                StockSecurityInfo.prototype.getYield = function () {
                    return this.yield;
                };
                /**
                 * Sets the current yield reported as the dividend expressed as a portion of the current stock
                 * price, a rate. This is an optional field according to the OFX spec.
                 *
                 * @param yield the dividend yield
                 */
                StockSecurityInfo.prototype.setYield = function (yield_) {
                    this.yield = yield_;
                };
                /**
                 * Gets the as-of date for the yield. This is an optional field according to the OFX spec.
                 *
                 * @return the as-of date for the yield
                 */
                StockSecurityInfo.prototype.getDateYieldAsOf = function () {
                    return this.dateYieldAsOf;
                };
                /**
                 * Sets the as-of date for the yield. This is an optional field according to the OFX spec.
                 *
                 * @param dateYieldAsOf the as-of date for the yield
                 */
                StockSecurityInfo.prototype.setDateYieldAsOf = function (dateYieldAsOf) {
                    this.dateYieldAsOf = dateYieldAsOf;
                };
                /**
                 * Gets the asset class of the stock. This is an optional field according to the OFX spec.
                 *
                 * @return the asset class of the stock
                 */
                StockSecurityInfo.prototype.getAssetClass = function () {
                    return this.assetClass;
                };
                /**
                 * Sets the asset class of the stock. This is an optional field according to the OFX spec.
                 *
                 * @param assetClass the asset class of the stock
                 */
                StockSecurityInfo.prototype.setAssetClass = function (assetClass) {
                    this.assetClass = assetClass;
                };
                /**
                 * Gets the assert class as one of the well-known types.
                 *
                 * @return the asset class or null if it's not one of the well-known types
                 */
                StockSecurityInfo.prototype.getAssetClassEnum = function () {
                    return AssetClass_4.AssetClass_fromOfx(this.getAssetClass());
                };
                /**
                 * Gets the FI-defined asset class of the stock. This is an optional field according to the OFX
                 * spec.
                 *
                 * @return the FI-defined asset class of the stock
                 */
                StockSecurityInfo.prototype.getFiAssetClass = function () {
                    return this.fiAssetClass;
                };
                /**
                 * Sets the FI-defined asset class of the stock. This is an optional field according to the OFX
                 * spec.
                 *
                 * @param fiAssetClass the FI-defined asset class of the stock
                 */
                StockSecurityInfo.prototype.setFiAssetClass = function (fiAssetClass) {
                    this.fiAssetClass = fiAssetClass;
                };
                return StockSecurityInfo;
            }(BaseSecurityInfo_6.BaseSecurityInfo));
            exports_267("StockSecurityInfo", StockSecurityInfo);
            Aggregate_Add_142.Aggregate_add(StockSecurityInfo, "STOCKINFO");
            Element_add_87.Element_add(StockSecurityInfo, { name: "STOCKTYPE", order: 20, type: String, read: StockSecurityInfo.prototype.getType, write: StockSecurityInfo.prototype.setType });
            Element_add_87.Element_add(StockSecurityInfo, { name: "YIELD", order: 30, type: Number, read: StockSecurityInfo.prototype.getYield, write: StockSecurityInfo.prototype.setYield });
            Element_add_87.Element_add(StockSecurityInfo, { name: "DTYIELDASOF", order: 40, type: Date, read: StockSecurityInfo.prototype.getDateYieldAsOf, write: StockSecurityInfo.prototype.setDateYieldAsOf });
            Element_add_87.Element_add(StockSecurityInfo, { name: "ASSETCLASS", order: 50, type: String, read: StockSecurityInfo.prototype.getAssetClass, write: StockSecurityInfo.prototype.setAssetClass });
            Element_add_87.Element_add(StockSecurityInfo, { name: "FIASSETCLASS", order: 60, type: String, read: StockSecurityInfo.prototype.getFiAssetClass, write: StockSecurityInfo.prototype.setFiAssetClass });
        }
    };
});
System.register("domain/data/tax1099/ProcDet", ["meta/Aggregate_add", "meta/Element_add"], function (exports_268, context_268) {
    "use strict";
    var Aggregate_Add_143, Element_add_88, ProcDet;
    var __moduleName = context_268 && context_268.id;
    return {
        setters: [
            function (Aggregate_Add_143_1) {
                Aggregate_Add_143 = Aggregate_Add_143_1;
            },
            function (Element_add_88_1) {
                Element_add_88 = Element_add_88_1;
            }
        ],
        execute: function () {
            /**
             * @author Aparna Gawali
             * aparna.gawali@sungard.com
             */
            ProcDet = /** @class */ (function () {
                function ProcDet() {
                }
                /**
                 * @return the dtAqd
                 */
                ProcDet.prototype.getDtAqd = function () {
                    return this.dtAqd;
                };
                /**
                 * @param dtAqd the dtAqd to set
                 */
                ProcDet.prototype.setDtAqd = function (dtAqd) {
                    this.dtAqd = dtAqd;
                };
                /**
                 * @return the dtSale
                 */
                ProcDet.prototype.getDtSale = function () {
                    return this.dtSale;
                };
                /**
                 * @param dtSale the dtSale to set
                 */
                ProcDet.prototype.setDtSale = function (dtSale) {
                    this.dtSale = dtSale;
                };
                /**
                 * @return the secName
                 */
                ProcDet.prototype.getSecName = function () {
                    return this.secName;
                };
                /**
                 * @param secName the secName to set
                 */
                ProcDet.prototype.setSecName = function (secName) {
                    this.secName = secName;
                };
                /**
                 * @return the costBasis
                 */
                ProcDet.prototype.getCostBasis = function () {
                    return this.costBasis;
                };
                /**
                 * @param costBasis the costBasis to set
                 */
                ProcDet.prototype.setCostBasis = function (costBasis) {
                    this.costBasis = costBasis;
                };
                /**
                 * @return the saleSpr
                 */
                ProcDet.prototype.getSaleSpr = function () {
                    return this.saleSpr;
                };
                /**
                 * @param saleSpr the saleSpr to set
                 */
                ProcDet.prototype.setSaleSpr = function (saleSpr) {
                    this.saleSpr = saleSpr;
                };
                /**
                 * @return the longShort
                 */
                ProcDet.prototype.getLongShort = function () {
                    return this.longShort;
                };
                /**
                 * @param longShort the longShort to set
                 */
                ProcDet.prototype.setLongShort = function (longShort) {
                    this.longShort = longShort;
                };
                /**
                 * @return the wasDisAllowed
                 */
                ProcDet.prototype.getWasDisAllowed = function () {
                    return this.wasDisAllowed;
                };
                /**
                 * @param wasDisAllowed the wasDisAllowed to set
                 */
                ProcDet.prototype.setWasDisAllowed = function (wasDisAllowed) {
                    this.wasDisAllowed = wasDisAllowed;
                };
                /**
                 * @return the noncoveredSec
                 */
                ProcDet.prototype.getNoncoveredSec = function () {
                    return this.noncoveredSec;
                };
                /**
                 * @param noncoveredSec the noncoveredSec to set
                 */
                ProcDet.prototype.setNoncoveredSec = function (noncoveredSec) {
                    this.noncoveredSec = noncoveredSec;
                };
                /**
                 * @return the basisNotshown
                 */
                ProcDet.prototype.getBasisNotshown = function () {
                    return this.basisNotshown;
                };
                /**
                 * @param basisNotshown the basisNotshown to set
                 */
                ProcDet.prototype.setBasisNotshown = function (basisNotshown) {
                    this.basisNotshown = basisNotshown;
                };
                return ProcDet;
            }());
            exports_268("ProcDet", ProcDet);
            Aggregate_Add_143.Aggregate_add(ProcDet, "PROCDET_V100");
            Element_add_88.Element_add(ProcDet, { name: "DTAQD", required: false, order: 0, type: String, read: ProcDet.prototype.getDtAqd, write: ProcDet.prototype.setDtAqd });
            Element_add_88.Element_add(ProcDet, { name: "DTSALE", required: false, order: 2, type: String, read: ProcDet.prototype.getDtSale, write: ProcDet.prototype.setDtSale });
            Element_add_88.Element_add(ProcDet, { name: "SECNAME", required: false, order: 3, type: String, read: ProcDet.prototype.getSecName, write: ProcDet.prototype.setSecName });
            Element_add_88.Element_add(ProcDet, { name: "COSTBASIS", required: false, order: 4, type: String, read: ProcDet.prototype.getCostBasis, write: ProcDet.prototype.setCostBasis });
            Element_add_88.Element_add(ProcDet, { name: "SALESPR", required: false, order: 5, type: String, read: ProcDet.prototype.getSaleSpr, write: ProcDet.prototype.setSaleSpr });
            Element_add_88.Element_add(ProcDet, { name: "LONGSHORT", required: false, order: 6, type: String, read: ProcDet.prototype.getLongShort, write: ProcDet.prototype.setLongShort });
            Element_add_88.Element_add(ProcDet, { name: "WASHSALELOSSDISALLOWED", required: false, order: 7, type: String, read: ProcDet.prototype.getWasDisAllowed, write: ProcDet.prototype.setWasDisAllowed });
            Element_add_88.Element_add(ProcDet, { name: "NONCOVEREDSECURITY", required: false, order: 8, type: String, read: ProcDet.prototype.getNoncoveredSec, write: ProcDet.prototype.setNoncoveredSec });
            Element_add_88.Element_add(ProcDet, { name: "BASISNOTSHOWN", required: false, order: 9, type: String, read: ProcDet.prototype.getBasisNotshown, write: ProcDet.prototype.setBasisNotshown });
        }
    };
});
System.register("domain/data/tax1099/ExtDBInfo", ["meta/Aggregate_add", "meta/Element_add", "domain/data/tax1099/ProcDet", "meta/ChildAggregate_add"], function (exports_269, context_269) {
    "use strict";
    var Aggregate_Add_144, Element_add_89, ProcDet_1, ChildAggregate_add_95, ExtDBInfo;
    var __moduleName = context_269 && context_269.id;
    return {
        setters: [
            function (Aggregate_Add_144_1) {
                Aggregate_Add_144 = Aggregate_Add_144_1;
            },
            function (Element_add_89_1) {
                Element_add_89 = Element_add_89_1;
            },
            function (ProcDet_1_1) {
                ProcDet_1 = ProcDet_1_1;
            },
            function (ChildAggregate_add_95_1) {
                ChildAggregate_add_95 = ChildAggregate_add_95_1;
            }
        ],
        execute: function () {
            /**
             * @author Aparna Gawali
             * aparna.gawali@sungard.com
             */
            ExtDBInfo = /** @class */ (function () {
                function ExtDBInfo() {
                }
                /**
                 * @return the procDet
                 */
                ExtDBInfo.prototype.getProcDet = function () {
                    return this.procDet;
                };
                /**
                 * @param procDet the procDet to set
                 */
                ExtDBInfo.prototype.setProcDet = function (procDet) {
                    this.procDet = procDet;
                };
                /**
                 * @return the teInterest
                 */
                ExtDBInfo.prototype.getTeInterest = function () {
                    return this.teInterest;
                };
                /**
                 * @param teInterest the teInterest to set
                 */
                ExtDBInfo.prototype.setTeInterest = function (teInterest) {
                    this.teInterest = teInterest;
                };
                /**
                 * @return the pabInterest
                 */
                ExtDBInfo.prototype.getPabInterest = function () {
                    return this.pabInterest;
                };
                /**
                 * @param pabInterest the pabInterest to set
                 */
                ExtDBInfo.prototype.setPabInterest = function (pabInterest) {
                    this.pabInterest = pabInterest;
                };
                /**
                 * @return the teIntDividend
                 */
                ExtDBInfo.prototype.getTeIntDividend = function () {
                    return this.teIntDividend;
                };
                /**
                 * @param teIntDividend the teIntDividend to set
                 */
                ExtDBInfo.prototype.setTeIntDividend = function (teIntDividend) {
                    this.teIntDividend = teIntDividend;
                };
                /**
                 * @return the pabDividend
                 */
                ExtDBInfo.prototype.getPabDividend = function () {
                    return this.pabDividend;
                };
                /**
                 * @param pabDividend the pabDividend to set
                 */
                ExtDBInfo.prototype.setPabDividend = function (pabDividend) {
                    this.pabDividend = pabDividend;
                };
                return ExtDBInfo;
            }());
            exports_269("ExtDBInfo", ExtDBInfo);
            Aggregate_Add_144.Aggregate_add(ExtDBInfo, "EXTDBINFO_V100");
            ChildAggregate_add_95.ChildAggregate_add(ExtDBInfo, { required: false, order: 0, type: Array, collectionEntryType: ProcDet_1.ProcDet, read: ExtDBInfo.prototype.getProcDet, write: ExtDBInfo.prototype.setProcDet });
            Element_add_89.Element_add(ExtDBInfo, { name: "TEINTEREST", required: false, order: 1, type: String, read: ExtDBInfo.prototype.getTeInterest, write: ExtDBInfo.prototype.setTeInterest });
            Element_add_89.Element_add(ExtDBInfo, { name: "PABINTEREST", required: false, order: 2, type: String, read: ExtDBInfo.prototype.getPabInterest, write: ExtDBInfo.prototype.setPabInterest });
            Element_add_89.Element_add(ExtDBInfo, { name: "TEINTDIVIDEND", required: false, order: 3, type: String, read: ExtDBInfo.prototype.getTeIntDividend, write: ExtDBInfo.prototype.setTeIntDividend });
            Element_add_89.Element_add(ExtDBInfo, { name: "PABDIVIDEND", required: false, order: 4, type: String, read: ExtDBInfo.prototype.getPabDividend, write: ExtDBInfo.prototype.setPabDividend });
        }
    };
});
System.register("domain/data/tax1099/PayerAddress", ["meta/Aggregate_add", "meta/Element_add"], function (exports_270, context_270) {
    "use strict";
    var Aggregate_Add_145, Element_add_90, PayerAddress;
    var __moduleName = context_270 && context_270.id;
    return {
        setters: [
            function (Aggregate_Add_145_1) {
                Aggregate_Add_145 = Aggregate_Add_145_1;
            },
            function (Element_add_90_1) {
                Element_add_90 = Element_add_90_1;
            }
        ],
        execute: function () {
            /**
             * @author Aparna Gawali
             * aparna.gawali@sungard.com
             */
            PayerAddress = /** @class */ (function () {
                function PayerAddress() {
                }
                /**
                 * @return the payerName1
                 */
                PayerAddress.prototype.getPayerName1 = function () {
                    return this.payerName1;
                };
                /**
                 * @param payerName1 the payerName1 to set
                 */
                PayerAddress.prototype.setPayerName1 = function (payerName1) {
                    this.payerName1 = payerName1;
                };
                /**
                 * @return the payerName2
                 */
                PayerAddress.prototype.getPayerName2 = function () {
                    return this.payerName2;
                };
                /**
                 * @param payerName2 the payerName2 to set
                 */
                PayerAddress.prototype.setPayerName2 = function (payerName2) {
                    this.payerName2 = payerName2;
                };
                /**
                 * @return the address1
                 */
                PayerAddress.prototype.getAddress1 = function () {
                    return this.address1;
                };
                /**
                 * @param address1 the address1 to set
                 */
                PayerAddress.prototype.setAddress1 = function (address1) {
                    this.address1 = address1;
                };
                /**
                 * @return the address2
                 */
                PayerAddress.prototype.getAddress2 = function () {
                    return this.address2;
                };
                /**
                 * @param address2 the address2 to set
                 */
                PayerAddress.prototype.setAddress2 = function (address2) {
                    this.address2 = address2;
                };
                /**
                 * @return the city
                 */
                PayerAddress.prototype.getCity = function () {
                    return this.city;
                };
                /**
                 * @param city the city to set
                 */
                PayerAddress.prototype.setCity = function (city) {
                    this.city = city;
                };
                /**
                 * @return the state
                 */
                PayerAddress.prototype.getState = function () {
                    return this.state;
                };
                /**
                 * @param state the state to set
                 */
                PayerAddress.prototype.setState = function (state) {
                    this.state = state;
                };
                /**
                 * @return the postalCode
                 */
                PayerAddress.prototype.getPostalCode = function () {
                    return this.postalCode;
                };
                /**
                 * @param postalCode the postalCode to set
                 */
                PayerAddress.prototype.setPostalCode = function (postalCode) {
                    this.postalCode = postalCode;
                };
                /**
                 * @return the phone
                 */
                PayerAddress.prototype.getPhone = function () {
                    return this.phone;
                };
                /**
                 * @param phone the phone to set
                 */
                PayerAddress.prototype.setPhone = function (phone) {
                    this.phone = phone;
                };
                return PayerAddress;
            }());
            exports_270("PayerAddress", PayerAddress);
            Aggregate_Add_145.Aggregate_add(PayerAddress, "PAYERADDR");
            Element_add_90.Element_add(PayerAddress, { name: "PAYERNAME1", required: true, order: 0, type: String, read: PayerAddress.prototype.getPayerName1, write: PayerAddress.prototype.setPayerName1 });
            Element_add_90.Element_add(PayerAddress, { name: "PAYERNAME2", required: false, order: 1, type: String, read: PayerAddress.prototype.getPayerName2, write: PayerAddress.prototype.setPayerName2 });
            Element_add_90.Element_add(PayerAddress, { name: "ADDR1", required: true, order: 2, type: String, read: PayerAddress.prototype.getAddress1, write: PayerAddress.prototype.setAddress1 });
            Element_add_90.Element_add(PayerAddress, { name: "ADDR2", required: true, order: 3, type: String, read: PayerAddress.prototype.getAddress2, write: PayerAddress.prototype.setAddress2 });
            Element_add_90.Element_add(PayerAddress, { name: "CITY", required: true, order: 4, type: String, read: PayerAddress.prototype.getCity, write: PayerAddress.prototype.setCity });
            Element_add_90.Element_add(PayerAddress, { name: "STATE", required: true, order: 5, type: String, read: PayerAddress.prototype.getState, write: PayerAddress.prototype.setState });
            Element_add_90.Element_add(PayerAddress, { name: "POSTALCODE", required: true, order: 6, type: String, read: PayerAddress.prototype.getPostalCode, write: PayerAddress.prototype.setPostalCode });
            Element_add_90.Element_add(PayerAddress, { name: "PHONE", required: false, order: 7, type: String, read: PayerAddress.prototype.getPhone, write: PayerAddress.prototype.setPhone });
        }
    };
});
System.register("domain/data/tax1099/RecAddress", ["meta/Aggregate_add", "meta/Element_add"], function (exports_271, context_271) {
    "use strict";
    var Aggregate_Add_146, Element_add_91, RecAddress;
    var __moduleName = context_271 && context_271.id;
    return {
        setters: [
            function (Aggregate_Add_146_1) {
                Aggregate_Add_146 = Aggregate_Add_146_1;
            },
            function (Element_add_91_1) {
                Element_add_91 = Element_add_91_1;
            }
        ],
        execute: function () {
            /**
             * @author Aparna Gawali
             * aparna.gawali@sungard.com
             */
            RecAddress = /** @class */ (function () {
                function RecAddress() {
                }
                /**
                 * @return the recName1
                 */
                RecAddress.prototype.getRecName1 = function () {
                    return this.recName1;
                };
                /**
                 * @param recName1 the recName1 to set
                 */
                RecAddress.prototype.setRecName1 = function (recName1) {
                    this.recName1 = recName1;
                };
                /**
                 * @return the recName2
                 */
                RecAddress.prototype.getRecName2 = function () {
                    return this.recName2;
                };
                /**
                 * @param recName2 the recName2 to set
                 */
                RecAddress.prototype.setRecName2 = function (recName2) {
                    this.recName2 = recName2;
                };
                /**
                 * @return the address1
                 */
                RecAddress.prototype.getAddress1 = function () {
                    return this.address1;
                };
                /**
                 * @param address1 the address1 to set
                 */
                RecAddress.prototype.setAddress1 = function (address1) {
                    this.address1 = address1;
                };
                /**
                 * @return the address2
                 */
                RecAddress.prototype.getAddress2 = function () {
                    return this.address2;
                };
                /**
                 * @param address2 the address2 to set
                 */
                RecAddress.prototype.setAddress2 = function (address2) {
                    this.address2 = address2;
                };
                /**
                 * @return the city
                 */
                RecAddress.prototype.getCity = function () {
                    return this.city;
                };
                /**
                 * @param city the city to set
                 */
                RecAddress.prototype.setCity = function (city) {
                    this.city = city;
                };
                /**
                 * @return the state
                 */
                RecAddress.prototype.getState = function () {
                    return this.state;
                };
                /**
                 * @param state the state to set
                 */
                RecAddress.prototype.setState = function (state) {
                    this.state = state;
                };
                /**
                 * @return the postalCode
                 */
                RecAddress.prototype.getPostalCode = function () {
                    return this.postalCode;
                };
                /**
                 * @param postalCode the postalCode to set
                 */
                RecAddress.prototype.setPostalCode = function (postalCode) {
                    this.postalCode = postalCode;
                };
                /**
                 * @return the phone
                 */
                RecAddress.prototype.getPhone = function () {
                    return this.phone;
                };
                /**
                 * @param phone the phone to set
                 */
                RecAddress.prototype.setPhone = function (phone) {
                    this.phone = phone;
                };
                return RecAddress;
            }());
            exports_271("RecAddress", RecAddress);
            Aggregate_Add_146.Aggregate_add(RecAddress, "RECADDR");
            Element_add_91.Element_add(RecAddress, { name: "RECNAME1", required: true, order: 0, type: String, read: RecAddress.prototype.getRecName1, write: RecAddress.prototype.setRecName1 });
            Element_add_91.Element_add(RecAddress, { name: "RECNAME2", required: false, order: 1, type: String, read: RecAddress.prototype.getRecName2, write: RecAddress.prototype.setRecName2 });
            Element_add_91.Element_add(RecAddress, { name: "ADDR1", required: true, order: 2, type: String, read: RecAddress.prototype.getAddress1, write: RecAddress.prototype.setAddress1 });
            Element_add_91.Element_add(RecAddress, { name: "ADDR2", required: true, order: 3, type: String, read: RecAddress.prototype.getAddress2, write: RecAddress.prototype.setAddress2 });
            Element_add_91.Element_add(RecAddress, { name: "CITY", required: true, order: 4, type: String, read: RecAddress.prototype.getCity, write: RecAddress.prototype.setCity });
            Element_add_91.Element_add(RecAddress, { name: "STATE", required: true, order: 5, type: String, read: RecAddress.prototype.getState, write: RecAddress.prototype.setState });
            Element_add_91.Element_add(RecAddress, { name: "POSTALCODE", required: true, order: 6, type: String, read: RecAddress.prototype.getPostalCode, write: RecAddress.prototype.setPostalCode });
            Element_add_91.Element_add(RecAddress, { name: "PHONE", required: false, order: 7, type: String, read: RecAddress.prototype.getPhone, write: RecAddress.prototype.setPhone });
        }
    };
});
System.register("domain/data/tax1099/Tax1099B", ["domain/data/tax1099/ExtDBInfo", "domain/data/tax1099/PayerAddress", "domain/data/tax1099/RecAddress", "meta/Aggregate_add", "meta/Element_add", "meta/ChildAggregate_add"], function (exports_272, context_272) {
    "use strict";
    var ExtDBInfo_1, PayerAddress_1, RecAddress_1, Aggregate_Add_147, Element_add_92, ChildAggregate_add_96, Tax1099B;
    var __moduleName = context_272 && context_272.id;
    return {
        setters: [
            function (ExtDBInfo_1_1) {
                ExtDBInfo_1 = ExtDBInfo_1_1;
            },
            function (PayerAddress_1_1) {
                PayerAddress_1 = PayerAddress_1_1;
            },
            function (RecAddress_1_1) {
                RecAddress_1 = RecAddress_1_1;
            },
            function (Aggregate_Add_147_1) {
                Aggregate_Add_147 = Aggregate_Add_147_1;
            },
            function (Element_add_92_1) {
                Element_add_92 = Element_add_92_1;
            },
            function (ChildAggregate_add_96_1) {
                ChildAggregate_add_96 = ChildAggregate_add_96_1;
            }
        ],
        execute: function () {
            /**
             * @author Aparna Gawali
             * aparna.gawali@sungard.com
             */
            Tax1099B = /** @class */ (function () {
                function Tax1099B() {
                }
                Tax1099B.prototype.getSrvrtId = function () {
                    return this.srvrtId;
                };
                Tax1099B.prototype.setSrvrtId = function (srvrtId) {
                    this.srvrtId = srvrtId;
                };
                Tax1099B.prototype.getTaxYear = function () {
                    return this.taxYear;
                };
                Tax1099B.prototype.setTaxYear = function (taxYear) {
                    this.taxYear = taxYear;
                };
                /**
                 * @return the extDBInfo
                 */
                Tax1099B.prototype.getExtDBInfo = function () {
                    return this.extDBInfo;
                };
                /**
                 * @param extDBInfo the extDBInfo to set
                 */
                Tax1099B.prototype.setExtDBInfo = function (extDBInfo) {
                    this.extDBInfo = extDBInfo;
                };
                /**
                 * @return the payerAddress
                 */
                Tax1099B.prototype.getPayerAddress = function () {
                    return this.payerAddress;
                };
                /**
                 * @param payerAddress the payerAddress to set
                 */
                Tax1099B.prototype.setPayerAddress = function (payerAddress) {
                    this.payerAddress = payerAddress;
                };
                /**
                 * @return the payerId
                 */
                Tax1099B.prototype.getPayerId = function () {
                    return this.payerId;
                };
                /**
                 * @param payerId the payerId to set
                 */
                Tax1099B.prototype.setPayerId = function (payerId) {
                    this.payerId = payerId;
                };
                /**
                 * @return the recAddress
                 */
                Tax1099B.prototype.getRecAddress = function () {
                    return this.recAddress;
                };
                /**
                 * @param recAddress the recAddress to set
                 */
                Tax1099B.prototype.setRecAddress = function (recAddress) {
                    this.recAddress = recAddress;
                };
                /**
                 * @return the recId
                 */
                Tax1099B.prototype.getRecId = function () {
                    return this.recId;
                };
                /**
                 * @param recId the recId to set
                 */
                Tax1099B.prototype.setRecId = function (recId) {
                    this.recId = recId;
                };
                /**
                 * @return the recAcct
                 */
                Tax1099B.prototype.getRecAcct = function () {
                    return this.recAcct;
                };
                /**
                 * @param recAcct the recAcct to set
                 */
                Tax1099B.prototype.setRecAcct = function (recAcct) {
                    this.recAcct = recAcct;
                };
                return Tax1099B;
            }());
            exports_272("Tax1099B", Tax1099B);
            Aggregate_Add_147.Aggregate_add(Tax1099B, "TAX1099B_V100");
            Element_add_92.Element_add(Tax1099B, { name: "SRVRTID", required: true, order: 0, type: String, read: Tax1099B.prototype.getSrvrtId, write: Tax1099B.prototype.setSrvrtId });
            Element_add_92.Element_add(Tax1099B, { name: "TAXYEAR", required: true, order: 1, type: String, read: Tax1099B.prototype.getTaxYear, write: Tax1099B.prototype.setTaxYear });
            ChildAggregate_add_96.ChildAggregate_add(Tax1099B, { required: true, order: 2, type: ExtDBInfo_1.ExtDBInfo, read: Tax1099B.prototype.getExtDBInfo, write: Tax1099B.prototype.setExtDBInfo });
            ChildAggregate_add_96.ChildAggregate_add(Tax1099B, { required: true, order: 3, type: PayerAddress_1.PayerAddress, read: Tax1099B.prototype.getPayerAddress, write: Tax1099B.prototype.setPayerAddress });
            Element_add_92.Element_add(Tax1099B, { name: "PAYERID", required: true, order: 4, type: String, read: Tax1099B.prototype.getPayerId, write: Tax1099B.prototype.setPayerId });
            ChildAggregate_add_96.ChildAggregate_add(Tax1099B, { required: true, order: 5, type: RecAddress_1.RecAddress, read: Tax1099B.prototype.getRecAddress, write: Tax1099B.prototype.setRecAddress });
            Element_add_92.Element_add(Tax1099B, { name: "RECID", required: true, order: 6, type: String, read: Tax1099B.prototype.getRecId, write: Tax1099B.prototype.setRecId });
            Element_add_92.Element_add(Tax1099B, { name: "RECACCT", required: true, order: 7, type: String, read: Tax1099B.prototype.getRecAcct, write: Tax1099B.prototype.setRecAcct });
        }
    };
});
System.register("domain/data/tax1099/Tax1099DIV", ["domain/data/tax1099/PayerAddress", "domain/data/tax1099/RecAddress", "meta/Aggregate_add", "meta/Element_add", "meta/ChildAggregate_add"], function (exports_273, context_273) {
    "use strict";
    var PayerAddress_2, RecAddress_2, Aggregate_Add_148, Element_add_93, ChildAggregate_add_97, Tax1099DIV;
    var __moduleName = context_273 && context_273.id;
    return {
        setters: [
            function (PayerAddress_2_1) {
                PayerAddress_2 = PayerAddress_2_1;
            },
            function (RecAddress_2_1) {
                RecAddress_2 = RecAddress_2_1;
            },
            function (Aggregate_Add_148_1) {
                Aggregate_Add_148 = Aggregate_Add_148_1;
            },
            function (Element_add_93_1) {
                Element_add_93 = Element_add_93_1;
            },
            function (ChildAggregate_add_97_1) {
                ChildAggregate_add_97 = ChildAggregate_add_97_1;
            }
        ],
        execute: function () {
            /**
             * @author Aparna Gawali
             * aparna.gawali@sungard.com
             */
            Tax1099DIV = /** @class */ (function () {
                function Tax1099DIV() {
                }
                Tax1099DIV.prototype.getSrvrtId = function () {
                    return this.srvrtId;
                };
                Tax1099DIV.prototype.setSrvrtId = function (srvrtId) {
                    this.srvrtId = srvrtId;
                };
                Tax1099DIV.prototype.getTaxYear = function () {
                    return this.taxYear;
                };
                Tax1099DIV.prototype.setTaxYear = function (taxYear) {
                    this.taxYear = taxYear;
                };
                /**
                 * @return the ordDiv
                 */
                Tax1099DIV.prototype.getOrdDiv = function () {
                    return this.ordDiv;
                };
                /**
                 * @param ordDiv the ordDiv to set
                 */
                Tax1099DIV.prototype.setOrdDiv = function (ordDiv) {
                    this.ordDiv = ordDiv;
                };
                /**
                 * @return the qualifiedDiv
                 */
                Tax1099DIV.prototype.getQualifiedDiv = function () {
                    return this.qualifiedDiv;
                };
                /**
                 * @param qualifiedDiv the qualifiedDiv to set
                 */
                Tax1099DIV.prototype.setQualifiedDiv = function (qualifiedDiv) {
                    this.qualifiedDiv = qualifiedDiv;
                };
                /**
                 * @return the totCapGain
                 */
                Tax1099DIV.prototype.getTotCapGain = function () {
                    return this.totCapGain;
                };
                /**
                 * @param totCapGain the totCapGain to set
                 */
                Tax1099DIV.prototype.setTotCapGain = function (totCapGain) {
                    this.totCapGain = totCapGain;
                };
                /**
                 * @return the p28Gain
                 */
                Tax1099DIV.prototype.getP28Gain = function () {
                    return this.p28Gain;
                };
                /**
                 * @param p28Gain the p28Gain to set
                 */
                Tax1099DIV.prototype.setP28Gain = function (p28Gain) {
                    this.p28Gain = p28Gain;
                };
                /**
                 * @return the unrecSec1250
                 */
                Tax1099DIV.prototype.getUnrecSec1250 = function () {
                    return this.unrecSec1250;
                };
                /**
                 * @param unrecSec1250 the unrecSec1250 to set
                 */
                Tax1099DIV.prototype.setUnrecSec1250 = function (unrecSec1250) {
                    this.unrecSec1250 = unrecSec1250;
                };
                /**
                 * @return the sec1202
                 */
                Tax1099DIV.prototype.getSec1202 = function () {
                    return this.sec1202;
                };
                /**
                 * @param sec1202 the sec1202 to set
                 */
                Tax1099DIV.prototype.setSec1202 = function (sec1202) {
                    this.sec1202 = sec1202;
                };
                /**
                 * @return the nonTaxDist
                 */
                Tax1099DIV.prototype.getNonTaxDist = function () {
                    return this.nonTaxDist;
                };
                /**
                 * @param nonTaxDist the nonTaxDist to set
                 */
                Tax1099DIV.prototype.setNonTaxDist = function (nonTaxDist) {
                    this.nonTaxDist = nonTaxDist;
                };
                /**
                 * @return the fedTaxWh
                 */
                Tax1099DIV.prototype.getFedTaxWh = function () {
                    return this.fedTaxWh;
                };
                /**
                 * @param fedTaxWh the fedTaxWh to set
                 */
                Tax1099DIV.prototype.setFedTaxWh = function (fedTaxWh) {
                    this.fedTaxWh = fedTaxWh;
                };
                /**
                 * @return the investExp
                 */
                Tax1099DIV.prototype.getInvestExp = function () {
                    return this.investExp;
                };
                /**
                 * @param investExp the investExp to set
                 */
                Tax1099DIV.prototype.setInvestExp = function (investExp) {
                    this.investExp = investExp;
                };
                /**
                 * @return the forTaxPd
                 */
                Tax1099DIV.prototype.getForTaxPd = function () {
                    return this.forTaxPd;
                };
                /**
                 * @param forTaxPd the forTaxPd to set
                 */
                Tax1099DIV.prototype.setForTaxPd = function (forTaxPd) {
                    this.forTaxPd = forTaxPd;
                };
                /**
                 * @return the cashLiq
                 */
                Tax1099DIV.prototype.getCashLiq = function () {
                    return this.cashLiq;
                };
                /**
                 * @param cashLiq the cashLiq to set
                 */
                Tax1099DIV.prototype.setCashLiq = function (cashLiq) {
                    this.cashLiq = cashLiq;
                };
                /**
                 * @return the nonCashLiq
                 */
                Tax1099DIV.prototype.getNonCashLiq = function () {
                    return this.nonCashLiq;
                };
                /**
                 * @param nonCashLiq the nonCashLiq to set
                 */
                Tax1099DIV.prototype.setNonCashLiq = function (nonCashLiq) {
                    this.nonCashLiq = nonCashLiq;
                };
                /**
                 * @return the payerAddress
                 */
                Tax1099DIV.prototype.getPayerAddress = function () {
                    return this.payerAddress;
                };
                /**
                 * @param payerAddress the payerAddress to set
                 */
                Tax1099DIV.prototype.setPayerAddress = function (payerAddress) {
                    this.payerAddress = payerAddress;
                };
                /**
                 * @return the payerId
                 */
                Tax1099DIV.prototype.getPayerId = function () {
                    return this.payerId;
                };
                /**
                 * @param payerId the payerId to set
                 */
                Tax1099DIV.prototype.setPayerId = function (payerId) {
                    this.payerId = payerId;
                };
                /**
                 * @return the recAddress
                 */
                Tax1099DIV.prototype.getRecAddress = function () {
                    return this.recAddress;
                };
                /**
                 * @param recAddress the recAddress to set
                 */
                Tax1099DIV.prototype.setRecAddress = function (recAddress) {
                    this.recAddress = recAddress;
                };
                /**
                 * @return the recId
                 */
                Tax1099DIV.prototype.getRecId = function () {
                    return this.recId;
                };
                /**
                 * @param recId the recId to set
                 */
                Tax1099DIV.prototype.setRecId = function (recId) {
                    this.recId = recId;
                };
                /**
                 * @return the recAcct
                 */
                Tax1099DIV.prototype.getRecAcct = function () {
                    return this.recAcct;
                };
                /**
                 * @param recAcct the recAcct to set
                 */
                Tax1099DIV.prototype.setRecAcct = function (recAcct) {
                    this.recAcct = recAcct;
                };
                return Tax1099DIV;
            }());
            exports_273("Tax1099DIV", Tax1099DIV);
            Aggregate_Add_148.Aggregate_add(Tax1099DIV, "TAX1099DIV_V100");
            Element_add_93.Element_add(Tax1099DIV, { name: "SRVRTID", required: false, order: 0, type: String, read: Tax1099DIV.prototype.getSrvrtId, write: Tax1099DIV.prototype.setSrvrtId });
            Element_add_93.Element_add(Tax1099DIV, { name: "TAXYEAR", required: false, order: 1, type: String, read: Tax1099DIV.prototype.getTaxYear, write: Tax1099DIV.prototype.setTaxYear });
            Element_add_93.Element_add(Tax1099DIV, { name: "ORDDIV", required: false, order: 2, type: String, read: Tax1099DIV.prototype.getOrdDiv, write: Tax1099DIV.prototype.setOrdDiv });
            Element_add_93.Element_add(Tax1099DIV, { name: "QUALIFIEDDIV", required: false, order: 3, type: String, read: Tax1099DIV.prototype.getQualifiedDiv, write: Tax1099DIV.prototype.setQualifiedDiv });
            Element_add_93.Element_add(Tax1099DIV, { name: "TOTCAPGAIN", required: false, order: 4, type: String, read: Tax1099DIV.prototype.getTotCapGain, write: Tax1099DIV.prototype.setTotCapGain });
            Element_add_93.Element_add(Tax1099DIV, { name: "P28GAIN", required: false, order: 5, type: String, read: Tax1099DIV.prototype.getP28Gain, write: Tax1099DIV.prototype.setP28Gain });
            Element_add_93.Element_add(Tax1099DIV, { name: "UNRECSEC1250", required: false, order: 6, type: String, read: Tax1099DIV.prototype.getUnrecSec1250, write: Tax1099DIV.prototype.setUnrecSec1250 });
            Element_add_93.Element_add(Tax1099DIV, { name: "SEC1202", required: false, order: 7, type: String, read: Tax1099DIV.prototype.getSec1202, write: Tax1099DIV.prototype.setSec1202 });
            Element_add_93.Element_add(Tax1099DIV, { name: "NONTAXDIST", required: false, order: 8, type: String, read: Tax1099DIV.prototype.getNonTaxDist, write: Tax1099DIV.prototype.setNonTaxDist });
            Element_add_93.Element_add(Tax1099DIV, { name: "FEDTAXWH", required: false, order: 9, type: String, read: Tax1099DIV.prototype.getFedTaxWh, write: Tax1099DIV.prototype.setFedTaxWh });
            Element_add_93.Element_add(Tax1099DIV, { name: "INVESTEXP", required: false, order: 10, type: String, read: Tax1099DIV.prototype.getInvestExp, write: Tax1099DIV.prototype.setInvestExp });
            Element_add_93.Element_add(Tax1099DIV, { name: "FORTAXPD", required: false, order: 11, type: String, read: Tax1099DIV.prototype.getForTaxPd, write: Tax1099DIV.prototype.setForTaxPd });
            Element_add_93.Element_add(Tax1099DIV, { name: "CASHLIQ", required: false, order: 12, type: String, read: Tax1099DIV.prototype.getCashLiq, write: Tax1099DIV.prototype.setCashLiq });
            Element_add_93.Element_add(Tax1099DIV, { name: "NONCASHLIQ", required: false, order: 13, type: String, read: Tax1099DIV.prototype.getNonCashLiq, write: Tax1099DIV.prototype.setNonCashLiq });
            ChildAggregate_add_97.ChildAggregate_add(Tax1099DIV, { required: true, order: 14, type: PayerAddress_2.PayerAddress, read: Tax1099DIV.prototype.getPayerAddress, write: Tax1099DIV.prototype.setPayerAddress });
            Element_add_93.Element_add(Tax1099DIV, { name: "PAYERID", required: true, order: 15, type: String, read: Tax1099DIV.prototype.getPayerId, write: Tax1099DIV.prototype.setPayerId });
            ChildAggregate_add_97.ChildAggregate_add(Tax1099DIV, { required: true, order: 16, type: RecAddress_2.RecAddress, read: Tax1099DIV.prototype.getRecAddress, write: Tax1099DIV.prototype.setRecAddress });
            Element_add_93.Element_add(Tax1099DIV, { name: "RECID", required: true, order: 17, type: String, read: Tax1099DIV.prototype.getRecId, write: Tax1099DIV.prototype.setRecId });
            Element_add_93.Element_add(Tax1099DIV, { name: "RECACCT", required: true, order: 18, type: String, read: Tax1099DIV.prototype.getRecAcct, write: Tax1099DIV.prototype.setRecAcct });
        }
    };
});
System.register("domain/data/tax1099/Tax1099INT", ["domain/data/tax1099/PayerAddress", "domain/data/tax1099/RecAddress", "meta/Aggregate_add", "meta/Element_add", "meta/ChildAggregate_add"], function (exports_274, context_274) {
    "use strict";
    var PayerAddress_3, RecAddress_3, Aggregate_Add_149, Element_add_94, ChildAggregate_add_98, Tax1099INT;
    var __moduleName = context_274 && context_274.id;
    return {
        setters: [
            function (PayerAddress_3_1) {
                PayerAddress_3 = PayerAddress_3_1;
            },
            function (RecAddress_3_1) {
                RecAddress_3 = RecAddress_3_1;
            },
            function (Aggregate_Add_149_1) {
                Aggregate_Add_149 = Aggregate_Add_149_1;
            },
            function (Element_add_94_1) {
                Element_add_94 = Element_add_94_1;
            },
            function (ChildAggregate_add_98_1) {
                ChildAggregate_add_98 = ChildAggregate_add_98_1;
            }
        ],
        execute: function () {
            /**
             * @author Aparna Gawali
             * aparna.gawali@sungard.com
             */
            Tax1099INT = /** @class */ (function () {
                function Tax1099INT() {
                }
                Tax1099INT.prototype.getSrvrtId = function () {
                    return this.srvrtId;
                };
                Tax1099INT.prototype.setSrvrtId = function (srvrtId) {
                    this.srvrtId = srvrtId;
                };
                Tax1099INT.prototype.getTaxYear = function () {
                    return this.taxYear;
                };
                Tax1099INT.prototype.setTaxYear = function (taxYear) {
                    this.taxYear = taxYear;
                };
                /**
                 * @return the intIncome
                 */
                Tax1099INT.prototype.getIntIncome = function () {
                    return this.intIncome;
                };
                /**
                 * @param intIncome the intIncome to set
                 */
                Tax1099INT.prototype.setIntIncome = function (intIncome) {
                    this.intIncome = intIncome;
                };
                /**
                 * @return the erlWithPen
                 */
                Tax1099INT.prototype.getErlWithPen = function () {
                    return this.erlWithPen;
                };
                /**
                 * @param erlWithPen the erlWithPen to set
                 */
                Tax1099INT.prototype.setErlWithPen = function (erlWithPen) {
                    this.erlWithPen = erlWithPen;
                };
                /**
                 * @return the intUsbndtrs
                 */
                Tax1099INT.prototype.getIntUsbndtrs = function () {
                    return this.intUsbndtrs;
                };
                /**
                 * @param intUsbndtrs the intUsbndtrs to set
                 */
                Tax1099INT.prototype.setIntUsbndtrs = function (intUsbndtrs) {
                    this.intUsbndtrs = intUsbndtrs;
                };
                /**
                 * @return the fedTaxWh
                 */
                Tax1099INT.prototype.getFedTaxWh = function () {
                    return this.fedTaxWh;
                };
                /**
                 * @param fedTaxWh the fedTaxWh to set
                 */
                Tax1099INT.prototype.setFedTaxWh = function (fedTaxWh) {
                    this.fedTaxWh = fedTaxWh;
                };
                /**
                 * @return the investExp
                 */
                Tax1099INT.prototype.getInvestExp = function () {
                    return this.investExp;
                };
                /**
                 * @param investExp the investExp to set
                 */
                Tax1099INT.prototype.setInvestExp = function (investExp) {
                    this.investExp = investExp;
                };
                /**
                 * @return the forTaxPd
                 */
                Tax1099INT.prototype.getForTaxPd = function () {
                    return this.forTaxPd;
                };
                /**
                 * @param forTaxPd the forTaxPd to set
                 */
                Tax1099INT.prototype.setForTaxPd = function (forTaxPd) {
                    this.forTaxPd = forTaxPd;
                };
                /**
                 * @return the payerAddress
                 */
                Tax1099INT.prototype.getPayerAddress = function () {
                    return this.payerAddress;
                };
                /**
                 * @param payerAddress the payerAddress to set
                 */
                Tax1099INT.prototype.setPayerAddress = function (payerAddress) {
                    this.payerAddress = payerAddress;
                };
                /**
                 * @return the payerId
                 */
                Tax1099INT.prototype.getPayerId = function () {
                    return this.payerId;
                };
                /**
                 * @param payerId the payerId to set
                 */
                Tax1099INT.prototype.setPayerId = function (payerId) {
                    this.payerId = payerId;
                };
                /**
                 * @return the recAddress
                 */
                Tax1099INT.prototype.getRecAddress = function () {
                    return this.recAddress;
                };
                /**
                 * @param recAddress the recAddress to set
                 */
                Tax1099INT.prototype.setRecAddress = function (recAddress) {
                    this.recAddress = recAddress;
                };
                /**
                 * @return the recId
                 */
                Tax1099INT.prototype.getRecId = function () {
                    return this.recId;
                };
                /**
                 * @param recId the recId to set
                 */
                Tax1099INT.prototype.setRecId = function (recId) {
                    this.recId = recId;
                };
                /**
                 * @return the recAcct
                 */
                Tax1099INT.prototype.getRecAcct = function () {
                    return this.recAcct;
                };
                /**
                 * @param recAcct the recAcct to set
                 */
                Tax1099INT.prototype.setRecAcct = function (recAcct) {
                    this.recAcct = recAcct;
                };
                /**
                 * @return the taxExemptInt
                 */
                Tax1099INT.prototype.getTaxExemptInt = function () {
                    return this.taxExemptInt;
                };
                /**
                 * @param taxExemptInt the taxExemptInt to set
                 */
                Tax1099INT.prototype.setTaxExemptInt = function (taxExemptInt) {
                    this.taxExemptInt = taxExemptInt;
                };
                /**
                 * @return the specifiedPabInt
                 */
                Tax1099INT.prototype.getSpecifiedPabInt = function () {
                    return this.specifiedPabInt;
                };
                /**
                 * @param specifiedPabInt the specifiedPabInt to set
                 */
                Tax1099INT.prototype.setSpecifiedPabInt = function (specifiedPabInt) {
                    this.specifiedPabInt = specifiedPabInt;
                };
                return Tax1099INT;
            }());
            exports_274("Tax1099INT", Tax1099INT);
            Aggregate_Add_149.Aggregate_add(Tax1099INT, "TAX1099INT_V100");
            Element_add_94.Element_add(Tax1099INT, { name: "SRVRTID", required: true, order: 0, type: String, read: Tax1099INT.prototype.getSrvrtId, write: Tax1099INT.prototype.setSrvrtId });
            Element_add_94.Element_add(Tax1099INT, { name: "TAXYEAR", required: true, order: 1, type: String, read: Tax1099INT.prototype.getTaxYear, write: Tax1099INT.prototype.setTaxYear });
            Element_add_94.Element_add(Tax1099INT, { name: "INTINCOME", required: false, order: 2, type: String, read: Tax1099INT.prototype.getIntIncome, write: Tax1099INT.prototype.setIntIncome });
            Element_add_94.Element_add(Tax1099INT, { name: "ERLWITHPEN", required: false, order: 3, type: String, read: Tax1099INT.prototype.getErlWithPen, write: Tax1099INT.prototype.setErlWithPen });
            Element_add_94.Element_add(Tax1099INT, { name: "INTUSBNDTRS", required: false, order: 4, type: String, read: Tax1099INT.prototype.getIntUsbndtrs, write: Tax1099INT.prototype.setIntUsbndtrs });
            Element_add_94.Element_add(Tax1099INT, { name: "FEDTAXWH", required: false, order: 5, type: String, read: Tax1099INT.prototype.getFedTaxWh, write: Tax1099INT.prototype.setFedTaxWh });
            Element_add_94.Element_add(Tax1099INT, { name: "INVESTEXP", required: false, order: 6, type: String, read: Tax1099INT.prototype.getInvestExp, write: Tax1099INT.prototype.setInvestExp });
            Element_add_94.Element_add(Tax1099INT, { name: "FORTAXPD", required: false, order: 7, type: String, read: Tax1099INT.prototype.getForTaxPd, write: Tax1099INT.prototype.setForTaxPd });
            ChildAggregate_add_98.ChildAggregate_add(Tax1099INT, { required: true, order: 8, type: PayerAddress_3.PayerAddress, read: Tax1099INT.prototype.getPayerAddress, write: Tax1099INT.prototype.setPayerAddress });
            Element_add_94.Element_add(Tax1099INT, { name: "PAYERID", required: true, order: 9, type: String, read: Tax1099INT.prototype.getPayerId, write: Tax1099INT.prototype.setPayerId });
            ChildAggregate_add_98.ChildAggregate_add(Tax1099INT, { required: true, order: 10, type: RecAddress_3.RecAddress, read: Tax1099INT.prototype.getRecAddress, write: Tax1099INT.prototype.setRecAddress });
            Element_add_94.Element_add(Tax1099INT, { name: "RECID", required: true, order: 11, type: String, read: Tax1099INT.prototype.getRecId, write: Tax1099INT.prototype.setRecId });
            Element_add_94.Element_add(Tax1099INT, { name: "RECACCT", required: true, order: 12, type: String, read: Tax1099INT.prototype.getRecAcct, write: Tax1099INT.prototype.setRecAcct });
            Element_add_94.Element_add(Tax1099INT, { name: "TAXEXEMPTINT", required: false, order: 13, type: String, read: Tax1099INT.prototype.getTaxExemptInt, write: Tax1099INT.prototype.setTaxExemptInt });
            Element_add_94.Element_add(Tax1099INT, { name: "SPECIFIEDPABINT", required: false, order: 14, type: String, read: Tax1099INT.prototype.getSpecifiedPabInt, write: Tax1099INT.prototype.setSpecifiedPabInt });
        }
    };
});
System.register("domain/data/tax1099/Tax1099MISC", ["domain/data/tax1099/PayerAddress", "domain/data/tax1099/RecAddress", "meta/Aggregate_add", "meta/Element_add", "meta/ChildAggregate_add"], function (exports_275, context_275) {
    "use strict";
    var PayerAddress_4, RecAddress_4, Aggregate_Add_150, Element_add_95, ChildAggregate_add_99, Tax1099MISC;
    var __moduleName = context_275 && context_275.id;
    return {
        setters: [
            function (PayerAddress_4_1) {
                PayerAddress_4 = PayerAddress_4_1;
            },
            function (RecAddress_4_1) {
                RecAddress_4 = RecAddress_4_1;
            },
            function (Aggregate_Add_150_1) {
                Aggregate_Add_150 = Aggregate_Add_150_1;
            },
            function (Element_add_95_1) {
                Element_add_95 = Element_add_95_1;
            },
            function (ChildAggregate_add_99_1) {
                ChildAggregate_add_99 = ChildAggregate_add_99_1;
            }
        ],
        execute: function () {
            /**
             * @author Aparna Gawali
             * aparna.gawali@sungard.com
             */
            Tax1099MISC = /** @class */ (function () {
                function Tax1099MISC() {
                }
                Tax1099MISC.prototype.getSrvrtId = function () {
                    return this.srvrtId;
                };
                Tax1099MISC.prototype.setSrvrtId = function (srvrtId) {
                    this.srvrtId = srvrtId;
                };
                Tax1099MISC.prototype.getTaxYear = function () {
                    return this.taxYear;
                };
                Tax1099MISC.prototype.setTaxYear = function (taxYear) {
                    this.taxYear = taxYear;
                };
                /**
                 * @return the royalties
                 */
                Tax1099MISC.prototype.getRoyalties = function () {
                    return this.royalties;
                };
                /**
                 * @param royalties the royalties to set
                 */
                Tax1099MISC.prototype.setRoyalties = function (royalties) {
                    this.royalties = royalties;
                };
                /**
                 * @return the otherIncome
                 */
                Tax1099MISC.prototype.getOtherIncome = function () {
                    return this.otherIncome;
                };
                /**
                 * @param otherIncome the otherIncome to set
                 */
                Tax1099MISC.prototype.setOtherIncome = function (otherIncome) {
                    this.otherIncome = otherIncome;
                };
                /**
                 * @return the fedTaxWh
                 */
                Tax1099MISC.prototype.getFedTaxWh = function () {
                    return this.fedTaxWh;
                };
                /**
                 * @param fedTaxWh the fedTaxWh to set
                 */
                Tax1099MISC.prototype.setFedTaxWh = function (fedTaxWh) {
                    this.fedTaxWh = fedTaxWh;
                };
                /**
                 * @return the subPmts
                 */
                Tax1099MISC.prototype.getSubPmts = function () {
                    return this.subPmts;
                };
                /**
                 * @param subPmts the subPmts to set
                 */
                Tax1099MISC.prototype.setSubPmts = function (subPmts) {
                    this.subPmts = subPmts;
                };
                /**
                 * @return the payerAddress
                 */
                Tax1099MISC.prototype.getPayerAddress = function () {
                    return this.payerAddress;
                };
                /**
                 * @param payerAddress the payerAddress to set
                 */
                Tax1099MISC.prototype.setPayerAddress = function (payerAddress) {
                    this.payerAddress = payerAddress;
                };
                /**
                 * @return the payerId
                 */
                Tax1099MISC.prototype.getPayerId = function () {
                    return this.payerId;
                };
                /**
                 * @param payerId the payerId to set
                 */
                Tax1099MISC.prototype.setPayerId = function (payerId) {
                    this.payerId = payerId;
                };
                /**
                 * @return the recAddress
                 */
                Tax1099MISC.prototype.getRecAddress = function () {
                    return this.recAddress;
                };
                /**
                 * @param recAddress the recAddress to set
                 */
                Tax1099MISC.prototype.setRecAddress = function (recAddress) {
                    this.recAddress = recAddress;
                };
                /**
                 * @return the recId
                 */
                Tax1099MISC.prototype.getRecId = function () {
                    return this.recId;
                };
                /**
                 * @param recId the recId to set
                 */
                Tax1099MISC.prototype.setRecId = function (recId) {
                    this.recId = recId;
                };
                /**
                 * @return the recAcct
                 */
                Tax1099MISC.prototype.getRecAcct = function () {
                    return this.recAcct;
                };
                /**
                 * @param recAcct the recAcct to set
                 */
                Tax1099MISC.prototype.setRecAcct = function (recAcct) {
                    this.recAcct = recAcct;
                };
                return Tax1099MISC;
            }());
            exports_275("Tax1099MISC", Tax1099MISC);
            Aggregate_Add_150.Aggregate_add(Tax1099MISC, "TAX1099MISC_V100");
            Element_add_95.Element_add(Tax1099MISC, { name: "SRVRTID", required: true, order: 0, type: String, read: Tax1099MISC.prototype.getSrvrtId, write: Tax1099MISC.prototype.setSrvrtId });
            Element_add_95.Element_add(Tax1099MISC, { name: "TAXYEAR", required: true, order: 1, type: String, read: Tax1099MISC.prototype.getTaxYear, write: Tax1099MISC.prototype.setTaxYear });
            Element_add_95.Element_add(Tax1099MISC, { name: "ROYALTIES", required: false, order: 2, type: String, read: Tax1099MISC.prototype.getRoyalties, write: Tax1099MISC.prototype.setRoyalties });
            Element_add_95.Element_add(Tax1099MISC, { name: "OTHERINCOME", required: false, order: 3, type: String, read: Tax1099MISC.prototype.getOtherIncome, write: Tax1099MISC.prototype.setOtherIncome });
            Element_add_95.Element_add(Tax1099MISC, { name: "FEDTAXWH", required: false, order: 4, type: String, read: Tax1099MISC.prototype.getFedTaxWh, write: Tax1099MISC.prototype.setFedTaxWh });
            Element_add_95.Element_add(Tax1099MISC, { name: "SUBPMTS", required: false, order: 5, type: String, read: Tax1099MISC.prototype.getSubPmts, write: Tax1099MISC.prototype.setSubPmts });
            ChildAggregate_add_99.ChildAggregate_add(Tax1099MISC, { required: true, order: 6, type: PayerAddress_4.PayerAddress, read: Tax1099MISC.prototype.getPayerAddress, write: Tax1099MISC.prototype.setPayerAddress });
            Element_add_95.Element_add(Tax1099MISC, { name: "PAYERID", required: true, order: 7, type: String, read: Tax1099MISC.prototype.getPayerId, write: Tax1099MISC.prototype.setPayerId });
            ChildAggregate_add_99.ChildAggregate_add(Tax1099MISC, { required: true, order: 8, type: RecAddress_4.RecAddress, read: Tax1099MISC.prototype.getRecAddress, write: Tax1099MISC.prototype.setRecAddress });
            Element_add_95.Element_add(Tax1099MISC, { name: "RECID", required: true, order: 9, type: String, read: Tax1099MISC.prototype.getRecId, write: Tax1099MISC.prototype.setRecId });
            Element_add_95.Element_add(Tax1099MISC, { name: "RECACCT", required: true, order: 10, type: String, read: Tax1099MISC.prototype.getRecAcct, write: Tax1099MISC.prototype.setRecAcct });
        }
    };
});
System.register("domain/data/tax1099/Tax1099OID", ["domain/data/tax1099/PayerAddress", "domain/data/tax1099/RecAddress", "meta/Aggregate_add", "meta/Element_add", "meta/ChildAggregate_add"], function (exports_276, context_276) {
    "use strict";
    var PayerAddress_5, RecAddress_5, Aggregate_Add_151, Element_add_96, ChildAggregate_add_100, Tax1099OID;
    var __moduleName = context_276 && context_276.id;
    return {
        setters: [
            function (PayerAddress_5_1) {
                PayerAddress_5 = PayerAddress_5_1;
            },
            function (RecAddress_5_1) {
                RecAddress_5 = RecAddress_5_1;
            },
            function (Aggregate_Add_151_1) {
                Aggregate_Add_151 = Aggregate_Add_151_1;
            },
            function (Element_add_96_1) {
                Element_add_96 = Element_add_96_1;
            },
            function (ChildAggregate_add_100_1) {
                ChildAggregate_add_100 = ChildAggregate_add_100_1;
            }
        ],
        execute: function () {
            /**
             * @author Aparna Gawali
             * aparna.gawali@sungard.com
             */
            Tax1099OID = /** @class */ (function () {
                function Tax1099OID() {
                }
                Tax1099OID.prototype.getSrvrtId = function () {
                    return this.srvrtId;
                };
                Tax1099OID.prototype.setSrvrtId = function (srvrtId) {
                    this.srvrtId = srvrtId;
                };
                Tax1099OID.prototype.getTaxYear = function () {
                    return this.taxYear;
                };
                Tax1099OID.prototype.setTaxYear = function (taxYear) {
                    this.taxYear = taxYear;
                };
                /**
                 * @return the originalDisc
                 */
                Tax1099OID.prototype.getOriginalDisc = function () {
                    return this.originalDisc;
                };
                /**
                 * @param originalDisc the originalDisc to set
                 */
                Tax1099OID.prototype.setOriginalDisc = function (originalDisc) {
                    this.originalDisc = originalDisc;
                };
                /**
                 * @return the otherPerInt
                 */
                Tax1099OID.prototype.getOtherPerInt = function () {
                    return this.otherPerInt;
                };
                /**
                 * @param otherPerInt the otherPerInt to set
                 */
                Tax1099OID.prototype.setOtherPerInt = function (otherPerInt) {
                    this.otherPerInt = otherPerInt;
                };
                /**
                 * @return the erlWithPen
                 */
                Tax1099OID.prototype.getErlWithPen = function () {
                    return this.erlWithPen;
                };
                /**
                 * @param erlWithPen the erlWithPen to set
                 */
                Tax1099OID.prototype.setErlWithPen = function (erlWithPen) {
                    this.erlWithPen = erlWithPen;
                };
                /**
                 * @return the fedTaxWh
                 */
                Tax1099OID.prototype.getFedTaxWh = function () {
                    return this.fedTaxWh;
                };
                /**
                 * @param fedTaxWh the fedTaxWh to set
                 */
                Tax1099OID.prototype.setFedTaxWh = function (fedTaxWh) {
                    this.fedTaxWh = fedTaxWh;
                };
                /**
                 * @return the desc
                 */
                Tax1099OID.prototype.getDesc = function () {
                    return this.desc;
                };
                /**
                 * @param desc the desc to set
                 */
                Tax1099OID.prototype.setDesc = function (desc) {
                    this.desc = desc;
                };
                /**
                 * @return the oidOnUstres
                 */
                Tax1099OID.prototype.getOidOnUstres = function () {
                    return this.oidOnUstres;
                };
                /**
                 * @param oidOnUstres the oidOnUstres to set
                 */
                Tax1099OID.prototype.setOidOnUstres = function (oidOnUstres) {
                    this.oidOnUstres = oidOnUstres;
                };
                /**
                 * @return the investExp
                 */
                Tax1099OID.prototype.getInvestExp = function () {
                    return this.investExp;
                };
                /**
                 * @param investExp the investExp to set
                 */
                Tax1099OID.prototype.setInvestExp = function (investExp) {
                    this.investExp = investExp;
                };
                /**
                 * @return the payerAddress
                 */
                Tax1099OID.prototype.getPayerAddress = function () {
                    return this.payerAddress;
                };
                /**
                 * @param payerAddress the payerAddress to set
                 */
                Tax1099OID.prototype.setPayerAddress = function (payerAddress) {
                    this.payerAddress = payerAddress;
                };
                /**
                 * @return the payerId
                 */
                Tax1099OID.prototype.getPayerId = function () {
                    return this.payerId;
                };
                /**
                 * @param payerId the payerId to set
                 */
                Tax1099OID.prototype.setPayerId = function (payerId) {
                    this.payerId = payerId;
                };
                /**
                 * @return the recAddress
                 */
                Tax1099OID.prototype.getRecAddress = function () {
                    return this.recAddress;
                };
                /**
                 * @param recAddress the recAddress to set
                 */
                Tax1099OID.prototype.setRecAddress = function (recAddress) {
                    this.recAddress = recAddress;
                };
                /**
                 * @return the recId
                 */
                Tax1099OID.prototype.getRecId = function () {
                    return this.recId;
                };
                /**
                 * @param recId the recId to set
                 */
                Tax1099OID.prototype.setRecId = function (recId) {
                    this.recId = recId;
                };
                /**
                 * @return the recAcct
                 */
                Tax1099OID.prototype.getRecAcct = function () {
                    return this.recAcct;
                };
                /**
                 * @param recAcct the recAcct to set
                 */
                Tax1099OID.prototype.setRecAcct = function (recAcct) {
                    this.recAcct = recAcct;
                };
                return Tax1099OID;
            }());
            exports_276("Tax1099OID", Tax1099OID);
            Aggregate_Add_151.Aggregate_add(Tax1099OID, "TAX1099OID_V100");
            Element_add_96.Element_add(Tax1099OID, { name: "SRVRTID", required: true, order: 0, type: String, read: Tax1099OID.prototype.getSrvrtId, write: Tax1099OID.prototype.setSrvrtId });
            Element_add_96.Element_add(Tax1099OID, { name: "TAXYEAR", required: true, order: 1, type: String, read: Tax1099OID.prototype.getTaxYear, write: Tax1099OID.prototype.setTaxYear });
            Element_add_96.Element_add(Tax1099OID, { name: "ORIGISDISC", required: false, order: 2, type: String, read: Tax1099OID.prototype.getOriginalDisc, write: Tax1099OID.prototype.setOriginalDisc });
            Element_add_96.Element_add(Tax1099OID, { name: "OTHERPERINT", required: false, order: 3, type: String, read: Tax1099OID.prototype.getOtherPerInt, write: Tax1099OID.prototype.setOtherPerInt });
            Element_add_96.Element_add(Tax1099OID, { name: "ERLWITHPEN", required: false, order: 4, type: String, read: Tax1099OID.prototype.getErlWithPen, write: Tax1099OID.prototype.setErlWithPen });
            Element_add_96.Element_add(Tax1099OID, { name: "FEDTAXWH", required: false, order: 5, type: String, read: Tax1099OID.prototype.getFedTaxWh, write: Tax1099OID.prototype.setFedTaxWh });
            Element_add_96.Element_add(Tax1099OID, { name: "DESCRIPTION", required: true, order: 6, type: String, read: Tax1099OID.prototype.getDesc, write: Tax1099OID.prototype.setDesc });
            Element_add_96.Element_add(Tax1099OID, { name: "OIDONUSTRES", required: false, order: 7, type: String, read: Tax1099OID.prototype.getOidOnUstres, write: Tax1099OID.prototype.setOidOnUstres });
            Element_add_96.Element_add(Tax1099OID, { name: "INVESTEXP", required: false, order: 8, type: String, read: Tax1099OID.prototype.getInvestExp, write: Tax1099OID.prototype.setInvestExp });
            ChildAggregate_add_100.ChildAggregate_add(Tax1099OID, { required: true, order: 9, type: PayerAddress_5.PayerAddress, read: Tax1099OID.prototype.getPayerAddress, write: Tax1099OID.prototype.setPayerAddress });
            Element_add_96.Element_add(Tax1099OID, { name: "PAYERID", required: true, order: 10, type: String, read: Tax1099OID.prototype.getPayerId, write: Tax1099OID.prototype.setPayerId });
            ChildAggregate_add_100.ChildAggregate_add(Tax1099OID, { required: true, order: 11, type: RecAddress_5.RecAddress, read: Tax1099OID.prototype.getRecAddress, write: Tax1099OID.prototype.setRecAddress });
            Element_add_96.Element_add(Tax1099OID, { name: "RECID", required: true, order: 12, type: String, read: Tax1099OID.prototype.getRecId, write: Tax1099OID.prototype.setRecId });
            Element_add_96.Element_add(Tax1099OID, { name: "RECACCT", required: true, order: 13, type: String, read: Tax1099OID.prototype.getRecAcct, write: Tax1099OID.prototype.setRecAcct });
        }
    };
});
System.register("domain/data/tax1099/Tax1099R", ["domain/data/tax1099/PayerAddress", "domain/data/tax1099/RecAddress", "meta/Aggregate_add", "meta/Element_add", "meta/ChildAggregate_add"], function (exports_277, context_277) {
    "use strict";
    var PayerAddress_6, RecAddress_6, Aggregate_Add_152, Element_add_97, ChildAggregate_add_101, Tax1099R;
    var __moduleName = context_277 && context_277.id;
    return {
        setters: [
            function (PayerAddress_6_1) {
                PayerAddress_6 = PayerAddress_6_1;
            },
            function (RecAddress_6_1) {
                RecAddress_6 = RecAddress_6_1;
            },
            function (Aggregate_Add_152_1) {
                Aggregate_Add_152 = Aggregate_Add_152_1;
            },
            function (Element_add_97_1) {
                Element_add_97 = Element_add_97_1;
            },
            function (ChildAggregate_add_101_1) {
                ChildAggregate_add_101 = ChildAggregate_add_101_1;
            }
        ],
        execute: function () {
            /**
             * @author Aparna Gawali
             * aparna.gawali@sungard.com
             */
            Tax1099R = /** @class */ (function () {
                function Tax1099R() {
                }
                Tax1099R.prototype.getSrvrtId = function () {
                    return this.srvrtId;
                };
                Tax1099R.prototype.setSrvrtId = function (srvrtId) {
                    this.srvrtId = srvrtId;
                };
                Tax1099R.prototype.getTaxYear = function () {
                    return this.taxYear;
                };
                Tax1099R.prototype.setTaxYear = function (taxYear) {
                    this.taxYear = taxYear;
                };
                /**
                   * @return the grossDist
                   */
                Tax1099R.prototype.getGrossDist = function () {
                    return this.grossDist;
                };
                /**
                 * @param grossDist the grossDist to set
                 */
                Tax1099R.prototype.setGrossDist = function (grossDist) {
                    this.grossDist = grossDist;
                };
                /**
                 * @return the taxAmt
                 */
                Tax1099R.prototype.getTaxAmt = function () {
                    return this.taxAmt;
                };
                /**
                 * @param taxAmt the taxAmt to set
                 */
                Tax1099R.prototype.setTaxAmt = function (taxAmt) {
                    this.taxAmt = taxAmt;
                };
                /**
                 * @return the taxAmtNd
                 */
                Tax1099R.prototype.getTaxAmtNd = function () {
                    return this.taxAmtNd;
                };
                /**
                 * @param taxAmtNd the taxAmtNd to set
                 */
                Tax1099R.prototype.setTaxAmtNd = function (taxAmtNd) {
                    this.taxAmtNd = taxAmtNd;
                };
                /**
                 * @return the capGain
                 */
                Tax1099R.prototype.getCapGain = function () {
                    return this.capGain;
                };
                /**
                 * @param capGain the capGain to set
                 */
                Tax1099R.prototype.setCapGain = function (capGain) {
                    this.capGain = capGain;
                };
                /**
                 * @return the fedTaxWh
                 */
                Tax1099R.prototype.getFedTaxWh = function () {
                    return this.fedTaxWh;
                };
                /**
                 * @param fedTaxWh the fedTaxWh to set
                 */
                Tax1099R.prototype.setFedTaxWh = function (fedTaxWh) {
                    this.fedTaxWh = fedTaxWh;
                };
                /**
                 * @return the empContins
                 */
                Tax1099R.prototype.getEmpContins = function () {
                    return this.empContins;
                };
                /**
                 * @param empContins the empContins to set
                 */
                Tax1099R.prototype.setEmpContins = function (empContins) {
                    this.empContins = empContins;
                };
                /**
                 * @return the netUnapEmp
                 */
                Tax1099R.prototype.getNetUnapEmp = function () {
                    return this.netUnapEmp;
                };
                /**
                 * @param netUnapEmp the netUnapEmp to set
                 */
                Tax1099R.prototype.setNetUnapEmp = function (netUnapEmp) {
                    this.netUnapEmp = netUnapEmp;
                };
                /**
                 * @return the distCode
                 */
                Tax1099R.prototype.getDistCode = function () {
                    return this.distCode;
                };
                /**
                 * @param distCode the distCode to set
                 */
                Tax1099R.prototype.setDistCode = function (distCode) {
                    this.distCode = distCode;
                };
                /**
                 * @return the iraSepSimp
                 */
                Tax1099R.prototype.getIraSepSimp = function () {
                    return this.iraSepSimp;
                };
                /**
                 * @param iraSepSimp the iraSepSimp to set
                 */
                Tax1099R.prototype.setIraSepSimp = function (iraSepSimp) {
                    this.iraSepSimp = iraSepSimp;
                };
                /**
                 * @return the annCtrctDist
                 */
                Tax1099R.prototype.getAnnCtrctDist = function () {
                    return this.annCtrctDist;
                };
                /**
                 * @param annCtrctDist the annCtrctDist to set
                 */
                Tax1099R.prototype.setAnnCtrctDist = function (annCtrctDist) {
                    this.annCtrctDist = annCtrctDist;
                };
                /**
                 * @return the totEmpCount
                 */
                Tax1099R.prototype.getTotEmpCount = function () {
                    return this.totEmpCount;
                };
                /**
                 * @param totEmpCount the totEmpCount to set
                 */
                Tax1099R.prototype.setTotEmpCount = function (totEmpCount) {
                    this.totEmpCount = totEmpCount;
                };
                /**
                 * @return the payerAddress
                 */
                Tax1099R.prototype.getPayerAddress = function () {
                    return this.payerAddress;
                };
                /**
                 * @param payerAddress the payerAddress to set
                 */
                Tax1099R.prototype.setPayerAddress = function (payerAddress) {
                    this.payerAddress = payerAddress;
                };
                /**
                 * @return the payerId
                 */
                Tax1099R.prototype.getPayerId = function () {
                    return this.payerId;
                };
                /**
                 * @param payerId the payerId to set
                 */
                Tax1099R.prototype.setPayerId = function (payerId) {
                    this.payerId = payerId;
                };
                /**
                 * @return the recAddress
                 */
                Tax1099R.prototype.getRecAddress = function () {
                    return this.recAddress;
                };
                /**
                 * @param recAddress the recAddress to set
                 */
                Tax1099R.prototype.setRecAddress = function (recAddress) {
                    this.recAddress = recAddress;
                };
                /**
                 * @return the recId
                 */
                Tax1099R.prototype.getRecId = function () {
                    return this.recId;
                };
                /**
                 * @param recId the recId to set
                 */
                Tax1099R.prototype.setRecId = function (recId) {
                    this.recId = recId;
                };
                /**
                 * @return the recAcct
                 */
                Tax1099R.prototype.getRecAcct = function () {
                    return this.recAcct;
                };
                /**
                 * @param recAcct the recAcct to set
                 */
                Tax1099R.prototype.setRecAcct = function (recAcct) {
                    this.recAcct = recAcct;
                };
                return Tax1099R;
            }());
            exports_277("Tax1099R", Tax1099R);
            Aggregate_Add_152.Aggregate_add(Tax1099R, "TAX1099R_V100");
            Element_add_97.Element_add(Tax1099R, { name: "SRVRTID", required: true, order: 0, type: String, read: Tax1099R.prototype.getSrvrtId, write: Tax1099R.prototype.setSrvrtId });
            Element_add_97.Element_add(Tax1099R, { name: "TAXYEAR", required: true, order: 1, type: String, read: Tax1099R.prototype.getTaxYear, write: Tax1099R.prototype.setTaxYear });
            Element_add_97.Element_add(Tax1099R, { name: "GROSSDIST", required: true, order: 2, type: String, read: Tax1099R.prototype.getGrossDist, write: Tax1099R.prototype.setGrossDist });
            Element_add_97.Element_add(Tax1099R, { name: "TAXAMT", required: false, order: 3, type: String, read: Tax1099R.prototype.getTaxAmt, write: Tax1099R.prototype.setTaxAmt });
            Element_add_97.Element_add(Tax1099R, { name: "TAXAMTND", required: false, order: 4, type: String, read: Tax1099R.prototype.getTaxAmtNd, write: Tax1099R.prototype.setTaxAmtNd });
            Element_add_97.Element_add(Tax1099R, { name: "CAPGAIN", required: false, order: 5, type: String, read: Tax1099R.prototype.getCapGain, write: Tax1099R.prototype.setCapGain });
            Element_add_97.Element_add(Tax1099R, { name: "FEDTAXWH", required: false, order: 6, type: String, read: Tax1099R.prototype.getFedTaxWh, write: Tax1099R.prototype.setFedTaxWh });
            Element_add_97.Element_add(Tax1099R, { name: "EMPCONTINS", required: false, order: 7, type: String, read: Tax1099R.prototype.getEmpContins, write: Tax1099R.prototype.setEmpContins });
            Element_add_97.Element_add(Tax1099R, { name: "NETUNAPEMP", required: false, order: 8, type: String, read: Tax1099R.prototype.getNetUnapEmp, write: Tax1099R.prototype.setNetUnapEmp });
            Element_add_97.Element_add(Tax1099R, { name: "DISTCODE", required: true, order: 9, type: String, read: Tax1099R.prototype.getDistCode, write: Tax1099R.prototype.setDistCode });
            Element_add_97.Element_add(Tax1099R, { name: "IRASEPSIMP", required: true, order: 10, type: String, read: Tax1099R.prototype.getIraSepSimp, write: Tax1099R.prototype.setIraSepSimp });
            Element_add_97.Element_add(Tax1099R, { name: "ANNCTRCTDIST", required: false, order: 11, type: String, read: Tax1099R.prototype.getAnnCtrctDist, write: Tax1099R.prototype.setAnnCtrctDist });
            Element_add_97.Element_add(Tax1099R, { name: "TOTEMPCONT", required: false, order: 12, type: String, read: Tax1099R.prototype.getTotEmpCount, write: Tax1099R.prototype.setTotEmpCount });
            ChildAggregate_add_101.ChildAggregate_add(Tax1099R, { required: true, order: 13, type: PayerAddress_6.PayerAddress, read: Tax1099R.prototype.getPayerAddress, write: Tax1099R.prototype.setPayerAddress });
            Element_add_97.Element_add(Tax1099R, { name: "PAYERID", required: true, order: 14, type: String, read: Tax1099R.prototype.getPayerId, write: Tax1099R.prototype.setPayerId });
            ChildAggregate_add_101.ChildAggregate_add(Tax1099R, { required: true, order: 15, type: RecAddress_6.RecAddress, read: Tax1099R.prototype.getRecAddress, write: Tax1099R.prototype.setRecAddress });
            Element_add_97.Element_add(Tax1099R, { name: "RECID", required: true, order: 16, type: String, read: Tax1099R.prototype.getRecId, write: Tax1099R.prototype.setRecId });
            Element_add_97.Element_add(Tax1099R, { name: "RECACCT", required: true, order: 17, type: String, read: Tax1099R.prototype.getRecAcct, write: Tax1099R.prototype.setRecAcct });
        }
    };
});
System.register("domain/data/tax1099/Tax1099Request", ["domain/data/common/T1099Request", "meta/Aggregate_add", "meta/Element_add"], function (exports_278, context_278) {
    "use strict";
    var T1099Request_1, Aggregate_Add_153, Element_add_98, Tax1099Request;
    var __moduleName = context_278 && context_278.id;
    return {
        setters: [
            function (T1099Request_1_1) {
                T1099Request_1 = T1099Request_1_1;
            },
            function (Aggregate_Add_153_1) {
                Aggregate_Add_153 = Aggregate_Add_153_1;
            },
            function (Element_add_98_1) {
                Element_add_98 = Element_add_98_1;
            }
        ],
        execute: function () {
            /**
             * @author Aparna Gawali
             * aparna.gawali@sungard.com
             */
            Tax1099Request = /** @class */ (function (_super) {
                __extends(Tax1099Request, _super);
                function Tax1099Request() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Tax1099Request.prototype.getTaxYear = function () {
                    return this.taxYear;
                };
                Tax1099Request.prototype.setTaxYear = function (taxYear) {
                    this.taxYear = taxYear;
                };
                return Tax1099Request;
            }(T1099Request_1.T1099Request));
            exports_278("Tax1099Request", Tax1099Request);
            Aggregate_Add_153.Aggregate_add(Tax1099Request, "TAX1099RQ");
            Element_add_98.Element_add(Tax1099Request, { name: "TAXYEAR", required: true, order: 0, type: String, read: Tax1099Request.prototype.getTaxYear, write: Tax1099Request.prototype.setTaxYear });
        }
    };
});
System.register("domain/data/tax1099/Tax1099RequestTransaction", ["domain/data/TransactionWrappedRequestMessage", "domain/data/tax1099/Tax1099Request", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_279, context_279) {
    "use strict";
    var TransactionWrappedRequestMessage_9, Tax1099Request_1, Aggregate_Add_154, ChildAggregate_add_102, Tax1099RequestTransaction;
    var __moduleName = context_279 && context_279.id;
    return {
        setters: [
            function (TransactionWrappedRequestMessage_9_1) {
                TransactionWrappedRequestMessage_9 = TransactionWrappedRequestMessage_9_1;
            },
            function (Tax1099Request_1_1) {
                Tax1099Request_1 = Tax1099Request_1_1;
            },
            function (Aggregate_Add_154_1) {
                Aggregate_Add_154 = Aggregate_Add_154_1;
            },
            function (ChildAggregate_add_102_1) {
                ChildAggregate_add_102 = ChildAggregate_add_102_1;
            }
        ],
        execute: function () {
            /**
             * @author Aparna Gawali
             * aparna.gawali@sungard.com
             */
            Tax1099RequestTransaction = /** @class */ (function (_super) {
                __extends(Tax1099RequestTransaction, _super);
                function Tax1099RequestTransaction() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * The tax1099Request.
                 *
                 * @return The tax1099Request.
                 */
                Tax1099RequestTransaction.prototype.getTax1099Request = function () {
                    return this.tax1099Request;
                };
                /**
                 * The tax1099Request.
                 *
                 * @param tax1099Request The message.
                 *
                 */
                Tax1099RequestTransaction.prototype.setTax1099Request = function (tax1099Request) {
                    this.tax1099Request = tax1099Request;
                };
                // Inherited.
                Tax1099RequestTransaction.prototype.setWrappedMessage = function (tax1099Request) {
                    this.setTax1099Request(tax1099Request);
                };
                return Tax1099RequestTransaction;
            }(TransactionWrappedRequestMessage_9.TransactionWrappedRequestMessage));
            exports_279("Tax1099RequestTransaction", Tax1099RequestTransaction);
            Aggregate_Add_154.Aggregate_add(Tax1099RequestTransaction, "TAX1099TRNRQ");
            ChildAggregate_add_102.ChildAggregate_add(Tax1099RequestTransaction, { required: true, order: 30, type: Tax1099Request_1.Tax1099Request, read: Tax1099RequestTransaction.prototype.getTax1099Request, write: Tax1099RequestTransaction.prototype.setTax1099Request });
        }
    };
});
System.register("domain/data/tax1099/Tax1099RequestMessageSet", ["domain/data/RequestMessageSet", "domain/data/tax1099/Tax1099RequestTransaction", "domain/data/MessageSetType", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_280, context_280) {
    "use strict";
    var RequestMessageSet_10, Tax1099RequestTransaction_1, MessageSetType_32, Aggregate_Add_155, ChildAggregate_add_103, Tax1099RequestMessageSet;
    var __moduleName = context_280 && context_280.id;
    return {
        setters: [
            function (RequestMessageSet_10_1) {
                RequestMessageSet_10 = RequestMessageSet_10_1;
            },
            function (Tax1099RequestTransaction_1_1) {
                Tax1099RequestTransaction_1 = Tax1099RequestTransaction_1_1;
            },
            function (MessageSetType_32_1) {
                MessageSetType_32 = MessageSetType_32_1;
            },
            function (Aggregate_Add_155_1) {
                Aggregate_Add_155 = Aggregate_Add_155_1;
            },
            function (ChildAggregate_add_103_1) {
                ChildAggregate_add_103 = ChildAggregate_add_103_1;
            }
        ],
        execute: function () {
            /**
             * @author aparna.gawali
             * aparna.gawali@sungard.com
             *
             */
            Tax1099RequestMessageSet = /** @class */ (function (_super) {
                __extends(Tax1099RequestMessageSet, _super);
                function Tax1099RequestMessageSet() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Tax1099RequestMessageSet.prototype.getType = function () {
                    return MessageSetType_32.MessageSetType.tax1099;
                };
                /**
                 * The statement request.
                 *
                 * @return The statement request.
                 */
                Tax1099RequestMessageSet.prototype.getTaxRequestTransaction = function () {
                    return this.taxRequestTransaction;
                };
                /**
                 * The statement request.
                 *
                 * @param taxRequestTransaction The statement request.
                 */
                Tax1099RequestMessageSet.prototype.setTaxRequestTransaction = function (taxRequestTransaction) {
                    this.taxRequestTransaction = taxRequestTransaction;
                };
                // Inherited.
                Tax1099RequestMessageSet.prototype.getRequestMessages = function () {
                    var requestMessages = new Array();
                    if (this.getTaxRequestTransaction() != null) {
                        requestMessages.push(this.getTaxRequestTransaction());
                    }
                    return requestMessages;
                };
                return Tax1099RequestMessageSet;
            }(RequestMessageSet_10.RequestMessageSet));
            exports_280("Tax1099RequestMessageSet", Tax1099RequestMessageSet);
            Aggregate_Add_155.Aggregate_add(Tax1099RequestMessageSet, "TAX1099MSGSRQV1");
            ChildAggregate_add_103.ChildAggregate_add(Tax1099RequestMessageSet, { order: 0, type: Tax1099RequestTransaction_1.Tax1099RequestTransaction, read: Tax1099RequestMessageSet.prototype.getTaxRequestTransaction, write: Tax1099RequestMessageSet.prototype.setTaxRequestTransaction });
        }
    };
});
System.register("domain/data/tax1099/Tax1099Response", ["domain/data/common/T1099Response", "domain/data/tax1099/Tax1099DIV", "domain/data/tax1099/Tax1099INT", "domain/data/tax1099/Tax1099R", "domain/data/tax1099/Tax1099B", "domain/data/tax1099/Tax1099MISC", "domain/data/tax1099/Tax1099OID", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_281, context_281) {
    "use strict";
    var T1099Response_1, Tax1099DIV_1, Tax1099INT_1, Tax1099R_1, Tax1099B_1, Tax1099MISC_1, Tax1099OID_1, Aggregate_Add_156, ChildAggregate_add_104, Tax1099Response;
    var __moduleName = context_281 && context_281.id;
    return {
        setters: [
            function (T1099Response_1_1) {
                T1099Response_1 = T1099Response_1_1;
            },
            function (Tax1099DIV_1_1) {
                Tax1099DIV_1 = Tax1099DIV_1_1;
            },
            function (Tax1099INT_1_1) {
                Tax1099INT_1 = Tax1099INT_1_1;
            },
            function (Tax1099R_1_1) {
                Tax1099R_1 = Tax1099R_1_1;
            },
            function (Tax1099B_1_1) {
                Tax1099B_1 = Tax1099B_1_1;
            },
            function (Tax1099MISC_1_1) {
                Tax1099MISC_1 = Tax1099MISC_1_1;
            },
            function (Tax1099OID_1_1) {
                Tax1099OID_1 = Tax1099OID_1_1;
            },
            function (Aggregate_Add_156_1) {
                Aggregate_Add_156 = Aggregate_Add_156_1;
            },
            function (ChildAggregate_add_104_1) {
                ChildAggregate_add_104 = ChildAggregate_add_104_1;
            }
        ],
        execute: function () {
            /**
             * @author Aparna Gawali
             * aparna.gawali@sungard.com
             */
            Tax1099Response = /** @class */ (function (_super) {
                __extends(Tax1099Response, _super);
                function Tax1099Response() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * @return the lstTax1099DIV
                 */
                Tax1099Response.prototype.getLstTax1099DIV = function () {
                    return this.lstTax1099DIV;
                };
                /**
                 * @param lstTax1099DIV
                 *            the lstTax1099DIV to set
                 */
                Tax1099Response.prototype.setLstTax1099DIV = function (lstTax1099DIV) {
                    this.lstTax1099DIV = lstTax1099DIV;
                };
                Tax1099Response.prototype.getResponseMessageName = function () {
                    return "1099 Tax details";
                };
                /**
                 * @return the lstTax1099INT
                 */
                Tax1099Response.prototype.getLstTax1099INT = function () {
                    return this.lstTax1099INT;
                };
                /**
                 * @param lstTax1099INT the lstTax1099INT to set
                 */
                Tax1099Response.prototype.setLstTax1099INT = function (lstTax1099INT) {
                    this.lstTax1099INT = lstTax1099INT;
                };
                /**
                 * @return the lstTax1099R
                 */
                Tax1099Response.prototype.getLstTax1099R = function () {
                    return this.lstTax1099R;
                };
                /**
                 * @param lstTax1099R the lstTax1099R to set
                 */
                Tax1099Response.prototype.setLstTax1099R = function (lstTax1099R) {
                    this.lstTax1099R = lstTax1099R;
                };
                /**
                 * @return the lstTax1099B
                 */
                Tax1099Response.prototype.getLstTax1099B = function () {
                    return this.lstTax1099B;
                };
                /**
                 * @param lstTax1099B the lstTax1099B to set
                 */
                Tax1099Response.prototype.setLstTax1099B = function (lstTax1099B) {
                    this.lstTax1099B = lstTax1099B;
                };
                /**
                 * @return the lstTax1099MISC
                 */
                Tax1099Response.prototype.getLstTax1099MISC = function () {
                    return this.lstTax1099MISC;
                };
                /**
                 * @param lstTax1099MISC the lstTax1099MISC to set
                 */
                Tax1099Response.prototype.setLstTax1099MISC = function (lstTax1099MISC) {
                    this.lstTax1099MISC = lstTax1099MISC;
                };
                /**
                 * @return the lstTax1099OID
                 */
                Tax1099Response.prototype.getLstTax1099OID = function () {
                    return this.lstTax1099OID;
                };
                /**
                 * @param lstTax1099OID the lstTax1099OID to set
                 */
                Tax1099Response.prototype.setLstTax1099OID = function (lstTax1099OID) {
                    this.lstTax1099OID = lstTax1099OID;
                };
                return Tax1099Response;
            }(T1099Response_1.T1099Response));
            exports_281("Tax1099Response", Tax1099Response);
            Aggregate_Add_156.Aggregate_add(Tax1099Response, "TAX1099RS");
            ChildAggregate_add_104.ChildAggregate_add(Tax1099Response, { required: false, order: 0, type: Array, collectionEntryType: Tax1099DIV_1.Tax1099DIV, read: Tax1099Response.prototype.getLstTax1099DIV, write: Tax1099Response.prototype.setLstTax1099DIV });
            ChildAggregate_add_104.ChildAggregate_add(Tax1099Response, { required: false, order: 1, type: Array, collectionEntryType: Tax1099INT_1.Tax1099INT, read: Tax1099Response.prototype.getLstTax1099INT, write: Tax1099Response.prototype.setLstTax1099INT });
            ChildAggregate_add_104.ChildAggregate_add(Tax1099Response, { required: false, order: 2, type: Array, collectionEntryType: Tax1099R_1.Tax1099R, read: Tax1099Response.prototype.getLstTax1099R, write: Tax1099Response.prototype.setLstTax1099R });
            ChildAggregate_add_104.ChildAggregate_add(Tax1099Response, { required: false, order: 3, type: Array, collectionEntryType: Tax1099B_1.Tax1099B, read: Tax1099Response.prototype.getLstTax1099B, write: Tax1099Response.prototype.setLstTax1099B });
            ChildAggregate_add_104.ChildAggregate_add(Tax1099Response, { required: false, order: 4, type: Array, collectionEntryType: Tax1099MISC_1.Tax1099MISC, read: Tax1099Response.prototype.getLstTax1099MISC, write: Tax1099Response.prototype.setLstTax1099MISC });
            ChildAggregate_add_104.ChildAggregate_add(Tax1099Response, { required: false, order: 5, type: Array, collectionEntryType: Tax1099OID_1.Tax1099OID, read: Tax1099Response.prototype.getLstTax1099OID, write: Tax1099Response.prototype.setLstTax1099OID });
        }
    };
});
System.register("domain/data/tax1099/Tax1099ResponseTransaction", ["domain/data/TransactionWrappedResponseMessage", "domain/data/tax1099/Tax1099Response", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_282, context_282) {
    "use strict";
    var TransactionWrappedResponseMessage_9, Tax1099Response_1, Aggregate_Add_157, ChildAggregate_add_105, Tax1099ResponseTransaction;
    var __moduleName = context_282 && context_282.id;
    return {
        setters: [
            function (TransactionWrappedResponseMessage_9_1) {
                TransactionWrappedResponseMessage_9 = TransactionWrappedResponseMessage_9_1;
            },
            function (Tax1099Response_1_1) {
                Tax1099Response_1 = Tax1099Response_1_1;
            },
            function (Aggregate_Add_157_1) {
                Aggregate_Add_157 = Aggregate_Add_157_1;
            },
            function (ChildAggregate_add_105_1) {
                ChildAggregate_add_105 = ChildAggregate_add_105_1;
            }
        ],
        execute: function () {
            /**
             * @author Aparna Gawali
             * aparna.gawali@sungard.com
             */
            Tax1099ResponseTransaction = /** @class */ (function (_super) {
                __extends(Tax1099ResponseTransaction, _super);
                function Tax1099ResponseTransaction() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                /**
                 * The tax1099Response.
                 *
                 * @return The tax1099Response.
                 */
                Tax1099ResponseTransaction.prototype.getTax1099Response = function () {
                    return this.tax1099Response;
                };
                /**
                 * The tax1099Response.
                 *
                 * @param tax1099Response The message.
                 */
                Tax1099ResponseTransaction.prototype.setTax1099Response = function (tax1099Response) {
                    this.tax1099Response = tax1099Response;
                };
                // Inherited.
                Tax1099ResponseTransaction.prototype.getWrappedMessage = function () {
                    return this.getTax1099Response();
                };
                return Tax1099ResponseTransaction;
            }(TransactionWrappedResponseMessage_9.TransactionWrappedResponseMessage));
            exports_282("Tax1099ResponseTransaction", Tax1099ResponseTransaction);
            Aggregate_Add_157.Aggregate_add(Tax1099ResponseTransaction, "TAX1099TRNRS");
            ChildAggregate_add_105.ChildAggregate_add(Tax1099ResponseTransaction, { required: false, order: 2, type: Tax1099Response_1.Tax1099Response, read: Tax1099ResponseTransaction.prototype.getTax1099Response, write: Tax1099ResponseTransaction.prototype.setTax1099Response });
        }
    };
});
System.register("domain/data/tax1099/Tax1099ResponseMessageSet", ["domain/data/ResponseMessageSet", "domain/data/tax1099/Tax1099ResponseTransaction", "domain/data/MessageSetType", "OFXException", "meta/Aggregate_add", "meta/ChildAggregate_add"], function (exports_283, context_283) {
    "use strict";
    var ResponseMessageSet_9, Tax1099ResponseTransaction_1, MessageSetType_33, OFXException_24, Aggregate_Add_158, ChildAggregate_add_106, Tax1099ResponseMessageSet;
    var __moduleName = context_283 && context_283.id;
    return {
        setters: [
            function (ResponseMessageSet_9_1) {
                ResponseMessageSet_9 = ResponseMessageSet_9_1;
            },
            function (Tax1099ResponseTransaction_1_1) {
                Tax1099ResponseTransaction_1 = Tax1099ResponseTransaction_1_1;
            },
            function (MessageSetType_33_1) {
                MessageSetType_33 = MessageSetType_33_1;
            },
            function (OFXException_24_1) {
                OFXException_24 = OFXException_24_1;
            },
            function (Aggregate_Add_158_1) {
                Aggregate_Add_158 = Aggregate_Add_158_1;
            },
            function (ChildAggregate_add_106_1) {
                ChildAggregate_add_106 = ChildAggregate_add_106_1;
            }
        ],
        execute: function () {
            /**
             * @author Aparna Gawali
             * aparna.gawali@sungard.com
             */
            Tax1099ResponseMessageSet = /** @class */ (function (_super) {
                __extends(Tax1099ResponseMessageSet, _super);
                function Tax1099ResponseMessageSet() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Tax1099ResponseMessageSet.prototype.getType = function () {
                    return MessageSetType_33.MessageSetType.tax1099;
                };
                /**
                 * The taxResponseTransaction list.
                 *
                 * Most OFX files have a single statement response, except MT2OFX
                 * which outputs OFX with multiple statement responses
                 * in a single banking response message set.
                 *
                 * @return The taxResponseTransaction list.
                 */
                Tax1099ResponseMessageSet.prototype.getTaxResponseTransaction = function () {
                    return this.taxResponseTransaction;
                };
                /**
                 * The taxResponseTransaction.
                 *
                 * @param taxResponseTransaction The statement responses.
                 */
                Tax1099ResponseMessageSet.prototype.setTaxResponseTransaction = function (taxResponseTransaction) {
                    if (taxResponseTransaction instanceof Array) {
                        this.taxResponseTransaction = taxResponseTransaction;
                    }
                    else if (taxResponseTransaction instanceof Tax1099ResponseTransaction_1.Tax1099ResponseTransaction) {
                        this.taxResponseTransaction = [taxResponseTransaction];
                    }
                    else {
                        throw new OFXException_24.OFXException("invalid type");
                    }
                };
                // Inherited.
                Tax1099ResponseMessageSet.prototype.getResponseMessages = function () {
                    return this.taxResponseTransaction;
                };
                /**
                 * The first statement response.
                 *
                 * @return the first bank statement response.
                 * @deprecated Use getStatementResponses() because sometimes there are multiple responses
                 */
                Tax1099ResponseMessageSet.prototype.getStatementResponse = function () {
                    return this.taxResponseTransaction == null || this.taxResponseTransaction.length == 0 ? null : this.taxResponseTransaction[0];
                };
                return Tax1099ResponseMessageSet;
            }(ResponseMessageSet_9.ResponseMessageSet));
            exports_283("Tax1099ResponseMessageSet", Tax1099ResponseMessageSet);
            Aggregate_Add_158.Aggregate_add(Tax1099ResponseMessageSet, "TAX1099MSGSRSV1");
            ChildAggregate_add_106.ChildAggregate_add(Tax1099ResponseMessageSet, { order: 0, type: Array, collectionEntryType: Tax1099ResponseTransaction_1.Tax1099ResponseTransaction, read: Tax1099ResponseMessageSet.prototype.getTaxResponseTransaction, write: Tax1099ResponseMessageSet.prototype.setTaxResponseTransaction });
        }
    };
});
var ofx4js;
(function (ofx4js) {
    ;
})(ofx4js || (ofx4js = {}));
module.exports = ofx4js;
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("io/OFXAggregate", [], function (exports_284, context_284) {
    "use strict";
    var __moduleName = context_284 && context_284.id;
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2008 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
        }
    };
});
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("io/RequiredAttributeException", ["OFXRuntimeException"], function (exports_285, context_285) {
    "use strict";
    var OFXRuntimeException_1, RequiredAttributeException;
    var __moduleName = context_285 && context_285.id;
    return {
        setters: [
            function (OFXRuntimeException_1_1) {
                OFXRuntimeException_1 = OFXRuntimeException_1_1;
            }
        ],
        execute: function () {/*
             * Copyright 2008 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
             * Thrown when a required attribute of an aggregate is null or empty.
             *
             * @author Ryan Heaton
             */
            RequiredAttributeException = /** @class */ (function (_super) {
                __extends(RequiredAttributeException, _super);
                function RequiredAttributeException(message) {
                    return _super.call(this, message) || this;
                }
                return RequiredAttributeException;
            }(OFXRuntimeException_1.OFXRuntimeException));
            exports_285("RequiredAttributeException", RequiredAttributeException);
        }
    };
});
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register("meta/Aggregate", [], function (exports_286, context_286) {
    "use strict";
    var Aggregate;
    var __moduleName = context_286 && context_286.id;
    return {
        setters: [],
        execute: function () {/*
             * Copyright 2008 Web Cohesion
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *   http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            /**
             * Annotation for a method that returns an OFX aggregate.
             *
             * @author Ryan Heaton
             */
            Aggregate = /** @class */ (function () {
                function Aggregate(value) {
                    this._value = value;
                }
                /**
                 * The name of the aggregate.
                 *
                 * @return The name of the aggregate.
                 */
                Aggregate.prototype.value = function () {
                    return this._value;
                };
                return Aggregate;
            }());
            exports_286("Aggregate", Aggregate);
        }
    };
});
//# sourceMappingURL=ofx4js.js.map