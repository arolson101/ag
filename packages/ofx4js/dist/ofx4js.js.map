{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/main.js","node_modules/browserify/node_modules/buffer/index.js","node_modules/browserify/node_modules/buffer/node_modules/base64-js/lib/b64.js","node_modules/browserify/node_modules/buffer/node_modules/ieee754/index.js","node_modules/browserify/node_modules/buffer/node_modules/is-array/index.js","node_modules/browserify/node_modules/events/events.js","node_modules/browserify/node_modules/inherits/inherits_browser.js","node_modules/browserify/node_modules/isarray/index.js","node_modules/browserify/node_modules/process/browser.js","node_modules/browserify/node_modules/readable-stream/duplex.js","node_modules/browserify/node_modules/readable-stream/lib/_stream_duplex.js","node_modules/browserify/node_modules/readable-stream/lib/_stream_passthrough.js","node_modules/browserify/node_modules/readable-stream/lib/_stream_readable.js","node_modules/browserify/node_modules/readable-stream/lib/_stream_transform.js","node_modules/browserify/node_modules/readable-stream/lib/_stream_writable.js","node_modules/browserify/node_modules/readable-stream/node_modules/core-util-is/lib/util.js","node_modules/browserify/node_modules/readable-stream/passthrough.js","node_modules/browserify/node_modules/readable-stream/readable.js","node_modules/browserify/node_modules/readable-stream/transform.js","node_modules/browserify/node_modules/readable-stream/writable.js","node_modules/browserify/node_modules/stream-browserify/index.js","node_modules/browserify/node_modules/string_decoder/index.js","node_modules/clone/clone.js","node_modules/sax/lib/sax.js","node_modules/uuid/rng-browser.js","node_modules/uuid/uuid.js","src/client/AccountStatement.js","src/client/BankAccount.js","src/client/CreditCardAccount.js","src/client/FinancialInstitution.js","src/client/FinancialInstitutionAccount.js","src/client/FinancialInstitutionData.js","src/client/FinancialInstitutionProfile.js","src/client/InvestmentAccount.js","src/client/context/DefaultApplicationContext.js","src/client/context/OFXApplicationContext.js","src/client/context/OFXApplicationContextHolder.js","src/client/context/index.js","src/client/impl/BankingAccountImpl.js","src/client/impl/BaseAccountImpl.js","src/client/impl/BaseFinancialInstitutionData.js","src/client/impl/CreditCardAccountImpl.js","src/client/impl/FinancialInstitutionImpl.js","src/client/impl/InvestmentAccountImpl.js","src/client/impl/index.js","src/client/index.js","src/client/net/OFXConnection.js","src/client/net/OFXV1Connection.js","src/client/net/OFXV2Connection.js","src/client/net/index.js","src/domain/data/ApplicationSecurity.js","src/domain/data/MessageSetProfile.js","src/domain/data/MessageSetType.js","src/domain/data/RequestEnvelope.js","src/domain/data/RequestMessage.js","src/domain/data/RequestMessageSet.js","src/domain/data/ResponseEnvelope.js","src/domain/data/ResponseMessage.js","src/domain/data/ResponseMessageSet.js","src/domain/data/SignonProfile.js","src/domain/data/TransactionWrappedRequestMessage.js","src/domain/data/TransactionWrappedResponseMessage.js","src/domain/data/banking/AccountType.js","src/domain/data/banking/BankAccountDetails.js","src/domain/data/banking/BankAccountInfo.js","src/domain/data/banking/BankStatementRequest.js","src/domain/data/banking/BankStatementRequestTransaction.js","src/domain/data/banking/BankStatementResponse.js","src/domain/data/banking/BankStatementResponseTransaction.js","src/domain/data/banking/BankingRequestMessageSet.js","src/domain/data/banking/BankingResponseMessageSet.js","src/domain/data/banking/index.js","src/domain/data/common/AccountDetails.js","src/domain/data/common/AccountInfo.js","src/domain/data/common/AccountStatus.js","src/domain/data/common/BalanceInfo.js","src/domain/data/common/BalanceRecord.js","src/domain/data/common/CorrectionAction.js","src/domain/data/common/Currency.js","src/domain/data/common/Payee.js","src/domain/data/common/ProcessorDayOff.js","src/domain/data/common/StatementRange.js","src/domain/data/common/StatementRequest.js","src/domain/data/common/StatementResponse.js","src/domain/data/common/Status.js","src/domain/data/common/StatusCode.js","src/domain/data/common/StatusHolder.js","src/domain/data/common/T1099Request.js","src/domain/data/common/T1099Response.js","src/domain/data/common/Transaction.js","src/domain/data/common/TransactionList.js","src/domain/data/common/TransactionType.js","src/domain/data/common/TransferInfo.js","src/domain/data/common/TransferStatus.js","src/domain/data/common/TransferStatusEvent.js","src/domain/data/common/UnknownStatusCode.js","src/domain/data/common/index.js","src/domain/data/creditcard/CreditCardAccountDetails.js","src/domain/data/creditcard/CreditCardAccountInfo.js","src/domain/data/creditcard/CreditCardRequestMessageSet.js","src/domain/data/creditcard/CreditCardResponseMessageSet.js","src/domain/data/creditcard/CreditCardStatementRequest.js","src/domain/data/creditcard/CreditCardStatementRequestTransaction.js","src/domain/data/creditcard/CreditCardStatementResponse.js","src/domain/data/creditcard/CreditCardStatementResponseTransaction.js","src/domain/data/creditcard/index.js","src/domain/data/index.js","src/domain/data/investment/accounts/AccountType.js","src/domain/data/investment/accounts/ActivationStatus.js","src/domain/data/investment/accounts/InvestmentAccountDetails.js","src/domain/data/investment/accounts/InvestmentAccountInfo.js","src/domain/data/investment/accounts/SubAccountType.js","src/domain/data/investment/accounts/UnitedStatesAccountType.js","src/domain/data/investment/accounts/index.js","src/domain/data/investment/index.js","src/domain/data/investment/positions/BasePosition.js","src/domain/data/investment/positions/DebtPosition.js","src/domain/data/investment/positions/Inv401KSource.js","src/domain/data/investment/positions/InvestmentPosition.js","src/domain/data/investment/positions/InvestmentPositionList.js","src/domain/data/investment/positions/MutualFundPosition.js","src/domain/data/investment/positions/OptionsPosition.js","src/domain/data/investment/positions/OtherPosition.js","src/domain/data/investment/positions/PositionType.js","src/domain/data/investment/positions/ShortOptionSecurity.js","src/domain/data/investment/positions/StockPosition.js","src/domain/data/investment/positions/index.js","src/domain/data/investment/statements/BalanceList.js","src/domain/data/investment/statements/IncludePosition.js","src/domain/data/investment/statements/InvestmentBalance.js","src/domain/data/investment/statements/InvestmentStatementRequest.js","src/domain/data/investment/statements/InvestmentStatementRequestMessageSet.js","src/domain/data/investment/statements/InvestmentStatementRequestTransaction.js","src/domain/data/investment/statements/InvestmentStatementResponse.js","src/domain/data/investment/statements/InvestmentStatementResponseMessageSet.js","src/domain/data/investment/statements/InvestmentStatementResponseTransaction.js","src/domain/data/investment/statements/index.js","src/domain/data/investment/transactions/BaseBuyInvestmentTransaction.js","src/domain/data/investment/transactions/BaseInvestmentTransaction.js","src/domain/data/investment/transactions/BaseOtherInvestmentTransaction.js","src/domain/data/investment/transactions/BaseSellInvestmentTransaction.js","src/domain/data/investment/transactions/BuyDebtTransaction.js","src/domain/data/investment/transactions/BuyInvestmentTransaction.js","src/domain/data/investment/transactions/BuyMutualFundTransaction.js","src/domain/data/investment/transactions/BuyOptionTransaction.js","src/domain/data/investment/transactions/BuyOtherTransaction.js","src/domain/data/investment/transactions/BuyStockTransaction.js","src/domain/data/investment/transactions/BuyType.js","src/domain/data/investment/transactions/CloseOptionAction.js","src/domain/data/investment/transactions/CloseOptionTransaction.js","src/domain/data/investment/transactions/IncomeTransaction.js","src/domain/data/investment/transactions/IncomeType.js","src/domain/data/investment/transactions/InvestmentBankTransaction.js","src/domain/data/investment/transactions/InvestmentExpenseTransaction.js","src/domain/data/investment/transactions/InvestmentTransaction.js","src/domain/data/investment/transactions/InvestmentTransactionList.js","src/domain/data/investment/transactions/JournalFundTransaction.js","src/domain/data/investment/transactions/JournalSecurityTransaction.js","src/domain/data/investment/transactions/MarginInterestTransaction.js","src/domain/data/investment/transactions/OptionBuyType.js","src/domain/data/investment/transactions/OptionSellType.js","src/domain/data/investment/transactions/OriginalCurrency.js","src/domain/data/investment/transactions/ReinvestIncomeTransaction.js","src/domain/data/investment/transactions/RelatedOptionType.js","src/domain/data/investment/transactions/ReturnOfCapitalTransaction.js","src/domain/data/investment/transactions/SellDebtReason.js","src/domain/data/investment/transactions/SellDebtTransaction.js","src/domain/data/investment/transactions/SellInvestmentTransaction.js","src/domain/data/investment/transactions/SellMutualFundTransaction.js","src/domain/data/investment/transactions/SellOptionTransaction.js","src/domain/data/investment/transactions/SellOtherTransaction.js","src/domain/data/investment/transactions/SellStockTransaction.js","src/domain/data/investment/transactions/SellType.js","src/domain/data/investment/transactions/SplitTransaction.js","src/domain/data/investment/transactions/TransactionType.js","src/domain/data/investment/transactions/TransactionWithSecurity.js","src/domain/data/investment/transactions/TransferAction.js","src/domain/data/investment/transactions/TransferInvestmentTransaction.js","src/domain/data/investment/transactions/index.js","src/domain/data/profile/AbstractMessageSetInfo.js","src/domain/data/profile/CharacterType.js","src/domain/data/profile/ClientRoutingCapability.js","src/domain/data/profile/CoreMessageSetInfo.js","src/domain/data/profile/MessageSetInfoList.js","src/domain/data/profile/ProfileRequest.js","src/domain/data/profile/ProfileRequestMessageSet.js","src/domain/data/profile/ProfileRequestTransaction.js","src/domain/data/profile/ProfileResponse.js","src/domain/data/profile/ProfileResponseMessageSet.js","src/domain/data/profile/ProfileResponseTransaction.js","src/domain/data/profile/SignonInfo.js","src/domain/data/profile/SignonInfoList.js","src/domain/data/profile/SynchronizationCapability.js","src/domain/data/profile/VersionSpecificMessageSetInfo.js","src/domain/data/profile/index.js","src/domain/data/profile/info/BankingMessageSetInfo.js","src/domain/data/profile/info/BankingV1MessageSetInfo.js","src/domain/data/profile/info/BillpayMessageSetInfo.js","src/domain/data/profile/info/BillpayV1MessageSetInfo.js","src/domain/data/profile/info/CreditCardMessageSetInfo.js","src/domain/data/profile/info/CreditCardV1MessageSetInfo.js","src/domain/data/profile/info/EmailMessageSetInfo.js","src/domain/data/profile/info/EmailV1MessageSetInfo.js","src/domain/data/profile/info/InterbankTransferMessageSetInfo.js","src/domain/data/profile/info/InterbankTransferV1MessageSetInfo.js","src/domain/data/profile/info/InvestmentMessageSetInfo.js","src/domain/data/profile/info/InvestmentV1MessageSetInfo.js","src/domain/data/profile/info/ProfileMessageSetInfo.js","src/domain/data/profile/info/ProfileV1MessageSetInfo.js","src/domain/data/profile/info/SecurityListMessageSetInfo.js","src/domain/data/profile/info/SecurityListV1MessageSetInfo.js","src/domain/data/profile/info/SignOnMessageSetInfo.js","src/domain/data/profile/info/SignOnV1MessageSetInfo.js","src/domain/data/profile/info/SignupMessageSetInfo.js","src/domain/data/profile/info/SignupV1MessageSetInfo.js","src/domain/data/profile/info/WireTransferMessageSetInfo.js","src/domain/data/profile/info/WireTransferV1MessageSetInfo.js","src/domain/data/profile/info/banking/EmailProfile.js","src/domain/data/profile/info/banking/StopCheckProfile.js","src/domain/data/profile/info/banking/index.js","src/domain/data/profile/info/common/ImageProfile.js","src/domain/data/profile/info/common/TransferProfile.js","src/domain/data/profile/info/common/index.js","src/domain/data/profile/info/index.js","src/domain/data/profile/info/signup/ClientEnrollment.js","src/domain/data/profile/info/signup/OtherEnrollment.js","src/domain/data/profile/info/signup/WebEnrollment.js","src/domain/data/profile/info/signup/index.js","src/domain/data/seclist/AssetClass.js","src/domain/data/seclist/BaseSecurityInfo.js","src/domain/data/seclist/CallType.js","src/domain/data/seclist/CouponFrequency.js","src/domain/data/seclist/DebtClass.js","src/domain/data/seclist/DebtSecurityInfo.js","src/domain/data/seclist/DebtType.js","src/domain/data/seclist/MutualFundSecurityInfo.js","src/domain/data/seclist/MutualFundType.js","src/domain/data/seclist/OptionSecurityInfo.js","src/domain/data/seclist/OptionType.js","src/domain/data/seclist/OtherSecurityInfo.js","src/domain/data/seclist/SecurityId.js","src/domain/data/seclist/SecurityInfo.js","src/domain/data/seclist/SecurityList.js","src/domain/data/seclist/SecurityListRequest.js","src/domain/data/seclist/SecurityListRequestMessageSet.js","src/domain/data/seclist/SecurityListRequestTransaction.js","src/domain/data/seclist/SecurityListResponse.js","src/domain/data/seclist/SecurityListResponseMessageSet.js","src/domain/data/seclist/SecurityListResponseTransaction.js","src/domain/data/seclist/SecurityRequest.js","src/domain/data/seclist/StockSecurityInfo.js","src/domain/data/seclist/StockType.js","src/domain/data/seclist/index.js","src/domain/data/signon/FinancialInstitution.js","src/domain/data/signon/PasswordChangeRequest.js","src/domain/data/signon/PasswordChangeRequestTransaction.js","src/domain/data/signon/PasswordChangeResponse.js","src/domain/data/signon/PasswordChangeResponseTransaction.js","src/domain/data/signon/SignonRequest.js","src/domain/data/signon/SignonRequestMessageSet.js","src/domain/data/signon/SignonResponse.js","src/domain/data/signon/SignonResponseMessageSet.js","src/domain/data/signon/index.js","src/domain/data/signup/AccountInfoRequest.js","src/domain/data/signup/AccountInfoRequestTransaction.js","src/domain/data/signup/AccountInfoResponse.js","src/domain/data/signup/AccountInfoResponseTransaction.js","src/domain/data/signup/AccountProfile.js","src/domain/data/signup/SignupRequestMessageSet.js","src/domain/data/signup/SignupResponseMessageSet.js","src/domain/data/signup/index.js","src/domain/data/tax1099/ExtDBInfo.js","src/domain/data/tax1099/PayerAddress.js","src/domain/data/tax1099/ProcDet.js","src/domain/data/tax1099/RecAddress.js","src/domain/data/tax1099/Tax1099B.js","src/domain/data/tax1099/Tax1099DIV.js","src/domain/data/tax1099/Tax1099INT.js","src/domain/data/tax1099/Tax1099MISC.js","src/domain/data/tax1099/Tax1099OID.js","src/domain/data/tax1099/Tax1099R.js","src/domain/data/tax1099/Tax1099Request.js","src/domain/data/tax1099/Tax1099RequestMessageSet.js","src/domain/data/tax1099/Tax1099RequestTransaction.js","src/domain/data/tax1099/Tax1099Response.js","src/domain/data/tax1099/Tax1099ResponseMessageSet.js","src/domain/data/tax1099/Tax1099ResponseTransaction.js","src/domain/data/tax1099/index.js","src/domain/index.js","src/io/AggregateAttribute.js","src/io/AggregateInfo.js","src/io/AggregateIntrospector.js","src/io/AggregateMarshaller.js","src/io/AggregateStackContentHandler.js","src/io/AggregateUnmarshaller.js","src/io/BaseOFXReader.js","src/io/DefaultHandler.js","src/io/DefaultStringConversion.js","src/io/OFXAggregate.js","src/io/OFXHandler.js","src/io/OFXParseEvent.js","src/io/OFXReader.js","src/io/OFXV2ContentHandler.js","src/io/OFXWriter.js","src/io/StringConversion.js","src/io/index.js","src/io/v1/OFXV1Writer.js","src/io/v2/OFXV2Writer.js","src/meta/Aggregate.js","src/meta/ChildAggregate.js","src/meta/Element.js","src/meta/Header.js","src/meta/index.js","src/util/OutputStreamWriter.js","src/util/StringReader.js","src/util/index.js","src/util/inherit.js","src/util/log.js","src/util/stack.js"],"names":[],"mappingstyCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjvBA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtFA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxlNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACplJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACp4CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjvLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrlxjhzIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjlxKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpjKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpzKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACplpzppGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzxxrHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpxlOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5mvlhpzGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzrvzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtjjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChnKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbrzjvfvrHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvnrZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChzGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3SA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpzjMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvngjTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACttlzOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACthDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvxjjjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrtkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvxgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjprtjlztJA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzjnKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChrfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvvvxvGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjlNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzdnvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnrhxhOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxdvvcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnzMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpztxnxxzLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ofx4js.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\n\nvar ofx4js = {\n  client: require(\"./client/index\"),\n  domain: require(\"./domain/index\"),\n  io: require(\"./io/index\"),\n  meta: require(\"./meta/index\"),\n  util: require(\"./util/index\"),\n};\n\nmodule.exports = ofx4js;\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('is-array')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\nBuffer.poolSize = 8192 // not used by this implementation\n\nvar kMaxLength = 0x3fffffff\nvar rootParent = {}\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Note:\n *\n * - Implementation must support adding new properties to `Uint8Array` instances.\n *   Firefox 4-29 lacked support, fixed in Firefox 30+.\n *   See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *  - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *  - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *    incorrect length in some situations.\n *\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they will\n * get the Object implementation, which is slower but will work correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = (function () {\n  try {\n    var buf = new ArrayBuffer(0)\n    var arr = new Uint8Array(buf)\n    arr.foo = function () { return 42 }\n    return 42 === arr.foo() && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        new Uint8Array(1).subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n})()\n\n/**\n * Class: Buffer\n * =============\n *\n * The Buffer constructor returns instances of `Uint8Array` that are augmented\n * with function properties for all the node `Buffer` API functions. We use\n * `Uint8Array` so that square bracket notation works as expected -- it returns\n * a single octet.\n *\n * By augmenting the instances, we can avoid modifying the `Uint8Array`\n * prototype.\n */\nfunction Buffer (subject, encoding, noZero) {\n  if (!(this instanceof Buffer))\n    return new Buffer(subject, encoding, noZero)\n\n  var type = typeof subject\n\n  // Find the length\n  var length\n  if (type === 'number')\n    length = subject > 0 ? subject >>> 0 : 0\n  else if (type === 'string') {\n    length = Buffer.byteLength(subject, encoding)\n  } else if (type === 'object' && subject !== null) { // assume object is array-like\n    if (subject.type === 'Buffer' && isArray(subject.data))\n      subject = subject.data\n    length = +subject.length > 0 ? Math.floor(+subject.length) : 0\n  } else\n    throw new TypeError('must start with number, buffer, array or string')\n\n  if (length > kMaxLength)\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n      'size: 0x' + kMaxLength.toString(16) + ' bytes')\n\n  var buf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Preferred: Return an augmented `Uint8Array` instance for best performance\n    buf = Buffer._augment(new Uint8Array(length))\n  } else {\n    // Fallback: Return THIS instance of Buffer (created by `new`)\n    buf = this\n    buf.length = length\n    buf._isBuffer = true\n  }\n\n  var i\n  if (Buffer.TYPED_ARRAY_SUPPORT && typeof subject.byteLength === 'number') {\n    // Speed optimization -- use set if we're copying from a typed array\n    buf._set(subject)\n  } else if (isArrayish(subject)) {\n    // Treat array-ish objects as a byte array\n    if (Buffer.isBuffer(subject)) {\n      for (i = 0; i < length; i++)\n        buf[i] = subject.readUInt8(i)\n    } else {\n      for (i = 0; i < length; i++)\n        buf[i] = ((subject[i] % 256) + 256) % 256\n    }\n  } else if (type === 'string') {\n    buf.write(subject, 0, encoding)\n  } else if (type === 'number' && !Buffer.TYPED_ARRAY_SUPPORT && !noZero) {\n    for (i = 0; i < length; i++) {\n      buf[i] = 0\n    }\n  }\n\n  if (length > 0 && length <= Buffer.poolSize)\n    buf.parent = rootParent\n\n  return buf\n}\n\nfunction SlowBuffer(subject, encoding, noZero) {\n  if (!(this instanceof SlowBuffer))\n    return new SlowBuffer(subject, encoding, noZero)\n\n  var buf = new Buffer(subject, encoding, noZero)\n  delete buf.parent\n  return buf\n}\n\nBuffer.isBuffer = function (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b))\n    throw new TypeError('Arguments must be Buffers')\n\n  var x = a.length\n  var y = b.length\n  for (var i = 0, len = Math.min(x, y); i < len && a[i] === b[i]; i++) {}\n  if (i !== len) {\n    x = a[i]\n    y = b[i]\n  }\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'binary':\n    case 'base64':\n    case 'raw':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function (list, totalLength) {\n  if (!isArray(list)) throw new TypeError('Usage: Buffer.concat(list[, length])')\n\n  if (list.length === 0) {\n    return new Buffer(0)\n  } else if (list.length === 1) {\n    return list[0]\n  }\n\n  var i\n  if (totalLength === undefined) {\n    totalLength = 0\n    for (i = 0; i < list.length; i++) {\n      totalLength += list[i].length\n    }\n  }\n\n  var buf = new Buffer(totalLength)\n  var pos = 0\n  for (i = 0; i < list.length; i++) {\n    var item = list[i]\n    item.copy(buf, pos)\n    pos += item.length\n  }\n  return buf\n}\n\nBuffer.byteLength = function (str, encoding) {\n  var ret\n  str = str + ''\n  switch (encoding || 'utf8') {\n    case 'ascii':\n    case 'binary':\n    case 'raw':\n      ret = str.length\n      break\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      ret = str.length * 2\n      break\n    case 'hex':\n      ret = str.length >>> 1\n      break\n    case 'utf8':\n    case 'utf-8':\n      ret = utf8ToBytes(str).length\n      break\n    case 'base64':\n      ret = base64ToBytes(str).length\n      break\n    default:\n      ret = str.length\n  }\n  return ret\n}\n\n// pre-set for values that may exist in the future\nBuffer.prototype.length = undefined\nBuffer.prototype.parent = undefined\n\n// toString(encoding, start=0, end=buffer.length)\nBuffer.prototype.toString = function (encoding, start, end) {\n  var loweredCase = false\n\n  start = start >>> 0\n  end = end === undefined || end === Infinity ? this.length : end >>> 0\n\n  if (!encoding) encoding = 'utf8'\n  if (start < 0) start = 0\n  if (end > this.length) end = this.length\n  if (end <= start) return ''\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'binary':\n        return binarySlice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase)\n          throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.equals = function (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max)\n      str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  return Buffer.compare(this, b)\n}\n\n// `get` will be removed in Node 0.13+\nBuffer.prototype.get = function (offset) {\n  console.log('.get() is deprecated. Access using array indexes instead.')\n  return this.readUInt8(offset)\n}\n\n// `set` will be removed in Node 0.13+\nBuffer.prototype.set = function (v, offset) {\n  console.log('.set() is deprecated. Access using array indexes instead.')\n  return this.writeUInt8(v, offset)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new Error('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; i++) {\n    var byte = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(byte)) throw new Error('Invalid hex string')\n    buf[offset + i] = byte\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  var charsWritten = blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n  return charsWritten\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  var charsWritten = blitBuffer(asciiToBytes(string), buf, offset, length)\n  return charsWritten\n}\n\nfunction binaryWrite (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  var charsWritten = blitBuffer(base64ToBytes(string), buf, offset, length)\n  return charsWritten\n}\n\nfunction utf16leWrite (buf, string, offset, length) {\n  var charsWritten = blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length, 2)\n  return charsWritten\n}\n\nBuffer.prototype.write = function (string, offset, length, encoding) {\n  // Support both (string, offset, length, encoding)\n  // and the legacy (string, encoding, offset, length)\n  if (isFinite(offset)) {\n    if (!isFinite(length)) {\n      encoding = length\n      length = undefined\n    }\n  } else {  // legacy\n    var swap = encoding\n    encoding = offset\n    offset = length\n    length = swap\n  }\n\n  offset = Number(offset) || 0\n\n  if (length < 0 || offset < 0 || offset > this.length)\n    throw new RangeError('attempt to write outside buffer bounds');\n\n  var remaining = this.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n  encoding = String(encoding || 'utf8').toLowerCase()\n\n  var ret\n  switch (encoding) {\n    case 'hex':\n      ret = hexWrite(this, string, offset, length)\n      break\n    case 'utf8':\n    case 'utf-8':\n      ret = utf8Write(this, string, offset, length)\n      break\n    case 'ascii':\n      ret = asciiWrite(this, string, offset, length)\n      break\n    case 'binary':\n      ret = binaryWrite(this, string, offset, length)\n      break\n    case 'base64':\n      ret = base64Write(this, string, offset, length)\n      break\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      ret = utf16leWrite(this, string, offset, length)\n      break\n    default:\n      throw new TypeError('Unknown encoding: ' + encoding)\n  }\n  return ret\n}\n\nBuffer.prototype.toJSON = function () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  var res = ''\n  var tmp = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    if (buf[i] <= 0x7F) {\n      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])\n      tmp = ''\n    } else {\n      tmp += '%' + buf[i].toString(16)\n    }\n  }\n\n  return res + decodeUtf8Char(tmp)\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction binarySlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; i++) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len;\n    if (start < 0)\n      start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0)\n      end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start)\n    end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = Buffer._augment(this.subarray(start, end))\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined, true)\n    for (var i = 0; i < sliceLen; i++) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  if (newBuf.length)\n    newBuf.parent = this.parent || this\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0)\n    throw new RangeError('offset is not uint')\n  if (offset + ext > length)\n    throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert)\n    checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100))\n    val += this[offset + i] * mul\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert)\n    checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100))\n    val += this[offset + --byteLength] * mul;\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n      ((this[offset + 1] << 16) |\n      (this[offset + 2] << 8) |\n      this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert)\n    checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100))\n    val += this[offset + i] * mul\n  mul *= 0x80\n\n  if (val >= mul)\n    val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert)\n    checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100))\n    val += this[offset + --i] * mul\n  mul *= 0x80\n\n  if (val >= mul)\n    val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80))\n    return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16) |\n      (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n      (this[offset + 1] << 16) |\n      (this[offset + 2] << 8) |\n      (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function (offset, noAssert) {\n  if (!noAssert)\n    checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('value is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert)\n    checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100))\n    this[offset + i] = (value / mul) >>> 0 & 0xFF\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert)\n    checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100))\n    this[offset + i] = (value / mul) >>> 0 & 0xFF\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert)\n    checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = value\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert)\n    checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value\n    this[offset + 1] = (value >>> 8)\n  } else objectWriteUInt16(this, value, offset, true)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert)\n    checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = value\n  } else objectWriteUInt16(this, value, offset, false)\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert)\n    checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = value\n  } else objectWriteUInt32(this, value, offset, true)\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert)\n    checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = value\n  } else objectWriteUInt32(this, value, offset, false)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkInt(this,\n             value,\n             offset,\n             byteLength,\n             Math.pow(2, 8 * byteLength - 1) - 1,\n             -Math.pow(2, 8 * byteLength - 1))\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = value < 0 ? 1 : 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100))\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkInt(this,\n             value,\n             offset,\n             byteLength,\n             Math.pow(2, 8 * byteLength - 1) - 1,\n             -Math.pow(2, 8 * byteLength - 1))\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = value < 0 ? 1 : 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100))\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert)\n    checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = value\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert)\n    checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value\n    this[offset + 1] = (value >>> 8)\n  } else objectWriteUInt16(this, value, offset, true)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert)\n    checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = value\n  } else objectWriteUInt16(this, value, offset, false)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert)\n    checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else objectWriteUInt32(this, value, offset, true)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert)\n    checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = value\n  } else objectWriteUInt32(this, value, offset, false)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (value > max || value < min) throw new RangeError('value is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('index out of range')\n  if (offset < 0) throw new RangeError('index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert)\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert)\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function (target, target_start, start, end) {\n  var source = this\n\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (target_start >= target.length) target_start = target.length\n  if (!target_start) target_start = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || source.length === 0) return 0\n\n  // Fatal error conditions\n  if (target_start < 0)\n    throw new RangeError('targetStart out of bounds')\n  if (start < 0 || start >= source.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length)\n    end = this.length\n  if (target.length - target_start < end - start)\n    end = target.length - target_start + start\n\n  var len = end - start\n\n  if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < len; i++) {\n      target[i + target_start] = this[i + start]\n    }\n  } else {\n    target._set(this.subarray(start, start + len), target_start)\n  }\n\n  return len\n}\n\n// fill(value, start=0, end=buffer.length)\nBuffer.prototype.fill = function (value, start, end) {\n  if (!value) value = 0\n  if (!start) start = 0\n  if (!end) end = this.length\n\n  if (end < start) throw new RangeError('end < start')\n\n  // Fill 0 bytes; we're done\n  if (end === start) return\n  if (this.length === 0) return\n\n  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')\n  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')\n\n  var i\n  if (typeof value === 'number') {\n    for (i = start; i < end; i++) {\n      this[i] = value\n    }\n  } else {\n    var bytes = utf8ToBytes(value.toString())\n    var len = bytes.length\n    for (i = start; i < end; i++) {\n      this[i] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n/**\n * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.\n * Added in Node 0.12. Only available in browsers that support ArrayBuffer.\n */\nBuffer.prototype.toArrayBuffer = function () {\n  if (typeof Uint8Array !== 'undefined') {\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n      return (new Buffer(this)).buffer\n    } else {\n      var buf = new Uint8Array(this.length)\n      for (var i = 0, len = buf.length; i < len; i += 1) {\n        buf[i] = this[i]\n      }\n      return buf.buffer\n    }\n  } else {\n    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')\n  }\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar BP = Buffer.prototype\n\n/**\n * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods\n */\nBuffer._augment = function (arr) {\n  arr.constructor = Buffer\n  arr._isBuffer = true\n\n  // save reference to original Uint8Array get/set methods before overwriting\n  arr._get = arr.get\n  arr._set = arr.set\n\n  // deprecated, will be removed in node 0.13+\n  arr.get = BP.get\n  arr.set = BP.set\n\n  arr.write = BP.write\n  arr.toString = BP.toString\n  arr.toLocaleString = BP.toString\n  arr.toJSON = BP.toJSON\n  arr.equals = BP.equals\n  arr.compare = BP.compare\n  arr.copy = BP.copy\n  arr.slice = BP.slice\n  arr.readUIntLE = BP.readUIntLE\n  arr.readUIntBE = BP.readUIntBE\n  arr.readUInt8 = BP.readUInt8\n  arr.readUInt16LE = BP.readUInt16LE\n  arr.readUInt16BE = BP.readUInt16BE\n  arr.readUInt32LE = BP.readUInt32LE\n  arr.readUInt32BE = BP.readUInt32BE\n  arr.readIntLE = BP.readIntLE\n  arr.readIntBE = BP.readIntBE\n  arr.readInt8 = BP.readInt8\n  arr.readInt16LE = BP.readInt16LE\n  arr.readInt16BE = BP.readInt16BE\n  arr.readInt32LE = BP.readInt32LE\n  arr.readInt32BE = BP.readInt32BE\n  arr.readFloatLE = BP.readFloatLE\n  arr.readFloatBE = BP.readFloatBE\n  arr.readDoubleLE = BP.readDoubleLE\n  arr.readDoubleBE = BP.readDoubleBE\n  arr.writeUInt8 = BP.writeUInt8\n  arr.writeUIntLE = BP.writeUIntLE\n  arr.writeUIntBE = BP.writeUIntBE\n  arr.writeUInt16LE = BP.writeUInt16LE\n  arr.writeUInt16BE = BP.writeUInt16BE\n  arr.writeUInt32LE = BP.writeUInt32LE\n  arr.writeUInt32BE = BP.writeUInt32BE\n  arr.writeIntLE = BP.writeIntLE\n  arr.writeIntBE = BP.writeIntBE\n  arr.writeInt8 = BP.writeInt8\n  arr.writeInt16LE = BP.writeInt16LE\n  arr.writeInt16BE = BP.writeInt16BE\n  arr.writeInt32LE = BP.writeInt32LE\n  arr.writeInt32BE = BP.writeInt32BE\n  arr.writeFloatLE = BP.writeFloatLE\n  arr.writeFloatBE = BP.writeFloatBE\n  arr.writeDoubleLE = BP.writeDoubleLE\n  arr.writeDoubleBE = BP.writeDoubleBE\n  arr.fill = BP.fill\n  arr.inspect = BP.inspect\n  arr.toArrayBuffer = BP.toArrayBuffer\n\n  return arr\n}\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-z\\-]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // replace url-safe space and slash\n  str = str.replace(/-/g, '+').replace(/_/g, '/')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction isArrayish (subject) {\n  return isArray(subject) || Buffer.isBuffer(subject) ||\n      subject && typeof subject === 'object' &&\n      typeof subject.length === 'number'\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes(string, units) {\n  var codePoint, length = string.length\n  var leadSurrogate = null\n  units = units || Infinity\n  var bytes = []\n  var i = 0\n\n  for (; i<length; i++) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n\n      // last char was a lead\n      if (leadSurrogate) {\n\n        // 2 leads in a row\n        if (codePoint < 0xDC00) {\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          leadSurrogate = codePoint\n          continue\n        }\n\n        // valid surrogate pair\n        else {\n          codePoint = leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00 | 0x10000\n          leadSurrogate = null\n        }\n      }\n\n      // no lead yet\n      else {\n\n        // unexpected trail\n        if (codePoint > 0xDBFF) {\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // unpaired lead\n        else if (i + 1 === length) {\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        else {\n          leadSurrogate = codePoint\n          continue\n        }\n      }\n    }\n\n    // valid bmp char, but last char was a lead\n    else if (leadSurrogate) {\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n      leadSurrogate = null\n    }\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    }\n    else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      );\n    }\n    else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      );\n    }\n    else if (codePoint < 0x200000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      );\n    }\n    else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length, unitSize) {\n  if (unitSize) length -= length % unitSize;\n  for (var i = 0; i < length; i++) {\n    if ((i + offset >= dst.length) || (i >= src.length))\n      break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction decodeUtf8Char (str) {\n  try {\n    return decodeURIComponent(str)\n  } catch (err) {\n    return String.fromCharCode(0xFFFD) // UTF 8 invalid char\n  }\n}\n","var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n;(function (exports) {\n\t'use strict';\n\n  var Arr = (typeof Uint8Array !== 'undefined')\n    ? Uint8Array\n    : Array\n\n\tvar PLUS   = '+'.charCodeAt(0)\n\tvar SLASH  = '/'.charCodeAt(0)\n\tvar NUMBER = '0'.charCodeAt(0)\n\tvar LOWER  = 'a'.charCodeAt(0)\n\tvar UPPER  = 'A'.charCodeAt(0)\n\n\tfunction decode (elt) {\n\t\tvar code = elt.charCodeAt(0)\n\t\tif (code === PLUS)\n\t\t\treturn 62 // '+'\n\t\tif (code === SLASH)\n\t\t\treturn 63 // '/'\n\t\tif (code < NUMBER)\n\t\t\treturn -1 //no match\n\t\tif (code < NUMBER + 10)\n\t\t\treturn code - NUMBER + 26 + 26\n\t\tif (code < UPPER + 26)\n\t\t\treturn code - UPPER\n\t\tif (code < LOWER + 26)\n\t\t\treturn code - LOWER + 26\n\t}\n\n\tfunction b64ToByteArray (b64) {\n\t\tvar i, j, l, tmp, placeHolders, arr\n\n\t\tif (b64.length % 4 > 0) {\n\t\t\tthrow new Error('Invalid string. Length must be a multiple of 4')\n\t\t}\n\n\t\t// the number of equal signs (place holders)\n\t\t// if there are two placeholders, than the two characters before it\n\t\t// represent one byte\n\t\t// if there is only one, then the three characters before it represent 2 bytes\n\t\t// this is just a cheap hack to not do indexOf twice\n\t\tvar len = b64.length\n\t\tplaceHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0\n\n\t\t// base64 is 4/3 + up to two characters of the original data\n\t\tarr = new Arr(b64.length * 3 / 4 - placeHolders)\n\n\t\t// if there are placeholders, only get up to the last complete 4 chars\n\t\tl = placeHolders > 0 ? b64.length - 4 : b64.length\n\n\t\tvar L = 0\n\n\t\tfunction push (v) {\n\t\t\tarr[L++] = v\n\t\t}\n\n\t\tfor (i = 0, j = 0; i < l; i += 4, j += 3) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))\n\t\t\tpush((tmp & 0xFF0000) >> 16)\n\t\t\tpush((tmp & 0xFF00) >> 8)\n\t\t\tpush(tmp & 0xFF)\n\t\t}\n\n\t\tif (placeHolders === 2) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)\n\t\t\tpush(tmp & 0xFF)\n\t\t} else if (placeHolders === 1) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)\n\t\t\tpush((tmp >> 8) & 0xFF)\n\t\t\tpush(tmp & 0xFF)\n\t\t}\n\n\t\treturn arr\n\t}\n\n\tfunction uint8ToBase64 (uint8) {\n\t\tvar i,\n\t\t\textraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes\n\t\t\toutput = \"\",\n\t\t\ttemp, length\n\n\t\tfunction encode (num) {\n\t\t\treturn lookup.charAt(num)\n\t\t}\n\n\t\tfunction tripletToBase64 (num) {\n\t\t\treturn encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)\n\t\t}\n\n\t\t// go through the array every three bytes, we'll deal with trailing stuff later\n\t\tfor (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {\n\t\t\ttemp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n\t\t\toutput += tripletToBase64(temp)\n\t\t}\n\n\t\t// pad the end with zeros, but make sure to not forget the extra bytes\n\t\tswitch (extraBytes) {\n\t\t\tcase 1:\n\t\t\t\ttemp = uint8[uint8.length - 1]\n\t\t\t\toutput += encode(temp >> 2)\n\t\t\t\toutput += encode((temp << 4) & 0x3F)\n\t\t\t\toutput += '=='\n\t\t\t\tbreak\n\t\t\tcase 2:\n\t\t\t\ttemp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])\n\t\t\t\toutput += encode(temp >> 10)\n\t\t\t\toutput += encode((temp >> 4) & 0x3F)\n\t\t\t\toutput += encode((temp << 2) & 0x3F)\n\t\t\t\toutput += '='\n\t\t\t\tbreak\n\t\t}\n\n\t\treturn output\n\t}\n\n\texports.toByteArray = b64ToByteArray\n\texports.fromByteArray = uint8ToBase64\n}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))\n","exports.read = function(buffer, offset, isLE, mLen, nBytes) {\n  var e, m,\n      eLen = nBytes * 8 - mLen - 1,\n      eMax = (1 << eLen) - 1,\n      eBias = eMax >> 1,\n      nBits = -7,\n      i = isLE ? (nBytes - 1) : 0,\n      d = isLE ? -1 : 1,\n      s = buffer[offset + i];\n\n  i += d;\n\n  e = s & ((1 << (-nBits)) - 1);\n  s >>= (-nBits);\n  nBits += eLen;\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);\n\n  m = e & ((1 << (-nBits)) - 1);\n  e >>= (-nBits);\n  nBits += mLen;\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);\n\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity);\n  } else {\n    m = m + Math.pow(2, mLen);\n    e = e - eBias;\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n};\n\nexports.write = function(buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c,\n      eLen = nBytes * 8 - mLen - 1,\n      eMax = (1 << eLen) - 1,\n      eBias = eMax >> 1,\n      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),\n      i = isLE ? 0 : (nBytes - 1),\n      d = isLE ? 1 : -1,\n      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;\n\n  value = Math.abs(value);\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0;\n    e = eMax;\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2);\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * Math.pow(2, 1 - eBias);\n    }\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n      e = 0;\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);\n\n  e = (e << mLen) | m;\n  eLen += mLen;\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);\n\n  buffer[offset + i - d] |= s * 128;\n};\n","\n/**\n * isArray\n */\n\nvar isArray = Array.isArray;\n\n/**\n * toString\n */\n\nvar str = Object.prototype.toString;\n\n/**\n * Whether or not the given `val`\n * is an array.\n *\n * example:\n *\n *        isArray([]);\n *        // > true\n *        isArray(arguments);\n *        // > false\n *        isArray('');\n *        // > false\n *\n * @param {mixed} val\n * @return {bool}\n */\n\nmodule.exports = isArray || function (val) {\n  return !! val && '[object Array]' == str.call(val);\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      }\n      throw TypeError('Uncaught, unspecified \"error\" event.');\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        len = arguments.length;\n        args = new Array(len - 1);\n        for (i = 1; i < len; i++)\n          args[i - 1] = arguments[i];\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    len = arguments.length;\n    args = new Array(len - 1);\n    for (i = 1; i < len; i++)\n      args[i - 1] = arguments[i];\n\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    var m;\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  var ret;\n  if (!emitter._events || !emitter._events[type])\n    ret = 0;\n  else if (isFunction(emitter._events[type]))\n    ret = 1;\n  else\n    ret = emitter._events[type].length;\n  return ret;\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n","module.exports = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n","// shim for using process in browser\n\nvar process = module.exports = {};\n\nprocess.nextTick = (function () {\n    var canSetImmediate = typeof window !== 'undefined'\n    && window.setImmediate;\n    var canMutationObserver = typeof window !== 'undefined'\n    && window.MutationObserver;\n    var canPost = typeof window !== 'undefined'\n    && window.postMessage && window.addEventListener\n    ;\n\n    if (canSetImmediate) {\n        return function (f) { return window.setImmediate(f) };\n    }\n\n    var queue = [];\n\n    if (canMutationObserver) {\n        var hiddenDiv = document.createElement(\"div\");\n        var observer = new MutationObserver(function () {\n            var queueList = queue.slice();\n            queue.length = 0;\n            queueList.forEach(function (fn) {\n                fn();\n            });\n        });\n\n        observer.observe(hiddenDiv, { attributes: true });\n\n        return function nextTick(fn) {\n            if (!queue.length) {\n                hiddenDiv.setAttribute('yes', 'no');\n            }\n            queue.push(fn);\n        };\n    }\n\n    if (canPost) {\n        window.addEventListener('message', function (ev) {\n            var source = ev.source;\n            if ((source === window || source === null) && ev.data === 'process-tick') {\n                ev.stopPropagation();\n                if (queue.length > 0) {\n                    var fn = queue.shift();\n                    fn();\n                }\n            }\n        }, true);\n\n        return function nextTick(fn) {\n            queue.push(fn);\n            window.postMessage('process-tick', '*');\n        };\n    }\n\n    return function nextTick(fn) {\n        setTimeout(fn, 0);\n    };\n})();\n\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\n","module.exports = require(\"./lib/_stream_duplex.js\")\n","(function (process){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\nmodule.exports = Duplex;\n\n/*<replacement>*/\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n}\n/*</replacement>*/\n\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar Readable = require('./_stream_readable');\nvar Writable = require('./_stream_writable');\n\nutil.inherits(Duplex, Readable);\n\nforEach(objectKeys(Writable.prototype), function(method) {\n  if (!Duplex.prototype[method])\n    Duplex.prototype[method] = Writable.prototype[method];\n});\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex))\n    return new Duplex(options);\n\n  Readable.call(this, options);\n  Writable.call(this, options);\n\n  if (options && options.readable === false)\n    this.readable = false;\n\n  if (options && options.writable === false)\n    this.writable = false;\n\n  this.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false)\n    this.allowHalfOpen = false;\n\n  this.once('end', onend);\n}\n\n// the no-half-open enforcer\nfunction onend() {\n  // if we allow half-open state, or if the writable side ended,\n  // then we're ok.\n  if (this.allowHalfOpen || this._writableState.ended)\n    return;\n\n  // no more data can be written.\n  // But allow more writes to happen in this tick.\n  process.nextTick(this.end.bind(this));\n}\n\nfunction forEach (xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}\n\n}).call(this,require('_process'))","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\nmodule.exports = PassThrough;\n\nvar Transform = require('./_stream_transform');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough))\n    return new PassThrough(options);\n\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function(chunk, encoding, cb) {\n  cb(null, chunk);\n};\n","(function (process){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\n\n/*<replacement>*/\nvar Buffer = require('buffer').Buffer;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\nvar EE = require('events').EventEmitter;\n\n/*<replacement>*/\nif (!EE.listenerCount) EE.listenerCount = function(emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\nvar Stream = require('stream');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar StringDecoder;\n\nutil.inherits(Readable, Stream);\n\nfunction ReadableState(options, stream) {\n  options = options || {};\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;\n\n  // cast to ints.\n  this.highWaterMark = ~~this.highWaterMark;\n\n  this.buffer = [];\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = false;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // In streams that never have any data, and do push(null) right away,\n  // the consumer can miss the 'end' event if they do some I/O before\n  // consuming the stream.  So, we don't emit('end') until some reading\n  // happens.\n  this.calledRead = false;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, becuase any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // when piping, we only care about 'readable' events that happen\n  // after read()ing all the bytes and not getting any pushback.\n  this.ranOut = false;\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder)\n      StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  if (!(this instanceof Readable))\n    return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  Stream.call(this);\n}\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function(chunk, encoding) {\n  var state = this._readableState;\n\n  if (typeof chunk === 'string' && !state.objectMode) {\n    encoding = encoding || state.defaultEncoding;\n    if (encoding !== state.encoding) {\n      chunk = new Buffer(chunk, encoding);\n      encoding = '';\n    }\n  }\n\n  return readableAddChunk(this, state, chunk, encoding, false);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function(chunk) {\n  var state = this._readableState;\n  return readableAddChunk(this, state, chunk, '', true);\n};\n\nfunction readableAddChunk(stream, state, chunk, encoding, addToFront) {\n  var er = chunkInvalid(state, chunk);\n  if (er) {\n    stream.emit('error', er);\n  } else if (chunk === null || chunk === undefined) {\n    state.reading = false;\n    if (!state.ended)\n      onEofChunk(stream, state);\n  } else if (state.objectMode || chunk && chunk.length > 0) {\n    if (state.ended && !addToFront) {\n      var e = new Error('stream.push() after EOF');\n      stream.emit('error', e);\n    } else if (state.endEmitted && addToFront) {\n      var e = new Error('stream.unshift() after end event');\n      stream.emit('error', e);\n    } else {\n      if (state.decoder && !addToFront && !encoding)\n        chunk = state.decoder.write(chunk);\n\n      // update the buffer info.\n      state.length += state.objectMode ? 1 : chunk.length;\n      if (addToFront) {\n        state.buffer.unshift(chunk);\n      } else {\n        state.reading = false;\n        state.buffer.push(chunk);\n      }\n\n      if (state.needReadable)\n        emitReadable(stream);\n\n      maybeReadMore(stream, state);\n    }\n  } else if (!addToFront) {\n    state.reading = false;\n  }\n\n  return needMoreData(state);\n}\n\n\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended &&\n         (state.needReadable ||\n          state.length < state.highWaterMark ||\n          state.length === 0);\n}\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function(enc) {\n  if (!StringDecoder)\n    StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n};\n\n// Don't raise the hwm > 128MB\nvar MAX_HWM = 0x800000;\nfunction roundUpToNextPowerOf2(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2\n    n--;\n    for (var p = 1; p < 32; p <<= 1) n |= n >> p;\n    n++;\n  }\n  return n;\n}\n\nfunction howMuchToRead(n, state) {\n  if (state.length === 0 && state.ended)\n    return 0;\n\n  if (state.objectMode)\n    return n === 0 ? 0 : 1;\n\n  if (n === null || isNaN(n)) {\n    // only flow one buffer at a time\n    if (state.flowing && state.buffer.length)\n      return state.buffer[0].length;\n    else\n      return state.length;\n  }\n\n  if (n <= 0)\n    return 0;\n\n  // If we're asking for more than the target buffer level,\n  // then raise the water mark.  Bump up to the next highest\n  // power of 2, to prevent increasing it excessively in tiny\n  // amounts.\n  if (n > state.highWaterMark)\n    state.highWaterMark = roundUpToNextPowerOf2(n);\n\n  // don't have that much.  return null, unless we've ended.\n  if (n > state.length) {\n    if (!state.ended) {\n      state.needReadable = true;\n      return 0;\n    } else\n      return state.length;\n  }\n\n  return n;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function(n) {\n  var state = this._readableState;\n  state.calledRead = true;\n  var nOrig = n;\n  var ret;\n\n  if (typeof n !== 'number' || n > 0)\n    state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 &&\n      state.needReadable &&\n      (state.length >= state.highWaterMark || state.ended)) {\n    emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    ret = null;\n\n    // In cases where the decoder did not receive enough data\n    // to produce a full chunk, then immediately received an\n    // EOF, state.buffer will contain [<Buffer >, <Buffer 00 ...>].\n    // howMuchToRead will see this and coerce the amount to\n    // read to zero (because it's looking at the length of the\n    // first <Buffer > in state.buffer), and we'll end up here.\n    //\n    // This can only happen via state.decoder -- no other venue\n    // exists for pushing a zero-length chunk into state.buffer\n    // and triggering this behavior. In this case, we return our\n    // remaining data and end the stream, if appropriate.\n    if (state.length > 0 && state.decoder) {\n      ret = fromList(n, state);\n      state.length -= ret.length;\n    }\n\n    if (state.length === 0)\n      endReadable(this);\n\n    return ret;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length - n <= state.highWaterMark)\n    doRead = true;\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading)\n    doRead = false;\n\n  if (doRead) {\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0)\n      state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n  }\n\n  // If _read called its callback synchronously, then `reading`\n  // will be false, and we need to re-evaluate how much data we\n  // can return to the user.\n  if (doRead && !state.reading)\n    n = howMuchToRead(nOrig, state);\n\n  if (n > 0)\n    ret = fromList(n, state);\n  else\n    ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  }\n\n  state.length -= n;\n\n  // If we have nothing in the buffer, then we want to know\n  // as soon as we *do* get something into the buffer.\n  if (state.length === 0 && !state.ended)\n    state.needReadable = true;\n\n  // If we happened to read() exactly the remaining amount in the\n  // buffer, and the EOF has been seen at this point, then make sure\n  // that we emit 'end' on the very next tick.\n  if (state.ended && !state.endEmitted && state.length === 0)\n    endReadable(this);\n\n  return ret;\n};\n\nfunction chunkInvalid(state, chunk) {\n  var er = null;\n  if (!Buffer.isBuffer(chunk) &&\n      'string' !== typeof chunk &&\n      chunk !== null &&\n      chunk !== undefined &&\n      !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\n\nfunction onEofChunk(stream, state) {\n  if (state.decoder && !state.ended) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // if we've ended and we have some data left, then emit\n  // 'readable' now to make sure it gets picked up.\n  if (state.length > 0)\n    emitReadable(stream);\n  else\n    endReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (state.emittedReadable)\n    return;\n\n  state.emittedReadable = true;\n  if (state.sync)\n    process.nextTick(function() {\n      emitReadable_(stream);\n    });\n  else\n    emitReadable_(stream);\n}\n\nfunction emitReadable_(stream) {\n  stream.emit('readable');\n}\n\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    process.nextTick(function() {\n      maybeReadMore_(stream, state);\n    });\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended &&\n         state.length < state.highWaterMark) {\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;\n    else\n      len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function(n) {\n  this.emit('error', new Error('not implemented'));\n};\n\nReadable.prototype.pipe = function(dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&\n              dest !== process.stdout &&\n              dest !== process.stderr;\n\n  var endFn = doEnd ? onend : cleanup;\n  if (state.endEmitted)\n    process.nextTick(endFn);\n  else\n    src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable) {\n    if (readable !== src) return;\n    cleanup();\n  }\n\n  function onend() {\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  function cleanup() {\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', cleanup);\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (!dest._writableState || dest._writableState.needDrain)\n      ondrain();\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EE.listenerCount(dest, 'error') === 0)\n      dest.emit('error', er);\n  }\n  // This is a brutally ugly hack to make sure that our error handler\n  // is attached before any userland ones.  NEVER DO THIS.\n  if (!dest._events || !dest._events.error)\n    dest.on('error', onerror);\n  else if (isArray(dest._events.error))\n    dest._events.error.unshift(onerror);\n  else\n    dest._events.error = [onerror, dest._events.error];\n\n\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    // the handler that waits for readable events after all\n    // the data gets sucked out in flow.\n    // This would be easier to follow with a .once() handler\n    // in flow(), but that is too slow.\n    this.on('readable', pipeOnReadable);\n\n    state.flowing = true;\n    process.nextTick(function() {\n      flow(src);\n    });\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function() {\n    var dest = this;\n    var state = src._readableState;\n    state.awaitDrain--;\n    if (state.awaitDrain === 0)\n      flow(src);\n  };\n}\n\nfunction flow(src) {\n  var state = src._readableState;\n  var chunk;\n  state.awaitDrain = 0;\n\n  function write(dest, i, list) {\n    var written = dest.write(chunk);\n    if (false === written) {\n      state.awaitDrain++;\n    }\n  }\n\n  while (state.pipesCount && null !== (chunk = src.read())) {\n\n    if (state.pipesCount === 1)\n      write(state.pipes, 0, null);\n    else\n      forEach(state.pipes, write);\n\n    src.emit('data', chunk);\n\n    // if anyone needs a drain, then we have to wait for that.\n    if (state.awaitDrain > 0)\n      return;\n  }\n\n  // if every destination was unpiped, either before entering this\n  // function, or in the while loop, then stop flowing.\n  //\n  // NB: This is a pretty rare edge case.\n  if (state.pipesCount === 0) {\n    state.flowing = false;\n\n    // if there were data event listeners added, then switch to old mode.\n    if (EE.listenerCount(src, 'data') > 0)\n      emitDataEvents(src);\n    return;\n  }\n\n  // at this point, no one needed a drain, so we just ran out of data\n  // on the next readable event, start it over again.\n  state.ranOut = true;\n}\n\nfunction pipeOnReadable() {\n  if (this._readableState.ranOut) {\n    this._readableState.ranOut = false;\n    flow(this);\n  }\n}\n\n\nReadable.prototype.unpipe = function(dest) {\n  var state = this._readableState;\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0)\n    return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes)\n      return this;\n\n    if (!dest)\n      dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    this.removeListener('readable', pipeOnReadable);\n    state.flowing = false;\n    if (dest)\n      dest.emit('unpipe', this);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    this.removeListener('readable', pipeOnReadable);\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++)\n      dests[i].emit('unpipe', this);\n    return this;\n  }\n\n  // try to find the right one.\n  var i = indexOf(state.pipes, dest);\n  if (i === -1)\n    return this;\n\n  state.pipes.splice(i, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1)\n    state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function(ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  if (ev === 'data' && !this._readableState.flowing)\n    emitDataEvents(this);\n\n  if (ev === 'readable' && this.readable) {\n    var state = this._readableState;\n    if (!state.readableListening) {\n      state.readableListening = true;\n      state.emittedReadable = false;\n      state.needReadable = true;\n      if (!state.reading) {\n        this.read(0);\n      } else if (state.length) {\n        emitReadable(this, state);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function() {\n  emitDataEvents(this);\n  this.read(0);\n  this.emit('resume');\n};\n\nReadable.prototype.pause = function() {\n  emitDataEvents(this, true);\n  this.emit('pause');\n};\n\nfunction emitDataEvents(stream, startPaused) {\n  var state = stream._readableState;\n\n  if (state.flowing) {\n    // https://github.com/isaacs/readable-stream/issues/16\n    throw new Error('Cannot switch to old mode now.');\n  }\n\n  var paused = startPaused || false;\n  var readable = false;\n\n  // convert to an old-style stream.\n  stream.readable = true;\n  stream.pipe = Stream.prototype.pipe;\n  stream.on = stream.addListener = Stream.prototype.on;\n\n  stream.on('readable', function() {\n    readable = true;\n\n    var c;\n    while (!paused && (null !== (c = stream.read())))\n      stream.emit('data', c);\n\n    if (c === null) {\n      readable = false;\n      stream._readableState.needReadable = true;\n    }\n  });\n\n  stream.pause = function() {\n    paused = true;\n    this.emit('pause');\n  };\n\n  stream.resume = function() {\n    paused = false;\n    if (readable)\n      process.nextTick(function() {\n        stream.emit('readable');\n      });\n    else\n      this.read(0);\n    this.emit('resume');\n  };\n\n  // now make it start, just in case it hadn't already.\n  stream.emit('readable');\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function(stream) {\n  var state = this._readableState;\n  var paused = false;\n\n  var self = this;\n  stream.on('end', function() {\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length)\n        self.push(chunk);\n    }\n\n    self.push(null);\n  });\n\n  stream.on('data', function(chunk) {\n    if (state.decoder)\n      chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    //if (state.objectMode && util.isNullOrUndefined(chunk))\n    if (state.objectMode && (chunk === null || chunk === undefined))\n      return;\n    else if (!state.objectMode && (!chunk || !chunk.length))\n      return;\n\n    var ret = self.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (typeof stream[i] === 'function' &&\n        typeof this[i] === 'undefined') {\n      this[i] = function(method) { return function() {\n        return stream[method].apply(stream, arguments);\n      }}(i);\n    }\n  }\n\n  // proxy certain important events.\n  var events = ['error', 'close', 'destroy', 'pause', 'resume'];\n  forEach(events, function(ev) {\n    stream.on(ev, self.emit.bind(self, ev));\n  });\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  self._read = function(n) {\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return self;\n};\n\n\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\nfunction fromList(n, state) {\n  var list = state.buffer;\n  var length = state.length;\n  var stringMode = !!state.decoder;\n  var objectMode = !!state.objectMode;\n  var ret;\n\n  // nothing in the list, definitely empty.\n  if (list.length === 0)\n    return null;\n\n  if (length === 0)\n    ret = null;\n  else if (objectMode)\n    ret = list.shift();\n  else if (!n || n >= length) {\n    // read it all, truncate the array.\n    if (stringMode)\n      ret = list.join('');\n    else\n      ret = Buffer.concat(list, length);\n    list.length = 0;\n  } else {\n    // read just some of it.\n    if (n < list[0].length) {\n      // just take a part of the first list item.\n      // slice is the same for buffers and strings.\n      var buf = list[0];\n      ret = buf.slice(0, n);\n      list[0] = buf.slice(n);\n    } else if (n === list[0].length) {\n      // first list is a perfect match\n      ret = list.shift();\n    } else {\n      // complex case.\n      // we have enough to cover it, but it spans past the first buffer.\n      if (stringMode)\n        ret = '';\n      else\n        ret = new Buffer(n);\n\n      var c = 0;\n      for (var i = 0, l = list.length; i < l && c < n; i++) {\n        var buf = list[0];\n        var cpy = Math.min(n - c, buf.length);\n\n        if (stringMode)\n          ret += buf.slice(0, cpy);\n        else\n          buf.copy(ret, c, 0, cpy);\n\n        if (cpy < buf.length)\n          list[0] = buf.slice(cpy);\n        else\n          list.shift();\n\n        c += cpy;\n      }\n    }\n  }\n\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0)\n    throw new Error('endReadable called on non-empty stream');\n\n  if (!state.endEmitted && state.calledRead) {\n    state.ended = true;\n    process.nextTick(function() {\n      // Check that we didn't get one last unshift.\n      if (!state.endEmitted && state.length === 0) {\n        state.endEmitted = true;\n        stream.readable = false;\n        stream.emit('end');\n      }\n    });\n  }\n}\n\nfunction forEach (xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}\n\nfunction indexOf (xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}\n\n}).call(this,require('_process'))","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\nmodule.exports = Transform;\n\nvar Duplex = require('./_stream_duplex');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\n\nfunction TransformState(options, stream) {\n  this.afterTransform = function(er, data) {\n    return afterTransform(stream, er, data);\n  };\n\n  this.needTransform = false;\n  this.transforming = false;\n  this.writecb = null;\n  this.writechunk = null;\n}\n\nfunction afterTransform(stream, er, data) {\n  var ts = stream._transformState;\n  ts.transforming = false;\n\n  var cb = ts.writecb;\n\n  if (!cb)\n    return stream.emit('error', new Error('no writecb in Transform class'));\n\n  ts.writechunk = null;\n  ts.writecb = null;\n\n  if (data !== null && data !== undefined)\n    stream.push(data);\n\n  if (cb)\n    cb(er);\n\n  var rs = stream._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    stream._read(rs.highWaterMark);\n  }\n}\n\n\nfunction Transform(options) {\n  if (!(this instanceof Transform))\n    return new Transform(options);\n\n  Duplex.call(this, options);\n\n  var ts = this._transformState = new TransformState(options, this);\n\n  // when the writable side finishes, then flush out anything remaining.\n  var stream = this;\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n\n  this.once('finish', function() {\n    if ('function' === typeof this._flush)\n      this._flush(function(er) {\n        done(stream, er);\n      });\n    else\n      done(stream);\n  });\n}\n\nTransform.prototype.push = function(chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function(chunk, encoding, cb) {\n  throw new Error('not implemented');\n};\n\nTransform.prototype._write = function(chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform ||\n        rs.needReadable ||\n        rs.length < rs.highWaterMark)\n      this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function(n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\n\nfunction done(stream, er) {\n  if (er)\n    return stream.emit('error', er);\n\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  var ws = stream._writableState;\n  var rs = stream._readableState;\n  var ts = stream._transformState;\n\n  if (ws.length)\n    throw new Error('calling transform done when ws.length != 0');\n\n  if (ts.transforming)\n    throw new Error('calling transform done when still transforming');\n\n  return stream.push(null);\n}\n","(function (process){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, cb), and it'll handle all\n// the drain event emission and buffering.\n\nmodule.exports = Writable;\n\n/*<replacement>*/\nvar Buffer = require('buffer').Buffer;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar Stream = require('stream');\n\nutil.inherits(Writable, Stream);\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n}\n\nfunction WritableState(options, stream) {\n  options = options || {};\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  // cast to ints.\n  this.highWaterMark = ~~this.highWaterMark;\n\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, becuase any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function(er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.buffer = [];\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n}\n\nfunction Writable(options) {\n  var Duplex = require('./_stream_duplex');\n\n  // Writable ctor is applied to Duplexes, though they're not\n  // instanceof Writable, they're instanceof Readable.\n  if (!(this instanceof Writable) && !(this instanceof Duplex))\n    return new Writable(options);\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function() {\n  this.emit('error', new Error('Cannot pipe. Not readable.'));\n};\n\n\nfunction writeAfterEnd(stream, state, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  process.nextTick(function() {\n    cb(er);\n  });\n}\n\n// If we get something that is not a buffer, string, null, or undefined,\n// and we're not in objectMode, then that's an error.\n// Otherwise stream chunks are all considered to be of length=1, and the\n// watermarks determine how many objects to keep in the buffer, rather than\n// how many bytes or characters.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  if (!Buffer.isBuffer(chunk) &&\n      'string' !== typeof chunk &&\n      chunk !== null &&\n      chunk !== undefined &&\n      !state.objectMode) {\n    var er = new TypeError('Invalid non-string/buffer chunk');\n    stream.emit('error', er);\n    process.nextTick(function() {\n      cb(er);\n    });\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function(chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (Buffer.isBuffer(chunk))\n    encoding = 'buffer';\n  else if (!encoding)\n    encoding = state.defaultEncoding;\n\n  if (typeof cb !== 'function')\n    cb = function() {};\n\n  if (state.ended)\n    writeAfterEnd(this, state, cb);\n  else if (validChunk(this, state, chunk, cb))\n    ret = writeOrBuffer(this, state, chunk, encoding, cb);\n\n  return ret;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode &&\n      state.decodeStrings !== false &&\n      typeof chunk === 'string') {\n    chunk = new Buffer(chunk, encoding);\n  }\n  return chunk;\n}\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, chunk, encoding, cb) {\n  chunk = decodeChunk(state, chunk, encoding);\n  if (Buffer.isBuffer(chunk))\n    encoding = 'buffer';\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret)\n    state.needDrain = true;\n\n  if (state.writing)\n    state.buffer.push(new WriteReq(chunk, encoding, cb));\n  else\n    doWrite(stream, state, len, chunk, encoding, cb);\n\n  return ret;\n}\n\nfunction doWrite(stream, state, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  if (sync)\n    process.nextTick(function() {\n      cb(er);\n    });\n  else\n    cb(er);\n\n  stream._writableState.errorEmitted = true;\n  stream.emit('error', er);\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er)\n    onwriteError(stream, state, sync, er, cb);\n  else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(stream, state);\n\n    if (!finished && !state.bufferProcessing && state.buffer.length)\n      clearBuffer(stream, state);\n\n    if (sync) {\n      process.nextTick(function() {\n        afterWrite(stream, state, finished, cb);\n      });\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished)\n    onwriteDrain(stream, state);\n  cb();\n  if (finished)\n    finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n\n  for (var c = 0; c < state.buffer.length; c++) {\n    var entry = state.buffer[c];\n    var chunk = entry.chunk;\n    var encoding = entry.encoding;\n    var cb = entry.callback;\n    var len = state.objectMode ? 1 : chunk.length;\n\n    doWrite(stream, state, len, chunk, encoding, cb);\n\n    // if we didn't call the onwrite immediately, then\n    // it means that we need to wait until it does.\n    // also, that means that the chunk and cb are currently\n    // being processed, so move the buffer counter past them.\n    if (state.writing) {\n      c++;\n      break;\n    }\n  }\n\n  state.bufferProcessing = false;\n  if (c < state.buffer.length)\n    state.buffer = state.buffer.slice(c);\n  else\n    state.buffer.length = 0;\n}\n\nWritable.prototype._write = function(chunk, encoding, cb) {\n  cb(new Error('not implemented'));\n};\n\nWritable.prototype.end = function(chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (typeof chunk !== 'undefined' && chunk !== null)\n    this.write(chunk, encoding);\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished)\n    endWritable(this, state, cb);\n};\n\n\nfunction needFinish(stream, state) {\n  return (state.ending &&\n          state.length === 0 &&\n          !state.finished &&\n          !state.writing);\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(stream, state);\n  if (need) {\n    state.finished = true;\n    stream.emit('finish');\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished)\n      process.nextTick(cb);\n    else\n      stream.once('finish', cb);\n  }\n  state.ended = true;\n}\n\n}).call(this,require('_process'))","(function (Buffer){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nfunction isBuffer(arg) {\n  return Buffer.isBuffer(arg);\n}\nexports.isBuffer = isBuffer;\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n}).call(this,require(\"buffer\").Buffer)","module.exports = require(\"./lib/_stream_passthrough.js\")\n","var Stream = require('stream'); // hack to fix a circular dependency issue when used with browserify\nexports = module.exports = require('./lib/_stream_readable.js');\nexports.Stream = Stream;\nexports.Readable = exports;\nexports.Writable = require('./lib/_stream_writable.js');\nexports.Duplex = require('./lib/_stream_duplex.js');\nexports.Transform = require('./lib/_stream_transform.js');\nexports.PassThrough = require('./lib/_stream_passthrough.js');\n","module.exports = require(\"./lib/_stream_transform.js\")\n","module.exports = require(\"./lib/_stream_writable.js\")\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = Stream;\n\nvar EE = require('events').EventEmitter;\nvar inherits = require('inherits');\n\ninherits(Stream, EE);\nStream.Readable = require('readable-stream/readable.js');\nStream.Writable = require('readable-stream/writable.js');\nStream.Duplex = require('readable-stream/duplex.js');\nStream.Transform = require('readable-stream/transform.js');\nStream.PassThrough = require('readable-stream/passthrough.js');\n\n// Backwards-compat with node 0.4.x\nStream.Stream = Stream;\n\n\n\n// old-style streams.  Note that the pipe method (the only relevant\n// part of this class) is overridden in the Readable class.\n\nfunction Stream() {\n  EE.call(this);\n}\n\nStream.prototype.pipe = function(dest, options) {\n  var source = this;\n\n  function ondata(chunk) {\n    if (dest.writable) {\n      if (false === dest.write(chunk) && source.pause) {\n        source.pause();\n      }\n    }\n  }\n\n  source.on('data', ondata);\n\n  function ondrain() {\n    if (source.readable && source.resume) {\n      source.resume();\n    }\n  }\n\n  dest.on('drain', ondrain);\n\n  // If the 'end' option is not supplied, dest.end() will be called when\n  // source gets the 'end' or 'close' events.  Only dest.end() once.\n  if (!dest._isStdio && (!options || options.end !== false)) {\n    source.on('end', onend);\n    source.on('close', onclose);\n  }\n\n  var didOnEnd = false;\n  function onend() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    dest.end();\n  }\n\n\n  function onclose() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    if (typeof dest.destroy === 'function') dest.destroy();\n  }\n\n  // don't leave dangling pipes when there are errors.\n  function onerror(er) {\n    cleanup();\n    if (EE.listenerCount(this, 'error') === 0) {\n      throw er; // Unhandled stream error in pipe.\n    }\n  }\n\n  source.on('error', onerror);\n  dest.on('error', onerror);\n\n  // remove all the event listeners that were added.\n  function cleanup() {\n    source.removeListener('data', ondata);\n    dest.removeListener('drain', ondrain);\n\n    source.removeListener('end', onend);\n    source.removeListener('close', onclose);\n\n    source.removeListener('error', onerror);\n    dest.removeListener('error', onerror);\n\n    source.removeListener('end', cleanup);\n    source.removeListener('close', cleanup);\n\n    dest.removeListener('close', cleanup);\n  }\n\n  source.on('end', cleanup);\n  source.on('close', cleanup);\n\n  dest.on('close', cleanup);\n\n  dest.emit('pipe', source);\n\n  // Allow for unix-like usage: A.pipe(B).pipe(C)\n  return dest;\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar Buffer = require('buffer').Buffer;\n\nvar isBufferEncoding = Buffer.isEncoding\n  || function(encoding) {\n       switch (encoding && encoding.toLowerCase()) {\n         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;\n         default: return false;\n       }\n     }\n\n\nfunction assertEncoding(encoding) {\n  if (encoding && !isBufferEncoding(encoding)) {\n    throw new Error('Unknown encoding: ' + encoding);\n  }\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters. CESU-8 is handled as part of the UTF-8 encoding.\n//\n// @TODO Handling all encodings inside a single object makes it very difficult\n// to reason about this code, so it should be split up in the future.\n// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code\n// points as used by CESU-8.\nvar StringDecoder = exports.StringDecoder = function(encoding) {\n  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');\n  assertEncoding(encoding);\n  switch (this.encoding) {\n    case 'utf8':\n      // CESU-8 represents each of Surrogate Pair by 3-bytes\n      this.surrogateSize = 3;\n      break;\n    case 'ucs2':\n    case 'utf16le':\n      // UTF-16 represents each of Surrogate Pair by 2-bytes\n      this.surrogateSize = 2;\n      this.detectIncompleteChar = utf16DetectIncompleteChar;\n      break;\n    case 'base64':\n      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.\n      this.surrogateSize = 3;\n      this.detectIncompleteChar = base64DetectIncompleteChar;\n      break;\n    default:\n      this.write = passThroughWrite;\n      return;\n  }\n\n  // Enough space to store all bytes of a single character. UTF-8 needs 4\n  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).\n  this.charBuffer = new Buffer(6);\n  // Number of bytes received for the current incomplete multi-byte character.\n  this.charReceived = 0;\n  // Number of bytes expected for the current incomplete multi-byte character.\n  this.charLength = 0;\n};\n\n\n// write decodes the given buffer and returns it as JS string that is\n// guaranteed to not contain any partial multi-byte characters. Any partial\n// character found at the end of the buffer is buffered up, and will be\n// returned when calling write again with the remaining bytes.\n//\n// Note: Converting a Buffer containing an orphan surrogate to a String\n// currently works, but converting a String to a Buffer (via `new Buffer`, or\n// Buffer#write) will replace incomplete surrogates with the unicode\n// replacement character. See https://codereview.chromium.org/121173009/ .\nStringDecoder.prototype.write = function(buffer) {\n  var charStr = '';\n  // if our last write ended with an incomplete multibyte character\n  while (this.charLength) {\n    // determine how many remaining bytes this buffer has to offer for this char\n    var available = (buffer.length >= this.charLength - this.charReceived) ?\n        this.charLength - this.charReceived :\n        buffer.length;\n\n    // add the new bytes to the char buffer\n    buffer.copy(this.charBuffer, this.charReceived, 0, available);\n    this.charReceived += available;\n\n    if (this.charReceived < this.charLength) {\n      // still not enough chars in this buffer? wait for more ...\n      return '';\n    }\n\n    // remove bytes belonging to the current character from the buffer\n    buffer = buffer.slice(available, buffer.length);\n\n    // get the character that was split\n    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);\n\n    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n    var charCode = charStr.charCodeAt(charStr.length - 1);\n    if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n      this.charLength += this.surrogateSize;\n      charStr = '';\n      continue;\n    }\n    this.charReceived = this.charLength = 0;\n\n    // if there are no more bytes in this buffer, just emit our char\n    if (buffer.length === 0) {\n      return charStr;\n    }\n    break;\n  }\n\n  // determine and set charLength / charReceived\n  this.detectIncompleteChar(buffer);\n\n  var end = buffer.length;\n  if (this.charLength) {\n    // buffer the incomplete character bytes we got\n    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);\n    end -= this.charReceived;\n  }\n\n  charStr += buffer.toString(this.encoding, 0, end);\n\n  var end = charStr.length - 1;\n  var charCode = charStr.charCodeAt(end);\n  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n  if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n    var size = this.surrogateSize;\n    this.charLength += size;\n    this.charReceived += size;\n    this.charBuffer.copy(this.charBuffer, size, 0, size);\n    buffer.copy(this.charBuffer, 0, 0, size);\n    return charStr.substring(0, end);\n  }\n\n  // or just emit the charStr\n  return charStr;\n};\n\n// detectIncompleteChar determines if there is an incomplete UTF-8 character at\n// the end of the given buffer. If so, it sets this.charLength to the byte\n// length that character, and sets this.charReceived to the number of bytes\n// that are available for this character.\nStringDecoder.prototype.detectIncompleteChar = function(buffer) {\n  // determine how many bytes we have to check at the end of this buffer\n  var i = (buffer.length >= 3) ? 3 : buffer.length;\n\n  // Figure out if one of the last i bytes of our buffer announces an\n  // incomplete char.\n  for (; i > 0; i--) {\n    var c = buffer[buffer.length - i];\n\n    // See http://en.wikipedia.org/wiki/UTF-8#Description\n\n    // 110XXXXX\n    if (i == 1 && c >> 5 == 0x06) {\n      this.charLength = 2;\n      break;\n    }\n\n    // 1110XXXX\n    if (i <= 2 && c >> 4 == 0x0E) {\n      this.charLength = 3;\n      break;\n    }\n\n    // 11110XXX\n    if (i <= 3 && c >> 3 == 0x1E) {\n      this.charLength = 4;\n      break;\n    }\n  }\n  this.charReceived = i;\n};\n\nStringDecoder.prototype.end = function(buffer) {\n  var res = '';\n  if (buffer && buffer.length)\n    res = this.write(buffer);\n\n  if (this.charReceived) {\n    var cr = this.charReceived;\n    var buf = this.charBuffer;\n    var enc = this.encoding;\n    res += buf.slice(0, cr).toString(enc);\n  }\n\n  return res;\n};\n\nfunction passThroughWrite(buffer) {\n  return buffer.toString(this.encoding);\n}\n\nfunction utf16DetectIncompleteChar(buffer) {\n  this.charReceived = buffer.length % 2;\n  this.charLength = this.charReceived ? 2 : 0;\n}\n\nfunction base64DetectIncompleteChar(buffer) {\n  this.charReceived = buffer.length % 3;\n  this.charLength = this.charReceived ? 3 : 0;\n}\n","(function (Buffer){\n'use strict';\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n// shim for Node's 'util' package\n// DO NOT REMOVE THIS! It is required for compatibility with EnderJS (http://enderjs.com/).\nvar util = {\n  isArray: function (ar) {\n    return Array.isArray(ar) || (typeof ar === 'object' && objectToString(ar) === '[object Array]');\n  },\n  isDate: function (d) {\n    return typeof d === 'object' && objectToString(d) === '[object Date]';\n  },\n  isRegExp: function (re) {\n    return typeof re === 'object' && objectToString(re) === '[object RegExp]';\n  },\n  getRegExpFlags: function (re) {\n    var flags = '';\n    re.global && (flags += 'g');\n    re.ignoreCase && (flags += 'i');\n    re.multiline && (flags += 'm');\n    return flags;\n  }\n};\n\n\nif (typeof module === 'object')\n  module.exports = clone;\n\n/**\n * Clones (copies) an Object using deep copying.\n *\n * This function supports circular references by default, but if you are certain\n * there are no circular references in your object, you can save some CPU time\n * by calling clone(obj, false).\n *\n * Caution: if `circular` is false and `parent` contains circular references,\n * your program may enter an infinite loop and crash.\n *\n * @param `parent` - the object to be cloned\n * @param `circular` - set to true if the object to be cloned may contain\n *    circular references. (optional - true by default)\n * @param `depth` - set to a number if the object is only to be cloned to\n *    a particular depth. (optional - defaults to Infinity)\n * @param `prototype` - sets the prototype to be used when cloning an object.\n *    (optional - defaults to parent prototype).\n*/\n\nfunction clone(parent, circular, depth, prototype) {\n  // maintain two arrays for circular references, where corresponding parents\n  // and children have the same index\n  var allParents = [];\n  var allChildren = [];\n\n  var useBuffer = typeof Buffer != 'undefined';\n\n  if (typeof circular == 'undefined')\n    circular = true;\n\n  if (typeof depth == 'undefined')\n    depth = Infinity;\n\n  // recurse this function so we don't reset allParents and allChildren\n  function _clone(parent, depth) {\n    // cloning null always returns null\n    if (parent === null)\n      return null;\n\n    if (depth == 0)\n      return parent;\n\n    var child;\n    var proto;\n    if (typeof parent != 'object') {\n      return parent;\n    }\n\n    if (util.isArray(parent)) {\n      child = [];\n    } else if (util.isRegExp(parent)) {\n      child = new RegExp(parent.source, util.getRegExpFlags(parent));\n      if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n    } else if (util.isDate(parent)) {\n      child = new Date(parent.getTime());\n    } else if (useBuffer && Buffer.isBuffer(parent)) {\n      child = new Buffer(parent.length);\n      parent.copy(child);\n      return child;\n    } else {\n      if (typeof prototype == 'undefined') {\n        proto = Object.getPrototypeOf(parent);\n        child = Object.create(proto);\n      }\n      else {\n        child = Object.create(prototype);\n        proto = prototype;\n      }\n    }\n\n    if (circular) {\n      var index = allParents.indexOf(parent);\n\n      if (index != -1) {\n        return allChildren[index];\n      }\n      allParents.push(parent);\n      allChildren.push(child);\n    }\n\n    for (var i in parent) {\n      var attrs;\n      if (proto) {\n        attrs = Object.getOwnPropertyDescriptor(proto, i);\n      }\n      \n      if (attrs && attrs.set == null) {\n        continue;\n      }\n      child[i] = _clone(parent[i], depth - 1);\n    }\n\n    return child;\n  }\n\n  return _clone(parent, depth);\n}\n\n/**\n * Simple flat clone using prototype, accepts only objects, usefull for property\n * override on FLAT configuration object (no nested props).\n *\n * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n * works.\n */\nclone.clonePrototype = function(parent) {\n  if (parent === null)\n    return null;\n\n  var c = function () {};\n  c.prototype = parent;\n  return new c();\n};\n\n}).call(this,require(\"buffer\").Buffer)","(function (Buffer){\n// wrapper for non-node envs\n;(function (sax) {\n\nsax.parser = function (strict, opt) { return new SAXParser(strict, opt) }\nsax.SAXParser = SAXParser\nsax.SAXStream = SAXStream\nsax.createStream = createStream\n\n// When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.\n// When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),\n// since that's the earliest that a buffer overrun could occur.  This way, checks are\n// as rare as required, but as often as necessary to ensure never crossing this bound.\n// Furthermore, buffers are only tested at most once per write(), so passing a very\n// large string into write() might have undesirable effects, but this is manageable by\n// the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme\n// edge case, result in creating at most one complete copy of the string passed in.\n// Set to Infinity to have unlimited buffers.\nsax.MAX_BUFFER_LENGTH = 64 * 1024\n\nvar buffers = [\n  \"comment\", \"sgmlDecl\", \"textNode\", \"tagName\", \"doctype\",\n  \"procInstName\", \"procInstBody\", \"entity\", \"attribName\",\n  \"attribValue\", \"cdata\", \"script\"\n]\n\nsax.EVENTS = // for discoverability.\n  [ \"text\"\n  , \"processinginstruction\"\n  , \"sgmldeclaration\"\n  , \"doctype\"\n  , \"comment\"\n  , \"attribute\"\n  , \"opentag\"\n  , \"closetag\"\n  , \"opencdata\"\n  , \"cdata\"\n  , \"closecdata\"\n  , \"error\"\n  , \"end\"\n  , \"ready\"\n  , \"script\"\n  , \"opennamespace\"\n  , \"closenamespace\"\n  ]\n\nfunction SAXParser (strict, opt) {\n  if (!(this instanceof SAXParser)) return new SAXParser(strict, opt)\n\n  var parser = this\n  clearBuffers(parser)\n  parser.q = parser.c = \"\"\n  parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH\n  parser.opt = opt || {}\n  parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags\n  parser.looseCase = parser.opt.lowercase ? \"toLowerCase\" : \"toUpperCase\"\n  parser.tags = []\n  parser.closed = parser.closedRoot = parser.sawRoot = false\n  parser.tag = parser.error = null\n  parser.strict = !!strict\n  parser.noscript = !!(strict || parser.opt.noscript)\n  parser.state = S.BEGIN\n  parser.ENTITIES = Object.create(sax.ENTITIES)\n  parser.attribList = []\n\n  // namespaces form a prototype chain.\n  // it always points at the current tag,\n  // which protos to its parent tag.\n  if (parser.opt.xmlns) parser.ns = Object.create(rootNS)\n\n  // mostly just for error reporting\n  parser.trackPosition = parser.opt.position !== false\n  if (parser.trackPosition) {\n    parser.position = parser.line = parser.column = 0\n  }\n  emit(parser, \"onready\")\n}\n\nif (!Object.create) Object.create = function (o) {\n  function f () { this.__proto__ = o }\n  f.prototype = o\n  return new f\n}\n\nif (!Object.getPrototypeOf) Object.getPrototypeOf = function (o) {\n  return o.__proto__\n}\n\nif (!Object.keys) Object.keys = function (o) {\n  var a = []\n  for (var i in o) if (o.hasOwnProperty(i)) a.push(i)\n  return a\n}\n\nfunction checkBufferLength (parser) {\n  var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10)\n    , maxActual = 0\n  for (var i = 0, l = buffers.length; i < l; i ++) {\n    var len = parser[buffers[i]].length\n    if (len > maxAllowed) {\n      // Text/cdata nodes can get big, and since they're buffered,\n      // we can get here under normal conditions.\n      // Avoid issues by emitting the text node now,\n      // so at least it won't get any bigger.\n      switch (buffers[i]) {\n        case \"textNode\":\n          closeText(parser)\n        break\n\n        case \"cdata\":\n          emitNode(parser, \"oncdata\", parser.cdata)\n          parser.cdata = \"\"\n        break\n\n        case \"script\":\n          emitNode(parser, \"onscript\", parser.script)\n          parser.script = \"\"\n        break\n\n        default:\n          error(parser, \"Max buffer length exceeded: \"+buffers[i])\n      }\n    }\n    maxActual = Math.max(maxActual, len)\n  }\n  // schedule the next check for the earliest possible buffer overrun.\n  parser.bufferCheckPosition = (sax.MAX_BUFFER_LENGTH - maxActual)\n                             + parser.position\n}\n\nfunction clearBuffers (parser) {\n  for (var i = 0, l = buffers.length; i < l; i ++) {\n    parser[buffers[i]] = \"\"\n  }\n}\n\nfunction flushBuffers (parser) {\n  closeText(parser)\n  if (parser.cdata !== \"\") {\n    emitNode(parser, \"oncdata\", parser.cdata)\n    parser.cdata = \"\"\n  }\n  if (parser.script !== \"\") {\n    emitNode(parser, \"onscript\", parser.script)\n    parser.script = \"\"\n  }\n}\n\nSAXParser.prototype =\n  { end: function () { end(this) }\n  , write: write\n  , resume: function () { this.error = null; return this }\n  , close: function () { return this.write(null) }\n  , flush: function () { flushBuffers(this) }\n  }\n\ntry {\n  var Stream = require(\"stream\").Stream\n} catch (ex) {\n  var Stream = function () {}\n}\n\n\nvar streamWraps = sax.EVENTS.filter(function (ev) {\n  return ev !== \"error\" && ev !== \"end\"\n})\n\nfunction createStream (strict, opt) {\n  return new SAXStream(strict, opt)\n}\n\nfunction SAXStream (strict, opt) {\n  if (!(this instanceof SAXStream)) return new SAXStream(strict, opt)\n\n  Stream.apply(this)\n\n  this._parser = new SAXParser(strict, opt)\n  this.writable = true\n  this.readable = true\n\n\n  var me = this\n\n  this._parser.onend = function () {\n    me.emit(\"end\")\n  }\n\n  this._parser.onerror = function (er) {\n    me.emit(\"error\", er)\n\n    // if didn't throw, then means error was handled.\n    // go ahead and clear error, so we can write again.\n    me._parser.error = null\n  }\n\n  this._decoder = null;\n\n  streamWraps.forEach(function (ev) {\n    Object.defineProperty(me, \"on\" + ev, {\n      get: function () { return me._parser[\"on\" + ev] },\n      set: function (h) {\n        if (!h) {\n          me.removeAllListeners(ev)\n          return me._parser[\"on\"+ev] = h\n        }\n        me.on(ev, h)\n      },\n      enumerable: true,\n      configurable: false\n    })\n  })\n}\n\nSAXStream.prototype = Object.create(Stream.prototype,\n  { constructor: { value: SAXStream } })\n\nSAXStream.prototype.write = function (data) {\n  if (typeof Buffer === 'function' &&\n      typeof Buffer.isBuffer === 'function' &&\n      Buffer.isBuffer(data)) {\n    if (!this._decoder) {\n      var SD = require('string_decoder').StringDecoder\n      this._decoder = new SD('utf8')\n    }\n    data = this._decoder.write(data);\n  }\n\n  this._parser.write(data.toString())\n  this.emit(\"data\", data)\n  return true\n}\n\nSAXStream.prototype.end = function (chunk) {\n  if (chunk && chunk.length) this.write(chunk)\n  this._parser.end()\n  return true\n}\n\nSAXStream.prototype.on = function (ev, handler) {\n  var me = this\n  if (!me._parser[\"on\"+ev] && streamWraps.indexOf(ev) !== -1) {\n    me._parser[\"on\"+ev] = function () {\n      var args = arguments.length === 1 ? [arguments[0]]\n               : Array.apply(null, arguments)\n      args.splice(0, 0, ev)\n      me.emit.apply(me, args)\n    }\n  }\n\n  return Stream.prototype.on.call(me, ev, handler)\n}\n\n\n\n// character classes and tokens\nvar whitespace = \"\\r\\n\\t \"\n  // this really needs to be replaced with character classes.\n  // XML allows all manner of ridiculous numbers and digits.\n  , number = \"0124356789\"\n  , letter = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  // (Letter | \"_\" | \":\")\n  , quote = \"'\\\"\"\n  , entity = number+letter+\"#\"\n  , attribEnd = whitespace + \">\"\n  , CDATA = \"[CDATA[\"\n  , DOCTYPE = \"DOCTYPE\"\n  , XML_NAMESPACE = \"http://www.w3.org/XML/1998/namespace\"\n  , XMLNS_NAMESPACE = \"http://www.w3.org/2000/xmlns/\"\n  , rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE }\n\n// turn all the string character sets into character class objects.\nwhitespace = charClass(whitespace)\nnumber = charClass(number)\nletter = charClass(letter)\n\n// http://www.w3.org/TR/REC-xml/#NT-NameStartChar\n// This implementation works on strings, a single character at a time\n// as such, it cannot ever support astral-plane characters (10000-EFFFF)\n// without a significant breaking change to either this  parser, or the\n// JavaScript language.  Implementation of an emoji-capable xml parser\n// is left as an exercise for the reader.\nvar nameStart = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/\n\nvar nameBody = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040\\.\\d-]/\n\nquote = charClass(quote)\nentity = charClass(entity)\nattribEnd = charClass(attribEnd)\n\nfunction charClass (str) {\n  return str.split(\"\").reduce(function (s, c) {\n    s[c] = true\n    return s\n  }, {})\n}\n\nfunction isRegExp (c) {\n  return Object.prototype.toString.call(c) === '[object RegExp]'\n}\n\nfunction is (charclass, c) {\n  return isRegExp(charclass) ? !!c.match(charclass) : charclass[c]\n}\n\nfunction not (charclass, c) {\n  return !is(charclass, c)\n}\n\nvar S = 0\nsax.STATE =\n{ BEGIN                     : S++\n, TEXT                      : S++ // general stuff\n, TEXT_ENTITY               : S++ // &amp and such.\n, OPEN_WAKA                 : S++ // <\n, SGML_DECL                 : S++ // <!BLARG\n, SGML_DECL_QUOTED          : S++ // <!BLARG foo \"bar\n, DOCTYPE                   : S++ // <!DOCTYPE\n, DOCTYPE_QUOTED            : S++ // <!DOCTYPE \"//blah\n, DOCTYPE_DTD               : S++ // <!DOCTYPE \"//blah\" [ ...\n, DOCTYPE_DTD_QUOTED        : S++ // <!DOCTYPE \"//blah\" [ \"foo\n, COMMENT_STARTING          : S++ // <!-\n, COMMENT                   : S++ // <!--\n, COMMENT_ENDING            : S++ // <!-- blah -\n, COMMENT_ENDED             : S++ // <!-- blah --\n, CDATA                     : S++ // <![CDATA[ something\n, CDATA_ENDING              : S++ // ]\n, CDATA_ENDING_2            : S++ // ]]\n, PROC_INST                 : S++ // <?hi\n, PROC_INST_BODY            : S++ // <?hi there\n, PROC_INST_ENDING          : S++ // <?hi \"there\" ?\n, OPEN_TAG                  : S++ // <strong\n, OPEN_TAG_SLASH            : S++ // <strong /\n, ATTRIB                    : S++ // <a\n, ATTRIB_NAME               : S++ // <a foo\n, ATTRIB_NAME_SAW_WHITE     : S++ // <a foo _\n, ATTRIB_VALUE              : S++ // <a foo=\n, ATTRIB_VALUE_QUOTED       : S++ // <a foo=\"bar\n, ATTRIB_VALUE_CLOSED       : S++ // <a foo=\"bar\"\n, ATTRIB_VALUE_UNQUOTED     : S++ // <a foo=bar\n, ATTRIB_VALUE_ENTITY_Q     : S++ // <foo bar=\"&quot;\"\n, ATTRIB_VALUE_ENTITY_U     : S++ // <foo bar=&quot;\n, CLOSE_TAG                 : S++ // </a\n, CLOSE_TAG_SAW_WHITE       : S++ // </a   >\n, SCRIPT                    : S++ // <script> ...\n, SCRIPT_ENDING             : S++ // <script> ... <\n}\n\nsax.ENTITIES =\n{ \"amp\" : \"&\"\n, \"gt\" : \">\"\n, \"lt\" : \"<\"\n, \"quot\" : \"\\\"\"\n, \"apos\" : \"'\"\n, \"AElig\" : 198\n, \"Aacute\" : 193\n, \"Acirc\" : 194\n, \"Agrave\" : 192\n, \"Aring\" : 197\n, \"Atilde\" : 195\n, \"Auml\" : 196\n, \"Ccedil\" : 199\n, \"ETH\" : 208\n, \"Eacute\" : 201\n, \"Ecirc\" : 202\n, \"Egrave\" : 200\n, \"Euml\" : 203\n, \"Iacute\" : 205\n, \"Icirc\" : 206\n, \"Igrave\" : 204\n, \"Iuml\" : 207\n, \"Ntilde\" : 209\n, \"Oacute\" : 211\n, \"Ocirc\" : 212\n, \"Ograve\" : 210\n, \"Oslash\" : 216\n, \"Otilde\" : 213\n, \"Ouml\" : 214\n, \"THORN\" : 222\n, \"Uacute\" : 218\n, \"Ucirc\" : 219\n, \"Ugrave\" : 217\n, \"Uuml\" : 220\n, \"Yacute\" : 221\n, \"aacute\" : 225\n, \"acirc\" : 226\n, \"aelig\" : 230\n, \"agrave\" : 224\n, \"aring\" : 229\n, \"atilde\" : 227\n, \"auml\" : 228\n, \"ccedil\" : 231\n, \"eacute\" : 233\n, \"ecirc\" : 234\n, \"egrave\" : 232\n, \"eth\" : 240\n, \"euml\" : 235\n, \"iacute\" : 237\n, \"icirc\" : 238\n, \"igrave\" : 236\n, \"iuml\" : 239\n, \"ntilde\" : 241\n, \"oacute\" : 243\n, \"ocirc\" : 244\n, \"ograve\" : 242\n, \"oslash\" : 248\n, \"otilde\" : 245\n, \"ouml\" : 246\n, \"szlig\" : 223\n, \"thorn\" : 254\n, \"uacute\" : 250\n, \"ucirc\" : 251\n, \"ugrave\" : 249\n, \"uuml\" : 252\n, \"yacute\" : 253\n, \"yuml\" : 255\n, \"copy\" : 169\n, \"reg\" : 174\n, \"nbsp\" : 160\n, \"iexcl\" : 161\n, \"cent\" : 162\n, \"pound\" : 163\n, \"curren\" : 164\n, \"yen\" : 165\n, \"brvbar\" : 166\n, \"sect\" : 167\n, \"uml\" : 168\n, \"ordf\" : 170\n, \"laquo\" : 171\n, \"not\" : 172\n, \"shy\" : 173\n, \"macr\" : 175\n, \"deg\" : 176\n, \"plusmn\" : 177\n, \"sup1\" : 185\n, \"sup2\" : 178\n, \"sup3\" : 179\n, \"acute\" : 180\n, \"micro\" : 181\n, \"para\" : 182\n, \"middot\" : 183\n, \"cedil\" : 184\n, \"ordm\" : 186\n, \"raquo\" : 187\n, \"frac14\" : 188\n, \"frac12\" : 189\n, \"frac34\" : 190\n, \"iquest\" : 191\n, \"times\" : 215\n, \"divide\" : 247\n, \"OElig\" : 338\n, \"oelig\" : 339\n, \"Scaron\" : 352\n, \"scaron\" : 353\n, \"Yuml\" : 376\n, \"fnof\" : 402\n, \"circ\" : 710\n, \"tilde\" : 732\n, \"Alpha\" : 913\n, \"Beta\" : 914\n, \"Gamma\" : 915\n, \"Delta\" : 916\n, \"Epsilon\" : 917\n, \"Zeta\" : 918\n, \"Eta\" : 919\n, \"Theta\" : 920\n, \"Iota\" : 921\n, \"Kappa\" : 922\n, \"Lambda\" : 923\n, \"Mu\" : 924\n, \"Nu\" : 925\n, \"Xi\" : 926\n, \"Omicron\" : 927\n, \"Pi\" : 928\n, \"Rho\" : 929\n, \"Sigma\" : 931\n, \"Tau\" : 932\n, \"Upsilon\" : 933\n, \"Phi\" : 934\n, \"Chi\" : 935\n, \"Psi\" : 936\n, \"Omega\" : 937\n, \"alpha\" : 945\n, \"beta\" : 946\n, \"gamma\" : 947\n, \"delta\" : 948\n, \"epsilon\" : 949\n, \"zeta\" : 950\n, \"eta\" : 951\n, \"theta\" : 952\n, \"iota\" : 953\n, \"kappa\" : 954\n, \"lambda\" : 955\n, \"mu\" : 956\n, \"nu\" : 957\n, \"xi\" : 958\n, \"omicron\" : 959\n, \"pi\" : 960\n, \"rho\" : 961\n, \"sigmaf\" : 962\n, \"sigma\" : 963\n, \"tau\" : 964\n, \"upsilon\" : 965\n, \"phi\" : 966\n, \"chi\" : 967\n, \"psi\" : 968\n, \"omega\" : 969\n, \"thetasym\" : 977\n, \"upsih\" : 978\n, \"piv\" : 982\n, \"ensp\" : 8194\n, \"emsp\" : 8195\n, \"thinsp\" : 8201\n, \"zwnj\" : 8204\n, \"zwj\" : 8205\n, \"lrm\" : 8206\n, \"rlm\" : 8207\n, \"ndash\" : 8211\n, \"mdash\" : 8212\n, \"lsquo\" : 8216\n, \"rsquo\" : 8217\n, \"sbquo\" : 8218\n, \"ldquo\" : 8220\n, \"rdquo\" : 8221\n, \"bdquo\" : 8222\n, \"dagger\" : 8224\n, \"Dagger\" : 8225\n, \"bull\" : 8226\n, \"hellip\" : 8230\n, \"permil\" : 8240\n, \"prime\" : 8242\n, \"Prime\" : 8243\n, \"lsaquo\" : 8249\n, \"rsaquo\" : 8250\n, \"oline\" : 8254\n, \"frasl\" : 8260\n, \"euro\" : 8364\n, \"image\" : 8465\n, \"weierp\" : 8472\n, \"real\" : 8476\n, \"trade\" : 8482\n, \"alefsym\" : 8501\n, \"larr\" : 8592\n, \"uarr\" : 8593\n, \"rarr\" : 8594\n, \"darr\" : 8595\n, \"harr\" : 8596\n, \"crarr\" : 8629\n, \"lArr\" : 8656\n, \"uArr\" : 8657\n, \"rArr\" : 8658\n, \"dArr\" : 8659\n, \"hArr\" : 8660\n, \"forall\" : 8704\n, \"part\" : 8706\n, \"exist\" : 8707\n, \"empty\" : 8709\n, \"nabla\" : 8711\n, \"isin\" : 8712\n, \"notin\" : 8713\n, \"ni\" : 8715\n, \"prod\" : 8719\n, \"sum\" : 8721\n, \"minus\" : 8722\n, \"lowast\" : 8727\n, \"radic\" : 8730\n, \"prop\" : 8733\n, \"infin\" : 8734\n, \"ang\" : 8736\n, \"and\" : 8743\n, \"or\" : 8744\n, \"cap\" : 8745\n, \"cup\" : 8746\n, \"int\" : 8747\n, \"there4\" : 8756\n, \"sim\" : 8764\n, \"cong\" : 8773\n, \"asymp\" : 8776\n, \"ne\" : 8800\n, \"equiv\" : 8801\n, \"le\" : 8804\n, \"ge\" : 8805\n, \"sub\" : 8834\n, \"sup\" : 8835\n, \"nsub\" : 8836\n, \"sube\" : 8838\n, \"supe\" : 8839\n, \"oplus\" : 8853\n, \"otimes\" : 8855\n, \"perp\" : 8869\n, \"sdot\" : 8901\n, \"lceil\" : 8968\n, \"rceil\" : 8969\n, \"lfloor\" : 8970\n, \"rfloor\" : 8971\n, \"lang\" : 9001\n, \"rang\" : 9002\n, \"loz\" : 9674\n, \"spades\" : 9824\n, \"clubs\" : 9827\n, \"hearts\" : 9829\n, \"diams\" : 9830\n}\n\nObject.keys(sax.ENTITIES).forEach(function (key) {\n    var e = sax.ENTITIES[key]\n    var s = typeof e === 'number' ? String.fromCharCode(e) : e\n    sax.ENTITIES[key] = s\n})\n\nfor (var S in sax.STATE) sax.STATE[sax.STATE[S]] = S\n\n// shorthand\nS = sax.STATE\n\nfunction emit (parser, event, data) {\n  parser[event] && parser[event](data)\n}\n\nfunction emitNode (parser, nodeType, data) {\n  if (parser.textNode) closeText(parser)\n  emit(parser, nodeType, data)\n}\n\nfunction closeText (parser) {\n  parser.textNode = textopts(parser.opt, parser.textNode)\n  if (parser.textNode) emit(parser, \"ontext\", parser.textNode)\n  parser.textNode = \"\"\n}\n\nfunction textopts (opt, text) {\n  if (opt.trim) text = text.trim()\n  if (opt.normalize) text = text.replace(/\\s+/g, \" \")\n  return text\n}\n\nfunction error (parser, er) {\n  closeText(parser)\n  if (parser.trackPosition) {\n    er += \"\\nLine: \"+parser.line+\n          \"\\nColumn: \"+parser.column+\n          \"\\nChar: \"+parser.c\n  }\n  er = new Error(er)\n  parser.error = er\n  emit(parser, \"onerror\", er)\n  return parser\n}\n\nfunction end (parser) {\n  if (!parser.closedRoot) strictFail(parser, \"Unclosed root tag\")\n  if ((parser.state !== S.BEGIN) && (parser.state !== S.TEXT)) error(parser, \"Unexpected end\")\n  closeText(parser)\n  parser.c = \"\"\n  parser.closed = true\n  emit(parser, \"onend\")\n  SAXParser.call(parser, parser.strict, parser.opt)\n  return parser\n}\n\nfunction strictFail (parser, message) {\n  if (typeof parser !== 'object' || !(parser instanceof SAXParser))\n    throw new Error('bad call to strictFail');\n  if (parser.strict) error(parser, message)\n}\n\nfunction newTag (parser) {\n  if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]()\n  var parent = parser.tags[parser.tags.length - 1] || parser\n    , tag = parser.tag = { name : parser.tagName, attributes : {} }\n\n  // will be overridden if tag contails an xmlns=\"foo\" or xmlns:foo=\"bar\"\n  if (parser.opt.xmlns) tag.ns = parent.ns\n  parser.attribList.length = 0\n}\n\nfunction qname (name, attribute) {\n  var i = name.indexOf(\":\")\n    , qualName = i < 0 ? [ \"\", name ] : name.split(\":\")\n    , prefix = qualName[0]\n    , local = qualName[1]\n\n  // <x \"xmlns\"=\"http://foo\">\n  if (attribute && name === \"xmlns\") {\n    prefix = \"xmlns\"\n    local = \"\"\n  }\n\n  return { prefix: prefix, local: local }\n}\n\nfunction attrib (parser) {\n  if (!parser.strict) parser.attribName = parser.attribName[parser.looseCase]()\n\n  if (parser.attribList.indexOf(parser.attribName) !== -1 ||\n      parser.tag.attributes.hasOwnProperty(parser.attribName)) {\n    return parser.attribName = parser.attribValue = \"\"\n  }\n\n  if (parser.opt.xmlns) {\n    var qn = qname(parser.attribName, true)\n      , prefix = qn.prefix\n      , local = qn.local\n\n    if (prefix === \"xmlns\") {\n      // namespace binding attribute; push the binding into scope\n      if (local === \"xml\" && parser.attribValue !== XML_NAMESPACE) {\n        strictFail( parser\n                  , \"xml: prefix must be bound to \" + XML_NAMESPACE + \"\\n\"\n                  + \"Actual: \" + parser.attribValue )\n      } else if (local === \"xmlns\" && parser.attribValue !== XMLNS_NAMESPACE) {\n        strictFail( parser\n                  , \"xmlns: prefix must be bound to \" + XMLNS_NAMESPACE + \"\\n\"\n                  + \"Actual: \" + parser.attribValue )\n      } else {\n        var tag = parser.tag\n          , parent = parser.tags[parser.tags.length - 1] || parser\n        if (tag.ns === parent.ns) {\n          tag.ns = Object.create(parent.ns)\n        }\n        tag.ns[local] = parser.attribValue\n      }\n    }\n\n    // defer onattribute events until all attributes have been seen\n    // so any new bindings can take effect; preserve attribute order\n    // so deferred events can be emitted in document order\n    parser.attribList.push([parser.attribName, parser.attribValue])\n  } else {\n    // in non-xmlns mode, we can emit the event right away\n    parser.tag.attributes[parser.attribName] = parser.attribValue\n    emitNode( parser\n            , \"onattribute\"\n            , { name: parser.attribName\n              , value: parser.attribValue } )\n  }\n\n  parser.attribName = parser.attribValue = \"\"\n}\n\nfunction openTag (parser, selfClosing) {\n  if (parser.opt.xmlns) {\n    // emit namespace binding events\n    var tag = parser.tag\n\n    // add namespace info to tag\n    var qn = qname(parser.tagName)\n    tag.prefix = qn.prefix\n    tag.local = qn.local\n    tag.uri = tag.ns[qn.prefix] || \"\"\n\n    if (tag.prefix && !tag.uri) {\n      strictFail(parser, \"Unbound namespace prefix: \"\n                       + JSON.stringify(parser.tagName))\n      tag.uri = qn.prefix\n    }\n\n    var parent = parser.tags[parser.tags.length - 1] || parser\n    if (tag.ns && parent.ns !== tag.ns) {\n      Object.keys(tag.ns).forEach(function (p) {\n        emitNode( parser\n                , \"onopennamespace\"\n                , { prefix: p , uri: tag.ns[p] } )\n      })\n    }\n\n    // handle deferred onattribute events\n    // Note: do not apply default ns to attributes:\n    //   http://www.w3.org/TR/REC-xml-names/#defaulting\n    for (var i = 0, l = parser.attribList.length; i < l; i ++) {\n      var nv = parser.attribList[i]\n      var name = nv[0]\n        , value = nv[1]\n        , qualName = qname(name, true)\n        , prefix = qualName.prefix\n        , local = qualName.local\n        , uri = prefix == \"\" ? \"\" : (tag.ns[prefix] || \"\")\n        , a = { name: name\n              , value: value\n              , prefix: prefix\n              , local: local\n              , uri: uri\n              }\n\n      // if there's any attributes with an undefined namespace,\n      // then fail on them now.\n      if (prefix && prefix != \"xmlns\" && !uri) {\n        strictFail(parser, \"Unbound namespace prefix: \"\n                         + JSON.stringify(prefix))\n        a.uri = prefix\n      }\n      parser.tag.attributes[name] = a\n      emitNode(parser, \"onattribute\", a)\n    }\n    parser.attribList.length = 0\n  }\n\n  parser.tag.isSelfClosing = !!selfClosing\n\n  // process the tag\n  parser.sawRoot = true\n  parser.tags.push(parser.tag)\n  emitNode(parser, \"onopentag\", parser.tag)\n  if (!selfClosing) {\n    // special case for <script> in non-strict mode.\n    if (!parser.noscript && parser.tagName.toLowerCase() === \"script\") {\n      parser.state = S.SCRIPT\n    } else {\n      parser.state = S.TEXT\n    }\n    parser.tag = null\n    parser.tagName = \"\"\n  }\n  parser.attribName = parser.attribValue = \"\"\n  parser.attribList.length = 0\n}\n\nfunction closeTag (parser) {\n  if (!parser.tagName) {\n    strictFail(parser, \"Weird empty close tag.\")\n    parser.textNode += \"</>\"\n    parser.state = S.TEXT\n    return\n  }\n\n  if (parser.script) {\n    if (parser.tagName !== \"script\") {\n      parser.script += \"</\" + parser.tagName + \">\"\n      parser.tagName = \"\"\n      parser.state = S.SCRIPT\n      return\n    }\n    emitNode(parser, \"onscript\", parser.script)\n    parser.script = \"\"\n  }\n\n  // first make sure that the closing tag actually exists.\n  // <a><b></c></b></a> will close everything, otherwise.\n  var t = parser.tags.length\n  var tagName = parser.tagName\n  if (!parser.strict) tagName = tagName[parser.looseCase]()\n  var closeTo = tagName\n  while (t --) {\n    var close = parser.tags[t]\n    if (close.name !== closeTo) {\n      // fail the first time in strict mode\n      strictFail(parser, \"Unexpected close tag\")\n    } else break\n  }\n\n  // didn't find it.  we already failed for strict, so just abort.\n  if (t < 0) {\n    strictFail(parser, \"Unmatched closing tag: \"+parser.tagName)\n    parser.textNode += \"</\" + parser.tagName + \">\"\n    parser.state = S.TEXT\n    return\n  }\n  parser.tagName = tagName\n  var s = parser.tags.length\n  while (s --> t) {\n    var tag = parser.tag = parser.tags.pop()\n    parser.tagName = parser.tag.name\n    emitNode(parser, \"onclosetag\", parser.tagName)\n\n    var x = {}\n    for (var i in tag.ns) x[i] = tag.ns[i]\n\n    var parent = parser.tags[parser.tags.length - 1] || parser\n    if (parser.opt.xmlns && tag.ns !== parent.ns) {\n      // remove namespace bindings introduced by tag\n      Object.keys(tag.ns).forEach(function (p) {\n        var n = tag.ns[p]\n        emitNode(parser, \"onclosenamespace\", { prefix: p, uri: n })\n      })\n    }\n  }\n  if (t === 0) parser.closedRoot = true\n  parser.tagName = parser.attribValue = parser.attribName = \"\"\n  parser.attribList.length = 0\n  parser.state = S.TEXT\n}\n\nfunction parseEntity (parser) {\n  var entity = parser.entity\n    , entityLC = entity.toLowerCase()\n    , num\n    , numStr = \"\"\n  if (parser.ENTITIES[entity])\n    return parser.ENTITIES[entity]\n  if (parser.ENTITIES[entityLC])\n    return parser.ENTITIES[entityLC]\n  entity = entityLC\n  if (entity.charAt(0) === \"#\") {\n    if (entity.charAt(1) === \"x\") {\n      entity = entity.slice(2)\n      num = parseInt(entity, 16)\n      numStr = num.toString(16)\n    } else {\n      entity = entity.slice(1)\n      num = parseInt(entity, 10)\n      numStr = num.toString(10)\n    }\n  }\n  entity = entity.replace(/^0+/, \"\")\n  if (numStr.toLowerCase() !== entity) {\n    strictFail(parser, \"Invalid character entity\")\n    return \"&\"+parser.entity + \";\"\n  }\n\n  return String.fromCodePoint(num)\n}\n\nfunction write (chunk) {\n  var parser = this\n  if (this.error) throw this.error\n  if (parser.closed) return error(parser,\n    \"Cannot write after close. Assign an onready handler.\")\n  if (chunk === null) return end(parser)\n  var i = 0, c = \"\"\n  while (parser.c = c = chunk.charAt(i++)) {\n    if (parser.trackPosition) {\n      parser.position ++\n      if (c === \"\\n\") {\n        parser.line ++\n        parser.column = 0\n      } else parser.column ++\n    }\n    switch (parser.state) {\n\n      case S.BEGIN:\n        if (c === \"<\") {\n          parser.state = S.OPEN_WAKA\n          parser.startTagPosition = parser.position\n        } else if (not(whitespace,c)) {\n          // have to process this as a text node.\n          // weird, but happens.\n          strictFail(parser, \"Non-whitespace before first tag.\")\n          parser.textNode = c\n          parser.state = S.TEXT\n        }\n      continue\n\n      case S.TEXT:\n        if (parser.sawRoot && !parser.closedRoot) {\n          var starti = i-1\n          while (c && c!==\"<\" && c!==\"&\") {\n            c = chunk.charAt(i++)\n            if (c && parser.trackPosition) {\n              parser.position ++\n              if (c === \"\\n\") {\n                parser.line ++\n                parser.column = 0\n              } else parser.column ++\n            }\n          }\n          parser.textNode += chunk.substring(starti, i-1)\n        }\n        if (c === \"<\") {\n          parser.state = S.OPEN_WAKA\n          parser.startTagPosition = parser.position\n        } else {\n          if (not(whitespace, c) && (!parser.sawRoot || parser.closedRoot))\n            strictFail(parser, \"Text data outside of root node.\")\n          if (c === \"&\") parser.state = S.TEXT_ENTITY\n          else parser.textNode += c\n        }\n      continue\n\n      case S.SCRIPT:\n        // only non-strict\n        if (c === \"<\") {\n          parser.state = S.SCRIPT_ENDING\n        } else parser.script += c\n      continue\n\n      case S.SCRIPT_ENDING:\n        if (c === \"/\") {\n          parser.state = S.CLOSE_TAG\n        } else {\n          parser.script += \"<\" + c\n          parser.state = S.SCRIPT\n        }\n      continue\n\n      case S.OPEN_WAKA:\n        // either a /, ?, !, or text is coming next.\n        if (c === \"!\") {\n          parser.state = S.SGML_DECL\n          parser.sgmlDecl = \"\"\n        } else if (is(whitespace, c)) {\n          // wait for it...\n        } else if (is(nameStart,c)) {\n          parser.state = S.OPEN_TAG\n          parser.tagName = c\n        } else if (c === \"/\") {\n          parser.state = S.CLOSE_TAG\n          parser.tagName = \"\"\n        } else if (c === \"?\") {\n          parser.state = S.PROC_INST\n          parser.procInstName = parser.procInstBody = \"\"\n        } else {\n          strictFail(parser, \"Unencoded <\")\n          // if there was some whitespace, then add that in.\n          if (parser.startTagPosition + 1 < parser.position) {\n            var pad = parser.position - parser.startTagPosition\n            c = new Array(pad).join(\" \") + c\n          }\n          parser.textNode += \"<\" + c\n          parser.state = S.TEXT\n        }\n      continue\n\n      case S.SGML_DECL:\n        if ((parser.sgmlDecl+c).toUpperCase() === CDATA) {\n          emitNode(parser, \"onopencdata\")\n          parser.state = S.CDATA\n          parser.sgmlDecl = \"\"\n          parser.cdata = \"\"\n        } else if (parser.sgmlDecl+c === \"--\") {\n          parser.state = S.COMMENT\n          parser.comment = \"\"\n          parser.sgmlDecl = \"\"\n        } else if ((parser.sgmlDecl+c).toUpperCase() === DOCTYPE) {\n          parser.state = S.DOCTYPE\n          if (parser.doctype || parser.sawRoot) strictFail(parser,\n            \"Inappropriately located doctype declaration\")\n          parser.doctype = \"\"\n          parser.sgmlDecl = \"\"\n        } else if (c === \">\") {\n          emitNode(parser, \"onsgmldeclaration\", parser.sgmlDecl)\n          parser.sgmlDecl = \"\"\n          parser.state = S.TEXT\n        } else if (is(quote, c)) {\n          parser.state = S.SGML_DECL_QUOTED\n          parser.sgmlDecl += c\n        } else parser.sgmlDecl += c\n      continue\n\n      case S.SGML_DECL_QUOTED:\n        if (c === parser.q) {\n          parser.state = S.SGML_DECL\n          parser.q = \"\"\n        }\n        parser.sgmlDecl += c\n      continue\n\n      case S.DOCTYPE:\n        if (c === \">\") {\n          parser.state = S.TEXT\n          emitNode(parser, \"ondoctype\", parser.doctype)\n          parser.doctype = true // just remember that we saw it.\n        } else {\n          parser.doctype += c\n          if (c === \"[\") parser.state = S.DOCTYPE_DTD\n          else if (is(quote, c)) {\n            parser.state = S.DOCTYPE_QUOTED\n            parser.q = c\n          }\n        }\n      continue\n\n      case S.DOCTYPE_QUOTED:\n        parser.doctype += c\n        if (c === parser.q) {\n          parser.q = \"\"\n          parser.state = S.DOCTYPE\n        }\n      continue\n\n      case S.DOCTYPE_DTD:\n        parser.doctype += c\n        if (c === \"]\") parser.state = S.DOCTYPE\n        else if (is(quote,c)) {\n          parser.state = S.DOCTYPE_DTD_QUOTED\n          parser.q = c\n        }\n      continue\n\n      case S.DOCTYPE_DTD_QUOTED:\n        parser.doctype += c\n        if (c === parser.q) {\n          parser.state = S.DOCTYPE_DTD\n          parser.q = \"\"\n        }\n      continue\n\n      case S.COMMENT:\n        if (c === \"-\") parser.state = S.COMMENT_ENDING\n        else parser.comment += c\n      continue\n\n      case S.COMMENT_ENDING:\n        if (c === \"-\") {\n          parser.state = S.COMMENT_ENDED\n          parser.comment = textopts(parser.opt, parser.comment)\n          if (parser.comment) emitNode(parser, \"oncomment\", parser.comment)\n          parser.comment = \"\"\n        } else {\n          parser.comment += \"-\" + c\n          parser.state = S.COMMENT\n        }\n      continue\n\n      case S.COMMENT_ENDED:\n        if (c !== \">\") {\n          strictFail(parser, \"Malformed comment\")\n          // allow <!-- blah -- bloo --> in non-strict mode,\n          // which is a comment of \" blah -- bloo \"\n          parser.comment += \"--\" + c\n          parser.state = S.COMMENT\n        } else parser.state = S.TEXT\n      continue\n\n      case S.CDATA:\n        if (c === \"]\") parser.state = S.CDATA_ENDING\n        else parser.cdata += c\n      continue\n\n      case S.CDATA_ENDING:\n        if (c === \"]\") parser.state = S.CDATA_ENDING_2\n        else {\n          parser.cdata += \"]\" + c\n          parser.state = S.CDATA\n        }\n      continue\n\n      case S.CDATA_ENDING_2:\n        if (c === \">\") {\n          if (parser.cdata) emitNode(parser, \"oncdata\", parser.cdata)\n          emitNode(parser, \"onclosecdata\")\n          parser.cdata = \"\"\n          parser.state = S.TEXT\n        } else if (c === \"]\") {\n          parser.cdata += \"]\"\n        } else {\n          parser.cdata += \"]]\" + c\n          parser.state = S.CDATA\n        }\n      continue\n\n      case S.PROC_INST:\n        if (c === \"?\") parser.state = S.PROC_INST_ENDING\n        else if (is(whitespace, c)) parser.state = S.PROC_INST_BODY\n        else parser.procInstName += c\n      continue\n\n      case S.PROC_INST_BODY:\n        if (!parser.procInstBody && is(whitespace, c)) continue\n        else if (c === \"?\") parser.state = S.PROC_INST_ENDING\n        else parser.procInstBody += c\n      continue\n\n      case S.PROC_INST_ENDING:\n        if (c === \">\") {\n          emitNode(parser, \"onprocessinginstruction\", {\n            name : parser.procInstName,\n            body : parser.procInstBody\n          })\n          parser.procInstName = parser.procInstBody = \"\"\n          parser.state = S.TEXT\n        } else {\n          parser.procInstBody += \"?\" + c\n          parser.state = S.PROC_INST_BODY\n        }\n      continue\n\n      case S.OPEN_TAG:\n        if (is(nameBody, c)) parser.tagName += c\n        else {\n          newTag(parser)\n          if (c === \">\") openTag(parser)\n          else if (c === \"/\") parser.state = S.OPEN_TAG_SLASH\n          else {\n            if (not(whitespace, c)) strictFail(\n              parser, \"Invalid character in tag name\")\n            parser.state = S.ATTRIB\n          }\n        }\n      continue\n\n      case S.OPEN_TAG_SLASH:\n        if (c === \">\") {\n          openTag(parser, true)\n          closeTag(parser)\n        } else {\n          strictFail(parser, \"Forward-slash in opening tag not followed by >\")\n          parser.state = S.ATTRIB\n        }\n      continue\n\n      case S.ATTRIB:\n        // haven't read the attribute name yet.\n        if (is(whitespace, c)) continue\n        else if (c === \">\") openTag(parser)\n        else if (c === \"/\") parser.state = S.OPEN_TAG_SLASH\n        else if (is(nameStart, c)) {\n          parser.attribName = c\n          parser.attribValue = \"\"\n          parser.state = S.ATTRIB_NAME\n        } else strictFail(parser, \"Invalid attribute name\")\n      continue\n\n      case S.ATTRIB_NAME:\n        if (c === \"=\") parser.state = S.ATTRIB_VALUE\n        else if (c === \">\") {\n          strictFail(parser, \"Attribute without value\")\n          parser.attribValue = parser.attribName\n          attrib(parser)\n          openTag(parser)\n        }\n        else if (is(whitespace, c)) parser.state = S.ATTRIB_NAME_SAW_WHITE\n        else if (is(nameBody, c)) parser.attribName += c\n        else strictFail(parser, \"Invalid attribute name\")\n      continue\n\n      case S.ATTRIB_NAME_SAW_WHITE:\n        if (c === \"=\") parser.state = S.ATTRIB_VALUE\n        else if (is(whitespace, c)) continue\n        else {\n          strictFail(parser, \"Attribute without value\")\n          parser.tag.attributes[parser.attribName] = \"\"\n          parser.attribValue = \"\"\n          emitNode(parser, \"onattribute\",\n                   { name : parser.attribName, value : \"\" })\n          parser.attribName = \"\"\n          if (c === \">\") openTag(parser)\n          else if (is(nameStart, c)) {\n            parser.attribName = c\n            parser.state = S.ATTRIB_NAME\n          } else {\n            strictFail(parser, \"Invalid attribute name\")\n            parser.state = S.ATTRIB\n          }\n        }\n      continue\n\n      case S.ATTRIB_VALUE:\n        if (is(whitespace, c)) continue\n        else if (is(quote, c)) {\n          parser.q = c\n          parser.state = S.ATTRIB_VALUE_QUOTED\n        } else {\n          strictFail(parser, \"Unquoted attribute value\")\n          parser.state = S.ATTRIB_VALUE_UNQUOTED\n          parser.attribValue = c\n        }\n      continue\n\n      case S.ATTRIB_VALUE_QUOTED:\n        if (c !== parser.q) {\n          if (c === \"&\") parser.state = S.ATTRIB_VALUE_ENTITY_Q\n          else parser.attribValue += c\n          continue\n        }\n        attrib(parser)\n        parser.q = \"\"\n        parser.state = S.ATTRIB_VALUE_CLOSED\n      continue\n\n      case S.ATTRIB_VALUE_CLOSED:\n        if (is(whitespace, c)) {\n          parser.state = S.ATTRIB\n        } else if (c === \">\") openTag(parser)\n        else if (c === \"/\") parser.state = S.OPEN_TAG_SLASH\n        else if (is(nameStart, c)) {\n          strictFail(parser, \"No whitespace between attributes\")\n          parser.attribName = c\n          parser.attribValue = \"\"\n          parser.state = S.ATTRIB_NAME\n        } else strictFail(parser, \"Invalid attribute name\")\n      continue\n\n      case S.ATTRIB_VALUE_UNQUOTED:\n        if (not(attribEnd,c)) {\n          if (c === \"&\") parser.state = S.ATTRIB_VALUE_ENTITY_U\n          else parser.attribValue += c\n          continue\n        }\n        attrib(parser)\n        if (c === \">\") openTag(parser)\n        else parser.state = S.ATTRIB\n      continue\n\n      case S.CLOSE_TAG:\n        if (!parser.tagName) {\n          if (is(whitespace, c)) continue\n          else if (not(nameStart, c)) {\n            if (parser.script) {\n              parser.script += \"</\" + c\n              parser.state = S.SCRIPT\n            } else {\n              strictFail(parser, \"Invalid tagname in closing tag.\")\n            }\n          } else parser.tagName = c\n        }\n        else if (c === \">\") closeTag(parser)\n        else if (is(nameBody, c)) parser.tagName += c\n        else if (parser.script) {\n          parser.script += \"</\" + parser.tagName\n          parser.tagName = \"\"\n          parser.state = S.SCRIPT\n        } else {\n          if (not(whitespace, c)) strictFail(parser,\n            \"Invalid tagname in closing tag\")\n          parser.state = S.CLOSE_TAG_SAW_WHITE\n        }\n      continue\n\n      case S.CLOSE_TAG_SAW_WHITE:\n        if (is(whitespace, c)) continue\n        if (c === \">\") closeTag(parser)\n        else strictFail(parser, \"Invalid characters in closing tag\")\n      continue\n\n      case S.TEXT_ENTITY:\n      case S.ATTRIB_VALUE_ENTITY_Q:\n      case S.ATTRIB_VALUE_ENTITY_U:\n        switch(parser.state) {\n          case S.TEXT_ENTITY:\n            var returnState = S.TEXT, buffer = \"textNode\"\n          break\n\n          case S.ATTRIB_VALUE_ENTITY_Q:\n            var returnState = S.ATTRIB_VALUE_QUOTED, buffer = \"attribValue\"\n          break\n\n          case S.ATTRIB_VALUE_ENTITY_U:\n            var returnState = S.ATTRIB_VALUE_UNQUOTED, buffer = \"attribValue\"\n          break\n        }\n        if (c === \";\") {\n          parser[buffer] += parseEntity(parser)\n          parser.entity = \"\"\n          parser.state = returnState\n        }\n        else if (is(entity, c)) parser.entity += c\n        else {\n          strictFail(parser, \"Invalid character entity\")\n          parser[buffer] += \"&\" + parser.entity + c\n          parser.entity = \"\"\n          parser.state = returnState\n        }\n      continue\n\n      default:\n        throw new Error(parser, \"Unknown state: \" + parser.state)\n    }\n  } // while\n  // cdata blocks can get very big under normal conditions. emit and move on.\n  // if (parser.state === S.CDATA && parser.cdata) {\n  //   emitNode(parser, \"oncdata\", parser.cdata)\n  //   parser.cdata = \"\"\n  // }\n  if (parser.position >= parser.bufferCheckPosition) checkBufferLength(parser)\n  return parser\n}\n\n/*! http://mths.be/fromcodepoint v0.1.0 by @mathias */\nif (!String.fromCodePoint) {\n        (function() {\n                var stringFromCharCode = String.fromCharCode;\n                var floor = Math.floor;\n                var fromCodePoint = function() {\n                        var MAX_SIZE = 0x4000;\n                        var codeUnits = [];\n                        var highSurrogate;\n                        var lowSurrogate;\n                        var index = -1;\n                        var length = arguments.length;\n                        if (!length) {\n                                return '';\n                        }\n                        var result = '';\n                        while (++index < length) {\n                                var codePoint = Number(arguments[index]);\n                                if (\n                                        !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n                                        codePoint < 0 || // not a valid Unicode code point\n                                        codePoint > 0x10FFFF || // not a valid Unicode code point\n                                        floor(codePoint) != codePoint // not an integer\n                                ) {\n                                        throw RangeError('Invalid code point: ' + codePoint);\n                                }\n                                if (codePoint <= 0xFFFF) { // BMP code point\n                                        codeUnits.push(codePoint);\n                                } else { // Astral code point; split in surrogate halves\n                                        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n                                        codePoint -= 0x10000;\n                                        highSurrogate = (codePoint >> 10) + 0xD800;\n                                        lowSurrogate = (codePoint % 0x400) + 0xDC00;\n                                        codeUnits.push(highSurrogate, lowSurrogate);\n                                }\n                                if (index + 1 == length || codeUnits.length > MAX_SIZE) {\n                                        result += stringFromCharCode.apply(null, codeUnits);\n                                        codeUnits.length = 0;\n                                }\n                        }\n                        return result;\n                };\n                if (Object.defineProperty) {\n                        Object.defineProperty(String, 'fromCodePoint', {\n                                'value': fromCodePoint,\n                                'configurable': true,\n                                'writable': true\n                        });\n                } else {\n                        String.fromCodePoint = fromCodePoint;\n                }\n        }());\n}\n\n})(typeof exports === \"undefined\" ? sax = {} : exports);\n\n}).call(this,require(\"buffer\").Buffer)","(function (global){\n\nvar rng;\n\nif (global.crypto && crypto.getRandomValues) {\n  // WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto\n  // Moderately fast, high quality\n  var _rnds8 = new Uint8Array(16);\n  rng = function whatwgRNG() {\n    crypto.getRandomValues(_rnds8);\n    return _rnds8;\n  };\n}\n\nif (!rng) {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var  _rnds = new Array(16);\n  rng = function() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      _rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return _rnds;\n  };\n}\n\nmodule.exports = rng;\n\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})","//     uuid.js\n//\n//     Copyright (c) 2010-2012 Robert Kieffer\n//     MIT License - http://opensource.org/licenses/mit-license.php\n\n// Unique ID creation requires a high quality random # generator.  We feature\n// detect to determine the best RNG source, normalizing to a function that\n// returns 128-bits of randomness, since that's what's usually required\nvar _rng = require('./rng');\n\n// Maps for number <-> hex string conversion\nvar _byteToHex = [];\nvar _hexToByte = {};\nfor (var i = 0; i < 256; i++) {\n  _byteToHex[i] = (i + 0x100).toString(16).substr(1);\n  _hexToByte[_byteToHex[i]] = i;\n}\n\n// **`parse()` - Parse a UUID into it's component bytes**\nfunction parse(s, buf, offset) {\n  var i = (buf && offset) || 0, ii = 0;\n\n  buf = buf || [];\n  s.toLowerCase().replace(/[0-9a-f]{2}/g, function(oct) {\n    if (ii < 16) { // Don't overflow!\n      buf[i + ii++] = _hexToByte[oct];\n    }\n  });\n\n  // Zero out remaining bytes if string was short\n  while (ii < 16) {\n    buf[i + ii++] = 0;\n  }\n\n  return buf;\n}\n\n// **`unparse()` - Convert UUID byte array (ala parse()) into a string**\nfunction unparse(buf, offset) {\n  var i = offset || 0, bth = _byteToHex;\n  return  bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]];\n}\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\n// random #'s we need to init node and clockseq\nvar _seedBytes = _rng();\n\n// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\nvar _nodeId = [\n  _seedBytes[0] | 0x01,\n  _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]\n];\n\n// Per 4.2.2, randomize (14 bit) clockseq\nvar _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;\n\n// Previous uuid creation time\nvar _lastMSecs = 0, _lastNSecs = 0;\n\n// See https://github.com/broofa/node-uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  var node = options.node || _nodeId;\n  for (var n = 0; n < 6; n++) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : unparse(b);\n}\n\n// **`v4()` - Generate random UUID**\n\n// See https://github.com/broofa/node-uuid for API details\nfunction v4(options, buf, offset) {\n  // Deprecated - 'format' argument, as supported in v1.2\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options == 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || _rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ii++) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || unparse(rnds);\n}\n\n// Export public API\nvar uuid = v4;\nuuid.v1 = v1;\nuuid.v4 = v4;\nuuid.parse = parse;\nuuid.unparse = unparse;\n\nmodule.exports = uuid;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * @class\n */\nfunction AccountStatement() {\n}\n\n/**\n * The currency code.\n *\n * @return {String} The currency code.\n * @see java.util.Currency#getCurrencyCode()\n */\nAccountStatement.prototype.getCurrencyCode = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The transaction list.\n *\n * @return {TransactionList} The transaction list.\n */\nAccountStatement.prototype.getTransactionList = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The ledger balance.\n *\n * @return {BalanceInfo} The ledger balance.\n */\nAccountStatement.prototype.getLedgerBalance = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The available balance.\n *\n * @return {BalanceInfo} The available balance.\n */\nAccountStatement.prototype.getAvailableBalance = function() { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = AccountStatement;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * @class\n */\nfunction BankAccount() {\n}\n\n/**\n * The details of the account.\n *\n * @return {BankAccountDetails} The details of the account.\n */\nBankAccount.prototype.getDetails = function() { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = BankAccount;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * @class\n */\nfunction CreditCardAccount() {\n}\n\n/**\n * The details of the credit card account.\n *\n * @return {CreditCardAccountDetails} The details of the credit card account.\n */\nCreditCardAccount.prototype.getDetails = function() { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = CreditCardAccount;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * @class\n */\nfunction FinancialInstitution() {\n  throw new Error(\"interface\");\n}\n\n/**\n * The financial institution data defining this FI.\n *\n * @return {Promise<FinancialInstitutionData>} The financial institution data.\n */\nFinancialInstitution.prototype.getData = function() { throw new Error(\"not implemented\"); };\n\n/**\n * Read the specified financial institution profile. Implies a network call.\n *\n * @return {Promise<FinancialInstitutionProfile>} The profile.\n * @throws OFXException if something goes awry.\n */\nFinancialInstitution.prototype.readProfile = function() { throw new Error(\"not implemented\"); };\n\n/**\n * Read the account profiles of the specified user.\n *\n * @param {String} username The username.\n * @param {String} password The password.\n * @return {Promise<AccountProfile[]>} The profiles.\n */\nFinancialInstitution.prototype.readAccountProfiles = function(/*username, password*/) { throw new Error(\"not implemented\"); };\n\n/**\n * Load a bank account.\n *\n * @param {BankAccountDetails} details The bank account details.\n * @param {String} username The username.\n * @param {String} password The password.\n * @return {BankAccount} The bank account.\n */\nFinancialInstitution.prototype.loadBankAccount = function(/*details, username, password*/) { throw new Error(\"not implemented\"); };\n\n/**\n * Load a credit card account.\n *\n * @param {CreditCardAccountDetails} details The credit card account details.\n * @param {String} username The username.\n * @param {String} password The password.\n * @return {CreditCardAccount} The credit card account.\n */\nFinancialInstitution.prototype.loadCreditCardAccount = function(/*details, username, password*/) { throw new Error(\"not implemented\"); };\n\n/**\n * Load an investment account.\n *\n * @param {InvestmentAccountDetails} details The investment account details.\n * @param {String} username The username.\n * @param {String} password The password.\n * @return {InvestmentAccount} The investment account.\n */\nFinancialInstitution.prototype.loadInvestmentAccount = function(/*details, username, password*/) { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = FinancialInstitution;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * A specific account at a financial institution.\n *\n * @class\n */\nfunction FinancialInstitutionAccount() {\n}\n\n/**\n * Read an account statement.\n *\n * @param {Date} start The start date of the statement.\n * @param {Date} end The end date of the statement.\n * @return {AccountStatement} The account statement.\n */\nFinancialInstitutionAccount.prototype.readStatement = function(/*start, end*/) { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = FinancialInstitutionAccount;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Interface for core FI data.  This is the base set of information\n * required in order to initiate a connection to an FI server.\n *\n * @class\n */\nfunction FinancialInstitutionData() {\n}\n\n/**\n * A unique id for this FI.\n *\n * @return {String} A unique id for this FI.\n */\nFinancialInstitutionData.prototype.getId = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The id of the FI.\n *\n * @return {String} The id of the FI.\n */\nFinancialInstitutionData.prototype.getFinancialInstitutionId = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The name of the FI.\n *\n * @return {String} The name of the FI.\n */\nFinancialInstitutionData.prototype.getName = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The OFX organization name.\n *\n * @return {String} The OFX organization name.\n */\nFinancialInstitutionData.prototype.getOrganization = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The URL to the OFX server for this institution.\n *\n * @return {URL} The URL to the OFX server for this institution.\n */\nFinancialInstitutionData.prototype.getOFXURL = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The broker id.\n *\n * @return {String} The broker id.\n */\nFinancialInstitutionData.prototype.getBrokerId = function() { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = FinancialInstitutionData;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * @class\n */\nfunction FinancialInstitutionProfile() {\n}\n\n/**\n * When this profile was last updated.\n *\n * @return {Date} When this profile was last updated.\n */\nFinancialInstitutionProfile.prototype.getLastUpdated = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The name of the financial institution.\n *\n * @return {String} The name of the financial institution.\n */\nFinancialInstitutionProfile.prototype.getFinancialInstitutionName = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The address of the financial institution.\n *\n * @return {String} The address of the financial institution.\n */\nFinancialInstitutionProfile.prototype.getAddress1 = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The address of the financial institution.\n *\n * @return {String} The address of the financial institution.\n */\nFinancialInstitutionProfile.prototype.getAddress2 = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The address of the financial institution.\n *\n * @return {String} The address of the financial institution.\n */\nFinancialInstitutionProfile.prototype.getAddress3 = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The city of the financial institution.\n *\n * @return {String} The city of the financial institution.\n */\nFinancialInstitutionProfile.prototype.getCity = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The state of this financial institution.\n *\n * @return {String} The state of this financial institution.\n */\nFinancialInstitutionProfile.prototype.getState = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The postal code of this financial institution.\n *\n * @return {String} The postal code of this financial institution.\n */\nFinancialInstitutionProfile.prototype.getZip = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The country code for this financial institution.\n *\n * @return {String} The country code for this financial institution.\n * @see java.util.Locale#getISO3Country()\n */\nFinancialInstitutionProfile.prototype.getCountry = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The phone number to customer service.\n *\n * @return {String} The phone number to customer service.\n */\nFinancialInstitutionProfile.prototype.getCustomerServicePhone = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The phone number to tech support.\n *\n * @return {String} The phone number to tech support.\n */\nFinancialInstitutionProfile.prototype.getTechnicalSupportPhone = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The fax number.\n *\n * @return {String} The fax number.\n */\nFinancialInstitutionProfile.prototype.getFax = function() { throw new Error(\"not implemented\"); };\n\n/**\n * URL for the financial institution.\n *\n * @return {String} URL for the financial institution.\n */\nFinancialInstitutionProfile.prototype.getSiteURL = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The email for this FI\n *\n * @return {String} The email for this FI\n */\nFinancialInstitutionProfile.prototype.getEmail = function() { throw new Error(\"not implemented\"); };\n\n/**\n * Get the message set profile for the specified message set and, optionally, the specified version.\n *\n * @param {MessageSetType} type The message set type for which to retrieve the profile.\n * @param {String} [version] The version for which to retrieve the profile.\n * @return {MessageSetProfile} The message set profile information, or null if the FI doesn't support the specified message set of the specified version.\n */\nFinancialInstitutionProfile.prototype.getMessageSetProfile = function(/*type, version*/) { throw new Error(\"not implemented\"); };\n\n/**\n * Get the signon profile for the specified message set.\n *\n * @param {MessageSetProfile} messageSet The message set.\n * @return {SignonProfile} The signon profile, or null if none was found.\n */\nFinancialInstitutionProfile.prototype.getSignonProfile = function(/*messageSet*/) { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = FinancialInstitutionProfile;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * @class\n */\nfunction InvestmentAccount() {\n}\n\n/**\n * Read an account statement.\n *\n * @param {Date} start The start date of the statement.\n * @param {Date} end The end date of the statement.\n * @throws OFXException if there's an error talking to the brokerage\n * @return {InvestmentStatementResponse} The account statement.\n */\nInvestmentAccount.prototype.readStatement = function(/*start, end*/) { throw new Error(\"not implemented\"); };\n\n/**\n * Reads a list of securities from the brokerage\n *\n * @param {SecurityRequest[]} securities the securities to read\n * @return {SecurityList} The security response containing the security infos\n * @throws OFXException if there's an error talking to the brokerage\n */\nInvestmentAccount.prototype.readSecurityList = function(/*securities*/) { throw new Error(\"not implemented\"); };\n\n/**\n * The details of the account.\n *\n * @return {InvestmentAccountDetails} The details of the account.\n */\nInvestmentAccount.prototype.getDetails = function() { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = InvestmentAccount;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../util/inherit\");\nvar OFXApplicationContext = require(\"./OFXApplicationContext\");\n\n/**\n * Default application context.\n * \n * @class\n */\nfunction DefaultApplicationContext (/*String*/ appId, /*String*/ appVersion) {\n\n  /**\n   * @name DefaultApplicationContext#appId\n   * @type String\n   * @access private\n   */\n  this.appId = appId;\n\n  /**\n   * @name DefaultApplicationContext#appVersion\n   * @type String\n   * @access private\n   */\n  this.appVersion = appVersion;\n}\n\ninherit(DefaultApplicationContext, \"implements\", OFXApplicationContext);\n\n\n\nDefaultApplicationContext.prototype.getAppId = function() {\n  return this.appId;\n};\n\n\nDefaultApplicationContext.prototype.getAppVersion = function() {\n  return this.appVersion;\n};\n\n\n\n\nmodule.exports = DefaultApplicationContext;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * The application context.\n *\n * @class\n */\nfunction OFXApplicationContext() {\n}\n\n/**\n * The current application id.\n *\n * @return {String} The current application id.\n */\nOFXApplicationContext.prototype.getAppId = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The application version.\n *\n * @return {String} The application version.\n */\nOFXApplicationContext.prototype.getAppVersion = function() { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = OFXApplicationContext;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar DefaultApplicationContext = require(\"./DefaultApplicationContext\");\n\n/**\n * @class\n */\nvar OFXApplicationContextHolder = {};\n\n\n/**\n * @name OFXApplicationContextHolder.CURRENT_CONTEXT\n * @type OFXApplicationContext\n */\nOFXApplicationContextHolder.CURRENT_CONTEXT = new DefaultApplicationContext(\"Money\", \"1600\"); //some apps fail unless you're Quicken or Money...\n//OFXApplicationContextHolder.CURRENT_CONTEXT = new DefaultApplicationContext(\"QWIN\", \"0900\"); //some apps fail unless you're Quicken or Money...\n\n\n\n\n/**\n * Get the current (thread-safe) context.\n *\n * @return {OFXApplicationContext} The thread-safe context.\n */\nOFXApplicationContextHolder.getCurrentContext = function() {\n  //todo: implement a strategy (perhaps for thread-local access or something)?\n  return OFXApplicationContextHolder.CURRENT_CONTEXT;\n};\n\n\n/**\n * Set the current context.\n *\n * @param {OFXApplicationContext} context The context.\n */\nOFXApplicationContextHolder.setCurrentContext = function(context) {\n  OFXApplicationContextHolder.CURRENT_CONTEXT = context;\n};\n\n\n\n\nmodule.exports = OFXApplicationContextHolder;\n","\"use strict\";\n\nmodule.exports = {\n  DefaultApplicationContext: require(\"./DefaultApplicationContext\"),\n  OFXApplicationContext: require(\"./OFXApplicationContext\"),\n  OFXApplicationContextHolder: require(\"./OFXApplicationContextHolder\"),\n};\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../util/inherit\");\n\nvar BankAccount = require(\"../BankAccount\");\nvar BaseAccountImpl = require(\"./BaseAccountImpl\");\nvar MessageSetType = require(\"../../domain/data/MessageSetType\");\nvar BankingRequestMessageSet = require(\"../../domain/data/banking/BankingRequestMessageSet\");\nvar BankStatementRequestTransaction = require(\"../../domain/data/banking/BankStatementRequestTransaction\");\nvar BankStatementRequest = require(\"../../domain/data/banking/BankStatementRequest\");\n\n/**\n * @class\n * @augments BaseAccountImpl\n */\nfunction BankingAccountImpl(/*BankAccountDetails*/ details, /*String*/ username, /*String*/ password, /*FinancialInstitutionImpl*/ institution) {\n  BaseAccountImpl.call(this, details, username, password, institution);\n}\n\ninherit(BankingAccountImpl, \"extends\", BaseAccountImpl);\ninherit(BankingAccountImpl, \"implements\", BankAccount);\n\n\n\nBankingAccountImpl.prototype.unwrapStatementResponse = function(/*ResponseEnvelope*/ response) {\n  var bankingSet = response.getMessageSet(MessageSetType.banking);\n  if (!bankingSet) {\n    throw new Error(\"No banking response message set.\");\n  }\n\n  var statementTransactionResponse = bankingSet.getStatementResponse();\n  if (!statementTransactionResponse) {\n    throw new Error(\"No banking statement response transaction.\");\n  }\n\n  var statement = statementTransactionResponse.getMessage();\n  if (!statement) {\n    throw new Error(\"No banking statement in the transaction.\");\n  }\n  \n  return statement;\n};\n\n\nBankingAccountImpl.prototype.createRequestMessageSet = function(/*TransactionWrappedRequestMessage*/ transaction) {\n  var bankingRequest = new BankingRequestMessageSet();\n  bankingRequest.setStatementRequest(transaction);\n  return bankingRequest;\n};\n\n\nBankingAccountImpl.prototype.createTransaction = function() {\n  return new BankStatementRequestTransaction();\n};\n\n\nBankingAccountImpl.prototype.createStatementRequest = function(/*BankAccountDetails*/ details, /*StatementRange*/ range) {\n  var bankRequest = new BankStatementRequest();\n  bankRequest.setAccount(details);\n  bankRequest.setStatementRange(range);\n  return bankRequest;\n};\n\n\n\n\nmodule.exports = BankingAccountImpl;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../util/inherit\");\n\nvar FinancialInstitutionAccount = require(\"../FinancialInstitutionAccount\");\nvar BankAccountDetails = require(\"../../domain/data/banking/BankAccountDetails\");\nvar StatementRange = require(\"../../domain/data/common/StatementRange\");\nvar CreditCardAccountDetails = require(\"../../domain/data/creditcard/CreditCardAccountDetails\");\nvar InvestmentAccountDetails = require(\"../../domain/data/investment/accounts/InvestmentAccountDetails\");\nvar MessageSetType = require(\"../../domain/data/MessageSetType\");\n\n\n/**\n * Base account implementation. Supports banking and credit card accounts.\n *\n * @class\n */\nfunction BaseAccountImpl(/*D*/ details, /*String*/ username, /*String*/ password, /*FinancialInstitutionImpl*/ institution) {\n\n  /**\n   * @name BaseAccountImpl#details\n   * @access private\n   */\n  this.details = details;\n\n  /**\n   * @name BaseAccountImpl#messageType\n   * @type MessageSetType\n   * @access private\n   */\n  this.messageType = this.getMessageSetType(details);\n\n  /**\n   * @name BaseAccountImpl#username\n   * @type String\n   * @access private\n   */\n  this.username = username;\n\n  /**\n   * @name BaseAccountImpl#password\n   * @type String\n   * @access private\n   */\n  this.password = password;\n\n  /**\n   * @name BaseAccountImpl#institution\n   * @type FinancialInstitutionImpl\n   * @access private\n   */\n  this.institution = institution;\n}\n\ninherit(BaseAccountImpl, \"implements\", FinancialInstitutionAccount);\n\n\n\n/**\n * Get the message set type of the specified details.\n *\n * @param details The details.\n * @return {MessageSetType} The message set type.\n */\nBaseAccountImpl.prototype.getMessageSetType = function(details) {\n  var messageType;\n  if (details instanceof BankAccountDetails) {\n    messageType = MessageSetType.banking;\n  }\n  else if (this.getDetails() instanceof CreditCardAccountDetails) {\n    messageType = MessageSetType.creditcard;\n  }\n  else if (this.getDetails() instanceof InvestmentAccountDetails) {\n    messageType = MessageSetType.investment;\n  }\n  else {\n    throw new Error(\"Illegal details: \" + this.details.constructor.name);\n  }\n  return messageType;\n};\n\n\nBaseAccountImpl.prototype.readStatement = function(/*Date*/ start, /*Date*/ end) {\n  var range = new StatementRange();\n  range.setIncludeTransactions(true);\n  range.setStart(start);\n  range.setEnd(end);\n\n  var request = this.institution.createAuthenticatedRequest(this.username, this.password);\n  var requestTransaction = this.createTransaction();\n  requestTransaction.setWrappedMessage(this.createStatementRequest(this.getDetails(), range));\n  request.getMessageSets().push(this.createRequestMessageSet(requestTransaction));\n\n  var response = this.institution.sendRequest(request);\n  this.institution.doGeneralValidationChecks(request, response);\n\n  return this.unwrapStatementResponse(response);\n};\n\n\n/**\n * Create a request message set from the specified transaction.\n *\n * @param {TransactionWrappedRequestMessage} transaction The transaction.\n * @return {RequestMessageSet} The request message set.\n */\nBaseAccountImpl.prototype.createRequestMessageSet = function(/*transaction*/) { throw new Error(\"not implemented\"); };\n\n/**\n * Create a transaction.\n *\n * @return {TransactionWrappedRequestMessage} The transaction.\n */\nBaseAccountImpl.prototype.createTransaction = function() { throw new Error(\"not implemented\"); };\n\n/**\n * Create a statement request.\n *\n * @param details The details.\n * @param {StatementRange} range the range.\n * @return {StatementRequest} The statement request.\n */\nBaseAccountImpl.prototype.createStatementRequest = function(/*details, range*/) { throw new Error(\"not implemented\"); };\n\n/**\n * The details of this account.\n *\n * @return The details of this account.\n */\nBaseAccountImpl.prototype.getDetails = function() {\n  return this.details;\n};\n\n/**\n * The message set type.\n *\n * @return {MessageSetType} The message set type.\n */\nBaseAccountImpl.prototype.getMessageType = function() {\n  return this.messageType;\n};\n\n\n\n\nmodule.exports = BaseAccountImpl;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../util/inherit\");\n\nvar FinancialInstitutionData = require(\"../FinancialInstitutionData\");\n\n/**\n * Base class for FI data.\n *\n * @class\n */\nfunction BaseFinancialInstitutionData (/*string*/ id) {\n\n  /**\n   * @name BaseFinancialInstitutionData#id\n   * @type String\n   * @access private\n   */\n  this.id = id;\n\n  /**\n   * @name BaseFinancialInstitutionData#fid\n   * @type String\n   * @access private\n   */\n  this.fid = null;\n\n  /**\n   * @name BaseFinancialInstitutionData#name\n   * @type String\n   * @access private\n   */\n  this.name = null;\n\n  /**\n   * @name BaseFinancialInstitutionData#organization\n   * @type String\n   * @access private\n   */\n  this.organization = null;\n\n  /**\n   * @name BaseFinancialInstitutionData#ofxUrl\n   * @type URL\n   * @access private\n   */\n  this.ofxUrl = null;\n\n  /**\n   * @name BaseFinancialInstitutionData#brokerId\n   * @type String\n   * @access private\n   */\n  this.brokerId = null;\n}\n\ninherit(BaseFinancialInstitutionData, \"implements\", FinancialInstitutionData);\n\n\n\nBaseFinancialInstitutionData.prototype.getId = function() {\n  return this.id;\n};\n\n\nBaseFinancialInstitutionData.prototype.setId = function(/*String*/ id) {\n  this.id = id;\n};\n\n\nBaseFinancialInstitutionData.prototype.getFinancialInstitutionId = function() {\n  return this.fid;\n};\n\n\nBaseFinancialInstitutionData.prototype.setFinancialInstitutionId = function(/*String*/ id) {\n  this.fid = id;\n};\n\n\nBaseFinancialInstitutionData.prototype.getName = function() {\n  return this.name;\n};\n\n\nBaseFinancialInstitutionData.prototype.setName = function(/*String*/ name) {\n  this.name = name;\n};\n\n\nBaseFinancialInstitutionData.prototype.getOrganization = function() {\n  return this.organization;\n};\n\n\nBaseFinancialInstitutionData.prototype.setOrganization = function(/*String*/ organization) {\n  this.organization = organization;\n};\n\n\nBaseFinancialInstitutionData.prototype.getOFXURL = function() {\n  return this.ofxUrl;\n};\n\n\nBaseFinancialInstitutionData.prototype.setOFXURL = function(/*URL*/ OFXURL) {\n  this.ofxUrl = OFXURL;\n};\n\n\nBaseFinancialInstitutionData.prototype.getBrokerId = function() {\n  return this.brokerId;\n};\n\n\nBaseFinancialInstitutionData.prototype.setBrokerId = function(/*String*/ brokerId) {\n  this.brokerId = brokerId;\n};\n\n\n\n\nmodule.exports = BaseFinancialInstitutionData;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../util/inherit\");\n\nvar CreditCardAccount = require(\"../CreditCardAccount\");\nvar BaseAccountImpl = require(\"./BaseAccountImpl\");\nvar MessageSetType = require(\"../../domain/data/MessageSetType\");\nvar CreditCardRequestMessageSet = require(\"../../domain/data/creditcard/CreditCardRequestMessageSet\");\nvar CreditCardStatementRequestTransaction = require(\"../../domain/data/creditcard/CreditCardStatementRequestTransaction\");\nvar CreditCardStatementRequest = require(\"../../domain/data/creditcard/CreditCardStatementRequest\");\n\n/**\n * @class\n */\nfunction CreditCardAccountImpl(/*CreditCardAccountDetails*/ details, /*String*/ username, /*String*/ password, /*FinancialInstitutionImpl*/ institution) {\n  BaseAccountImpl.call(this, details, username, password, institution);\n}\n\ninherit(CreditCardAccountImpl, \"extends\", BaseAccountImpl);\ninherit(CreditCardAccountImpl, \"implements\", CreditCardAccount);\n\n\n\n\nCreditCardAccountImpl.prototype.unwrapStatementResponse = function(/*ResponseEnvelope*/ response) {\n  var creditCardSet = response.getMessageSet(MessageSetType.creditcard);\n  if (!creditCardSet) {\n    throw new Error(\"No credit card response message set.\");\n  }\n\n  var statementTransactionResponse = creditCardSet.getStatementResponse();\n  if (!statementTransactionResponse) {\n    throw new Error(\"No credit card statement response transaction.\");\n  }\n\n  var statement = statementTransactionResponse.getMessage();\n  if (!statement) {\n    throw new Error(\"No credit card statement in the transaction.\");\n  }\n\n  return statement;\n};\n\n\nCreditCardAccountImpl.prototype.createRequestMessageSet = function(/*TransactionWrappedRequestMessage*/ transaction) {\n  var creditCardRequest = new CreditCardRequestMessageSet();\n  creditCardRequest.setStatementRequest(transaction);\n  return creditCardRequest;\n};\n\n\nCreditCardAccountImpl.prototype.createTransaction = function() {\n  return new CreditCardStatementRequestTransaction();\n};\n\n\nCreditCardAccountImpl.prototype.createStatementRequest = function(/*CreditCardAccountDetails*/ details, /*StatementRange*/ range) {\n  var bankRequest = new CreditCardStatementRequest();\n  bankRequest.setAccount(details);\n  bankRequest.setStatementRange(range);\n  return bankRequest;\n};\n\n\n\n\nmodule.exports = CreditCardAccountImpl;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../util/inherit\");\n\nvar OFXApplicationContextHolder = require(\"../context/OFXApplicationContextHolder\");\nvar Status = require(\"../../domain/data/common/Status\");\nvar StatusHolder = require(\"../../domain/data/common/StatusHolder\");\nvar SignonRequest = require(\"../../domain/data/signon/SignonRequest\");\nvar SignonRequestMessageSet = require(\"../../domain/data/signon/SignonRequestMessageSet\");\nvar FinancialInstitution = require(\"../../domain/data/signon/FinancialInstitution\");\nvar ProfileRequestMessageSet = require(\"../../domain/data/profile/ProfileRequestMessageSet\");\nvar SignupRequestMessageSet = require(\"../../domain/data/signup/SignupRequestMessageSet\");\nvar BankingAccountImpl = require(\"./BankingAccountImpl\");\nvar CreditCardAccountImpl = require(\"./CreditCardAccountImpl\");\nvar InvestmentAccountImpl = require(\"./InvestmentAccountImpl\");\nvar RequestEnvelope = require(\"../../domain/data/RequestEnvelope\");\nvar MessageSetType = require(\"../../domain/data/MessageSetType\");\nvar ApplicationSecurity = require(\"../../domain/data/ApplicationSecurity\");\nvar TransactionWrappedRequestMessage = require(\"../../domain/data/TransactionWrappedRequestMessage\");\nvar TransactionWrappedResponseMessage = require(\"../../domain/data/TransactionWrappedResponseMessage\");\nvar AccountInfoRequest = require(\"../../domain/data/signup/AccountInfoRequest\");\nvar AccountInfoRequestTransaction = require(\"../../domain/data/signup/AccountInfoRequestTransaction\");\nvar ProfileRequestTransaction = require(\"../../domain/data/profile/ProfileRequestTransaction\");\nvar ProfileRequest = require(\"../../domain/data/profile/ProfileRequest\");\n\n/**\n * Base implementation for the financial institution.\n *\n * @class\n */\nfunction FinancialInstitutionImpl (/*FinancialInstitutionData*/ data, /*OFXConnection*/ connection) {\n  if (!data) {\n    throw new Error(\"Data cannot be null\");\n  }\n  if (!connection) {\n    throw new Error(\"An OFX connection must be supplied\");\n  }\n\n  /**\n   * @name FinancialInstitutionImpl#connection\n   * @type OFXConnection\n   * @access private\n   */\n  this.connection = connection;\n\n  /**\n   * @name FinancialInstitutionImpl#data\n   * @type FinancialInstitutionData\n   * @access private\n   */\n  this.data = data;\n}\n\ninherit(FinancialInstitutionImpl, \"implements\", FinancialInstitution);\n\n\n\n// Inherited.\nFinancialInstitutionImpl.prototype.readProfile = function() {\n  var request = this.createAuthenticatedRequest(SignonRequest.ANONYMOUS_USER, SignonRequest.ANONYMOUS_USER);\n  var profileRequest = new ProfileRequestMessageSet();\n  profileRequest.setProfileRequest(this.createProfileTransaction());\n  request.getMessageSets().push(profileRequest);\n  var self = this;\n  return self.sendRequest(request, self.getData().getOFXURL())\n  .then(function(response) {\n    self.doGeneralValidationChecks(request, response);\n    return self.getProfile(response);\n  });\n};\n\n\n// Inherited.\nFinancialInstitutionImpl.prototype.readAccountProfiles = function(/*String*/ username, /*String*/ password) {\n  var request = this.createAuthenticatedRequest(username, password);\n  var signupRequest = new SignupRequestMessageSet();\n  signupRequest.setAccountInfoRequest(this.createAccountInfoTransaction());\n  request.getMessageSets().push(signupRequest);\n  var self = this;\n  return self.sendRequest(request, self.getData().getOFXURL())\n  .then(function(response) {\n    self.doGeneralValidationChecks(request, response);\n    return self.getAccountProfiles(response);\n  });\n};\n\n\n// Inherited.\nFinancialInstitutionImpl.prototype.loadBankAccount = function(/*BankAccountDetails*/ details, /*String*/ username, /*String*/ password) {\n  return new BankingAccountImpl(details, username, password, this);\n};\n\n\n// Inherited.\nFinancialInstitutionImpl.prototype.loadCreditCardAccount = function(/*CreditCardAccountDetails*/ details, /*String*/ username, /*String*/ password) {\n  return new CreditCardAccountImpl(details, username, password, this);\n};\n\n\n// Inherited\nFinancialInstitutionImpl.prototype.loadInvestmentAccount = function(/*InvestmentAccountDetails*/ details, /*String*/ username, /*String*/ password) {\n  return new InvestmentAccountImpl(details, username, password, this);\n};\n\n\n/**\n * Create an authenticated request envelope.\n *\n * @param {String} username The username.\n * @param {String} password The password.\n * @return {RequestEnvelope} The request envelope.\n */\nFinancialInstitutionImpl.prototype.createAuthenticatedRequest = function(username, password) {\n  var request = new RequestEnvelope();\n  var messageSets = [];\n  var signonRequest = new SignonRequestMessageSet();\n  signonRequest.setSignonRequest(this.createSignonRequest(username, password));\n  messageSets.push(signonRequest);\n  request.setMessageSets(messageSets);\n  return request;\n};\n\n\n/**\n * Send a request to a specific URL.\n *\n * @param {RequestEnvelope} request The request.\n * @param {URL} [url] The url.\n * @return {ResponseEnvelope} The request.\n */\nFinancialInstitutionImpl.prototype.sendRequest = function(request, url) {\n  url = url || this.getData().getOFXURL();\n  return this.getConnection().sendRequest(request, url);\n};\n\n\n/**\n * Open the specified response envelope and look for the profile.\n *\n * @param {ResponseEnvelope} response The response envelope.\n * @return {FinancialInstitutionProfile} The profile.\n */\nFinancialInstitutionImpl.prototype.getProfile = function(response) {\n\n  var profileSet = response.getMessageSet(MessageSetType.profile);\n  if (!profileSet) {\n    throw new Error(\"No profile response set.\");\n  }\n\n  var transactionResponse = profileSet.getProfileResponse();\n  if (!transactionResponse) {\n    throw new Error(\"No profile transaction wrapper.\");\n  }\n\n  var message = transactionResponse.getMessage();\n  if (!message) {\n    throw new Error(\"No profile message.\");\n  }\n  return message;\n};\n\n\n/**\n * General validation checks on the specified response.\n *\n * @param {RequestEnvelope} request The request.\n * @param {ResponseEnvelope} response Their response.\n * @throws OFXException Upon invalid response.\n */\nFinancialInstitutionImpl.prototype.doGeneralValidationChecks = function(request, response) {\n  if (response.getSecurity() != ApplicationSecurity.NONE) {\n    throw new Error(\"Unable to participate in \" + response.getSecurity() + \" security.\");\n  }\n\n  if (request.getUID() !== response.getUID() && response.getUID() != \"NONE\") { // \"NONE\" is not to spec but was found in the wild\n    throw new Error(\"Invalid transaction ID '\" + response.getUID() + \"' in response.  Expected: \" + response.getUID());\n  }\n\n  var messageSets = request.getMessageSets();\n  for (var messageSetsIdx=0; messageSetsIdx<messageSets.length; messageSetsIdx++) {\n    var requestSet = messageSets[messageSetsIdx];\n    var responseSet = response.getMessageSet(requestSet.getType());\n    if (!responseSet) {\n      throw new Error(\"No response for the \" + requestSet.getType() + \" request.\");\n    }\n\n    if (responseSet.getType() === MessageSetType.signon) {\n      var signonResponse = responseSet.getSignonResponse();\n\n      if (!signonResponse) {\n        throw new Error(\"No signon response.\");\n      }\n    }\n\n    var transactionIds = {};\n    var requestMessages = requestSet.getRequestMessages();\n    for (var requestMessagesIdx=0; requestMessagesIdx<requestMessages.length; requestMessages++) {\n      var requestMessage = requestMessages[requestMessagesIdx];\n      if (requestMessage instanceof TransactionWrappedRequestMessage) {\n        transactionIds[requestMessage.getUID()] = 1;\n      }\n    }\n\n    var responseMessages = responseSet.getResponseMessages();\n    for (var responseMessagesIdx=0; responseMessagesIdx<responseMessages.length; responseMessagesIdx++) {\n      var responseMessage = responseMessages[responseMessagesIdx];\n      if (responseMessage instanceof StatusHolder) {\n        this.validateStatus(responseMessage);\n      }\n\n      if (responseMessage instanceof TransactionWrappedResponseMessage) {\n        var uid = responseMessage.getUID();\n        if (!uid) {\n          throw new Error(\"Invalid response transaction: no UID.\");\n        }\n        else if (!(uid in transactionIds)) {\n          throw new Error(\"Response to an unknown transaction: \" + uid + \".\");\n        }\n        delete transactionIds[uid];\n      }\n    }\n\n    if (transactionIds.length > 0) {\n      throw new Error(\"No response to the following transactions: \" + transactionIds);\n    }\n  }\n};\n\n\n/**\n * Validate the status of the given status holder.\n *\n * @param {StatusHolder} statusHolder The status holder.\n */\nFinancialInstitutionImpl.prototype.validateStatus = function(statusHolder) {\n  var status = statusHolder.getStatus();\n  if (!status) {\n    throw new Error(\"Invalid OFX response: no status returned in the \" + statusHolder.getStatusHolderName() + \" response.\");\n  }\n\n  if (Status.KnownCode.SUCCESS !== status.getCode()) {\n    var message = status.getMessage();\n    if (!message) {\n      message = \"No response status code.\";\n\n      if (status.getCode()) {\n        message = status.getCode().getMessage();\n      }\n    }\n\n    throw new Error(status, \"Invalid \" + statusHolder.getStatusHolderName() + \": \" + message);\n  }\n};\n\n\n/**\n * Create a transaction message for a profile request.\n *\n * @return {ProfileRequestTransaction} The transaction message.\n */\nFinancialInstitutionImpl.prototype.createProfileTransaction = function() {\n  var profileTx = new ProfileRequestTransaction();\n  profileTx.setMessage(this.createProfileRequest());\n  return profileTx;\n};\n\n\n/**\n * Create a profile request.\n *\n * @return {ProfileRequest} The profile request.\n */\nFinancialInstitutionImpl.prototype.createProfileRequest = function() {\n  var profileRequest = new ProfileRequest();\n  profileRequest.setProfileLastUpdated(new Date(0));\n  return profileRequest;\n};\n\n\n/**\n * Create a sign-on request for the specified user.\n *\n * @param {String} username The username.\n * @param {String} password The password.\n * @return {SignonRequest} The signon request.\n */\nFinancialInstitutionImpl.prototype.createSignonRequest = function(username, password) {\n  var signonRequest = new SignonRequest();\n  signonRequest.setTimestamp(new Date());\n  var fi = new FinancialInstitution();\n  fi.setId(this.getData().getFinancialInstitutionId());\n  fi.setOrganization(this.getData().getOrganization());\n  signonRequest.setFinancialInstitution(fi);\n  signonRequest.setUserId(username);\n  signonRequest.setPassword(password);\n  signonRequest.setApplicationId(OFXApplicationContextHolder.getCurrentContext().getAppId());\n  signonRequest.setApplicationVersion(OFXApplicationContextHolder.getCurrentContext().getAppVersion());\n  return signonRequest;\n};\n\n\n/**\n * Create a transaction for an account info request.\n *\n * @return {AccountInfoRequestTransaction} The transaction.\n */\nFinancialInstitutionImpl.prototype.createAccountInfoTransaction = function() {\n  var transaction = new AccountInfoRequestTransaction();\n  transaction.setMessage(this.createAccountInfoRequest());\n  return transaction;\n};\n\n\n/**\n * Create an account info request.\n *\n * @return {AccountInfoRequest} The account info request.\n */\nFinancialInstitutionImpl.prototype.createAccountInfoRequest = function() {\n  return new AccountInfoRequest();\n};\n\n\n/**\n * Get the account profiles for the specified response envelope.\n *\n * @param {ResponseEnvelope} response The response envelope.\n * @return {AccountProfile[]} The account profiles.\n */\nFinancialInstitutionImpl.prototype.getAccountProfiles = function(response) {\n  var messageSet = response.getMessageSet(MessageSetType.signup);\n  if (!messageSet) {\n    throw new Error(\"No signup response message set.\");\n  }\n\n  var transaction = messageSet.getAccountInfoResponse();\n  if (!transaction) {\n    throw new Error(\"No account info transaction in the signup response.\");\n  }\n\n  var infoResponse = transaction.getMessage();\n  if (!infoResponse) {\n    throw new Error(\"No account info response in the transaction.\");\n  }\n\n  return infoResponse.getAccounts();\n};\n\n\n/**\n * The connection used by this implementation.\n *\n * @return {OFXConnection} The connection used by this implementation.\n */\nFinancialInstitutionImpl.prototype.getConnection = function() {\n  return this.connection;\n};\n\n\n/**\n * The financial institution data.\n *\n * @return {FinancialInstitutionData} The financial institution data.\n */\nFinancialInstitutionImpl.prototype.getData = function() {\n  return this.data;\n};\n\n\n\n\nmodule.exports = FinancialInstitutionImpl;\n","\"use strict\";\n\nvar inherit = require(\"../../util/inherit\");\n\nvar InvestmentAccount = require(\"../InvestmentAccount\");\nvar StatementRange = require(\"../../domain/data/common/StatementRange\");\nvar IncludePosition = require(\"../../domain/data/investment/statements/IncludePosition\");\nvar InvestmentStatementRequestTransaction = require(\"../../domain/data/investment/statements/InvestmentStatementRequestTransaction\");\nvar SecurityListRequestTransaction = require(\"../../domain/data/seclist/SecurityListRequestTransaction\");\nvar MessageSetType = require(\"../../domain/data/MessageSetType\");\nvar InvestmentStatementRequestMessageSet = require(\"../../domain/data/investment/statements/InvestmentStatementRequestMessageSet\");\nvar InvestmentStatementRequest = require(\"../../domain/data/investment/statements/InvestmentStatementRequest\");\nvar SecurityListRequestMessageSet = require(\"../../domain/data/seclist/SecurityListRequestMessageSet\");\nvar SecurityListRequest = require(\"../../domain/data/seclist/SecurityListRequest\");\n\n/**\n * @class\n */\nfunction InvestmentAccountImpl (/*InvestmentAccountDetails*/ details, /*String*/ username, /*String*/ password, /*FinancialInstitutionImpl*/ institution) {\n\n  /**\n   * @name InvestmentAccountImpl#details\n   * @type InvestmentAccountDetails\n   * @access private\n   */\n  this.details = details;\n\n  /**\n   * @name InvestmentAccountImpl#username\n   * @type String\n   * @access private\n   */\n  this.username = username;\n\n  /**\n   * @name InvestmentAccountImpl#password\n   * @type String\n   * @access private\n   */\n  this.password = password;\n\n  /**\n   * @name InvestmentAccountImpl#institution\n   * @type FinancialInstitutionImpl\n   * @access private\n   */\n  this.institution = institution;\n}\n\ninherit(InvestmentAccountImpl, \"implements\", InvestmentAccount);\n\n\n\nInvestmentAccountImpl.prototype.readStatement = function(/*Date*/ start, /*Date*/ end) {\n  var range = new StatementRange();\n  range.setIncludeTransactions(true);\n  range.setStart(start);\n  range.setEnd(end);\n\n  var request = this.institution.createAuthenticatedRequest(this.username, this.password);\n  var requestTransaction = new InvestmentStatementRequestTransaction();\n  requestTransaction.setWrappedMessage(this.createStatementRequest(this.getDetails(), range));\n  request.getMessageSets().push(this.createStatementRequestMessageSet(requestTransaction));\n\n  var response = this.institution.sendRequest(request);\n  this.institution.doGeneralValidationChecks(request, response);\n\n  return this.unwrapStatementResponse(response);\n};\n\n\nInvestmentAccountImpl.prototype.readSecurityList = function(/*SecurityRequest[]*/ securities) {\n  var request = this.institution.createAuthenticatedRequest(this.username, this.password);\n  var requestTransaction = new SecurityListRequestTransaction();\n  requestTransaction.setWrappedMessage(this.createSecurityListRequest(securities));\n  request.getMessageSets().push(this.createSecurityListRequestMessageSet(requestTransaction));\n\n  var response = this.institution.sendRequest(request);\n  this.institution.doGeneralValidationChecks(request, response);\n\n  return this.unwrapSecurityList(response);\n};\n\n\n/**\n * The details of this account.\n *\n * @return {InvestmentAccountDetails} The details of this account.\n */\nInvestmentAccountImpl.prototype.getDetails = function() {\n  return this.details;\n};\n\n\nInvestmentAccountImpl.prototype.unwrapStatementResponse = function(/*ResponseEnvelope*/ response) {\n  var investmentStatementSet = response.getMessageSet(MessageSetType.investment);\n  if (!investmentStatementSet) {\n    throw new Error(\"No investment response message set.\");\n  }\n\n  var statementTransactionResponse = investmentStatementSet.getStatementResponse();\n  if (!statementTransactionResponse) {\n    throw new Error(\"No investment statement response transaction.\");\n  }\n\n  var statement = statementTransactionResponse.getMessage();\n  if (!statement) {\n    throw new Error(\"No investment statement in the transaction.\");\n  }\n\n  // See if there's a security list -- often sent back with an account statement by servers.\n  var securityListMessageSet = response.getMessageSet(MessageSetType.investment_security);\n  if (securityListMessageSet) {\n    statement.setSecurityList(securityListMessageSet.getSecurityList());\n  }\n\n  return statement;\n};\n\n\nInvestmentAccountImpl.prototype.createStatementRequestMessageSet = function(/*InvestmentStatementRequestTransaction*/ transaction) {\n  var investmentStatementRequest = new InvestmentStatementRequestMessageSet();\n  investmentStatementRequest.setStatementRequest(transaction);\n  return investmentStatementRequest;\n};\n\n\nInvestmentAccountImpl.prototype.createStatementRequest = function(/*InvestmentAccountDetails*/ details, /*StatementRange*/ range) {\n  var investRequest = new InvestmentStatementRequest();\n  investRequest.setAccount(details);\n  investRequest.setStatementRange(range);\n  investRequest.setIncludePosition(new IncludePosition());\n  return investRequest;\n};\n\n\nInvestmentAccountImpl.prototype.createSecurityListRequestMessageSet = function(/*SecurityListRequestTransaction*/ transaction) {\n  var securityListRequest = new SecurityListRequestMessageSet();\n  securityListRequest.setSecurityListRequest(transaction);\n  return securityListRequest;\n};\n\n\nInvestmentAccountImpl.prototype.createSecurityListRequest = function(/*SecurityRequest[]*/ securities) {\n  var securityListRequest = new SecurityListRequest();\n  securityListRequest.setSecurityRequests(securities);\n  return securityListRequest;\n};\n\n\nInvestmentAccountImpl.prototype.unwrapSecurityList = function(/*ResponseEnvelope*/ response) {\n  var securityListSet = response.getMessageSet(MessageSetType.investment_security);\n  if (!securityListSet) {\n    throw new Error(\"No security list response message set.\");\n  }\n\n  var securityList = securityListSet.getSecurityList();\n  if (!securityList) {\n    throw new Error(\"No security list response transaction.\");\n  }\n\n  return securityList;\n};\n\n\n\n\nmodule.exports = InvestmentAccountImpl;\n","\"use strict\";\n\nmodule.exports = {\n  BankingAccountImpl: require(\"./BankingAccountImpl\"),\n  BaseAccountImpl: require(\"./BaseAccountImpl\"),\n  BaseFinancialInstitutionData: require(\"./BaseFinancialInstitutionData\"),\n  CreditCardAccountImpl: require(\"./CreditCardAccountImpl\"),\n  FinancialInstitutionImpl: require(\"./FinancialInstitutionImpl\"),\n  InvestmentAccountImpl: require(\"./InvestmentAccountImpl\"),\n};\n","\"use strict\";\n\nmodule.exports = {\n  context: require(\"./context/index\"),\n  impl: require(\"./impl/index\"),\n  net: require(\"./net/index\"),\n\n  AccountStatement: require(\"./AccountStatement\"),\n  BankAccount: require(\"./BankAccount\"),\n  CreditCardAccount: require(\"./CreditCardAccount\"),\n  FinancialInstitution: require(\"./FinancialInstitution\"),\n  FinancialInstitutionAccount: require(\"./FinancialInstitutionAccount\"),\n  FinancialInstitutionData: require(\"./FinancialInstitutionData\"),\n  FinancialInstitutionProfile: require(\"./FinancialInstitutionProfile\"),\n  InvestmentAccount: require(\"./InvestmentAccount\"),\n};\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Connection to an OFX interface.\n *\n * @class\n */\nfunction OFXConnection() {\n}\n\n/**\n * Send a request.\n *\n * @param {RequestEnvelope} request The request to send.\n * @param {URL} url The URL to which to send the request.\n * @return {Promise<ResponseEnvelope>} The response.\n */\nOFXConnection.prototype.sendRequest = function(/*request, url*/) { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = OFXConnection;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*global XMLHttpRequest*/\n\n\"use strict\";\n\nvar inherit = require(\"../../util/inherit\");\n\nvar ResponseEnvelope = require(\"../../domain/data/ResponseEnvelope\");\nvar OFXConnection = require(\"./OFXConnection\");\nvar AggregateMarshaller = require(\"../../io/AggregateMarshaller\");\nvar OFXV1Writer = require(\"../../io/v1/OFXV1Writer\");\nvar AggregateUnmarshaller = require(\"../../io/AggregateUnmarshaller\");\nvar LOG = require(\"../../util/log\");\n\n/**\n * Base implementation for an OFX connection.\n *\n * @class\n */\nfunction OFXV1Connection () {\n\n  /**\n   * @name OFXV1Connection#marshaller\n   * @type AggregateMarshaller\n   * @access private\n   */\n  this.marshaller = new AggregateMarshaller();\n\n  /**\n   * @name OFXV1Connection#unmarshaller\n   * @type AggregateUnmarshaller<ResponseEnvelope>\n   * @access private\n   */\n  this.unmarshaller = new AggregateUnmarshaller(ResponseEnvelope);\n  \n  /**\n   * @name OFXV1Connection#async\n   * @type bool\n   * @access private\n   */\n  this.async = true;\n}\n\ninherit(OFXV1Connection, \"implements\", OFXConnection);\n\n\n\n\n// Inherited.\nOFXV1Connection.prototype.sendRequest = function(/*RequestEnvelope*/ request, /*URL*/ url) {\n  //marshal to memory so we can determine the size...\n  var outBuffer = [];\n  var ofxWriter = this.newOFXWriter(outBuffer);\n  this.getMarshaller().marshal(request, ofxWriter);\n  ofxWriter.close();\n  this.logRequest(outBuffer);\n  var self = this;\n  return self.sendBuffer(url, outBuffer)\n  .then(function(in_) {\n    self.logResponse(in_);\n    return self.unmarshal(in_);\n  });\n};\n\n\n/**\n * Log a request buffer.\n *\n * @param {ByteArrayOutputStream} outBuffer The buffer to log.\n */\nOFXV1Connection.prototype.logRequest = function(outBuffer) {\n  if (LOG.network) {\n    console.log(\"Sending OFX request:\", outBuffer.join(\"\"));\n  }\n};\n\n\n/**\n * Log a response buffer.\n *\n * @param {ByteArrayOutputStream} outBuffer The buffer to log.\n */\nOFXV1Connection.prototype.logResponse = function(inBuffer) {\n  if (LOG.network) {\n    console.log(\"Received OFX response:\", inBuffer);\n  }\n};\n\n\n/**\n * Send the specified buffer to the specified URL.\n *\n * @param {URL} url The URL.\n * @param {ByteArrayOutputStream} outBuffer The buffer.\n * @return {Promise<string>} The response.\n */\nOFXV1Connection.prototype.sendBuffer = function(url, outBuffer) {\n  var outText = outBuffer.join(\"\");\n  var async = this.getAsync();\n  return new Promise(function(resolve, reject) {\n    var request = new XMLHttpRequest();\n    var onloadCalled = false;\n    request.open(\"POST\", url, async);\n    request.setRequestHeader(\"Content-Type\", \"application/x-ofx\");\n    //request.setRequestHeader(\"Content-Length\", outBuffer.length);\n    request.setRequestHeader(\"Accept\", \"*/*, application/x-ofx\");\n    request.onload = function() {\n      onloadCalled = true;\n      if (request.status >= 200 && request.status < 300) {\n        resolve(request.responseText);\n      } else if (request.status >= 400 && request.status < 500) {\n        reject(Error(\"Error \" + request.status + \" with client request: \" + request.responseText));\n      } else {\n        reject(Error(\"Invalid response code from OFX server: \" + request.status));\n      }\n    };\n    request.onerror = function() {\n      reject(Error(\"Network error\"));\n    };\n    \n    request.send(outText);\n    \n    if (!async && !onloadCalled) {\n      request.onload();\n    }\n  });\n};\n\n\n/**\n * Unmarshal the input stream.\n *\n * @param {string} in_ The input text.\n * @return {ResponseEnvelope} The response envelope.\n */\nOFXV1Connection.prototype.unmarshal = function(in_) {\n  return this.getUnmarshaller().unmarshal(in_);\n};\n\n\n/**\n * Create a new OFX writer.\n *\n * @param {OutputStream} out The output stream for the writer.\n * @return {OFXWriter} The OFX writer.\n */\nOFXV1Connection.prototype.newOFXWriter = function(out) {\n  return new OFXV1Writer(out);\n};\n\n\n/**\n * The marshaller.\n *\n * @return {AggregateMarshaller} The marshaller.\n */\nOFXV1Connection.prototype.getMarshaller = function() {\n  return this.marshaller;\n};\n\n\n/**\n * The marshaller.\n *\n * @param {AggregateMarshaller} marshaller The marshaller.\n */\nOFXV1Connection.prototype.setMarshaller = function(marshaller) {\n  this.marshaller = marshaller;\n};\n\n\n/**\n * The unmarshaller.\n *\n * @return {AggregateUnmarshaller<ResponseEnvelope>} The unmarshaller.\n */\nOFXV1Connection.prototype.getUnmarshaller = function() {\n  return this.unmarshaller;\n};\n\n\n/**\n * The unmarshaller.\n *\n * @param {AggregateUnmarshaller<ResponseEnvelope>} unmarshaller The unmarshaller.\n */\nOFXV1Connection.prototype.setUnmarshaller = function(unmarshaller) {\n  this.unmarshaller = unmarshaller;\n};\n\n\n\n/**\n * Async mode\n *\n * @return {bool} Whether in async mode.\n */\nOFXV1Connection.prototype.getAsync = function() {\n  return this.async;\n};\n\n\n/**\n * Async mode\n *\n * @param {bool} async async mode.\n */\nOFXV1Connection.prototype.setAsync = function(async) {\n  this.async = async;\n};\n\n\n\nmodule.exports = OFXV1Connection;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../util/inherit\");\n\nvar OFXV2Writer = require(\"../../io/v2/OFXV2Writer\");\nvar OFXV1Connection = require(\"./OFXV1Connection\");\n\n\n/**\n * @class\n */\nfunction OFXV2Connection () {\n  OFXV2Connection.call(this);\n}\n\ninherit(OFXV2Connection, \"extends\", OFXV1Connection);\n\n\n\n\n// @Override\nOFXV2Connection.prototype.newOFXWriter = function(/*OutputStream*/ out) {\n  return new OFXV2Writer(out);\n};\n\n\n\n\nmodule.exports = OFXV2Connection;\n","\"use strict\";\n\nmodule.exports = {\n  OFXConnection: require(\"./OFXConnection\"),\n  OFXV1Connection: require(\"./OFXV1Connection\"),\n  OFXV2Connection: require(\"./OFXV2Connection\"),\n};\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * @enum\n * See \"Section 4, OFX spec\"\n */\nvar ApplicationSecurity = {\n\n  NONE: \"NONE\",\n\n  TYPE1: \"TYPE1\"\n};\n\n\nmodule.exports = ApplicationSecurity;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * @class\n */\nfunction MessageSetProfile() {\n}\n\n/**\n * Version of the message set.\n *\n * @return {String} The version of the message set.\n */\nMessageSetProfile.prototype.getVersion = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The name of the service provider (sometimes the message set processing is outsourced).\n *\n * @return {String} The name of the service provider (sometimes the message set processing is outsourced).\n */\nMessageSetProfile.prototype.getServiceProviderName = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The URL at which the message set is processed.\n *\n * @return {String} The URL at which the message set is processed.\n */\nMessageSetProfile.prototype.getUrl = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The application-level security required for this message set.\n *\n * @return {ApplicationSecurity} The application-level security required for this message set.\n */\nMessageSetProfile.prototype.getSecurity = function() { throw new Error(\"not implemented\"); };\n\n/**\n * Whether transport-level security is required for this message set.\n *\n * @return {boolean} Whether transport-level security is required for this message set.\n */\nMessageSetProfile.prototype.isSslRequired = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The sign-on realm.\n *\n * @return {String} The sign-on realm.\n */\nMessageSetProfile.prototype.getRealm = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The language.\n *\n * @return {String} The language.\n * @see java.util.Locale#getISO3Language()\n */\nMessageSetProfile.prototype.getLanguage = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The synchronization capability for this message set.\n *\n * @return {SynchronizationCapability} The synchronization capability for this message set.\n */\nMessageSetProfile.prototype.getSyncCapability = function() { throw new Error(\"not implemented\"); };\n\n/**\n * Whether there exists support for resposne-file based error recovery.\n *\n * @return {boolean} Whether there exists support for resposne-file based error recovery.\n */\nMessageSetProfile.prototype.hasFileBasedErrorRecoverySupport = function() { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = MessageSetProfile;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * The message set type, used to define message set order in the envelope.\n *\n * @enum\n * See \"Section 2.4.5.2, OFX spec\"\n */\nvar MessageSetType = {\n\n  signon: 0,\n\n  signup: 1,\n\n  banking: 2,\n\n  creditcard: 3,\n\n  investment: 4,\n\n  interbank_transfer: 5,\n\n  wire_transfer: 6,\n\n  payments: 7,\n\n  email: 8,\n\n  investment_security: 9,\n\n  profile: 10,\n\n  tax1099: 11\n\n};\n\n\nmodule.exports = MessageSetType;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../meta/ChildAggregate\");\nvar Header = require(\"../../meta/Header\");\nvar ApplicationSecurity = require(\"./ApplicationSecurity\");\nvar RequestMessageSet = require(\"./RequestMessageSet\");\nvar UUID = require(\"uuid\");\n\n/**\n * Envelope for enclosing an OFX request.\n *\n * @class\n * See \"Section 2.4.3, OFX Spec\"\n */\nfunction RequestEnvelope (/*String*/ UID) {\n\n  /**\n   * @name RequestEnvelope#security\n   * @type ApplicationSecurity\n   * @access private\n   */\n  this.security = ApplicationSecurity.NONE;\n\n  /**\n   * @name RequestEnvelope#UID\n   * @type String\n   * @access private\n   */\n  this.UID = UID ? UID : UUID.v4();\n\n  /**\n   * @name RequestEnvelope#lastProcessedUID\n   * @type String\n   * @access private\n   */\n  this.lastProcessedUID = null;\n\n  /**\n   * @name RequestEnvelope#messageSets\n   * @type RequestMessageSet[]\n   * @access private\n   */\n  this.messageSets = null;\n}\n\n\n\nAggregate.add(\"OFX\", RequestEnvelope);\n\n\n\n/**\n * The security of this envelope.\n *\n * @return {ApplicationSecurity} The security of this envelope.\n * See \"Section 2.2, OFX spec\"\n */\nRequestEnvelope.prototype.getSecurity = function() {\n  return this.security;\n};\nHeader.add(RequestEnvelope, {name: \"SECURITY\", attributeType: ApplicationSecurity, readMethod: \"getSecurity\", writeMethod: \"setSecurity\"});\n\n\n/**\n * The security of this envelope.\n *\n * @param {ApplicationSecurity} security The security of this envelope.\n * See \"Section 2.2, OFX spec\"\n */\nRequestEnvelope.prototype.setSecurity = function(security) {\n  this.security = security;\n};\n\n\n/**\n * The UID for the envelope.\n *\n * @return {String} The UID for the envelope.\n * See \"Section 2.2, OFX spec\"\n */\nRequestEnvelope.prototype.getUID = function() {\n  return this.UID;\n};\nHeader.add(RequestEnvelope, {name: \"NEWFILEUID\", attributeType: String, readMethod: \"getUID\", writeMethod: \"setUID\"});\n\n\n/**\n * The UID for the envelope.\n *\n * @param {String} UID The UID for the envelope.\n * See \"Section 2.2, OFX spec\"\n */\nRequestEnvelope.prototype.setUID = function(UID) {\n  this.UID = UID;\n};\n\n\n/**\n * The UID of the last-processed request/response (used for file-based error recovery).\n *\n * @return {String} The UID of the last-processed request/response (used for file-based error recovery).\n * See \"Section 2.2, OFX spec\"\n */\nRequestEnvelope.prototype.getLastProcessedUID = function() {\n  return this.lastProcessedUID;\n};\nHeader.add(RequestEnvelope, {name: \"OLDFILEUID\", attributeType: String, readMethod: \"getLastProcessedUID\", writeMethod: \"setLastProcessedUID\"});\n\n\n/**\n * The UID of the last-processed request/response (used for file-based error recovery).\n *\n * @param {String} lastProcessedUID The UID of the last-processed request/response (used for file-based error recovery).\n * See \"Section 2.2, OFX spec\"\n */\nRequestEnvelope.prototype.setLastProcessedUID = function(lastProcessedUID) {\n  this.lastProcessedUID = lastProcessedUID;\n};\n\n\n/**\n * The message sets that make up the content of this request.\n *\n * @return {RequestMessageSet[]} The message sets that make up the content of this request.\n * See \"Section 2.4.5, OFX Spec\"\n */\nRequestEnvelope.prototype.getMessageSets = function() {\n  return this.messageSets;\n};\nChildAggregate.add(RequestEnvelope, {order: 1, attributeType: Array, collectionEntryType: RequestMessageSet, readMethod: \"getMessageSets\", writeMethod: \"setMessageSets\"});\n\n\n/**\n * The message sets that make up the content of this request.\n *\n * @param {RequestMessageSet[]} messageSets The message sets that make up the content of this request.\n * See \"Section 2.4.5, OFX Spec\"\n */\nRequestEnvelope.prototype.setMessageSets = function(messageSets) {\n  this.messageSets = messageSets;\n};\n\n\n\n\nmodule.exports = RequestEnvelope;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * A message applicable to a request message set.\n *\n * @class\n */\nfunction RequestMessage () {\n}\n\n\nmodule.exports = RequestMessage;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * A message set enclosed in an OFX request envelope.\n *\n * @class\n */\nfunction RequestMessageSet () {\n\n  /**\n   * @name RequestMessageSet#version\n   * @type String\n   * @access private\n   */\n  this.version = \"1\";\n}\n\n\nRequestMessageSet.prototype.getType = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The version of this request message.\n *\n * @return {String} The version of this request message.\n */\nRequestMessageSet.prototype.getVersion = function() {\n  return this.version;\n};\n\n/**\n * The version of this request message.\n *\n * @param {String} version The version of this request message.\n */\nRequestMessageSet.prototype.setVersion = function(version) {\n  this.version = version;\n};\n\n/**\n * The request messages for this request message set.\n *\n * @return {RequestMessage[]} The request messages for this request message set.\n */\nRequestMessageSet.prototype.getRequestMessages = function() { throw new Error(\"not implemented\"); };\n\n// Inherited.\nRequestMessageSet.prototype.compareTo = function(/*RequestMessageSet*/ o) {\n  return this.getType().compareTo(o.getType());\n};\n\n\n\n\nmodule.exports = RequestMessageSet;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../meta/ChildAggregate\");\nvar Header = require(\"../../meta/Header\");\nvar ApplicationSecurity = require(\"./ApplicationSecurity\");\nvar MessageSetType = require(\"./MessageSetType\");\nvar ResponseMessageSet = require(\"./ResponseMessageSet\");\n\n/**\n * Envelope for enclosing an OFX response.\n *\n * @class\n * See \"Section 2.4.3, OFX Spec\"\n */\nfunction ResponseEnvelope () {\n\n  /**\n   * @name ResponseEnvelope#security\n   * @type ApplicationSecurity\n   * @access private\n   */\n  this.security = ApplicationSecurity.NONE;\n\n  /**\n   * @name ResponseEnvelope#UID\n   * @type String\n   * @access private\n   */\n  this.UID = null;\n\n  /**\n   * @name ResponseEnvelope#messageSets\n   * @type ResponseMessageSet[]\n   * @access private\n   */\n  this.messageSets = null;\n}\n\n\n\nAggregate.add(\"OFX\", ResponseEnvelope);\n\n\n/**\n * The security of this envelope.\n *\n * @return {ApplicationSecurity} The security of this envelope.\n * See \"Section 2.2, OFX spec\"\n */\nResponseEnvelope.prototype.getSecurity = function() {\n  return this.security;\n};\nHeader.add(ResponseEnvelope, {name: \"SECURITY\", attributeType: ApplicationSecurity, readMethod: \"getSecurity\", writeMethod: \"setSecurity\"});\n\n\n/**\n * The security of this envelope.\n *\n * @param {ApplicationSecurity} security The security of this envelope.\n * See \"Section 2.2, OFX spec\"\n */\nResponseEnvelope.prototype.setSecurity = function(security) {\n  this.security = security;\n};\n\n\n/**\n * The UID for the envelope.\n *\n * @return {String} The UID for the envelope.\n * See \"Section 2.2, OFX spec\"\n */\nResponseEnvelope.prototype.getUID = function() {\n  return this.UID;\n};\nHeader.add(ResponseEnvelope, {name: \"NEWFILEUID\", attributeType: String, readMethod: \"getUID\", writeMethod: \"setUID\"});\n\n\n/**\n * The UID for the envelope.\n *\n * @param {String} UID The UID for the envelope.\n * See \"Section 2.2, OFX spec\"\n */\nResponseEnvelope.prototype.setUID = function(UID) {\n  this.UID = UID;\n};\n\n\n/**\n * The message sets that make up the content of this response.\n *\n * @return {ResponseMessageSet[]} The message sets that make up the content of this response.\n * See \"Section 2.4.5, OFX Spec\"\n */\nResponseEnvelope.prototype.getMessageSets = function() {\n  return this.messageSets;\n};\nChildAggregate.add(ResponseEnvelope, {order: 1, attributeType: Array, collectionEntryType: ResponseMessageSet, readMethod: \"getMessageSets\", writeMethod: \"setMessageSets\"});\n\n\n/**\n * The message sets that make up the content of this response.\n *\n * @param {ResponseMessageSet[]} messageSets The message sets that make up the content of this response.\n * See \"Section 2.4.5, OFX Spec\"\n */\nResponseEnvelope.prototype.setMessageSets = function(messageSets) {\n  this.messageSets = messageSets;\n};\n\n\n/**\n * Helper method for looking up the signon response.\n *\n * @return {SignonResponse} The signon response, or null if none found.\n */\nResponseEnvelope.prototype.getSignonResponse = function() {\n  var type = MessageSetType.signon;\n  var message = this.getMessageSet(type);\n\n  if (message) {\n    return message.getSignonResponse();\n  }\n  else {\n    return null;\n  }\n};\n\n\n/**\n * Get the message set of the specified type.\n *\n * @param {MessageSetType} type The type.\n * @return {ResponseMessageSet} The message set, or null.\n */\nResponseEnvelope.prototype.getMessageSet = function(type) {\n  var message = null;\n  if (this.messageSets) {\n    for (var i=0; i<this.messageSets.length; i++) {\n      var messageSet = this.messageSets[i];\n      if (messageSet.getType() == type) {\n        message = messageSet;\n        break;\n      }\n    }\n  }\n  return message;\n};\n\n\n\n\nmodule.exports = ResponseEnvelope;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * A message applicable to a response message set.\n *\n * @class\n */\nfunction ResponseMessage () {\n}\n\n\n\n\n\n/**\n * The name of the response message.\n *\n * @return {String} The name of the response message.\n */\nResponseMessage.prototype.getResponseMessageName = function() { throw new Error(\"not implemented\"); };\n\n\n\n\nmodule.exports = ResponseMessage;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * A message set enclosed in a response envelope.\n *\n * @class\n */\nfunction ResponseMessageSet () {\n\n  /**\n   * @name ResponseMessageSet#version\n   * @type String\n   * @access private\n   */\n  this.version = \"1\";\n}\n\n\nResponseMessageSet.prototype.getType = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The version of this message set.\n *\n * @return {String} The version of this message set.\n */\nResponseMessageSet.prototype.getVersion = function() {\n  return this.version;\n};\n\n/**\n * The version of this message set.\n *\n * @param {String} version The version of this message set.\n */\nResponseMessageSet.prototype.setVersion = function(version) {\n  this.version = version;\n};\n\n/**\n * The list of response messages.\n *\n * @return {ResponseMessage[]} The list of response messages.\n */\nResponseMessageSet.prototype.getResponseMessages = function() { throw new Error(\"not implemented\"); };\n\n// Inherited.\nResponseMessageSet.prototype.compareTo = function(/*ResponseMessageSet*/ o) {\n  return this.getType().compareTo(o.getType());\n};\n\n\n\n\nmodule.exports = ResponseMessageSet;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * @class\n */\nfunction SignonProfile() {\n}\n\n/**\n * The name of the sign-on realm.\n *\n * @return {String} The name of the sign-on realm.\n */\nSignonProfile.prototype.getRealm = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The minimum number of password characters.\n *\n * @return {Integer} The minimum number of password characters.\n */\nSignonProfile.prototype.getMinPasswordCharacters = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The maximum number of password characters.\n *\n * @return {Integer} The maximum number of password characters.\n */\nSignonProfile.prototype.getMaxPasswordCharacters = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The type of password characters supported.\n *\n * @return {CharacterType} The type of password characters supported.\n */\nSignonProfile.prototype.getPasswordCharacterType = function() { throw new Error(\"not implemented\"); };\n\n/**\n * Whether the password is case-sensitive.\n *\n * @return {Boolean} Whether the password is case-sensitive.\n */\nSignonProfile.prototype.getPasswordCaseSensitive = function() { throw new Error(\"not implemented\"); };\n\n/**\n * Whether special characters are allowed in the password.\n *\n * @return {Boolean} Whether special characters are allowed in the password.\n */\nSignonProfile.prototype.getPasswordSpecialCharsAllowed = function() { throw new Error(\"not implemented\"); };\n\n/**\n * Whether spaces are allowed in the password.\n *\n * @return {Boolean} Whether spaces are allowed in the password.\n */\nSignonProfile.prototype.getPasswordSpacesAllowed = function() { throw new Error(\"not implemented\"); };\n\n/**\n * Whether the server can process a password change request for this realm.\n *\n * @return {Boolean} Whether the server can process a password change request for this realm.\n */\nSignonProfile.prototype.getChangePasswordSupported = function() { throw new Error(\"not implemented\"); };\n\n/**\n * Whether the server requires the user to change their password as part of their first signon.\n *\n * @return {Boolean} Whether the server requires the user to change their password as part of their first signon.\n */\nSignonProfile.prototype.getChangePasswordFirstRequired = function() { throw new Error(\"not implemented\"); };\n\n/**\n * Label for a set of additional credentials that the user must supply.\n *\n * @return {String} Label for a set of additional credentials that the user must supply.\n */\nSignonProfile.prototype.getAdditionalCredientialsLabel1 = function() { throw new Error(\"not implemented\"); };\n\n/**\n * Label for a set of additional credentials that the user must supply.\n *\n * @return {String} Label for a set of additional credentials that the user must supply.\n */\nSignonProfile.prototype.getAdditionalCredientialsLabel2 = function() { throw new Error(\"not implemented\"); };\n\n/**\n * Whether a client UID is required for teh sign-on.\n *\n * @return {Boolean} Whether a client UID is required for teh sign-on.\n */\nSignonProfile.prototype.getClientUIDRequired = function() { throw new Error(\"not implemented\"); };\n\n/**\n * Whether an auth token is required for the sign-on.\n *\n * @return {Boolean} Whether an auth token is required for the sign-on.\n */\nSignonProfile.prototype.getAuthTokenRequiredForFirstSignon = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The label of the auth token.\n *\n * @return {String} The label of the auth token.\n */\nSignonProfile.prototype.getAuthTokenLabel = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The URL for the auth token information.\n *\n * @return {String} The URL for the auth token information.\n */\nSignonProfile.prototype.getAuthTokenInfoURL = function() { throw new Error(\"not implemented\"); };\n\n/**\n * Whether MFA is supported.\n *\n * @return {Boolean} Whether MFA is supported.\n */\nSignonProfile.prototype.getMfaSupported = function() { throw new Error(\"not implemented\"); };\n\n/**\n * Whether an MFA challenge request is required for the first sign-on into this realm.\n *\n * @return {Boolean} Whether an MFA challenge request is required for the first sign-on into this realm.\n */\nSignonProfile.prototype.getMfaChallengeRequiredForFirstSignon = function() { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = SignonProfile;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../util/inherit\");\n\nvar Element = require(\"../../meta/Element\");\nvar UUID = require(\"uuid\");\nvar RequestMessage = require(\"./ResponseMessage\");\n\n/**\n * A request message wrapped in a transaction.\n *\n * @class\n * See \"Section 2.4.6, OFX Spec\"\n */\nfunction TransactionWrappedRequestMessage() {\n  RequestMessage.call(this);\n\n  var UID;\n  if(arguments.length === 1) {\n    UID = arguments[0];\n  } else {\n    UID = UUID.v4();\n  }\n\n  /**\n   * @type String\n   */\n  this.UID = UID;\n\n  /**\n   * @type String\n   */\n  this.clientCookie = null;\n\n  /**\n   * @type String\n   */\n  this.transactionAuthorizationNumber = null;\n}\n\ninherit(TransactionWrappedRequestMessage, \"extends\", RequestMessage);\n\n\n/**\n * UID of this transaction.\n *\n * @return UID of this transaction.\n */\nTransactionWrappedRequestMessage.prototype.getUID = function() {\n  return this.UID;\n};\nElement.add(TransactionWrappedRequestMessage, {name: \"TRNUID\", required: true, order: 0, attributeType: String, readMethod: \"getUID\", writeMethod: \"setUID\"});\n\n\n/**\n * UID of this transaction.\n *\n * @param {String} UID UID of this transaction.\n */\nTransactionWrappedRequestMessage.prototype.setUID = function(UID) {\n  this.UID = UID;\n};\n\n/**\n * Client cookie (echoed back by the response).\n *\n * @return {String} Client cookie (echoed back by the response).\n */\nTransactionWrappedRequestMessage.prototype.getClientCookie = function() {\n  return this.clientCookie;\n};\nElement.add(TransactionWrappedRequestMessage, {name: \"CLTCOOKIE\", order: 10, attributeType: String, readMethod: \"getClientCookie\", writeMethod: \"setClientCookie\"});\n\n/**\n * Client cookie (echoed back by the response).\n *\n * @param {String} clientCookie Client cookie (echoed back by the response).\n */\nTransactionWrappedRequestMessage.prototype.setClientCookie = function(clientCookie) {\n  this.clientCookie = clientCookie;\n};\n\n/**\n * The transaction authorization number.\n *\n * @return {String} The transaction authorization number.\n */\nTransactionWrappedRequestMessage.prototype.getTransactionAuthorizationNumber = function() {\n  return this.transactionAuthorizationNumber;\n};\nElement.add(TransactionWrappedRequestMessage, {name: \"TAN\", order: 20, attributeType: String, readMethod: \"getTransactionAuthorizationNumber\", writeMethod: \"setTransactionAuthorizationNumber\"});\n\n/**\n * The transaction authorization number.\n *\n * @param {String} transactionAuthorizationNumber The transaction authorization number.\n */\nTransactionWrappedRequestMessage.prototype.setTransactionAuthorizationNumber = function(transactionAuthorizationNumber) {\n  this.transactionAuthorizationNumber = transactionAuthorizationNumber;\n};\n\n\n/**\n * Set the wrapped message.\n *\n * @param {M} message The wrapped message.\n */\nTransactionWrappedRequestMessage.prototype.setWrappedMessage = function(/*message*/) { throw new Error(\"not implemented\"); };\n\n\n\nmodule.exports = TransactionWrappedRequestMessage;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../util/inherit\");\n\nvar StatusHolder = require(\"./common/StatusHolder\");\nvar ChildAggregate = require(\"../../meta/ChildAggregate\");\nvar Element = require(\"../../meta/Element\");\nvar ResponseMessage = require(\"./ResponseMessage\");\nvar Status = require(\"./common/Status\");\n\n/**\n * A response message wrapped in a transaction.\n *\n * @class\n * @augments ResponseMessage\n * @augments StatusHolder\n * See \"Section 2.4.6, OFX Spec\"\n */\nfunction TransactionWrappedResponseMessage() {\n  ResponseMessage.call(this);\n\n  /**\n   * @type String\n   */\n  this.UID = null;\n\n  /**\n   * @type String\n   */\n  this.clientCookie = null;\n\n  /**\n   * @type Status\n   */\n  this.status = null;\n}\n\ninherit(TransactionWrappedResponseMessage, \"extends\", ResponseMessage);\ninherit(TransactionWrappedResponseMessage, \"implements\", StatusHolder);\n\n\n/**\n * UID of this transaction.\n *\n * @return {String} UID of this transaction.\n */\nTransactionWrappedResponseMessage.prototype.getUID = function() {\n  return this.UID;\n};\nElement.add(TransactionWrappedResponseMessage, {name: \"TRNUID\", required: true, order: 0, attributeType: String, readMethod: \"getUID\", writeMethod: \"setUID\"});\n\n/**\n * UID of this transaction.\n *\n * @param {String} UID UID of this transaction.\n */\nTransactionWrappedResponseMessage.prototype.setUID = function(UID) {\n  this.UID = UID;\n};\n\n/**\n * Client cookie (echoed back by the response).\n *\n * @return {String} Client cookie (echoed back by the response).\n */\nTransactionWrappedResponseMessage.prototype.getClientCookie = function() {\n  return this.clientCookie;\n};\nElement.add(TransactionWrappedResponseMessage, {name: \"CLTCOOKIE\", order: 20, attributeType: String, readMethod: \"getClientCookie\", writeMethod: \"setClientCookie\"});\n\n/**\n * Client cookie (echoed back by the response).\n *\n * @param {String} clientCookie Client cookie (echoed back by the response).\n */\nTransactionWrappedResponseMessage.prototype.setClientCookie = function(clientCookie) {\n  this.clientCookie = clientCookie;\n};\n\n// Inherited.\nTransactionWrappedResponseMessage.prototype.getStatusHolderName = function() {\n  return this.getResponseMessageName();\n};\n\n// Inherited.\nTransactionWrappedResponseMessage.prototype.getResponseMessageName = function() {\n  var name = \"transaction response\";\n  if (this.getWrappedMessage()) {\n    name = this.getWrappedMessage().getResponseMessageName() + \" transaction\";\n  }\n  else {\n    var AggregateIntrospector = require(\"../../io/AggregateIntrospector\");\n    var aggregateName = AggregateIntrospector.getAggregateName(this.constructor);\n    if (aggregateName) {\n      name = aggregateName + \" transaction\";\n    }\n  }\n\n  return name;\n};\n\n/**\n * Status of the transaction.\n *\n * @return {Status} Status of the transaction.\n */\nTransactionWrappedResponseMessage.prototype.getStatus = function() {\n  return this.status;\n};\nChildAggregate.add(TransactionWrappedResponseMessage, {required: true, order: 10, attributeType: Status, readMethod: \"getStatus\", writeMethod: \"setStatus\"});\n\n/**\n * Status of the transaction.\n *\n * @param {Status} status Status of the transaction.\n */\nTransactionWrappedResponseMessage.prototype.setStatus = function(status) {\n  this.status = status;\n};\n\n/**\n * Get the wrapped message.\n *\n * @return The wrapped message.\n */\nTransactionWrappedResponseMessage.prototype.getWrappedMessage = function() { throw new Error(\"not implemented\"); };\n\nmodule.exports = TransactionWrappedResponseMessage;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * @see \"OFX Spec, Section 11.3.1.1\"\n * @enum\n */\nvar AccountType = {\n\n  CHECKING: \"CHECKING\",\n\n  SAVINGS: \"SAVINGS\",\n\n  MONEYMRKT: \"MONEYMRKT\",\n\n  CREDITLINE: \"CREDITLINE\",\n  \n};\n\n\nmodule.exports = AccountType;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar AccountDetails = require(\"../common/AccountDetails\");\nvar AccountType = require(\"./AccountType\");\n\n/**\n * Base bank account details.\n *\n * @class\n * @augments AccountDetails\n * @see \"OFX Spec, Section 11.3.1\"\n */\nfunction BankAccountDetails () {\n\n  /**\n   * @name BankAccountDetails#bankId\n   * @type String\n   * @access private\n   */\n  this.bankId = null;\n\n  /**\n   * @name BankAccountDetails#branchId\n   * @type String\n   * @access private\n   */\n  this.branchId = null;\n\n  /**\n   * @name BankAccountDetails#accountNumber\n   * @type String\n   * @access private\n   */\n  this.accountNumber = null;\n\n  /**\n   * @name BankAccountDetails#accountType\n   * @type AccountType\n   * @access private\n   */\n  this.accountType = null;\n\n  /**\n   * @name BankAccountDetails#accountKey\n   * @type String\n   * @access private\n   */\n  this.accountKey = null;\n}\n\ninherit(BankAccountDetails, \"implements\", AccountDetails);\n\n\nAggregate.add(\"BankAccountDetails\", BankAccountDetails);\n\n\n/**\n * The routing and transit number.\n *\n * @return {String} The routing and transit number.\n */\nBankAccountDetails.prototype.getBankId = function() {\n  return this.bankId;\n};\nElement.add(BankAccountDetails, {name: \"BANKID\", required: true, order: 0, attributeType: String, readMethod: \"getBankId\", writeMethod: \"setBankId\"});\n\n\n/**\n * The routing and transit number.\n *\n * @param {String} bankId The routing and transit number.\n */\nBankAccountDetails.prototype.setBankId = function(bankId) {\n  this.bankId = bankId;\n};\n\n\n/**\n * The routing and transit number.\n *\n * @return {String} The routing and transit number.\n */\nBankAccountDetails.prototype.getRoutingNumber = function() {\n  return this.getBankId();\n};\n\n\n/**\n * The routing and transit number.\n *\n * @param {String} routingNumber The routing and transit number.\n */\nBankAccountDetails.prototype.setRoutingNumber = function(routingNumber) {\n  this.setBankId(routingNumber);\n};\n\n\n/**\n * The branch id.\n *\n * @return {String} The branch id.\n */\nBankAccountDetails.prototype.getBranchId = function() {\n  return this.branchId;\n};\nElement.add(BankAccountDetails, {name: \"BRANCHID\", order: 10, attributeType: String, readMethod: \"getBranchId\", writeMethod: \"setBranchId\"});\n\n\n/**\n * The branch id.\n *\n * @param {String} branchId The branch id.\n */\nBankAccountDetails.prototype.setBranchId = function(branchId) {\n  this.branchId = branchId;\n};\n\n\n/**\n * The account number.\n *\n * @return {String} The account number.\n */\nBankAccountDetails.prototype.getAccountNumber = function() {\n  return this.accountNumber;\n};\nElement.add(BankAccountDetails, {name: \"ACCTID\", required: true, order: 20, attributeType: String, readMethod: \"getAccountNumber\", writeMethod: \"setAccountNumber\"});\n\n\n/**\n * The account number.\n *\n * @param {String} accountNumber The account number.\n */\nBankAccountDetails.prototype.setAccountNumber = function(accountNumber) {\n  this.accountNumber = accountNumber;\n};\n\n\n/**\n * The account type.\n *\n * @return {AccountType} The account type.\n */\nBankAccountDetails.prototype.getAccountType = function() {\n  return this.accountType;\n};\nElement.add(BankAccountDetails, {name: \"ACCTTYPE\", required: true, order: 30, attributeType: AccountType, readMethod: \"getAccountType\", writeMethod: \"setAccountType\"});\n\n\n/**\n * The account type.\n *\n * @param {AccountType} accountType The account type.\n */\nBankAccountDetails.prototype.setAccountType = function(accountType) {\n  this.accountType = accountType;\n};\n\n\n/**\n * The account key.\n *\n * @return {String} The account key.\n */\nBankAccountDetails.prototype.getAccountKey = function() {\n  return this.accountKey;\n};\nElement.add(BankAccountDetails, {name: \"ACCTKEY\", order: 40, attributeType: String, readMethod: \"getAccountKey\", writeMethod: \"setAccountKey\"});\n\n\n/**\n * The account key.\n *\n * @param {String} accountKey The account key.\n */\nBankAccountDetails.prototype.setAccountKey = function(accountKey) {\n  this.accountKey = accountKey;\n};\n\n\n\n\nmodule.exports = BankAccountDetails;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar AccountInfo = require(\"../common/AccountInfo\");\nvar AccountStatus = require(\"../common/AccountStatus\");\nvar BankAccountDetails = require(\"./BankAccountDetails\");\n\n/**\n * @class\n * @augments AccountInfo\n */\nfunction BankAccountInfo () {\n\n  /**\n   * @name BankAccountInfo#bankAccount\n   * @type BankAccountDetails\n   * @access private\n   */\n  this.bankAccount = null;\n\n  /**\n   * @name BankAccountInfo#supportsTransactionDetailOperations\n   * @type Boolean\n   * @access private\n   */\n  this.supportsTransactionDetailOperations = null;\n\n  /**\n   * @name BankAccountInfo#supportsTransferToOtherAccountOperations\n   * @type Boolean\n   * @access private\n   */\n  this.supportsTransferToOtherAccountOperations = null;\n\n  /**\n   * @name BankAccountInfo#supportsTransferFromOtherAccountOperations\n   * @type Boolean\n   * @access private\n   */\n  this.supportsTransferFromOtherAccountOperations = null;\n\n  /**\n   * @name BankAccountInfo#status\n   * @type AccountStatus\n   * @access private\n   */\n  this.status = null;\n}\n\ninherit(BankAccountInfo, \"implements\", AccountInfo);\n\n\nAggregate.add(\"BANKACCTINFO\", BankAccountInfo);\n\n\n/**\n * The bank account this information is referencing.\n *\n * @return {BankAccountDetails} The bank account this information is referencing.\n */\nBankAccountInfo.prototype.getBankAccount = function() {\n  return this.bankAccount;\n};\nChildAggregate.add(BankAccountInfo, {name: \"BANKACCTFROM\", required: true, order: 0, attributeType: BankAccountDetails, readMethod: \"getBankAccount\", writeMethod: \"setBankAccount\"});\n\n\n/**\n * The bank account this information is referencing.\n *\n * @param {BankAccountDetails} bankAccount The bank account this information is referencing.\n */\nBankAccountInfo.prototype.setBankAccount = function(bankAccount) {\n  this.bankAccount = bankAccount;\n};\n\n\n// Inherited.\nBankAccountInfo.prototype.getAccountDetails = function() {\n  return this.getBankAccount();\n};\n\n\n/**\n * Whether this account supports download of transaction details.\n *\n * @return {Boolean} Whether this account supports download of transaction details.\n */\nBankAccountInfo.prototype.getSupportsTransactionDetailOperations = function() {\n  return this.supportsTransactionDetailOperations;\n};\nElement.add(BankAccountInfo, {name: \"SUPTXDL\", required: true, order: 10, attributeType: Boolean, readMethod: \"getSupportsTransactionDetailOperations\", writeMethod: \"setSupportsTransactionDetailOperations\"});\n\n\n/**\n * Whether this account supports download of transaction details.\n *\n * @param {Boolean} supportsTransactionDetailOperations Whether this account supports download of transaction details.\n */\nBankAccountInfo.prototype.setSupportsTransactionDetailOperations = function(supportsTransactionDetailOperations) {\n  this.supportsTransactionDetailOperations = supportsTransactionDetailOperations;\n};\n\n\n/**\n * Whether this account supports transfer operations to other accounts.\n *\n * @return {Boolean} Whether this account supports transfer operations to other accounts.\n */\nBankAccountInfo.prototype.getSupportsTransferToOtherAccountOperations = function() {\n  return this.supportsTransferToOtherAccountOperations;\n};\nElement.add(BankAccountInfo, {name: \"XFERSRC\", required: true, order: 20, attributeType: Boolean, readMethod: \"getSupportsTransferToOtherAccountOperations\", writeMethod: \"setSupportsTransferToOtherAccountOperations\"});\n\n\n/**\n * Whether this account supports transfer operations to other accounts.\n *\n * @param {Boolean} supportsTransferToOtherAccountOperations Whether this account supports transfer operations to other accounts.\n */\nBankAccountInfo.prototype.setSupportsTransferToOtherAccountOperations = function(supportsTransferToOtherAccountOperations) {\n  this.supportsTransferToOtherAccountOperations = supportsTransferToOtherAccountOperations;\n};\n\n\n/**\n * Whether this account supports transfer operations from other accounts.\n *\n * @return {Boolean} Whether this account supports transfer operations from other accounts.\n */\nBankAccountInfo.prototype.getSupportsTransferFromOtherAccountOperations = function() {\n  return this.supportsTransferFromOtherAccountOperations;\n};\nElement.add(BankAccountInfo, {name: \"XFERDEST\", required: true, order: 30, attributeType: Boolean, readMethod: \"getSupportsTransferFromOtherAccountOperations\", writeMethod: \"setSupportsTransferFromOtherAccountOperations\"});\n\n\n/**\n * Whether this account supports transfer operations from other accounts.\n *\n * @param {Boolean} supportsTransferFromOtherAccountOperations Whether this account supports transfer operations from other accounts.\n */\nBankAccountInfo.prototype.setSupportsTransferFromOtherAccountOperations = function(supportsTransferFromOtherAccountOperations) {\n  this.supportsTransferFromOtherAccountOperations = supportsTransferFromOtherAccountOperations;\n};\n\n\n/**\n * The account status.\n *\n * @return {AccountStatus} The account status.\n */\nBankAccountInfo.prototype.getStatus = function() {\n  return this.status;\n};\nElement.add(BankAccountInfo, {name: \"SVCSTATUS\", required: true, order: 40, attributeType: AccountStatus, readMethod: \"getStatus\", writeMethod: \"setStatus\"});\n\n\n/**\n * The account status.\n *\n * @param {AccountStatus} status The account status.\n */\nBankAccountInfo.prototype.setStatus = function(status) {\n  this.status = status;\n};\n\n\n\n\nmodule.exports = BankAccountInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar StatementRequest = require(\"../common/StatementRequest\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar BankAccountDetails = require(\"./BankAccountDetails\");\n\n/**\n * @class\n * @augments StatementRequest\n */\nfunction BankStatementRequest () {\n  StatementRequest.call(this);\n\n  /**\n   * @name BankStatementRequest#account\n   * @type BankAccountDetails\n   * @access private\n   */\n  this.account = null;\n}\n\ninherit(BankStatementRequest, \"extends\", StatementRequest);\n\n\nAggregate.add(\"STMTRQ\", BankStatementRequest);\n\n\n/**\n * The account details.\n *\n * @return {BankAccountDetails} The account details.\n */\nBankStatementRequest.prototype.getAccount = function() {\n  return this.account;\n};\nChildAggregate.add(BankStatementRequest, {name: \"BANKACCTFROM\", required: true, order: 0, attributeType: BankAccountDetails, readMethod: \"getAccount\", writeMethod: \"setAccount\"});\n\n\n/**\n * The account details.\n *\n * @param {BankAccountDetails} account The account details.\n */\nBankStatementRequest.prototype.setAccount = function(account) {\n  this.account = account;\n};\n\n\n\n\nmodule.exports = BankStatementRequest;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar BankStatementRequest = require(\"./BankStatementRequest\");\nvar TransactionWrappedRequestMessage = require(\"../TransactionWrappedRequestMessage\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\n\n/**\n * @class\n * @augments TransactionWrappedRequestMessage\n */\nfunction BankStatementRequestTransaction () {\n  TransactionWrappedRequestMessage.call(this);\n\n  /**\n   * @name BankStatementRequestTransaction#message\n   * @type BankStatementRequest\n   * @access private\n   */\n  this.message = null;\n}\n\ninherit(BankStatementRequestTransaction, \"extends\", TransactionWrappedRequestMessage);\n\n\nAggregate.add(\"STMTTRNRQ\", BankStatementRequestTransaction);\n\n\n/**\n * The message.\n *\n * @return {BankStatementRequest} The message.\n */\nBankStatementRequestTransaction.prototype.getMessage = function() {\n  return this.message;\n};\nChildAggregate.add(BankStatementRequestTransaction, {required: true, order: 30, attributeType: BankStatementRequest, readMethod: \"getMessage\", writeMethod: \"setMessage\"});\n\n\n/**\n * The message.\n *\n * @param {BankStatementRequest} message The message.\n *\n */\nBankStatementRequestTransaction.prototype.setMessage = function(message) {\n  this.message = message;\n};\n\n\n// Inherited.\nBankStatementRequestTransaction.prototype.setWrappedMessage = function(/*BankStatementRequest*/ message) {\n  this.setMessage(message);\n};\n\n\n\n\nmodule.exports = BankStatementRequestTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar StatementResponse = require(\"../common/StatementResponse\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar BankAccountDetails = require(\"./BankAccountDetails\");\n\n/**\n * @class\n * @augments StatementResponse\n */\nfunction BankStatementResponse () {\n  StatementResponse.call(this);\n\n  /**\n   * @name BankStatementResponse#account\n   * @type BankAccountDetails\n   * @access private\n   */\n  this.account = null;\n}\n\ninherit(BankStatementResponse, \"extends\", StatementResponse);\n\n\nAggregate.add(\"STMTRS\", BankStatementResponse);\n\n\nBankStatementResponse.prototype.getResponseMessageName = function() {\n  return \"bank statement\";\n};\n\n\n/**\n * The account for the statement.\n *\n * @return {BankAccountDetails} The account for the statement.\n */\nBankStatementResponse.prototype.getAccount = function() {\n  return this.account;\n};\nChildAggregate.add(BankStatementResponse, {name:\"BANKACCTFROM\", order: 10, attributeType: BankAccountDetails, readMethod: \"getAccount\", writeMethod: \"setAccount\"});\n\n\n/**\n * The account for the statement.\n *\n * @param {BankAccountDetails} account The account for the statement.\n */\nBankStatementResponse.prototype.setAccount = function(account) {\n  this.account = account;\n};\n\n\n\n\nmodule.exports = BankStatementResponse;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar BankStatementResponse = require(\"./BankStatementResponse\");\nvar TransactionWrappedResponseMessage = require(\"../TransactionWrappedResponseMessage\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\n\n/**\n * @class\n * @augments TransactionWrappedResponseMessage\n */\nfunction BankStatementResponseTransaction () {\n  TransactionWrappedResponseMessage.call(this);\n\n  /**\n   * @name BankStatementResponseTransaction#message\n   * @type BankStatementResponse\n   * @access private\n   */\n  this.message = null;\n}\n\ninherit(BankStatementResponseTransaction, \"extends\", TransactionWrappedResponseMessage);\n\n\nAggregate.add(\"STMTTRNRS\", BankStatementResponseTransaction);\n\n\n/**\n * The message.\n *\n * @return {BankStatementResponse} The message.\n */\nBankStatementResponseTransaction.prototype.getMessage = function() {\n  return this.message;\n};\nChildAggregate.add(BankStatementResponseTransaction, {required: true, order: 30, attributeType: BankStatementResponse, readMethod: \"getMessage\", writeMethod: \"setMessage\"});\n\n\n/**\n * The message.\n *\n * @param {BankStatementResponse} message The message.\n */\nBankStatementResponseTransaction.prototype.setMessage = function(message) {\n  this.message = message;\n};\n\n\n// Inherited.\nBankStatementResponseTransaction.prototype.getWrappedMessage = function() {\n  return this.getMessage();\n};\n\n\n\n\nmodule.exports = BankStatementResponseTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar MessageSetType = require(\"../MessageSetType\");\nvar RequestMessageSet = require(\"../RequestMessageSet\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar BankStatementRequestTransaction = require(\"./BankStatementRequestTransaction\");\n\n/**\n * @class\n * @augments BankingRequestMessageSet\n */\nfunction BankingRequestMessageSet () {\n  RequestMessageSet.call(this);\n\n  /**\n   * @name BankingRequestMessageSet#statementRequest\n   * @type BankStatementRequestTransaction\n   * @access private\n   */\n  this.statementRequest = null;\n}\n\ninherit(BankingRequestMessageSet, \"extends\", RequestMessageSet);\n\n\nAggregate.add(\"BANKMSGSRQV1\", BankingRequestMessageSet);\n\n\nBankingRequestMessageSet.prototype.getType = function() {\n  return MessageSetType.banking;\n};\n\n\n/**\n * The statement request.\n *\n * @return {BankStatementRequestTransaction} The statement request.\n */\nBankingRequestMessageSet.prototype.getStatementRequest = function() {\n  return this.statementRequest;\n};\nChildAggregate.add(BankingRequestMessageSet, {order: 0, attributeType: BankStatementRequestTransaction, readMethod: \"getStatementRequest\", writeMethod: \"setStatementRequest\"});\n\n\n/**\n * The statement request.\n *\n * @param {BankStatementRequestTransaction} statementRequest The statement request.\n */\nBankingRequestMessageSet.prototype.setStatementRequest = function(statementRequest) {\n  this.statementRequest = statementRequest;\n};\n\n\n// Inherited.\nBankingRequestMessageSet.prototype.getRequestMessages = function() {\n  var requestMessages = [];\n  if (this.getStatementRequest()) {\n    requestMessages.push(this.getStatementRequest());\n  }\n  return requestMessages;\n};\n\n\n\n\nmodule.exports = BankingRequestMessageSet;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar MessageSetType = require(\"../MessageSetType\");\nvar ResponseMessageSet = require(\"../ResponseMessageSet\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar BankStatementResponseTransaction = require(\"./BankStatementResponseTransaction\");\n\n/**\n * @class\n * @augments ResponseMessageSet\n */\nfunction BankingResponseMessageSet () {\n  ResponseMessageSet.call(this);\n\n  /**\n   * @name BankingResponseMessageSet#statementResponses\n   * @type BankStatementResponseTransaction[]\n   * @access private\n   */\n  this.statementResponses = null;\n}\n\ninherit(BankingResponseMessageSet, \"extends\", ResponseMessageSet);\n\n\nAggregate.add(\"BANKMSGSRSV1\", BankingResponseMessageSet);\n\n\nBankingResponseMessageSet.prototype.getType = function() {\n  return MessageSetType.banking;\n};\n\n\n/**\n * The statement response list.\n *\n * Most OFX files have a single statement response, except MT2OFX\n * which outputs OFX with multiple statement responses\n * in a single banking response message set.\n *\n * @return {BankStatementResponseTransaction[]} The statement response list.\n */\nBankingResponseMessageSet.prototype.getStatementResponses = function() {\n  return this.statementResponses;\n};\nChildAggregate.add(BankingResponseMessageSet, {order: 0, attributeType: Array, collectionEntryType: BankStatementResponseTransaction, readMethod: \"getStatementResponses\", writeMethod: \"setStatementResponses\"});\n\n\n/**\n * The statement response.\n *\n * @param {BankStatementResponseTransaction[]} statementResponses The statement responses.\n */\nBankingResponseMessageSet.prototype.setStatementResponses = function(statementResponses) {\n  this.statementResponses = statementResponses;\n};\n\n\n// Inherited.\nBankingResponseMessageSet.prototype.getResponseMessages = function() {\n  return [this.statementResponses];\n};\n\n\n/**\n * The first statement response.\n *\n * @return {BankStatementResponseTransaction} the first bank statement response.\n * @deprecated Use getStatementResponses() because sometimes there are multiple responses\n */\nBankingResponseMessageSet.prototype.getStatementResponse = function() {\n  return !this.statementResponses || this.statementResponses.length === 0 ? null : this.statementResponses[0];\n};\n\n\nBankingResponseMessageSet.prototype.setStatementResponse = function(/*BankStatementResponseTransaction*/ statementResponse) {\n  this.statementResponses = [statementResponse];\n};\n\n\n\n\nmodule.exports = BankingResponseMessageSet;\n","\"use strict\";\n\nmodule.exports = {\n  AccountType: require(\"./AccountType\"),\n  BankAccountDetails: require(\"./BankAccountDetails\"),\n  BankAccountInfo: require(\"./BankAccountInfo\"),\n  BankingRequestMessageSet: require(\"./BankingRequestMessageSet\"),\n  BankingResponseMessageSet: require(\"./BankingResponseMessageSet\"),\n  BankStatementRequest: require(\"./BankStatementRequest\"),\n  BankStatementRequestTransaction: require(\"./BankStatementRequestTransaction\"),\n  BankStatementResponse: require(\"./BankStatementResponse\"),\n  BankStatementResponseTransaction: require(\"./BankStatementResponseTransaction\"),\n};\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Common details about an account.\n *\n * @class\n */\nfunction AccountDetails() {\n}\n\n/**\n * The account number.\n *\n * @return {String} The account number.\n */\nAccountDetails.prototype.getAccountNumber = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The account key.\n *\n * @return {String} The account key.\n */\nAccountDetails.prototype.getAccountKey = function() { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = AccountDetails;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Marker interface for account information.\n *\n * @class\n */\nfunction AccountInfo() {\n}\n\n/**\n * The account details.\n *\n * @return {AccountDetails} The account details.\n */\nAccountInfo.prototype.getAccountDetails = function() { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = AccountInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * @enum\n */\nvar AccountStatus = {\n\n  /**\n   * Available, but not yet requested.\n   */\n  AVAIL: \"AVAIL\",\n\n  /**\n   * Requested, but not yet available.\n   */\n  PEND: \"PEND\",\n\n  /**\n   * Active.\n   */\n  ACTIVE: \"ACTIVE\",\n\n};\n\n\nmodule.exports = AccountStatus;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\n\n/**\n * @class\n */\nfunction BalanceInfo () {\n\n  /**\n   * @name BalanceInfo#amount\n   * @type double\n   * @access private\n   */\n  this.amount = null;\n\n  /**\n   * @name BalanceInfo#asOfDate\n   * @type Date\n   * @access private\n   */\n  this.asOfDate = null;\n}\n\n\n\nAggregate.add(\"BalanceInfo\", BalanceInfo);\n\n\n/**\n * The amount.\n *\n * @return {double} The amount.\n */\nBalanceInfo.prototype.getAmount = function() {\n  return this.amount;\n};\nElement.add(BalanceInfo, {name: \"BALAMT\", required: true, order: 0, attributeType: Number, readMethod: \"getAmount\", writeMethod: \"setAmount\"});\n\n\n/**\n * The amount.\n *\n * @param {double} amount The amount.\n */\nBalanceInfo.prototype.setAmount = function(amount) {\n  this.amount = amount;\n};\n\n\n/**\n * The as-of date.\n *\n * @return {Date} The as-of date.\n */\nBalanceInfo.prototype.getAsOfDate = function() {\n  return this.asOfDate;\n};\nElement.add(BalanceInfo, {name: \"DTASOF\", required: true, order: 10, attributeType: Date, readMethod: \"getAsOfDate\", writeMethod: \"setAsOfDate\"});\n\n\n/**\n * The as-of date.\n *\n * @param {Date} asOfDate The as-of date.\n */\nBalanceInfo.prototype.setAsOfDate = function(asOfDate) {\n  this.asOfDate = asOfDate;\n};\n\n\n\n\nmodule.exports = BalanceInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar Currency = require(\"./Currency\");\n\n/**\n * @class\n * See \"Section 3.1.3, OFX Spec\"\n */\nfunction BalanceRecord () {\n\n  /**\n   * @name BalanceRecord#name\n   * @type String\n   * @access private\n   */\n  this.name = null;\n\n  /**\n   * @name BalanceRecord#description\n   * @type String\n   * @access private\n   */\n  this.description = null;\n\n  /**\n   * @name BalanceRecord#type\n   * @type Type\n   * @access private\n   */\n  this.type = null;\n\n  /**\n   * @name BalanceRecord#value\n   * @type String\n   * @access private\n   */\n  this.value = null;\n\n  /**\n   * @name BalanceRecord#timestamp\n   * @type Date\n   * @access private\n   */\n  this.timestamp = null;\n\n  /**\n   * @name BalanceRecord#currency\n   * @type Currency\n   * @access private\n   */\n  this.currency = null;\n}\n\n\n\nAggregate.add(\"BAL\", BalanceRecord);\n\n\n/**\n * @enum\n */\nvar Type = BalanceRecord.Type = {\n\n  DOLLAR: \"DOLLAR\",\n\n  PERCENT: \"PERCENT\",\n\n  NUMBER: \"NUMBER\"\n};\n\n/**\n * Name of the balance.\n *\n * @return {String} Name of the balance.\n */\nBalanceRecord.prototype.getName = function() {\n  return this.name;\n};\nElement.add(BalanceRecord, {name: \"NAME\", required: true, order: 0, attributeType: String, readMethod: \"getName\", writeMethod: \"setName\"});\n\n\n/**\n * Name of the balance.\n *\n * @param {String} name Name of the balance.\n */\nBalanceRecord.prototype.setName = function(name) {\n  this.name = name;\n};\n\n\n/**\n * Description of the balance.\n *\n * @return {String} Description of the balance.\n */\nBalanceRecord.prototype.getDescription = function() {\n  return this.description;\n};\nElement.add(BalanceRecord, {name: \"DESC\", required: true, order: 10, attributeType: String, readMethod: \"getDescription\", writeMethod: \"setDescription\"});\n\n\n/**\n * Description of the balance.\n *\n * @param {String} description Description of the balance.\n */\nBalanceRecord.prototype.setDescription = function(description) {\n  this.description = description;\n};\n\n\n/**\n * Type of the balance.\n *\n * @return {Type} Type of the balance.\n */\nBalanceRecord.prototype.getType = function() {\n  return this.type;\n};\nElement.add(BalanceRecord, {name: \"BALTYPE\", required: true, order: 20, attributeType: Type, readMethod: \"getType\", writeMethod: \"setType\"});\n\n\n/**\n * Type of the balance.\n *\n * @param {Type} type Type of the balance.\n */\nBalanceRecord.prototype.setType = function(type) {\n  this.type = type;\n};\n\n\n/**\n * The value of the balance.\n *\n * @return {String} The value of the balance.\n */\nBalanceRecord.prototype.getValue = function() {\n  return this.value;\n};\nElement.add(BalanceRecord, {name: \"VALUE\", required: true, order: 30, attributeType: String, readMethod: \"getValue\", writeMethod: \"setValue\"});\n\n\n/**\n * The value of the balance.\n *\n * @param {String} value The value of the balance.\n */\nBalanceRecord.prototype.setValue = function(value) {\n  this.value = value;\n};\n\n\n/**\n * Timestamp of the balance.\n *\n * @return {Date} Timestamp of the balance.\n */\nBalanceRecord.prototype.getTimestamp = function() {\n  return this.timestamp;\n};\nElement.add(BalanceRecord, {name: \"DTASOF\", order: 40, attributeType: Date, readMethod: \"getTimestamp\", writeMethod: \"setTimestamp\"});\n\n\n/**\n * Timestamp of the balance.\n *\n * @param {Date} timestamp Timestamp of the balance.\n */\nBalanceRecord.prototype.setTimestamp = function(timestamp) {\n  this.timestamp = timestamp;\n};\n\n\n/**\n * Currency.\n *\n * @return {Currency} Currency.\n */\nBalanceRecord.prototype.getCurrency = function() {\n  return this.currency;\n};\nChildAggregate.add(BalanceRecord, {order: 50, attributeType: Currency, readMethod: \"getCurrency\", writeMethod: \"setCurrency\"});\n\n\n/**\n * Currency.\n *\n * @param {Currency} currency Currency.\n */\nBalanceRecord.prototype.setCurrency = function(currency) {\n  this.currency = currency;\n};\n\n\n\n\nmodule.exports = BalanceRecord;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * @enum\n */\nvar CorrectionAction = {\n\n  REPLACE: \"REPLACE\",\n\n  DELETE: \"DELETE\"\n};\n\n\nmodule.exports = CorrectionAction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\n\n/**\n * @class\n * See \"Section 5.2, OFX Spec\"\n */\nfunction Currency () {\n\n  /**\n   * @name Currency#code\n   * @type String\n   * @access private\n   */\n  this.code = \"USD\";\n\n  /**\n   * @name Currency#exchangeRate\n   * @type Float\n   * @access private\n   */\n  this.exchangeRate = null;\n}\n\n\n\nAggregate.add(\"CURRENCY\", Currency);\n\n\n/**\n * The currency code.\n *\n * @return {String} The currency code.\n * @see java.util.Currency#getCurrencyCode()\n */\nCurrency.prototype.getCode = function() {\n  return this.code;\n};\nElement.add(Currency, {name: \"CURSYM\", required: true, order: 0, attributeType: String, readMethod: \"getCode\", writeMethod: \"setCode\"});\n\n\n/**\n * The currency code\n *\n * @param {String} code The currency code\n */\nCurrency.prototype.setCode = function(code) {\n  this.code = code;\n};\n\n\n/**\n * The exchange rate.\n *\n * @return {Float} The exchange rate.\n */\nCurrency.prototype.getExchangeRate = function() {\n  return this.exchangeRate;\n};\nElement.add(Currency, {name: \"CURRATE\", required: true, order: 10, attributeType: Number, readMethod: \"getExchangeRate\", writeMethod: \"setExchangeRate\"});\n\n\n/**\n * The exchange rate.\n *\n * @param {Float} exchangeRate The exchange rate.\n */\nCurrency.prototype.setExchangeRate = function(exchangeRate) {\n  this.exchangeRate = exchangeRate;\n};\n\n\n\n\nmodule.exports = Currency;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\n\n/**\n * @class\n */\nfunction Payee () {\n\n  /**\n   * @name Payee#name\n   * @type String\n   * @access private\n   */\n  this.name = null;\n\n  /**\n   * @name Payee#address1\n   * @type String\n   * @access private\n   */\n  this.address1 = null;\n\n  /**\n   * @name Payee#address2\n   * @type String\n   * @access private\n   */\n  this.address2 = null;\n\n  /**\n   * @name Payee#address3\n   * @type String\n   * @access private\n   */\n  this.address3 = null;\n\n  /**\n   * @name Payee#city\n   * @type String\n   * @access private\n   */\n  this.city = null;\n\n  /**\n   * @name Payee#state\n   * @type String\n   * @access private\n   */\n  this.state = null;\n\n  /**\n   * @name Payee#zip\n   * @type String\n   * @access private\n   */\n  this.zip = null;\n\n  /**\n   * @name Payee#country\n   * @type String\n   * @access private\n   */\n  this.country = null;\n\n  /**\n   * @name Payee#phone\n   * @type String\n   * @access private\n   */\n  this.phone = null;\n}\n\n\n\nAggregate.add(\"PAYEE\", Payee);\n\n\n/**\n * The name of the payee.\n *\n * @return {String} The name of the payee.\n */\nPayee.prototype.getName = function() {\n  return this.name;\n};\nElement.add(Payee, {name: \"NAME\", order: 30, attributeType: String, readMethod: \"getName\", writeMethod: \"setName\"});\n\n\n/**\n * The name of the payee.\n *\n * @param {String} name The name of the payee.\n */\nPayee.prototype.setName = function(name) {\n  this.name = name;\n};\n\n\n/**\n * The address of the payee.\n *\n * @return {String} The address of the payee.\n */\nPayee.prototype.getAddress1 = function() {\n  return this.address1;\n};\nElement.add(Payee, {name: \"ADDR1\", required: true, order: 40, attributeType: String, readMethod: \"getAddress1\", writeMethod: \"setAddress1\"});\n\n\n/**\n * The address of the payee.\n *\n * @param {String} address1 The address of the payee.\n */\nPayee.prototype.setAddress1 = function(address1) {\n  this.address1 = address1;\n};\n\n\n/**\n * The address of the payee.\n *\n * @return {String} The address of the payee.\n */\nPayee.prototype.getAddress2 = function() {\n  return this.address2;\n};\nElement.add(Payee, {name: \"ADDR2\", order: 50, attributeType: String, readMethod: \"getAddress2\", writeMethod: \"setAddress2\"});\n\n\n/**\n * The address of the payee.\n *\n * @param {String} address2 The address of the payee.\n */\nPayee.prototype.setAddress2 = function(address2) {\n  this.address2 = address2;\n};\n\n\n/**\n * The address of the payee.\n *\n * @return {String} The address of the payee.\n */\nPayee.prototype.getAddress3 = function() {\n  return this.address3;\n};\nElement.add(Payee, {name: \"ADDR3\", order: 60, attributeType: String, readMethod: \"getAddress3\", writeMethod: \"setAddress3\"});\n\n\n/**\n * The address of the payee.\n *\n * @param {String} address3 The address of the payee.\n */\nPayee.prototype.setAddress3 = function(address3) {\n  this.address3 = address3;\n};\n\n\n/**\n * The city of the payee.\n *\n * @return {String} The city of the payee.\n */\nPayee.prototype.getCity = function() {\n  return this.city;\n};\nElement.add(Payee, {name: \"CITY\", required: true, order: 70, attributeType: String, readMethod: \"getCity\", writeMethod: \"setCity\"});\n\n\n/**\n * The city of the payee.\n *\n * @param {String} city The city of the payee.\n */\nPayee.prototype.setCity = function(city) {\n  this.city = city;\n};\n\n\n/**\n * The state of this payee.\n *\n * @return {String} The state of this payee.\n */\nPayee.prototype.getState = function() {\n  return this.state;\n};\nElement.add(Payee, {name: \"STATE\", required: true, order: 80, attributeType: String, readMethod: \"getState\", writeMethod: \"setState\"});\n\n\n/**\n * The state of this payee.\n *\n * @param {String} state The state of this payee.\n */\nPayee.prototype.setState = function(state) {\n  this.state = state;\n};\n\n\n/**\n * The postal code of this payee.\n *\n * @return {String} The postal code of this payee.\n */\nPayee.prototype.getZip = function() {\n  return this.zip;\n};\nElement.add(Payee, {name: \"POSTALCODE\", required: true, order: 90, attributeType: String, readMethod: \"getZip\", writeMethod: \"setZip\"});\n\n\n/**\n * The postal code of this payee.\n *\n * @param {String} zip The postal code of this payee.\n */\nPayee.prototype.setZip = function(zip) {\n  this.zip = zip;\n};\n\n\n/**\n * The country code for this payee.\n *\n * @return {String} The country code for this payee.\n * @see java.util.Locale#getISO3Country()\n */\nPayee.prototype.getCountry = function() {\n  return this.country;\n};\nElement.add(Payee, {name: \"COUNTRY\", required: true, order: 100, attributeType: String, readMethod: \"getCountry\", writeMethod: \"setCountry\"});\n\n\n/**\n * The country code for this payee.\n *\n * @param {String} country The country code for this payee.\n */\nPayee.prototype.setCountry = function(country) {\n  this.country = country;\n};\n\n\n/**\n * The phone number.\n *\n * @return {String} The phone number.\n */\nPayee.prototype.getPhone = function() {\n  return this.phone;\n};\nElement.add(Payee, {name: \"PHONE\", order: 110, attributeType: String, readMethod: \"getPhone\", writeMethod: \"setPhone\"});\n\n\n/**\n * The phone number.\n *\n * @param {String} phone The phone number.\n */\nPayee.prototype.setPhone = function(phone) {\n  this.phone = phone;\n};\n\n\n\n\nmodule.exports = Payee;\n","/*\n * Copyright 2012 TheStash\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Day of week used in \"PROCDAYSOFF\" lists.\n *\n * @enum\n * @see \"OFX Spec, Section 13.6.2\"\n */\nvar ProcessorDayOff = {\n  MONDAY: \"MONDAY\",\n  TUESDAY: \"TUESDAY\",\n  WEDNESDAY: \"WEDNESDAY\",\n  THURSDAY: \"THURSDAY\",\n  FRIDAY: \"FRIDAY\",\n  SATURDAY: \"SATURDAY\",\n  SUNDAY: \"SUNDAY\",\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"MONDAY\" === ofxVal) {\n      return this.MONDAY;\n    } else if (\"TUESDAY\" === ofxVal) {\n      return this.TUESDAY;\n    } else if (\"WEDNESDAY\" === ofxVal) {\n      return this.WEDNESDAY;\n    } else if (\"THURSDAY\" === ofxVal) {\n      return this.THURSDAY;\n    } else if (\"FRIDAY\" === ofxVal) {\n      return this.FRIDAY;\n    } else if (\"SATURDAY\" === ofxVal) {\n      return this.SATURDAY;\n    } else if (\"SUNDAY\" === ofxVal) {\n      return this.SUNDAY;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = ProcessorDayOff;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\n\n/**\n * @class\n */\nfunction StatementRange () {\n\n  /**\n   * @name StatementRange#start\n   * @type Date\n   * @access private\n   */\n  this.start = null;\n\n  /**\n   * @name StatementRange#end\n   * @type Date\n   * @access private\n   */\n  this.end = null;\n\n  /**\n   * @name StatementRange#includeTransactions\n   * @type Boolean\n   * @access private\n   */\n  this.includeTransactions = Boolean.TRUE;\n}\n\n\n\nAggregate.add(\"INCTRAN\", StatementRange);\n\n\n/**\n * The start of the statement range.\n *\n * @return {Date} The start of the statement range.\n */\nStatementRange.prototype.getStart = function() {\n  return this.start;\n};\nElement.add(StatementRange, {name: \"DTSTART\", order: 0, attributeType: Date, readMethod: \"getStart\", writeMethod: \"setStart\"});\n\n\n/**\n * The start of the statement range.\n *\n * @param {Date} start The start of the statement range.\n */\nStatementRange.prototype.setStart = function(start) {\n  this.start = start;\n};\n\n\n/**\n * The end of the statement range.\n *\n * @return {Date} The end of the statement range.\n */\nStatementRange.prototype.getEnd = function() {\n  return this.end;\n};\nElement.add(StatementRange, {name: \"DTEND\", order: 10, attributeType: Date, readMethod: \"getEnd\", writeMethod: \"setEnd\"});\n\n\n/**\n * The end of the statement range.\n *\n * @param {Date} end The end of the statement range.\n */\nStatementRange.prototype.setEnd = function(end) {\n  this.end = end;\n};\n\n\n/**\n * Whether to include transactions.\n *\n * @return {Boolean} Whether to include transactions.\n */\nStatementRange.prototype.getIncludeTransactions = function() {\n  return this.includeTransactions;\n};\nElement.add(StatementRange, {name: \"INCLUDE\", required: true, order: 20, attributeType: Boolean, readMethod: \"getIncludeTransactions\", writeMethod: \"setIncludeTransactions\"});\n\n\n/**\n * Whether to include transactions.\n *\n * @param {Boolean} includeTransactions Whether to include transactions.\n */\nStatementRange.prototype.setIncludeTransactions = function(includeTransactions) {\n  this.includeTransactions = includeTransactions;\n};\n\n\n\n\nmodule.exports = StatementRange;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar RequestMessage = require(\"../RequestMessage\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar StatementRange = require(\"./StatementRange\");\n\n/**\n * @class\n * @augments RequestMessage\n */\nfunction StatementRequest () {\n  RequestMessage.call(this);\n\n  /**\n   * @name StatementRequest#statementRange\n   * @type StatementRange\n   * @access private\n   */\n  this.statementRange = null;\n}\n\ninherit(StatementRequest, \"extends\", RequestMessage);\n\n\nAggregate.add(\"STMTRQ\", StatementRequest);\n\n\n/**\n * The statement range.\n *\n * @return {StatementRange} The statement range.\n */\nStatementRequest.prototype.getStatementRange = function() {\n  return this.statementRange;\n};\nChildAggregate.add(StatementRequest, {name: \"INCTRAN\", required: false, order: 10, attributeType: StatementRange, readMethod: \"getStatementRange\", writeMethod: \"setStatementRange\"});\n\n\n/**\n * The statement range.\n *\n * @param {StatementRange} statementRange The statement range.\n */\nStatementRequest.prototype.setStatementRange = function(statementRange) {\n  this.statementRange = statementRange;\n};\n\n\n\n\nmodule.exports = StatementRequest;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar ResponseMessage = require(\"../ResponseMessage\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar AccountStatement = require(\"../../../client/AccountStatement\");\nvar TransactionList = require(\"./TransactionList\");\nvar BalanceInfo = require(\"./BalanceInfo\");\n\n/**\n * @class\n * @augments ResponseMessage\n * @augments AccountStatement\n */\nfunction StatementResponse () {\n  ResponseMessage.call(this);\n\n  /**\n   * @name StatementResponse#currencyCode\n   * @type String\n   * @access private\n   */\n  this.currencyCode = \"USD\";\n\n  /**\n   * @name StatementResponse#transactionList\n   * @type TransactionList\n   * @access private\n   */\n  this.transactionList = null;\n\n  /**\n   * @name StatementResponse#ledgerBalance\n   * @type BalanceInfo\n   * @access private\n   */\n  this.ledgerBalance = null;\n\n  /**\n   * @name StatementResponse#availableBalance\n   * @type BalanceInfo\n   * @access private\n   */\n  this.availableBalance = null;\n\n  /**\n   * @name StatementResponse#marketingInfo\n   * @type String\n   * @access private\n   */\n  this.marketingInfo = null;\n}\n\ninherit(StatementResponse, \"extends\", ResponseMessage);\ninherit(StatementResponse, \"implements\", AccountStatement);\n\n\n\n\n/**\n * The currency code.\n *\n * @return {String} The currency code.\n * @see java.util.Currency#getCurrencyCode()\n */\nStatementResponse.prototype.getCurrencyCode = function() {\n  return this.currencyCode;\n};\nElement.add(StatementResponse, {name: \"CURDEF\", required: true, order: 0, attributeType: String, readMethod: \"getCurrencyCode\", writeMethod: \"setCurrencyCode\"});\n\n\n/**\n * The currency code.\n *\n * @param {String} currencyCode The currency code.\n */\nStatementResponse.prototype.setCurrencyCode = function(currencyCode) {\n  this.currencyCode = currencyCode;\n};\n\n\n/**\n * The transaction list.\n *\n * @return {TransactionList} The transaction list.\n */\nStatementResponse.prototype.getTransactionList = function() {\n  return this.transactionList;\n};\nChildAggregate.add(StatementResponse, {order: 20, attributeType: TransactionList, readMethod: \"getTransactionList\", writeMethod: \"setTransactionList\"});\n\n\n/**\n * The transaction list.\n *\n * @param {TransactionList} transactionList The transaction list.\n */\nStatementResponse.prototype.setTransactionList = function(transactionList) {\n  this.transactionList = transactionList;\n};\n\n\n/**\n * The ledger balance.\n *\n * @return {BalanceInfo} The ledger balance.\n */\nStatementResponse.prototype.getLedgerBalance = function() {\n  return this.ledgerBalance;\n};\nChildAggregate.add(StatementResponse, {name: \"LEDGERBAL\", order: 30, attributeType: BalanceInfo, readMethod: \"getLedgerBalance\", writeMethod: \"setLedgerBalance\"});\n\n\n/**\n * The ledger balance.\n *\n * @param {BalanceInfo} ledgerBalance The ledger balance.\n */\nStatementResponse.prototype.setLedgerBalance = function(ledgerBalance) {\n  this.ledgerBalance = ledgerBalance;\n};\n\n\n/**\n * The available balance.\n *\n * @return {BalanceInfo} The available balance.\n */\nStatementResponse.prototype.getAvailableBalance = function() {\n  return this.availableBalance;\n};\nChildAggregate.add(StatementResponse, {name: \"AVAILBAL\", order: 40, attributeType: BalanceInfo, readMethod: \"getAvailableBalance\", writeMethod: \"setAvailableBalance\"});\n\n\n/**\n * The available balance.\n *\n * @param {BalanceInfo} availableBalance The available balance.\n */\nStatementResponse.prototype.setAvailableBalance = function(availableBalance) {\n  this.availableBalance = availableBalance;\n};\n\n\n/**\n * Marketing information. (?)\n *\n * @return {String} Marketing information.\n */\nStatementResponse.prototype.getMarketingInfo = function() {\n  return this.marketingInfo;\n};\nElement.add(StatementResponse, {name: \"MKTGINFO\", order: 50, attributeType: String, readMethod: \"getMarketingInfo\", writeMethod: \"setMarketingInfo\"});\n\n\n/**\n * Marketing information. (?)\n *\n * @param {String} marketingInfo Marketing information.\n */\nStatementResponse.prototype.setMarketingInfo = function(marketingInfo) {\n  this.marketingInfo = marketingInfo;\n};\n\n\n\n\nmodule.exports = StatementResponse;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar StatusCode = require(\"./StatusCode\");\n\n/**\n * Transaction status element.\n *\n * @class\n * See \"Section 3.1.4, OFX Spec\"\n */\nfunction Status () {\n\n  /**\n   * @name Status#code\n   * @type StatusCode\n   * @access private\n   */\n  this.code = Status.KnownCode.SUCCESS;\n\n  /**\n   * @name Status#severity\n   * @type Severity\n   * @access private\n   */\n  this.severity = null;\n\n  /**\n   * @name Status#message\n   * @type String\n   * @access private\n   */\n  this.message = null;\n}\n\n\n\nAggregate.add(\"STATUS\", Status);\n\n\nvar Severity = Status.Severity = {\n  INFO: 0,\n  WARN: 1,\n  ERROR: 2\n};\n\nStatus.KnownCode = function(/*int*/ code, /*String*/ message, /*Severity*/ defaultSeverity) {\n\n  /**\n   * @name Status.KnownCode#code\n   * @type int\n   * @access private\n   */\n  this.code = code;\n\n  /**\n   * @name Status.KnownCode#message\n   * @type String\n   * @access private\n   */\n  this.message = message;\n\n  /**\n   * @name Status.KnownCode#defaultSeverity\n   * @type Severity\n   * @access private\n   */\n  this.defaultSeverity = defaultSeverity;\n};\n\ninherit(Status.KnownCode, \"implements\", StatusCode);\n\n\nStatus.KnownCode.SUCCESS = new Status.KnownCode(0, \"Success\", Severity.INFO);\nStatus.KnownCode.CLIENT_UP_TO_DATE = new Status.KnownCode(1, \"Client is up-to-date\", Severity.INFO);\nStatus.KnownCode.GENERAL_ERROR = new Status.KnownCode(2000, \"General error.\", Severity.ERROR);\nStatus.KnownCode.GENERAL_ACCOUNT_ERROR = new Status.KnownCode(2002, \"General account error.\", Severity.ERROR);\nStatus.KnownCode.ACCOUNT_NOT_FOUND = new Status.KnownCode(2003, \"Account not found.\", Severity.ERROR);\nStatus.KnownCode.ACCOUNT_CLOSED = new Status.KnownCode(2004, \"Account closed.\", Severity.ERROR);\nStatus.KnownCode.ACCOUNT_NOT_AUTHORIZED = new Status.KnownCode(2005, \"Account not authorized.\", Severity.ERROR);\nStatus.KnownCode.DATE_TOO_SOON = new Status.KnownCode(2014, \"Date too soon\", Severity.ERROR);\nStatus.KnownCode.DUPLICATE_REQUEST = new Status.KnownCode(2019, \"Duplicate request.\", Severity.ERROR);\nStatus.KnownCode.UNSUPPORTED_VERSION = new Status.KnownCode(2021, \"Unsupported version\", Severity.ERROR);\nStatus.KnownCode.INVALID_TAN = new Status.KnownCode(2022, \"Invalid transaction authorization number.\", Severity.ERROR);\nStatus.KnownCode.MFA_CHALLENGE_REQUIRED = new Status.KnownCode(3000, \"Further authentication required.\", Severity.ERROR);\nStatus.KnownCode.MFA_CHALLENGE_FAILED = new Status.KnownCode(3001, \"MFA failed.\", Severity.ERROR);\nStatus.KnownCode.PASSWORD_CHANGE_REQUIRED = new Status.KnownCode(15000, \"Password change required.\", Severity.INFO);\nStatus.KnownCode.SIGNON_INVALID = new Status.KnownCode(15500, \"Invalid signon\", Severity.ERROR);\nStatus.KnownCode.CUSTOMER_ACCOUNT_IN_USE = new Status.KnownCode(15501, \"Customer account in use.\", Severity.ERROR);\nStatus.KnownCode.PASSWORD_LOCKED = new Status.KnownCode(15502, \"Password locked.\", Severity.ERROR);\nStatus.KnownCode.INVALID_CLIENT_UID = new Status.KnownCode(15510, \"Invalid client UID.\", Severity.ERROR);\nStatus.KnownCode.CONTACT_FI = new Status.KnownCode(15511, \"User must contact FI.\", Severity.ERROR);\nStatus.KnownCode.AUTHTOKEN_REQUIRED = new Status.KnownCode(15512, \"Auth token required.\", Severity.ERROR);\nStatus.KnownCode.INVALID_AUTHTOKEN = new Status.KnownCode(15513, \"Invalid auth token.\", Severity.ERROR);\nStatus.KnownCode.NO_DATA = new Status.KnownCode(14701, \"No Tax Data for Account.\", Severity.ERROR);\nStatus.KnownCode.DB_EXCEPTION = new Status.KnownCode(14702,\"Database error has occured.\",Severity.ERROR);\nStatus.KnownCode.NO_TAXSUPPORT = new Status.KnownCode(14703,\"This Tax Year is not supported.\",Severity.ERROR);\n\n/**\n * @returns int\n */\nStatus.KnownCode.prototype.getCode = function() {\n  return this.code;\n};\n\n/**\n * @returns String\n */\nStatus.KnownCode.prototype.getMessage = function() {\n  return this.message;\n};\n\n/**\n * @returns Severity\n */\nStatus.KnownCode.prototype.getDefaultSeverity = function() {\n  return this.defaultSeverity;\n};\n\n/**\n * @param {int} code\n * @returns KnownCode\n */\nStatus.KnownCode.fromCode = function(code) {\n  for (var key in Status.KnownCode) {\n    var value = Status.KnownCode[key];\n    if (value instanceof Status.KnownCode && value.getCode() == code) {\n      return value;\n    }\n  }\n  return null;\n};\n\n/**\n * @returns String\n */\nStatus.KnownCode.prototype.toString = function() {\n  return this.code.toString();\n};\n\n/**\n * Status code.\n *\n * @return {StatusCode} The status code.\n */\nStatus.prototype.getCode = function() {\n  return this.code;\n};\nElement.add(Status, {name: \"CODE\", required: true, order: 0, attributeType: StatusCode, readMethod: \"getCode\", writeMethod: \"setCode\"});\n\n\n/**\n * Status code.\n *\n * @param {StatusCode} code Status code.\n */\nStatus.prototype.setCode = function(code) {\n  this.code = code;\n  if (!this.severity) {\n    this.severity = code.getDefaultSeverity();\n  }\n};\n\n\n/**\n * The severity.\n *\n * @return {Severity} The severity.\n */\nStatus.prototype.getSeverity = function() {\n  return this.severity;\n};\nElement.add(Status, {name: \"SEVERITY\", required: true, order: 10, attributeType: Severity, readMethod: \"getSeverity\", writeMethod: \"setSeverity\"});\n\n\n/**\n * The severity.\n *\n * @param {Severity} severity The severity.\n */\nStatus.prototype.setSeverity = function(severity) {\n  this.severity = severity;\n};\n\n\n/**\n * Server-supplied message.\n *\n * @return {String} Server-supplied message.\n */\nStatus.prototype.getMessage = function() {\n  return this.message;\n};\nElement.add(Status, {name: \"MESSAGE\", order: 20, attributeType: String, readMethod: \"getMessage\", writeMethod: \"setMessage\"});\n\n\n/**\n * Server-supplied message.\n *\n * @param {String} message Server-supplied message.\n */\nStatus.prototype.setMessage = function(message) {\n  this.message = message;\n};\n\n\n\n\nmodule.exports = Status;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * @class\n */\nfunction StatusCode() {\n}\n\nStatusCode.prototype.getCode = function() { throw new Error(\"not implemented\"); };\n\nStatusCode.prototype.getMessage = function() { throw new Error(\"not implemented\"); };\n\nStatusCode.prototype.getDefaultSeverity = function() { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = StatusCode;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * A status holder (usually applied to a response).\n *\n * @class\n */\nfunction StatusHolder() {\n}\n\n/**\n * The name of this status holder (for error reporting).\n *\n * @return {String} The name of this status holder (for error reporting).\n */\nStatusHolder.prototype.getStatusHolderName = function() { throw new Error(\"not implemented\"); };\n\n/**\n * Get the status.\n *\n * @return {Status} The status.\n */\nStatusHolder.prototype.getStatus = function() { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = StatusHolder;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar RequestMessage = require(\"../RequestMessage\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\n\n/**\n * @class\n * @augments ResponseMessage\n */\nfunction T1099Request () {\n  RequestMessage.call(this);\n}\n\ninherit(T1099Request, \"extends\", RequestMessage);\n\n\nAggregate.add(\"STMTRQ\", T1099Request);\n\n\n\n\nmodule.exports = T1099Request;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar ResponseMessage = require(\"../ResponseMessage\");\n\n/**\n * @class\n * @augments ResponseMessage\n */\nfunction T1099Response () {\n  ResponseMessage.call(this);\n}\n\ninherit(T1099Response, \"extends\", ResponseMessage);\n\n\n\n\n\n\nmodule.exports = T1099Response;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar TransactionType = require(\"./TransactionType\");\nvar CorrectionAction = require(\"./CorrectionAction\");\nvar Payee = require(\"./Payee\");\nvar BankAccountDetails = require(\"../banking/BankAccountDetails\");\nvar CreditCardAccountDetails = require(\"../creditcard/CreditCardAccountDetails\");\nvar Currency = require(\"./Currency\");\n\n/**\n * @class\n */\nfunction Transaction () {\n\n  /**\n   * @name Transaction#transactionType\n   * @type TransactionType\n   * @access private\n   */\n  this.transactionType = null;\n\n  /**\n   * @name Transaction#datePosted\n   * @type Date\n   * @access private\n   */\n  this.datePosted = null;\n\n  /**\n   * @name Transaction#dateInitiated\n   * @type Date\n   * @access private\n   */\n  this.dateInitiated = null;\n\n  /**\n   * @name Transaction#dateAvailable\n   * @type Date\n   * @access private\n   */\n  this.dateAvailable = null;\n\n  /**\n   * @name Transaction#amount\n   * @type BigDecimal\n   * @access private\n   */\n  this.amount = null;\n\n  /**\n   * @name Transaction#id\n   * @type String\n   * @access private\n   */\n  this.id = null;\n\n  /**\n   * @name Transaction#correctionId\n   * @type String\n   * @access private\n   */\n  this.correctionId = null;\n\n  /**\n   * @name Transaction#correctionAction\n   * @type CorrectionAction\n   * @access private\n   */\n  this.correctionAction = null;\n\n  /**\n   * @name Transaction#tempId\n   * @type String\n   * @access private\n   */\n  this.tempId = null;\n\n  /**\n   * @name Transaction#checkNumber\n   * @type String\n   * @access private\n   */\n  this.checkNumber = null;\n\n  /**\n   * @name Transaction#referenceNumber\n   * @type String\n   * @access private\n   */\n  this.referenceNumber = null;\n\n  /**\n   * @name Transaction#standardIndustrialCode\n   * @type String\n   * @access private\n   */\n  this.standardIndustrialCode = null;\n\n  /**\n   * @name Transaction#payeeId\n   * @type String\n   * @access private\n   */\n  this.payeeId = null;\n\n  /**\n   * @name Transaction#name\n   * @type String\n   * @access private\n   */\n  this.name = null;\n\n  /**\n   * @name Transaction#payee\n   * @type Payee\n   * @access private\n   */\n  this.payee = null;\n\n  /**\n   * @name Transaction#bankAccountTo\n   * @type BankAccountDetails\n   * @access private\n   */\n  this.bankAccountTo = null;\n\n  /**\n   * @name Transaction#creditCardAccountTo\n   * @type CreditCardAccountDetails\n   * @access private\n   */\n  this.creditCardAccountTo = null;\n\n  /**\n   * @name Transaction#memo\n   * @type String\n   * @access private\n   */\n  this.memo = null;\n\n  /**\n   * @name Transaction#currency\n   * @type Currency\n   * @access private\n   */\n  this.currency = null;\n\n  /**\n   * @name Transaction#originalCurrency\n   * @type Currency\n   * @access private\n   */\n  this.originalCurrency = null;\n}\n\n\n\nAggregate.add(\"STMTTRN\", Transaction);\n\n\n/**\n * The transaction type.\n *\n * @return {TransactionType} The transaction type.\n */\nTransaction.prototype.getTransactionType = function() {\n  return this.transactionType;\n};\nElement.add(Transaction, {name: \"TRNTYPE\", required: true, order: 0, attributeType: TransactionType, readMethod: \"getTransactionType\", writeMethod: \"setTransactionType\"});\n\n\n/**\n * The transaction type.\n *\n * @param {TransactionType} transactionType The transaction type.\n */\nTransaction.prototype.setTransactionType = function(transactionType) {\n  this.transactionType = transactionType;\n};\n\n\n/**\n * The date the transaction was posted.\n *\n * @return {Date} The date the transaction was posted.\n */\nTransaction.prototype.getDatePosted = function() {\n  return this.datePosted;\n};\nElement.add(Transaction, {name: \"DTPOSTED\", required: true, order: 10, attributeType: Date, readMethod: \"getDatePosted\", writeMethod: \"setDatePosted\"});\n\n\n/**\n * The date the transaction was posted.\n *\n * @param {Date} datePosted The date the transaction was posted.\n */\nTransaction.prototype.setDatePosted = function(datePosted) {\n  this.datePosted = datePosted;\n};\n\n\n/**\n * The date the transaction was initiated.\n *\n * @return {Date} The date the transaction was initiated.\n */\nTransaction.prototype.getDateInitiated = function() {\n  return this.dateInitiated;\n};\nElement.add(Transaction, {name: \"DTUSER\", order: 20, attributeType: Date, readMethod: \"getDateInitiated\", writeMethod: \"setDateInitiated\"});\n\n\n/**\n * The date the transaction was initiated.\n *\n * @param {Date} dateInitiated The date the transaction was initiated.\n */\nTransaction.prototype.setDateInitiated = function(dateInitiated) {\n  this.dateInitiated = dateInitiated;\n};\n\n\n/**\n * The date the funds are available.\n *\n * @return {Date} The date the funds are available.\n */\nTransaction.prototype.getDateAvailable = function() {\n  return this.dateAvailable;\n};\nElement.add(Transaction, {name: \"DTAVAIL\", order: 30, attributeType: Date, readMethod: \"getDateAvailable\", writeMethod: \"setDateAvailable\"});\n\n\n/**\n * The date the funds are available.\n *\n * @param {Date} dateAvailable The date the funds are available.\n */\nTransaction.prototype.setDateAvailable = function(dateAvailable) {\n  this.dateAvailable = dateAvailable;\n};\n\n\n/**\n * The transaction amount.\n *\n * @return {Double} The transaction amount.\n */\nTransaction.prototype.getAmount = function() {\n  return this.amount;\n};\n\n\n/**\n * The transaction amount.\n *\n * @param {Double} amount The transaction amount.\n */\nTransaction.prototype.setAmount = function(amount) {\n  this.amount = amount;\n};\n\n\n/**\n * The transaction amount.\n *\n * @return {BigDecimal} The transaction amount.\n */\nTransaction.prototype.getBigDecimalAmount = function() {\n  return this.amount;\n};\nElement.add(Transaction, {name: \"TRNAMT\", required: true, order: 40, attributeType: Number, readMethod: \"getBigDecimalAmount\", writeMethod: \"setBigDecimalAmount\"});\n\n\n/**\n * The transaction amount.\n *\n * @param {BigDecimal} amount The transaction amount.\n */\nTransaction.prototype.setBigDecimalAmount = function(amount) {\n  this.amount = amount;\n};\n\n\n/**\n * The transaction id (server-assigned).\n *\n * @return {String} The transaction id (server-assigned).\n */\nTransaction.prototype.getId = function() {\n  return this.id;\n};\nElement.add(Transaction, {name: \"FITID\", required: true, order: 50, attributeType: String, readMethod: \"getId\", writeMethod: \"setId\"});\n\n\n/**\n * The transaction id (server-assigned).\n *\n * @param {String} id The transaction id (server-assigned).\n */\nTransaction.prototype.setId = function(id) {\n  this.id = id;\n};\n\n\n/**\n * The id of the transaction that this is correcting.\n *\n * @return {String} The id of the transaction that this is correcting.\n */\nTransaction.prototype.getCorrectionId = function() {\n  return this.correctionId;\n};\nElement.add(Transaction, {name: \"CORRECTFITID\", order: 60, attributeType: String, readMethod: \"getCorrectionId\", writeMethod: \"setCorrectionId\"});\n\n\n/**\n * The id of the transaction that this is correcting.\n *\n * @param {String} correctionId The id of the transaction that this is correcting.\n */\nTransaction.prototype.setCorrectionId = function(correctionId) {\n  this.correctionId = correctionId;\n};\n\n\n/**\n * The action to take on the {@link Transaction#getCorrectionId() corrected transaction}.\n *\n * @return {CorrectionAction} The action to take on the {@link Transaction#getCorrectionId() corrected transaction}.\n */\nTransaction.prototype.getCorrectionAction = function() {\n  return this.correctionAction;\n};\nElement.add(Transaction, {name: \"CORRECTACTION\", order: 70, attributeType: CorrectionAction, readMethod: \"getCorrectionAction\", writeMethod: \"setCorrectionAction\"});\n\n\n/**\n * The action to take on the {@link Transaction#getCorrectionId() corrected transaction}.\n *\n * @param {CorrectionAction} correctionAction The action to take on the {@link Transaction#getCorrectionId() corrected transaction}.\n */\nTransaction.prototype.setCorrectionAction = function(correctionAction) {\n  this.correctionAction = correctionAction;\n};\n\n\n/**\n * The server-assigned temporary id for client-initiated transactions.\n *\n * @return {String} The server-assigned temporary id for client-initiated transactions.\n */\nTransaction.prototype.getTempId = function() {\n  return this.tempId;\n};\nElement.add(Transaction, {name: \"SRVRTID\", order: 80, attributeType: String, readMethod: \"getTempId\", writeMethod: \"setTempId\"});\n\n\n/**\n * The server-assigned temporary id for client-initiated transactions.\n *\n * @param {String} tempId The server-assigned temporary id for client-initiated transactions.\n */\nTransaction.prototype.setTempId = function(tempId) {\n  this.tempId = tempId;\n};\n\n\n/**\n * The check number.\n *\n * @return {String} The check number.\n */\nTransaction.prototype.getCheckNumber = function() {\n  return this.checkNumber;\n};\nElement.add(Transaction, {name: \"CHECKNUM\", order: 90, attributeType: String, readMethod: \"getCheckNumber\", writeMethod: \"setCheckNumber\"});\n\n\n/**\n * The check number.\n *\n * @param {String} checkNumber The check number.\n */\nTransaction.prototype.setCheckNumber = function(checkNumber) {\n  this.checkNumber = checkNumber;\n};\n\n\n/**\n * The reference number.\n *\n * @return {String} The reference number.\n */\nTransaction.prototype.getReferenceNumber = function() {\n  return this.referenceNumber;\n};\nElement.add(Transaction, {name: \"REFNUM\", order: 100, attributeType: String, readMethod: \"getReferenceNumber\", writeMethod: \"setReferenceNumber\"});\n\n\n/**\n * The reference number.\n *\n * @param {String} referenceNumber The reference number.\n */\nTransaction.prototype.setReferenceNumber = function(referenceNumber) {\n  this.referenceNumber = referenceNumber;\n};\n\n\n/**\n * The standard industrial code.\n *\n * @return {String} The standard industrial code.\n */\nTransaction.prototype.getStandardIndustrialCode = function() {\n  return this.standardIndustrialCode;\n};\nElement.add(Transaction, {name: \"SIC\", order: 110, attributeType: String, readMethod: \"getStandardIndustrialCode\", writeMethod: \"setStandardIndustrialCode\"});\n\n\n/**\n * The standard industrial code.\n *\n * @param {String} standardIndustrialCode The standard industrial code.\n */\nTransaction.prototype.setStandardIndustrialCode = function(standardIndustrialCode) {\n  this.standardIndustrialCode = standardIndustrialCode;\n};\n\n\n/**\n * The payee id.\n *\n * @return {String} The payee id.\n */\nTransaction.prototype.getPayeeId = function() {\n  return this.payeeId;\n};\nElement.add(Transaction, {name: \"PAYEEID\", order: 120, attributeType: String, readMethod: \"getPayeeId\", writeMethod: \"setPayeeId\"});\n\n\n/**\n * The payee id.\n *\n * @param {String} payeeId The payee id.\n */\nTransaction.prototype.setPayeeId = function(payeeId) {\n  this.payeeId = payeeId;\n};\n\n\n/**\n * The name (description) or the transaction.\n *\n * @return {String} The name (description) or the transaction.\n */\nTransaction.prototype.getName = function() {\n  return this.name;\n};\nElement.add(Transaction, {name: \"NAME\", order: 130, attributeType: String, readMethod: \"getName\", writeMethod: \"setName\"});\n\n\n/**\n * The name (description) or the transaction.\n *\n * @param {String} name The name (description) or the transaction.\n */\nTransaction.prototype.setName = function(name) {\n  this.name = name;\n};\n\n\n/**\n * The payee.\n *\n * @return {Payee} The payee.\n */\nTransaction.prototype.getPayee = function() {\n  return this.payee;\n};\nChildAggregate.add(Transaction, {order: 140, attributeType: Payee, readMethod: \"getPayee\", writeMethod: \"setPayee\"});\n\n\n/**\n * The payee.\n *\n * @param {Payee} payee The payee.\n */\nTransaction.prototype.setPayee = function(payee) {\n  this.payee = payee;\n};\n\n\n/**\n * The bank account the transfer was to.\n *\n * @return {BankAccountDetails} The bank account the transfer was to.\n */\nTransaction.prototype.getBankAccountTo = function() {\n  return this.bankAccountTo;\n};\nChildAggregate.add(Transaction, {name: \"BANKACCTTO\", order: 150, attributeType: BankAccountDetails, readMethod: \"getBankAccountTo\", writeMethod: \"setBankAccountTo\"});\n\n\n/**\n * The bank account the transfer was to.\n *\n * @param {BankAccountDetails} bankAccountTo The bank account the transfer was to.\n */\nTransaction.prototype.setBankAccountTo = function(bankAccountTo) {\n  this.bankAccountTo = bankAccountTo;\n};\n\n\n/**\n * The credit-card account the transfer was to.\n *\n * @return {CreditCardAccountDetails} The credit-card account the transfer was to.\n */\nTransaction.prototype.getCreditCardAccountTo = function() {\n  return this.creditCardAccountTo;\n};\nChildAggregate.add(Transaction, {name: \"CCACCTTO\", order: 160, attributeType: CreditCardAccountDetails, readMethod: \"getCreditCardAccountTo\", writeMethod: \"setCreditCardAccountTo\"});\n\n\n/**\n * The credit-card account the transfer was to.\n *\n * @param {CreditCardAccountDetails} creditCardAccountTo The credit-card account the transfer was to.\n */\nTransaction.prototype.setCreditCardAccountTo = function(creditCardAccountTo) {\n  this.creditCardAccountTo = creditCardAccountTo;\n};\n\n\n/**\n * Notes.\n *\n * @return {String} Notes.\n */\nTransaction.prototype.getMemo = function() {\n  return this.memo;\n};\nElement.add(Transaction, {name: \"MEMO\", order: 170, attributeType: String, readMethod: \"getMemo\", writeMethod: \"setMemo\"});\n\n\n/**\n * Notes.\n *\n * @param {String} memo Notes.\n */\nTransaction.prototype.setMemo = function(memo) {\n  this.memo = memo;\n};\n\n\n/**\n * The currency.\n *\n * @return {Currency} The currency.\n */\nTransaction.prototype.getCurrency = function() {\n  return this.currency;\n};\nChildAggregate.add(Transaction, {order: 180, attributeType: Currency, readMethod: \"getCurrency\", writeMethod: \"setCurrency\"});\n\n\n/**\n * The currency.\n *\n * @param {Currency} currency The currency.\n */\nTransaction.prototype.setCurrency = function(currency) {\n  this.currency = currency;\n};\n\n\n/**\n * The original currency.\n *\n * @return {Currency} The original currency.\n */\nTransaction.prototype.getOriginalCurrency = function() {\n  return this.originalCurrency;\n};\nChildAggregate.add(Transaction, {name: \"ORIGCURRENCY\", order: 190, attributeType: Currency, readMethod: \"getOriginalCurrency\", writeMethod: \"setOriginalCurrency\"});\n\n\n/**\n * The original currency.\n *\n * @param {Currency} originalCurrency The original currency.\n */\nTransaction.prototype.setOriginalCurrency = function(originalCurrency) {\n  this.originalCurrency = originalCurrency;\n};\n\n\n\n\nmodule.exports = Transaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Transaction = require(\"./Transaction\");\n\n/**\n * @class\n */\nfunction TransactionList () {\n\n  /**\n   * @name TransactionList#start\n   * @type Date\n   * @access private\n   */\n  this.start = null;\n\n  /**\n   * @name TransactionList#end\n   * @type Date\n   * @access private\n   */\n  this.end = null;\n\n  /**\n   * @name TransactionList#transactions\n   * @type Transaction[]\n   * @access private\n   */\n  this.transactions = null;\n}\n\n\n\nAggregate.add(\"BANKTRANLIST\", TransactionList);\n\n\n/**\n * The start date.\n *\n * @return {Date} The start date.\n */\nTransactionList.prototype.getStart = function() {\n  return this.start;\n};\nElement.add(TransactionList, {name: \"DTSTART\", required: true, order: 0, attributeType: Date, readMethod: \"getStart\", writeMethod: \"setStart\"});\n\n\n/**\n * The start date.\n *\n * @param {Date} start The start date.\n */\nTransactionList.prototype.setStart = function(start) {\n  this.start = start;\n};\n\n\n/**\n * The end date.\n *\n * @return {Date} The end date.\n */\nTransactionList.prototype.getEnd = function() {\n  return this.end;\n};\nElement.add(TransactionList, {name: \"DTEND\", required: true, order: 10, attributeType: Date, readMethod: \"getEnd\", writeMethod: \"setEnd\"});\n\n\n/**\n * The end date.\n *\n * @param {Date} end The end date.\n */\nTransactionList.prototype.setEnd = function(end) {\n  this.end = end;\n};\n\n\n/**\n * The transaction list.\n *\n * @return {Transaction[]} The transaction list.\n */\nTransactionList.prototype.getTransactions = function() {\n  return this.transactions;\n};\nChildAggregate.add(TransactionList, {order: 20, attributeType: Array, collectionEntryType: Transaction, readMethod: \"getTransactions\", writeMethod: \"setTransactions\"});\n\n\n/**\n * The transaction list.\n *\n * @param {Transaction[]} transactions The transaction list.\n */\nTransactionList.prototype.setTransactions = function(transactions) {\n  this.transactions = transactions;\n};\n\n\n\n\nmodule.exports = TransactionList;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * @enum\n */\nvar TransactionType = {\n\n  /**\n   * generic credit.\n   */\n  CREDIT: \"CREDIT\",\n\n  /**\n   * genertic debit.\n   */\n  DEBIT: \"DEBIT\",\n\n  /**\n   * interest earned.\n   */\n  INT: \"INT\",\n\n  /**\n   * dividend.\n   */\n  DIV: \"DIV\",\n\n  /**\n   * bank fee.\n   */\n  FEE: \"FEE\",\n\n  /**\n   * service charge.\n   */\n  SRVCHG: \"SRVCHG\",\n\n  /**\n   * deposit.\n   */\n  DEP: \"DEP\",\n\n  /**\n   * ATM transaction.\n   */\n  ATM: \"ATM\",\n\n  /**\n   * point of sale\n   */\n  POS: \"POS\",\n\n  /**\n   * transfer\n   */\n  XFER: \"XFER\",\n\n  /**\n   * check\n   */\n  CHECK: \"CHECK\",\n\n  /**\n   * electronic payment\n   */\n  PAYMENT: \"PAYMENT\",\n\n  /**\n   * cash.\n   */\n  CASH: \"CASH\",\n\n  /**\n   * direct deposit.\n   */\n  DIRECTDEP: \"DIRECTDEP\",\n\n  /**\n   * merchant-initiated debit\n   */\n  DIRECTDEBIT: \"DIRECTDEBIT\",\n\n  /**\n   * repeating payment.\n   */\n  REPEATPMT: \"REPEATPMT\",\n\n  /**\n   * other\n   */\n  OTHER: \"OTHER\",\n};\n\n\nmodule.exports = TransactionType;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar BankAccountDetails = require(\"../banking/BankAccountDetails\");\nvar CreditCardAccountDetails = require(\"../creditcard/CreditCardAccountDetails\");\n\n/**\n * @class\n */\nfunction TransferInfo () {\n\n  /**\n   * @name TransferInfo#bankAccountFrom\n   * @type BankAccountDetails\n   * @access private\n   */\n  this.bankAccountFrom = null;\n\n  /**\n   * @name TransferInfo#creditCardAccountFrom\n   * @type CreditCardAccountDetails\n   * @access private\n   */\n  this.creditCardAccountFrom = null;\n\n  /**\n   * @name TransferInfo#bankAccountTo\n   * @type BankAccountDetails\n   * @access private\n   */\n  this.bankAccountTo = null;\n\n  /**\n   * @name TransferInfo#creditCardAccountTo\n   * @type CreditCardAccountDetails\n   * @access private\n   */\n  this.creditCardAccountTo = null;\n\n  /**\n   * @name TransferInfo#amount\n   * @type Double\n   * @access private\n   */\n  this.amount = null;\n\n  /**\n   * @name TransferInfo#due\n   * @type Date\n   * @access private\n   */\n  this.due = null;\n}\n\n\n\nAggregate.add(\"XFERINFO\", TransferInfo);\n\n\n/**\n * The bank account to transfer from.\n *\n * @return {BankAccountDetails} The bank account to transfer from.\n */\nTransferInfo.prototype.getBankAccountFrom = function() {\n  return this.bankAccountFrom;\n};\nChildAggregate.add(TransferInfo, {name: \"BANKACCTFROM\", order: 0, attributeType: BankAccountDetails, readMethod: \"getBankAccountFrom\", writeMethod: \"setBankAccountFrom\"});\n\n\n/**\n * The bank account to transfer from.\n *\n * @param {BankAccountDetails} bankAccountFrom The bank account to transfer from.\n */\nTransferInfo.prototype.setBankAccountFrom = function(bankAccountFrom) {\n  this.creditCardAccountFrom = null;\n  this.bankAccountFrom = bankAccountFrom;\n};\n\n\n/**\n * The account to transfer from.\n *\n * @param {BankAccountDetails|CreditCardAccountDetails} accountFrom The account to transfer from.\n */\nTransferInfo.prototype.setAccountFrom = function(accountFrom) {\n  if (accountFrom instanceof BankAccountDetails) {\n    this.setBankAccountFrom(accountFrom);\n  } else if (accountFrom instanceof CreditCardAccountDetails) {\n    this.setCreditCardAccountFrom(accountFrom);\n  }\n};\n\n\n/**\n * The credit card to transfer from.\n *\n * @return {CreditCardAccountDetails} The credit card to transfer from.\n */\nTransferInfo.prototype.getCreditCardAccountFrom = function() {\n  return this.creditCardAccountFrom;\n};\nChildAggregate.add(TransferInfo, {name: \"CCACCTFROM\", order: 10, attributeType: CreditCardAccountDetails, readMethod: \"getCreditCardAccountFrom\", writeMethod: \"setCreditCardAccountFrom\"});\n\n\n/**\n * The credit card to transfer from.\n *\n * @param {CreditCardAccountDetails} creditCardAccountFrom The credit card to transfer from.\n */\nTransferInfo.prototype.setCreditCardAccountFrom = function(creditCardAccountFrom) {\n  this.bankAccountFrom = null;\n  this.creditCardAccountFrom = creditCardAccountFrom;\n};\n\n\n/**\n * The bank account to transfer to.\n *\n * @return {BankAccountDetails} The bank account to transfer to.\n */\nTransferInfo.prototype.getBankAccountTo = function() {\n  return this.bankAccountTo;\n};\nChildAggregate.add(TransferInfo, {name: \"BANKACCTTO\", order: 20, attributeType: BankAccountDetails, readMethod: \"getBankAccountTo\", writeMethod: \"setBankAccountTo\"});\n\n\n/**\n * The bank account to transfer to.\n *\n * @param {BankAccountDetails} bankAccountTo The bank account to transfer to.\n */\nTransferInfo.prototype.setBankAccountTo = function(bankAccountTo) {\n  this.creditCardAccountTo = null;\n  this.bankAccountTo = bankAccountTo;\n};\n\n\n/**\n * The bank account to transfer to.\n *\n * @param {BankAccountDetails|CreditCardAccountDetails} accountTo The bank account to transfer to.\n */\nTransferInfo.prototype.setAccountTo = function(accountTo) {\n  if (accountTo instanceof BankAccountDetails) {\n    this.setBankAccountTo(accountTo);\n  } else if (accountTo instanceof CreditCardAccountDetails) {\n    this.setCreditCardAccountTo(accountTo);\n  }\n};\n\n\n/**\n * The credit card account to transfer to.\n *\n * @return {CreditCardAccountDetails} The credit card account to transfer to.\n */\nTransferInfo.prototype.getCreditCardAccountTo = function() {\n  return this.creditCardAccountTo;\n};\nChildAggregate.add(TransferInfo, {name: \"CCACCTTO\", order: 30, attributeType: CreditCardAccountDetails, readMethod: \"getCreditCardAccountTo\", writeMethod: \"setCreditCardAccountTo\"});\n\n\n/**\n * The credit card account to transfer to.\n *\n * @param {CreditCardAccountDetails} creditCardAccountTo The credit card account to transfer to.\n */\nTransferInfo.prototype.setCreditCardAccountTo = function(creditCardAccountTo) {\n  this.bankAccountTo = null;\n  this.creditCardAccountTo = creditCardAccountTo;\n};\n\n\n/**\n * The amount.\n *\n * @return {Double} The amount.\n */\nTransferInfo.prototype.getAmount = function() {\n  return this.amount;\n};\nElement.add(TransferInfo, {name: \"TRNAMT\", required: true, order: 40, attributeType: Number, readMethod: \"getAmount\", writeMethod: \"setAmount\"});\n\n\n/**\n * The amount.\n *\n * @param {Double} amount The amount.\n */\nTransferInfo.prototype.setAmount = function(amount) {\n  this.amount = amount;\n};\n\n\n/**\n * The due date.\n *\n * @return {Date} The due date.\n */\nTransferInfo.prototype.getDue = function() {\n  return this.due;\n};\nElement.add(TransferInfo, {name: \"DTDUE\", order: 50, attributeType: Date, readMethod: \"getDue\", writeMethod: \"setDue\"});\n\n\n/**\n * The due date.\n *\n * @param {Date} due The due date.\n */\nTransferInfo.prototype.setDue = function(due) {\n  this.due = due;\n};\n\n\n\n\nmodule.exports = TransferInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar TransferStatusEvent = require(\"./TransferStatusEvent\");\n\n/**\n * @class\n */\nfunction TransferStatus () {\n\n  /**\n   * @name TransferStatus#event\n   * @type TransferStatusEvent\n   * @access private\n   */\n  this.event = null;\n\n  /**\n   * @name TransferStatus#date\n   * @type Date\n   * @access private\n   */\n  this.date = null;\n}\n\n\n\nAggregate.add(\"XFERPRCSTS\", TransferStatus);\n\n\n/**\n * The event.\n *\n * @return {TransferStatusEvent} The event.\n */\nTransferStatus.prototype.getEvent = function() {\n  return this.event;\n};\nElement.add(TransferStatus, {name: \"XFERPRCCODE\", required: true, order: 0, attributeType: TransferStatusEvent, readMethod: \"getEvent\", writeMethod: \"setEvent\"});\n\n\n/**\n * The event.\n *\n * @param {TransferStatusEvent} event The event.\n */\nTransferStatus.prototype.setEvent = function(event) {\n  this.event = event;\n};\n\n\n/**\n * The date of the event.\n *\n * @return {Date} The date of the event.\n */\nTransferStatus.prototype.getDate = function() {\n  return this.date;\n};\nElement.add(TransferStatus, {name: \"DTXFERPRC\", required: true, order: 10, attributeType: Date, readMethod: \"getDate\", writeMethod: \"setDate\"});\n\n\n/**\n * The date of the event.\n *\n * @param {Date} date The date of the event.\n */\nTransferStatus.prototype.setDate = function(date) {\n  this.date = date;\n};\n\n\n\n\nmodule.exports = TransferStatus;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * @enum\n */\nvar TransferStatusEvent = {\n\n  WILLPROCESSON: \"WILLPROCESSON\",\n\n  POSTEDON: \"POSTEDON\",\n\n  NOFUNDSON: \"NOFUNDSON\",\n\n  CANCELEDON: \"CANCELEDON\",\n\n  FAILEDON: \"FAILEDON\",\n};\n\n\nmodule.exports = TransferStatusEvent;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\nvar StatusCode = require(\"./StatusCode\");\n\n/**\n * Holder for an unknown status code.\n *\n * @class\n * @augments StatusCode\n */\nfunction UnknownStatusCode (/*int*/ code, /*String*/ message, /*Severity*/ defaultSeverity) {\n\n  /**\n   * @name UnknownStatusCode#code\n   * @type int\n   * @access private\n   */\n  this.code = code;\n\n  /**\n   * @name UnknownStatusCode#message\n   * @type String\n   * @access private\n   */\n  this.message = message;\n\n  /**\n   * @name UnknownStatusCode#defaultSeverity\n   * @type Status.Severity\n   * @access private\n   */\n  this.defaultSeverity = defaultSeverity;\n}\n\ninherit(UnknownStatusCode, \"implements\", StatusCode);\n\n\n\n\nUnknownStatusCode.prototype.getCode = function() {\n  return this.code;\n};\n\n\nUnknownStatusCode.prototype.getMessage = function() {\n  return this.message;\n};\n\n\nUnknownStatusCode.prototype.getDefaultSeverity = function() {\n  return this.defaultSeverity;\n};\n\n\n// @Override\nUnknownStatusCode.prototype.toString = function() {\n  return String.valueOf(this.code);\n};\n\n\n\n\nmodule.exports = UnknownStatusCode;\n","\"use strict\";\n\nmodule.exports = {\n  AccountDetails: require(\"./AccountDetails\"),\n  AccountInfo: require(\"./AccountInfo\"),\n  AccountStatus: require(\"./AccountStatus\"),\n  BalanceInfo: require(\"./BalanceInfo\"),\n  BalanceRecord: require(\"./BalanceRecord\"),\n  CorrectionAction: require(\"./CorrectionAction\"),\n  Currency: require(\"./Currency\"),\n  Payee: require(\"./Payee\"),\n  ProcessorDayOff: require(\"./ProcessorDayOff\"),\n  StatementRange: require(\"./StatementRange\"),\n  StatementRequest: require(\"./StatementRequest\"),\n  StatementResponse: require(\"./StatementResponse\"),\n  Status: require(\"./Status\"),\n  StatusCode: require(\"./StatusCode\"),\n  StatusHolder: require(\"./StatusHolder\"),\n  T1099Request: require(\"./T1099Request\"),\n  T1099Response: require(\"./T1099Response\"),\n  Transaction: require(\"./Transaction\"),\n  TransactionList: require(\"./TransactionList\"),\n  TransactionType: require(\"./TransactionType\"),\n  TransferInfo: require(\"./TransferInfo\"),\n  TransferStatus: require(\"./TransferStatus\"),\n  TransferStatusEvent: require(\"./TransferStatusEvent\"),\n  UnknownStatusCode: require(\"./UnknownStatusCode\"),\n};\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar Element = require(\"../../../meta/Element\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar AccountDetails = require(\"../common/AccountDetails\");\n\n/**\n * @class\n * \n * @see \"OFX Spec, Section 11.3.2\"\n * @augments AccountDetails\n */\nfunction CreditCardAccountDetails () {\n\n  /**\n   * @name CreditCardAccountDetails#accountNumber\n   * @type String\n   * @access private\n   */\n  this.accountNumber = null;\n\n  /**\n   * @name CreditCardAccountDetails#accountKey\n   * @type String\n   * @access private\n   */\n  this.accountKey = null;\n}\n\ninherit(CreditCardAccountDetails, \"implements\", AccountDetails);\n\n\nAggregate.add(\"CreditCardAccountDetails\", CreditCardAccountDetails);\n\n\n/**\n * The account number.\n *\n * @return {String} The account number.\n */\nCreditCardAccountDetails.prototype.getAccountNumber = function() {\n  return this.accountNumber;\n};\nElement.add(CreditCardAccountDetails, {name: \"ACCTID\", required: true, order: 0, attributeType: String, readMethod: \"getAccountNumber\", writeMethod: \"setAccountNumber\"});\n\n\n/**\n * The account number.\n *\n * @param {String} accountNumber The account number.\n */\nCreditCardAccountDetails.prototype.setAccountNumber = function(accountNumber) {\n  this.accountNumber = accountNumber;\n};\n\n\n/**\n * The account key.\n *\n * @return {String} The account key.\n */\nCreditCardAccountDetails.prototype.getAccountKey = function() {\n  return this.accountKey;\n};\nElement.add(CreditCardAccountDetails, {name: \"ACCKEY\", order: 10, attributeType: String, readMethod: \"getAccountKey\", writeMethod: \"setAccountKey\"});\n\n\n/**\n * The account key.\n *\n * @param {String} accountKey The account key.\n */\nCreditCardAccountDetails.prototype.setAccountKey = function(accountKey) {\n  this.accountKey = accountKey;\n};\n\n\n\n\nmodule.exports = CreditCardAccountDetails;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar AccountInfo = require(\"../common/AccountInfo\");\nvar AccountStatus = require(\"../common/AccountStatus\");\nvar CreditCardAccountDetails = require(\"./CreditCardAccountDetails\");\n\n/**\n * @class\n * @augments AccountInfo\n */\nfunction CreditCardAccountInfo () {\n\n  /**\n   * @name CreditCardAccountInfo#creditCardAccount\n   * @type CreditCardAccountDetails\n   * @access private\n   */\n  this.creditCardAccount = null;\n\n  /**\n   * @name CreditCardAccountInfo#supportsTransactionDetailOperations\n   * @type Boolean\n   * @access private\n   */\n  this.supportsTransactionDetailOperations = null;\n\n  /**\n   * @name CreditCardAccountInfo#supportsTransferToOtherAccountOperations\n   * @type Boolean\n   * @access private\n   */\n  this.supportsTransferToOtherAccountOperations = null;\n\n  /**\n   * @name CreditCardAccountInfo#supportsTransferFromOtherAccountOperations\n   * @type Boolean\n   * @access private\n   */\n  this.supportsTransferFromOtherAccountOperations = null;\n\n  /**\n   * @name CreditCardAccountInfo#status\n   * @type AccountStatus\n   * @access private\n   */\n  this.status = null;\n}\n\ninherit(CreditCardAccountInfo, \"implements\", AccountInfo);\n\n\nAggregate.add(\"CCACCTINFO\", CreditCardAccountInfo);\n\n\n/**\n * The credit card account this information is referencing.\n *\n * @return {CreditCardAccountDetails} The credit card account this information is referencing.\n */\nCreditCardAccountInfo.prototype.getCreditCardAccount = function() {\n  return this.creditCardAccount;\n};\nChildAggregate.add(CreditCardAccountInfo, {name: \"CCACCTFROM\", required: true, order: 0, attributeType: CreditCardAccountDetails, readMethod: \"getCreditCardAccount\", writeMethod: \"setCreditCardAccount\"});\n\n\n/**\n * The credit card account this information is referencing.\n *\n * @param {CreditCardAccountDetails} creditCardAccount The credit card account this information is referencing.\n */\nCreditCardAccountInfo.prototype.setCreditCardAccount = function(creditCardAccount) {\n  this.creditCardAccount = creditCardAccount;\n};\n\n\n// Inherited.\nCreditCardAccountInfo.prototype.getAccountDetails = function() {\n  return this.getCreditCardAccount();\n};\n\n\n/**\n * Whether this account supports download of transaction details.\n *\n * @return {Boolean} Whether this account supports download of transaction details.\n */\nCreditCardAccountInfo.prototype.getSupportsTransactionDetailOperations = function() {\n  return this.supportsTransactionDetailOperations;\n};\nElement.add(CreditCardAccountInfo, {name: \"SUPTXDL\", required: true, order: 10, attributeType: Boolean, readMethod: \"getSupportsTransactionDetailOperations\", writeMethod: \"setSupportsTransactionDetailOperations\"});\n\n\n/**\n * Whether this account supports download of transaction details.\n *\n * @param {Boolean} supportsTransactionDetailOperations Whether this account supports download of transaction details.\n */\nCreditCardAccountInfo.prototype.setSupportsTransactionDetailOperations = function(supportsTransactionDetailOperations) {\n  this.supportsTransactionDetailOperations = supportsTransactionDetailOperations;\n};\n\n\n/**\n * Whether this account supports transfer operations to other accounts.\n *\n * @return {Boolean} Whether this account supports transfer operations to other accounts.\n */\nCreditCardAccountInfo.prototype.getSupportsTransferToOtherAccountOperations = function() {\n  return this.supportsTransferToOtherAccountOperations;\n};\nElement.add(CreditCardAccountInfo, {name: \"XFERSRC\", required: true, order: 20, attributeType: Boolean, readMethod: \"getSupportsTransferToOtherAccountOperations\", writeMethod: \"setSupportsTransferToOtherAccountOperations\"});\n\n\n/**\n * Whether this account supports transfer operations to other accounts.\n *\n * @param {Boolean} supportsTransferToOtherAccountOperations Whether this account supports transfer operations to other accounts.\n */\nCreditCardAccountInfo.prototype.setSupportsTransferToOtherAccountOperations = function(supportsTransferToOtherAccountOperations) {\n  this.supportsTransferToOtherAccountOperations = supportsTransferToOtherAccountOperations;\n};\n\n\n/**\n * Whether this account supports transfer operations from other accounts.\n *\n * @return {Boolean} Whether this account supports transfer operations from other accounts.\n */\nCreditCardAccountInfo.prototype.getSupportsTransferFromOtherAccountOperations = function() {\n  return this.supportsTransferFromOtherAccountOperations;\n};\nElement.add(CreditCardAccountInfo, {name: \"XFERDEST\", required: true, order: 30, attributeType: Boolean, readMethod: \"getSupportsTransferFromOtherAccountOperations\", writeMethod: \"setSupportsTransferFromOtherAccountOperations\"});\n\n\n/**\n * Whether this account supports transfer operations from other accounts.\n *\n * @param {Boolean} supportsTransferFromOtherAccountOperations Whether this account supports transfer operations from other accounts.\n */\nCreditCardAccountInfo.prototype.setSupportsTransferFromOtherAccountOperations = function(supportsTransferFromOtherAccountOperations) {\n  this.supportsTransferFromOtherAccountOperations = supportsTransferFromOtherAccountOperations;\n};\n\n\n/**\n * The account status.\n *\n * @return {AccountStatus} The account status.\n */\nCreditCardAccountInfo.prototype.getStatus = function() {\n  return this.status;\n};\nElement.add(CreditCardAccountInfo, {name: \"SVCSTATUS\", required: true, order: 40, attributeType: AccountStatus, readMethod: \"getStatus\", writeMethod: \"setStatus\"});\n\n\n/**\n * The account status.\n *\n * @param {AccountStatus} status The account status.\n */\nCreditCardAccountInfo.prototype.setStatus = function(status) {\n  this.status = status;\n};\n\n\n\n\nmodule.exports = CreditCardAccountInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar MessageSetType = require(\"../MessageSetType\");\nvar RequestMessageSet = require(\"../RequestMessageSet\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar CreditCardStatementRequestTransaction = require(\"./CreditCardStatementRequestTransaction\");\n\n/**\n * @class\n * @augments CreditCardRequestMessageSet\n */\nfunction CreditCardRequestMessageSet () {\n  RequestMessageSet.call(this);\n\n  /**\n   * @name CreditCardRequestMessageSet#statementRequest\n   * @type CreditCardStatementRequestTransaction\n   * @access private\n   */\n  this.statementRequest = null;\n}\n\ninherit(CreditCardRequestMessageSet, \"extends\", RequestMessageSet);\n\n\nAggregate.add(\"CREDITCARDMSGSRQV1\", CreditCardRequestMessageSet);\n\n\nCreditCardRequestMessageSet.prototype.getType = function() {\n  return MessageSetType.creditcard;\n};\n\n\n/**\n * The request.\n *\n * @return {CreditCardStatementRequestTransaction} The request.\n */\nCreditCardRequestMessageSet.prototype.getStatementRequest = function() {\n  return this.statementRequest;\n};\nChildAggregate.add(CreditCardRequestMessageSet, {order: 0, attributeType: CreditCardStatementRequestTransaction, readMethod: \"getStatementRequest\", writeMethod: \"setStatementRequest\"});\n\n\n/**\n * The request.\n *\n * @param {CreditCardStatementRequestTransaction} statementRequest The request.\n */\nCreditCardRequestMessageSet.prototype.setStatementRequest = function(statementRequest) {\n  this.statementRequest = statementRequest;\n};\n\n\n// Inherited.\nCreditCardRequestMessageSet.prototype.getRequestMessages = function() {\n  var requestMessages = [];\n  if (this.getStatementRequest()) {\n    requestMessages.push(this.getStatementRequest());\n  }\n  return requestMessages;\n};\n\n\n\n\nmodule.exports = CreditCardRequestMessageSet;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar MessageSetType = require(\"../MessageSetType\");\nvar ResponseMessageSet = require(\"../ResponseMessageSet\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar CreditCardStatementResponseTransaction = require(\"./CreditCardStatementResponseTransaction\");\n\n/**\n * @class\n * @augments ResponseMessageSet\n */\nfunction CreditCardResponseMessageSet () {\n  ResponseMessageSet.call(this);\n\n  /**\n   * @name CreditCardResponseMessageSet#statementResponses\n   * @type CreditCardStatementResponseTransaction[]\n   * @access private\n   */\n  this.statementResponses = null;\n}\n\ninherit(CreditCardResponseMessageSet, \"extends\", ResponseMessageSet);\n\n\nAggregate.add(\"CREDITCARDMSGSRSV1\", CreditCardResponseMessageSet);\n\n\nCreditCardResponseMessageSet.prototype.getType = function() {\n  return MessageSetType.creditcard;\n};\n\n\n/**\n * The statement response list.\n *\n * Most OFX files have a single statement response, except MT2OFX\n * which outputs OFX with multiple statement responses\n * in a single banking response message set.\n *\n * @return {CreditCardStatementResponseTransaction[]} The statement response list.\n */\nCreditCardResponseMessageSet.prototype.getStatementResponses = function() {\n  return this.statementResponses;\n};\nChildAggregate.add(CreditCardResponseMessageSet, {order: 0, attributeType: Array, collectionEntryType: CreditCardStatementResponseTransaction, readMethod: \"getStatementResponses\", writeMethod: \"setStatementResponses\"});\n\n\n/**\n * The statement reponse list.\n *\n * @param {CreditCardStatementResponseTransaction[]} statementResponses The statement response list.\n */\nCreditCardResponseMessageSet.prototype.setStatementResponses = function(statementResponses) {\n  this.statementResponses = statementResponses;\n};\n\n\n/**\n * The first statement response.\n *\n * @return {CreditCardStatementResponseTransaction} the first bank statement response.\n * @deprecated Use getStatementResponses() because sometimes there are multiple responses\n */\nCreditCardResponseMessageSet.prototype.getStatementResponse = function() {\n  return !this.statementResponses || this.statementResponses.length === 0 ? null : this.statementResponses[0];\n};\n\n\n/**\n * The statement response.\n *\n * @param {CreditCardStatementResponseTransaction} statementResponse The statement response.\n */\nCreditCardResponseMessageSet.prototype.setStatementResponse = function(statementResponse) {\n  this.statementResponses = [statementResponse];\n};\n\n\n// Inherited.\nCreditCardResponseMessageSet.prototype.getResponseMessages = function() {\n  return this.statementResponses;\n};\n\n\n\n\nmodule.exports = CreditCardResponseMessageSet;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar StatementRequest = require(\"../common/StatementRequest\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar CreditCardAccountDetails = require(\"./CreditCardAccountDetails\");\n\n/**\n * @class\n * @augments StatementRequest\n */\nfunction CreditCardStatementRequest () {\n  StatementRequest.call(this);\n\n  /**\n   * @name CreditCardStatementRequest#account\n   * @type CreditCardAccountDetails\n   * @access private\n   */\n  this.account = null;\n}\n\ninherit(CreditCardStatementRequest, \"extends\", StatementRequest);\n\n\nAggregate.add(\"CCSTMTRQ\", CreditCardStatementRequest);\n\n\n/**\n * The account details.\n *\n * @return {CreditCardAccountDetails} The account details.\n */\nCreditCardStatementRequest.prototype.getAccount = function() {\n  return this.account;\n};\nChildAggregate.add(CreditCardStatementRequest, {name: \"CCACCTFROM\", required: true, order: 0, attributeType: CreditCardAccountDetails, readMethod: \"getAccount\", writeMethod: \"setAccount\"});\n\n\n/**\n * The account details.\n *\n * @param {CreditCardAccountDetails} account The account details.\n */\nCreditCardStatementRequest.prototype.setAccount = function(account) {\n  this.account = account;\n};\n\n\n\n\nmodule.exports = CreditCardStatementRequest;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar CreditCardStatementRequest = require(\"./CreditCardStatementRequest\");\nvar TransactionWrappedRequestMessage = require(\"../TransactionWrappedRequestMessage\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\n\n/**\n * @class\n * @augments TransactionWrappedRequestMessage\n */\nfunction CreditCardStatementRequestTransaction () {\n  TransactionWrappedRequestMessage.call(this);\n\n  /**\n   * @name CreditCardStatementRequestTransaction#message\n   * @type CreditCardStatementRequest\n   * @access private\n   */\n  this.message = null;\n}\n\ninherit(CreditCardStatementRequestTransaction, \"extends\", TransactionWrappedRequestMessage);\n\n\nAggregate.add(\"CCSTMTTRNRQ\", CreditCardStatementRequestTransaction);\n\n\n/**\n * The message.\n *\n * @return {CreditCardStatementRequest} The message.\n */\nCreditCardStatementRequestTransaction.prototype.getMessage = function() {\n  return this.message;\n};\nChildAggregate.add(CreditCardStatementRequestTransaction, {required: true, order: 30, attributeType: CreditCardStatementRequest, readMethod: \"getMessage\", writeMethod: \"setMessage\"});\n\n\n/**\n * The message.\n *\n * @param {CreditCardStatementRequest} message The message.\n *\n */\nCreditCardStatementRequestTransaction.prototype.setMessage = function(message) {\n  this.message = message;\n};\n\n\n// Inherited.\nCreditCardStatementRequestTransaction.prototype.setWrappedMessage = function(/*CreditCardStatementRequest*/ message) {\n  this.setMessage(message);\n};\n\n\n\n\nmodule.exports = CreditCardStatementRequestTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar StatementResponse = require(\"../common/StatementResponse\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar CreditCardAccountDetails = require(\"./CreditCardAccountDetails\");\n\n/**\n * @class\n * @augments StatementResponse\n */\nfunction CreditCardStatementResponse () {\n  StatementResponse.call(this);\n\n  /**\n   * @name CreditCardStatementResponse#account\n   * @type CreditCardAccountDetails\n   * @access private\n   */\n  this.account = null;\n}\n\ninherit(CreditCardStatementResponse, \"extends\", StatementResponse);\n\n\nAggregate.add(\"CCSTMTRS\", CreditCardStatementResponse);\n\n\nCreditCardStatementResponse.prototype.getResponseMessageName = function() {\n  return \"credit card statement\";\n};\n\n\n/**\n * The account for the statement.\n *\n * @return {CreditCardAccountDetails} The account for the statement.\n */\nCreditCardStatementResponse.prototype.getAccount = function() {\n  return this.account;\n};\nChildAggregate.add(CreditCardStatementResponse, {name:\"CCACCTFROM\", order: 10, attributeType: CreditCardAccountDetails, readMethod: \"getAccount\", writeMethod: \"setAccount\"});\n\n\n/**\n * The account for the statement.\n *\n * @param {CreditCardAccountDetails} account The account for the statement.\n */\nCreditCardStatementResponse.prototype.setAccount = function(account) {\n  this.account = account;\n};\n\n\n\n\nmodule.exports = CreditCardStatementResponse;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar CreditCardStatementResponse = require(\"./CreditCardStatementResponse\");\nvar TransactionWrappedResponseMessage = require(\"../TransactionWrappedResponseMessage\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\n\n/**\n * @class\n * @augments TransactionWrappedResponseMessage\n */\nfunction CreditCardStatementResponseTransaction () {\n  TransactionWrappedResponseMessage.call(this);\n\n  /**\n   * @name CreditCardStatementResponseTransaction#message\n   * @type CreditCardStatementResponse\n   * @access private\n   */\n  this.message = null;\n}\n\ninherit(CreditCardStatementResponseTransaction, \"extends\", TransactionWrappedResponseMessage);\n\n\nAggregate.add(\"CCSTMTTRNRS\", CreditCardStatementResponseTransaction);\n\n\n/**\n * The message.\n *\n * @return {CreditCardStatementResponse} The message.\n */\nCreditCardStatementResponseTransaction.prototype.getMessage = function() {\n  return this.message;\n};\nChildAggregate.add(CreditCardStatementResponseTransaction, {required: true, order: 30, attributeType: CreditCardStatementResponse, readMethod: \"getMessage\", writeMethod: \"setMessage\"});\n\n\n/**\n * The message.\n *\n * @param {CreditCardStatementResponse} message The message.\n */\nCreditCardStatementResponseTransaction.prototype.setMessage = function(message) {\n  this.message = message;\n};\n\n\n// Inherited.\nCreditCardStatementResponseTransaction.prototype.getWrappedMessage = function() {\n  return this.getMessage();\n};\n\n\n\n\nmodule.exports = CreditCardStatementResponseTransaction;\n","\"use strict\";\n\nmodule.exports = {\n  CreditCardAccountDetails: require(\"./CreditCardAccountDetails\"),\n  CreditCardAccountInfo: require(\"./CreditCardAccountInfo\"),\n  CreditCardRequestMessageSet: require(\"./CreditCardRequestMessageSet\"),\n  CreditCardResponseMessageSet: require(\"./CreditCardResponseMessageSet\"),\n  CreditCardStatementRequest: require(\"./CreditCardStatementRequest\"),\n  CreditCardStatementRequestTransaction: require(\"./CreditCardStatementRequestTransaction\"),\n  CreditCardStatementResponse: require(\"./CreditCardStatementResponse\"),\n  CreditCardStatementResponseTransaction: require(\"./CreditCardStatementResponseTransaction\"),\n};\n","\"use strict\";\n\nmodule.exports = {\n  banking: require(\"./banking/index\"),\n  common: require(\"./common/index\"),\n  creditcard: require(\"./creditcard/index\"),\n  investment: require(\"./investment/index\"),\n  profile: require(\"./profile/index\"),\n  seclist: require(\"./seclist/index\"),\n  signon: require(\"./signon/index\"),\n  signup: require(\"./signup/index\"),\n  tax1099: require(\"./tax1099/index\"),\n\n  ApplicationSecurity: require(\"./ApplicationSecurity\"),\n  MessageSetProfile: require(\"./MessageSetProfile\"),\n  MessageSetType: require(\"./MessageSetType\"),\n  RequestEnvelope: require(\"./RequestEnvelope\"),\n  RequestMessage: require(\"./RequestMessage\"),\n  RequestMessageSet: require(\"./RequestMessageSet\"),\n  ResponseEnvelope: require(\"./ResponseEnvelope\"),\n  ResponseMessage: require(\"./ResponseMessage\"),\n  ResponseMessageSet: require(\"./ResponseMessageSet\"),\n  SignonProfile: require(\"./SignonProfile\"),\n  TransactionWrappedRequestMessage: require(\"./TransactionWrappedRequestMessage\"),\n  TransactionWrappedResponseMessage: require(\"./TransactionWrappedResponseMessage\")\n};\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Type of investment account.\n *\n * @enum\n * @see \"OFX Spec, Section 13.6.2\"\n */\nvar AccountType = {\n  INDIVIDUAL: \"INDIVIDUAL\",\n  JOINT: \"JOINT\",\n  TRUST: \"TRUST\",\n  CORPORATE: \"CORPORATE\",\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"INDIVIDUAL\" === ofxVal) {\n      return AccountType.INDIVIDUAL;\n    } else if (\"JOINT\" === ofxVal) {\n      return AccountType.JOINT;\n    } else if (\"CORPORATE\" === ofxVal) {\n      return AccountType.CORPORATE;\n    } else if (\"CORPORATE\" === ofxVal) {\n      return AccountType.CORPORATE;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = AccountType;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Activation status of an account.\n * See \"Section 13.6.2, OFX Spec\"\n *\n * @enum\n */\nvar ActivationStatus = {\n  ACTIVE: \"ACTIVE\",\n  PENDING: \"PENDING\",\n  AVAILABLE: \"AVAILABLE\",\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"ACTIVE\" === ofxVal) {\n      return ActivationStatus.ACTIVE;\n    } else if (\"PEND\" === ofxVal) {\n      return ActivationStatus.PENDING;\n    } else if (\"AVAIL\" === ofxVal) {\n      return ActivationStatus.AVAILABLE;\n    } else {\n      return null;\n    }\n  }\n}\n;\n\n\nmodule.exports = ActivationStatus;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar AccountDetails = require(\"../../common/AccountDetails\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\n\n/**\n * Aggregate for the details that identifity a brokerage account.\n *\n * @class\n * @augments AccountDetails\n * @see \"OFX Spec, Section 13.6.1\"\n */\nfunction InvestmentAccountDetails () {\n\n  /**\n   * @name InvestmentAccountDetails#brokerId\n   * @type String\n   * @access private\n   */\n  this.brokerId = null;\n\n  /**\n   * @name InvestmentAccountDetails#accountNumber\n   * @type String\n   * @access private\n   */\n  this.accountNumber = null;\n\n  /**\n   * @name InvestmentAccountDetails#accountKey\n   * @type String\n   * @access private\n   */\n  this.accountKey = null;\n}\n\ninherit(InvestmentAccountDetails, \"implements\", AccountDetails);\n\n\nAggregate.add(\"InvestmentAccountDetails\", InvestmentAccountDetails);\n\n\n/**\n * Gets the broker id.\n *\n * @return {String} the id of the broker\n */\nInvestmentAccountDetails.prototype.getBrokerId = function() {\n  return this.brokerId;\n};\nElement.add(InvestmentAccountDetails, {name: \"BROKERID\", required: true, order: 0, attributeType: String, readMethod: \"getBrokerId\", writeMethod: \"setBrokerId\"});\n\n\n/**\n * Sets the broker id.\n *\n * @param {String} brokerId the id of the broker\n */\nInvestmentAccountDetails.prototype.setBrokerId = function(brokerId) {\n  this.brokerId = brokerId;\n};\n\n\n/**\n * Gets the account number.\n *\n * @return {String} the account number\n */\nInvestmentAccountDetails.prototype.getAccountNumber = function() {\n  return this.accountNumber;\n};\nElement.add(InvestmentAccountDetails, {name: \"ACCTID\", required: true, order: 20, attributeType: String, readMethod: \"getAccountNumber\", writeMethod: \"setAccountNumber\"});\n\n\n/**\n * Sets the account number.\n *\n * @param {String} accountNumber the account number\n */\nInvestmentAccountDetails.prototype.setAccountNumber = function(accountNumber) {\n  this.accountNumber = accountNumber;\n};\n\n\n/**\n * Gets the account key.\n *\n * @return {String} the account key\n */\nInvestmentAccountDetails.prototype.getAccountKey = function() {\n  return this.accountKey;\n};\nElement.add(InvestmentAccountDetails, {name: \"ACCTKEY\", order: 40, attributeType: String, readMethod: \"getAccountKey\", writeMethod: \"setAccountKey\"});\n\n\n/**\n * Sets the account key.\n *\n * @param {String} accountKey the account key\n */\nInvestmentAccountDetails.prototype.setAccountKey = function(accountKey) {\n  this.accountKey = accountKey;\n};\n\n\n\n\nmodule.exports = InvestmentAccountDetails;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar AccountInfo = require(\"../../common/AccountInfo\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar UnitedStatesAccountType = require(\"./UnitedStatesAccountType\");\nvar ActivationStatus = require(\"./ActivationStatus\");\nvar AccountType = require(\"./AccountType\");\nvar InvestmentAccountDetails = require(\"./InvestmentAccountDetails\");\n\n/**\n * Aggregate for the info about a brokerage account.\n *\n * @class\n * @augments AccountInfo\n * @see \"OFX Spec, Section 13.6.2\"\n */\nfunction InvestmentAccountInfo () {\n\n  /**\n   * @name InvestmentAccountInfo#investmentAccount\n   * @type InvestmentAccountDetails\n   * @access private\n   */\n  this.investmentAccount = null;\n\n  /**\n   * @name InvestmentAccountInfo#unitedStatesAccountType\n   * @type String\n   * @access private\n   */\n  this.unitedStatesAccountType = null;\n\n  /**\n   * @name InvestmentAccountInfo#supportsChecking\n   * @type Boolean\n   * @access private\n   */\n  this.supportsChecking = null;\n\n  /**\n   * @name InvestmentAccountInfo#activationStatus\n   * @type String\n   * @access private\n   */\n  this.activationStatus = null;\n\n  /**\n   * @name InvestmentAccountInfo#investmentAccountType\n   * @type String\n   * @access private\n   */\n  this.investmentAccountType = null;\n\n  /**\n   * @name InvestmentAccountInfo#optionLevel\n   * @type String\n   * @access private\n   */\n  this.optionLevel = null;\n}\n\ninherit(InvestmentAccountInfo, \"implements\", AccountInfo);\n\n\nAggregate.add(\"INVACCTINFO\", InvestmentAccountInfo);\n\n\n/**\n * Gets the investment account this information is referencing.\n *\n * @return {InvestmentAccountDetails} the investment account this information is referencing\n */\nInvestmentAccountInfo.prototype.getInvestmentAccount = function() {\n  return this.investmentAccount;\n};\nChildAggregate.add(InvestmentAccountInfo, {name: \"INVACCTFROM\", required: true, order: 0, attributeType: InvestmentAccountDetails, readMethod: \"getInvestmentAccount\", writeMethod: \"setInvestmentAccount\"});\n\n\n/**\n * Sets the investment account this information is referencing. This is a required field\n * according to the OFX spec.\n *\n * @param {InvestmentAccountDetails} investmentAccount the investment account this information is referencing\n */\nInvestmentAccountInfo.prototype.setInvestmentAccount = function(investmentAccount) {\n  this.investmentAccount = investmentAccount;\n};\n\n\n// Inherited.\nInvestmentAccountInfo.prototype.getAccountDetails = function() {\n  return this.getInvestmentAccount();\n};\n\n\n/**\n * Gets the United States account type. This is a required field according to the OFX spec.\n * @see \"OFX Spec, Section 13.6.1\"\n *\n * @return {String} the United States account type\n */\nInvestmentAccountInfo.prototype.getUnitedStatesAccountType = function() {\n  return this.unitedStatesAccountType;\n};\nElement.add(InvestmentAccountInfo, {name: \"USPRODUCTTYPE\", required: true, order: 10, attributeType: String, readMethod: \"getUnitedStatesAccountType\", writeMethod: \"setUnitedStatesAccountType\"});\n\n\n/**\n * Sets United States account type. This is a required field according to the OFX spec.\n * @see \"OFX Spec, Section 13.6.1\"\n *\n * @param {String} unitedStatesAccountType the United States account type\n */\nInvestmentAccountInfo.prototype.setUnitedStatesAccountType = function(unitedStatesAccountType) {\n  this.unitedStatesAccountType = unitedStatesAccountType;\n};\n\n\n/**\n * Gets the United States account type as one of the well-known types.\n *\n * @return {UnitedStatesAccountType} the account type or null if it's not one of the well-known types\n */\nInvestmentAccountInfo.prototype.getUnitedStatesAccountTypeEnum = function() {\n  return UnitedStatesAccountType.fromOfx(this.unitedStatesAccountType);\n};\n\n\n/**\n * Gets whether the account supports checking. This is a required field according to the OFX spec.\n * @see \"OFX Spec, Section 13.6.1\"\n *\n * @return {Boolean} whether the account supports checking\n */\nInvestmentAccountInfo.prototype.getSupportsChecking = function() {\n  return this.supportsChecking;\n};\nElement.add(InvestmentAccountInfo, {name: \"CHECKING\", required: true, order: 20, attributeType: Boolean, readMethod: \"getSupportsChecking\", writeMethod: \"setSupportsChecking\"});\n\n\n/**\n * Sets whether the account supports checking. This is a required field according to the OFX spec.\n * @see \"OFX Spec, Section 13.6.1\"\n *\n * @param {Boolean} supportsChecking whether the account supports checking\n */\nInvestmentAccountInfo.prototype.setSupportsChecking = function(supportsChecking) {\n  this.supportsChecking = supportsChecking;\n};\n\n\n/**\n * Gets the activation status for investment statement download. This is a required field\n * according to the OFX spec.\n *\n * @return {String} the activation status\n */\nInvestmentAccountInfo.prototype.getActivationStatus = function() {\n  return this.activationStatus;\n};\nElement.add(InvestmentAccountInfo, {name: \"SVCSTATUS\", required: true, order: 30, attributeType: String, readMethod: \"getActivationStatus\", writeMethod: \"setActivationStatus\"});\n\n\n/**\n * Sets the activation status for investment statement download. This is a required field\n * according to the OFX spec.\n *\n * @param {String} activationStatus the activation status\n */\nInvestmentAccountInfo.prototype.setActivationStatus = function(activationStatus) {\n  this.activationStatus = activationStatus;\n};\n\n\n/**\n * Gets the activation status as one of the well-known types.\n *\n * @return {ActivationStatus} the activation status or null if it wasn't one of the well known types\n */\nInvestmentAccountInfo.prototype.getActivationStatusEnum = function() {\n  return ActivationStatus.fromOfx(this.getActivationStatus());\n};\n\n\n/**\n * Gets the type of investment account. One of \"INDIVIDUAL\", \"JOINT\", \"TRUST\", or \"CORPORATE\".\n * This is an optional field according to the OFX spec.\n *\n * @return {String} the type of account\n */\nInvestmentAccountInfo.prototype.getInvestmentAccountType = function() {\n  return this.investmentAccountType;\n};\nElement.add(InvestmentAccountInfo, {name: \"INVACCTTYPE\", order: 40, attributeType: String, readMethod: \"getInvestmentAccountType\", writeMethod: \"setInvestmentAccountType\"});\n\n\n/**\n * Sets the type of investment account. One of \"INDIVIDUAL\", \"JOINT\", \"TRUST\", or \"CORPORATE\".\n * This is an optional field according to the OFX spec.\n *\n * @param {String} investmentAccountType the type of account\n */\nInvestmentAccountInfo.prototype.setInvestmentAccountType = function(investmentAccountType) {\n  this.investmentAccountType = investmentAccountType;\n};\n\n\n/**\n * Gets the type of investment account as one of the well-known types.\n *\n * @return {AccountType} the type of investment account or null if it's not one of the well-known types\n */\nInvestmentAccountInfo.prototype.getInvestmentAccountTypeEnum = function() {\n  return AccountType.fromOfx(this.getInvestmentAccountType());\n};\n\n\n/**\n * Gets the description of option trading privileges. * This is an optional field according to\n * the OFX spec.\n *\n * @return {String} the description of option trading privileges.\n */\nInvestmentAccountInfo.prototype.getOptionLevel = function() {\n  return this.optionLevel;\n};\nElement.add(InvestmentAccountInfo, {name: \"OPTIONLEVEL\", order: 50, attributeType: String, readMethod: \"getOptionLevel\", writeMethod: \"setOptionLevel\"});\n\n\n/**\n * Sets the description of option trading privileges. * This is an optional field according to\n * the OFX spec.\n *\n * @param {String} optionLevel the description of option trading privileges.\n */\nInvestmentAccountInfo.prototype.setOptionLevel = function(optionLevel) {\n  this.optionLevel = optionLevel;\n};\n\n\n\n\nmodule.exports = InvestmentAccountInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Types of well-known sub-accounts.\n * See \"Section 13.9.2.4.2, OFX Spec\"\n *\n * @enum\n */\nvar SubAccountType = {\n  CASH: \"CASH\",\n  MARGIN: \"MARGIN\",\n  SHORT: \"SHORT\",\n  OTHER: \"OTHER\",\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"CASH\" === ofxVal) {\n      return SubAccountType.CASH;\n    } else if (\"MARGIN\" === ofxVal) {\n      return SubAccountType.MARGIN;\n    } else if (\"SHORT\" === ofxVal) {\n      return SubAccountType.SHORT;\n    } else if (\"OTHER\" === ofxVal) {\n      return SubAccountType.OTHER;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = SubAccountType;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n\n/**\n * @enum\n * @see \"OFX Spec, Section 13.6.2.1\"\n */\nvar UnitedStatesAccountType = {\n\n  /** A 401(k) retirement account */\n  R401K: \"401K\",\n\n  /** A 403(B) retirement account */\n  R403B: \"403B\",\n\n  /** An IRA retirement account */\n  IRA: \"IRA\",\n\n  /** Keough (money purchase/profit sharing) account */\n  KEOUGH: \"KEOUGH\",\n\n  /** Other account type */\n  OTHER: \"OTHER\",\n\n  /** Salary Reduction Employer Pension Plan */\n  SARSEP: \"SARSEP\",\n\n  /** Savings Incentive Match Plan for Employees*/\n  SIMPLE: \"SIMPLE\",\n\n  /** Regular investment account */\n  NORMAL: \"NORMAL\",\n\n  /** Tax Deferred Annuity */\n  TDA: \"TDA\",\n\n  /** Trust (including UTMA) */\n  TRUST: \"TRUST\",\n\n  /** Custodial account */\n  UGMA: \"UGMA\",\n  \n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"401K\" === ofxVal) {\n      return UnitedStatesAccountType.R401K;\n    } else if (\"403B\" === ofxVal) {\n      return UnitedStatesAccountType.R403B;\n    } else if (\"IRA\" === ofxVal) {\n      return UnitedStatesAccountType.IRA;\n    } else if (\"KEOUGH\" === ofxVal) {\n      return UnitedStatesAccountType.KEOUGH;\n    } else if (\"OTHER\" === ofxVal) {\n      return UnitedStatesAccountType.OTHER;\n    } else if (\"SARSEP\" === ofxVal) {\n      return UnitedStatesAccountType.SARSEP;\n    } else if (\"SIMPLE\" === ofxVal) {\n      return UnitedStatesAccountType.SIMPLE;\n    } else if (\"NORMAL\" === ofxVal) {\n      return UnitedStatesAccountType.NORMAL;\n    } else if (\"TDA\" === ofxVal) {\n      return UnitedStatesAccountType.TDA;\n    } else if (\"TRUST\" === ofxVal) {\n      return UnitedStatesAccountType.TRUST;\n    } else if (\"UGMA\" === ofxVal) {\n      return UnitedStatesAccountType.UGMA;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = UnitedStatesAccountType;\n","\"use strict\";\n\nmodule.exports = {\n  AccountType: require(\"./AccountType\"),\n  ActivationStatus: require(\"./ActivationStatus\"),\n  InvestmentAccountDetails: require(\"./InvestmentAccountDetails\"),\n  InvestmentAccountInfo: require(\"./InvestmentAccountInfo\"),\n  SubAccountType: require(\"./SubAccountType\"),\n  UnitedStatesAccountType: require(\"./UnitedStatesAccountType\"),\n};\n","\"use strict\";\n\nmodule.exports = {\n  accounts: require(\"./accounts/index\"),\n  positions: require(\"./positions/index\"),\n  statements: require(\"./statements/index\"),\n  transactions: require(\"./transactions/index\"),\n};\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar SubAccountType = require(\"../accounts/SubAccountType\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar PositionType = require(\"./PositionType\");\nvar Inv401KSource = require(\"./Inv401KSource\");\nvar InvestmentPosition = require(\"./InvestmentPosition\");\n\n/**\n * Base class for the various types of positions.\n * <br>\n * This class exposes a read-only view of the flattened aggregates that are\n * common to all positions as a convenience to application\n * developers who may not find the ofx aggregation model intuitive.\n *\n * @class\n */\nfunction BasePosition () {\n\n  /**\n   * @name BasePosition#investmentPosition\n   * @type InvestmentPosition\n   * @access private\n   */\n  this.investmentPosition = null;\n}\n\n\n\n\n\n/**\n * Gets the investment position child aggregate.\n *\n * @return {InvestmentPosition} the investment position child aggregate\n */\nBasePosition.prototype.getInvestmentPosition = function() {\n  return this.investmentPosition;\n};\nChildAggregate.add(BasePosition, {required: true, order: 10, attributeType: InvestmentPosition, readMethod: \"getInvestmentPosition\", writeMethod: \"setInvestmentPosition\"});\n\n\n/**\n * Sets the investment position child aggregate.\n *\n * @param {InvestmentPosition} investmentPosition the investment position child aggregate\n */\nBasePosition.prototype.setInvestmentPosition = function(investmentPosition) {\n  this.investmentPosition = investmentPosition;\n};\n\n\n/**\n * Gets the security id for the position. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {SecurityId} the security id for the position\n */\nBasePosition.prototype.getSecurityId = function() {\n  return this.getInvestmentPosition().getSecurityId();\n};\n\n\n/**\n * Gets the sub-account type. One of \"CASH\", \"MARGIN\", \"SHORT\", \"OTHER\". This is a required field\n * according to the OFX spec.\n * See \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {String} the sub-account type\n */\nBasePosition.prototype.getHeldInAccount = function() {\n  return this.getInvestmentPosition().getHeldInAccount();\n};\n\n\n/**\n * Gets the sub-account type as one of the well-known types.\n * See \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {SubAccountType} the sub-account type or null if it's not one of the well-known types\n */\nBasePosition.prototype.getHeldInAccountEnum = function() {\n  return SubAccountType.fromOfx(this.getHeldInAccount());\n};\n\n\n/**\n * Gets the position type. One of SHORT or LONG. This is a required field according to the OFX\n * spec.\n * See \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {String} the position type\n */\nBasePosition.prototype.getPositionType = function() {\n  return this.getInvestmentPosition().getPositionType();\n};\n\n\n/**\n * Gets the position type as one of the well-known types.\n * See \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {PositionType} the position type or null if it's not one of the well-known types\n */\nBasePosition.prototype.getPositionTypeEnum = function() {\n  return PositionType.fromOfx(this.getPositionType());\n};\n\n\n/**\n * Gets the number of units in the position. For stocks, mutual funds, and others, this\n * is the number of shares. For bonds, this is the face value. For options, this is the number of\n * contacts. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {Double} the number of units in the position\n */\nBasePosition.prototype.getUnits = function() {\n  return this.getInvestmentPosition().getUnits();\n};\n\n\n/**\n * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the\n * share price. For bonds, this is the percentage of par. For options, this is the per share (not\n * per contact) price. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {Double} the per unit price\n */\nBasePosition.prototype.getUnitPrice = function() {\n  return this.getInvestmentPosition().getUnitPrice();\n};\n\n\n/**\n * Gets the market value of this position. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {Double} the market value of the position\n */\nBasePosition.prototype.getMarketValue = function() {\n  return this.getInvestmentPosition().getMarketValue();\n};\n\n\n/**\n * Gets the date and time of the unit price and market value. This is a required field according\n * to the OFX spec.\n * See \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {Date} the market value date\n */\nBasePosition.prototype.getMarketValueDate = function() {\n  return this.getInvestmentPosition().getMarketValueDate();\n};\n\n\n/**\n * Gets the currency code of the position. This is an optional field according to the OFX spec.\n * If not present, it's the default currency of the account.\n * See \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {String} the currency code of the position or null for the default currency\n */\nBasePosition.prototype.getCurrencyCode = function() {\n  return this.getInvestmentPosition().getCurrencyCode();\n};\n\n\n/**\n * Gets the memo associated with the position. This is an optional field according to the OFX\n * spec.\n * See \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {String} the memo\n */\nBasePosition.prototype.getMemo = function() {\n  return this.getInvestmentPosition().getMemo();\n};\n\n\n/**\n * Gets the 401K source for the sale. Should be one of \"PRETAX\", \"AFTERTAX\", \"MATCH\",\n * \"PROFITSHARING\", \"ROLLOVER\", \"OTHERVEST\", \"OTHERNONVEST\".  This is an optional field\n * according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the 401k source\n */\nBasePosition.prototype.get401kSource = function() {\n  return this.getInvestmentPosition().get401kSource();\n};\n\n\n/**\n * Gets the 401k source as one of the well-known types.\n *\n * @return {Inv401KSource} the 401k source or null if it's not one of the well-known types\n */\nBasePosition.prototype.get401kSourceEnum = function() {\n  return Inv401KSource.fromOfx(this.get401kSource());\n};\n\n\n\n\nmodule.exports = BasePosition;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar BasePosition = require(\"./BasePosition\");\n\n/**\n * Represents a debt position.\n * See \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @class\n * @augments BasePosition\n */\nfunction DebtPosition () {\n  BasePosition.call(this);\n}\n\ninherit(DebtPosition, \"extends\", BasePosition);\n\n\nAggregate.add(\"POSDEBT\", DebtPosition);\n\n\n\n\nmodule.exports = DebtPosition;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Types of 401(k) sources.\n * See \"Section 13.9.2.4.2, OFX Spec\"\n *\n * @enum\n */\nvar Inv401KSource = {\n  PRETAX: \"PRETAX\",\n  AFTER_TAX: \"AFTER_TAX\",\n  MATCH: \"MATCH\",\n  PROFIT_SHARING: \"PROFIT_SHARING\",\n  ROLLOVER: \"ROLLOVER\",\n  OTHER_VEST: \"OTHER_VEST\",\n  OTHER_NONVEST: \"OTHER_NONVEST\",\n  \n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"PRETAX\" === ofxVal) {\n      return Inv401KSource.PRETAX;\n    } else if (\"AFTERTAX\" === ofxVal) {\n      return Inv401KSource.AFTER_TAX;\n    } else if (\"MATCH\" === ofxVal) {\n      return Inv401KSource.MATCH;\n    } else if (\"PROFITSHARING\" === ofxVal) {\n      return Inv401KSource.PROFIT_SHARING;\n    } else if (\"ROLLOVER\" === ofxVal) {\n      return Inv401KSource.ROLLOVER;\n    } else if (\"OTHERVEST\" === ofxVal) {\n      return Inv401KSource.OTHER_VEST;\n    } else if (\"OTHERNONVEST\" === ofxVal) {\n      return Inv401KSource.OTHER_NONVEST;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = Inv401KSource;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar SubAccountType = require(\"../accounts/SubAccountType\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar SecurityId = require(\"../../seclist/SecurityId\");\nvar PositionType = require(\"./PositionType\");\nvar Inv401KSource = require(\"./Inv401KSource\");\n\n/**\n * Class for the investment position aggregate.\n * See \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @class\n * @augments BasePosition\n */\nfunction InvestmentPosition () {\n\n  /**\n   * @name InvestmentPosition#securityId\n   * @type SecurityId\n   * @access private\n   */\n  this.securityId = null;\n\n  /**\n   * @name InvestmentPosition#heldInAccount\n   * @type String\n   * @access private\n   */\n  this.heldInAccount = null;\n\n  /**\n   * @name InvestmentPosition#positionType\n   * @type String\n   * @access private\n   */\n  this.positionType = null;\n\n  /**\n   * @name InvestmentPosition#units\n   * @type Double\n   * @access private\n   */\n  this.units = null;\n\n  /**\n   * @name InvestmentPosition#unitPrice\n   * @type Double\n   * @access private\n   */\n  this.unitPrice = null;\n\n  /**\n   * @name InvestmentPosition#marketValue\n   * @type Double\n   * @access private\n   */\n  this.marketValue = null;\n\n  /**\n   * @name InvestmentPosition#marketValueDate\n   * @type Date\n   * @access private\n   */\n  this.marketValueDate = null;\n\n  /**\n   * @name InvestmentPosition#currencyCode\n   * @type String\n   * @access private\n   */\n  this.currencyCode = null;\n\n  /**\n   * @name InvestmentPosition#memo\n   * @type String\n   * @access private\n   */\n  this.memo = null;\n\n  /**\n   * @name InvestmentPosition#inv401kSource\n   * @type String\n   * @access private\n   */\n  this.inv401kSource = null;\n}\n\n\n\nAggregate.add(\"INVPOS\", InvestmentPosition);\n\n\n/**\n * Gets the security id for the position. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {SecurityId} the security id for the position\n */\nInvestmentPosition.prototype.getSecurityId = function() {\n  return this.securityId;\n};\nChildAggregate.add(InvestmentPosition, {required: true, order: 10, attributeType: SecurityId, readMethod: \"getSecurityId\", writeMethod: \"setSecurityId\"});\n\n\n/**\n * Sets the security id for the position. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @param {SecurityId} securityId the security id for the position\n */\nInvestmentPosition.prototype.setSecurityId = function(securityId) {\n  this.securityId = securityId;\n};\n\n\n/**\n * Gets the sub-account type. One of \"CASH\", \"MARGIN\", \"SHORT\", \"OTHER\". This is a required field\n * according to the OFX spec.\n * See \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {String} the sub-account type\n */\nInvestmentPosition.prototype.getHeldInAccount = function() {\n  return this.heldInAccount;\n};\nElement.add(InvestmentPosition, {name: \"HELDINACCT\", required: true, order: 20, attributeType: String, readMethod: \"getHeldInAccount\", writeMethod: \"setHeldInAccount\"});\n\n\n/**\n * Sets the sub-account type. One of \"CASH\", \"MARGIN\", \"SHORT\", \"OTHER\". This is a required field\n * according to the OFX spec.\n * See \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @param {String} heldInAccount the sub-account type\n */\nInvestmentPosition.prototype.setHeldInAccount = function(heldInAccount) {\n  this.heldInAccount = heldInAccount;\n};\n\n\n/**\n * Gets the sub-account type as one of the well-known types.\n * See \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {SubAccountType} the sub-account type or null if it's not one of the well-known types\n */\nInvestmentPosition.prototype.getHeldInAccountEnum = function() {\n  return SubAccountType.fromOfx(this.getHeldInAccount());\n};\n\n\n/**\n * Gets the position type. One of SHORT or LONG. This is a required field according to the OFX\n * spec.\n * See \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {String} the position type\n */\nInvestmentPosition.prototype.getPositionType = function() {\n  return this.positionType;\n};\nElement.add(InvestmentPosition, {name: \"POSTYPE\", required: true, order: 30, attributeType: String, readMethod: \"getPositionType\", writeMethod: \"setPositionType\"});\n\n\n/**\n * Sets the position type. One of SHORT or LONG. This is a required field according to the OFX\n * spec.\n * See \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @param {String} positionType the position type\n */\nInvestmentPosition.prototype.setPositionType = function(positionType) {\n  this.positionType = positionType;\n};\n\n\n/**\n * Gets the position type as one of the well-known types.\n * See \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {PositionType} the position type or null if it's not one of the well-known types\n */\nInvestmentPosition.prototype.getPositionTypeEnum = function() {\n  return PositionType.fromOfx(this.getPositionType());\n};\n\n\n/**\n * Gets the number of units in the position. For stocks, mutual funds, and others, this\n * is the number of shares. For bonds, this is the face value. For options, this is the number of\n * contacts. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {Double} the number of units in the position\n */\nInvestmentPosition.prototype.getUnits = function() {\n  return this.units;\n};\nElement.add(InvestmentPosition, {name: \"UNITS\", required: true, order: 40, attributeType: Number, readMethod: \"getUnits\", writeMethod: \"setUnits\"});\n\n\n/**\n * Sets the number of units in the position. For stocks, mutual funds, and others, this\n * is the number of shares. For bonds, this is the face value. For options, this is the number of\n * contacts. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @param {Double} units the number of units in the position\n */\nInvestmentPosition.prototype.setUnits = function(units) {\n  this.units = units;\n};\n\n\n/**\n * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the\n * share price. For bonds, this is the percentage of par. For options, this is the per share (not\n * per contact) price. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {Double} the per unit price\n */\nInvestmentPosition.prototype.getUnitPrice = function() {\n  return this.unitPrice;\n};\nElement.add(InvestmentPosition, {name: \"UNITPRICE\", required: true, order: 50, attributeType: Number, readMethod: \"getUnitPrice\", writeMethod: \"setUnitPrice\"});\n\n\n/**\n * Sets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the\n * share price. For bonds, this is the percentage of par. For options, this is the per share (not\n * per contact) price. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @param {Double} unitPrice the per unit price\n */\nInvestmentPosition.prototype.setUnitPrice = function(unitPrice) {\n  this.unitPrice = unitPrice;\n};\n\n\n/**\n * Gets the market value of this position. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {Double} the market value of the position\n */\nInvestmentPosition.prototype.getMarketValue = function() {\n  return this.marketValue;\n};\nElement.add(InvestmentPosition, {name: \"MKTVAL\", required: true, order: 60, attributeType: Number, readMethod: \"getMarketValue\", writeMethod: \"setMarketValue\"});\n\n\n/**\n * Sets the market value of this position. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @param {Double} marketValue the market value of the position\n */\nInvestmentPosition.prototype.setMarketValue = function(marketValue) {\n  this.marketValue = marketValue;\n};\n\n\n/**\n * Gets the date and time of the unit price and market value. This is a required field according\n * to the OFX spec.\n * See \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {Date} the market value date\n */\nInvestmentPosition.prototype.getMarketValueDate = function() {\n  return this.marketValueDate;\n};\nElement.add(InvestmentPosition, {name: \"DTPRICEASOF\", required: true, order: 70, attributeType: Date, readMethod: \"getMarketValueDate\", writeMethod: \"setMarketValueDate\"});\n\n\n/**\n * Sets the date and time of the unit price and market value. This is a required field according\n * to the OFX spec.\n * See \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @param {Date} marketValueDate the market value date\n */\nInvestmentPosition.prototype.setMarketValueDate = function(marketValueDate) {\n  this.marketValueDate = marketValueDate;\n};\n\n\n/**\n * Gets the currency code of the position. This is an optional field according to the OFX spec.\n * If not present, it's the default currency of the account.\n * See \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {String} the currency code of the position or null for the default currency\n */\nInvestmentPosition.prototype.getCurrencyCode = function() {\n  return this.currencyCode;\n};\nElement.add(InvestmentPosition, {name: \"CURRENCY\", order: 80, attributeType: String, readMethod: \"getCurrencyCode\", writeMethod: \"setCurrencyCode\"});\n\n\n/**\n * Sets the currency code of the position. This is an optional field according to the OFX spec.\n * If not present, it's the default currency of the account.\n * See \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @param {String} currencyCode the currency code of the position or null for the default currency\n */\nInvestmentPosition.prototype.setCurrencyCode = function(currencyCode) {\n  this.currencyCode = currencyCode;\n};\n\n\n/**\n * Gets the memo associated with the position. This is an optional field according to the OFX\n * spec.\n * See \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {String} the memo\n */\nInvestmentPosition.prototype.getMemo = function() {\n  return this.memo;\n};\nElement.add(InvestmentPosition, {name: \"MEMO\", order: 90, attributeType: String, readMethod: \"getMemo\", writeMethod: \"setMemo\"});\n\n\n/**\n * Sets the memo associated with the position. This is an optional field according to the OFX\n * spec.\n * See \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @param {String} memo the memo\n */\nInvestmentPosition.prototype.setMemo = function(memo) {\n  this.memo = memo;\n};\n\n\n/**\n * Gets the 401K source for the sale. Should be one of \"PRETAX\", \"AFTERTAX\", \"MATCH\",\n * \"PROFITSHARING\", \"ROLLOVER\", \"OTHERVEST\", \"OTHERNONVEST\".  This is an optional field\n * according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the 401k source\n */\nInvestmentPosition.prototype.get401kSource = function() {\n  return this.inv401kSource;\n};\nElement.add(InvestmentPosition, {name: \"INV401KSOURCE\", order: 100, attributeType: String, readMethod: \"get401kSource\", writeMethod: \"set401kSource\"});\n\n\n/**\n * Sets the 401K source for the sale. Should be one of \"PRETAX\", \"AFTERTAX\", \"MATCH\",\n * \"PROFITSHARING\", \"ROLLOVER\", \"OTHERVEST\", \"OTHERNONVEST\".  This is an optional field\n * according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} inv401kSource the 401k source\n */\nInvestmentPosition.prototype.set401kSource = function(inv401kSource) {\n  this.inv401kSource = inv401kSource;\n};\n\n\n/**\n * Gets the 401k source as one of the well-known types.\n *\n * @return {Inv401KSource} the 401k source or null if it's not one of the well-known types\n */\nInvestmentPosition.prototype.get401kSourceEnum = function() {\n  return Inv401KSource.fromOfx(this.get401kSource());\n};\n\n\n\n\nmodule.exports = InvestmentPosition;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar BasePosition = require(\"./BasePosition\");\n\n/**\n * Aggregate for a list of invesment positions.\n * See \"Section 13.9.2.2, OFX Spec\"\n *\n * @class\n */\nfunction InvestmentPositionList () {\n\n  /**\n   * @name InvestmentPositionList#positions\n   * @type BasePosition[]\n   * @access private\n   */\n  this.positions = null;\n}\n\n\n\nAggregate.add(\"INVPOSLIST\", InvestmentPositionList);\n\n\n/**\n * Gets the list of positions\n *\n * @return {BasePosition[]} the list of positions\n */\nInvestmentPositionList.prototype.getPositions = function() {\n  return this.positions;\n};\nChildAggregate.add(InvestmentPositionList, {order: 10, attributeType: Array, collectionEntryType: BasePosition, readMethod: \"getPositions\", writeMethod: \"setPositions\"});\n\n\n/**\n * Sets the list of positions.\n *\n * @param {BasePosition[]} positions the list of positions\n */\nInvestmentPositionList.prototype.setPositions = function(positions) {\n  this.positions = positions;\n};\n\n\n\n\nmodule.exports = InvestmentPositionList;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar BasePosition = require(\"./BasePosition\");\n\n/**\n * Represents a mutual fund position.\n * See \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @class\n * @augments BasePosition\n */\nfunction MutualFundPosition () {\n  BasePosition.call(this);\n\n  /**\n   * @name MutualFundPosition#unitsStreet\n   * @type Double\n   * @access private\n   */\n  this.unitsStreet = null;\n\n  /**\n   * @name MutualFundPosition#unitsUser\n   * @type Double\n   * @access private\n   */\n  this.unitsUser = null;\n\n  /**\n   * @name MutualFundPosition#reinvestDividends\n   * @type Boolean\n   * @access private\n   */\n  this.reinvestDividends = null;\n\n  /**\n   * @name MutualFundPosition#reinvestCapitalGains\n   * @type Boolean\n   * @access private\n   */\n  this.reinvestCapitalGains = null;\n}\n\ninherit(MutualFundPosition, \"extends\", BasePosition);\n\n\nAggregate.add(\"POSMF\", MutualFundPosition);\n\n\n/**\n * Gets the number of units in the financial insititution's street name.\n *\n * @return {Double} the number of units in the financial insititution's street name.\n */\nMutualFundPosition.prototype.getUnitsStreet = function() {\n  return this.unitsStreet;\n};\nElement.add(MutualFundPosition, {name: \"UNITSSTREET\", order: 20, attributeType: Number, readMethod: \"getUnitsStreet\", writeMethod: \"setUnitsStreet\"});\n\n\n/**\n * Sets the number of units in the financial insititution's street name.\n *\n * @param {Double} unitsStreet the number of units in the financial insititution's street name.\n */\nMutualFundPosition.prototype.setUnitsStreet = function(unitsStreet) {\n  this.unitsStreet = unitsStreet;\n};\n\n\n/**\n * Gets the number of units in the user's name.\n *\n * @return {Double} the number of units in the user's name.\n */\nMutualFundPosition.prototype.getUnitsUser = function() {\n  return this.unitsUser;\n};\nElement.add(MutualFundPosition, {name: \"UNITSUSER\", order: 30, attributeType: Number, readMethod: \"getUnitsUser\", writeMethod: \"setUnitsUser\"});\n\n\n/**\n * Sets the number of units in the user's name.\n *\n * @param {Double} unitsUser the number of units in the user's name.\n */\nMutualFundPosition.prototype.setUnitsUser = function(unitsUser) {\n  this.unitsUser = unitsUser;\n};\n\n\n/**\n * Gets whether dividends are automatically reinvested.\n *\n * @return {Boolean} whether dividends are automatically reinvested\n */\nMutualFundPosition.prototype.getReinvestDividends = function() {\n  return this.reinvestDividends;\n};\nElement.add(MutualFundPosition, {name: \"REINVDIV\", order: 50, attributeType: Boolean, readMethod: \"getReinvestDividends\", writeMethod: \"setReinvestDividends\"});\n\n\n/**\n * Sets whether dividends are automatically reinvested.\n *\n * @param {Boolean} reinvestDividends whether dividends are automatically reinvested\n */\nMutualFundPosition.prototype.setReinvestDividends = function(reinvestDividends) {\n  this.reinvestDividends = reinvestDividends;\n};\n\n\n/**\n * Gets whether capital gains are automatically reinvested.\n *\n * @return {Boolean} whether capital gains are automatically reinvested\n */\nMutualFundPosition.prototype.getReinvestCapitalGains = function() {\n  return this.reinvestCapitalGains;\n};\nElement.add(MutualFundPosition, {name: \"REINVCG\", order: 60, attributeType: Boolean, readMethod: \"getReinvestCapitalGains\", writeMethod: \"setReinvestCapitalGains\"});\n\n\n/**\n * Sets whether capital gains are automatically reinvested.\n *\n * @param {Boolean} reinvestCapitalGains whether capital gains are automatically reinvested\n */\nMutualFundPosition.prototype.setReinvestCapitalGains = function(reinvestCapitalGains) {\n  this.reinvestCapitalGains = reinvestCapitalGains;\n};\n\n\n\n\nmodule.exports = MutualFundPosition;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar BasePosition = require(\"./BasePosition\");\nvar ShortOptionSecurity = require(\"./ShortOptionSecurity\");\n\n/**\n * Represents an options position.\n * See \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @class\n * @augments BasePosition\n */\nfunction OptionsPosition () {\n  BasePosition.call(this);\n\n  /**\n   * @name OptionsPosition#secured\n   * @type String\n   * @access private\n   */\n  this.secured = null;\n}\n\ninherit(OptionsPosition, \"extends\", BasePosition);\n\n\nAggregate.add(\"POSOPT\", OptionsPosition);\n\n\n/**\n * Gets how the options position is secured (for short positions).\n *\n * @return {String} how the options position is secured\n */\nOptionsPosition.prototype.getSecured = function() {\n  return this.secured;\n};\nElement.add(OptionsPosition, {name: \"SECURED\", order: 20, attributeType: String, readMethod: \"getSecured\", writeMethod: \"setSecured\"});\n\n\n/**\n * Sets how the options position is secured (for short positions).\n *\n * @param {String} secured how the options position is secured\n */\nOptionsPosition.prototype.setSecured = function(secured) {\n  this.secured = secured;\n};\n\n\n/**\n * Gets how the options position is secured as a well-known type.\n *\n * @return {ShortOptionSecurity} how the option position is secured or null if it's not a well-known type\n */\nOptionsPosition.prototype.getSecuredEnum = function() {\n  return ShortOptionSecurity.fromOfx(this.getSecured());\n};\n\n\n\n\nmodule.exports = OptionsPosition;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar BasePosition = require(\"./BasePosition\");\n\n/**\n * Represents other types of positions.\n * See \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @class\n * @augments BasePosition\n */\nfunction OtherPosition () {\n  BasePosition.call(this);\n}\n\ninherit(OtherPosition, \"extends\", BasePosition);\n\n\nAggregate.add(\"POSOTHER\", OtherPosition);\n\n\n\n\nmodule.exports = OtherPosition;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Type of position.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @enum\n */\nvar PositionType = {\n  LONG: \"LONG\",\n  SHORT: \"SHORT\",\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"LONG\" === ofxVal) {\n      return PositionType.LONG;\n    } else if (\"SHORT\" === ofxVal) {\n      return PositionType.SHORT;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = PositionType;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\n/**\n * How a short option is secured.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @enum\n */\nvar ShortOptionSecurity = {\n  NAKED: \"NAKED\",\n  COVERED: \"COVERED\",\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"NAKED\" === ofxVal) {\n      return ShortOptionSecurity.NAKED;\n    } else if (\"COVERED\" === ofxVal) {\n      return ShortOptionSecurity.COVERED;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = ShortOptionSecurity;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar BasePosition = require(\"./BasePosition\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\n\n/**\n * Represents a stock position.\n * See \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @class\n * @augments BasePosition\n */\nfunction StockPosition () {\n  BasePosition.call(this);\n\n  /**\n   * @name StockPosition#unitsStreet\n   * @type Double\n   * @access private\n   */\n  this.unitsStreet = null;\n\n  /**\n   * @name StockPosition#unitsUser\n   * @type Double\n   * @access private\n   */\n  this.unitsUser = null;\n\n  /**\n   * @name StockPosition#reinvestDividends\n   * @type Boolean\n   * @access private\n   */\n  this.reinvestDividends = null;\n}\n\ninherit(StockPosition, \"extends\", BasePosition);\n\n\nAggregate.add(\"POSSTOCK\", StockPosition);\n\n\n/**\n * Gets the number of units in the financial insititution's street name.\n *\n * @return {Double} the number of units in the financial insititution's street name.\n */\nStockPosition.prototype.getUnitsStreet = function() {\n  return this.unitsStreet;\n};\nElement.add(StockPosition, {name: \"UNITSSTREET\", order: 20, attributeType: Number, readMethod: \"getUnitsStreet\", writeMethod: \"setUnitsStreet\"});\n\n\n/**\n * Sets the number of units in the financial insititution's street name.\n *\n * @param {Double} unitsStreet the number of units in the financial insititution's street name.\n */\nStockPosition.prototype.setUnitsStreet = function(unitsStreet) {\n  this.unitsStreet = unitsStreet;\n};\n\n\n/**\n * Gets the number of units in the user's name.\n *\n * @return {Double} the number of units in the user's name.\n */\nStockPosition.prototype.getUnitsUser = function() {\n  return this.unitsUser;\n};\nElement.add(StockPosition, {name: \"UNITSUSER\", order: 30, attributeType: Number, readMethod: \"getUnitsUser\", writeMethod: \"setUnitsUser\"});\n\n\n/**\n * Sets the number of units in the user's name.\n *\n * @param {Double} unitsUser the number of units in the user's name.\n */\nStockPosition.prototype.setUnitsUser = function(unitsUser) {\n  this.unitsUser = unitsUser;\n};\n\n\n/**\n * Gets whether dividends are automatically reinvested.\n *\n * @return {Boolean} whether dividends are automatically reinvested\n */\nStockPosition.prototype.getReinvestDividends = function() {\n  return this.reinvestDividends;\n};\nElement.add(StockPosition, {name: \"REINVDIV\", order: 40, attributeType: Boolean, readMethod: \"getReinvestDividends\", writeMethod: \"setReinvestDividends\"});\n\n\n/**\n * Sets whether dividends are automatically reinvested.\n *\n * @param {Boolean} reinvestDividends whether dividends are automatically reinvested\n */\nStockPosition.prototype.setReinvestDividends = function(reinvestDividends) {\n  this.reinvestDividends = reinvestDividends;\n};\n\n\n\n\nmodule.exports = StockPosition;\n","\"use strict\";\n\nmodule.exports = {\n  BasePosition: require(\"./BasePosition\"),\n  DebtPosition: require(\"./DebtPosition\"),\n  Inv401KSource: require(\"./Inv401KSource\"),\n  InvestmentPosition: require(\"./InvestmentPosition\"),\n  InvestmentPositionList: require(\"./InvestmentPositionList\"),\n  MutualFundPosition: require(\"./MutualFundPosition\"),\n  OptionsPosition: require(\"./OptionsPosition\"),\n  OtherPosition: require(\"./OtherPosition\"),\n  PositionType: require(\"./PositionType\"),\n  ShortOptionSecurity: require(\"./ShortOptionSecurity\"),\n  StockPosition: require(\"./StockPosition\")\n};\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar BalanceRecord = require(\"../../common/BalanceRecord\");\n\n/**\n * Aggregate for the investment balance list.\n * See \"Section 13.9.2.7, OFX Spec\"\n *\n * @class\n */\nfunction BalanceList () {\n\n  /**\n   * @name BalanceList#balanceRecords\n   * @type BalanceRecord[]\n   * @access private\n   */\n  this.balanceRecords = null;\n}\n\n\n\nAggregate.add(\"BALLIST\", BalanceList);\n\n\n/**\n * Gets the list of balance records.\n *\n * @return {BalanceRecord[]} the list of balance records.\n */\nBalanceList.prototype.getBalanceRecords = function() {\n  return this.balanceRecords;\n};\nChildAggregate.add(BalanceList, {order: 10, attributeType: Array, collectionEntryType: BalanceRecord, readMethod: \"getBalanceRecords\", writeMethod: \"setBalanceRecords\"});\n\n\n/**\n * Sets the list of balance records.\n *\n * @param {BalanceRecord[]} balanceRecords the list of balance records.\n */\nBalanceList.prototype.setBalanceRecords = function(balanceRecords) {\n  this.balanceRecords = balanceRecords;\n};\n\n\n\n\nmodule.exports = BalanceList;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\n\n\n/**\n * Aggreate to indicate whether position information is requested as part of the statement\n * See \"Section 13.9.1.2, OFX Spec\"\n *\n * @class\n */\nfunction IncludePosition () {\n\n  /**\n   * @name IncludePosition#sentDownDate\n   * @type Date\n   * @access private\n   */\n  this.sentDownDate = null;\n\n  /**\n   * @name IncludePosition#includePositions\n   * @type Boolean\n   * @access private\n   */\n  this.includePositions = Boolean.TRUE;\n}\n\n\n\nAggregate.add(\"INCPOS\", IncludePosition);\n\n\n/**\n * Gets the date that the position should be sent down for. This is an optional field according\n * to the OFX spec.\n *\n * @return {Date} the date for the position\n */\nIncludePosition.prototype.getDateSentDown = function() {\n  return this.sentDownDate;\n};\nElement.add(IncludePosition, {name: \"DTASOF\", order: 0, attributeType: Date, readMethod: \"getDateSentDown\", writeMethod: \"setDateSentDown\"});\n\n\n/**\n * Sets the date that the position should be sent down for. This is an optional field according\n * to the OFX spec.\n *\n * @param {Date} sentDownDate the date for the position\n */\nIncludePosition.prototype.setDateSentDown = function(sentDownDate) {\n  this.sentDownDate = sentDownDate;\n};\n\n\n/**\n * Gets whether to include positions in the statement download.\n *\n * @return {Boolean} whether to include positions in the statement download\n */\nIncludePosition.prototype.getIncludePositions = function() {\n  return this.includePositions;\n};\nElement.add(IncludePosition, {name: \"INCLUDE\", order: 10, attributeType: Boolean, readMethod: \"getIncludePositions\", writeMethod: \"setIncludePositions\"});\n\n\n/**\n * Sets whether to include positions in the statement download.\n *\n * @param {Boolean} includePositions whether to include positions in the statement download\n */\nIncludePosition.prototype.setIncludePositions = function(includePositions) {\n  this.includePositions = includePositions;\n};\n\n\n\n\nmodule.exports = IncludePosition;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar BalanceList = require(\"./BalanceList\");\n\n/**\n * Aggregate for the investment balance.\n * See \"Section 13.9.2.7, OFX Spec\"\n *\n * @class\n */\nfunction InvestmentBalance () {\n\n  /**\n   * @name InvestmentBalance#availableCash\n   * @type Double\n   * @access private\n   */\n  this.availableCash = null;\n\n  /**\n   * @name InvestmentBalance#marginBalance\n   * @type Double\n   * @access private\n   */\n  this.marginBalance = null;\n\n  /**\n   * @name InvestmentBalance#shortBalance\n   * @type Double\n   * @access private\n   */\n  this.shortBalance = null;\n\n  /**\n   * @name InvestmentBalance#buyingPower\n   * @type Double\n   * @access private\n   */\n  this.buyingPower = null;\n\n  /**\n   * @name InvestmentBalance#balanceList\n   * @type BalanceList\n   * @access private\n   */\n  this.balanceList = null;\n}\n\n\n\nAggregate.add(\"INVBAL\", InvestmentBalance);\n\n\n/**\n * Gets the available cash balance across all sub-accounts, including sweep funds. This is\n * required field according to the OFX spec.\n *\n * @return {Double} the available cash balance\n */\nInvestmentBalance.prototype.getAvailableCash = function() {\n  return this.availableCash;\n};\nElement.add(InvestmentBalance, {name: \"AVAILCASH\", required: true, order: 10, attributeType: Number, readMethod: \"getAvailableCash\", writeMethod: \"setAvailableCash\"});\n\n\n/**\n * Sets the available cash balance across all sub-accounts, including sweep funds. This is\n * required field according to the OFX spec.\n *\n * @param {Double} availableCash the available cash balance\n */\nInvestmentBalance.prototype.setAvailableCash = function(availableCash) {\n  this.availableCash = availableCash;\n};\n\n\n/**\n * Gets the margin account balance. A positive balance indicates a positive cash balance, while\n * a negative balance indicates the customer borrowed funds. This is a required field according\n * to the OFX spec.\n *\n * @return {Double} the margin account balance\n */\nInvestmentBalance.prototype.getMarginBalance = function() {\n  return this.marginBalance;\n};\nElement.add(InvestmentBalance, {name: \"MARGINBALANCE\", required: true, order: 20, attributeType: Number, readMethod: \"getMarginBalance\", writeMethod: \"setMarginBalance\"});\n\n\n/**\n * Sets the margin account balance. A positive balance indicates a positive cash balance, while\n * a negative balance indicates the customer borrowed funds. This is a required field according\n * to the OFX spec.\n *\n * @param {Double} marginBalance the margin account balance\n */\nInvestmentBalance.prototype.setMarginBalance = function(marginBalance) {\n  this.marginBalance = marginBalance;\n};\n\n\n/**\n * Gets the market value of all short positions. This is a positive balance. This is a required\n * field according to the OFX spec.\n *\n * @return {Double} the market value of all short positions\n */\nInvestmentBalance.prototype.getShortBalance = function() {\n  return this.shortBalance;\n};\nElement.add(InvestmentBalance, {name: \"SHORTBALANCE\", required: true, order: 30, attributeType: Number, readMethod: \"getShortBalance\", writeMethod: \"setShortBalance\"});\n\n\n/**\n * Sets the market value of all short positions. This is a positive balance. This is a required\n * field according to the OFX spec.\n *\n * @param {Double} shortBalance the market value of all short positions\n */\nInvestmentBalance.prototype.setShortBalance = function(shortBalance) {\n  this.shortBalance = shortBalance;\n};\n\n\n/**\n * Gets the buying power amount. This is an optional field according to the OFX spec.\n *\n * @return {Double} the buying power\n */\nInvestmentBalance.prototype.getBuyingPower = function() {\n  return this.buyingPower;\n};\nElement.add(InvestmentBalance, {name: \"BUYPOWER\", order: 40, attributeType: Number, readMethod: \"getBuyingPower\", writeMethod: \"setBuyingPower\"});\n\n\n/**\n * Sets the buying power amount. This is an optional field according to the OFX spec.\n *\n * @param {Double} buyingPower the buying power\n */\nInvestmentBalance.prototype.setBuyingPower = function(buyingPower) {\n  this.buyingPower = buyingPower;\n};\n\n\n/**\n * Gets the investment balance list. This is an optional field according to the OFX spec.\n *\n * @return {BalanceList} the investment balance list\n */\nInvestmentBalance.prototype.getBalanceList = function() {\n  return this.balanceList;\n};\nChildAggregate.add(InvestmentBalance, {order: 50, attributeType: BalanceList, readMethod: \"getBalanceList\", writeMethod: \"setBalanceList\"});\n\n\n/**\n * Sets the investment balance list. This is an optional field according to the OFX spec.\n *\n * @param {BalanceList} balanceList the investment balance list\n */\nInvestmentBalance.prototype.setBalanceList = function(balanceList) {\n  this.balanceList = balanceList;\n};\n\n\n\n\nmodule.exports = InvestmentBalance;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar StatementRequest = require(\"../../common/StatementRequest\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar InvestmentAccountDetails = require(\"../accounts/InvestmentAccountDetails\");\nvar IncludePosition = require(\"./IncludePosition\");\n\n/**\n * Aggregate for the investment statement download request.\n * See \"Section 13.9.1.1, OFX Spec\"\n *\n * @class\n * @augments StatementRequest\n */\nfunction InvestmentStatementRequest () {\n  StatementRequest.call(this);\n\n  /**\n   * @name InvestmentStatementRequest#account\n   * @type InvestmentAccountDetails\n   * @access private\n   */\n  this.account = null;\n\n  /**\n   * @name InvestmentStatementRequest#includeOpenOrders\n   * @type Boolean\n   * @access private\n   */\n  this.includeOpenOrders = Boolean.FALSE;\n\n  /**\n   * @name InvestmentStatementRequest#includePosition\n   * @type IncludePosition\n   * @access private\n   */\n  this.includePosition = null;\n\n  /**\n   * @name InvestmentStatementRequest#includeBalance\n   * @type Boolean\n   * @access private\n   */\n  this.includeBalance = Boolean.TRUE;\n}\n\ninherit(InvestmentStatementRequest, \"extends\", StatementRequest);\n\n\nAggregate.add(\"INVSTMTRQ\", InvestmentStatementRequest);\n\n\n/**\n * The account details.\n *\n * @return {InvestmentAccountDetails} The account details.\n */\nInvestmentStatementRequest.prototype.getAccount = function() {\n  return this.account;\n};\nChildAggregate.add(InvestmentStatementRequest, {name: \"INVACCTFROM\", required: true, order: 0, attributeType: InvestmentAccountDetails, readMethod: \"getAccount\", writeMethod: \"setAccount\"});\n\n\n/**\n * The account details.\n *\n * @param {InvestmentAccountDetails} account The account details.\n */\nInvestmentStatementRequest.prototype.setAccount = function(account) {\n  this.account = account;\n};\n\n\n/**\n * Gets whether to include open orders. This is an optional field according to the OFX spec.\n * <br>\n * Note, open orders are not yet implemented.\n *\n * @return {Boolean} whether to include open orders\n */\nInvestmentStatementRequest.prototype.getIncludeOpenOrders = function() {\n  return this.includeOpenOrders;\n};\nElement.add(InvestmentStatementRequest, {name: \"INCOO\", order: 20, attributeType: Boolean, readMethod: \"getIncludeOpenOrders\", writeMethod: \"setIncludeOpenOrders\"});\n\n\n/**\n * Sets whether to include open orders. This is an optional field according to the OFX spec.\n * <br>\n * Note, open orders are not yet implemented.\n *\n * @param {Boolean} includeOpenOrders whether to include open orders\n */\nInvestmentStatementRequest.prototype.setIncludeOpenOrders = function(includeOpenOrders) {\n  this.includeOpenOrders = includeOpenOrders;\n};\n\n\n/**\n * Gets the include position child aggregate. This is a required field according to the OFX spec.\n *\n * @return {IncludePosition} the include position child aggregate\n */\nInvestmentStatementRequest.prototype.getIncludePosition = function() {\n  return this.includePosition;\n};\nChildAggregate.add(InvestmentStatementRequest, {name: \"INCPOS\", required: true, order: 30, attributeType: IncludePosition, readMethod: \"getIncludePosition\", writeMethod: \"setIncludePosition\"});\n\n\n/**\n * Gets the include position child aggregate. This is a required field according to the OFX spec.\n *\n * @param {IncludePosition} includePosition the include position child aggregate\n */\nInvestmentStatementRequest.prototype.setIncludePosition = function(includePosition) {\n  this.includePosition = includePosition;\n};\n\n\n/**\n * Gets whether to include balance info in the response. This is a required field according to\n * the OFX spec.\n *\n * @return {Boolean} whether to include balance info in the response\n */\nInvestmentStatementRequest.prototype.getIncludeBalance = function() {\n  return this.includeBalance;\n};\nElement.add(InvestmentStatementRequest, {name: \"INCBAL\", required: true, order: 40, attributeType: Boolean, readMethod: \"getIncludeBalance\", writeMethod: \"setIncludeBalance\"});\n\n\n/**\n * Sets whether to include balance info in the response. This is a required field according to\n * the OFX spec.\n *\n * @param {Boolean} includeBalance whether to include balance info in the response\n */\nInvestmentStatementRequest.prototype.setIncludeBalance = function(includeBalance) {\n  this.includeBalance = includeBalance;\n};\n\n\n\n\nmodule.exports = InvestmentStatementRequest;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar MessageSetType = require(\"../../MessageSetType\");\nvar RequestMessageSet = require(\"../../RequestMessageSet\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar InvestmentStatementRequestTransaction = require(\"./InvestmentStatementRequestTransaction\");\n\n/**\n * Investment statement request message set.\n * See \"Section 13.7.1.2.1, OFX Spec\"\n *\n * @class\n * @augments RequestMessageSet\n */\nfunction InvestmentStatementRequestMessageSet () {\n  RequestMessageSet.call(this);\n\n  /**\n   * @name InvestmentStatementRequestMessageSet#statementRequest\n   * @type InvestmentStatementRequestTransaction\n   * @access private\n   */\n  this.statementRequest = null;\n}\n\ninherit(InvestmentStatementRequestMessageSet, \"extends\", RequestMessageSet);\n\n\nAggregate.add(\"INVSTMTMSGSRQV1\", InvestmentStatementRequestMessageSet);\n\n\nInvestmentStatementRequestMessageSet.prototype.getType = function() {\n  return MessageSetType.investment;\n};\n\n\n/**\n * Gets the statement request.\n *\n * @return {InvestmentStatementRequestTransaction} the request\n */\nInvestmentStatementRequestMessageSet.prototype.getStatementRequest = function() {\n  return this.statementRequest;\n};\nChildAggregate.add(InvestmentStatementRequestMessageSet, {order: 0, attributeType: InvestmentStatementRequestTransaction, readMethod: \"getStatementRequest\", writeMethod: \"setStatementRequest\"});\n\n\n/**\n * Sets the statement request.\n *\n * @param {InvestmentStatementRequestTransaction} statementRequest the request\n */\nInvestmentStatementRequestMessageSet.prototype.setStatementRequest = function(statementRequest) {\n  this.statementRequest = statementRequest;\n};\n\n\n// Inherited.\nInvestmentStatementRequestMessageSet.prototype.getRequestMessages = function() {\n  var requestMessages = [];\n  if (this.getStatementRequest()) {\n    requestMessages.push(this.getStatementRequest());\n  }\n  return requestMessages;\n};\n\n\n\n\nmodule.exports = InvestmentStatementRequestMessageSet;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar InvestmentStatementRequest = require(\"./InvestmentStatementRequest\");\nvar TransactionWrappedRequestMessage = require(\"../../TransactionWrappedRequestMessage\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\n\n/**\n * Investment statement transaction request.\n * See \"Section 13.9.1.1, OFX Spec\"\n *\n * @class\n * @augments TransactionWrappedRequestMessage\n */\nfunction InvestmentStatementRequestTransaction () {\n  TransactionWrappedRequestMessage.call(this);\n\n  /**\n   * @name InvestmentStatementRequestTransaction#message\n   * @type InvestmentStatementRequest\n   * @access private\n   */\n  this.message = null;\n}\n\ninherit(InvestmentStatementRequestTransaction, \"extends\", TransactionWrappedRequestMessage);\n\n\nAggregate.add(\"INVSTMTTRNRQ\", InvestmentStatementRequestTransaction);\n\n\n/**\n * Gets the the statement request message.\n *\n * @return {InvestmentStatementRequest} the statement request message.\n */\nInvestmentStatementRequestTransaction.prototype.getMessage = function() {\n  return this.message;\n};\nChildAggregate.add(InvestmentStatementRequestTransaction, {required: true, order: 30, attributeType: InvestmentStatementRequest, readMethod: \"getMessage\", writeMethod: \"setMessage\"});\n\n\n/**\n * Sets the the statement request message.\n *\n * @param {InvestmentStatementRequest} message the statement request message.\n */\nInvestmentStatementRequestTransaction.prototype.setMessage = function(message) {\n  this.message = message;\n};\n\n\n// Inherited.\nInvestmentStatementRequestTransaction.prototype.setWrappedMessage = function(/*InvestmentStatementRequest*/ message) {\n  this.setMessage(message);\n};\n\n\n\n\nmodule.exports = InvestmentStatementRequestTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar StatementResponse = require(\"../../common/StatementResponse\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar InvestmentAccountDetails = require(\"../accounts/InvestmentAccountDetails\");\nvar InvestmentTransactionList = require(\"../transactions/InvestmentTransactionList\");\nvar InvestmentPositionList = require(\"../positions/InvestmentPositionList\");\nvar InvestmentBalance = require(\"./InvestmentBalance\");\n\n\n/**\n * Aggregate for the investment statement download response.\n * See \"Section 13.9.2.2, OFX Spec\"\n *\n * @class\n * @augments StatementResponse\n */\nfunction InvestmentStatementResponse () {\n  StatementResponse.call(this);\n\n  /**\n   * @name InvestmentStatementResponse#dateOfStatement\n   * @type Date\n   * @access private\n   */\n  this.dateOfStatement = null;\n\n  /**\n   * @name InvestmentStatementResponse#account\n   * @type InvestmentAccountDetails\n   * @access private\n   */\n  this.account = null;\n\n  /**\n   * @name InvestmentStatementResponse#transactionList\n   * @type InvestmentTransactionList\n   * @access private\n   */\n  this.transactionList = null;\n\n  /**\n   * @name InvestmentStatementResponse#positionList\n   * @type InvestmentPositionList\n   * @access private\n   */\n  this.positionList = null;\n\n  /**\n   * @name InvestmentStatementResponse#accountBalance\n   * @type InvestmentBalance\n   * @access private\n   */\n  this.accountBalance = null;\n\n  /**\n   * @name InvestmentStatementResponse#securityList\n   * @type SecurityList\n   * @access private\n   */\n  this.securityList = null;\n}\n\ninherit(InvestmentStatementResponse, \"extends\", StatementResponse);\n\n\nAggregate.add(\"INVSTMTRS\", InvestmentStatementResponse);\n\n\n/**\n * Gets the name of the response message.\n *\n * @return {String} the name of the response message\n */\n// @Override\nInvestmentStatementResponse.prototype.getResponseMessageName = function() {\n  return \"investment statement\";\n};\n\n\n/**\n * Gets the date and time for the statement download. This is a required field according to the\n * OFX spec.\n *\n * @return {Date} the date and time for the statement download\n */\nInvestmentStatementResponse.prototype.getDateOfStatement = function() {\n  return this.dateOfStatement;\n};\nElement.add(InvestmentStatementResponse, {name: \"DTASOF\", required: true, order: 60, attributeType: Date, readMethod: \"getDateOfStatement\", writeMethod: \"setDateOfStatement\"});\n\n\n/**\n * Sets the date and time for the statement download. This is a required field according to the\n * OFX spec.\n *\n * @param {Date} dateOfStatement the date and time for the statement download\n */\nInvestmentStatementResponse.prototype.setDateOfStatement = function(dateOfStatement) {\n  this.dateOfStatement = dateOfStatement;\n};\n\n\n/**\n * Gets the account for the statement. This is a required field according to the OFX spec.\n *\n * @return {InvestmentAccountDetails} the account for the statement\n */\nInvestmentStatementResponse.prototype.getAccount = function() {\n  return this.account;\n};\nChildAggregate.add(InvestmentStatementResponse, {name:\"INVACCTFROM\", required: true, order: 10, attributeType: InvestmentAccountDetails, readMethod: \"getAccount\", writeMethod: \"setAccount\"});\n\n\n/**\n * Sets the account for the statement. This is a required field according to the OFX spec.\n *\n * @param {InvestmentAccountDetails} account the account for the statement\n */\nInvestmentStatementResponse.prototype.setAccount = function(account) {\n  this.account = account;\n};\n\n\n/**\n * Gets the transaction list aggregate. This is an optional field according to the OFX spec.\n *\n * @return {InvestmentTransactionList} the transaction list aggregate\n */\nInvestmentStatementResponse.prototype.getInvestmentTransactionList = function() {\n  return this.transactionList;\n};\nChildAggregate.add(InvestmentStatementResponse, {order: 70, attributeType: InvestmentTransactionList, readMethod: \"getInvestmentTransactionList\", writeMethod: \"setInvestmentTransactionList\"});\n\n\n/**\n * Sets the transaction list aggregate. This is an optional field according to the OFX spec.\n *\n * @param {InvestmentTransactionList} transactionList the transaction list aggregate\n */\nInvestmentStatementResponse.prototype.setInvestmentTransactionList = function(transactionList) {\n  this.transactionList = transactionList;\n};\n\n\n/**\n * Gets the position list aggreate. This is an optional field according to the OFX spec.\n *\n * @return {InvestmentPositionList} the position list aggregate\n */\nInvestmentStatementResponse.prototype.getPositionList = function() {\n  return this.positionList;\n};\nChildAggregate.add(InvestmentStatementResponse, {order: 80, attributeType: InvestmentPositionList, readMethod: \"getPositionList\", writeMethod: \"setPositionList\"});\n\n\n/**\n * Sets the position list aggreate. This is an optional field according to the OFX spec.\n *\n * @param {InvestmentPositionList} positionList the position list aggregate\n */\nInvestmentStatementResponse.prototype.setPositionList = function(positionList) {\n  this.positionList = positionList;\n};\n\n\n/**\n * Gets the account balance. This is an optional field according to the OFX spec.\n *\n * @return {InvestmentBalance} the account balance\n */\nInvestmentStatementResponse.prototype.getAccountBalance = function() {\n  return this.accountBalance;\n};\nChildAggregate.add(InvestmentStatementResponse, {order: 90, attributeType: InvestmentBalance, readMethod: \"getAccountBalance\", writeMethod: \"setAccountBalance\"});\n\n\n/**\n * Sets the account balance. This is an optional field according to the OFX spec.\n *\n * @param {InvestmentBalance} accountBalance the account balance\n */\nInvestmentStatementResponse.prototype.setAccountBalance = function(accountBalance) {\n  this.accountBalance = accountBalance;\n};\n\n\n/**\n * Gets the security list aggregate.\n * <br>\n * This is not actually technically part of the investment statement responsr aggregate, but\n * according to Section 13.8.4, OFX spec, this aggregate can appear the overall response and\n * we provide it here for convenience.\n *\n * @return {SecurityList} the security list aggregate\n */\nInvestmentStatementResponse.prototype.getSecurityList = function() {\n  return this.securityList;\n};\n\n\n/**\n * Sets the security list aggregate.\n * <br>\n * This is not actually technically part of the investment statement responsr aggregate, but\n * according to Section 13.8.4, OFX spec, this aggregate can appear the overall response and\n * we provide it here for convenience.\n *\n * @param {SecurityList} securityList the security list aggregate\n */\nInvestmentStatementResponse.prototype.setSecurityList = function(securityList) {\n  this.securityList = securityList;\n};\n\n\n\n\nmodule.exports = InvestmentStatementResponse;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar MessageSetType = require(\"../../MessageSetType\");\nvar ResponseMessageSet = require(\"../../ResponseMessageSet\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar InvestmentStatementResponseTransaction = require(\"./InvestmentStatementResponseTransaction\");\n\n/**\n * Investment statement response message set.\n * See \"Section 13.7.1.2.2, OFX Spec\"\n *\n * @class\n * @augments ResponseMessageSet\n */\nfunction InvestmentStatementResponseMessageSet () {\n  ResponseMessageSet.call(this);\n\n  /**\n   * @name InvestmentStatementResponseMessageSet#statementResponses\n   * @type InvestmentStatementResponseTransaction[]\n   * @access private\n   */\n  this.statementResponses = null;\n}\n\ninherit(InvestmentStatementResponseMessageSet, \"extends\", ResponseMessageSet);\n\n\nAggregate.add(\"INVSTMTMSGSRSV1\", InvestmentStatementResponseMessageSet);\n\n\nInvestmentStatementResponseMessageSet.prototype.getType = function() {\n  return MessageSetType.investment;\n};\n\n\n/**\n * Gets the statement response list. Most OFX files have a single statement response.\n *\n * @return {InvestmentStatementResponseTransaction[]} the statement response list\n */\nInvestmentStatementResponseMessageSet.prototype.getStatementResponses = function() {\n  return this.statementResponses;\n};\nChildAggregate.add(InvestmentStatementResponseMessageSet, {order: 0, attributeType: Array, collectionEntryType: InvestmentStatementResponseTransaction, readMethod: \"getStatementResponses\", writeMethod: \"setStatementResponses\"});\n\n\n/**\n * Sets the statement reponse list. Most OFX files have a single statement response.\n *\n * @param {InvestmentStatementResponseTransaction[]} statementResponses the statement response list\n */\nInvestmentStatementResponseMessageSet.prototype.setStatementResponses = function(statementResponses) {\n  this.statementResponses = statementResponses;\n};\n\n\n/**\n * Gets the first statement response. Use getStatementResponses() if you are expecting multiple\n * responses.\n *\n * @return {InvestmentStatementResponseTransaction} the first investment statement response.\n */\nInvestmentStatementResponseMessageSet.prototype.getStatementResponse = function() {\n  return !this.statementResponses || this.statementResponses.length === 0 ? null : this.statementResponses[0];\n};\n\n\n/**\n * Sets the statement response if there is a single response.\n *\n * @param {InvestmentStatementResponseTransaction} statementResponse The statement response.\n */\nInvestmentStatementResponseMessageSet.prototype.setStatementResponse = function(statementResponse) {\n  this.statementResponses = [statementResponse];\n};\n\n\n// Inherited.\nInvestmentStatementResponseMessageSet.prototype.getResponseMessages = function() {\n  return this.statementResponses;\n};\n\n\n\n\nmodule.exports = InvestmentStatementResponseMessageSet;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar TransactionWrappedResponseMessage = require(\"../../TransactionWrappedResponseMessage\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar InvestmentStatementResponse = require(\"./InvestmentStatementResponse\");\n\n/**\n * Investment statement transaction response.\n * See \"Section 13.9.2.1, OFX Spec\"\n *\n * @class\n * @augments TransactionWrappedResponseMessage\n */\nfunction InvestmentStatementResponseTransaction () {\n  TransactionWrappedResponseMessage.call(this);\n\n  /**\n   * @name InvestmentStatementResponseTransaction#message\n   * @type InvestmentStatementResponse\n   * @access private\n   */\n  this.message = null;\n}\n\ninherit(InvestmentStatementResponseTransaction, \"extends\", TransactionWrappedResponseMessage);\n\n\nAggregate.add(\"INVSTMTTRNRS\", InvestmentStatementResponseTransaction);\n\n\n/**\n * Gets the the statement response message.\n *\n * @return {InvestmentStatementResponse} the statement response message.\n */\nInvestmentStatementResponseTransaction.prototype.getMessage = function() {\n  return this.message;\n};\nChildAggregate.add(InvestmentStatementResponseTransaction, {required: true, order: 30, attributeType: InvestmentStatementResponse, readMethod: \"getMessage\", writeMethod: \"setMessage\"});\n\n\n/**\n * Sets the the statement response message.\n *\n * @param {InvestmentStatementResponse} message the statement response message.\n */\nInvestmentStatementResponseTransaction.prototype.setMessage = function(message) {\n  this.message = message;\n};\n\n\n// Inherited.\nInvestmentStatementResponseTransaction.prototype.getWrappedMessage = function() {\n  return this.getMessage();\n};\n\n\n\n\nmodule.exports = InvestmentStatementResponseTransaction;\n","\"use strict\";\n\nmodule.exports = {\n  BalanceList: require(\"./BalanceList\"),\n  IncludePosition: require(\"./IncludePosition\"),\n  InvestmentBalance: require(\"./InvestmentBalance\"),\n  InvestmentStatementRequest: require(\"./InvestmentStatementRequest\"),\n  InvestmentStatementRequestMessageSet: require(\"./InvestmentStatementRequestMessageSet\"),\n  InvestmentStatementRequestTransaction: require(\"./InvestmentStatementRequestTransaction\"),\n  InvestmentStatementResponse: require(\"./InvestmentStatementResponse\"),\n  InvestmentStatementResponseMessageSet: require(\"./InvestmentStatementResponseMessageSet\"),\n  InvestmentStatementResponseTransaction: require(\"./InvestmentStatementResponseTransaction\")\n};\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar SubAccountType = require(\"../accounts/SubAccountType\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar BaseInvestmentTransaction = require(\"./BaseInvestmentTransaction\");\nvar TransactionWithSecurity = require(\"./TransactionWithSecurity\");\nvar BuyInvestmentTransaction = require(\"./BuyInvestmentTransaction\");\n\n\n/**\n * Base class for all investment transactions for buying securities.\n * <br>\n * This class exposes a read-only view of the flattened aggregates that are\n * common to all buy investment transactions as a convenience to application\n * developers who may not find the ofx aggregation model intuitive.\n *\n * @class\n * @augments BaseInvestmentTransaction\n * @augments TransactionWithSecurity\n */\nfunction BaseBuyInvestmentTransaction (/*TransactionType*/ transactionType) {\n  BaseInvestmentTransaction.call(this, transactionType);\n\n  /**\n   * @name BaseBuyInvestmentTransaction#buyInvestment\n   * @type BuyInvestmentTransaction\n   * @access private\n   */\n  this.buyInvestment = null;\n}\n\ninherit(BaseBuyInvestmentTransaction, \"extends\", BaseInvestmentTransaction);\ninherit(BaseBuyInvestmentTransaction, \"implements\", TransactionWithSecurity);\n\n\n\n/**\n * Gets the buy investment transaction child aggregate.\n *\n * @return {BuyInvestmentTransaction} the buy investment transaction child aggregate\n */\nBaseBuyInvestmentTransaction.prototype.getBuyInvestment = function() {\n  return this.buyInvestment;\n};\nChildAggregate.add(BaseBuyInvestmentTransaction, {order: 10, attributeType: BuyInvestmentTransaction, readMethod: \"getBuyInvestment\", writeMethod: \"setBuyInvestment\"});\n\n\n/**\n * Sets the buy investment transaction child aggregate.\n *\n * @param {BuyInvestmentTransaction} buyInvestment the buy investment transaction child aggregate\n */\nBaseBuyInvestmentTransaction.prototype.setBuyInvestment = function(buyInvestment) {\n  this.buyInvestment = buyInvestment;\n};\n\n\n/**\n * Gets the investment transaction aggregate.\n *\n * @return {InvestmentTransaction} the investment transaction aggregate\n */\n// @Overridden\nBaseBuyInvestmentTransaction.prototype.getInvestmentTransaction = function() {\n  return this.getBuyInvestment().getInvestmentTransaction();\n};\n\n\n/**\n * Gets the id of the security that was bought. This is a required field according to the OFX\n * spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {SecurityId} the security id of the security that was bought\n */\nBaseBuyInvestmentTransaction.prototype.getSecurityId = function() {\n  return this.getBuyInvestment().getSecurityId();\n};\n\n\n/**\n * Gets the number of units of the security that was bought. For security-based actions other\n * than stock splits, this is the quantity bought. For stocks, mutual funds, and others, this\n * is the number of shares. For bonds, this is the face value. For options, this is the number of\n * contacts. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the number of units purchased.\n */\nBaseBuyInvestmentTransaction.prototype.getUnits = function() {\n  return this.getBuyInvestment().getUnits();\n};\n\n\n/**\n * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the\n * share price. For bonds, this is the percentage of par. For options, this is the per share (not\n * per contact) price. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the per unit price\n */\nBaseBuyInvestmentTransaction.prototype.getUnitPrice = function() {\n  return this.getBuyInvestment().getUnitPrice();\n};\n\n\n/**\n * Gets the portion of the unit price that is attributed to the dealer markup. This is an\n * optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the per unit markeup price\n */\nBaseBuyInvestmentTransaction.prototype.getMarkup = function() {\n  return this.getBuyInvestment().getMarkup();\n};\n\n\n/**\n * Gets the transaction commission for the purchase. This is an optional field according to the\n * OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the transaction commision\n */\nBaseBuyInvestmentTransaction.prototype.getCommission = function() {\n  return this.getBuyInvestment().getCommission();\n};\n\n\n/**\n * Gets the taxes for the purchase. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the transaction taxes\n */\nBaseBuyInvestmentTransaction.prototype.getTaxes = function() {\n  return this.getBuyInvestment().getTaxes();\n};\n\n\n/**\n * Gets the fees for the purchase. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the transaction fees\n */\nBaseBuyInvestmentTransaction.prototype.getFees = function() {\n  return this.getBuyInvestment().getFees();\n};\n\n\n/**\n * Gets the load for the purchase. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the load\n */\nBaseBuyInvestmentTransaction.prototype.getLoad = function() {\n  return this.getBuyInvestment().getLoad();\n};\n\n\n/**\n * Gets the total for the purchase. Should be equal to\n * (units * (unitPrice + markup)) + (commision + fees + load + taxes) according to the OFX\n * spec. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the total\n */\nBaseBuyInvestmentTransaction.prototype.getTotal = function() {\n  return this.getBuyInvestment().getTotal();\n};\n\n\n/**\n * Gets the currency code for the transaction. Only one of currency code or original currency\n * info should be set according to the OFX spec. If neither are set, means the default currency.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the currency code for the transaction\n */\nBaseBuyInvestmentTransaction.prototype.getCurrencyCode = function() {\n  return this.getBuyInvestment().getCurrencyCode();\n};\n\n\n/**\n * Gets the original currency info for the transaction.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {OriginalCurrency} the original currency info for the transaction\n */\nBaseBuyInvestmentTransaction.prototype.getOriginalCurrencyInfo = function() {\n  return this.getBuyInvestment().getOriginalCurrencyInfo();\n};\n\n\n/**\n * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the sub account type\n */\nBaseBuyInvestmentTransaction.prototype.getSubAccountSecurity = function() {\n  return this.getBuyInvestment().getSubAccountSecurity();\n};\n\n\n/**\n * Gets the result of getSubAccountSecurity as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types\n */\nBaseBuyInvestmentTransaction.prototype.getSubAccountSecurityEnum = function() {\n  return SubAccountType.fromOfx(this.getSubAccountSecurity());\n};\n\n\n/**\n * Gets the sub account type that the money came from. (e.g. CASH, MARGIN, SHORT, OTHER).\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the sub account fund\n */\nBaseBuyInvestmentTransaction.prototype.getSubAccountFund = function() {\n  return this.getBuyInvestment().getSubAccountFund();\n};\n\n\n/**\n * Gets the result of getSubAccountFund as one of the well-known types.\n *\n * @return {SubAccountType} the type or null if it wasn't one of the well known types.\n */\nBaseBuyInvestmentTransaction.prototype.getSubAccountFundEnum = function() {\n  return SubAccountType.fromOfx(this.getSubAccountFund());\n};\n\n\n\n\nmodule.exports = BaseBuyInvestmentTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Base class for all investment transactions.\n * <br>\n * This class exposes a read-only view of the flattened aggregates that are\n * common to all investment transactions as a convenience to application\n * developers who may not find the ofx aggregation model intuitive.\n *\n * @class\n */\nfunction BaseInvestmentTransaction (/*TransactionType*/ transactionType) {\n\n  /**\n   * @name BaseInvestmentTransaction#transactionType\n   * @type TransactionType\n   * @access private\n   */\n  this.transactionType = transactionType;\n}\n\n\n\n\n/**\n * Gets the type of transaction.\n *\n * @return {TransactionType} the type of transaction\n */\nBaseInvestmentTransaction.prototype.getTransactionType = function() {\n  return this.transactionType;\n};\n\n\n/**\n * Gets the {@link InvestmentTransaction} aggregate.\n *\n * @return {InvestmentTransaction} the {@link InvestmentTransaction} aggregate\n */\nBaseInvestmentTransaction.prototype.getInvestmentTransaction = function() { throw new Error(\"Not implemented\"); };\n\n/**\n * Gets the unique financial institution assigned transaction id. This is a\n * required field according to the OFX spec.\n * See \"Section 13.9.2.4.1, OFX Spec\"\n *\n * @return {String} the financial institution asssigned transaction id\n */\nBaseInvestmentTransaction.prototype.getTransactionId = function() {\n  return this.getInvestmentTransaction().getTransactionId();\n};\n\n/**\n * Gets the server assigned transaction id. This is an optional field\n * according to the OFX spec.\n * See \"Section 13.9.2.4.1, OFX Spec\"\n *\n * @return {String} the server assigned transaction id\n */\nBaseInvestmentTransaction.prototype.getServerId = function() {\n  return this.getInvestmentTransaction().getServerId();\n};\n\n/**\n * Gets the trade date of the transaction. For stock splits, this is the\n * day of record. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.4.1, OFX Spec\"\n *\n * @return {Date} the trade date\n */\nBaseInvestmentTransaction.prototype.getTradeDate = function() {\n  return this.getInvestmentTransaction().getTradeDate();\n};\n\n/**\n * Gets the settlement date of the transaction. For stock splits, this is the\n * day of of execution. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.1, OFX Spec\"\n *\n * @return {Date} the trade date\n */\nBaseInvestmentTransaction.prototype.getSettlementDate = function() {\n  return this.getInvestmentTransaction().getSettlementDate();\n};\n\n/**\n * For a reveral transaction, gets the financial institution assigned\n * transaction id for the transaction being revesed.\n * See \"Section 13.9.2.4.1, OFX Spec\"\n *\n * @return {String} the transaction id of the transaction being reversed\n */\nBaseInvestmentTransaction.prototype.getReversalTransactionId = function() {\n  return this.getInvestmentTransaction().getReversalTransactionId();\n};\n\n/**\n * Gets the memo associated with the transaction. This is an optional field\n * according to the OFX spec.\n * See \"Section 13.9.2.4.1, OFX Spec\"\n *\n * @return {String} the memo\n */\nBaseInvestmentTransaction.prototype.getMemo = function() {\n  return this.getInvestmentTransaction().getMemo();\n};\n\n\n\n\nmodule.exports = BaseInvestmentTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar BaseInvestmentTransaction = require(\"./BaseInvestmentTransaction\");\nvar InvestmentTransaction = require(\"./InvestmentTransaction\");\n\n/**\n * Base class for investment transactions that aren't buys or sales..\n * <br>\n * This class exposes a read-only view of the flattened aggregates that are\n * common to all investment transactions as a convenience to application\n * developers who may not find the ofx aggregation model intuitive.\n *\n * @class\n * @augments BaseInvestmentTransaction\n */\nfunction BaseOtherInvestmentTransaction (/*TransactionType*/ transactionType) {\n  BaseInvestmentTransaction.call(this, transactionType);\n\n  /**\n   * @name BaseOtherInvestmentTransaction#investmentTransaction\n   * @type InvestmentTransaction\n   * @access private\n   */\n  this.investmentTransaction = null;\n}\n\ninherit(BaseOtherInvestmentTransaction, \"extends\", BaseInvestmentTransaction);\n\n\n\n\n/**\n * Gets the {@link InvestmentTransaction} aggregate.\n *\n * @return {InvestmentTransaction} the {@link InvestmentTransaction} aggregate\n */\n// @Override\nBaseOtherInvestmentTransaction.prototype.getInvestmentTransaction = function() {\n  return this.investmentTransaction;\n};\nChildAggregate.add(BaseOtherInvestmentTransaction, {order: 10, attributeType: InvestmentTransaction, readMethod: \"getInvestmentTransaction\", writeMethod: \"setInvestmentTransaction\"});\n\n\n/**\n * Sets the {@link InvestmentTransaction} aggregate.\n *\n * @param {InvestmentTransaction} investmentTransaction the {@link InvestmentTransaction} aggregate\n */\nBaseOtherInvestmentTransaction.prototype.setInvestmentTransaction = function(investmentTransaction) {\n  this.investmentTransaction = investmentTransaction;\n};\n\n\n\n\nmodule.exports = BaseOtherInvestmentTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar Inv401KSource = require(\"../positions/Inv401KSource\");\nvar SubAccountType = require(\"../accounts/SubAccountType\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar BaseInvestmentTransaction = require(\"./BaseInvestmentTransaction\");\nvar TransactionWithSecurity = require(\"./TransactionWithSecurity\");\nvar SellInvestmentTransaction = require(\"./SellInvestmentTransaction\");\n\n/**\n * Base class for all investment transactions for selling securities.\n * <br>\n * This class exposes a read-only view of the flattened aggregates that are\n * common to all sell investment transactions as a convenience to application\n * developers who may not find the ofx aggregation model intuitive.\n *\n * @class\n * @augments BaseInvestmentTransaction\n * @augments TransactionWithSecurity\n */\nfunction BaseSellInvestmentTransaction (/*TransactionType*/ transactionType) {\n  BaseInvestmentTransaction.call(this, transactionType);\n\n  /**\n   * @name BaseSellInvestmentTransaction#sellInvestment\n   * @type SellInvestmentTransaction\n   * @access private\n   */\n  this.sellInvestment = null;\n}\n\ninherit(BaseSellInvestmentTransaction, \"extends\", BaseInvestmentTransaction);\ninherit(BaseSellInvestmentTransaction, \"implements\", TransactionWithSecurity);\n\n\n\n/**\n * Gets the sell investment transaction child aggregate.\n *\n * @return {SellInvestmentTransaction} the sell investment transaction child aggregate\n */\n// @Override\nBaseSellInvestmentTransaction.prototype.getSellInvestment = function() {\n  return this.sellInvestment;\n};\nChildAggregate.add(BaseSellInvestmentTransaction, {order: 10, attributeType: SellInvestmentTransaction, readMethod: \"getSellInvestment\", writeMethod: \"setSellInvestment\"});\n\n\n/**\n * Sets the sell investment transaction child aggregate.\n *\n * @param {SellInvestmentTransaction} sellInvestment the sell investment transaction child aggregate\n */\nBaseSellInvestmentTransaction.prototype.setSellInvestment = function(sellInvestment) {\n  this.sellInvestment = sellInvestment;\n};\n\n\n/**\n * Gets the investment transaction aggregate.\n *\n * @return {InvestmentTransaction} the investment transaction aggregate\n */\n// @Overridden\nBaseSellInvestmentTransaction.prototype.getInvestmentTransaction = function() {\n  return this.getSellInvestment().getInvestmentTransaction();\n};\n\n\n/**\n * Gets the id of the security that was sold. This is a required field according to the OFX\n * spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {SecurityId} the security id of the security that was bought\n */\nBaseSellInvestmentTransaction.prototype.getSecurityId = function() {\n  return this.getSellInvestment().getSecurityId();\n};\n\n\n/**\n * Gets the number of units of the security that was sold. For security-based actions other\n * than stock splits, this is the quantity sold. For stocks, mutual funds, and others, this\n * is the number of shares. For bonds, this is the face value. For options, this is the number of\n * contacts. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the number of units purchased.\n */\nBaseSellInvestmentTransaction.prototype.getUnits = function() {\n  return this.getSellInvestment().getUnits();\n};\n\n\n/**\n * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the\n * share price. For bonds, this is the percentage of par. For options, this is the per share (not\n * per contact) price. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the per unit price\n */\nBaseSellInvestmentTransaction.prototype.getUnitPrice = function() {\n  return this.getSellInvestment().getUnitPrice();\n};\n\n\n/**\n * Gets the portion of the unit price that is attributed to the dealer markdown. This is an\n * optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the per unit markedown price\n */\nBaseSellInvestmentTransaction.prototype.getMarkdown = function() {\n  return this.getSellInvestment().getMarkdown();\n};\n\n\n/**\n * Gets the transaction commission for the sale. This is an optional field according to the\n * OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the transaction commision\n */\nBaseSellInvestmentTransaction.prototype.getCommission = function() {\n  return this.getSellInvestment().getCommission();\n};\n\n\n/**\n * Gets the taxes for the sale. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the transaction taxes\n */\nBaseSellInvestmentTransaction.prototype.getTaxes = function() {\n  return this.getSellInvestment().getTaxes();\n};\n\n\n/**\n * Gets the fees for the sale. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the transaction fees\n */\nBaseSellInvestmentTransaction.prototype.getFees = function() {\n  return this.getSellInvestment().getFees();\n};\n\n\n/**\n * Gets the load for the sale. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the load\n */\nBaseSellInvestmentTransaction.prototype.getLoad = function() {\n  return this.getSellInvestment().getLoad();\n};\n\n\n/**\n * Gets the withholding for the sale. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the withholding\n */\nBaseSellInvestmentTransaction.prototype.getWithholding = function() {\n  return this.getSellInvestment().getWithholding();\n};\n\n\n/**\n * Gets whether the sale was tax exempt. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Boolean} whether the transaction was tax exempt\n */\nBaseSellInvestmentTransaction.prototype.getTaxExempt = function() {\n  return this.getSellInvestment().getTaxExempt();\n};\n\n\n/**\n * Gets the total for the sale. Should be equal to\n * (units * (unitPrice + markdown)) + (commision + fees + load + taxes + penalty + withholding +\n * statewithholding) according to the OFX spec. This is a required field according to the OFX\n * spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the total\n */\nBaseSellInvestmentTransaction.prototype.getTotal = function() {\n  return this.getSellInvestment().getTotal();\n};\n\n\n/**\n * Gets the gain sale. This is aan optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the gain for the sale\n */\nBaseSellInvestmentTransaction.prototype.getGain = function() {\n  return this.getSellInvestment().getGain();\n};\n\n\n/**\n * Gets the currency code for the transaction. Only one of currency code or original currency\n * info should be set according to the OFX spec. If neither are set, means the default currency.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the currency code for the transaction.\n */\nBaseSellInvestmentTransaction.prototype.getCurrencyCode = function() {\n  return this.getSellInvestment().getCurrencyCode();\n};\n\n\n/**\n * Gets the origianl currency info for the transaction.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {OriginalCurrency} the currency info for the transaction.\n */\nBaseSellInvestmentTransaction.prototype.getOriginalCurrencyInfo = function() {\n  return this.getSellInvestment().getOriginalCurrencyInfo();\n};\n\n\n/**\n * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the sub account type\n */\nBaseSellInvestmentTransaction.prototype.getSubAccountSecurity = function() {\n  return this.getSellInvestment().getSubAccountSecurity();\n};\n\n\n/**\n * Gets the result of getSubAccountSecurity as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types.\n */\nBaseSellInvestmentTransaction.prototype.getSubAccountSecurityEnum = function() {\n  return SubAccountType.fromOfx(this.getSubAccountSecurity());\n};\n\n\n/**\n * Gets the sub account type that the money went to  (e.g. CASH, MARGIN, SHORT, OTHER).\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the sub account fund\n */\nBaseSellInvestmentTransaction.prototype.getSubAccountFund = function() {\n  return this.getSellInvestment().getSubAccountFund();\n};\n\n\n/**\n * Gets the result of getSubAccountFund as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types.\n */\nBaseSellInvestmentTransaction.prototype.getSubAccountFundEnum = function() {\n  return SubAccountType.fromOfx(this.getSubAccountFund());\n};\n\n\n/**\n * Gets the loan id if this transaction was due to a loan or loan repayment on a 401k. This is an\n * optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the loan id\n */\nBaseSellInvestmentTransaction.prototype.getLoadId = function() {\n  return this.getSellInvestment().getLoanId();\n};\n\n\n/**\n * Gets the state withholding for the sale. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the state withholding\n */\nBaseSellInvestmentTransaction.prototype.getStateWithholding = function() {\n  return this.getSellInvestment().getStateWithholding();\n};\n\n\n/**\n * Gets the penalty for the sale. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the state withholding\n */\nBaseSellInvestmentTransaction.prototype.getPenalty = function() {\n  return this.getSellInvestment().getPenalty();\n};\n\n\n/**\n * Gets the 401K source for the sale. Should be one of \"PRETAX\", \"AFTERTAX\", \"MATCH\",\n * \"PROFITSHARING\", \"ROLLOVER\", \"OTHERVEST\", \"OTHERNONVEST\".  This is an optional field\n * according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the 401k source\n */\nBaseSellInvestmentTransaction.prototype.get401kSource = function() {\n  return this.getSellInvestment().get401kSource();\n};\n\n\n/**\n * Gets the 401k source as one of the well-known types.\n *\n * @return {Inv401KSource} the 401k source or null if its not one of the well-known types\n */\nBaseSellInvestmentTransaction.prototype.get401kSourceEnum = function() {\n  return Inv401KSource.fromOfx(this.get401kSource());\n};\n\n\n\n\nmodule.exports = BaseSellInvestmentTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar BaseBuyInvestmentTransaction = require(\"./BaseBuyInvestmentTransaction\");\nvar TransactionType = require(\"./TransactionType\");\n\n/**\n * Transaction for buying debt (i.e. bonds, CDs, etc.,).\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @class\n * @augments BaseBuyInvestmentTransaction\n */\nfunction BuyDebtTransaction () {\n  BaseBuyInvestmentTransaction.call(this, TransactionType.BUY_DEBT);\n\n  /**\n   * @name BuyDebtTransaction#accruedInterest\n   * @type Double\n   * @access private\n   */\n  this.accruedInterest = null;\n}\n\ninherit(BuyDebtTransaction, \"extends\", BaseBuyInvestmentTransaction);\n\n\nAggregate.add(\"BUYDEBT\", BuyDebtTransaction);\n\n\n\n\n/**\n * Gets the amount of accrued interest on the debt. This is an optional field according to the\n * OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {Double} the amount of accrued interest\n */\nBuyDebtTransaction.prototype.getAccruedInterest = function() {\n  return this.accruedInterest;\n};\nElement.add(BuyDebtTransaction, {name: \"ACCRDINT\", order: 20, attributeType: Number, readMethod: \"getAccruedInterest\", writeMethod: \"setAccruedInterest\"});\n\n\n/**\n * Sets the amount of accrued interest on the debt. This is an optional field according to the\n * OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {Double} accruedInterest the amount of accrued interest\n */\nBuyDebtTransaction.prototype.setAccruedInterest = function(accruedInterest) {\n  this.accruedInterest = accruedInterest;\n};\n\n\n\n\nmodule.exports = BuyDebtTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar SubAccountType = require(\"../accounts/SubAccountType\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar SecurityId = require(\"../../seclist/SecurityId\");\nvar OriginalCurrency = require(\"./OriginalCurrency\");\nvar InvestmentTransaction = require(\"./InvestmentTransaction\");\n\n/**\n * Buy investment transaction aggregate (\"INVBUY\").\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @class\n */\nfunction BuyInvestmentTransaction () {\n\n  /**\n   * @name BuyInvestmentTransaction#investmentTransaction\n   * @type InvestmentTransaction\n   * @access private\n   */\n  this.investmentTransaction = null;\n\n  /**\n   * @name BuyInvestmentTransaction#securityId\n   * @type SecurityId\n   * @access private\n   */\n  this.securityId = null;\n\n  /**\n   * @name BuyInvestmentTransaction#units\n   * @type Double\n   * @access private\n   */\n  this.units = null;\n\n  /**\n   * @name BuyInvestmentTransaction#unitPrice\n   * @type Double\n   * @access private\n   */\n  this.unitPrice = null;\n\n  /**\n   * @name BuyInvestmentTransaction#markup\n   * @type Double\n   * @access private\n   */\n  this.markup = null;\n\n  /**\n   * @name BuyInvestmentTransaction#commission\n   * @type Double\n   * @access private\n   */\n  this.commission = null;\n\n  /**\n   * @name BuyInvestmentTransaction#taxes\n   * @type Double\n   * @access private\n   */\n  this.taxes = null;\n\n  /**\n   * @name BuyInvestmentTransaction#fees\n   * @type Double\n   * @access private\n   */\n  this.fees = null;\n\n  /**\n   * @name BuyInvestmentTransaction#load\n   * @type Double\n   * @access private\n   */\n  this.load = null;\n\n  /**\n   * @name BuyInvestmentTransaction#total\n   * @type Double\n   * @access private\n   */\n  this.total = null;\n\n  /**\n   * @name BuyInvestmentTransaction#currencyCode\n   * @type String\n   * @access private\n   */\n  this.currencyCode = null;\n\n  /**\n   * @name BuyInvestmentTransaction#originalCurrencyInfo\n   * @type OriginalCurrency\n   * @access private\n   */\n  this.originalCurrencyInfo = null;\n\n  /**\n   * @name BuyInvestmentTransaction#subAccountSecurity\n   * @type String\n   * @access private\n   */\n  this.subAccountSecurity = null;\n\n  /**\n   * @name BuyInvestmentTransaction#subAccountFund\n   * @type String\n   * @access private\n   */\n  this.subAccountFund = null;\n}\n\n\n\nAggregate.add(\"INVBUY\", BuyInvestmentTransaction);\n\n\n/**\n * Gets the investment transaction child aggregate.\n *\n * @return {InvestmentTransaction} the investment transaction child aggregate\n */\nBuyInvestmentTransaction.prototype.getInvestmentTransaction = function() {\n  return this.investmentTransaction;\n};\nChildAggregate.add(BuyInvestmentTransaction, {order: 10, attributeType: InvestmentTransaction, readMethod: \"getInvestmentTransaction\", writeMethod: \"setInvestmentTransaction\"});\n\n\n/**\n * Sets the investment transaction child aggregate.\n *\n * @param {InvestmentTransaction} investmentTransaction the investment transaction child aggregate\n */\nBuyInvestmentTransaction.prototype.setInvestmentTransaction = function(investmentTransaction) {\n  this.investmentTransaction = investmentTransaction;\n};\n\n\n/**\n * Gets the id of the security that was bought. This is a required field according to the OFX\n * spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {SecurityId} the security id of the security that was bought\n */\nBuyInvestmentTransaction.prototype.getSecurityId = function() {\n  return this.securityId;\n};\nChildAggregate.add(BuyInvestmentTransaction, {required: true, order: 20, attributeType: SecurityId, readMethod: \"getSecurityId\", writeMethod: \"setSecurityId\"});\n\n\n/**\n * Sets the id of the security that was bought. This is a required field according to the OFX\n * spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {SecurityId} securityId the security id of the security that was bought\n */\nBuyInvestmentTransaction.prototype.setSecurityId = function(securityId) {\n  this.securityId = securityId;\n};\n\n\n/**\n * Gets the number of units of the security that was bought. For security-based actions other\n * than stock splits, this is the quantity bought. For stocks, mutual funds, and others, this\n * is the number of shares. For bonds, this is the face value. For options, this is the number of\n * contacts. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the number of units purchased.\n */\nBuyInvestmentTransaction.prototype.getUnits = function() {\n  return this.units;\n};\nElement.add(BuyInvestmentTransaction, {name: \"UNITS\", required: true, order: 30, attributeType: Number, readMethod: \"getUnits\", writeMethod: \"setUnits\"});\n\n\n/**\n * Sets the number of units of the security that was bought. For security-based actions other\n * than stock splits, this is the quantity bought. For stocks, mutual funds, and others, this\n * is the number of shares. For bonds, this is the face value. For options, this is the number of\n * contacts. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} units the number of units purchased.\n */\nBuyInvestmentTransaction.prototype.setUnits = function(units) {\n  this.units = units;\n};\n\n\n/**\n * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the\n * share price. For bonds, this is the percentage of par. For options, this is the per share (not\n * per contact) price. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the per unit price\n */\nBuyInvestmentTransaction.prototype.getUnitPrice = function() {\n  return this.unitPrice;\n};\nElement.add(BuyInvestmentTransaction, {name: \"UNITPRICE\", required: true, order: 40, attributeType: Number, readMethod: \"getUnitPrice\", writeMethod: \"setUnitPrice\"});\n\n\n/**\n * Sets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the\n * share price. For bonds, this is the percentage of par. For options, this is the per share (not\n * per contact) price. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} unitPrice the per unit price\n */\nBuyInvestmentTransaction.prototype.setUnitPrice = function(unitPrice) {\n  this.unitPrice = unitPrice;\n};\n\n\n/**\n * Gets the portion of the unit price that is attributed to the dealer markup. This is an\n * optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the per unit markeup price\n */\nBuyInvestmentTransaction.prototype.getMarkup = function() {\n  return this.markup;\n};\nElement.add(BuyInvestmentTransaction, {name: \"MARKUP\", order: 50, attributeType: Number, readMethod: \"getMarkup\", writeMethod: \"setMarkup\"});\n\n\n/**\n * Sets the portion of the unit price that is attributed to the dealer markup. This is an\n * optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} markup the per unit markeup price\n */\nBuyInvestmentTransaction.prototype.setMarkup = function(markup) {\n  this.markup = markup;\n};\n\n\n/**\n * Gets the transaction commission for the purchase. This is an optional field according to the\n * OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the transaction commision\n */\nBuyInvestmentTransaction.prototype.getCommission = function() {\n  return this.commission;\n};\nElement.add(BuyInvestmentTransaction, {name: \"COMMISSION\", order: 60, attributeType: Number, readMethod: \"getCommission\", writeMethod: \"setCommission\"});\n\n\n/**\n * Sets the transaction commission for the purchase. This is an optional field according to the\n * OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} commission the transaction commision\n */\nBuyInvestmentTransaction.prototype.setCommission = function(commission) {\n  this.commission = commission;\n};\n\n\n/**\n * Gets the taxes for the purchase. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the transaction taxes\n */\nBuyInvestmentTransaction.prototype.getTaxes = function() {\n  return this.taxes;\n};\nElement.add(BuyInvestmentTransaction, {name: \"TAXES\", order: 70, attributeType: Number, readMethod: \"getTaxes\", writeMethod: \"setTaxes\"});\n\n\n/**\n * Sets the taxes for the purchase. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} taxes the transaction taxes\n */\nBuyInvestmentTransaction.prototype.setTaxes = function(taxes) {\n  this.taxes = taxes;\n};\n\n\n/**\n * Gets the fees for the purchase. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the transaction fees\n */\nBuyInvestmentTransaction.prototype.getFees = function() {\n  return this.fees;\n};\nElement.add(BuyInvestmentTransaction, {name: \"FEES\", order: 80, attributeType: Number, readMethod: \"getFees\", writeMethod: \"setFees\"});\n\n\n/**\n * Sets the fees for the purchase. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} fees the transaction fees\n */\nBuyInvestmentTransaction.prototype.setFees = function(fees) {\n  this.fees = fees;\n};\n\n\n/**\n * Gets the load for the purchase. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the load\n */\nBuyInvestmentTransaction.prototype.getLoad = function() {\n  return this.load;\n};\nElement.add(BuyInvestmentTransaction, {name: \"LOAD\", order: 90, attributeType: Number, readMethod: \"getLoad\", writeMethod: \"setLoad\"});\n\n\n/**\n * Sets the load for the purchase. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} load the load\n */\nBuyInvestmentTransaction.prototype.setLoad = function(load) {\n  this.load = load;\n};\n\n\n/**\n * Gets the total for the purchase. Should be equal to\n * (units * (unitPrice + markup)) + (commision + fees + taxes) according to the OFX\n * spec. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the total\n */\nBuyInvestmentTransaction.prototype.getTotal = function() {\n  return this.total;\n};\nElement.add(BuyInvestmentTransaction, {name: \"TOTAL\", required: true, order: 100, attributeType: Number, readMethod: \"getTotal\", writeMethod: \"setTotal\"});\n\n\n/**\n * Sets the total for the purchase. Should be equal to\n * (units * (unitPrice + markup)) + (commision + fees + taxes) according to the OFX\n * spec. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} total the total\n */\nBuyInvestmentTransaction.prototype.setTotal = function(total) {\n  this.total = total;\n};\n\n\n/**\n * Gets the currency code for the transaction. Only one of currency code or original currency\n * info should be set according to the OFX spec. If neither are set, means the default currency.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the currency code for the transaction.\n */\nBuyInvestmentTransaction.prototype.getCurrencyCode = function() {\n  return this.currencyCode;\n};\nElement.add(BuyInvestmentTransaction, {name: \"CURRENCY\", order: 110, attributeType: String, readMethod: \"getCurrencyCode\", writeMethod: \"setCurrencyCode\"});\n\n\n/**\n * Sets the currency code for the transaction. Only one of currency code or original currency\n * info may be set according to the OFX spec. If neither are set, means the default currency.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} currencyCode the currency code for the transaction.\n */\nBuyInvestmentTransaction.prototype.setCurrencyCode = function(currencyCode) {\n  this.currencyCode = currencyCode;\n  this.originalCurrencyInfo = null;\n};\n\n\n/**\n * Gets the original currency info for the transaction.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {OriginalCurrency} the original currency info for the transaction\n */\nBuyInvestmentTransaction.prototype.getOriginalCurrencyInfo = function() {\n  return this.originalCurrencyInfo;\n};\nChildAggregate.add(BuyInvestmentTransaction, {order: 120, attributeType: OriginalCurrency, readMethod: \"getOriginalCurrencyInfo\", writeMethod: \"setOriginalCurrencyInfo\"});\n\n\n/**\n * Sets the original currency info for the transaction\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {OriginalCurrency} originalCurrencyInfo the original currency info for the transaction\n */\nBuyInvestmentTransaction.prototype.setOriginalCurrencyInfo = function(originalCurrencyInfo) {\n  this.originalCurrencyInfo = originalCurrencyInfo;\n  this.currencyCode = null;\n};\n\n\n /**\n * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the sub account type\n */\nBuyInvestmentTransaction.prototype.getSubAccountSecurity = function() {\n  return this.subAccountSecurity;\n};\nElement.add(BuyInvestmentTransaction, {name: \"SUBACCTSEC\", order: 130, attributeType: String, readMethod: \"getSubAccountSecurity\", writeMethod: \"setSubAccountSecurity\"});\n\n\n/**\n  * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).\n  * See \"Section 13.9.2.4.3, OFX Spec\"\n  *\n  * @param {String} subAccountSecurity the sub account type\n  */\nBuyInvestmentTransaction.prototype.setSubAccountSecurity = function(subAccountSecurity) {\n  this.subAccountSecurity = subAccountSecurity;\n};\n\n\n/**\n * Gets the result of getSubAccountSecurity as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types.\n */\nBuyInvestmentTransaction.prototype.getSubAccountSecurityEnum = function() {\n  return SubAccountType.fromOfx(this.getSubAccountSecurity());\n};\n\n\n/**\n * Gets the sub account type that the money came from. (e.g. CASH, MARGIN, SHORT, OTHER).\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the sub account fund\n */\nBuyInvestmentTransaction.prototype.getSubAccountFund = function() {\n  return this.subAccountFund;\n};\nElement.add(BuyInvestmentTransaction, {name: \"SUBACCTFUND\", order: 140, attributeType: String, readMethod: \"getSubAccountFund\", writeMethod: \"setSubAccountFund\"});\n\n\n/**\n * Sets the sub account type that the money came from. (e.g. CASH, MARGIN, SHORT, OTHER).\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} subAcctFund the sub account fund\n */\nBuyInvestmentTransaction.prototype.setSubAccountFund = function(subAcctFund) {\n  this.subAccountFund = subAcctFund;\n};\n\n\n/**\n * Gets the result of getSubAccountFund as one of the well-known types.\n *\n * @return {SubAccountType} the type or null if it wasn't one of the well known types.\n */\nBuyInvestmentTransaction.prototype.getSubAccountFundEnum = function() {\n  return SubAccountType.fromOfx(this.getSubAccountFund());\n};\n\n\n\n\nmodule.exports = BuyInvestmentTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar BaseBuyInvestmentTransaction = require(\"./BaseBuyInvestmentTransaction\");\nvar TransactionType = require(\"./TransactionType\");\nvar BuyType = require(\"./BuyType\");\n\n/**\n * Transaction for buying mutual funds.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @class\n * @augments BaseBuyInvestmentTransaction\n */\nfunction BuyMutualFundTransaction () {\n  BaseBuyInvestmentTransaction.call(this, TransactionType.BUY_MUTUAL_FUND);\n\n  /**\n   * @name BuyMutualFundTransaction#buyType\n   * @type String\n   * @access private\n   */\n  this.buyType = null;\n\n  /**\n   * @name BuyMutualFundTransaction#relatedTransactionId\n   * @type String\n   * @access private\n   */\n  this.relatedTransactionId = null;\n}\n\ninherit(BuyMutualFundTransaction, \"extends\", BaseBuyInvestmentTransaction);\n\n\nAggregate.add(\"BUYMF\", BuyMutualFundTransaction);\n\n\n\n/**\n * Gets the type of purchase (i.e. \"BUY\" or \"BUYTOCOVER\"). This is a required field according to\n * the OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {String} the buy type\n */\nBuyMutualFundTransaction.prototype.getBuyType = function() {\n  return this.buyType;\n};\nElement.add(BuyMutualFundTransaction, {name: \"BUYTYPE\", required: true, order: 20, attributeType: String, readMethod: \"getBuyType\", writeMethod: \"setBuyType\"});\n\n\n/**\n * Sets the type of purchase (i.e. \"BUY\" or \"BUYTOCOVER\"). This is a required field according to\n * the OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {String} buyType the buy type\n */\nBuyMutualFundTransaction.prototype.setBuyType = function(buyType) {\n  this.buyType = buyType;\n};\n\n\n/**\n * Gets the buy type as one of the well-known types.\n *\n * @return {BuyType} the type of purchase or null if it's not known\n */\nBuyMutualFundTransaction.prototype.getBuyTypeEnum = function() {\n  return BuyType.fromOfx(this.buyType);\n};\n\n\n/**\n * Gets any related transaction id for a mutual fund purchase (e.g. for a mutual fund exchange).\n * This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {String} the related transaction id\n */\nBuyMutualFundTransaction.prototype.getRelatedTransactionId = function() {\n  return this.relatedTransactionId;\n};\nElement.add(BuyMutualFundTransaction, {name: \"RELFITID\", order: 30, attributeType: String, readMethod: \"getRelatedTransactionId\", writeMethod: \"setRelatedTransactionId\"});\n\n\n/**\n * Sets any related transaction id for a mutual fund purchase (e.g. for a mutual fund exchange).\n * This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {String} relatedTransactionId the related transaction id\n */\nBuyMutualFundTransaction.prototype.setRelatedTransactionId = function(relatedTransactionId) {\n  this.relatedTransactionId = relatedTransactionId;\n};\n\n\n\n\nmodule.exports = BuyMutualFundTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar TransactionType = require(\"./TransactionType\");\nvar BaseBuyInvestmentTransaction = require(\"./BaseBuyInvestmentTransaction\");\nvar OptionBuyType = require(\"./OptionBuyType\");\n\n/**\n * Transaction for buying options.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @class\n * @augments BaseBuyInvestmentTransaction\n */\nfunction BuyOptionTransaction () {\n  BaseBuyInvestmentTransaction.call(this, TransactionType.BUY_OPTION);\n\n  /**\n   * @name BuyOptionTransaction#optionBuyType\n   * @type String\n   * @access private\n   */\n  this.optionBuyType = null;\n\n  /**\n   * @name BuyOptionTransaction#sharesPerContact\n   * @type Integer\n   * @access private\n   */\n  this.sharesPerContact = null;\n}\n\ninherit(BuyOptionTransaction, \"extends\", BaseBuyInvestmentTransaction);\n\n\nAggregate.add(\"BUYOPT\", BuyOptionTransaction);\n\n\n\n/**\n * Gets the type of option purchase (i.e. \"BUYTOOPEN\" or \"BUYTOCLOSE\"). This is a required field\n * according to the OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {String} the option buy type\n */\nBuyOptionTransaction.prototype.getOptionBuyType = function() {\n  return this.optionBuyType;\n};\nElement.add(BuyOptionTransaction, {name: \"OPTBUYTYPE\", required: true, order: 20, attributeType: String, readMethod: \"getOptionBuyType\", writeMethod: \"setOptionBuyType\"});\n\n\n/**\n * Sets the type of option purchase (i.e. \"BUYTOOPEN\" or \"BUYTOCLOSE\"). This is a required field\n * according to the OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {String} optionBuyType the option buy type\n */\nBuyOptionTransaction.prototype.setOptionBuyType = function(optionBuyType) {\n  this.optionBuyType = optionBuyType;\n};\n\n\n/**\n * Gets the option buy type as one of the well-known types.\n *\n * @return {OptionBuyType} the type of purchase or null if it's not known\n */\nBuyOptionTransaction.prototype.getOptionBuyTypeEnum = function() {\n  return OptionBuyType.fromOfx(this.optionBuyType);\n};\n\n\n/**\n * Gets the number of shares per contact. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {Integer} the number of shares per contact\n */\nBuyOptionTransaction.prototype.getSharesPerContract = function() {\n  return this.sharesPerContact;\n};\nElement.add(BuyOptionTransaction, {name: \"SHPERCTRCT\", required: true, order: 30, attributeType: Number, readMethod: \"getSharesPerContract\", writeMethod: \"setSharesPerContract\"});\n\n\n/**\n * Sets the number of shares per contact. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {Integer} sharesPerContact the number of shares per contact\n */\nBuyOptionTransaction.prototype.setSharesPerContract = function(sharesPerContact) {\n  this.sharesPerContact = sharesPerContact;\n};\n\n\n\n\nmodule.exports = BuyOptionTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar BaseBuyInvestmentTransaction = require(\"./BaseBuyInvestmentTransaction\");\nvar TransactionType = require(\"./TransactionType\");\n\n/**\n * Transaction for buying other types of securities.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @class\n * @augments BaseBuyInvestmentTransaction\n */\nfunction BuyOtherTransaction () {\n  BaseBuyInvestmentTransaction.call(this, TransactionType.BUY_OTHER);\n}\n\ninherit(BuyOtherTransaction, \"extends\", BaseBuyInvestmentTransaction);\n\n\nAggregate.add(\"BUYOTHER\", BuyOtherTransaction);\n\n\n\nmodule.exports = BuyOtherTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar TransactionType = require(\"./TransactionType\");\nvar BaseBuyInvestmentTransaction = require(\"./BaseBuyInvestmentTransaction\");\nvar BuyType = require(\"./BuyType\");\n\n/**\n * Transaction for buying stock.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @class\n * @augments BaseBuyInvestmentTransaction\n */\nfunction BuyStockTransaction () {\n  BaseBuyInvestmentTransaction.call(this, TransactionType.BUY_STOCK);\n\n  /**\n   * @name BuyStockTransaction#buyType\n   * @type String\n   * @access private\n   */\n  this.buyType = null;\n}\n\ninherit(BuyStockTransaction, \"extends\", BaseBuyInvestmentTransaction);\n\n\nAggregate.add(\"BUYSTOCK\", BuyStockTransaction);\n\n\n\n/**\n * Gets the type of stock purchase (i.e. \"BUY\" or \"BUYTOCOVER\"). This is a required field\n * according to the OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {String} the buy type\n */\nBuyStockTransaction.prototype.getBuyType = function() {\n  return this.buyType;\n};\nElement.add(BuyStockTransaction, {name: \"BUYTYPE\", required: true, order: 20, attributeType: String, readMethod: \"getBuyType\", writeMethod: \"setBuyType\"});\n\n\n/**\n * Sets the type of stock purchase (i.e. \"BUY\" or \"BUYTOCOVER\"). This is a required field\n * according to the OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {String} buyType the buy type\n */\nBuyStockTransaction.prototype.setBuyType = function(buyType) {\n  this.buyType = buyType;\n};\n\n\n/**\n * Gets the buy type as one of the well-known types.\n *\n * @return {BuyType} the type of purchase or null if it's not well known\n */\nBuyStockTransaction.prototype.getBuyTypeEnum = function() {\n  return BuyType.fromOfx(this.buyType);\n};\n\n\n\n\nmodule.exports = BuyStockTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Type of purchase for stocks and mutual funds.\n * See \"Section 13.9.2.4.2, OFX Spec\"\n *\n * @enum\n */\nvar BuyType = {\n  BUY: \"BUY\",\n  BUY_TO_COVER: \"BUYTOCOVER\",\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"BUY\" === ofxVal) {\n      return BuyType.BUY;\n    } else if (\"BUYTOCOVER\" === ofxVal) {\n      return BuyType.BUY_TO_COVER;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = BuyType;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Type of action for closing a stock option.\n * See \"Section 13.9.2.4.2, OFX Spec\"\n *\n * @enum\n */\nvar CloseOptionAction = {\n  EXERCISE: \"EXERCISE\",\n  ASSIGN: \"ASSIGN\",\n  EXPIRE: \"EXPIRE\",\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"EXERCISE\" === ofxVal) {\n      return CloseOptionAction.EXERCISE;\n    } else if (\"ASSIGN\" === ofxVal) {\n      return CloseOptionAction.ASSIGN;\n    } else if (\"EXPIRE\" === ofxVal) {\n      return CloseOptionAction.EXPIRE;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = CloseOptionAction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar SubAccountType = require(\"../accounts/SubAccountType\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar BaseOtherInvestmentTransaction = require(\"./BaseOtherInvestmentTransaction\");\nvar TransactionWithSecurity = require(\"./TransactionWithSecurity\");\nvar TransactionType = require(\"./TransactionType\");\nvar CloseOptionAction = require(\"./CloseOptionAction\");\nvar SecurityId = require(\"../../seclist/SecurityId\");\n\n\n/**\n * Transaction for closing an option position due to expiration, exercise, or assignment.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @class\n * @augments BaseOtherInvestmentTransaction\n * @augments TransactionWithSecurity\n */\nfunction CloseOptionTransaction () {\n  BaseOtherInvestmentTransaction.call(this, TransactionType.CLOSE_OPTION);\n  \n  /**\n   * @name CloseOptionTransaction#securityId\n   * @type SecurityId\n   * @access private\n   */\n  this.securityId = null;\n\n  /**\n   * @name CloseOptionTransaction#optionAction\n   * @type String\n   * @access private\n   */\n  this.optionAction = null;\n\n  /**\n   * @name CloseOptionTransaction#units\n   * @type Double\n   * @access private\n   */\n  this.units = null;\n\n  /**\n   * @name CloseOptionTransaction#sharesPerContact\n   * @type Integer\n   * @access private\n   */\n  this.sharesPerContact = null;\n\n  /**\n   * @name CloseOptionTransaction#subAccountSecurity\n   * @type String\n   * @access private\n   */\n  this.subAccountSecurity = null;\n\n  /**\n   * @name CloseOptionTransaction#relatedTransactionId\n   * @type String\n   * @access private\n   */\n  this.relatedTransactionId = null;\n\n  /**\n   * @name CloseOptionTransaction#gain\n   * @type Double\n   * @access private\n   */\n  this.gain = null;\n}\n\ninherit(CloseOptionTransaction, \"extends\", BaseOtherInvestmentTransaction);\ninherit(CloseOptionTransaction, \"implements\", TransactionWithSecurity);\n\n\nAggregate.add(\"CLOSUREOPT\", CloseOptionTransaction);\n\n\n\n\n/**\n * Gets the security id of the option.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {SecurityId} the security id of the option\n */\nCloseOptionTransaction.prototype.getSecurityId = function() {\n  return this.securityId;\n};\nChildAggregate.add(CloseOptionTransaction, {order: 20, attributeType: SecurityId, readMethod: \"getSecurityId\", writeMethod: \"setSecurityId\"});\n\n\n/**\n * Sets the security id of the option.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {SecurityId} securityId the security id of the option\n */\nCloseOptionTransaction.prototype.setSecurityId = function(securityId) {\n  this.securityId = securityId;\n};\n\n\n/**\n * Gets the action being performed (i.e. \"EXERCISE\", \"ASSIGN\", \"EXPIRE\" This is a required field\n * according to the OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {String} the option action\n */\nCloseOptionTransaction.prototype.getOptionAction = function() {\n  return this.optionAction;\n};\nElement.add(CloseOptionTransaction, {name: \"OPTACTION\", required: true, order: 30, attributeType: String, readMethod: \"getOptionAction\", writeMethod: \"setOptionAction\"});\n\n\n/**\n * Sets the action being performed (i.e. \"EXERCISE\", \"ASSIGN\", \"EXPIRE\" This is a required field\n * according to the OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {String} optionAction the option action\n */\nCloseOptionTransaction.prototype.setOptionAction = function(optionAction) {\n  this.optionAction = optionAction;\n};\n\n\n/**\n * Gets the action as one of the well-known types.\n *\n * @return {CloseOptionAction} the type of close or null if it's not a well-known type\n */\nCloseOptionTransaction.prototype.getOptionActionEnum = function() {\n  return CloseOptionAction.fromOfx(this.getOptionAction());\n};\n\n\n/**\n * Gets the number of units of the option that were closed. This is a required field according\n * to the OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {Double} the number of units closed\n */\nCloseOptionTransaction.prototype.getUnits = function() {\n  return this.units;\n};\nElement.add(CloseOptionTransaction, {name: \"UNITS\", required: true, order: 40, attributeType: Number, readMethod: \"getUnits\", writeMethod: \"setUnits\"});\n\n\n/**\n * Sets the number of units of the option that were closed. This is a required field according\n * to the OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {Double} units the number of units closed\n */\nCloseOptionTransaction.prototype.setUnits = function(units) {\n  this.units = units;\n};\n\n\n/**\n * Gets the number of shares per contact. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {Integer} the number of shares per contact\n */\nCloseOptionTransaction.prototype.getSharesPerContact = function() {\n  return this.sharesPerContact;\n};\nElement.add(CloseOptionTransaction, {name: \"SHPERCTRCT\", required: true, order: 50, attributeType: Number, readMethod: \"getSharesPerContact\", writeMethod: \"setSharesPerContact\"});\n\n\n/**\n * Sets the number of shares per contact. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {Integer} sharesPerContact the number of shares per contact\n */\nCloseOptionTransaction.prototype.setSharesPerContact = function(sharesPerContact) {\n  this.sharesPerContact = sharesPerContact;\n};\n\n\n/**\n * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {String} the sub account type\n */\nCloseOptionTransaction.prototype.getSubAccountSecurity = function() {\n  return this.subAccountSecurity;\n};\nElement.add(CloseOptionTransaction, {name: \"SUBACCTSEC\", required: true, order: 60, attributeType: String, readMethod: \"getSubAccountSecurity\", writeMethod: \"setSubAccountSecurity\"});\n\n\n/**\n * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {String} subAccountSecurity the sub account type\n */\nCloseOptionTransaction.prototype.setSubAccountSecurity = function(subAccountSecurity) {\n  this.subAccountSecurity = subAccountSecurity;\n};\n\n\n/**\n * Gets the result of getSubAccountFund as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types\n */\nCloseOptionTransaction.prototype.getSubAccountSecurityEnum = function() {\n  return SubAccountType.fromOfx(this.getSubAccountSecurity());\n};\n\n\n/**\n * Gets the related transaction id for the related buy or sell corresponding to the\n * EXERCISE or ASSIGN action. This is a required field according to the OFX spec if the\n * action or EXERCISE or ASSIGN.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {String} the related transaction id\n */\nCloseOptionTransaction.prototype.getRelatedTransactionId = function() {\n  return this.relatedTransactionId;\n};\nElement.add(CloseOptionTransaction, {name: \"RELFITID\", order: 70, attributeType: String, readMethod: \"getRelatedTransactionId\", writeMethod: \"setRelatedTransactionId\"});\n\n\n/**\n * Sets the related transaction id for the related buy or sell corresponding to the\n * EXERCISE or ASSIGN action. This is a required field according to the OFX spec if the\n * action or EXERCISE or ASSIGN.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {String} relatedTransactionId the related transaction id\n */\nCloseOptionTransaction.prototype.setRelatedTransactionId = function(relatedTransactionId) {\n  this.relatedTransactionId = relatedTransactionId;\n};\n\n\n/**\n * Gets the gain related to the transaction. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {Double} the gain related to the transaction\n */\nCloseOptionTransaction.prototype.getGain = function() {\n  return this.gain;\n};\nElement.add(CloseOptionTransaction, {name: \"GAIN\", order: 80, attributeType: Number, readMethod: \"getGain\", writeMethod: \"setGain\"});\n\n\n/**\n * Sets the gain related to the transaction. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {Double} gain the gain related to the transaction\n */\nCloseOptionTransaction.prototype.setGain = function(gain) {\n  this.gain = gain;\n};\n\n\n\n\nmodule.exports = CloseOptionTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar SubAccountType = require(\"../accounts/SubAccountType\");\nvar Inv401KSource = require(\"../positions/Inv401KSource\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar BaseOtherInvestmentTransaction = require(\"./BaseOtherInvestmentTransaction\");\nvar TransactionWithSecurity = require(\"./TransactionWithSecurity\");\nvar TransactionType = require(\"./TransactionType\");\nvar IncomeType = require(\"./IncomeType\");\nvar SecurityId = require(\"../../seclist/SecurityId\");\nvar OriginalCurrency = require(\"./OriginalCurrency\");\n\n/**\n * Transaction for investment income that is realized as cash into the investment account.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @class\n * @augments BaseOtherInvestmentTransaction\n * @augments TransactionWithSecurity\n */\nfunction IncomeTransaction () {\n  BaseOtherInvestmentTransaction.call(this, TransactionType.INCOME);\n\n  /**\n   * @name IncomeTransaction#securityId\n   * @type SecurityId\n   * @access private\n   */\n  this.securityId = null;\n\n  /**\n   * @name IncomeTransaction#incomeType\n   * @type String\n   * @access private\n   */\n  this.incomeType = null;\n\n  /**\n   * @name IncomeTransaction#total\n   * @type Double\n   * @access private\n   */\n  this.total = null;\n\n  /**\n   * @name IncomeTransaction#subAccountSecurity\n   * @type String\n   * @access private\n   */\n  this.subAccountSecurity = null;\n\n  /**\n   * @name IncomeTransaction#subAccountFund\n   * @type String\n   * @access private\n   */\n  this.subAccountFund = null;\n\n  /**\n   * @name IncomeTransaction#taxExempt\n   * @type Boolean\n   * @access private\n   */\n  this.taxExempt = null;\n\n  /**\n   * @name IncomeTransaction#withholding\n   * @type Double\n   * @access private\n   */\n  this.withholding = null;\n\n  /**\n   * @name IncomeTransaction#currencyCode\n   * @type String\n   * @access private\n   */\n  this.currencyCode = null;\n\n  /**\n   * @name IncomeTransaction#originalCurrencyInfo\n   * @type OriginalCurrency\n   * @access private\n   */\n  this.originalCurrencyInfo = null;\n\n  /**\n   * @name IncomeTransaction#inv401kSource\n   * @type String\n   * @access private\n   */\n  this.inv401kSource = null;\n}\n\ninherit(IncomeTransaction, \"extends\", BaseOtherInvestmentTransaction);\ninherit(IncomeTransaction, \"implements\", TransactionWithSecurity);\n\n\nAggregate.add(\"INCOME\", IncomeTransaction);\n\n\n\n/**\n * Gets the id of the security that the income was for. This is a required field according to the\n * OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {SecurityId} the security id of the security that the income was for\n */\nIncomeTransaction.prototype.getSecurityId = function() {\n  return this.securityId;\n};\nChildAggregate.add(IncomeTransaction, {required: true, order: 20, attributeType: SecurityId, readMethod: \"getSecurityId\", writeMethod: \"setSecurityId\"});\n\n\n/**\n * Sets the id of the security that the income was for. This is a required field according to the\n * OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {SecurityId} securityId the security id of the security that the income was for\n */\nIncomeTransaction.prototype.setSecurityId = function(securityId) {\n  this.securityId = securityId;\n};\n\n\n/**\n * Gets the type of income. One of \"CGLONG\" (long term capital gains), \"CGSHORT\" (short term\n * capital gains), \"DIV\" (dividend), INTEREST, or MISC>\n * See \"Section 13.9.2.4.4, OFX Spec\" This is a required field according to the OFX spec.\n *\n * @return {String} the type of income\n */\nIncomeTransaction.prototype.getIncomeType = function() {\n  return this.incomeType;\n};\nElement.add(IncomeTransaction, {name: \"INCOMETYPE\", required: true, order: 30, attributeType: String, readMethod: \"getIncomeType\", writeMethod: \"setIncomeType\"});\n\n\n/**\n * Sets the type of income. One of \"CGLONG\" (long term capital gains), \"CGSHORT\" (short term\n * capital gains), \"DIV\" (dividend), INTEREST, or MISC>\n * See \"Section 13.9.2.4.4, OFX Spec\" This is a required field according to the OFX spec.\n *\n * @param {String} incomeType the type of income\n */\nIncomeTransaction.prototype.setIncomeType = function(incomeType) {\n  this.incomeType = incomeType;\n};\n\n\n/**\n * Gets the income type as one of the well-known types.\n *\n * @return {IncomeType} the income type or null if it's not well known\n */\nIncomeTransaction.prototype.getIncomeTypeEnum = function() {\n  return IncomeType.fromOfx(this.getIncomeType());\n};\n\n\n/**\n * Gets the total income received.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {Double} the total\n */\nIncomeTransaction.prototype.getTotal = function() {\n  return this.total;\n};\nElement.add(IncomeTransaction, {name: \"TOTAL\", required: true, order: 40, attributeType: Number, readMethod: \"getTotal\", writeMethod: \"setTotal\"});\n\n\n/**\n * Sets the total income received.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {Double} total the total\n */\nIncomeTransaction.prototype.setTotal = function(total) {\n  this.total = total;\n};\n\n\n/**\n * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the sub account type\n */\nIncomeTransaction.prototype.getSubAccountSecurity = function() {\n  return this.subAccountSecurity;\n};\nElement.add(IncomeTransaction, {name: \"SUBACCTSEC\", order: 50, attributeType: String, readMethod: \"getSubAccountSecurity\", writeMethod: \"setSubAccountSecurity\"});\n\n\n/**\n * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} subAcctSec the sub account type\n */\nIncomeTransaction.prototype.setSubAccountSecurity = function(subAcctSec) {\n  this.subAccountSecurity = subAcctSec;\n};\n\n\n/**\n * Gets the result of getSubAccountSecurity as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types.\n */\nIncomeTransaction.prototype.getSubAccountSecurityEnum = function() {\n  return SubAccountType.fromOfx(this.getSubAccountSecurity());\n};\n\n\n/**\n * Gets the sub account type that the security is from (e.g. CASH, MARGIN, SHORT, OTHER).\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the sub account fund for the transaction\n */\nIncomeTransaction.prototype.getSubAccountFund = function() {\n  return this.subAccountFund;\n};\nElement.add(IncomeTransaction, {name: \"SUBACCTFUND\", order: 60, attributeType: String, readMethod: \"getSubAccountFund\", writeMethod: \"setSubAccountFund\"});\n\n\n/**\n * Sets the sub account type that the security is from (e.g. CASH, MARGIN, SHORT, OTHER).\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} subAcctFund the sub account fund for the transaction\n */\nIncomeTransaction.prototype.setSubAccountFund = function(subAcctFund) {\n  this.subAccountFund = subAcctFund;\n};\n\n\n/**\n * Gets the result of getSubAccountFund as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types\n */\nIncomeTransaction.prototype.getSubAccountFundEnum = function() {\n  return SubAccountType.fromOfx(this.getSubAccountFund());\n};\n\n\n/**\n * Gets whether the income was tax exempt. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Boolean} whether the transaction was tax exempt\n */\nIncomeTransaction.prototype.getTaxExempt = function() {\n  return this.taxExempt;\n};\nElement.add(IncomeTransaction, {name: \"TAXEXEMPT\", order: 70, attributeType: Boolean, readMethod: \"getTaxExempt\", writeMethod: \"setTaxExempt\"});\n\n\n/**\n * Sets whether the income was tax exempt. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Boolean} taxExempt whether the transaction was tax exempt\n */\nIncomeTransaction.prototype.setTaxExempt = function(taxExempt) {\n  this.taxExempt = taxExempt;\n};\n\n\n/**\n * Gets the withholding for the income. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the withholding\n */\nIncomeTransaction.prototype.getWithholding = function() {\n  return this.withholding;\n};\nElement.add(IncomeTransaction, {name: \"WITHHOLDING\", order: 80, attributeType: Number, readMethod: \"getWithholding\", writeMethod: \"setWithholding\"});\n\n\n/**\n * Sets the withholding for the income. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} withholding the withholding\n */\nIncomeTransaction.prototype.setWithholding = function(withholding) {\n  this.withholding = withholding;\n};\n\n\n/**\n * Gets the currency code for the transaction. Only one of currency code or original currency\n * info should be set according to the OFX spec. If neither are set, means the default currency.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the currency code for the transaction\n */\nIncomeTransaction.prototype.getCurrencyCode = function() {\n  return this.currencyCode;\n};\nElement.add(IncomeTransaction, {name: \"CURRENCY\", order: 90, attributeType: String, readMethod: \"getCurrencyCode\", writeMethod: \"setCurrencyCode\"});\n\n\n/**\n * Sets the currency code for the transaction. Only one of currency code or original currency\n * info should be set according to the OFX spec. If neither are set, means the default currency.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} currencyCode the currency code for the transaction\n */\nIncomeTransaction.prototype.setCurrencyCode = function(currencyCode) {\n  this.currencyCode = currencyCode;\n  this.originalCurrencyInfo = null;\n};\n\n\n/**\n * Gets the original currency info for the transaction.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {OriginalCurrency} the currency info for the transaction\n */\nIncomeTransaction.prototype.getOriginalCurrencyInfo = function() {\n  return this.originalCurrencyInfo;\n};\nChildAggregate.add(IncomeTransaction, {order: 120, attributeType: OriginalCurrency, readMethod: \"getOriginalCurrencyInfo\", writeMethod: \"setOriginalCurrencyInfo\"});\n\n\n/**\n * Sets the original currency info for the transaction.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {OriginalCurrency} originalCurrencyInfo the currency info for the transaction\n */\nIncomeTransaction.prototype.setOriginalCurrencyInfo = function(originalCurrencyInfo) {\n  this.originalCurrencyInfo = originalCurrencyInfo;\n  this.currencyCode = null;\n};\n\n\n/**\n * Gets the 401K source for the sale. Should be one of \"PRETAX\", \"AFTERTAX\", \"MATCH\",\n * \"PROFITSHARING\", \"ROLLOVER\", \"OTHERVEST\", \"OTHERNONVEST\".  This is an optional field\n * according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the state withholding\n */\nIncomeTransaction.prototype.get401kSource = function() {\n  return this.inv401kSource;\n};\nElement.add(IncomeTransaction, {name: \"INV401KSOURCE\", order: 110, attributeType: String, readMethod: \"get401kSource\", writeMethod: \"set401kSource\"});\n\n\n/**\n * Sets the 401K source for the sale. Should be one of \"PRETAX\", \"AFTERTAX\", \"MATCH\",\n * \"PROFITSHARING\", \"ROLLOVER\", \"OTHERVEST\", \"OTHERNONVEST\".  This is an optional field\n * according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} inv401kSource the state withholding\n */\nIncomeTransaction.prototype.set401kSource = function(inv401kSource) {\n  this.inv401kSource = inv401kSource;\n};\n\n\n/**\n * Gets the 401(k) source as one of the well-known types.\n *\n * @return {Inv401KSource} the type of close or null if it's not well known.\n */\nIncomeTransaction.prototype.get401kSourceEnum = function() {\n  return Inv401KSource.fromOfx(this.get401kSource());\n};\n\n\n\n\nmodule.exports = IncomeTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Type of income.\n * See \"Section 13.9.2.4.2, OFX Spec\"\n *\n * @enum\n */\nvar IncomeType = {\n  LONG_TERM_CAP_GAINS: \"CGLONG\",\n  SHORT_TERM_CAP_GAINS: \"CGSHORT\",\n  DIVIDEND: \"DIV\",\n  INTEREST: \"INTEREST\",\n  MISC: \"MISC\",\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"CGLONG\" === ofxVal) {\n      return IncomeType.LONG_TERM_CAP_GAINS;\n    } else if (\"CGSHORT\" === ofxVal) {\n      return IncomeType.SHORT_TERM_CAP_GAINS;\n    } else if (\"DIV\" === ofxVal) {\n      return IncomeType.DIVIDEND;\n    } else if (\"INTEREST\" === ofxVal) {\n      return IncomeType.INTEREST;\n    } else if (\"MISC\" === ofxVal) {\n      return IncomeType.MISC;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = IncomeType;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar SubAccountType = require(\"../accounts/SubAccountType\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar Transaction = require(\"../../common/Transaction\");\n\n/**\n * Bank transactions that are part of an investment account statement. Wraps a {@link Transaction}.\n * See \"Section 13.9.2.3, OFX Spec\"\n *\n * @class\n */\nfunction InvestmentBankTransaction () {\n\n  /**\n   * @name InvestmentBankTransaction#transaction\n   * @type Transaction\n   * @access private\n   */\n  this.transaction = null;\n\n  /**\n   * @name InvestmentBankTransaction#subAccountFund\n   * @type String\n   * @access private\n   */\n  this.subAccountFund = null;\n}\n\n\n\nAggregate.add(\"INVBANKTRAN\", InvestmentBankTransaction);\n\n\n/**\n * Gets the wrapped transaction aggregate.\n * @return {Transaction} the wrapped transaction\n */\nInvestmentBankTransaction.prototype.getTransaction = function() {\n  return this.transaction;\n};\nChildAggregate.add(InvestmentBankTransaction, {order: 10, attributeType: Transaction, readMethod: \"getTransaction\", writeMethod: \"setTransaction\"});\n\n\n/**\n * Sets the wrapped transaction aggregate.\n * @param {Transaction} transaction the wrapped transaction\n */\nInvestmentBankTransaction.prototype.setTransaction = function(transaction) {\n  this.transaction = transaction;\n};\n\n\n/**\n * Gets the sub account type that the security is from (e.g. CASH, MARGIN, SHORT, OTHER).\n * See \"Section 13.9.2.4.2, OFX Spec\"\n *\n * @return {String} the sub account fund for the transaction\n */\nInvestmentBankTransaction.prototype.getSubAccountFund = function() {\n  return this.subAccountFund;\n};\nElement.add(InvestmentBankTransaction, {name: \"SUBACCTFUND\", required: true, order: 20, attributeType: String, readMethod: \"getSubAccountFund\", writeMethod: \"setSubAccountFund\"});\n\n\n/**\n * Sets the sub account type that the security is from (e.g. CASH, MARGIN, SHORT, OTHER).\n * See \"Section 13.9.2.4.2, OFX Spec\"\n *\n * @param {String} subAccountFund the sub account fund for the transaction\n */\nInvestmentBankTransaction.prototype.setSubAccountFund = function(subAccountFund) {\n  this.subAccountFund = subAccountFund;\n};\n\n\n/**\n * Gets the result of getSubAccountFund as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types\n */\nInvestmentBankTransaction.prototype.getSubAccountFundEnum = function() {\n  return SubAccountType.fromOfx(this.getSubAccountFund());\n};\n\n\n\n\nmodule.exports = InvestmentBankTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar SubAccountType = require(\"../accounts/SubAccountType\");\nvar Inv401KSource = require(\"../positions/Inv401KSource\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar BaseOtherInvestmentTransaction = require(\"./BaseOtherInvestmentTransaction\");\nvar TransactionType = require(\"./TransactionType\");\nvar SecurityId = require(\"../../seclist/SecurityId\");\nvar OriginalCurrency = require(\"./OriginalCurrency\");\n\n/**\n * Transaction for an investment expense\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @class\n * @augments BaseOtherInvestmentTransaction\n */\nfunction InvestmentExpenseTransaction () {\n  BaseOtherInvestmentTransaction.call(this, TransactionType.INVESTMENT_EXPENSE);\n\n  /**\n   * @name InvestmentExpenseTransaction#securityId\n   * @type SecurityId\n   * @access private\n   */\n  this.securityId = null;\n\n  /**\n   * @name InvestmentExpenseTransaction#total\n   * @type Double\n   * @access private\n   */\n  this.total = null;\n\n  /**\n   * @name InvestmentExpenseTransaction#subAccountSecurity\n   * @type String\n   * @access private\n   */\n  this.subAccountSecurity = null;\n\n  /**\n   * @name InvestmentExpenseTransaction#subAccountFund\n   * @type String\n   * @access private\n   */\n  this.subAccountFund = null;\n\n  /**\n   * @name InvestmentExpenseTransaction#currencyCode\n   * @type String\n   * @access private\n   */\n  this.currencyCode = null;\n\n  /**\n   * @name InvestmentExpenseTransaction#originalCurrencyInfo\n   * @type OriginalCurrency\n   * @access private\n   */\n  this.originalCurrencyInfo = null;\n\n  /**\n   * @name InvestmentExpenseTransaction#inv401kSource\n   * @type String\n   * @access private\n   */\n  this.inv401kSource = null;\n}\n\ninherit(InvestmentExpenseTransaction, \"extends\", BaseOtherInvestmentTransaction);\n\n\nAggregate.add(\"INVEXPENSE\", InvestmentExpenseTransaction);\n\n\n\n/**\n * Gets the id of the security for the expense. This is a required field according to the OFX\n * spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {SecurityId} the security id of the security for the expsense\n */\nInvestmentExpenseTransaction.prototype.getSecurityId = function() {\n  return this.securityId;\n};\nChildAggregate.add(InvestmentExpenseTransaction, {required: true, order: 20, attributeType: SecurityId, readMethod: \"getSecurityId\", writeMethod: \"setSecurityId\"});\n\n\n/**\n * Sets the id of the security for the expense. This is a required field according to the OFX\n * spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {SecurityId} securityId the security id of the security for the expsense\n */\nInvestmentExpenseTransaction.prototype.setSecurityId = function(securityId) {\n  this.securityId = securityId;\n};\n\n\n/**\n * Gets the total for the expense.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the total\n */\nInvestmentExpenseTransaction.prototype.getTotal = function() {\n  return this.total;\n};\nElement.add(InvestmentExpenseTransaction, {name: \"TOTAL\", required: true, order: 30, attributeType: Number, readMethod: \"getTotal\", writeMethod: \"setTotal\"});\n\n\n/**\n * Sets the total for the expense.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} total the total\n */\nInvestmentExpenseTransaction.prototype.setTotal = function(total) {\n  this.total = total;\n};\n\n\n/**\n * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the sub account type\n */\nInvestmentExpenseTransaction.prototype.getSubAccountSecurity = function() {\n  return this.subAccountSecurity;\n};\nElement.add(InvestmentExpenseTransaction, {name: \"SUBACCTSEC\", order: 40, attributeType: String, readMethod: \"getSubAccountSecurity\", writeMethod: \"setSubAccountSecurity\"});\n\n\n/**\n * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} subAccountSecurity the sub account type\n */\nInvestmentExpenseTransaction.prototype.setSubAccountSecurity = function(subAccountSecurity) {\n  this.subAccountSecurity = subAccountSecurity;\n};\n\n\n/**\n * Gets the result of getSubAccountSecurity as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types.\n */\nInvestmentExpenseTransaction.prototype.getSubAccountSecurityEnum = function() {\n  return SubAccountType.fromOfx(this.getSubAccountSecurity());\n};\n\n\n/**\n * Gets the sub account type for the fund. (e.g. CASH, MARGIN, SHORT, OTHER).\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the sub account fund\n */\nInvestmentExpenseTransaction.prototype.getSubAccountFund = function() {\n  return this.subAccountFund;\n};\nElement.add(InvestmentExpenseTransaction, {name: \"SUBACCTFUND\", order: 50, attributeType: String, readMethod: \"getSubAccountFund\", writeMethod: \"setSubAccountFund\"});\n\n\n/**\n * Sets the sub account type for the fund. (e.g. CASH, MARGIN, SHORT, OTHER).\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} subAccountFund the sub account fund\n */\nInvestmentExpenseTransaction.prototype.setSubAccountFund = function(subAccountFund) {\n  this.subAccountFund = subAccountFund;\n};\n\n\n/**\n * Gets the result of getSubAccountFund as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types\n */\nInvestmentExpenseTransaction.prototype.getSubAccountFundEnum = function() {\n  return SubAccountType.fromOfx(this.getSubAccountFund());\n};\n\n\n/**\n * Gets the currency code for the transaction. Only one of currency code or original currency\n * code should be set according to the OFX spec. If neither are set, means the default currency.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the currency code for the transaction\n */\nInvestmentExpenseTransaction.prototype.getCurrencyCode = function() {\n  return this.currencyCode;\n};\nElement.add(InvestmentExpenseTransaction, {name: \"CURRENCY\", order: 60, attributeType: String, readMethod: \"getCurrencyCode\", writeMethod: \"setCurrencyCode\"});\n\n\n/**\n * sets the currency code for the transaction. Only one of currency code or original currency\n * code should be set according to the OFX spec. If neither are set, means the default currency.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} currencyCode the currency code for the transaction\n */\nInvestmentExpenseTransaction.prototype.setCurrencyCode = function(currencyCode) {\n  this.currencyCode = currencyCode;\n  this.originalCurrencyInfo = null;\n};\n\n\n/**\n * Gets the original currency info for the transaction.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {OriginalCurrency} the original currency info for the transaction\n */\nInvestmentExpenseTransaction.prototype.getOriginalCurrencyInfo = function() {\n  return this.originalCurrencyInfo;\n};\nElement.add(InvestmentExpenseTransaction, {name: \"ORIGCURRENCY\", order: 70, attributeType: OriginalCurrency, readMethod: \"getOriginalCurrencyInfo\", writeMethod: \"setOriginalCurrencyInfo\"});\n\n\n/**\n * Sets the original currency info for the transaction.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {OriginalCurrency} originalCurrencyInfo the original currency info for the transaction\n */\nInvestmentExpenseTransaction.prototype.setOriginalCurrencyInfo = function(originalCurrencyInfo) {\n  this.originalCurrencyInfo = originalCurrencyInfo;\n  this.currencyCode = null;\n};\n\n\n/**\n * Gets the 401K source for the transaction. Should be one of \"PRETAX\", \"AFTERTAX\", \"MATCH\",\n * \"PROFITSHARING\", \"ROLLOVER\", \"OTHERVEST\", \"OTHERNONVEST\".  This is an optional field\n * according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the 401k source\n */\nInvestmentExpenseTransaction.prototype.get401kSource = function() {\n  return this.inv401kSource;\n};\nElement.add(InvestmentExpenseTransaction, {name: \"INV401KSOURCE\", order: 180, attributeType: String, readMethod: \"get401kSource\", writeMethod: \"set401kSource\"});\n\n\n/**\n * Sets the 401K source for the transaction. Should be one of \"PRETAX\", \"AFTERTAX\", \"MATCH\",\n * \"PROFITSHARING\", \"ROLLOVER\", \"OTHERVEST\", \"OTHERNONVEST\".  This is an optional field\n * according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} inv401kSource the 401k source\n */\nInvestmentExpenseTransaction.prototype.set401kSource = function(inv401kSource) {\n  this.inv401kSource = inv401kSource;\n};\n\n\n/**\n * Gets the 401k source as one of the well-known types.\n *\n * @return {Inv401KSource} the 401k source or null if its not one of the well-known types\n */\nInvestmentExpenseTransaction.prototype.get401kSourceEnum = function() {\n  return Inv401KSource.fromOfx(this.get401kSource());\n};\n\n\n\n\nmodule.exports = InvestmentExpenseTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\n\n/**\n * Investment transaction aggregate (\"INVTRAN\").\n * See \"Section 13.9.2.4.1, OFX Spec\"\n *\n * @class\n */\nfunction InvestmentTransaction () {\n\n  /**\n   * @name InvestmentTransaction#transactionId\n   * @type String\n   * @access private\n   */\n  this.transactionId = null;\n\n  /**\n   * @name InvestmentTransaction#serverId\n   * @type String\n   * @access private\n   */\n  this.serverId = null;\n\n  /**\n   * @name InvestmentTransaction#tradeDate\n   * @type Date\n   * @access private\n   */\n  this.tradeDate = null;\n\n  /**\n   * @name InvestmentTransaction#settlementDate\n   * @type Date\n   * @access private\n   */\n  this.settlementDate = null;\n\n  /**\n   * @name InvestmentTransaction#reversalTransactionId\n   * @type String\n   * @access private\n   */\n  this.reversalTransactionId = null;\n\n  /**\n   * @name InvestmentTransaction#memo\n   * @type String\n   * @access private\n   */\n  this.memo = null;\n}\n\n\n\nAggregate.add(\"INVTRAN\", InvestmentTransaction);\n\n\n/**\n * Gets the unique financial institution assigned transaction id. This is a\n * required field according to the OFX spec.\n * See \"Section 13.9.2.4.1, OFX Spec\"\n *\n * @return {String} the financial institution asssigned transaction id\n */\nInvestmentTransaction.prototype.getTransactionId = function() {\n  return this.transactionId;\n};\nElement.add(InvestmentTransaction, {name: \"FITID\", required: true, order: 0, attributeType: String, readMethod: \"getTransactionId\", writeMethod: \"setTransactionId\"});\n\n\n/**\n * Sets the unique financial institution assigned transaction id. This is a\n * required field according to the OFX spec.\n * See \"Section 13.9.2.4.1, OFX Spec\"\n *\n * @param {String} transactionId the financial institution asssigned transaction id\n */\nInvestmentTransaction.prototype.setTransactionId = function(transactionId) {\n  this.transactionId = transactionId;\n};\n\n\n/**\n * Gets the server assigned transaction id. This is an optional field\n * according to the OFX spec.\n * See \"Section 13.9.2.4.1, OFX Spec\"\n *\n * @return {String} the server assigned transaction id\n */\nInvestmentTransaction.prototype.getServerId = function() {\n  return this.serverId;\n};\nElement.add(InvestmentTransaction, {name: \"SRVRTID\", order: 10, attributeType: String, readMethod: \"getServerId\", writeMethod: \"setServerId\"});\n\n\n/**\n * Sets the server assigned transaction id. This is an optional field\n * according to the OFX spec.\n * See \"Section 13.9.2.4.1, OFX Spec\"\n *\n * @param {String} serverId the server assigned transaction id\n */\nInvestmentTransaction.prototype.setServerId = function(serverId) {\n  this.serverId = serverId;\n};\n\n\n/**\n * Gets the trade date of the transaction. For stock splits, this is the\n * day of record. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.4.1, OFX Spec\"\n *\n * @return {Date} the trade date\n */\nInvestmentTransaction.prototype.getTradeDate = function() {\n  return this.tradeDate;\n};\nElement.add(InvestmentTransaction, {name: \"DTTRADE\", required: true, order: 20, attributeType: Date, readMethod: \"getTradeDate\", writeMethod: \"setTradeDate\"});\n\n\n/**\n * Sets the trade date of the transaction. For stock splits, this is the\n * day of record. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.4.1, OFX Spec\"\n *\n * @param {Date} tradeDate the trade date\n */\nInvestmentTransaction.prototype.setTradeDate = function(tradeDate) {\n  this.tradeDate = tradeDate;\n};\n\n\n/**\n * Gets the settlement date of the transaction. For stock splits, this is the\n * day of of execution. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.1, OFX Spec\"\n *\n * @return {Date} the trade date\n */\nInvestmentTransaction.prototype.getSettlementDate = function() {\n  return this.settlementDate;\n};\nElement.add(InvestmentTransaction, {name: \"DTSETTLE\", order: 30, attributeType: Date, readMethod: \"getSettlementDate\", writeMethod: \"setSettlementDate\"});\n\n\n/**\n * Sets the settlement date of the transaction. For stock splits, this is the\n * day of of execution. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.1, OFX Spec\"\n *\n * @param {Date} settlementDate the trade date\n */\nInvestmentTransaction.prototype.setSettlementDate = function(settlementDate) {\n  this.settlementDate = settlementDate;\n};\n\n\n/**\n * For a reveral transaction, gets the financial institution assigned\n * transaction id for the transaction being revesed.\n * See \"Section 13.9.2.4.1, OFX Spec\"\n *\n * @return {String} the transaction id of the transaction being reversed\n */\nInvestmentTransaction.prototype.getReversalTransactionId = function() {\n  return this.reversalTransactionId;\n};\nElement.add(InvestmentTransaction, {name: \"REVERSALFITID\", order: 40, attributeType: String, readMethod: \"getReversalTransactionId\", writeMethod: \"setReversalTransactionId\"});\n\n\n/**\n * For a reveral transaction, gets the financial institution assigned\n * transaction id for the transaction being revesed.\n * See \"Section 13.9.2.4.1, OFX Spec\"\n *\n * @param {String} reversalTransactionId the transaction id of the transaction being reversed\n */\nInvestmentTransaction.prototype.setReversalTransactionId = function(reversalTransactionId) {\n  this.reversalTransactionId = reversalTransactionId;\n};\n\n\n/**\n * Gets the memo associated with the transaction. This is an optional field\n * according to the OFX spec.\n * See \"Section 13.9.2.4.1, OFX Spec\"\n *\n * @return {String} the memo\n */\nInvestmentTransaction.prototype.getMemo = function() {\n  return this.memo;\n};\nElement.add(InvestmentTransaction, {name: \"MEMO\", order: 50, attributeType: String, readMethod: \"getMemo\", writeMethod: \"setMemo\"});\n\n\n/**\n * Sets the memo associated with the transaction. This is an optional field\n * according to the OFX spec.\n * See \"Section 13.9.2.4.1, OFX Spec\"\n *\n * @param {String} memo the memo\n */\nInvestmentTransaction.prototype.setMemo = function(memo) {\n  this.memo = memo;\n};\n\n\n\n\nmodule.exports = InvestmentTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar BaseInvestmentTransaction = require(\"./BaseInvestmentTransaction\");\nvar InvestmentBankTransaction = require(\"./InvestmentBankTransaction\");\n\n/**\n * The transaction list aggregate.\n * See \"Section 13.9.1.2, OFX Spec\"\n *\n * @class\n */\nfunction InvestmentTransactionList () {\n\n  /**\n   * @name InvestmentTransactionList#start\n   * @type Date\n   * @access private\n   */\n  this.start = null;\n\n  /**\n   * @name InvestmentTransactionList#end\n   * @type Date\n   * @access private\n   */\n  this.end = null;\n\n  /**\n   * @name InvestmentTransactionList#transactions\n   * @type BaseInvestmentTransaction[]\n   * @access private\n   */\n  this.transactions = null;\n\n  /**\n   * @name InvestmentTransactionList#bankTransactions\n   * @type InvestmentBankTransaction[]\n   * @access private\n   */\n  this.bankTransactions = null;\n}\n\n\n\nAggregate.add(\"INVTRANLIST\", InvestmentTransactionList);\n\n\n/**\n * Gets the start date. This is a required field according to the OFX spec.\n *\n * @return {Date} The start date\n */\nInvestmentTransactionList.prototype.getStart = function() {\n  return this.start;\n};\nElement.add(InvestmentTransactionList, {name: \"DTSTART\", required: true, order: 0, attributeType: Date, readMethod: \"getStart\", writeMethod: \"setStart\"});\n\n\n/**\n * Sets the start date. This is a required field according to the OFX spec.\n *\n * @param {Date} start The start date\n */\nInvestmentTransactionList.prototype.setStart = function(start) {\n  this.start = start;\n};\n\n\n/**\n * Gets the end date. This is a required field according to the OFX spec.\n *\n * @return {Date} he end date\n */\nInvestmentTransactionList.prototype.getEnd = function() {\n  return this.end;\n};\nElement.add(InvestmentTransactionList, {name: \"DTEND\", required: true, order: 10, attributeType: Date, readMethod: \"getEnd\", writeMethod: \"setEnd\"});\n\n\n/**\n * Sets the end date. This is a required field according to the OFX spec.\n *\n * @param {Date} end the end date\n */\nInvestmentTransactionList.prototype.setEnd = function(end) {\n  this.end = end;\n};\n\n\n/**\n * Gets the investment transaction list. This is a heterogenous list of different types of\n * transactions returned in the order the brokerage provides them.\n *\n * @return {BaseInvestmentTransaction[]} the investment transaction list\n */\nInvestmentTransactionList.prototype.getInvestmentTransactions = function() {\n  return this.transactions;\n};\nChildAggregate.add(InvestmentTransactionList, {order: 20, attributeType: Array, collectionEntryType: BaseInvestmentTransaction, readMethod: \"getInvestmentTransactions\", writeMethod: \"setInvestmentTransactions\"});\n\n\n/**\n * Sets the investment transaction list. This is a heterogenous list of different types of\n * transactions returned in the order the brokerage provides them.\n *\n * @param {BaseInvestmentTransaction[]} transactions the investment transaction list\n */\nInvestmentTransactionList.prototype.setInvestmentTransactions = function(transactions) {\n  this.transactions = transactions;\n};\n\n\n/**\n * Gets the bank transaction list.\n *\n * @return {InvestmentBankTransaction[]} the bank transaction list\n */\nInvestmentTransactionList.prototype.getBankTransactions = function() {\n  return this.bankTransactions;\n};\nChildAggregate.add(InvestmentTransactionList, {order: 30, attributeType: Array, collectionEntryType: InvestmentBankTransaction, readMethod: \"getBankTransactions\", writeMethod: \"setBankTransactions\"});\n\n\n/**\n * Sets the bank transaction list.\n *\n * @param {InvestmentBankTransaction[]} bankTransactions the bank transaction list\n */\nInvestmentTransactionList.prototype.setBankTransactions = function(bankTransactions) {\n  this.bankTransactions = bankTransactions;\n};\n\n\n\n\nmodule.exports = InvestmentTransactionList;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar SubAccountType = require(\"../../../../domain/data/investment/accounts/SubAccountType\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar BaseOtherInvestmentTransaction = require(\"./BaseOtherInvestmentTransaction\");\nvar TransactionType = require(\"./TransactionType\");\n\n/**\n * Transaction for journal fund transactions between sub-accounts within the same investment\n * account.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @class\n * @augments BaseOtherInvestmentTransaction\n */\nfunction JournalFundTransaction () {\n  BaseOtherInvestmentTransaction.call(this, TransactionType.JOURNAL_FUND);\n\n  /**\n   * @name JournalFundTransaction#subAccountFrom\n   * @type String\n   * @access private\n   */\n  this.subAccountFrom = null;\n\n  /**\n   * @name JournalFundTransaction#subAccountTo\n   * @type String\n   * @access private\n   */\n  this.subAccountTo = null;\n\n  /**\n   * @name JournalFundTransaction#total\n   * @type Double\n   * @access private\n   */\n  this.total = null;\n}\n\ninherit(JournalFundTransaction, \"extends\", BaseOtherInvestmentTransaction);\n\n\nAggregate.add(\"JRNLFUND\", JournalFundTransaction);\n\n\n\n/**\n * Gets the sub account type the transer is from (e.g. CASH, MARGIN, SHORT, OTHER).\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {String} the sub account type\n */\nJournalFundTransaction.prototype.getFromSubAccountFund = function() {\n  return this.subAccountFrom;\n};\nElement.add(JournalFundTransaction, {name: \"SUBACCTFROM\", order: 20, attributeType: String, readMethod: \"getFromSubAccountFund\", writeMethod: \"setFromSubAccountFund\"});\n\n\n/**\n * Sets the sub account type the transer is from (e.g. CASH, MARGIN, SHORT, OTHER).\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {String} subAccountFrom the sub account type\n */\nJournalFundTransaction.prototype.setFromSubAccountFund = function(subAccountFrom) {\n  this.subAccountFrom = subAccountFrom;\n};\n\n\n/**\n * Gets the result of getFromSubAccountFund as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types.\n */\nJournalFundTransaction.prototype.getFromSubAccountFundEnum = function() {\n  return SubAccountType.fromOfx(this.getFromSubAccountFund());\n};\n\n\n/**\n * Gets the sub account type that the transfer is to (e.g. CASH, MARGIN, SHORT, OTHER).\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {String} the sub account fund\n */\nJournalFundTransaction.prototype.getToSubAccountFund = function() {\n  return this.subAccountTo;\n};\nElement.add(JournalFundTransaction, {name: \"SUBACCTTO\", order: 30, attributeType: String, readMethod: \"getToSubAccountFund\", writeMethod: \"setToSubAccountFund\"});\n\n\n/**\n * Sets the sub account type that the transfer is to (e.g. CASH, MARGIN, SHORT, OTHER).\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {String} subAccountTo the sub account fund\n */\nJournalFundTransaction.prototype.setToSubAccountFund = function(subAccountTo) {\n  this.subAccountTo = subAccountTo;\n};\n\n\n/**\n * Gets the result of getToSubAccountFund as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types.\n */\nJournalFundTransaction.prototype.getToSubAccountFundEnum = function() {\n  return SubAccountType.fromOfx(this.getToSubAccountFund());\n};\n\n\n/**\n * Gets the total for the transaction.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {Double} the total\n */\nJournalFundTransaction.prototype.getTotal = function() {\n  return this.total;\n};\nElement.add(JournalFundTransaction, {name: \"TOTAL\", order: 40, attributeType: Number, readMethod: \"getTotal\", writeMethod: \"setTotal\"});\n\n\n/**\n * Sets the total for the transaction.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {Double} total the total\n */\nJournalFundTransaction.prototype.setTotal = function(total) {\n  this.total = total;\n};\n\n\n\n\nmodule.exports = JournalFundTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar SubAccountType = require(\"../accounts/SubAccountType\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar BaseOtherInvestmentTransaction = require(\"./BaseOtherInvestmentTransaction\");\nvar TransactionWithSecurity = require(\"./TransactionWithSecurity\");\nvar TransactionType = require(\"./TransactionType\");\nvar SecurityId = require(\"../../seclist/SecurityId\");\n\n/**\n * Transaction for journal security transactions between sub-accounts within the same investment\n * account.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @class\n * @augments BaseOtherInvestmentTransaction\n * @augments TransactionWithSecurity\n */\nfunction JournalSecurityTransaction () {\n  BaseOtherInvestmentTransaction.call(this, TransactionType.JOURNAL_SECURITY);\n\n  /**\n   * @name JournalSecurityTransaction#securityId\n   * @type SecurityId\n   * @access private\n   */\n  this.securityId = null;\n\n  /**\n   * @name JournalSecurityTransaction#subAccountFrom\n   * @type String\n   * @access private\n   */\n  this.subAccountFrom = null;\n\n  /**\n   * @name JournalSecurityTransaction#subAccountTo\n   * @type String\n   * @access private\n   */\n  this.subAccountTo = null;\n\n  /**\n   * @name JournalSecurityTransaction#total\n   * @type Double\n   * @access private\n   */\n  this.total = null;\n}\n\ninherit(JournalSecurityTransaction, \"extends\", BaseOtherInvestmentTransaction);\ninherit(JournalSecurityTransaction, \"implements\", TransactionWithSecurity);\n\n\nAggregate.add(\"JRNLSEC\", JournalSecurityTransaction);\n\n\n\n/**\n * Gets the id of the security that was transferred. This is a required field according to the OFX\n * spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {SecurityId} the security id of the security that was bought\n */\nJournalSecurityTransaction.prototype.getSecurityId = function() {\n  return this.securityId;\n};\nChildAggregate.add(JournalSecurityTransaction, {required: true, order: 20, attributeType: SecurityId, readMethod: \"getSecurityId\", writeMethod: \"setSecurityId\"});\n\n\n/**\n * Sets the id of the security that was transferred. This is a required field according to the OFX\n * spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {SecurityId} securityId the security id of the security that was bought\n */\nJournalSecurityTransaction.prototype.setSecurityId = function(securityId) {\n  this.securityId = securityId;\n};\n\n\n/**\n * Gets the sub account type the transer is from (e.g. CASH, MARGIN, SHORT, OTHER).\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {String} the sub account type\n */\nJournalSecurityTransaction.prototype.getFromSubAccountFund = function() {\n  return this.subAccountFrom;\n};\nElement.add(JournalSecurityTransaction, {name: \"SUBACCTFROM\", order: 30, attributeType: String, readMethod: \"getFromSubAccountFund\", writeMethod: \"setFromSubAccountFund\"});\n\n\n/**\n * Sets the sub account type the transer is from (e.g. CASH, MARGIN, SHORT, OTHER).\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {String} subAccountFrom the sub account type\n */\nJournalSecurityTransaction.prototype.setFromSubAccountFund = function(subAccountFrom) {\n  this.subAccountFrom = subAccountFrom;\n};\n\n\n/**\n * Gets the result of getFromSubAccountFund as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types.\n */\nJournalSecurityTransaction.prototype.getFromSubAccountFundEnum = function() {\n  return SubAccountType.fromOfx(this.getFromSubAccountFund());\n};\n\n\n/**\n * Gets the sub account type that the transfer is to (e.g. CASH, MARGIN, SHORT, OTHER).\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {String} the sub account fund\n */\nJournalSecurityTransaction.prototype.getToSubAccountFund = function() {\n  return this.subAccountTo;\n};\nElement.add(JournalSecurityTransaction, {name: \"SUBACCTTO\", order: 40, attributeType: String, readMethod: \"getToSubAccountFund\", writeMethod: \"setToSubAccountFund\"});\n\n\n/**\n * sets the sub account type that the transfer is to (e.g. CASH, MARGIN, SHORT, OTHER).\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {String} subAccountTo the sub account fund\n */\nJournalSecurityTransaction.prototype.setToSubAccountFund = function(subAccountTo) {\n  this.subAccountTo = subAccountTo;\n};\n\n\n/**\n * Gets the result of getToSubAccountFund as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types.\n */\nJournalSecurityTransaction.prototype.getToSubAccountFundEnum = function() {\n  return SubAccountType.fromOfx(this.getToSubAccountFund());\n};\n\n\n/**\n * Gets the total for the transaction.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {Double} the total\n */\nJournalSecurityTransaction.prototype.getTotal = function() {\n  return this.total;\n};\nElement.add(JournalSecurityTransaction, {name: \"TOTAL\", order: 50, attributeType: Number, readMethod: \"getTotal\", writeMethod: \"setTotal\"});\n\n\n/**\n * Sets the total for the transaction.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {Double} total the total\n */\nJournalSecurityTransaction.prototype.setTotal = function(total) {\n  this.total = total;\n};\n\n\n\n\nmodule.exports = JournalSecurityTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar SubAccountType = require(\"../accounts/SubAccountType\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar BaseOtherInvestmentTransaction = require(\"./BaseOtherInvestmentTransaction\");\nvar TransactionType = require(\"./TransactionType\");\nvar OriginalCurrency = require(\"./OriginalCurrency\");\n\n/**\n * Transaction for journal security transactions between sub-accounts within the same investment\n * account.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @class\n * @augments BaseOtherInvestmentTransaction\n */\nfunction MarginInterestTransaction () {\n  BaseOtherInvestmentTransaction.call(this, TransactionType.MARGIN_INTEREST);\n\n  /**\n   * @name MarginInterestTransaction#total\n   * @type Double\n   * @access private\n   */\n  this.total = null;\n\n  /**\n   * @name MarginInterestTransaction#subAccountFund\n   * @type String\n   * @access private\n   */\n  this.subAccountFund = null;\n\n  /**\n   * @name MarginInterestTransaction#currencyCode\n   * @type String\n   * @access private\n   */\n  this.currencyCode = null;\n\n  /**\n   * @name MarginInterestTransaction#originalCurrencyInfo\n   * @type OriginalCurrency\n   * @access private\n   */\n  this.originalCurrencyInfo = null;\n}\n\ninherit(MarginInterestTransaction, \"extends\", BaseOtherInvestmentTransaction);\n\n\nAggregate.add(\"MARGININTEREST\", MarginInterestTransaction);\n\n\n/**\n * Gets the sub account type the margin interest affects (e.g. CASH, MARGIN, SHORT, OTHER).\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {String} the sub account type\n */\nMarginInterestTransaction.prototype.getSubAccountFund = function() {\n  return this.subAccountFund;\n};\nElement.add(MarginInterestTransaction, {name: \"SUBACCTFUND\", order: 30, attributeType: String, readMethod: \"getSubAccountFund\", writeMethod: \"setSubAccountFund\"});\n\n\n/**\n * Sets the sub account type the margin interest affects (e.g. CASH, MARGIN, SHORT, OTHER).\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {String} subAccountFund the sub account type\n */\nMarginInterestTransaction.prototype.setSubAccountFund = function(subAccountFund) {\n  this.subAccountFund = subAccountFund;\n};\n\n\n/**\n * Gets the result of getSubAccountFund as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types.\n */\nMarginInterestTransaction.prototype.getSubAccountFundEnum = function() {\n  var type = this.getSubAccountFund();\n  return type ? SubAccountType.valueOf(type) : null;\n};\n\n\n/**\n * Gets the total for the transaction.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {Double} the total\n */\nMarginInterestTransaction.prototype.getTotal = function() {\n  return this.total;\n};\nElement.add(MarginInterestTransaction, {name: \"TOTAL\", order: 40, attributeType: Number, readMethod: \"getTotal\", writeMethod: \"setTotal\"});\n\n\n/**\n * Sets the total for the transaction.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {Double} total the total\n */\nMarginInterestTransaction.prototype.setTotal = function(total) {\n  this.total = total;\n};\n\n\n/**\n * Gets the currency code for the transaction. Only one of currency code or original currency\n * info should be set according to the OFX spec. If neither are set, means the default currency.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the currency code for the transaction.\n */\nMarginInterestTransaction.prototype.getCurrencyCode = function() {\n  return this.currencyCode;\n};\nElement.add(MarginInterestTransaction, {name: \"CURRENCY\", order: 110, attributeType: String, readMethod: \"getCurrencyCode\", writeMethod: \"setCurrencyCode\"});\n\n\n/**\n * Sets the currency code for the transaction. Only one of currency code or original currency\n * info should be set according to the OFX spec. If neither are set, means the default currency.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} currencyCode the currency code for the transaction.\n */\nMarginInterestTransaction.prototype.setCurrencyCode = function(currencyCode) {\n  this.currencyCode = currencyCode;\n  this.originalCurrencyInfo = null;\n};\n\n\n/**\n * Gets the original currency info for the transaction.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {OriginalCurrency} the original currency info for the transaction.\n */\nMarginInterestTransaction.prototype.getOriginalCurrencyInfo = function() {\n  return this.originalCurrencyInfo;\n};\nElement.add(MarginInterestTransaction, {name: \"ORIGCURRENCY\", order: 120, attributeType: OriginalCurrency, readMethod: \"getOriginalCurrencyInfo\", writeMethod: \"setOriginalCurrencyInfo\"});\n\n\n/**\n * Sets the original currency info for the transaction.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {OriginalCurrency} originalCurrency the original currency info for the transaction.\n */\nMarginInterestTransaction.prototype.SetOriginalCurrency = function(originalCurrency) {\n  this.originalCurrencyInfo = originalCurrency;\n  this.currencyCode = null;\n};\n\n\n\n\nmodule.exports = MarginInterestTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Type of purchase for options.\n * See \"Section 13.9.2.4.2, OFX Spec\"\n *\n * @enum\n */\nvar OptionBuyType = {\n  BUY_TO_OPEN: \"BUYTOOPEN\",\n  BUY_TO_CLOSE: \"BUYTOCLOSE\",\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"BUYTOOPEN\" === ofxVal) {\n      return OptionBuyType.BUY_TO_OPEN;\n    } else if (\"BUYTOCLOSE\" === ofxVal) {\n      return OptionBuyType.BUY_TO_CLOSE;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = OptionBuyType;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Type of sale for options.\n * See \"Section 13.9.2.4.2, OFX Spec\"\n *\n * @enum\n */\nvar OptionSellType = {\n  SELL_TO_CLOSE: \"SELLTOOPEN\",\n  SELL_TO_OPEN: \"SELLTOCLOSE\",\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"SELLTOOPEN\" === ofxVal) {\n      return OptionSellType.SELL_TO_OPEN;\n    } else if (\"SELLTOCLOSE\" === ofxVal) {\n      return OptionSellType.SELL_TO_CLOSE;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = OptionSellType;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\n\n/**\n * Original currency aggregate (\"ORIGCURRENCY\"). For investment transactions in other currencies,\n * the financial institution can report the transaction as converted into the default currency\n * and then include this child aggregate to report what the original currency was and what the\n * rate of conversion was.\n * See \"Section 5.2, OFX Spec\"\n *\n * @class\n */\nfunction OriginalCurrency () {\n\n  /**\n   * @name OriginalCurrency#currencyRate\n   * @type double\n   * @access private\n   */\n  this.currencyRate = null;\n\n  /**\n   * @name OriginalCurrency#currencyCode\n   * @type String\n   * @access private\n   */\n  this.currencyCode = null;\n}\n\n\n\nAggregate.add(\"ORIGCURRENCY\", OriginalCurrency);\n\n\n/**\n * Gets the rate of currency conversion. This is the ratio of \"CURDEF\" (the default currency in\n * the transaction response) to \"CURSYM\" (the original currency code below).\n *\n * @return {double} the currency rate\n */\nOriginalCurrency.prototype.getCurrencyRate = function() {\n  return this.currencyRate;\n};\nElement.add(OriginalCurrency, {name: \"CURRATE\", required: true, order: 10, attributeType: Number, readMethod: \"getCurrencyRate\", writeMethod: \"setCurrencyRate\"});\n\n\n/**\n * Sets the rate of currency conversion. This is the ratio of \"CURDEF\" (the default currency in\n * the transaction response) to \"CURSYM\" (the original currency code below).\n *\n * @param {double} currencyRate the currency rate\n */\nOriginalCurrency.prototype.setCurrencyRate = function(currencyRate) {\n  this.currencyRate = currencyRate;\n};\n\n\n/**\n * Gets the ISO-4217 3-letter currency identifier of the original currency.\n * @see java.util.Currency#getCurrencyCode()\n *\n * @return {String} the currency code\n */\nOriginalCurrency.prototype.getCurrencyCode = function() {\n  return this.currencyCode;\n};\nElement.add(OriginalCurrency, {name: \"CURSYM\", required: true, order: 20, attributeType: String, readMethod: \"getCurrencyCode\", writeMethod: \"setCurrencyCode\"});\n\n\n/**\n * Sets the ISO-4217 3-letter currency identifier of the original currency.\n * @see java.util.Currency#getCurrencyCode()\n *\n * @param {String} currencyCode the currency code\n */\nOriginalCurrency.prototype.setCurrencyCode = function(currencyCode) {\n  this.currencyCode = currencyCode;\n};\n\n\n\n\nmodule.exports = OriginalCurrency;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar SubAccountType = require(\"../accounts/SubAccountType\");\nvar Inv401KSource = require(\"../positions/Inv401KSource\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar BaseOtherInvestmentTransaction = require(\"./BaseOtherInvestmentTransaction\");\nvar TransactionType = require(\"./TransactionType\");\nvar TransactionWithSecurity = require(\"./TransactionWithSecurity\");\nvar IncomeType = require(\"./IncomeType\");\nvar OriginalCurrency = require(\"./OriginalCurrency\");\nvar SecurityId = require(\"../../seclist/SecurityId\");\n\n/**\n * Transaction for reinvestment transactions.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @class\n * @augments BaseOtherInvestmentTransaction\n * @augments TransactionWithSecurity\n */\nfunction ReinvestIncomeTransaction () {\n  BaseOtherInvestmentTransaction.call(this, TransactionType.REINVEST_INCOME);\n\n  /**\n   * @name ReinvestIncomeTransaction#securityId\n   * @type SecurityId\n   * @access private\n   */\n  this.securityId = null;\n\n  /**\n   * @name ReinvestIncomeTransaction#incomeType\n   * @type String\n   * @access private\n   */\n  this.incomeType = null;\n\n  /**\n   * @name ReinvestIncomeTransaction#total\n   * @type Double\n   * @access private\n   */\n  this.total = null;\n\n  /**\n   * @name ReinvestIncomeTransaction#subAccountSecurity\n   * @type String\n   * @access private\n   */\n  this.subAccountSecurity = null;\n\n  /**\n   * @name ReinvestIncomeTransaction#units\n   * @type Double\n   * @access private\n   */\n  this.units = null;\n\n  /**\n   * @name ReinvestIncomeTransaction#unitPrice\n   * @type Double\n   * @access private\n   */\n  this.unitPrice = null;\n\n  /**\n   * @name ReinvestIncomeTransaction#commission\n   * @type Double\n   * @access private\n   */\n  this.commission = null;\n\n  /**\n   * @name ReinvestIncomeTransaction#taxes\n   * @type Double\n   * @access private\n   */\n  this.taxes = null;\n\n  /**\n   * @name ReinvestIncomeTransaction#fees\n   * @type Double\n   * @access private\n   */\n  this.fees = null;\n\n  /**\n   * @name ReinvestIncomeTransaction#load\n   * @type Double\n   * @access private\n   */\n  this.load = null;\n\n  /**\n   * @name ReinvestIncomeTransaction#taxExempt\n   * @type Boolean\n   * @access private\n   */\n  this.taxExempt = null;\n\n  /**\n   * @name ReinvestIncomeTransaction#currencyCode\n   * @type String\n   * @access private\n   */\n  this.currencyCode = null;\n\n  /**\n   * @name ReinvestIncomeTransaction#originalCurrencyInfo\n   * @type OriginalCurrency\n   * @access private\n   */\n  this.originalCurrencyInfo = null;\n\n  /**\n   * @name ReinvestIncomeTransaction#inv401kSource\n   * @type String\n   * @access private\n   */\n  this.inv401kSource = null;\n}\n\ninherit(ReinvestIncomeTransaction, \"extends\", BaseOtherInvestmentTransaction);\ninherit(ReinvestIncomeTransaction, \"implements\", TransactionWithSecurity);\n\n\nAggregate.add(\"REINVEST\", ReinvestIncomeTransaction);\n\n\n/**\n * Gets the id of the security that was reinvested in. This is a required field according to the\n * OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {SecurityId} the security id of the security that was reinvested in\n */\nReinvestIncomeTransaction.prototype.getSecurityId = function() {\n  return this.securityId;\n};\nChildAggregate.add(ReinvestIncomeTransaction, {required: true, order: 20, attributeType: SecurityId, readMethod: \"getSecurityId\", writeMethod: \"setSecurityId\"});\n\n\n/**\n * Sets the id of the security that was reinvested in. This is a required field according to the\n * OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {SecurityId} securityId the security id of the security that was reinvested in\n */\nReinvestIncomeTransaction.prototype.setSecurityId = function(securityId) {\n  this.securityId = securityId;\n};\n\n\n/**\n * Gets the type of income. One of \"CGLONG\" (long term capital gains), \"CGSHORT\" (short term\n * capital gains), \"DIV\" (dividend), INTEREST, or MISC. This is a required field according to the\n * OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\" This is a required field according to the OFX spec.\n *\n * @return {String} the type of income\n */\nReinvestIncomeTransaction.prototype.getIncomeType = function() {\n  return this.incomeType;\n};\nElement.add(ReinvestIncomeTransaction, {name: \"INCOMETYPE\", required: true, order: 30, attributeType: String, readMethod: \"getIncomeType\", writeMethod: \"setIncomeType\"});\n\n\n/**\n * Sets the type of income. One of \"CGLONG\" (long term capital gains), \"CGSHORT\" (short term\n * capital gains), \"DIV\" (dividend), INTEREST, or MISC. This is a required field according to the\n * OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\" This is a required field according to the OFX spec.\n *\n * @param {String} incomeType the type of income\n */\nReinvestIncomeTransaction.prototype.setIncomeType = function(incomeType) {\n  this.incomeType = incomeType;\n};\n\n\n/**\n * Gets the type of income as one of the well-known types.\n *\n * @return {IncomeType} the income type or null if it's not one of the well-known types\n */\nReinvestIncomeTransaction.prototype.getIncomeTypeEnum = function() {\n  return IncomeType.fromOfx(this.getIncomeType());\n};\n\n\n/**\n * Gets the total income received. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {Double} the total\n */\nReinvestIncomeTransaction.prototype.getTotal = function() {\n  return this.total;\n};\nElement.add(ReinvestIncomeTransaction, {name: \"TOTAL\", required: true, order: 40, attributeType: Number, readMethod: \"getTotal\", writeMethod: \"setTotal\"});\n\n\n/**\n * Sets the total income received. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {Double} total the total\n */\nReinvestIncomeTransaction.prototype.setTotal = function(total) {\n  this.total = total;\n};\n\n\n/**\n * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER). This is a\n * required field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the sub account type\n */\nReinvestIncomeTransaction.prototype.getSubAccountSecurity = function() {\n  return this.subAccountSecurity;\n};\nElement.add(ReinvestIncomeTransaction, {name: \"SUBACCTSEC\", order: 50, attributeType: String, readMethod: \"getSubAccountSecurity\", writeMethod: \"setSubAccountSecurity\"});\n\n\n/**\n * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER). This is a\n * required field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} subAccountSecurity the sub account type\n */\nReinvestIncomeTransaction.prototype.setSubAccountSecurity = function(subAccountSecurity) {\n  this.subAccountSecurity = subAccountSecurity;\n};\n\n\n/**\n * Gets the result of getSubAccountSecurity as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types\n */\nReinvestIncomeTransaction.prototype.getSubAccountSecurityEnum = function() {\n  return SubAccountType.fromOfx(this.getSubAccountSecurity());\n};\n\n\n/**\n * Gets the number of units of the security that was reinvested in. This is a required field\n * according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the number of units purchased\n */\nReinvestIncomeTransaction.prototype.getUnits = function() {\n  return this.units;\n};\nElement.add(ReinvestIncomeTransaction, {name: \"UNITS\", required: true, order: 60, attributeType: Number, readMethod: \"getUnits\", writeMethod: \"setUnits\"});\n\n\n/**\n * Sets the number of units of the security that was reinvested in. This is a required field\n * according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} units the number of units purchased\n */\nReinvestIncomeTransaction.prototype.setUnits = function(units) {\n  this.units = units;\n};\n\n\n/**\n * Gets the price per commonly-quoted unit. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the per unit price\n */\nReinvestIncomeTransaction.prototype.getUnitPrice = function() {\n  return this.unitPrice;\n};\nElement.add(ReinvestIncomeTransaction, {name: \"UNITPRICE\", required: true, order: 70, attributeType: Number, readMethod: \"getUnitPrice\", writeMethod: \"setUnitPrice\"});\n\n\n/**\n * Sets the price per commonly-quoted unit. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} unitPrice the per unit price\n */\nReinvestIncomeTransaction.prototype.setUnitPrice = function(unitPrice) {\n  this.unitPrice = unitPrice;\n};\n\n\n/**\n * Gets the transaction commission for the reinvestment. This is an optional field according to\n * the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the transaction commision\n */\nReinvestIncomeTransaction.prototype.getCommission = function() {\n  return this.commission;\n};\nElement.add(ReinvestIncomeTransaction, {name: \"COMMISSION\", order: 80, attributeType: Number, readMethod: \"getCommission\", writeMethod: \"setCommission\"});\n\n\n/**\n * Sets the transaction commission for the reinvestment. This is an optional field according to\n * the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} commission the transaction commision\n */\nReinvestIncomeTransaction.prototype.setCommission = function(commission) {\n  this.commission = commission;\n};\n\n\n/**\n * Gets the taxes for the reinvestment. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the transaction taxes\n */\nReinvestIncomeTransaction.prototype.getTaxes = function() {\n  return this.taxes;\n};\nElement.add(ReinvestIncomeTransaction, {name: \"TAXES\", order: 90, attributeType: Number, readMethod: \"getTaxes\", writeMethod: \"setTaxes\"});\n\n\n/**\n * Sets the taxes for the reinvestment. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} taxes the transaction taxes\n */\nReinvestIncomeTransaction.prototype.setTaxes = function(taxes) {\n  this.taxes = taxes;\n};\n\n\n/**\n * Gets the fees for the reinvestment. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the transaction fees\n */\nReinvestIncomeTransaction.prototype.getFees = function() {\n  return this.fees;\n};\nElement.add(ReinvestIncomeTransaction, {name: \"FEES\", order: 100, attributeType: Number, readMethod: \"getFees\", writeMethod: \"setFees\"});\n\n\n/**\n * Sets the fees for the reinvestment. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} fees the transaction fees\n */\nReinvestIncomeTransaction.prototype.setFees = function(fees) {\n  this.fees = fees;\n};\n\n\n/**\n * Gets the load for the reinvestment. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the load\n */\nReinvestIncomeTransaction.prototype.getLoad = function() {\n  return this.load;\n};\nElement.add(ReinvestIncomeTransaction, {name: \"LOAD\", order: 110, attributeType: Number, readMethod: \"getLoad\", writeMethod: \"setLoad\"});\n\n\n/**\n * Sets the load for the reinvestment. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} load the load\n */\nReinvestIncomeTransaction.prototype.setLoad = function(load) {\n  this.load = load;\n};\n\n\n/**\n * Gets whether the income was tax exempt. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Boolean} whether the transaction was tax exempt\n */\nReinvestIncomeTransaction.prototype.getTaxExempt = function() {\n  return this.taxExempt;\n};\nElement.add(ReinvestIncomeTransaction, {name: \"TAXEXEMPT\", order: 120, attributeType: Boolean, readMethod: \"getTaxExempt\", writeMethod: \"setTaxExempt\"});\n\n\n/**\n * Sets whether the income was tax exempt. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Boolean} taxExempt whether the transaction was tax exempt\n */\nReinvestIncomeTransaction.prototype.setTaxExempt = function(taxExempt) {\n  this.taxExempt = taxExempt;\n};\n\n\n/**\n * Gets the currency code for the transaction. Only one of currency code or original currency\n * info should be set according to the OFX spec. If neither are set, means the default currency.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the currency code for the transaction\n */\nReinvestIncomeTransaction.prototype.getCurrencyCode = function() {\n  return this.currencyCode;\n};\nElement.add(ReinvestIncomeTransaction, {name: \"CURRENCY\", order: 130, attributeType: String, readMethod: \"getCurrencyCode\", writeMethod: \"setCurrencyCode\"});\n\n\n/**\n * Sets the currency code for the transaction. Only one of currency code or original currency\n * info should be set according to the OFX spec. If neither are set, means the default currency.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} currencyCode the currency code for the transaction\n */\nReinvestIncomeTransaction.prototype.setCurrencyCode = function(currencyCode) {\n  this.currencyCode = currencyCode;\n  this.originalCurrencyInfo = null;\n};\n\n\n/**\n * Gets the original currency info for the transaction.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {OriginalCurrency} the original currency info for the transaction.\n */\nReinvestIncomeTransaction.prototype.getOriginalCurrencyInfo = function() {\n  return this.originalCurrencyInfo;\n};\nElement.add(ReinvestIncomeTransaction, {name: \"ORIGCURRENCY\", order: 140, attributeType: OriginalCurrency, readMethod: \"getOriginalCurrencyInfo\", writeMethod: \"setOriginalCurrencyInfo\"});\n\n\n/**\n * Sets the original currency info for the transaction.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {OriginalCurrency} originalCurrencyInfo the original currency info for the transaction.\n */\nReinvestIncomeTransaction.prototype.setOriginalCurrencyInfo = function(originalCurrencyInfo) {\n  this.originalCurrencyInfo = originalCurrencyInfo;\n  this.currencyCode = null;\n};\n\n\n/**\n * Gets the 401K source for the reinvestment. Should be one of \"PRETAX\", \"AFTERTAX\", \"MATCH\",\n * \"PROFITSHARING\", \"ROLLOVER\", \"OTHERVEST\", \"OTHERNONVEST\".  This is an optional field\n * according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the state withholding\n */\nReinvestIncomeTransaction.prototype.get401kSource = function() {\n  return this.inv401kSource;\n};\nElement.add(ReinvestIncomeTransaction, {name: \"INV401KSOURCE\", order: 150, attributeType: String, readMethod: \"get401kSource\", writeMethod: \"set401kSource\"});\n\n\n/**\n * Sets the 401K source for the reinvestment. Should be one of \"PRETAX\", \"AFTERTAX\", \"MATCH\",\n * \"PROFITSHARING\", \"ROLLOVER\", \"OTHERVEST\", \"OTHERNONVEST\".  This is an optional field\n * according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} inv401kSource the state withholding\n */\nReinvestIncomeTransaction.prototype.set401kSource = function(inv401kSource) {\n  this.inv401kSource = inv401kSource;\n};\n\n\n/**\n * Gets the 401(k) source as one of the well-known types.\n *\n * @return {Inv401KSource} the type of close or null if it's not well known\n */\nReinvestIncomeTransaction.prototype.get401kSourceEnum = function() {\n  return Inv401KSource.fromOfx(this.get401kSource());\n};\n\n\n\n\nmodule.exports = ReinvestIncomeTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\n/**\n * Related option transaction type.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @enum\n */\nvar RelatedOptionType = {\n  SPREAD: \"SPREAD\",\n  STRADDLE: \"STRADDLE\",\n  NONE: \"NONE\",\n  OTHER: \"OTHER\",\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"SPREAD\" === ofxVal) {\n      return RelatedOptionType.SPREAD;\n    } else if (\"STRADDLE\" === ofxVal) {\n      return RelatedOptionType.STRADDLE;\n    } else if (\"NONE\" === ofxVal) {\n      return RelatedOptionType.NONE;\n    } else if (\"OTHER\" === ofxVal) {\n      return RelatedOptionType.OTHER;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = RelatedOptionType;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar SubAccountType = require(\"../accounts/SubAccountType\");\nvar Inv401KSource = require(\"../positions/Inv401KSource\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar SecurityId = require(\"../../seclist/SecurityId\");\nvar BaseOtherInvestmentTransaction = require(\"./BaseOtherInvestmentTransaction\");\nvar TransactionWithSecurity = require(\"./TransactionWithSecurity\");\nvar TransactionType = require(\"./TransactionType\");\nvar OriginalCurrency = require(\"./OriginalCurrency\");\n\n/**\n * Transaction for return of capital transactions.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @class\n * @augments BaseOtherInvestmentTransaction\n * @augments TransactionWithSecurity\n */\nfunction ReturnOfCapitalTransaction () {\n  BaseOtherInvestmentTransaction.call(this, TransactionType.RETURN_OF_CAPITAL);\n\n  /**\n   * @name ReturnOfCapitalTransaction#securityId\n   * @type SecurityId\n   * @access private\n   */\n  this.securityId = null;\n\n  /**\n   * @name ReturnOfCapitalTransaction#total\n   * @type Double\n   * @access private\n   */\n  this.total = null;\n\n  /**\n   * @name ReturnOfCapitalTransaction#subAccountSecurity\n   * @type String\n   * @access private\n   */\n  this.subAccountSecurity = null;\n\n  /**\n   * @name ReturnOfCapitalTransaction#subAccountFund\n   * @type String\n   * @access private\n   */\n  this.subAccountFund = null;\n\n  /**\n   * @name ReturnOfCapitalTransaction#currencyCode\n   * @type String\n   * @access private\n   */\n  this.currencyCode = null;\n\n  /**\n   * @name ReturnOfCapitalTransaction#originalCurrencyInfo\n   * @type OriginalCurrency\n   * @access private\n   */\n  this.originalCurrencyInfo = null;\n\n  /**\n   * @name ReturnOfCapitalTransaction#inv401kSource\n   * @type String\n   * @access private\n   */\n  this.inv401kSource = null;\n}\n\ninherit(ReturnOfCapitalTransaction, \"extends\", BaseOtherInvestmentTransaction);\ninherit(ReturnOfCapitalTransaction, \"implements\", TransactionWithSecurity);\n\n\nAggregate.add(\"RETOFCAP\", ReturnOfCapitalTransaction);\n\n\n/**\n * Gets the id of the security that capital was returned from. This is a required field according\n * to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {SecurityId} the security id of the security that capital was returned from\n */\nReturnOfCapitalTransaction.prototype.getSecurityId = function() {\n  return this.securityId;\n};\nChildAggregate.add(ReturnOfCapitalTransaction, {required: true, order: 20, attributeType: SecurityId, readMethod: \"getSecurityId\", writeMethod: \"setSecurityId\"});\n\n\n/**\n * Sets the id of the security that capital was returned from. This is a required field according\n * to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {SecurityId} securityId the security id of the security that capital was returned from\n */\nReturnOfCapitalTransaction.prototype.setSecurityId = function(securityId) {\n  this.securityId = securityId;\n};\n\n\n/**\n * Gets the total amount of capital returned. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {Double} the total\n */\nReturnOfCapitalTransaction.prototype.getTotal = function() {\n  return this.total;\n};\nElement.add(ReturnOfCapitalTransaction, {name: \"TOTAL\", required: true, order: 40, attributeType: Number, readMethod: \"getTotal\", writeMethod: \"setTotal\"});\n\n\n/**\n * Sets the total amount of capital returned. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {Double} total the total\n */\nReturnOfCapitalTransaction.prototype.setTotal = function(total) {\n  this.total = total;\n};\n\n\n/**\n * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER). This is a\n * required field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the sub account type\n */\nReturnOfCapitalTransaction.prototype.getSubAccountSecurity = function() {\n  return this.subAccountSecurity;\n};\nElement.add(ReturnOfCapitalTransaction, {name: \"SUBACCTSEC\", order: 50, attributeType: String, readMethod: \"getSubAccountSecurity\", writeMethod: \"setSubAccountSecurity\"});\n\n\n/**\n * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER). This is a\n * required field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} subAccountSecurity the sub account type\n */\nReturnOfCapitalTransaction.prototype.setSubAccountSecurity = function(subAccountSecurity) {\n  this.subAccountSecurity = subAccountSecurity;\n};\n\n\n/**\n * Gets the result of getSubAccountSecurity as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types.\n */\nReturnOfCapitalTransaction.prototype.getSubAccountSecurityEnum = function() {\n  return SubAccountType.fromOfx(this.getSubAccountSecurity());\n};\n\n\n/**\n * Gets the sub account type that the transaction affects.\n * (e.g. CASH, MARGIN, SHORT, OTHER). This is a required field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the sub account fund\n */\nReturnOfCapitalTransaction.prototype.getSubAccountFund = function() {\n  return this.subAccountFund;\n};\nElement.add(ReturnOfCapitalTransaction, {name: \"SUBACCTFUND\", order: 140, attributeType: String, readMethod: \"getSubAccountFund\", writeMethod: \"setSubAccountFund\"});\n\n\n/**\n * Sets the sub account type that the transaction affects.\n * (e.g. CASH, MARGIN, SHORT, OTHER). This is a required field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} subAccountFund the sub account fund\n */\nReturnOfCapitalTransaction.prototype.setSubAccountFund = function(subAccountFund) {\n  this.subAccountFund = subAccountFund;\n};\n\n\n/**\n * Gets the result of getSubAccountFund as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types\n */\nReturnOfCapitalTransaction.prototype.getSubAccountFundEnum = function() {\n  return SubAccountType.fromOfx(this.getSubAccountFund());\n};\n\n\n/**\n * Gets the currency code for the transaction. Only one of currency code or original currency\n * info should be set according to the OFX spec. If neither are set, means the default currency.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the currency code for the transaction\n */\nReturnOfCapitalTransaction.prototype.getCurrencyCode = function() {\n  return this.currencyCode;\n};\nElement.add(ReturnOfCapitalTransaction, {name: \"CURRENCY\", order: 110, attributeType: String, readMethod: \"getCurrencyCode\", writeMethod: \"setCurrencyCode\"});\n\n\n/**\n * Sets the currency code for the transaction. Only one of currency code or original currency\n * info should be set according to the OFX spec. If neither are set, means the default currency.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} currencyCode the currency code for the transaction\n */\nReturnOfCapitalTransaction.prototype.setCurrencyCode = function(currencyCode) {\n  this.currencyCode = currencyCode;\n  this.originalCurrencyInfo = null;\n};\n\n\n/**\n * Gets the original currency info for the transaction.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {OriginalCurrency} the currency code for the transaction.\n */\nReturnOfCapitalTransaction.prototype.getOriginalCurrencyInfo = function() {\n  return this.originalCurrencyInfo;\n};\nElement.add(ReturnOfCapitalTransaction, {name: \"ORIGCURRENCY\", order: 120, attributeType: OriginalCurrency, readMethod: \"getOriginalCurrencyInfo\", writeMethod: \"setOriginalCurrencyInfo\"});\n\n\n/**\n * Sets the original currency info for the transaction.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {OriginalCurrency} originalCurrencyInfo the currency code for the transaction.\n */\nReturnOfCapitalTransaction.prototype.setOriginalCurrencyInfo = function(originalCurrencyInfo) {\n  this.originalCurrencyInfo = originalCurrencyInfo;\n  this.currencyCode = null;\n};\n\n\n/**\n * Gets the 401K source for the reinvestment. Should be one of \"PRETAX\", \"AFTERTAX\", \"MATCH\",\n * \"PROFITSHARING\", \"ROLLOVER\", \"OTHERVEST\", \"OTHERNONVEST\".  This is an optional field\n * according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the state withholding\n */\nReturnOfCapitalTransaction.prototype.get401kSource = function() {\n  return this.inv401kSource;\n};\nElement.add(ReturnOfCapitalTransaction, {name: \"INV401KSOURCE\", order: 180, attributeType: String, readMethod: \"get401kSource\", writeMethod: \"set401kSource\"});\n\n\n/**\n * Sets the 401K source for the reinvestment. Should be one of \"PRETAX\", \"AFTERTAX\", \"MATCH\",\n * \"PROFITSHARING\", \"ROLLOVER\", \"OTHERVEST\", \"OTHERNONVEST\".  This is an optional field\n * according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} inv401kSource the state withholding\n */\nReturnOfCapitalTransaction.prototype.set401kSource = function(inv401kSource) {\n  this.inv401kSource = inv401kSource;\n};\n\n\n/**\n * Gets the 401(k) source as one of the well-known types.\n *\n * @return {Inv401KSource} the type of close or null if it's not well known.\n */\nReturnOfCapitalTransaction.prototype.get401kSourceEnum = function() {\n  return Inv401KSource.fromOfx(this.get401kSource());\n};\n\n\n\n\nmodule.exports = ReturnOfCapitalTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Reason debt was sold.\n * See \"Section 13.9.2.4.2, OFX Spec\"\n *\n * @enum\n */\nvar SellDebtReason = {\n  CALL: \"CALL\",\n  SELL: \"SELL\",\n  MATURITY: \"MATURITY\",\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"CALL\" === ofxVal) {\n      return SellDebtReason.CALL;\n    } else if (\"SELL\" === ofxVal) {\n      return SellDebtReason.SELL;\n    } else if (\"MATURITY\" === ofxVal) {\n      return SellDebtReason.MATURITY;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = SellDebtReason;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar BaseSellInvestmentTransaction = require(\"./BaseSellInvestmentTransaction\");\nvar TransactionType = require(\"./TransactionType\");\nvar SellDebtReason = require(\"./SellDebtReason\");\n\n/**\n * Transaction for selling debt (i.e. bonds, CDs, etc.,).\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @class\n * @augments BaseSellInvestmentTransaction\n */\nfunction SellDebtTransaction () {\n  BaseSellInvestmentTransaction.call(this, TransactionType.SELL_DEBT);\n\n  /**\n   * @name SellDebtTransaction#sellReason\n   * @type String\n   * @access private\n   */\n  this.sellReason = null;\n\n  /**\n   * @name SellDebtTransaction#accruedInterest\n   * @type Double\n   * @access private\n   */\n  this.accruedInterest = null;\n}\n\ninherit(SellDebtTransaction, \"extends\", BaseSellInvestmentTransaction);\n\n\nAggregate.add(\"SELLDEBT\", SellDebtTransaction);\n\n\n/**\n * Gets the reason for the sale. One of \"CALL\" (the debt was called), \"SELL\" (the debt was sold),\n * \"MATURITY\" (the debt reached maturity).\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {String} The reason for the sale\n */\nSellDebtTransaction.prototype.getSellReason = function() {\n  return this.sellReason;\n};\nElement.add(SellDebtTransaction, {name: \"SELLREASON\", order: 30, attributeType: String, readMethod: \"getSellReason\", writeMethod: \"setSellReason\"});\n\n\n/**\n * Sets the reason for the sale. One of \"CALL\" (the debt was called), \"SELL\" (the debt was sold),\n * \"MATURITY\" (the debt reached maturity).\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {String} sellReason The reason for the sale\n */\nSellDebtTransaction.prototype.setSellReason = function(sellReason) {\n  this.sellReason = sellReason;\n};\n\n\n/**\n * Gets the sell reason as one of the well-known types.\n *\n * @return {SellDebtReason} the sell reason or null if it's not well known\n */\nSellDebtTransaction.prototype.getSellReasonEnum = function() {\n  return SellDebtReason.fromOfx(this.getSellReason());\n};\n\n\n/**\n * Gets the amount of accrued interest on the debt. This is an optional field according to the\n * OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {Double} the amount of accrued interest\n */\nSellDebtTransaction.prototype.getAccruedInterest = function() {\n  return this.accruedInterest;\n};\nElement.add(SellDebtTransaction, {name: \"ACCRDINT\", order: 40, attributeType: Number, readMethod: \"getAccruedInterest\", writeMethod: \"setAccruedInterest\"});\n\n\n/**\n * Sets the amount of accrued interest on the debt. This is an optional field according to the\n * OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {Double} accruedInterest the amount of accrued interest\n */\nSellDebtTransaction.prototype.setAccruedInterest = function(accruedInterest) {\n  this.accruedInterest = accruedInterest;\n};\n\n\n\n\nmodule.exports = SellDebtTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar SubAccountType = require(\"../accounts/SubAccountType\");\nvar Inv401KSource = require(\"../positions/Inv401KSource\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar SecurityId = require(\"../../seclist/SecurityId\");\nvar OriginalCurrency = require(\"./OriginalCurrency\");\nvar InvestmentTransaction = require(\"./InvestmentTransaction\");\n\n/**\n * Sell investment transaction aggregate (\"INVSELL\").\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @class\n */\nfunction SellInvestmentTransaction () {\n\n  /**\n   * @name SellInvestmentTransaction#investmentTransaction\n   * @type InvestmentTransaction\n   * @access private\n   */\n  this.investmentTransaction = null;\n\n  /**\n   * @name SellInvestmentTransaction#securityId\n   * @type SecurityId\n   * @access private\n   */\n  this.securityId = null;\n\n  /**\n   * @name SellInvestmentTransaction#units\n   * @type Double\n   * @access private\n   */\n  this.units = null;\n\n  /**\n   * @name SellInvestmentTransaction#unitPrice\n   * @type Double\n   * @access private\n   */\n  this.unitPrice = null;\n\n  /**\n   * @name SellInvestmentTransaction#markdown\n   * @type Double\n   * @access private\n   */\n  this.markdown = null;\n\n  /**\n   * @name SellInvestmentTransaction#commission\n   * @type Double\n   * @access private\n   */\n  this.commission = null;\n\n  /**\n   * @name SellInvestmentTransaction#taxes\n   * @type Double\n   * @access private\n   */\n  this.taxes = null;\n\n  /**\n   * @name SellInvestmentTransaction#fees\n   * @type Double\n   * @access private\n   */\n  this.fees = null;\n\n  /**\n   * @name SellInvestmentTransaction#load\n   * @type Double\n   * @access private\n   */\n  this.load = null;\n\n  /**\n   * @name SellInvestmentTransaction#withholding\n   * @type Double\n   * @access private\n   */\n  this.withholding = null;\n\n  /**\n   * @name SellInvestmentTransaction#taxExempt\n   * @type Boolean\n   * @access private\n   */\n  this.taxExempt = null;\n\n  /**\n   * @name SellInvestmentTransaction#total\n   * @type Double\n   * @access private\n   */\n  this.total = null;\n\n  /**\n   * @name SellInvestmentTransaction#gain\n   * @type Double\n   * @access private\n   */\n  this.gain = null;\n\n  /**\n   * @name SellInvestmentTransaction#currencyCode\n   * @type String\n   * @access private\n   */\n  this.currencyCode = null;\n\n  /**\n   * @name SellInvestmentTransaction#originalCurrencyInfo\n   * @type OriginalCurrency\n   * @access private\n   */\n  this.originalCurrencyInfo = null;\n\n  /**\n   * @name SellInvestmentTransaction#subAccountSecurity\n   * @type String\n   * @access private\n   */\n  this.subAccountSecurity = null;\n\n  /**\n   * @name SellInvestmentTransaction#subAccountFund\n   * @type String\n   * @access private\n   */\n  this.subAccountFund = null;\n\n  /**\n   * @name SellInvestmentTransaction#loanId\n   * @type String\n   * @access private\n   */\n  this.loanId = null;\n\n  /**\n   * @name SellInvestmentTransaction#stateWithholding\n   * @type Double\n   * @access private\n   */\n  this.stateWithholding = null;\n\n  /**\n   * @name SellInvestmentTransaction#penalty\n   * @type Double\n   * @access private\n   */\n  this.penalty = null;\n\n  /**\n   * @name SellInvestmentTransaction#inv401kSource\n   * @type String\n   * @access private\n   */\n  this.inv401kSource = null;\n}\n\n\n\nAggregate.add(\"INVSELL\", SellInvestmentTransaction);\n\n\n/**\n * Gets the investment transaction child aggregate.\n *\n * @return {InvestmentTransaction} the investment transaction child aggregate\n */\nSellInvestmentTransaction.prototype.getInvestmentTransaction = function() {\n  return this.investmentTransaction;\n};\nChildAggregate.add(SellInvestmentTransaction, {order: 10, attributeType: InvestmentTransaction, readMethod: \"getInvestmentTransaction\", writeMethod: \"setInvestmentTransaction\"});\n\n\n/**\n * Sets the investment transaction child aggregate.\n *\n * @param {InvestmentTransaction} investmentTransaction the investment transaction child aggregate\n */\nSellInvestmentTransaction.prototype.setInvestmentTransaction = function(investmentTransaction) {\n  this.investmentTransaction = investmentTransaction;\n};\n\n\n/**\n * Gets the id of the security that was sold. This is a required field according to the OFX\n * spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {SecurityId} the security id of the security that was sold\n */\nSellInvestmentTransaction.prototype.getSecurityId = function() {\n  return this.securityId;\n};\nChildAggregate.add(SellInvestmentTransaction, {required: true, order: 20, attributeType: SecurityId, readMethod: \"getSecurityId\", writeMethod: \"setSecurityId\"});\n\n\n/**\n * Sets the id of the security that was sold. This is a required field according to the OFX\n * spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {SecurityId} securityId the security id of the security that was sold\n */\nSellInvestmentTransaction.prototype.setSecurityId = function(securityId) {\n  this.securityId = securityId;\n};\n\n\n/**\n * Gets the number of units of the security that was sold. For security-based actions other\n * than stock splits, this is the quantity sold. For stocks, mutual funds, and others, this\n * is the number of shares. For bonds, this is the face value. For options, this is the number of\n * contacts. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the number of units sold\n */\nSellInvestmentTransaction.prototype.getUnits = function() {\n  return this.units;\n};\nElement.add(SellInvestmentTransaction, {name: \"UNITS\", required: true, order: 30, attributeType: Number, readMethod: \"getUnits\", writeMethod: \"setUnits\"});\n\n\n/**\n * Sets the number of units of the security that was sold. For security-based actions other\n * than stock splits, this is the quantity sold. For stocks, mutual funds, and others, this\n * is the number of shares. For bonds, this is the face value. For options, this is the number of\n * contacts. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} units the number of units sold\n */\nSellInvestmentTransaction.prototype.setUnits = function(units) {\n  this.units = units;\n};\n\n\n/**\n * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the\n * share price. For bonds, this is the percentage of par. For options, this is the per share (not\n * per contact) price. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the per unit price\n */\nSellInvestmentTransaction.prototype.getUnitPrice = function() {\n  return this.unitPrice;\n};\nElement.add(SellInvestmentTransaction, {name: \"UNITPRICE\", required: true, order: 40, attributeType: Number, readMethod: \"getUnitPrice\", writeMethod: \"setUnitPrice\"});\n\n\n/**\n * Sets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the\n * share price. For bonds, this is the percentage of par. For options, this is the per share (not\n * per contact) price. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} unitPrice the per unit price\n */\nSellInvestmentTransaction.prototype.setUnitPrice = function(unitPrice) {\n  this.unitPrice = unitPrice;\n};\n\n\n/**\n * Gets the portion of the unit price that is attributed to the dealer markdown. This is an\n * optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the per unit markedown price\n */\nSellInvestmentTransaction.prototype.getMarkdown = function() {\n  return this.markdown;\n};\nElement.add(SellInvestmentTransaction, {name: \"MARKDOWN\", order: 50, attributeType: Number, readMethod: \"getMarkdown\", writeMethod: \"setMarkdown\"});\n\n\n/**\n * Sets the portion of the unit price that is attributed to the dealer markdown. This is an\n * optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} markdown the per unit markedown price\n */\nSellInvestmentTransaction.prototype.setMarkdown = function(markdown) {\n  this.markdown = markdown;\n};\n\n\n/**\n * Gets the transaction commission for the sale. This is an optional field according to the\n * OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the transaction commision\n */\nSellInvestmentTransaction.prototype.getCommission = function() {\n  return this.commission;\n};\nElement.add(SellInvestmentTransaction, {name: \"COMMISSION\", order: 60, attributeType: Number, readMethod: \"getCommission\", writeMethod: \"setCommission\"});\n\n\n/**\n * Sets the transaction commission for the sale. This is an optional field according to the\n * OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} commission the transaction commision\n */\nSellInvestmentTransaction.prototype.setCommission = function(commission) {\n  this.commission = commission;\n};\n\n\n/**\n * Gets the taxes for the sale. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the transaction taxes\n */\nSellInvestmentTransaction.prototype.getTaxes = function() {\n  return this.taxes;\n};\nElement.add(SellInvestmentTransaction, {name: \"TAXES\", order: 70, attributeType: Number, readMethod: \"getTaxes\", writeMethod: \"setTaxes\"});\n\n\n/**\n * Sets the taxes for the sale. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} taxes the transaction taxes\n */\nSellInvestmentTransaction.prototype.setTaxes = function(taxes) {\n  this.taxes = taxes;\n};\n\n\n/**\n * Gets the fees for the sale. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the transaction fees\n */\nSellInvestmentTransaction.prototype.getFees = function() {\n  return this.fees;\n};\nElement.add(SellInvestmentTransaction, {name: \"FEES\", order: 80, attributeType: Number, readMethod: \"getFees\", writeMethod: \"setFees\"});\n\n\n/**\n * Sets the fees for the sale. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} fees the transaction fees\n */\nSellInvestmentTransaction.prototype.setFees = function(fees) {\n  this.fees = fees;\n};\n\n\n/**\n * Gets the load for the sale. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the load\n */\nSellInvestmentTransaction.prototype.getLoad = function() {\n  return this.load;\n};\nElement.add(SellInvestmentTransaction, {name: \"LOAD\", order: 90, attributeType: Number, readMethod: \"getLoad\", writeMethod: \"setLoad\"});\n\n\n/**\n * Sets the load for the sale. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} load the load\n */\nSellInvestmentTransaction.prototype.setLoad = function(load) {\n  this.load = load;\n};\n\n\n/**\n * Gets the withholding for the sale. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the withholding\n */\nSellInvestmentTransaction.prototype.getWithholding = function() {\n  return this.withholding;\n};\nElement.add(SellInvestmentTransaction, {name: \"WITHHOLDING\", order: 93, attributeType: Number, readMethod: \"getWithholding\", writeMethod: \"setWithholding\"});\n\n\n/**\n * Sets the withholding for the sale. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} withholding the withholding\n */\nSellInvestmentTransaction.prototype.setWithholding = function(withholding) {\n  this.withholding = withholding;\n};\n\n\n/**\n * Gets whether the sale was tax exempt. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Boolean} whether the transaction was tax exempt\n */\nSellInvestmentTransaction.prototype.getTaxExempt = function() {\n  return this.taxExempt;\n};\nElement.add(SellInvestmentTransaction, {name: \"TAXEXEMPT\", order: 97, attributeType: Boolean, readMethod: \"getTaxExempt\", writeMethod: \"setTaxExempt\"});\n\n\n/**\n * Sets whether the sale was tax exempt. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Boolean} taxExempt whether the transaction was tax exempt\n */\nSellInvestmentTransaction.prototype.setTaxExempt = function(taxExempt) {\n  this.taxExempt = taxExempt;\n};\n\n\n/**\n * Gets the total for the sale. Should be equal to\n * (units * (unitPrice + markdown)) + (commision + fees + load + taxes + penalty + withholding +\n * statewithholding) according to the OFX spec. This is a required field according to the OFX\n * spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the total\n */\nSellInvestmentTransaction.prototype.getTotal = function() {\n  return this.total;\n};\nElement.add(SellInvestmentTransaction, {name: \"TOTAL\", required: true, order: 100, attributeType: Number, readMethod: \"getTotal\", writeMethod: \"setTotal\"});\n\n\n/**\n * Sets the total for the sale. Should be equal to\n * (units * (unitPrice + markdown)) + (commision + fees + load + taxes + penalty + withholding +\n * statewithholding) according to the OFX spec. This is a required field according to the OFX\n * spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} total the total\n */\nSellInvestmentTransaction.prototype.setTotal = function(total) {\n  this.total = total;\n};\n\n\n/**\n * Gets the gain sale. This is aan optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the gain for the sale\n */\nSellInvestmentTransaction.prototype.getGain = function() {\n  return this.gain;\n};\nElement.add(SellInvestmentTransaction, {name: \"GAIN\", order: 105, attributeType: Number, readMethod: \"getGain\", writeMethod: \"setGain\"});\n\n\n/**\n * Sets the gain sale. This is aan optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} gain the gain for the sale\n */\nSellInvestmentTransaction.prototype.setGain = function(gain) {\n  this.gain = gain;\n};\n\n\n/**\n * Gets the currency code for the transaction. Only one of currency code or original currency\n * code should be set according to the OFX spec. If neither are set, means the default currency.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the currency code for the transaction\n */\nSellInvestmentTransaction.prototype.getCurrencyCode = function() {\n  return this.currencyCode;\n};\nElement.add(SellInvestmentTransaction, {name: \"CURRENCY\", order: 110, attributeType: String, readMethod: \"getCurrencyCode\", writeMethod: \"setCurrencyCode\"});\n\n\n/**\n * sets the currency code for the transaction. Only one of currency code or original currency\n * code should be set according to the OFX spec. If neither are set, means the default currency.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} currencyCode the currency code for the transaction\n */\nSellInvestmentTransaction.prototype.setCurrencyCode = function(currencyCode) {\n  this.currencyCode = currencyCode;\n  this.originalCurrencyInfo = null;\n};\n\n\n/**\n * Gets the original currency info for the transaction.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {OriginalCurrency} the original currency info for the transaction\n */\nSellInvestmentTransaction.prototype.getOriginalCurrencyInfo = function() {\n  return this.originalCurrencyInfo;\n};\nElement.add(SellInvestmentTransaction, {name: \"ORIGCURRENCY\", order: 120, attributeType: OriginalCurrency, readMethod: \"getOriginalCurrencyInfo\", writeMethod: \"setOriginalCurrencyInfo\"});\n\n\n/**\n * Sets the original currency info for the transaction.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {OriginalCurrency} originalCurrencyInfo the original currency info for the transaction\n */\nSellInvestmentTransaction.prototype.setOriginalCurrencyInfo = function(originalCurrencyInfo) {\n  this.originalCurrencyInfo = originalCurrencyInfo;\n  this.currencyCode = null;\n};\n\n\n/**\n * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the sub account type\n */\nSellInvestmentTransaction.prototype.getSubAccountSecurity = function() {\n  return this.subAccountSecurity;\n};\nElement.add(SellInvestmentTransaction, {name: \"SUBACCTSEC\", order: 130, attributeType: String, readMethod: \"getSubAccountSecurity\", writeMethod: \"setSubAccountSecurity\"});\n\n\n/**\n * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} subAccountSecurity the sub account type\n */\nSellInvestmentTransaction.prototype.setSubAccountSecurity = function(subAccountSecurity) {\n  this.subAccountSecurity = subAccountSecurity;\n};\n\n\n/**\n * Gets the result of getSubAccountSecurity as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types.\n */\nSellInvestmentTransaction.prototype.getSubAccountSecurityEnum = function() {\n  return SubAccountType.fromOfx(this.getSubAccountSecurity());\n};\n\n\n/**\n * Gets the sub account type that the security is being transfered from\n * (e.g. CASH, MARGIN, SHORT, OTHER).\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the sub account fund\n */\nSellInvestmentTransaction.prototype.getSubAccountFund = function() {\n  return this.subAccountFund;\n};\nElement.add(SellInvestmentTransaction, {name: \"SUBACCTFUND\", order: 140, attributeType: String, readMethod: \"getSubAccountFund\", writeMethod: \"setSubAccountFund\"});\n\n\n/**\n * Sets the sub account type that the security is being transfered from\n * (e.g. CASH, MARGIN, SHORT, OTHER).\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} subAccountFund the sub account fund\n */\nSellInvestmentTransaction.prototype.setSubAccountFund = function(subAccountFund) {\n  this.subAccountFund = subAccountFund;\n};\n\n\n/**\n * Gets the result of getSubAccountFund as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types\n */\nSellInvestmentTransaction.prototype.getSubAccountFundEnum = function() {\n  return SubAccountType.fromOfx(this.getSubAccountFund());\n};\n\n\n/**\n * Gets the loan id if this transaction was due to a loan or loan repayment on a 401k. This is an\n * optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the loan id\n */\nSellInvestmentTransaction.prototype.getLoanId = function() {\n  return this.loanId;\n};\nElement.add(SellInvestmentTransaction, {name: \"LOANID\", order: 150, attributeType: String, readMethod: \"getLoanId\", writeMethod: \"setLoanId\"});\n\n\n/**\n * Sets the loan id if this transaction was due to a loan or loan repayment on a 401k. This is an\n * optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} loanId the loan id\n */\nSellInvestmentTransaction.prototype.setLoanId = function(loanId) {\n  this.loanId = loanId;\n};\n\n\n/**\n * Gets the state withholding for the sale. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the state withholding\n */\nSellInvestmentTransaction.prototype.getStateWithholding = function() {\n  return this.stateWithholding;\n};\nElement.add(SellInvestmentTransaction, {name: \"STATEWITHHOLDING\", order: 160, attributeType: Number, readMethod: \"getStateWithholding\", writeMethod: \"setStateWithholding\"});\n\n\n/**\n * Sets the state withholding for the sale. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} stateWithholding the state withholding\n */\nSellInvestmentTransaction.prototype.setStateWithholding = function(stateWithholding) {\n  this.stateWithholding = stateWithholding;\n};\n\n\n/**\n * Gets the penalty for the sale. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the state withholding\n */\nSellInvestmentTransaction.prototype.getPenalty = function() {\n  return this.penalty;\n};\nElement.add(SellInvestmentTransaction, {name: \"PENALTY\", order: 170, attributeType: Number, readMethod: \"getPenalty\", writeMethod: \"setPenalty\"});\n\n\n/**\n * Sets the penalty for the sale. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} penalty the state withholding\n */\nSellInvestmentTransaction.prototype.setPenalty = function(penalty) {\n  this.penalty = penalty;\n};\n\n\n/**\n * Gets the 401K source for the sale. Should be one of \"PRETAX\", \"AFTERTAX\", \"MATCH\",\n * \"PROFITSHARING\", \"ROLLOVER\", \"OTHERVEST\", \"OTHERNONVEST\".  This is an optional field\n * according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the 401k source\n */\nSellInvestmentTransaction.prototype.get401kSource = function() {\n  return this.inv401kSource;\n};\nElement.add(SellInvestmentTransaction, {name: \"INV401KSOURCE\", order: 180, attributeType: String, readMethod: \"get401kSource\", writeMethod: \"set401kSource\"});\n\n\n/**\n * Sets the 401K source for the sale. Should be one of \"PRETAX\", \"AFTERTAX\", \"MATCH\",\n * \"PROFITSHARING\", \"ROLLOVER\", \"OTHERVEST\", \"OTHERNONVEST\".  This is an optional field\n * according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} inv401kSource the 401k source\n */\nSellInvestmentTransaction.prototype.set401kSource = function(inv401kSource) {\n  this.inv401kSource = inv401kSource;\n};\n\n\n/**\n * Gets the 401k source as one of the well-known types.\n *\n * @return {Inv401KSource} the 401k source or null if its not one of the well-known types\n */\nSellInvestmentTransaction.prototype.get401kSourceEnum = function() {\n  return Inv401KSource.fromOfx(this.get401kSource());\n};\n\n\n\n\nmodule.exports = SellInvestmentTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar BaseSellInvestmentTransaction = require(\"./BaseSellInvestmentTransaction\");\nvar TransactionType = require(\"./TransactionType\");\nvar SellType = require(\"./SellType\");\n\n/**\n * Transaction for selling mutual fund.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @class\n * @augments BaseSellInvestmentTransaction\n */\nfunction SellMutualFundTransaction () {\n  BaseSellInvestmentTransaction.call(this, TransactionType.SELL_MUTUAL_FUND);\n\n  /**\n   * @name SellMutualFundTransaction#sellType\n   * @type String\n   * @access private\n   */\n  this.sellType = null;\n\n  /**\n   * @name SellMutualFundTransaction#averageCostBasis\n   * @type Double\n   * @access private\n   */\n  this.averageCostBasis = null;\n\n  /**\n   * @name SellMutualFundTransaction#relatedTransactionId\n   * @type String\n   * @access private\n   */\n  this.relatedTransactionId = null;\n}\n\ninherit(SellMutualFundTransaction, \"extends\", BaseSellInvestmentTransaction);\n\n\nAggregate.add(\"SELLMF\", SellMutualFundTransaction);\n\n\n/**\n * Gets the type of sale. One of \"SELL\" or \"SELLSHORT\".\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {String} The type of sale\n */\nSellMutualFundTransaction.prototype.getSellType = function() {\n  return this.sellType;\n};\nElement.add(SellMutualFundTransaction, {name: \"SELLTYPE\", order: 20, attributeType: String, readMethod: \"getSellType\", writeMethod: \"setSellType\"});\n\n\n/**\n * Sets the type of sale. One of \"SELL\" or \"SELLSHORT\".\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {String} sellType The type of sale\n */\nSellMutualFundTransaction.prototype.setSellType = function(sellType) {\n  this.sellType = sellType;\n};\n\n\n/**\n * Gets the sell type as one of the well-known types.\n *\n * @return {SellType} the type of sale or null if it's not known.\n */\nSellMutualFundTransaction.prototype.getSellTypeEnum = function() {\n  return SellType.fromOfx(this.sellType);\n};\n\n\n/**\n * Gets the average cost basis of the sale.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {Double} The average cost basis of the sale\n */\nSellMutualFundTransaction.prototype.getAverageCostBasis = function() {\n  return this.averageCostBasis;\n};\nElement.add(SellMutualFundTransaction, {name: \"AVGCOSTBASIS\", order: 30, attributeType: Number, readMethod: \"getAverageCostBasis\", writeMethod: \"setAverageCostBasis\"});\n\n\n/**\n * Sets the average cost basis of the sale.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {Double} averageCostBasis The average cost basis of the sale\n */\nSellMutualFundTransaction.prototype.setAverageCostBasis = function(averageCostBasis) {\n  this.averageCostBasis = averageCostBasis;\n};\n\n\n/**\n * Gets any related transaction id for a mutual fund sale (e.g. for a mutual fund exchange).\n * This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {String} the related transaction id\n */\nSellMutualFundTransaction.prototype.getRelatedTransactionId = function() {\n  return this.relatedTransactionId;\n};\nElement.add(SellMutualFundTransaction, {name: \"RELFITID\", order: 40, attributeType: String, readMethod: \"getRelatedTransactionId\", writeMethod: \"setRelatedTransactionId\"});\n\n\n/**\n * Sets any related transaction id for a mutual fund sale (e.g. for a mutual fund exchange).\n * This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {String} relatedTransactionId the related transaction id\n */\nSellMutualFundTransaction.prototype.setRelatedTransactionId = function(relatedTransactionId) {\n  this.relatedTransactionId = relatedTransactionId;\n};\n\n\n\n\nmodule.exports = SellMutualFundTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar ShortOptionSecurity = require(\"../positions/ShortOptionSecurity\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar BaseSellInvestmentTransaction = require(\"./BaseSellInvestmentTransaction\");\nvar TransactionType = require(\"./TransactionType\");\nvar OptionSellType = require(\"./OptionSellType\");\nvar RelatedOptionType = require(\"./RelatedOptionType\");\n\n/**\n * Transaction for selling options.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @class\n * @augments BaseSellInvestmentTransaction\n */\nfunction SellOptionTransaction () {\n  BaseSellInvestmentTransaction.call(this, TransactionType.SELL_OPTION);\n\n  /**\n   * @name SellOptionTransaction#optionSellType\n   * @type String\n   * @access private\n   */\n  this.optionSellType = null;\n\n  /**\n   * @name SellOptionTransaction#sharesPerContact\n   * @type Integer\n   * @access private\n   */\n  this.sharesPerContact = null;\n\n  /**\n   * @name SellOptionTransaction#relatedTransactionId\n   * @type String\n   * @access private\n   */\n  this.relatedTransactionId = null;\n\n  /**\n   * @name SellOptionTransaction#relatedType\n   * @type String\n   * @access private\n   */\n  this.relatedType = null;\n\n  /**\n   * @name SellOptionTransaction#secured\n   * @type String\n   * @access private\n   */\n  this.secured = null;\n}\n\ninherit(SellOptionTransaction, \"extends\", BaseSellInvestmentTransaction);\n\n\nAggregate.add(\"SELLOPT\", SellOptionTransaction);\n\n\n/**\n * Gets the type of option sale (i.e. \"SELLTOCLOSE\" or \"SELLTOOPEN\"). This is a required field\n * according to the OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {String} the option sell type\n */\nSellOptionTransaction.prototype.getOptionSellType = function() {\n  return this.optionSellType;\n};\nElement.add(SellOptionTransaction, {name: \"OPTSELLTYPE\", required: true, order: 20, attributeType: String, readMethod: \"getOptionSellType\", writeMethod: \"setOptionSellType\"});\n\n\n/**\n * Sets the type of option sale (i.e. \"SELLTOCLOSE\" or \"SELLTOOPEN\"). This is a required field\n * according to the OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {String} optionSellType the option sell type\n */\nSellOptionTransaction.prototype.setOptionSellType = function(optionSellType) {\n  this.optionSellType = optionSellType;\n};\n\n\n/**\n * Gets the option sell type as one of the well-known types.\n *\n * @return {OptionSellType} the type of sale or null if it's not known.\n */\nSellOptionTransaction.prototype.getOptionSellTypeEnum = function() {\n  return OptionSellType.fromOfx(this.optionSellType);\n};\n\n\n/**\n * Gets the number of shares per contact. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {Integer} the number of shares per contact\n */\nSellOptionTransaction.prototype.getSharesPerContact = function() {\n  return this.sharesPerContact;\n};\nElement.add(SellOptionTransaction, {name: \"SHPERCTRCT\", required: true, order: 30, attributeType: Number, readMethod: \"getSharesPerContact\", writeMethod: \"setSharesPerContact\"});\n\n\n/**\n * Sets the number of shares per contact. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {Integer} sharesPerContact the number of shares per contact\n */\nSellOptionTransaction.prototype.setSharesPerContact = function(sharesPerContact) {\n  this.sharesPerContact = sharesPerContact;\n};\n\n\n/**\n * Gets a related transaction for the option sale for complex option transactions. This\n * is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {String} The related transaction id\n */\nSellOptionTransaction.prototype.getRelatedTransactionId = function() {\n  return this.relatedTransactionId;\n};\nElement.add(SellOptionTransaction, {name: \"RELFITID\", order: 40, attributeType: String, readMethod: \"getRelatedTransactionId\", writeMethod: \"setRelatedTransactionId\"});\n\n\n/**\n * Sets a related transaction for the option sale for complex option transactions. This\n * is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {String} relatedTransactionId The related transaction id\n */\nSellOptionTransaction.prototype.setRelatedTransactionId = function(relatedTransactionId) {\n  this.relatedTransactionId = relatedTransactionId;\n};\n\n\n/**\n * Gets the type for the related transaction. One of \"SPREAD\", \"STRADDLE\", \"NONE\", \"OTHER\". This\n * is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {String} The related tansaction type\n */\nSellOptionTransaction.prototype.getRelatedType = function() {\n  return this.relatedType;\n};\nElement.add(SellOptionTransaction, {name: \"RELTYPE\", order: 50, attributeType: String, readMethod: \"getRelatedType\", writeMethod: \"setRelatedType\"});\n\n\n/**\n * Sets the type for the related transaction. One of \"SPREAD\", \"STRADDLE\", \"NONE\", \"OTHER\". This\n * is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {String} relatedType The related tansaction type\n */\nSellOptionTransaction.prototype.setRelatedType = function(relatedType) {\n  this.relatedType = relatedType;\n};\n\n\n/**\n * Gets the related transaction as one of the well-known types.\n *\n * @return {RelatedOptionType} the related tansaction type or null if it's not well known\n */\nSellOptionTransaction.prototype.getRelatedTypeEnum = function() {\n  return RelatedOptionType.fromOfx(this.getRelatedType());\n};\n\n\n/**\n * Gets how the option sale is secured. One of \"NAKED\" or \"COVERED\". This is an optional field\n * according to the OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {String} how the option sale is secured\n */\nSellOptionTransaction.prototype.getSecured = function() {\n  return this.secured;\n};\nElement.add(SellOptionTransaction, {name: \"SECURED\", order: 60, attributeType: String, readMethod: \"getSecured\", writeMethod: \"setSecured\"});\n\n\n/**\n * Sets how the option sale is secured. One of \"NAKED\" or \"COVERED\". This is an optional field\n * according to the OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {String} secured how the option sale is secured\n */\nSellOptionTransaction.prototype.setSecured = function(secured) {\n  this.secured = secured;\n};\n\n\n/**\n * Gets how the option sale is secured as one of the well-known types.\n *\n * @return {ShortOptionSecurity} the type indicating how the option is secured or null if it's not well known.\n */\nSellOptionTransaction.prototype.getSecuredEnum = function() {\n  return  ShortOptionSecurity.fromOfx(this.getSecured());\n};\n\n\n\n\nmodule.exports = SellOptionTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar BaseSellInvestmentTransaction = require(\"./BaseSellInvestmentTransaction\");\nvar TransactionType = require(\"./TransactionType\");\n\n/**\n * Transaction for buying other types of securities.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @class\n * @augments BaseSellInvestmentTransaction\n */\nfunction SellOtherTransaction () {\n  BaseSellInvestmentTransaction.call(this, TransactionType.SELL_OTHER);\n}\n\ninherit(SellOtherTransaction, \"extends\", BaseSellInvestmentTransaction);\n\n\nAggregate.add(\"SELLOTHER\", SellOtherTransaction);\n\n\nmodule.exports = SellOtherTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar BaseSellInvestmentTransaction = require(\"./BaseSellInvestmentTransaction\");\nvar TransactionType = require(\"./TransactionType\");\nvar SellType = require(\"./SellType\");\n\n/**\n * Transaction for selling stock.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @class\n * @augments BaseSellInvestmentTransaction\n */\nfunction SellStockTransaction () {\n  BaseSellInvestmentTransaction.call(this, TransactionType.SELL_STOCK);\n\n  /**\n   * @name SellStockTransaction#sellType\n   * @type String\n   * @access private\n   */\n  this.sellType = null;\n}\n\ninherit(SellStockTransaction, \"extends\", BaseSellInvestmentTransaction);\n\n\nAggregate.add(\"SELLSTOCK\", SellStockTransaction);\n\n\n/**\n * Gets the type of stock sale (i.e. \"SELL\" or \"SELLSHORT\"). This is a required field\n * according to the OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {String} the sell type\n */\nSellStockTransaction.prototype.getSellType = function() {\n  return this.sellType;\n};\nElement.add(SellStockTransaction, {name: \"SELLTYPE\", required: true, order: 20, attributeType: String, readMethod: \"getSellType\", writeMethod: \"setSellType\"});\n\n\n/**\n * Sets the type of stock sale (i.e. \"SELL\" or \"SELLSHORT\"). This is a required field\n * according to the OFX spec.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {String} sellType the sell type\n */\nSellStockTransaction.prototype.setSellType = function(sellType) {\n  this.sellType = sellType;\n};\n\n\n/**\n * Gets the sell type as one of the well-known types.\n *\n * @return {SellType} the type of sale or null if it's not known\n */\nSellStockTransaction.prototype.getSellTypeEnum = function() {\n  return SellType.fromOfx(this.sellType);\n};\n\n\n\n\nmodule.exports = SellStockTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Type of sale for stocks and mutual funds.\n *\n * @enum\n */\nvar SellType = {\n  SELL: \"SELL\",\n  SELL_SHORT: \"SELLSHORT\",\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"SELL\" === ofxVal) {\n      return SellType.SELL;\n    } else if (\"SELLSHORT\" === ofxVal) {\n      return SellType.SELL_SHORT;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = SellType;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar SubAccountType = require(\"../accounts/SubAccountType\");\nvar Inv401KSource = require(\"../positions/Inv401KSource\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar BaseOtherInvestmentTransaction = require(\"./BaseOtherInvestmentTransaction\");\nvar TransactionType = require(\"./TransactionType\");\nvar SecurityId = require(\"../../seclist/SecurityId\");\nvar OriginalCurrency = require(\"./OriginalCurrency\");\n\n/**\n * Transaction for a stock split.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @class\n * @augments BaseOtherInvestmentTransaction\n */\nfunction SplitTransaction () {\n  BaseOtherInvestmentTransaction.call(this, TransactionType.SPLIT);\n\n  /**\n   * @name SplitTransaction#securityId\n   * @type SecurityId\n   * @access private\n   */\n  this.securityId = null;\n\n  /**\n   * @name SplitTransaction#subAccountSecurity\n   * @type String\n   * @access private\n   */\n  this.subAccountSecurity = null;\n\n  /**\n   * @name SplitTransaction#oldUnits\n   * @type Double\n   * @access private\n   */\n  this.oldUnits = null;\n\n  /**\n   * @name SplitTransaction#newUnits\n   * @type Double\n   * @access private\n   */\n  this.newUnits = null;\n\n  /**\n   * @name SplitTransaction#numerator\n   * @type Double\n   * @access private\n   */\n  this.numerator = null;\n\n  /**\n   * @name SplitTransaction#denominator\n   * @type Double\n   * @access private\n   */\n  this.denominator = null;\n\n  /**\n   * @name SplitTransaction#currencyCode\n   * @type String\n   * @access private\n   */\n  this.currencyCode = null;\n\n  /**\n   * @name SplitTransaction#originalCurrencyInfo\n   * @type OriginalCurrency\n   * @access private\n   */\n  this.originalCurrencyInfo = null;\n\n  /**\n   * @name SplitTransaction#cashForFractionalUnits\n   * @type Double\n   * @access private\n   */\n  this.cashForFractionalUnits = null;\n\n  /**\n   * @name SplitTransaction#subAccountFund\n   * @type String\n   * @access private\n   */\n  this.subAccountFund = null;\n\n  /**\n   * @name SplitTransaction#inv401kSource\n   * @type String\n   * @access private\n   */\n  this.inv401kSource = null;\n}\n\ninherit(SplitTransaction, \"extends\", BaseOtherInvestmentTransaction);\n\n\nAggregate.add(\"SPLIT\", SplitTransaction);\n\n\n/**\n * Gets the id of the security for the split. This is a required field according to the OFX\n * spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {SecurityId} the security id of the security for the expsense\n */\nSplitTransaction.prototype.getSecurityId = function() {\n  return this.securityId;\n};\nChildAggregate.add(SplitTransaction, {required: true, order: 20, attributeType: SecurityId, readMethod: \"getSecurityId\", writeMethod: \"setSecurityId\"});\n\n\n/**\n * Sets the id of the security for the split. This is a required field according to the OFX\n * spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {SecurityId} securityId the security id of the security for the expsense\n */\nSplitTransaction.prototype.setSecurityId = function(securityId) {\n  this.securityId = securityId;\n};\n\n\n/**\n * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER). This is a\n * required field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the sub account type\n */\nSplitTransaction.prototype.getSubAccountSecurity = function() {\n  return this.subAccountSecurity;\n};\nElement.add(SplitTransaction, {name: \"SUBACCTSEC\", order: 30, attributeType: String, readMethod: \"getSubAccountSecurity\", writeMethod: \"setSubAccountSecurity\"});\n\n\n/**\n * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER). This is a\n * required field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} subAccountSecurity the sub account type\n */\nSplitTransaction.prototype.setSubAccountSecurity = function(subAccountSecurity) {\n  this.subAccountSecurity = subAccountSecurity;\n};\n\n\n/**\n * Gets the result of getSubAccountSecurity as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types.\n */\nSplitTransaction.prototype.getSubAccountSecurityEnum = function() {\n  return SubAccountType.fromOfx(this.getSubAccountSecurity());\n};\n\n\n/**\n * Gets the old number of units for the split. This is a required field according to the OFX\n * spec.\n *\n * @return {Double} the old number of units.\n */\nSplitTransaction.prototype.getOldUnits = function() {\n  return this.oldUnits;\n};\nElement.add(SplitTransaction, {name: \"OLDUNITS\", order: 40, attributeType: Number, readMethod: \"getOldUnits\", writeMethod: \"setOldUnits\"});\n\n\n/**\n * Sets the old number of units for the split. This is a  equired field according to the OFX\n * spec.\n *\n * @param {Double} oldUnits the old number of units.\n */\nSplitTransaction.prototype.setOldUnits = function(oldUnits) {\n  this.oldUnits = oldUnits;\n};\n\n\n/**\n * Gets the new number of units for the split. This is a required field according to the OFX\n * spec.\n *\n * @return {Double} the new number of units.\n */\nSplitTransaction.prototype.getNewUnits = function() {\n  return this.newUnits;\n};\nElement.add(SplitTransaction, {name: \"NEWUNITS\", order: 50, attributeType: Number, readMethod: \"getNewUnits\", writeMethod: \"setNewUnits\"});\n\n\n/**\n * Sets the new number of units for the split. This is a required field according to the OFX\n * spec.\n *\n * @param {Double} newUnits the new number of units.\n */\nSplitTransaction.prototype.setNewUnits = function(newUnits) {\n  this.newUnits = newUnits;\n};\n\n\n/**\n * Gets the numerator for the split ratio. This is a required field according to the OFX spec.\n *\n * @return {Double} the numerator for the split ratio\n */\nSplitTransaction.prototype.getNumerator = function() {\n  return this.numerator;\n};\nElement.add(SplitTransaction, {name: \"NUMERATOR\", order: 60, attributeType: Number, readMethod: \"getNumerator\", writeMethod: \"setNumerator\"});\n\n\n/**\n * Sets the numerator for the split ratio. This is a required field according to the OFX spec.\n *\n * @param {Double} numerator the numerator for the split ratio\n */\nSplitTransaction.prototype.setNumerator = function(numerator) {\n  this.numerator = numerator;\n};\n\n\n/**\n * Gets the denominator for the split ratio. This is a required field according to the OFX spec.\n *\n * @return {Double} the numerator for the split ratio\n */\nSplitTransaction.prototype.getDenominator = function() {\n  return this.denominator;\n};\nElement.add(SplitTransaction, {name: \"DENOMINATOR\", order: 70, attributeType: Number, readMethod: \"getDenominator\", writeMethod: \"setDenominator\"});\n\n\n/**\n * Sets the denominator for the split ratio. This is a required field according to the OFX spec.\n *\n * @param {Double} denominator the numerator for the split ratio\n */\nSplitTransaction.prototype.setDenominator = function(denominator) {\n  this.denominator = denominator;\n};\n\n\n/**\n * Gets the currency code for the transaction. Only one of currency code or original currency\n * code should be set according to the OFX spec. If neither are set, means the default currency.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the currency code for the transaction\n */\nSplitTransaction.prototype.getCurrencyCode = function() {\n  return this.currencyCode;\n};\nElement.add(SplitTransaction, {name: \"CURRENCY\", order: 80, attributeType: String, readMethod: \"getCurrencyCode\", writeMethod: \"setCurrencyCode\"});\n\n\n/**\n * sets the currency code for the transaction. Only one of currency code or original currency\n * code should be set according to the OFX spec. If neither are set, means the default currency.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {void} the currency code for the transaction\n */\nSplitTransaction.prototype.setCurrencyCode = function(/*String*/ currencyCode) {\n  this.currencyCode = currencyCode;\n  this.originalCurrencyInfo = null;\n};\n\n\n/**\n * Gets the original currency info for the transaction.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {OriginalCurrency} the original currency info for the transaction\n */\nSplitTransaction.prototype.getOriginalCurrencyInfo = function() {\n  return this.originalCurrencyInfo;\n};\nElement.add(SplitTransaction, {name: \"ORIGCURRENCY\", order: 90, attributeType: OriginalCurrency, readMethod: \"getOriginalCurrencyInfo\", writeMethod: \"setOriginalCurrencyInfo\"});\n\n\n/**\n * Sets the original currency info for the transaction.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {void} the original currency info for the transaction\n */\nSplitTransaction.prototype.setOriginalCurrencyInfo = function(/*OriginalCurrency*/ originalCurrencyInfo) {\n  this.originalCurrencyInfo = originalCurrencyInfo;\n  this.currencyCode = null;\n};\n\n\n/**\n * Gets the cash for fractional units.\n *\n * @return {Double} the cash for fractional units\n */\nSplitTransaction.prototype.getCashForFractionalUnits = function() {\n  return this.cashForFractionalUnits;\n};\nElement.add(SplitTransaction, {name: \"FRACCASH\", order: 100, attributeType: Number, readMethod: \"getCashForFractionalUnits\", writeMethod: \"setCashForFractionalUnits\"});\n\n\n/**\n * Sets the cash for fractional units.\n *\n * @param {Double} cashForFractionalUnits the cash for fractional units\n */\nSplitTransaction.prototype.setCashForFractionalUnits = function(cashForFractionalUnits) {\n  this.cashForFractionalUnits = cashForFractionalUnits;\n};\n\n\n/**\n * Gets the sub account type for the fund. (e.g. CASH, MARGIN, SHORT, OTHER).\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the sub account fund\n */\nSplitTransaction.prototype.getSubAccountFund = function() {\n  return this.subAccountFund;\n};\nElement.add(SplitTransaction, {name: \"SUBACCTFUND\", order: 110, attributeType: String, readMethod: \"getSubAccountFund\", writeMethod: \"setSubAccountFund\"});\n\n\n/**\n * Sets the sub account type for the fund. (e.g. CASH, MARGIN, SHORT, OTHER).\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} subAccountFund the sub account fund\n */\nSplitTransaction.prototype.setSubAccountFund = function(subAccountFund) {\n  this.subAccountFund = subAccountFund;\n};\n\n\n/**\n * Gets the result of getSubAccountFund as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types\n */\nSplitTransaction.prototype.getSubAccountFundEnum = function() {\n  return SubAccountType.fromOfx(this.getSubAccountFund());\n};\n\n\n/**\n * Gets the 401K source for the transaction. Should be one of \"PRETAX\", \"AFTERTAX\", \"MATCH\",\n * \"PROFITSHARING\", \"ROLLOVER\", \"OTHERVEST\", \"OTHERNONVEST\".  This is an optional field\n * according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the 401k source\n */\nSplitTransaction.prototype.get401kSource = function() {\n  return this.inv401kSource;\n};\nElement.add(SplitTransaction, {name: \"INV401KSOURCE\", order: 120, attributeType: String, readMethod: \"get401kSource\", writeMethod: \"set401kSource\"});\n\n\n/**\n * Sets the 401K source for the transaction. Should be one of \"PRETAX\", \"AFTERTAX\", \"MATCH\",\n * \"PROFITSHARING\", \"ROLLOVER\", \"OTHERVEST\", \"OTHERNONVEST\".  This is an optional field\n * according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} inv401kSource the 401k source\n */\nSplitTransaction.prototype.set401kSource = function(inv401kSource) {\n  this.inv401kSource = inv401kSource;\n};\n\n\n/**\n * Gets the 401k source as one of the well-known types.\n *\n * @return {Inv401KSource} the 401k source or null if its not one of the well-known types\n */\nSplitTransaction.prototype.get401kSourceEnum = function() {\n  return Inv401KSource.fromOfx(this.get401kSource());\n};\n\n\n\n\nmodule.exports = SplitTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Type of investment transaction.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @enum\n */\nvar TransactionType = {\n\n  BUY_DEBT: \"BUY_DEBT\",\n  BUY_MUTUAL_FUND: \"BUY_MUTUAL_FUND\",\n  BUY_OPTION: \"BUY_OPTION\",\n  BUY_OTHER: \"BUY_OTHER\",\n  BUY_STOCK: \"BUY_STOCK\",\n  CLOSE_OPTION: \"CLOSE_OPTION\",\n  INCOME: \"INCOME\",\n  INVESTMENT_EXPENSE: \"INVESTMENT_EXPENSE\",\n  JOURNAL_FUND: \"JOURNAL_FUND\",\n  JOURNAL_SECURITY: \"JOURNAL_SECURITY\",\n  MARGIN_INTEREST: \"MARGIN_INTEREST\",\n  REINVEST_INCOME: \"REINVEST_INCOME\",\n  RETURN_OF_CAPITAL: \"RETURN_OF_CAPITAL\",\n  SELL_DEBT: \"SELL_DEBT\",\n  SELL_MUTUAL_FUND: \"SELL_MUTUAL_FUND\",\n  SELL_OPTION: \"SELL_OPTION\",\n  SELL_OTHER: \"SELL_OTHER\",\n  SELL_STOCK: \"SELL_STOCK\",\n  SPLIT: \"SPLIT\",\n  TRANSFER: \"TRANSFER\",\n};\n\n\nmodule.exports = TransactionType;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Interface for transactions that have a security associated with them.\n *\n * @class\n */\nfunction TransactionWithSecurity() {\n}\n\n/**\n * Gets the security for the transaction.\n *\n * @return {SecurityId} the security id for the transaction\n */\nTransactionWithSecurity.prototype.getSecurityId = function() { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = TransactionWithSecurity;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Type of transfer.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @enum\n */\nvar TransferAction = {\n  IN: \"IN\",\n  OUT: \"OUT\",\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"IN\" === ofxVal) {\n      return TransferAction.IN;\n    } else if (\"OUT\" === ofxVal) {\n      return TransferAction.OUT;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = TransferAction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar SubAccountType = require(\"../accounts/SubAccountType\");\nvar Inv401KSource = require(\"../positions/Inv401KSource\");\nvar PositionType = require(\"../positions/PositionType\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar BaseOtherInvestmentTransaction = require(\"./BaseOtherInvestmentTransaction\");\nvar TransactionType = require(\"./TransactionType\");\nvar TransferAction = require(\"./TransferAction\");\nvar SecurityId = require(\"../../seclist/SecurityId\");\n\n/**\n * Transaction for transfers.\n * See \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @class\n * @augments BaseOtherInvestmentTransaction\n */\nfunction TransferInvestmentTransaction () {\n  // TODO (jonp) -- INVACCTFROM\n  BaseOtherInvestmentTransaction.call(this, TransactionType.TRANSFER);\n\n  /**\n   * @name TransferInvestmentTransaction#securityId\n   * @type SecurityId\n   * @access private\n   */\n  this.securityId = null;\n\n  /**\n   * @name TransferInvestmentTransaction#subAccountSecurity\n   * @type String\n   * @access private\n   */\n  this.subAccountSecurity = null;\n\n  /**\n   * @name TransferInvestmentTransaction#units\n   * @type Double\n   * @access private\n   */\n  this.units = null;\n\n  /**\n   * @name TransferInvestmentTransaction#transferAction\n   * @type String\n   * @access private\n   */\n  this.transferAction = null;\n\n  /**\n   * @name TransferInvestmentTransaction#positionType\n   * @type String\n   * @access private\n   */\n  this.positionType = null;\n\n  /**\n   * @name TransferInvestmentTransaction#averageCostBasis\n   * @type Double\n   * @access private\n   */\n  this.averageCostBasis = null;\n\n  /**\n   * @name TransferInvestmentTransaction#unitPrice\n   * @type Double\n   * @access private\n   */\n  this.unitPrice = null;\n\n  /**\n   * @name TransferInvestmentTransaction#purchaseDate\n   * @type Date\n   * @access private\n   */\n  this.purchaseDate = null;\n\n  /**\n   * @name TransferInvestmentTransaction#inv401kSource\n   * @type String\n   * @access private\n   */\n  this.inv401kSource = null;\n}\n\ninherit(TransferInvestmentTransaction, \"extends\", BaseOtherInvestmentTransaction);\n\n\nAggregate.add(\"TRANSFER\", TransferInvestmentTransaction);\n\n\n/**\n * Gets the id of the security that was transferred. This is a required field according to the OFX\n * spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {SecurityId} the security id of the security that was transferred\n */\nTransferInvestmentTransaction.prototype.getSecurityId = function() {\n  return this.securityId;\n};\nChildAggregate.add(TransferInvestmentTransaction, {required: true, order: 20, attributeType: SecurityId, readMethod: \"getSecurityId\", writeMethod: \"setSecurityId\"});\n\n\n/**\n * Sets the id of the security that was transferred. This is a required field according to the OFX\n * spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {SecurityId} securityId the security id of the security that was transferred\n */\nTransferInvestmentTransaction.prototype.setSecurityId = function(securityId) {\n  this.securityId = securityId;\n};\n\n\n/**\n  * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).\n  * See \"Section 13.9.2.4.3, OFX Spec\"\n  *\n  * @return {String} the sub account type\n  */\nTransferInvestmentTransaction.prototype.getSubAccountSecurity = function() {\n  return this.subAccountSecurity;\n};\nElement.add(TransferInvestmentTransaction, {name: \"SUBACCTSEC\", order: 30, attributeType: String, readMethod: \"getSubAccountSecurity\", writeMethod: \"setSubAccountSecurity\"});\n\n\n/**\n  * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).\n  * See \"Section 13.9.2.4.3, OFX Spec\"\n  *\n  * @param {String} subAccountSecurity the sub account type\n  */\nTransferInvestmentTransaction.prototype.setSubAccountSecurity = function(subAccountSecurity) {\n   this.subAccountSecurity = subAccountSecurity;\n };\n\n\n/**\n * Gets the result of getSubAccountSecurity as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types.\n */\nTransferInvestmentTransaction.prototype.getSubAccountSecurityEnum = function() {\n  return SubAccountType.fromOfx(this.getSubAccountSecurity());\n};\n\n\n/**\n * Gets the number of units of the security that was transferred. For security-based actions other\n * than stock splits, this is the quantity bought. For stocks, mutual funds, and others, this\n * is the number of shares. For bonds, this is the face value. For options, this is the number of\n * contacts. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the number of units transferred\n */\nTransferInvestmentTransaction.prototype.getUnits = function() {\n  return this.units;\n};\nElement.add(TransferInvestmentTransaction, {name: \"UNITS\", required: true, order: 40, attributeType: Number, readMethod: \"getUnits\", writeMethod: \"setUnits\"});\n\n\n/**\n * Sets the number of units of the security that was transferred. For security-based actions other\n * than stock splits, this is the quantity bought. For stocks, mutual funds, and others, this\n * is the number of shares. For bonds, this is the face value. For options, this is the number of\n * contacts. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} units the number of units transferred\n */\nTransferInvestmentTransaction.prototype.setUnits = function(units) {\n  this.units = units;\n};\n\n\n/**\n * Gets the type of transfer. One of \"IN\" or \"OUT\". This is a required field according to the\n * OFX spec.\n *\n * @return {String} the type of transfer\n */\nTransferInvestmentTransaction.prototype.getTransferAction = function() {\n  return this.transferAction;\n};\nElement.add(TransferInvestmentTransaction, {name: \"TFERACTION\", required: true, order: 50, attributeType: String, readMethod: \"getTransferAction\", writeMethod: \"setTransferAction\"});\n\n\n/**\n * Sets the type of transfer. One of \"IN\" or \"OUT\". This is a required field according to the\n * OFX spec.\n *\n * @param {String} transferAction the type of transfer\n */\nTransferInvestmentTransaction.prototype.setTransferAction = function(transferAction) {\n  this.transferAction = transferAction;\n};\n\n\n/**\n * Gets the transfer action as one of the well-known types.\n *\n * @return {TransferAction} the type of transfer or null if it's not well known\n */\nTransferInvestmentTransaction.prototype.getTransferActionEnum = function() {\n  return TransferAction.fromOfx(this.getTransferAction());\n};\n\n\n/**\n * Gets the type of position. One of \"LONG\" or \"SHORT\". This is a required field according to the\n * OFX spec.\n *\n * @return {String} the position type\n */\nTransferInvestmentTransaction.prototype.getPositionType = function() {\n  return this.positionType;\n};\nElement.add(TransferInvestmentTransaction, {name: \"POSTYPE\", required: true, order: 60, attributeType: String, readMethod: \"getPositionType\", writeMethod: \"setPositionType\"});\n\n\n/**\n * Sets the type of position. One of \"LONG\" or \"SHORT\". This is a required field according to the\n * OFX spec.\n *\n * @param {String} positionType the position type\n */\nTransferInvestmentTransaction.prototype.setPositionType = function(positionType) {\n  this.positionType = positionType;\n};\n\n\n/**\n * Gets the position type as one of the well-known types.\n *\n * @return {PositionType} the position type or null if it's not well known\n */\nTransferInvestmentTransaction.prototype.getPositionTypeEnum = function() {\n  return PositionType.fromOfx(this.getPositionType());\n};\n\n\n/**\n * Gets the average cost basis for the securities being transfered. This is an optional field\n * according to the ofx spec.\n *\n * @return {Double} the average cost basis\n */\nTransferInvestmentTransaction.prototype.getAverageCostBasis = function() {\n  return this.averageCostBasis;\n};\nElement.add(TransferInvestmentTransaction, {name: \"AVGCOSTBASIS\", order: 70, attributeType: Number, readMethod: \"getAverageCostBasis\", writeMethod: \"setAverageCostBasis\"});\n\n\n/**\n * Sets the average cost basis for the securities being transfered. This is an optional field\n * according to the ofx spec.\n *\n * @param {Double} averageCostBasis the average cost basis\n */\nTransferInvestmentTransaction.prototype.setAverageCostBasis = function(averageCostBasis) {\n  this.averageCostBasis = averageCostBasis;\n};\n\n\n/**\n * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the\n * share price. For bonds, this is the percentage of par. For options, this is the per share (not\n * per contact) price. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the per unit price\n */\nTransferInvestmentTransaction.prototype.getUnitPrice = function() {\n  return this.unitPrice;\n};\nElement.add(TransferInvestmentTransaction, {name: \"UNITPRICE\", required: true, order: 80, attributeType: Number, readMethod: \"getUnitPrice\", writeMethod: \"setUnitPrice\"});\n\n\n/**\n * Sets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the\n * share price. For bonds, this is the percentage of par. For options, this is the per share (not\n * per contact) price. This is a required field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} unitPrice the per unit price\n */\nTransferInvestmentTransaction.prototype.setUnitPrice = function(unitPrice) {\n  this.unitPrice = unitPrice;\n};\n\n\n/**\n * Gets the original date of purchase for the securities. This is an optional field according to\n * the ofx spec.\n *\n * @return {Date} the original date of purchase\n */\nTransferInvestmentTransaction.prototype.getPurchaseDate = function() {\n  return this.purchaseDate;\n};\nElement.add(TransferInvestmentTransaction, {name: \"DTPURCHASE\", order: 90, attributeType: Date, readMethod: \"getPurchaseDate\", writeMethod: \"setPurchaseDate\"});\n\n\n/**\n * Sets the original date of purchase for the securities. This is an optional field according to\n * the ofx spec.\n *\n * @param {Date} purchaseDate the original date of purchase\n */\nTransferInvestmentTransaction.prototype.setPurchaseDate = function(purchaseDate) {\n  this.purchaseDate = purchaseDate;\n};\n\n\n/**\n * Gets the 401K source for the transfer. Should be one of \"PRETAX\", \"AFTERTAX\", \"MATCH\",\n * \"PROFITSHARING\", \"ROLLOVER\", \"OTHERVEST\", \"OTHERNONVEST\".  This is an optional field\n * according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the state withholding\n */\nTransferInvestmentTransaction.prototype.get401kSource = function() {\n  return this.inv401kSource;\n};\nElement.add(TransferInvestmentTransaction, {name: \"INV401KSOURCE\", order: 100, attributeType: String, readMethod: \"get401kSource\", writeMethod: \"set401kSource\"});\n\n\n/**\n * Sets the 401K source for the transfer. Should be one of \"PRETAX\", \"AFTERTAX\", \"MATCH\",\n * \"PROFITSHARING\", \"ROLLOVER\", \"OTHERVEST\", \"OTHERNONVEST\".  This is an optional field\n * according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} inv401kSource the state withholding\n */\nTransferInvestmentTransaction.prototype.set401kSource = function(inv401kSource) {\n  this.inv401kSource = inv401kSource;\n};\n\n\n/**\n * Gets the 401(k) source as one of the well-known types.\n *\n * @return {Inv401KSource} the type of close or null if it's not well known.\n */\nTransferInvestmentTransaction.prototype.get401kSourceEnum = function() {\n  return Inv401KSource.fromOfx(this.get401kSource());\n};\n\n\n\n\nmodule.exports = TransferInvestmentTransaction;\n","\"use strict\";\n\nmodule.exports = {\n  BaseBuyInvestmentTransaction: require(\"./BaseBuyInvestmentTransaction\"),\n  BaseInvestmentTransaction: require(\"./BaseInvestmentTransaction\"),\n  BaseOtherInvestmentTransaction: require(\"./BaseOtherInvestmentTransaction\"),\n  BaseSellInvestmentTransaction: require(\"./BaseSellInvestmentTransaction\"),\n  BuyDebtTransaction: require(\"./BuyDebtTransaction\"),\n  BuyInvestmentTransaction: require(\"./BuyInvestmentTransaction\"),\n  BuyMutualFundTransaction: require(\"./BuyMutualFundTransaction\"),\n  BuyOptionTransaction: require(\"./BuyOptionTransaction\"),\n  BuyOtherTransaction: require(\"./BuyOtherTransaction\"),\n  BuyStockTransaction: require(\"./BuyStockTransaction\"),\n  BuyType: require(\"./BuyType\"),\n  CloseOptionAction: require(\"./CloseOptionAction\"),\n  CloseOptionTransaction: require(\"./CloseOptionTransaction\"),\n  IncomeTransaction: require(\"./IncomeTransaction\"),\n  IncomeType: require(\"./IncomeType\"),\n  InvestmentBankTransaction: require(\"./InvestmentBankTransaction\"),\n  InvestmentExpenseTransaction: require(\"./InvestmentExpenseTransaction\"),\n  InvestmentTransaction: require(\"./InvestmentTransaction\"),\n  InvestmentTransactionList: require(\"./InvestmentTransactionList\"),\n  JournalFundTransaction: require(\"./JournalFundTransaction\"),\n  JournalSecurityTransaction: require(\"./JournalSecurityTransaction\"),\n  MarginInterestTransaction: require(\"./MarginInterestTransaction\"),\n  OptionBuyType: require(\"./OptionBuyType\"),\n  OptionSellType: require(\"./OptionSellType\"),\n  OriginalCurrency: require(\"./OriginalCurrency\"),\n  ReinvestIncomeTransaction: require(\"./ReinvestIncomeTransaction\"),\n  RelatedOptionType: require(\"./RelatedOptionType\"),\n  ReturnOfCapitalTransaction: require(\"./ReturnOfCapitalTransaction\"),\n  SellDebtReason: require(\"./SellDebtReason\"),\n  SellDebtTransaction: require(\"./SellDebtTransaction\"),\n  SellInvestmentTransaction: require(\"./SellInvestmentTransaction\"),\n  SellMutualFundTransaction: require(\"./SellMutualFundTransaction\"),\n  SellOptionTransaction: require(\"./SellOptionTransaction\"),\n  SellOtherTransaction: require(\"./SellOtherTransaction\"),\n  SellStockTransaction: require(\"./SellStockTransaction\"),\n  SellType: require(\"./SellType\"),\n  SplitTransaction: require(\"./SplitTransaction\"),\n  TransactionType: require(\"./TransactionType\"),\n  TransactionWithSecurity: require(\"./TransactionWithSecurity\"),\n  TransferAction: require(\"./TransferAction\"),\n  TransferInvestmentTransaction: require(\"./TransferInvestmentTransaction\"),\n};\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar VersionSpecificMessageSetInfo = require(\"./VersionSpecificMessageSetInfo\");\n\n/**\n * Information about a message set.\n *\n * @class\n * See \"Section 7.2.1, OFX Spec\"\n */\nfunction AbstractMessageSetInfo () {\n\n  /**\n   * @name AbstractMessageSetInfo#versionSpecificInformationList\n   * @type VersionSpecificMessageSetInfo[]\n   * @access private\n   */\n  this.versionSpecificInformationList = null;\n}\n\n\n\n\n\n/**\n * List of information about a message set for each version supported.\n *\n * @return {VersionSpecificMessageSetInfo[]} List of information about a message set for each version supported.\n */\nAbstractMessageSetInfo.prototype.getVersionSpecificInformationList = function() {\n  return this.versionSpecificInformationList;\n};\nChildAggregate.add(AbstractMessageSetInfo, {order: 0, attributeType: Array, collectionEntryType: VersionSpecificMessageSetInfo, readMethod: \"getVersionSpecificInformationList\", writeMethod: \"setVersionSpecificInformationList\"});\n\n\n/**\n * List of information about a message set for each version supported.\n *\n * @param {VersionSpecificMessageSetInfo[]} versionSpecificInformationList List of information about a message set for each version supported.\n */\nAbstractMessageSetInfo.prototype.setVersionSpecificInformationList = function(versionSpecificInformationList) {\n  this.versionSpecificInformationList = versionSpecificInformationList;\n};\n\n\n\n\nmodule.exports = AbstractMessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * @enum\n * See \"Section 7.2.2, OFX Spec\"\n */\nvar CharacterType = {\n\n  ALPHAONLY: \"ALPHAONLY\",\n\n  NUMERICONLY: \"NUMERICONLY\",\n\n  ALPHAORNUMERIC: \"ALPHAORNUMERIC\",\n\n  ALPHAANDNUMERIC: \"ALPHAANDNUMERIC\"\n};\n\n\nmodule.exports = CharacterType;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * @enum\n * See \"Section 7.1.5, OFX Spec\"\n */\nvar ClientRoutingCapability = {\n\n  NONE: \"NONE\",\n\n  SERVICE: \"SERVICE\",\n\n  MESSAGE_SET: \"MSGSET\",\n};\n\n\nmodule.exports = ClientRoutingCapability;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar ApplicationSecurity = require(\"../ApplicationSecurity\");\nvar SynchronizationCapability = require(\"./SynchronizationCapability\");\n\n/**\n * Core information about a specific version of a specific message set.\n *\n * @class\n * See \"Section 7.2.1, OFX Spec\"\n */\nfunction CoreMessageSetInfo () {\n\n  /**\n   * @name CoreMessageSetInfo#version\n   * @type String\n   * @access private\n   */\n  this.version = \"1\";\n\n  /**\n   * @name CoreMessageSetInfo#serviceProviderName\n   * @type String\n   * @access private\n   */\n  this.serviceProviderName = null;\n\n  /**\n   * @name CoreMessageSetInfo#url\n   * @type String\n   * @access private\n   */\n  this.url = null;\n\n  /**\n   * @name CoreMessageSetInfo#security\n   * @type ApplicationSecurity\n   * @access private\n   */\n  this.security = null;\n\n  /**\n   * @name CoreMessageSetInfo#sslRequired\n   * @type Boolean\n   * @access private\n   */\n  this.sslRequired = null;\n\n  /**\n   * @name CoreMessageSetInfo#realm\n   * @type String\n   * @access private\n   */\n  this.realm = null;\n\n  /**\n   * @name CoreMessageSetInfo#language\n   * @type String\n   * @access private\n   */\n  this.language = \"eng\";\n\n  /**\n   * @name CoreMessageSetInfo#syncCapability\n   * @type SynchronizationCapability\n   * @access private\n   */\n  this.syncCapability = null;\n\n  /**\n   * @name CoreMessageSetInfo#fileBasedErrorRecoverySupport\n   * @type Boolean\n   * @access private\n   */\n  this.fileBasedErrorRecoverySupport = null;\n\n  /**\n   * @name CoreMessageSetInfo#timeout\n   * @type Integer\n   * @access private\n   */\n  this.timeout = null;\n}\n\n\n\nAggregate.add(\"MSGSETCORE\", CoreMessageSetInfo);\n\n\n/**\n * Version of the message set.\n *\n * @return {String} The version of the message set.\n */\nCoreMessageSetInfo.prototype.getVersion = function() {\n  return this.version;\n};\nElement.add(CoreMessageSetInfo, {name: \"VER\", required: true, order: 0, attributeType: String, readMethod: \"getVersion\", writeMethod: \"setVersion\"});\n\n\n/**\n * The version of the message set.\n *\n * @param {String} version The version of the message set.\n */\nCoreMessageSetInfo.prototype.setVersion = function(version) {\n  this.version = version;\n};\n\n\n/**\n * The name of the service provider (sometimes the message set processing is outsourced).\n *\n * @return {String} The name of the service provider (sometimes the message set processing is outsourced).\n */\nCoreMessageSetInfo.prototype.getServiceProviderName = function() {\n  return this.serviceProviderName;\n};\nElement.add(CoreMessageSetInfo, {name: \"SPNAME\", order: 10, attributeType: String, readMethod: \"getServiceProviderName\", writeMethod: \"setServiceProviderName\"});\n\n\n/**\n * The name of the service provider (sometimes the message set processing is outsourced).\n *\n * @param {String} serviceProviderName The name of the service provider (sometimes the message set processing is outsourced).\n */\nCoreMessageSetInfo.prototype.setServiceProviderName = function(serviceProviderName) {\n  this.serviceProviderName = serviceProviderName;\n};\n\n\n/**\n * The URL at which the message set is processed.\n *\n * @return {String} The URL at which the message set is processed.\n */\nCoreMessageSetInfo.prototype.getUrl = function() {\n  return this.url;\n};\nElement.add(CoreMessageSetInfo, {name: \"URL\", required: true, order: 20, attributeType: String, readMethod: \"getUrl\", writeMethod: \"setUrl\"});\n\n\n/**\n * The URL at which the message set is processed.\n *\n * @param {String} url The URL at which the message set is processed.\n */\nCoreMessageSetInfo.prototype.setUrl = function(url) {\n  this.url = url;\n};\n\n\n/**\n * The application-level security required for this message set.\n *\n * @return {ApplicationSecurity} The application-level security required for this message set.\n */\nCoreMessageSetInfo.prototype.getSecurity = function() {\n  return this.security;\n};\nElement.add(CoreMessageSetInfo, {name: \"OFXSEC\", required: true, order: 30, attributeType: ApplicationSecurity, readMethod: \"getSecurity\", writeMethod: \"setSecurity\"});\n\n\n/**\n * The application-level security required for this message set.\n *\n * @param {ApplicationSecurity} security The application-level security required for this message set.\n */\nCoreMessageSetInfo.prototype.setSecurity = function(security) {\n  this.security = security;\n};\n\n\n/**\n * Whether transport-level security is required for this message set.\n *\n * @return {Boolean} Whether transport-level security is required for this message set.\n */\nCoreMessageSetInfo.prototype.getSslRequired = function() {\n  return this.sslRequired;\n};\nElement.add(CoreMessageSetInfo, {name: \"TRANSPSEC\", required: true, order: 40, attributeType: Boolean, readMethod: \"getSslRequired\", writeMethod: \"setSslRequired\"});\n\n\n/**\n * Whether transport-level security is required for this message set.\n *\n * @param {Boolean} sslRequired Whether transport-level security is required for this message set.\n */\nCoreMessageSetInfo.prototype.setSslRequired = function(sslRequired) {\n  this.sslRequired = sslRequired;\n};\n\n\n/**\n * The sign-on realm.\n *\n * @return {String} The sign-on realm.\n */\nCoreMessageSetInfo.prototype.getRealm = function() {\n  return this.realm;\n};\nElement.add(CoreMessageSetInfo, {name: \"SIGNONREALM\", required: true, order: 50, attributeType: String, readMethod: \"getRealm\", writeMethod: \"setRealm\"});\n\n\n/**\n * The sign-on realm.\n *\n * @param {String} realm The sign-on realm.\n */\nCoreMessageSetInfo.prototype.setRealm = function(realm) {\n  this.realm = realm;\n};\n\n\n/**\n * The language.\n *\n * @return {String} The language.\n * @see java.util.Locale#getISO3Language()\n */\nCoreMessageSetInfo.prototype.getLanguage = function() {\n  return this.language;\n};\nElement.add(CoreMessageSetInfo, {name: \"LANGUAGE\", required: true, order: 60, attributeType: String, readMethod: \"getLanguage\", writeMethod: \"setLanguage\"});\n\n\n/**\n * The language.\n *\n * @param {String} language The language.\n */\nCoreMessageSetInfo.prototype.setLanguage = function(language) {\n  this.language = language;\n};\n\n\n/**\n * The synchronization capability for this message set.\n *\n * @return {SynchronizationCapability} The synchronization capability for this message set.\n */\nCoreMessageSetInfo.prototype.getSyncCapability = function() {\n  return this.syncCapability;\n};\nElement.add(CoreMessageSetInfo, {name: \"SYNCMODE\", required: true, order: 70, attributeType: SynchronizationCapability, readMethod: \"getSyncCapability\", writeMethod: \"setSyncCapability\"});\n\n\n/**\n * The synchronization capability for this message set.\n *\n * @param {SynchronizationCapability} syncCapability The synchronization capability for this message set.\n */\nCoreMessageSetInfo.prototype.setSyncCapability = function(syncCapability) {\n  this.syncCapability = syncCapability;\n};\n\n\n/**\n * Whether there exists support for resposne-file based error recovery.\n *\n * @return {Boolean} Whether there exists support for resposne-file based error recovery.\n */\nCoreMessageSetInfo.prototype.getFileBasedErrorRecoverySupport = function() {\n  return this.fileBasedErrorRecoverySupport;\n};\nElement.add(CoreMessageSetInfo, {name: \"RESPFILEER\", required: true, order: 80, attributeType: Boolean, readMethod: \"getFileBasedErrorRecoverySupport\", writeMethod: \"setFileBasedErrorRecoverySupport\"});\n\n\n/**\n * Whether there exists support for resposne-file based error recovery.\n *\n * @param {Boolean} fileBasedErrorRecoverySupport Whether there exists support for resposne-file based error recovery.\n */\nCoreMessageSetInfo.prototype.setFileBasedErrorRecoverySupport = function(fileBasedErrorRecoverySupport) {\n  this.fileBasedErrorRecoverySupport = fileBasedErrorRecoverySupport;\n};\n\n\n/**\n * Gets the \"INTU.TIMEOUT\" field. There's no public documentation of this field but E*TRADE sends\n * it. It likely is some type of timeout in seconds.\n *\n * @return {Integer} the \"INTU.TIMEOUT\" property\n */\nCoreMessageSetInfo.prototype.getIntuTimeout = function() {\n  return this.timeout;\n};\nElement.add(CoreMessageSetInfo, {name: \"INTU.TIMEOUT\", order: 90, attributeType: Number, readMethod: \"getIntuTimeout\", writeMethod: \"setIntuTimeout\"});\n\n\n/**\n * Sets the \"INTU.TIMEOUT\" field. There's no public documentation of this field but E*TRADE sends\n * it. It likely is some type of timeout in seconds.\n *\n * @param {Integer} timeout the \"INTU.TIMEOUT\" property\n */\nCoreMessageSetInfo.prototype.setIntuTimeout = function(timeout) {\n  this.timeout = timeout;\n};\n\n\n\n\nmodule.exports = CoreMessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar AbstractMessageSetInfo = require(\"./AbstractMessageSetInfo\");\n\n/**\n * @class\n * See \"Section 7.2, OFX Spec\"\n */\nfunction MessageSetInfoList () {\n\n  /**\n   * @name MessageSetInfoList#informationList\n   * @type AbstractMessageSetInfo[]\n   * @access private\n   */\n  this.informationList = null;\n}\n\n\n\nAggregate.add(\"MSGSETLIST\", MessageSetInfoList);\n\n\n/**\n * The list of information for each message set.\n *\n * @return {AbstractMessageSetInfo[]} The list of information for each message set.\n */\nMessageSetInfoList.prototype.getInformationList = function() {\n  return this.informationList;\n};\nChildAggregate.add(MessageSetInfoList, {order: 0, attributeType: Array, collectionEntryType: AbstractMessageSetInfo, readMethod: \"getInformationList\", writeMethod: \"setInformationList\"});\n\n\n/**\n * The list of information for each message set.\n *\n * @param {AbstractMessageSetInfo[]} informationList The list of information for each message set.\n */\nMessageSetInfoList.prototype.setInformationList = function(informationList) {\n  this.informationList = informationList;\n};\n\n\n\n\nmodule.exports = MessageSetInfoList;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar RequestMessage = require(\"../RequestMessage\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar ClientRoutingCapability = require(\"./ClientRoutingCapability\");\n\n/**\n * @class\n * See \"Section 7.1.5, OFX Spec\"\n */\nfunction ProfileRequest () {\n  RequestMessage.call(this);\n\n  /**\n   * Note: I don't know why, but ClientRoutingCapability.NONE causes the request to be rejected by my bank\n   * @name ProfileRequest#routingCapability\n   * @type ClientRoutingCapability\n   * @access private\n   */\n  this.routingCapability = ClientRoutingCapability.MESSAGE_SET;\n\n  /**\n   * @name ProfileRequest#profileLastUpdated\n   * @type Date\n   * @access private\n   */\n  this.profileLastUpdated = null;\n}\n\ninherit(ProfileRequest, \"extends\", RequestMessage);\n\n\nAggregate.add(\"PROFRQ\", ProfileRequest);\n\n\n/**\n * The client routing capability.\n *\n * @return {ClientRoutingCapability} The client routing capability.\n */\nProfileRequest.prototype.getRoutingCapability = function() {\n  return this.routingCapability;\n};\nElement.add(ProfileRequest, {name: \"CLIENTROUTING\", order: 0, attributeType: ClientRoutingCapability, readMethod: \"getRoutingCapability\", writeMethod: \"setRoutingCapability\"});\n\n\n/**\n * The client routing capability.\n *\n * @param {ClientRoutingCapability} routingCapability The client routing capability.\n */\nProfileRequest.prototype.setRoutingCapability = function(routingCapability) {\n  this.routingCapability = routingCapability;\n};\n\n\n/**\n * The date the profile was last updated.\n *\n * @return {Date} The date the profile was last updated.\n */\nProfileRequest.prototype.getProfileLastUpdated = function() {\n  return this.profileLastUpdated;\n};\nElement.add(ProfileRequest, {name: \"DTPROFUP\", order: 10, attributeType: Date, readMethod: \"getProfileLastUpdated\", writeMethod: \"setProfileLastUpdated\"});\n\n\n/**\n * The date the profile was last updated.\n *\n * @param {Date} profileLastUpdated The date the profile was last updated.\n */\nProfileRequest.prototype.setProfileLastUpdated = function(profileLastUpdated) {\n  this.profileLastUpdated = profileLastUpdated;\n};\n\n\n\n\nmodule.exports = ProfileRequest;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar MessageSetType = require(\"../MessageSetType\");\nvar RequestMessageSet = require(\"../RequestMessageSet\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar ProfileRequestTransaction = require(\"./ProfileRequestTransaction\");\n\n/**\n * @class\n * @augments RequestMessageSet\n * See \"Section 7 OFX Spec\"\n */\nfunction ProfileRequestMessageSet () {\n  RequestMessageSet.call(this);\n\n  /**\n   * @name ProfileRequestMessageSet#profileRequest\n   * @type ProfileRequestTransaction\n   * @access private\n   */\n  this.profileRequest = null;\n}\n\ninherit(ProfileRequestMessageSet, \"extends\", RequestMessageSet);\n\n\nAggregate.add(\"PROFMSGSRQV1\", ProfileRequestMessageSet);\n\n\nProfileRequestMessageSet.prototype.getType = function() {\n  return MessageSetType.profile;\n};\n\n\n/**\n * The profile request.\n *\n * @return {ProfileRequestTransaction} The profile request.\n */\nProfileRequestMessageSet.prototype.getProfileRequest = function() {\n  return this.profileRequest;\n};\nChildAggregate.add(ProfileRequestMessageSet, {required: true, order: 0, attributeType: ProfileRequestTransaction, readMethod: \"getProfileRequest\", writeMethod: \"setProfileRequest\"});\n\n\n/**\n * The profile request.\n *\n * @param {ProfileRequestTransaction} profileRequest The profile request.\n */\nProfileRequestMessageSet.prototype.setProfileRequest = function(profileRequest) {\n  this.profileRequest = profileRequest;\n};\n\n\n// Inherited.\nProfileRequestMessageSet.prototype.getRequestMessages = function() {\n  var requestMessages = [];\n  if (this.getProfileRequest()) {\n    requestMessages.push(this.getProfileRequest());\n  }\n  return requestMessages;\n};\n\n\n\n\nmodule.exports = ProfileRequestMessageSet;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar TransactionWrappedRequestMessage = require(\"../TransactionWrappedRequestMessage\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ProfileRequest = require(\"./ProfileRequest\");\n\n/**\n * @class\n * @augments TransactionWrappedRequestMessage\n */\nfunction ProfileRequestTransaction () {\n  TransactionWrappedRequestMessage.call(this);\n\n  /**\n   * @name ProfileRequestTransaction#message\n   * @type ProfileRequest\n   * @access private\n   */\n  this.message = null;\n}\n\ninherit(ProfileRequestTransaction, \"extends\", TransactionWrappedRequestMessage);\n\n\nAggregate.add(\"PROFTRNRQ\", ProfileRequestTransaction);\n\n\n/**\n * The wrapped message.\n *\n * @return {ProfileRequest} The wrapped message.\n */\nProfileRequestTransaction.prototype.getMessage = function() {\n  return this.message;\n};\nChildAggregate.add(ProfileRequestTransaction, {required: true, order: 30, attributeType: ProfileRequest, readMethod: \"getMessage\", writeMethod: \"setMessage\"});\n\n\n/**\n * The wrapped message.\n *\n * @param {ProfileRequest} message The wrapped message.\n */\nProfileRequestTransaction.prototype.setMessage = function(message) {\n  this.message = message;\n};\n\n\n// Inherited.\nProfileRequestTransaction.prototype.setWrappedMessage = function(/*ProfileRequest*/ message) {\n  this.setMessage(message);\n};\n\n\n\n\nmodule.exports = ProfileRequestTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar ResponseMessage = require(\"../ResponseMessage\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar FinancialInstitutionProfile = require(\"../../../client/FinancialInstitutionProfile\");\nvar MessageSetInfoList = require(\"./MessageSetInfoList\");\nvar SignonInfoList = require(\"./SignonInfoList\");\n\n/**\n * @class\n * @augments ResponseMessage\n * @augments FinancialInstitutionProfile\n * See \"Section 7.2 OFX Spec\"\n */\nfunction ProfileResponse () {\n  ResponseMessage.call(this);\n\n  /**\n   * @name ProfileResponse#messageSetList\n   * @type MessageSetInfoList\n   * @access private\n   */\n  this.messageSetList = null;\n\n  /**\n   * @name ProfileResponse#signonInfoList\n   * @type SignonInfoList\n   * @access private\n   */\n  this.signonInfoList = null;\n\n  /**\n   * @name ProfileResponse#timestamp\n   * @type Date\n   * @access private\n   */\n  this.timestamp = null;\n\n  /**\n   * @name ProfileResponse#financialInstitutionName\n   * @type String\n   * @access private\n   */\n  this.financialInstitutionName = null;\n\n  /**\n   * @name ProfileResponse#address1\n   * @type String\n   * @access private\n   */\n  this.address1 = null;\n\n  /**\n   * @name ProfileResponse#address2\n   * @type String\n   * @access private\n   */\n  this.address2 = null;\n\n  /**\n   * @name ProfileResponse#address3\n   * @type String\n   * @access private\n   */\n  this.address3 = null;\n\n  /**\n   * @name ProfileResponse#city\n   * @type String\n   * @access private\n   */\n  this.city = null;\n\n  /**\n   * @name ProfileResponse#state\n   * @type String\n   * @access private\n   */\n  this.state = null;\n\n  /**\n   * @name ProfileResponse#zip\n   * @type String\n   * @access private\n   */\n  this.zip = null;\n\n  /**\n   * @name ProfileResponse#country\n   * @type String\n   * @access private\n   */\n  this.country = null;\n\n  /**\n   * @name ProfileResponse#customerServicePhone\n   * @type String\n   * @access private\n   */\n  this.customerServicePhone = null;\n\n  /**\n   * @name ProfileResponse#technicalSupportPhone\n   * @type String\n   * @access private\n   */\n  this.technicalSupportPhone = null;\n\n  /**\n   * @name ProfileResponse#fax\n   * @type String\n   * @access private\n   */\n  this.fax = null;\n\n  /**\n   * @name ProfileResponse#siteURL\n   * @type String\n   * @access private\n   */\n  this.siteURL = null;\n\n  /**\n   * @name ProfileResponse#email\n   * @type String\n   * @access private\n   */\n  this.email = null;\n}\n\ninherit(ProfileResponse, \"extends\", ResponseMessage);\ninherit(ProfileResponse, \"implements\", FinancialInstitutionProfile);\n\n\nAggregate.add(\"PROFRS\", ProfileResponse);\n\n\n/**\n * List of message set information.\n * @return {MessageSetInfoList} List of message set information.\n */\nProfileResponse.prototype.getMessageSetList = function() {\n  return this.messageSetList;\n};\nChildAggregate.add(ProfileResponse, {order: 0, attributeType: MessageSetInfoList, readMethod: \"getMessageSetList\", writeMethod: \"setMessageSetList\"});\n\n\n/**\n * List of message set information.\n *\n * @param {MessageSetInfoList} messageSetList List of message set information.\n */\nProfileResponse.prototype.setMessageSetList = function(messageSetList) {\n  this.messageSetList = messageSetList;\n};\n\n\n/**\n * List of signon information.\n *\n * @return {SignonInfoList} List of signon information.\n */\nProfileResponse.prototype.getSignonInfoList = function() {\n  return this.signonInfoList;\n};\nChildAggregate.add(ProfileResponse, {order: 10, attributeType: SignonInfoList, readMethod: \"getSignonInfoList\", writeMethod: \"setSignonInfoList\"});\n\n\n/**\n * List of signon information.\n *\n * @param {SignonInfoList} signonInfoList List of signon information.\n */\nProfileResponse.prototype.setSignonInfoList = function(signonInfoList) {\n  this.signonInfoList = signonInfoList;\n};\n\n\n// Inherited.\nProfileResponse.prototype.getResponseMessageName = function() {\n  return \"profile\";\n};\n\n\n// Inherited.\nProfileResponse.prototype.getLastUpdated = function() {\n  return this.getTimestamp();\n};\n\n\n/**\n * The timestamp of this profile update.\n *\n * @return {Date} The timestamp of this profile update.\n */\nProfileResponse.prototype.getTimestamp = function() {\n  return this.timestamp;\n};\nElement.add(ProfileResponse, {name: \"DTPROFUP\", order: 20, attributeType: Date, readMethod: \"getTimestamp\", writeMethod: \"setTimestamp\"});\n\n\n/**\n * The timestamp of this profile update.\n *\n * @param {Date} timestamp The timestamp of this profile update.\n */\nProfileResponse.prototype.setTimestamp = function(timestamp) {\n  this.timestamp = timestamp;\n};\n\n\n/**\n * The name of the financial institution.\n *\n * @return {String} The name of the financial institution.\n */\nProfileResponse.prototype.getFinancialInstitutionName = function() {\n  return this.financialInstitutionName;\n};\nElement.add(ProfileResponse, {name: \"FINAME\", order: 30, attributeType: String, readMethod: \"getFinancialInstitutionName\", writeMethod: \"setFinancialInstitutionName\"});\n\n\n/**\n * The name of the financial institution.\n *\n * @param {String} financialInstitutionName The name of the financial institution.\n */\nProfileResponse.prototype.setFinancialInstitutionName = function(financialInstitutionName) {\n  this.financialInstitutionName = financialInstitutionName;\n};\n\n\n/**\n * The address of the financial institution.\n *\n * @return {String} The address of the financial institution.\n */\nProfileResponse.prototype.getAddress1 = function() {\n  return this.address1;\n};\nElement.add(ProfileResponse, {name: \"ADDR1\", required: true, order: 40, attributeType: String, readMethod: \"getAddress1\", writeMethod: \"setAddress1\"});\n\n\n/**\n * The address of the financial institution.\n *\n * @param {String} address1 The address of the financial institution.\n */\nProfileResponse.prototype.setAddress1 = function(address1) {\n  this.address1 = address1;\n};\n\n\n/**\n * The address of the financial institution.\n *\n * @return {String} The address of the financial institution.\n */\nProfileResponse.prototype.getAddress2 = function() {\n  return this.address2;\n};\nElement.add(ProfileResponse, {name: \"ADDR2\", order: 50, attributeType: String, readMethod: \"getAddress2\", writeMethod: \"setAddress2\"});\n\n\n/**\n * The address of the financial institution.\n *\n * @param {String} address2 The address of the financial institution.\n */\nProfileResponse.prototype.setAddress2 = function(address2) {\n  this.address2 = address2;\n};\n\n\n/**\n * The address of the financial institution.\n *\n * @return {String} The address of the financial institution.\n */\nProfileResponse.prototype.getAddress3 = function() {\n  return this.address3;\n};\nElement.add(ProfileResponse, {name: \"ADDR3\", order: 60, attributeType: String, readMethod: \"getAddress3\", writeMethod: \"setAddress3\"});\n\n\n/**\n * The address of the financial institution.\n *\n * @param {String} address3 The address of the financial institution.\n */\nProfileResponse.prototype.setAddress3 = function(address3) {\n  this.address3 = address3;\n};\n\n\n/**\n * The city of the financial institution.\n *\n * @return {String} The city of the financial institution.\n */\nProfileResponse.prototype.getCity = function() {\n  return this.city;\n};\nElement.add(ProfileResponse, {name: \"CITY\", required: true, order: 70, attributeType: String, readMethod: \"getCity\", writeMethod: \"setCity\"});\n\n\n/**\n * The city of the financial institution.\n *\n * @param {String} city The city of the financial institution.\n */\nProfileResponse.prototype.setCity = function(city) {\n  this.city = city;\n};\n\n\n/**\n * The state of this financial institution.\n *\n * @return {String} The state of this financial institution.\n */\nProfileResponse.prototype.getState = function() {\n  return this.state;\n};\nElement.add(ProfileResponse, {name: \"STATE\", required: true, order: 80, attributeType: String, readMethod: \"getState\", writeMethod: \"setState\"});\n\n\n/**\n * The state of this financial institution.\n *\n * @param {String} state The state of this financial institution.\n */\nProfileResponse.prototype.setState = function(state) {\n  this.state = state;\n};\n\n\n/**\n * The postal code of this financial institution.\n *\n * @return {String} The postal code of this financial institution.\n */\nProfileResponse.prototype.getZip = function() {\n  return this.zip;\n};\nElement.add(ProfileResponse, {name: \"POSTALCODE\", required: true, order: 90, attributeType: String, readMethod: \"getZip\", writeMethod: \"setZip\"});\n\n\n/**\n * The postal code of this financial institution.\n *\n * @param {String} zip The postal code of this financial institution.\n */\nProfileResponse.prototype.setZip = function(zip) {\n  this.zip = zip;\n};\n\n\n/**\n * The country code for this financial institution.\n *\n * @return {String} The country code for this financial institution.\n * @see java.util.Locale#getISO3Country()\n */\nProfileResponse.prototype.getCountry = function() {\n  return this.country;\n};\nElement.add(ProfileResponse, {name: \"COUNTRY\", required: true, order: 100, attributeType: String, readMethod: \"getCountry\", writeMethod: \"setCountry\"});\n\n\n/**\n * The country code for this financial institution.\n *\n * @param {String} country The country code for this financial institution.\n */\nProfileResponse.prototype.setCountry = function(country) {\n  this.country = country;\n};\n\n\n/**\n * The phone number to customer service.\n *\n * @return {String} The phone number to customer service.\n */\nProfileResponse.prototype.getCustomerServicePhone = function() {\n  return this.customerServicePhone;\n};\nElement.add(ProfileResponse, {name: \"CSPHONE\", order: 110, attributeType: String, readMethod: \"getCustomerServicePhone\", writeMethod: \"setCustomerServicePhone\"});\n\n\n/**\n * The phone number to customer service.\n *\n * @param {String} customerServicePhone The phone number to customer service.\n */\nProfileResponse.prototype.setCustomerServicePhone = function(customerServicePhone) {\n  this.customerServicePhone = customerServicePhone;\n};\n\n\n/**\n * The phone number to tech support.\n *\n * @return {String} The phone number to tech support.\n */\nProfileResponse.prototype.getTechnicalSupportPhone = function() {\n  return this.technicalSupportPhone;\n};\nElement.add(ProfileResponse, {name: \"TSPHONE\", order: 120, attributeType: String, readMethod: \"getTechnicalSupportPhone\", writeMethod: \"setTechnicalSupportPhone\"});\n\n\n/**\n * The phone number to tech support.\n *\n * @param {String} technicalSupportPhone The phone number to tech support.\n */\nProfileResponse.prototype.setTechnicalSupportPhone = function(technicalSupportPhone) {\n  this.technicalSupportPhone = technicalSupportPhone;\n};\n\n\n/**\n * The fax number.\n *\n * @return {String} The fax number.\n */\nProfileResponse.prototype.getFax = function() {\n  return this.fax;\n};\nElement.add(ProfileResponse, {name: \"FAXPHONE\", order: 130, attributeType: String, readMethod: \"getFax\", writeMethod: \"setFax\"});\n\n\n/**\n * The fax number.\n *\n * @param {String} fax The fax number.\n */\nProfileResponse.prototype.setFax = function(fax) {\n  this.fax = fax;\n};\n\n\n/**\n * URL for the financial institution.\n *\n * @return {String} URL for the financial institution.\n */\nProfileResponse.prototype.getSiteURL = function() {\n  return this.siteURL;\n};\nElement.add(ProfileResponse, {name: \"URL\", order: 140, attributeType: String, readMethod: \"getSiteURL\", writeMethod: \"setSiteURL\"});\n\n\n/**\n * URL for the financial institution.\n *\n * @param {String} siteURL URL for the financial institution.\n */\nProfileResponse.prototype.setSiteURL = function(siteURL) {\n  this.siteURL = siteURL;\n};\n\n\n/**\n * The email for this FI\n *\n * @return {String} The email for this FI\n */\nProfileResponse.prototype.getEmail = function() {\n  return this.email;\n};\nElement.add(ProfileResponse, {name: \"EMAIL\", order: 150, attributeType: String, readMethod: \"getEmail\", writeMethod: \"setEmail\"});\n\n\n/**\n * The email for this FI\n *\n * @param {String} email The email for this FI\n */\nProfileResponse.prototype.setEmail = function(email) {\n  this.email = email;\n};\n\n\n/**\n * Get all the profiles of the specified type.\n *\n * @param {MessageSetType} type The type.\n * @return {MessageSetProfile[]} The profiles.\n */\nProfileResponse.prototype.getProfiles = function(type) {\n  var profiles = [];\n  if (this.getMessageSetList() && this.getMessageSetList().getInformationList()) {\n    var informationList = this.getMessageSetList().getInformationList();\n    for (var informationListIdx=0; informationListIdx<informationList.length; informationListIdx++) {\n      var info = informationList[informationListIdx];\n      if (info.getVersionSpecificInformationList()) {\n        var versionSpecificInformationList = info.getVersionSpecificInformationList();\n        for (var versionSpecificInformationListIdx=0; versionSpecificInformationListIdx<versionSpecificInformationList.length; versionSpecificInformationListIdx++) {\n          var versionSpecificInfo = versionSpecificInformationList[versionSpecificInformationListIdx];\n          if (versionSpecificInfo.getMessageSetType() == type) {\n            profiles.push(versionSpecificInfo);\n          }\n        }\n      }\n    }\n  }\n  return profiles;\n};\n\n\nProfileResponse.prototype.getMessageSetProfile = function(/*MessageSetType*/ type, /*String*/ version) {\n  var profiles = this.getProfiles(type);\n  if (version) {\n    for (var i=0; i<profiles.length; i++) {\n      var profile = profiles[i];\n      if (!version) {\n        if (!profile.getVersion()) {\n          return profile;\n        }\n      }\n      else if (version === profile.getVersion()) {\n        return profile;\n      }\n    }\n  } else {\n    if (profiles.length > 1) {\n      throw new Error(\"More than one profile of type \" + type);\n    }\n    else if (profiles.length === 0) {\n      return null;\n    }\n    else {\n      return profiles[0];\n    }\n  }\n  \n  return null;\n};\n\n\nProfileResponse.prototype.getSignonProfile = function(/*MessageSetProfile*/ messageSet) {\n  if (this.getSignonInfoList() && this.getSignonInfoList().getInfoList()) {\n    var infoList = this.getSignonInfoList().getInfoList();\n    for (var infoListIdx=0; infoListIdx<infoList.length; infoListIdx++) {\n      var signonInfo = infoList[infoListIdx];\n      if (!messageSet.getRealm()) {\n        if (!signonInfo.getRealm()) {\n          return signonInfo;\n        }\n      }\n      else if (messageSet.getRealm() === signonInfo.getRealm()) {\n        return signonInfo;\n      }\n    }\n  }\n  return null;\n};\n\n\n\n\nmodule.exports = ProfileResponse;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar MessageSetType = require(\"../MessageSetType\");\nvar ResponseMessageSet = require(\"../ResponseMessageSet\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ProfileResponseTransaction = require(\"./ProfileResponseTransaction\");\n\n/**\n * @class\n * @augments ResponseMessageSet\n * See \"Section 7 OFX Spec\"\n */\nfunction ProfileResponseMessageSet () {\n  ResponseMessageSet.call(this);\n\n  /**\n   * @name ProfileResponseMessageSet#profileResponse\n   * @type ProfileResponseTransaction\n   * @access private\n   */\n  this.profileResponse = null;\n}\n\ninherit(ProfileResponseMessageSet, \"extends\", ResponseMessageSet);\n\n\nAggregate.add(\"PROFMSGSRSV1\", ProfileResponseMessageSet);\n\n\nProfileResponseMessageSet.prototype.getType = function() {\n  return MessageSetType.profile;\n};\n\n\n/**\n * The profile response.\n *\n * @return {ProfileResponseTransaction} The profile response.\n */\nProfileResponseMessageSet.prototype.getProfileResponse = function() {\n  return this.profileResponse;\n};\nChildAggregate.add(ProfileResponseMessageSet, {required: true, order: 0, attributeType: ProfileResponseTransaction, readMethod: \"getProfileResponse\", writeMethod: \"setProfileResponse\"});\n\n\n/**\n * The profile response.\n *\n * @param {ProfileResponseTransaction} profileResponse The profile response.\n */\nProfileResponseMessageSet.prototype.setProfileResponse = function(profileResponse) {\n  this.profileResponse = profileResponse;\n};\n\n\n// Inherited.\nProfileResponseMessageSet.prototype.getResponseMessages = function() {\n  var messages = [];\n\n  if (this.getProfileResponse()) {\n    messages.push(this.getProfileResponse());\n  }\n\n  return messages;\n};\n\n\n\n\nmodule.exports = ProfileResponseMessageSet;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar TransactionWrappedResponseMessage = require(\"../TransactionWrappedResponseMessage\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ProfileResponse = require(\"./ProfileResponse\");\n\n/**\n * @class\n * @augments TransactionWrappedResponseMessage\n */\nfunction ProfileResponseTransaction () {\n  TransactionWrappedResponseMessage.call(this);\n\n  /**\n   * @name ProfileResponseTransaction#message\n   * @type ProfileResponse\n   * @access private\n   */\n  this.message = null;\n}\n\ninherit(ProfileResponseTransaction, \"extends\", TransactionWrappedResponseMessage);\n\n\nAggregate.add(\"PROFTRNRS\", ProfileResponseTransaction);\n\n\n/**\n * The message.\n *\n * @return {ProfileResponse} The message.\n */\nProfileResponseTransaction.prototype.getMessage = function() {\n  return this.message;\n};\nChildAggregate.add(ProfileResponseTransaction, {required: true, order: 30, attributeType: ProfileResponse, readMethod: \"getMessage\", writeMethod: \"setMessage\"});\n\n\n/**\n * The message.\n *\n * @param {ProfileResponse} message The message.\n */\nProfileResponseTransaction.prototype.setMessage = function(message) {\n  this.message = message;\n};\n\n\n// Inherited.\nProfileResponseTransaction.prototype.getWrappedMessage = function() {\n  return this.getMessage();\n};\n\n\n\n\nmodule.exports = ProfileResponseTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar SignonProfile = require(\"../SignonProfile\");\nvar CharacterType = require(\"./CharacterType\");\n\n/**\n * Sign-on information\n *\n * @class\n * @augments SignonProfile\n * See \"Section 7.2.2, OFX Spec\"\n */\nfunction SignonInfo () {\n\n  /**\n   * @name SignonInfo#realm\n   * @type String\n   * @access private\n   */\n  this.realm = null;\n\n  /**\n   * @name SignonInfo#minPasswordCharacters\n   * @type Integer\n   * @access private\n   */\n  this.minPasswordCharacters = null;\n\n  /**\n   * @name SignonInfo#maxPasswordCharacters\n   * @type Integer\n   * @access private\n   */\n  this.maxPasswordCharacters = null;\n\n  /**\n   * @name SignonInfo#passwordCharacterType\n   * @type CharacterType\n   * @access private\n   */\n  this.passwordCharacterType = null;\n\n  /**\n   * @name SignonInfo#passwordCaseSensitive\n   * @type Boolean\n   * @access private\n   */\n  this.passwordCaseSensitive = true;\n\n  /**\n   * @name SignonInfo#passwordSpecialCharsAllowed\n   * @type Boolean\n   * @access private\n   */\n  this.passwordSpecialCharsAllowed = true;\n\n  /**\n   * @name SignonInfo#passwordSpacesAllowed\n   * @type Boolean\n   * @access private\n   */\n  this.passwordSpacesAllowed = true;\n\n  /**\n   * @name SignonInfo#changePasswordSupported\n   * @type Boolean\n   * @access private\n   */\n  this.changePasswordSupported = null;\n\n  /**\n   * @name SignonInfo#changePasswordFirstRequired\n   * @type Boolean\n   * @access private\n   */\n  this.changePasswordFirstRequired = null;\n\n  /**\n   * @name SignonInfo#additionalCredientialsLabel1\n   * @type String\n   * @access private\n   */\n  this.additionalCredientialsLabel1 = null;\n\n  /**\n   * @name SignonInfo#additionalCredientialsLabel2\n   * @type String\n   * @access private\n   */\n  this.additionalCredientialsLabel2 = null;\n\n  /**\n   * @name SignonInfo#clientUIDRequired\n   * @type Boolean\n   * @access private\n   */\n  this.clientUIDRequired = null;\n\n  /**\n   * @name SignonInfo#authTokenRequiredForFirstSignon\n   * @type Boolean\n   * @access private\n   */\n  this.authTokenRequiredForFirstSignon = null;\n\n  /**\n   * @name SignonInfo#authTokenLabel\n   * @type String\n   * @access private\n   */\n  this.authTokenLabel = null;\n\n  /**\n   * @name SignonInfo#authTokenInfoURL\n   * @type String\n   * @access private\n   */\n  this.authTokenInfoURL = null;\n\n  /**\n   * @name SignonInfo#mfaSupported\n   * @type Boolean\n   * @access private\n   */\n  this.mfaSupported = null;\n\n  /**\n   * @name SignonInfo#mfaChallengeRequiredForFirstSignon\n   * @type Boolean\n   * @access private\n   */\n  this.mfaChallengeRequiredForFirstSignon = null;\n}\n\ninherit(SignonInfo, \"implements\", SignonProfile);\n\n\nAggregate.add(\"SIGNONINFO\", SignonInfo);\n\n\n/**\n * The name of the sign-on realm.\n *\n * @return {String} The name of the sign-on realm.\n */\nSignonInfo.prototype.getRealm = function() {\n  return this.realm;\n};\nElement.add(SignonInfo, {name: \"SIGNONREALM\", required: true, order: 0, attributeType: String, readMethod: \"getRealm\", writeMethod: \"setRealm\"});\n\n\n/**\n * The name of the sign-on realm.\n *\n * @param {String} realm The name of the sign-on realm.\n */\nSignonInfo.prototype.setRealm = function(realm) {\n  this.realm = realm;\n};\n\n\n/**\n * The minimum number of password characters.\n *\n * @return {Integer} The minimum number of password characters.\n */\nSignonInfo.prototype.getMinPasswordCharacters = function() {\n  return this.minPasswordCharacters;\n};\nElement.add(SignonInfo, {name: \"MIN\", required: true, order: 10, attributeType: Number, readMethod: \"getMinPasswordCharacters\", writeMethod: \"setMinPasswordCharacters\"});\n\n\n/**\n * The minimum number of password characters.\n *\n * @param {Integer} minPasswordCharacters The minimum number of password characters.\n */\nSignonInfo.prototype.setMinPasswordCharacters = function(minPasswordCharacters) {\n  this.minPasswordCharacters = minPasswordCharacters;\n};\n\n\n/**\n * The maximum number of password characters.\n *\n * @return {Integer} The maximum number of password characters.\n */\nSignonInfo.prototype.getMaxPasswordCharacters = function() {\n  return this.maxPasswordCharacters;\n};\nElement.add(SignonInfo, {name: \"MAX\", required: true, order: 20, attributeType: Number, readMethod: \"getMaxPasswordCharacters\", writeMethod: \"setMaxPasswordCharacters\"});\n\n\n/**\n * The maximum number of password characters.\n *\n * @param {Integer} maxPasswordCharacters The maximum number of password characters.\n */\nSignonInfo.prototype.setMaxPasswordCharacters = function(maxPasswordCharacters) {\n  this.maxPasswordCharacters = maxPasswordCharacters;\n};\n\n\n/**\n * The type of password characters supported.\n *\n * @return {CharacterType} The type of password characters supported.\n */\nSignonInfo.prototype.getPasswordCharacterType = function() {\n  return this.passwordCharacterType;\n};\nElement.add(SignonInfo, {name: \"CHARTYPE\", required: true, order: 30, attributeType: CharacterType, readMethod: \"getPasswordCharacterType\", writeMethod: \"setPasswordCharacterType\"});\n\n\n/**\n * The type of password characters supported.\n *\n * @param {CharacterType} passwordCharacterType The type of password characters supported.\n */\nSignonInfo.prototype.setPasswordCharacterType = function(passwordCharacterType) {\n  this.passwordCharacterType = passwordCharacterType;\n};\n\n\n/**\n * Whether the password is case-sensitive.\n *\n * @return {Boolean} Whether the password is case-sensitive.\n */\nSignonInfo.prototype.getPasswordCaseSensitive = function() {\n  return this.passwordCaseSensitive;\n};\nElement.add(SignonInfo, {name: \"CASESEN\", required: true, order: 40, attributeType: Boolean, readMethod: \"getPasswordCaseSensitive\", writeMethod: \"setPasswordCaseSensitive\"});\n\n\n/**\n * Whether the password is case-sensitive.\n *\n * @param {Boolean} passwordCaseSensitive Whether the password is case-sensitive.\n */\nSignonInfo.prototype.setPasswordCaseSensitive = function(passwordCaseSensitive) {\n  this.passwordCaseSensitive = passwordCaseSensitive;\n};\n\n\n/**\n * Whether special characters are allowed in the password.\n *\n * @return {Boolean} Whether special characters are allowed in the password.\n */\nSignonInfo.prototype.getPasswordSpecialCharsAllowed = function() {\n  return this.passwordSpecialCharsAllowed;\n};\nElement.add(SignonInfo, {name: \"SPECIAL\", required: true, order: 50, attributeType: Boolean, readMethod: \"getPasswordSpecialCharsAllowed\", writeMethod: \"setPasswordSpecialCharsAllowed\"});\n\n\n/**\n * Whether special characters are allowed in the password.\n *\n * @param {Boolean} passwordSpecialCharsAllowed Whether special characters are allowed in the password.\n */\nSignonInfo.prototype.setPasswordSpecialCharsAllowed = function(passwordSpecialCharsAllowed) {\n  this.passwordSpecialCharsAllowed = passwordSpecialCharsAllowed;\n};\n\n\n/**\n * Whether spaces are allowed in the password.\n *\n * @return {Boolean} Whether spaces are allowed in the password.\n */\nSignonInfo.prototype.getPasswordSpacesAllowed = function() {\n  return this.passwordSpacesAllowed;\n};\nElement.add(SignonInfo, {name: \"SPACES\", required: true, order: 60, attributeType: Boolean, readMethod: \"getPasswordSpacesAllowed\", writeMethod: \"setPasswordSpacesAllowed\"});\n\n\n/**\n * Whether spaces are allowed in the password.\n *\n * @param {Boolean} passwordSpacesAllowed Whether spaces are allowed in the password.\n */\nSignonInfo.prototype.setPasswordSpacesAllowed = function(passwordSpacesAllowed) {\n  this.passwordSpacesAllowed = passwordSpacesAllowed;\n};\n\n\n/**\n * Whether the server can process a password change request for this realm.\n *\n * @return {Boolean} Whether the server can process a password change request for this realm.\n */\nSignonInfo.prototype.getChangePasswordSupported = function() {\n  return this.changePasswordSupported;\n};\nElement.add(SignonInfo, {name: \"PINCH\", required: true, order: 70, attributeType: Boolean, readMethod: \"getChangePasswordSupported\", writeMethod: \"setChangePasswordSupported\"});\n\n\n/**\n * Whether the server can process a password change request for this realm.\n *\n * @param {Boolean} changePasswordSupported Whether the server can process a password change request for this realm.\n */\nSignonInfo.prototype.setChangePasswordSupported = function(changePasswordSupported) {\n  this.changePasswordSupported = changePasswordSupported;\n};\n\n\n/**\n * Whether the server requires the user to change their password as part of their first signon.\n *\n * @return {Boolean} Whether the server requires the user to change their password as part of their first signon.\n */\nSignonInfo.prototype.getChangePasswordFirstRequired = function() {\n  return this.changePasswordFirstRequired;\n};\nElement.add(SignonInfo, {name: \"CHGPINFIRST\", required: true, order: 80, attributeType: Boolean, readMethod: \"getChangePasswordFirstRequired\", writeMethod: \"setChangePasswordFirstRequired\"});\n\n\n/**\n * Whether the server requires the user to change their password as part of their first signon.\n *\n * @param {Boolean} changePasswordFirstRequired Whether the server requires the user to change their password as part of their first signon.\n */\nSignonInfo.prototype.setChangePasswordFirstRequired = function(changePasswordFirstRequired) {\n  this.changePasswordFirstRequired = changePasswordFirstRequired;\n};\n\n\n/**\n * Label for a set of additional credentials that the user must supply.\n *\n * @return {String} Label for a set of additional credentials that the user must supply.\n */\nSignonInfo.prototype.getAdditionalCredientialsLabel1 = function() {\n  return this.additionalCredientialsLabel1;\n};\nElement.add(SignonInfo, {name: \"USERCRED1LABEL\", order: 90, attributeType: String, readMethod: \"getAdditionalCredientialsLabel1\", writeMethod: \"setAdditionalCredientialsLabel1\"});\n\n\n/**\n * Label for a set of additional credentials that the user must supply.\n *\n * @param {String} additionalCredientialsLabel1 Label for a set of additional credentials that the user must supply.\n */\nSignonInfo.prototype.setAdditionalCredientialsLabel1 = function(additionalCredientialsLabel1) {\n  this.additionalCredientialsLabel1 = additionalCredientialsLabel1;\n};\n\n\n/**\n * Label for a set of additional credentials that the user must supply.\n *\n * @return {String} Label for a set of additional credentials that the user must supply.\n */\nSignonInfo.prototype.getAdditionalCredientialsLabel2 = function() {\n  return this.additionalCredientialsLabel2;\n};\nElement.add(SignonInfo, {name: \"USERCRED2LABEL\", order: 100, attributeType: String, readMethod: \"getAdditionalCredientialsLabel2\", writeMethod: \"setAdditionalCredientialsLabel2\"});\n\n\n/**\n * Label for a set of additional credentials that the user must supply.\n *\n * @param {String} additionalCredientialsLabel2 Label for a set of additional credentials that the user must supply.\n */\nSignonInfo.prototype.setAdditionalCredientialsLabel2 = function(additionalCredientialsLabel2) {\n  this.additionalCredientialsLabel2 = additionalCredientialsLabel2;\n};\n\n\n/**\n * Whether a client UID is required for teh sign-on.\n *\n * @return {Boolean} Whether a client UID is required for teh sign-on.\n */\nSignonInfo.prototype.getClientUIDRequired = function() {\n  return this.clientUIDRequired;\n};\nElement.add(SignonInfo, {name: \"CLIENTUIDREQ\", order: 110, attributeType: Boolean, readMethod: \"getClientUIDRequired\", writeMethod: \"setClientUIDRequired\"});\n\n\n/**\n * Whether a client UID is required for teh sign-on.\n *\n * @param {Boolean} clientUIDRequired Whether a client UID is required for teh sign-on.\n */\nSignonInfo.prototype.setClientUIDRequired = function(clientUIDRequired) {\n  this.clientUIDRequired = clientUIDRequired;\n};\n\n\n/**\n * Whether an auth token is required for the sign-on.\n *\n * @return {Boolean} Whether an auth token is required for the sign-on.\n */\nSignonInfo.prototype.getAuthTokenRequiredForFirstSignon = function() {\n  return this.authTokenRequiredForFirstSignon;\n};\nElement.add(SignonInfo, {name: \"AUTHTOKENFIRST\", order: 120, attributeType: Boolean, readMethod: \"getAuthTokenRequiredForFirstSignon\", writeMethod: \"setAuthTokenRequiredForFirstSignon\"});\n\n\n/**\n * Whether an auth token is required for the sign-on.\n *\n * @param {Boolean} authTokenRequiredForFirstSignon\n *         Whether an auth token is required for the sign-on.\n */\nSignonInfo.prototype.setAuthTokenRequiredForFirstSignon = function(authTokenRequiredForFirstSignon) {\n  this.authTokenRequiredForFirstSignon = authTokenRequiredForFirstSignon;\n};\n\n\n/**\n * The label of the auth token.\n *\n * @return {String} The label of the auth token.\n */\nSignonInfo.prototype.getAuthTokenLabel = function() {\n  return this.authTokenLabel;\n};\nElement.add(SignonInfo, {name: \"AUTHTOKENLABEL\", order: 130, attributeType: String, readMethod: \"getAuthTokenLabel\", writeMethod: \"setAuthTokenLabel\"});\n\n\n/**\n * The label of the auth token.\n *\n * @param {String} authTokenLabel The label of the auth token.\n */\nSignonInfo.prototype.setAuthTokenLabel = function(authTokenLabel) {\n  this.authTokenLabel = authTokenLabel;\n};\n\n\n/**\n * The URL for the auth token information.\n *\n * @return {String} The URL for the auth token information.\n */\nSignonInfo.prototype.getAuthTokenInfoURL = function() {\n  return this.authTokenInfoURL;\n};\nElement.add(SignonInfo, {name: \"AUTHTOKENINFOURL\", order: 140, attributeType: String, readMethod: \"getAuthTokenInfoURL\", writeMethod: \"setAuthTokenInfoURL\"});\n\n\n/**\n * The URL for the auth token information.\n *\n * @param {String} authTokenInfoURL The URL for the auth token information.\n */\nSignonInfo.prototype.setAuthTokenInfoURL = function(authTokenInfoURL) {\n  this.authTokenInfoURL = authTokenInfoURL;\n};\n\n\n/**\n * Whether MFA is supported.\n *\n * @return {Boolean} Whether MFA is supported.\n */\nSignonInfo.prototype.getMfaSupported = function() {\n  return this.mfaSupported;\n};\nElement.add(SignonInfo, {name: \"MFACHALLENGESUPT\", order: 150, attributeType: Boolean, readMethod: \"getMfaSupported\", writeMethod: \"setMfaSupported\"});\n\n\n/**\n * Whether MFA is supported.\n *\n * @param {Boolean} mfaSupported Whether MFA is supported.\n */\nSignonInfo.prototype.setMfaSupported = function(mfaSupported) {\n  this.mfaSupported = mfaSupported;\n};\n\n\n/**\n * Whether an MFA challenge request is required for the first sign-on into this realm.\n *\n * @return {Boolean} Whether an MFA challenge request is required for the first sign-on into this realm.\n */\nSignonInfo.prototype.getMfaChallengeRequiredForFirstSignon = function() {\n  return this.mfaChallengeRequiredForFirstSignon;\n};\nElement.add(SignonInfo, {name: \"MFACHALLENGEFIRST\", order: 160, attributeType: Boolean, readMethod: \"getMfaChallengeRequiredForFirstSignon\", writeMethod: \"setMfaChallengeRequiredForFirstSignon\"});\n\n\n/**\n * Whether an MFA challenge request is required for the first sign-on into this realm.\n *\n * @param {Boolean} mfaChallengeRequiredForFirstSignon\n *         Whether an MFA challenge request is required for the first sign-on into this realm.\n */\nSignonInfo.prototype.setMfaChallengeRequiredForFirstSignon = function(mfaChallengeRequiredForFirstSignon) {\n  this.mfaChallengeRequiredForFirstSignon = mfaChallengeRequiredForFirstSignon;\n};\n\n\n\n\nmodule.exports = SignonInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar SignonInfo = require(\"./SignonInfo\");\n\n/**\n * List of signon information.\n *\n * @class\n * See \"Section 7.2.2, OFX Spec\"\n */\nfunction SignonInfoList () {\n\n  /**\n   * @name SignonInfoList#infoList\n   * @type SignonInfo[]\n   * @access private\n   */\n  this.infoList = null;\n}\n\n\n\nAggregate.add(\"SIGNONINFOLIST\", SignonInfoList);\n\n\n/**\n * List of sign-on information.\n *\n * @return {SignonInfo[]} List of sign-on information.\n */\nSignonInfoList.prototype.getInfoList = function() {\n  return this.infoList;\n};\nChildAggregate.add(SignonInfoList, {order: 0, attributeType: Array, collectionEntryType: SignonInfo, readMethod: \"getInfoList\", writeMethod: \"setInfoList\"});\n\n\n/**\n * List of sign-on information.\n *\n * @param {SignonInfo[]} infoList List of sign-on information.\n */\nSignonInfoList.prototype.setInfoList = function(infoList) {\n  this.infoList = infoList;\n};\n\n\n\n\nmodule.exports = SignonInfoList;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * @enum\n * See \"Section 7.2.1, OFX Spec\"\n */\nvar SynchronizationCapability = {\n\n  FULL: \"FULL\",\n\n  LITE: \"LITE\"\n};\n\n\nmodule.exports = SynchronizationCapability;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar MessageSetProfile = require(\"../MessageSetProfile\");\nvar CoreMessageSetInfo = require(\"./CoreMessageSetInfo\");\n\n/**\n * Information specific to a version of a message set.\n *\n * @class\n * See \"Section 7.2.1, OFX Spec\"\n */\nfunction VersionSpecificMessageSetInfo () {\n\n  /**\n   * @name VersionSpecificMessageSetInfo#core\n   * @type CoreMessageSetInfo\n   * @access private\n   */\n  this.core = null;\n}\n\ninherit(VersionSpecificMessageSetInfo, \"implements\", MessageSetProfile);\n\n\n\n\n/**\n * The information core.\n *\n * @return {CoreMessageSetInfo} The information core.\n */\nVersionSpecificMessageSetInfo.prototype.getCore = function() {\n  return this.core;\n};\nChildAggregate.add(VersionSpecificMessageSetInfo, {order: 0, attributeType: CoreMessageSetInfo, readMethod: \"getCore\", writeMethod: \"setCore\"});\n\n\n/**\n * The information core.\n *\n * @param {CoreMessageSetInfo} core The information core.\n */\nVersionSpecificMessageSetInfo.prototype.setCore = function(core) {\n  this.core = core;\n};\n\n\n/**\n * The message set type.\n *\n * @return {MessageSetType} The message set type.\n */\nVersionSpecificMessageSetInfo.prototype.getMessageSetType = function() { throw new Error(\"not implemented\"); };\n\nVersionSpecificMessageSetInfo.prototype.getVersion = function() {\n  return this.core ? this.core.getVersion() : null;\n};\n\nVersionSpecificMessageSetInfo.prototype.getServiceProviderName = function() {\n  return this.core ? this.core.getServiceProviderName() : null;\n};\n\nVersionSpecificMessageSetInfo.prototype.getUrl = function() {\n  return this.core ? this.core.getUrl() : null;\n};\n\nVersionSpecificMessageSetInfo.prototype.getSecurity = function() {\n  return this.core ? this.core.getSecurity() : null;\n};\n\nVersionSpecificMessageSetInfo.prototype.isSslRequired = function() {\n  return this.core && this.core.getSslRequired() ? this.core.getSslRequired() : true;\n};\n\nVersionSpecificMessageSetInfo.prototype.getRealm = function() {\n  return this.core ? this.core.getRealm() : null;\n};\n\nVersionSpecificMessageSetInfo.prototype.getLanguage = function() {\n  return this.core ? this.core.getLanguage() : null;\n};\n\nVersionSpecificMessageSetInfo.prototype.getSyncCapability = function() {\n  return this.core ? this.core.getSyncCapability() : null;\n};\n\nVersionSpecificMessageSetInfo.prototype.hasFileBasedErrorRecoverySupport = function() {\n  return this.core && this.core.getFileBasedErrorRecoverySupport() ? this.core.getFileBasedErrorRecoverySupport() : false;\n};\n\n\n\n\nmodule.exports = VersionSpecificMessageSetInfo;\n","\"use strict\";\n\nmodule.exports = {\n  info: require(\"./info/index\"),\n  AbstractMessageSetInfo: require(\"./AbstractMessageSetInfo\"),\n  CharacterType: require(\"./CharacterType\"),\n  ClientRoutingCapability: require(\"./ClientRoutingCapability\"),\n  CoreMessageSetInfo: require(\"./CoreMessageSetInfo\"),\n  MessageSetInfoList: require(\"./MessageSetInfoList\"),\n  ProfileRequest: require(\"./ProfileRequest\"),\n  ProfileRequestMessageSet: require(\"./ProfileRequestMessageSet\"),\n  ProfileRequestTransaction: require(\"./ProfileRequestTransaction\"),\n  ProfileResponse: require(\"./ProfileResponse\"),\n  ProfileResponseMessageSet: require(\"./ProfileResponseMessageSet\"),\n  ProfileResponseTransaction: require(\"./ProfileResponseTransaction\"),\n  SignonInfo: require(\"./SignonInfo\"),\n  SignonInfoList: require(\"./SignonInfoList\"),\n  SynchronizationCapability: require(\"./SynchronizationCapability\"),\n  VersionSpecificMessageSetInfo: require(\"./VersionSpecificMessageSetInfo\"),\n};\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar AbstractMessageSetInfo = require(\"../../profile/AbstractMessageSetInfo\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar BankingV1MessageSetInfo = require(\"./BankingV1MessageSetInfo\");\n\n/**\n * @class\n * @augments AbstractMessageSetInfo\n */\nfunction BankingMessageSetInfo () {\n  AbstractMessageSetInfo.call(this);\n\n  /**\n   * @name BankingMessageSetInfo#version1Info\n   * @type BankingV1MessageSetInfo\n   * @access private\n   */\n  this.version1Info = null;\n}\n\ninherit(BankingMessageSetInfo, \"extends\", AbstractMessageSetInfo);\n\n\nAggregate.add(\"BANKMSGSET\", BankingMessageSetInfo);\n\n\nBankingMessageSetInfo.prototype.getVersion1Info = function() {\n  return this.version1Info;\n};\nChildAggregate.add(BankingMessageSetInfo, {order: 0, attributeType: BankingV1MessageSetInfo, readMethod: \"getVersion1Info\", writeMethod: \"setVersion1Info\"});\n\n\nBankingMessageSetInfo.prototype.setVersion1Info = function(/*BankingV1MessageSetInfo*/ version1Info) {\n  this.version1Info = version1Info;\n};\n\n\n\n\nmodule.exports = BankingMessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar VersionSpecificMessageSetInfo = require(\"../VersionSpecificMessageSetInfo\");\nvar MessageSetType = require(\"../../MessageSetType\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar AccountType = require(\"../../banking/AccountType\");\nvar TransferProfile = require(\"./common/TransferProfile\");\nvar StopCheckProfile = require(\"./banking/StopCheckProfile\");\nvar EmailProfile = require(\"./banking/EmailProfile\");\nvar ImageProfile = require(\"./common/ImageProfile\");\n\n/**\n * Banking Message Set Profile\n * @class\n * @augments VersionSpecificMessageSetInfo\n * See \"Section 11.13.2.1 OFX Spec\"\n */\nfunction BankingV1MessageSetInfo () {\n  VersionSpecificMessageSetInfo.call(this);\n\n  /**\n   * @name BankingV1MessageSetInfo#invalidAccountTypes\n   * @type AccountType[]\n   * @access private\n   */\n  this.invalidAccountTypes = null;\n\n  /**\n   * @name BankingV1MessageSetInfo#closingAvail\n   * @type Boolean\n   * @access private\n   */\n  this.closingAvail = null;\n\n  /**\n   * @name BankingV1MessageSetInfo#transferProfile\n   * @type TransferProfile\n   * @access private\n   */\n  this.transferProfile = null;\n\n  /**\n   * @name BankingV1MessageSetInfo#stopCheckProfile\n   * @type StopCheckProfile\n   * @access private\n   */\n  this.stopCheckProfile = null;\n\n  /**\n   * @name BankingV1MessageSetInfo#emailProfile\n   * @type EmailProfile\n   * @access private\n   */\n  this.emailProfile = null;\n\n  /**\n   * @name BankingV1MessageSetInfo#imageProfile\n   * @type ImageProfile\n   * @access private\n   */\n  this.imageProfile = null;\n}\n\ninherit(BankingV1MessageSetInfo, \"extends\", VersionSpecificMessageSetInfo);\n\n\nAggregate.add(\"BANKMSGSETV1\", BankingV1MessageSetInfo);\n\n\nBankingV1MessageSetInfo.prototype.getMessageSetType = function() {\n  return MessageSetType.banking;\n};\n\n\n/**\n * The invalidAccountTypes list.\n *\n * @return {AccountType[]} The invalidAccountTypes list.\n */\nBankingV1MessageSetInfo.prototype.getInvalidAccountTypes = function() {\n  return this.invalidAccountTypes;\n};\nChildAggregate.add(BankingV1MessageSetInfo, {order: 10, attributeType: Array, collectionEntryType: AccountType, readMethod: \"getInvalidAccountTypes\", writeMethod: \"setInvalidAccountTypes\"});\n\n\n/**\n * The invalidAccountTypes list.\n *\n * @param {AccountType[]} invalidAccountTypes The invalidAccountTypes list.\n */\nBankingV1MessageSetInfo.prototype.setInvalidAccountTypes = function(invalidAccountTypes) {\n  this.invalidAccountTypes = invalidAccountTypes;\n};\n\n\n/**\n * Gets whether closing statement information is available\n *\n * @return {Boolean} whether closing statement information is available\n */\nBankingV1MessageSetInfo.prototype.getClosingAvail = function() {\n  return this.closingAvail;\n};\nElement.add(BankingV1MessageSetInfo, {name: \"CLOSINGAVAIL\", required: true, order: 20, attributeType: Boolean, readMethod: \"getClosingAvail\", writeMethod: \"setClosingAvail\"});\n\n\n/**\n * Sets whether closing statement information is available\n *\n * @param {Boolean} closingAvail whether closing statement information is available\n */\nBankingV1MessageSetInfo.prototype.setClosingAvail = function(closingAvail) {\n  this.closingAvail = closingAvail;\n};\n\n\nBankingV1MessageSetInfo.prototype.getTransferProfile = function() {\n  return this.transferProfile;\n};\nChildAggregate.add(BankingV1MessageSetInfo, {name: \"XFERPROF\", order: 30, attributeType: TransferProfile, readMethod: \"getTransferProfile\", writeMethod: \"setTransferProfile\"});\n\n\nBankingV1MessageSetInfo.prototype.setTransferProfile = function(/*TransferProfile*/ transferProfile) {\n  this.transferProfile = transferProfile;\n};\n\n\nBankingV1MessageSetInfo.prototype.getStopCheckProfile = function() {\n  return this.stopCheckProfile;\n};\nChildAggregate.add(BankingV1MessageSetInfo, {name: \"STPCKPROF\", order: 40, attributeType: StopCheckProfile, readMethod: \"getStopCheckProfile\", writeMethod: \"setStopCheckProfile\"});\n\n\nBankingV1MessageSetInfo.prototype.setStopCheckProfile = function(/*StopCheckProfile*/ stopCheckProfile) {\n  this.stopCheckProfile = stopCheckProfile;\n};\n\n\nBankingV1MessageSetInfo.prototype.getEmailProfile = function() {\n  return this.emailProfile;\n};\nChildAggregate.add(BankingV1MessageSetInfo, {name: \"EMAILPROF\", required: true, order: 50, attributeType: EmailProfile, readMethod: \"getEmailProfile\", writeMethod: \"setEmailProfile\"});\n\n\nBankingV1MessageSetInfo.prototype.setEmailProfile = function(/*EmailProfile*/ emailProfile) {\n  this.emailProfile = emailProfile;\n};\n\n\nBankingV1MessageSetInfo.prototype.getImageProfile = function() {\n  return this.imageProfile;\n};\nChildAggregate.add(BankingV1MessageSetInfo, {name: \"IMAGEPROF\", order: 60, attributeType: ImageProfile, readMethod: \"getImageProfile\", writeMethod: \"setImageProfile\"});\n\n\nBankingV1MessageSetInfo.prototype.setImageProfile = function(/*ImageProfile*/ imageProfile) {\n  this.imageProfile = imageProfile;\n};\n\n\n\n\nmodule.exports = BankingV1MessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar AbstractMessageSetInfo = require(\"../../profile/AbstractMessageSetInfo\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar BillpayV1MessageSetInfo = require(\"./BillpayV1MessageSetInfo\");\n\n/**\n * @class\n * @augments AbstractMessageSetInfo\n */\nfunction BillpayMessageSetInfo () {\n  AbstractMessageSetInfo.call(this);\n\n  /**\n   * @name BillpayMessageSetInfo#version1Info\n   * @type BillpayV1MessageSetInfo\n   * @access private\n   */\n  this.version1Info = null;\n}\n\ninherit(BillpayMessageSetInfo, \"extends\", AbstractMessageSetInfo);\n\n\nAggregate.add(\"BILLPAYMSGSET\", BillpayMessageSetInfo);\n\n\nBillpayMessageSetInfo.prototype.getVersion1Info = function() {\n  return this.version1Info;\n};\nChildAggregate.add(BillpayMessageSetInfo, {order: 0, attributeType: BillpayV1MessageSetInfo, readMethod: \"getVersion1Info\", writeMethod: \"setVersion1Info\"});\n\n\nBillpayMessageSetInfo.prototype.setVersion1Info = function(/*BillpayV1MessageSetInfo*/ version1Info) {\n  this.version1Info = version1Info;\n};\n\n\n\n\nmodule.exports = BillpayMessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar VersionSpecificMessageSetInfo = require(\"../../profile/VersionSpecificMessageSetInfo\");\nvar MessageSetType = require(\"../../MessageSetType\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar ProcessorDayOff = require(\"../../common/ProcessorDayOff\");\n\n/**\n * BillPay Message Set Profile\n * @class\n * @augments VersionSpecificMessageSetInfo\n * See \"Section 12.11.2 OFX Spec\"\n */\nfunction BillpayV1MessageSetInfo () {\n  VersionSpecificMessageSetInfo.call(this);\n\n  /**\n   * @name BillpayV1MessageSetInfo#daysWith\n   * @type Integer\n   * @access private\n   */\n  this.daysWith = null;\n\n  /**\n   * @name BillpayV1MessageSetInfo#defaultDaysToPay\n   * @type Integer\n   * @access private\n   */\n  this.defaultDaysToPay = null;\n\n  /**\n   * @name BillpayV1MessageSetInfo#transferDaysWith\n   * @type Integer\n   * @access private\n   */\n  this.transferDaysWith = null;\n\n  /**\n   * @name BillpayV1MessageSetInfo#transferDefaultDaysToPay\n   * @type Integer\n   * @access private\n   */\n  this.transferDefaultDaysToPay = null;\n\n  /**\n   * @name BillpayV1MessageSetInfo#processorDaysOff\n   * @type ProcessorDayOff[]\n   * @access private\n   */\n  this.processorDaysOff = null;\n\n  /**\n   * @name BillpayV1MessageSetInfo#processorEndTime\n   * @type String\n   * @access private\n   */\n  this.processorEndTime = null;\n\n  /**\n   * @name BillpayV1MessageSetInfo#modelWindow\n   * @type Integer\n   * @access private\n   */\n  this.modelWindow = null;\n\n  /**\n   * @name BillpayV1MessageSetInfo#postProcessorWindow\n   * @type Integer\n   * @access private\n   */\n  this.postProcessorWindow = null;\n\n  /**\n   * @name BillpayV1MessageSetInfo#supportsStatusUpdateViaPaymentModificationResponse\n   * @type Boolean\n   * @access private\n   */\n  this.supportsStatusUpdateViaPaymentModificationResponse = null;\n\n  /**\n   * @name BillpayV1MessageSetInfo#supportsPaymentByAddress\n   * @type Boolean\n   * @access private\n   */\n  this.supportsPaymentByAddress = null;\n\n  /**\n   * @name BillpayV1MessageSetInfo#supportsPaymentByTransfer\n   * @type Boolean\n   * @access private\n   */\n  this.supportsPaymentByTransfer = null;\n\n  /**\n   * @name BillpayV1MessageSetInfo#supportsPaymentByPayeeId\n   * @type Boolean\n   * @access private\n   */\n  this.supportsPaymentByPayeeId = null;\n\n  /**\n   * @name BillpayV1MessageSetInfo#userCanAddPayee\n   * @type Boolean\n   * @access private\n   */\n  this.userCanAddPayee = null;\n\n  /**\n   * @name BillpayV1MessageSetInfo#supportsExtendedPayment\n   * @type Boolean\n   * @access private\n   */\n  this.supportsExtendedPayment = null;\n\n  /**\n   * @name BillpayV1MessageSetInfo#canModifyPayments\n   * @type Boolean\n   * @access private\n   */\n  this.canModifyPayments = null;\n\n  /**\n   * @name BillpayV1MessageSetInfo#canModifyModels\n   * @type Boolean\n   * @access private\n   */\n  this.canModifyModels = null;\n\n  /**\n   * @name BillpayV1MessageSetInfo#supportsDifferentFirstPayment\n   * @type Boolean\n   * @access private\n   */\n  this.supportsDifferentFirstPayment = null;\n\n  /**\n   * @name BillpayV1MessageSetInfo#supportsDifferentLastPayment\n   * @type Boolean\n   * @access private\n   */\n  this.supportsDifferentLastPayment = null;\n\n  /**\n   * @name BillpayV1MessageSetInfo#supportsBillPresentmentContext\n   * @type Boolean\n   * @access private\n   */\n  this.supportsBillPresentmentContext = null;\n}\n\ninherit(BillpayV1MessageSetInfo, \"extends\", VersionSpecificMessageSetInfo);\n\n\nAggregate.add(\"BILLPAYMSGSETV1\", BillpayV1MessageSetInfo);\n\n\nBillpayV1MessageSetInfo.prototype.getMessageSetType = function() {\n  return MessageSetType.payments;\n};\n\n\nBillpayV1MessageSetInfo.prototype.getDaysWith = function() {\n  return this.daysWith;\n};\nElement.add(BillpayV1MessageSetInfo, {name: \"DAYSWITH\", required: true, order: 10, attributeType: Number, readMethod: \"getDaysWith\", writeMethod: \"setDaysWith\"});\n\n\nBillpayV1MessageSetInfo.prototype.setDaysWith = function(/*Integer*/ daysWith) {\n  this.daysWith = daysWith;\n};\n\n\nBillpayV1MessageSetInfo.prototype.getDefaultDaysToPay = function() {\n  return this.defaultDaysToPay;\n};\nElement.add(BillpayV1MessageSetInfo, {name: \"DFLTDAYSTOPAY\", required: true, order: 20, attributeType: Number, readMethod: \"getDefaultDaysToPay\", writeMethod: \"setDefaultDaysToPay\"});\n\n\nBillpayV1MessageSetInfo.prototype.setDefaultDaysToPay = function(/*Integer*/ defaultDaysToPay) {\n  this.defaultDaysToPay = defaultDaysToPay;\n};\n\n\nBillpayV1MessageSetInfo.prototype.getTransferDaysWith = function() {\n  return this.transferDaysWith;\n};\nElement.add(BillpayV1MessageSetInfo, {name: \"XFERDAYSWITH\", required: true, order: 30, attributeType: Number, readMethod: \"getTransferDaysWith\", writeMethod: \"setTransferDaysWith\"});\n\n\nBillpayV1MessageSetInfo.prototype.setTransferDaysWith = function(/*Integer*/ transferDaysWith) {\n  this.transferDaysWith = transferDaysWith;\n};\n\n\nBillpayV1MessageSetInfo.prototype.getTransferDefaultDaysToPay = function() {\n  return this.transferDefaultDaysToPay;\n};\nElement.add(BillpayV1MessageSetInfo, {name: \"XFERDFLTDAYSTOPAY\", required: true, order: 40, attributeType: Number, readMethod: \"getTransferDefaultDaysToPay\", writeMethod: \"setTransferDefaultDaysToPay\"});\n\n\nBillpayV1MessageSetInfo.prototype.setTransferDefaultDaysToPay = function(/*Integer*/ transferDefaultDaysToPay) {\n  this.transferDefaultDaysToPay = transferDefaultDaysToPay;\n};\n\n\nBillpayV1MessageSetInfo.prototype.getProcessorDaysOff = function() {\n  return this.processorDaysOff;\n};\nElement.add(BillpayV1MessageSetInfo, {name: \"PROCDAYSOFF\", order: 50, attributeType: Array, collectionEntryType: ProcessorDayOff, readMethod: \"getProcessorDaysOff\", writeMethod: \"setProcessorDaysOff\"});\n\n\nBillpayV1MessageSetInfo.prototype.setProcessorDaysOff = function(/*ProcessorDayOff[]*/ processorDaysOff) {\n  this.processorDaysOff = processorDaysOff;\n};\n\n\nBillpayV1MessageSetInfo.prototype.getProcessorEndTime = function() {\n  return this.processorEndTime;\n};\nElement.add(BillpayV1MessageSetInfo, {name: \"PROCENDTM\", required: true, order: 60, attributeType: String, readMethod: \"getProcessorEndTime\", writeMethod: \"setProcessorEndTime\"});\n\n\nBillpayV1MessageSetInfo.prototype.setProcessorEndTime = function(/*String*/ processorEndTime) {\n  this.processorEndTime = processorEndTime;\n};\n\n\nBillpayV1MessageSetInfo.prototype.getModelWindow = function() {\n  return this.modelWindow;\n};\nElement.add(BillpayV1MessageSetInfo, {name: \"MODELWND\", required: true, order: 70, attributeType: Number, readMethod: \"getModelWindow\", writeMethod: \"setModelWindow\"});\n\n\nBillpayV1MessageSetInfo.prototype.setModelWindow = function(/*Integer*/ modelWindow) {\n  this.modelWindow = modelWindow;\n};\n\n\nBillpayV1MessageSetInfo.prototype.getPostProcessorWindow = function() {\n  return this.postProcessorWindow;\n};\nElement.add(BillpayV1MessageSetInfo, {name: \"POSTPROCWND\", required: true, order: 80, attributeType: Number, readMethod: \"getPostProcessorWindow\", writeMethod: \"setPostProcessorWindow\"});\n\n\nBillpayV1MessageSetInfo.prototype.setPostProcessorWindow = function(/*Integer*/ postProcessorWindow) {\n  this.postProcessorWindow = postProcessorWindow;\n};\n\n\nBillpayV1MessageSetInfo.prototype.getSupportsStatusUpdateViaPaymentModificationResponse = function() {\n  return this.supportsStatusUpdateViaPaymentModificationResponse;\n};\nElement.add(BillpayV1MessageSetInfo, {name: \"STSVIAMODS\", required: true, order: 90, attributeType: Boolean, readMethod: \"getSupportsStatusUpdateViaPaymentModificationResponse\", writeMethod: \"setSupportsStatusUpdateViaPaymentModificationResponse\"});\n\n\nBillpayV1MessageSetInfo.prototype.setSupportsStatusUpdateViaPaymentModificationResponse = function(/*Boolean*/ supportsStatusUpdateViaPaymentModificationResponse) {\n  this.supportsStatusUpdateViaPaymentModificationResponse = supportsStatusUpdateViaPaymentModificationResponse;\n};\n\n\nBillpayV1MessageSetInfo.prototype.getSupportsPaymentByAddress = function() {\n  return this.supportsPaymentByAddress;\n};\nElement.add(BillpayV1MessageSetInfo, {name: \"PMTBYADDR\", required: true, order: 100, attributeType: Boolean, readMethod: \"getSupportsPaymentByAddress\", writeMethod: \"setSupportsPaymentByAddress\"});\n\n\nBillpayV1MessageSetInfo.prototype.setSupportsPaymentByAddress = function(/*Boolean*/ supportsPaymentByAddress) {\n  this.supportsPaymentByAddress = supportsPaymentByAddress;\n};\n\n\nBillpayV1MessageSetInfo.prototype.getSupportsPaymentByTransfer = function() {\n  return this.supportsPaymentByTransfer;\n};\nElement.add(BillpayV1MessageSetInfo, {name: \"PMTBYXFER\", required: true, order: 110, attributeType: Boolean, readMethod: \"getSupportsPaymentByTransfer\", writeMethod: \"setSupportsPaymentByTransfer\"});\n\n\nBillpayV1MessageSetInfo.prototype.setSupportsPaymentByTransfer = function(/*Boolean*/ supportsPaymentByTransfer) {\n  this.supportsPaymentByTransfer = supportsPaymentByTransfer;\n};\n\n\nBillpayV1MessageSetInfo.prototype.getSupportsPaymentByPayeeId = function() {\n  return this.supportsPaymentByPayeeId;\n};\nElement.add(BillpayV1MessageSetInfo, {name: \"PMTBYPAYEEID\", required: true, order: 120, attributeType: Boolean, readMethod: \"getSupportsPaymentByPayeeId\", writeMethod: \"setSupportsPaymentByPayeeId\"});\n\n\nBillpayV1MessageSetInfo.prototype.setSupportsPaymentByPayeeId = function(/*Boolean*/ supportsPaymentByPayeeId) {\n  this.supportsPaymentByPayeeId = supportsPaymentByPayeeId;\n};\n\n\nBillpayV1MessageSetInfo.prototype.getUserCanAddPayee = function() {\n  return this.userCanAddPayee;\n};\nElement.add(BillpayV1MessageSetInfo, {name: \"CANADDPAYEE\", required: true, order: 130, attributeType: Boolean, readMethod: \"getUserCanAddPayee\", writeMethod: \"setUserCanAddPayee\"});\n\n\nBillpayV1MessageSetInfo.prototype.setUserCanAddPayee = function(/*Boolean*/ userCanAddPayee) {\n  this.userCanAddPayee = userCanAddPayee;\n};\n\n\nBillpayV1MessageSetInfo.prototype.getSupportsExtendedPayment = function() {\n  return this.supportsExtendedPayment;\n};\nElement.add(BillpayV1MessageSetInfo, {name: \"HASEXTDPMT\", required: true, order: 140, attributeType: Boolean, readMethod: \"getSupportsExtendedPayment\", writeMethod: \"setSupportsExtendedPayment\"});\n\n\nBillpayV1MessageSetInfo.prototype.setSupportsExtendedPayment = function(/*Boolean*/ supportsExtendedPayment) {\n  this.supportsExtendedPayment = supportsExtendedPayment;\n};\n\n\nBillpayV1MessageSetInfo.prototype.getCanModifyPayments = function() {\n  return this.canModifyPayments;\n};\nElement.add(BillpayV1MessageSetInfo, {name: \"CANMODPMTS\", required: true, order: 150, attributeType: Boolean, readMethod: \"getCanModifyPayments\", writeMethod: \"setCanModifyPayments\"});\n\n\nBillpayV1MessageSetInfo.prototype.setCanModifyPayments = function(/*Boolean*/ canModifyPayments) {\n  this.canModifyPayments = canModifyPayments;\n};\n\n\nBillpayV1MessageSetInfo.prototype.getCanModifyModels = function() {\n  return this.canModifyModels;\n};\nElement.add(BillpayV1MessageSetInfo, {name: \"CANMODMDLS\", required: true, order: 160, attributeType: Boolean, readMethod: \"getCanModifyModels\", writeMethod: \"setCanModifyModels\"});\n\n\nBillpayV1MessageSetInfo.prototype.setCanModifyModels = function(/*Boolean*/ canModifyModels) {\n  this.canModifyModels = canModifyModels;\n};\n\n\nBillpayV1MessageSetInfo.prototype.getSupportsDifferentFirstPayment = function() {\n  return this.supportsDifferentFirstPayment;\n};\nElement.add(BillpayV1MessageSetInfo, {name: \"DIFFFIRSTPMT\", required: true, order: 170, attributeType: Boolean, readMethod: \"getSupportsDifferentFirstPayment\", writeMethod: \"setSupportsDifferentFirstPayment\"});\n\n\nBillpayV1MessageSetInfo.prototype.setSupportsDifferentFirstPayment = function(/*Boolean*/ supportsDifferentFirstPayment) {\n  this.supportsDifferentFirstPayment = supportsDifferentFirstPayment;\n};\n\n\nBillpayV1MessageSetInfo.prototype.getSupportsDifferentLastPayment = function() {\n  return this.supportsDifferentLastPayment;\n};\nElement.add(BillpayV1MessageSetInfo, {name: \"DIFFLASTPMT\", required: true, order: 180, attributeType: Boolean, readMethod: \"getSupportsDifferentLastPayment\", writeMethod: \"setSupportsDifferentLastPayment\"});\n\n\nBillpayV1MessageSetInfo.prototype.setSupportsDifferentLastPayment = function(/*Boolean*/ supportsDifferentLastPayment) {\n  this.supportsDifferentLastPayment = supportsDifferentLastPayment;\n};\n\n\nBillpayV1MessageSetInfo.prototype.getSupportsBillPresentmentContext = function() {\n  return this.supportsBillPresentmentContext;\n};\nElement.add(BillpayV1MessageSetInfo, {name: \"BILLPUBCONTEXT\", order: 190, attributeType: Boolean, readMethod: \"getSupportsBillPresentmentContext\", writeMethod: \"setSupportsBillPresentmentContext\"});\n\n\nBillpayV1MessageSetInfo.prototype.setSupportsBillPresentmentContext = function(/*Boolean*/ supportsBillPresentmentContext) {\n  this.supportsBillPresentmentContext = supportsBillPresentmentContext;\n};\n\n\n\n\nmodule.exports = BillpayV1MessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar AbstractMessageSetInfo = require(\"../../profile/AbstractMessageSetInfo\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar CreditCardV1MessageSetInfo = require(\"./CreditCardV1MessageSetInfo\");\n\n/**\n * @class\n * @augments AbstractMessageSetInfo\n */\nfunction CreditCardMessageSetInfo () {\n  AbstractMessageSetInfo.call(this);\n\n  /**\n   * @name CreditCardMessageSetInfo#version1Info\n   * @type CreditCardV1MessageSetInfo\n   * @access private\n   */\n  this.version1Info = null;\n}\n\ninherit(CreditCardMessageSetInfo, \"extends\", AbstractMessageSetInfo);\n\n\nAggregate.add(\"CREDITCARDMSGSET\", CreditCardMessageSetInfo);\n\n\nCreditCardMessageSetInfo.prototype.getVersion1Info = function() {\n  return this.version1Info;\n};\nChildAggregate.add(CreditCardMessageSetInfo, {order: 0, attributeType: CreditCardV1MessageSetInfo, readMethod: \"getVersion1Info\", writeMethod: \"setVersion1Info\"});\n\n\nCreditCardMessageSetInfo.prototype.setVersion1Info = function(/*CreditCardV1MessageSetInfo*/ version1Info) {\n  this.version1Info = version1Info;\n};\n\n\n\n\nmodule.exports = CreditCardMessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar VersionSpecificMessageSetInfo = require(\"../../profile/VersionSpecificMessageSetInfo\");\nvar MessageSetType = require(\"../../MessageSetType\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar ImageProfile = require(\"./common/ImageProfile\");\n\n/**\n * Credit Card Message Set Profile\n * @class\n * @augments VersionSpecificMessageSetInfo\n * See \"Section 11.13.3 OFX Spec\"\n */\nfunction CreditCardV1MessageSetInfo () {\n  VersionSpecificMessageSetInfo.call(this);\n\n  /**\n   * @name CreditCardV1MessageSetInfo#closingAvail\n   * @type Boolean\n   * @access private\n   */\n  this.closingAvail = null;\n\n  /**\n   * @name CreditCardV1MessageSetInfo#imageProfile\n   * @type ImageProfile\n   * @access private\n   */\n  this.imageProfile = null;\n}\n\ninherit(CreditCardV1MessageSetInfo, \"extends\", VersionSpecificMessageSetInfo);\n\n\nAggregate.add(\"CREDITCARDMSGSETV1\", CreditCardV1MessageSetInfo);\n\n\nCreditCardV1MessageSetInfo.prototype.getMessageSetType = function() {\n  return MessageSetType.creditcard;\n};\n\n\n/**\n * Closing statement information available\n * @return {Boolean} Boolean\n */\nCreditCardV1MessageSetInfo.prototype.getClosingAvail = function() {\n  return this.closingAvail;\n};\nElement.add(CreditCardV1MessageSetInfo, {name: \"CLOSINGAVAIL\", required: true, order: 20, attributeType: Boolean, readMethod: \"getClosingAvail\", writeMethod: \"setClosingAvail\"});\n\n\nCreditCardV1MessageSetInfo.prototype.setClosingAvail = function(/*Boolean*/ closingAvail) {\n  this.closingAvail = closingAvail;\n};\n\n\n/**\n * Image profile (if supported)\n * @return {ImageProfile} ImageProfile\n */\nCreditCardV1MessageSetInfo.prototype.getImageProfile = function() {\n  return this.imageProfile;\n};\nChildAggregate.add(CreditCardV1MessageSetInfo, {name: \"IMAGEPROF\", order: 10, attributeType: ImageProfile, readMethod: \"getImageProfile\", writeMethod: \"setImageProfile\"});\n\n\nCreditCardV1MessageSetInfo.prototype.setImageProfile = function(/*ImageProfile*/ imageProfile) {\n  this.imageProfile = imageProfile;\n};\n\n\n\n\nmodule.exports = CreditCardV1MessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar AbstractMessageSetInfo = require(\"../../profile/AbstractMessageSetInfo\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar EmailV1MessageSetInfo = require(\"./EmailV1MessageSetInfo\");\n\n/**\n * @class\n * @augments AbstractMessageSetInfo\n */\nfunction EmailMessageSetInfo () {\n  AbstractMessageSetInfo.call(this);\n\n  /**\n   * @name EmailMessageSetInfo#version1Info\n   * @type EmailV1MessageSetInfo\n   * @access private\n   */\n  this.version1Info = null;\n}\n\ninherit(EmailMessageSetInfo, \"extends\", AbstractMessageSetInfo);\n\n\nAggregate.add(\"EMAILMSGSET\", EmailMessageSetInfo);\n\n\nEmailMessageSetInfo.prototype.getVersion1Info = function() {\n  return this.version1Info;\n};\nChildAggregate.add(EmailMessageSetInfo, {order: 0, attributeType: EmailV1MessageSetInfo, readMethod: \"getVersion1Info\", writeMethod: \"setVersion1Info\"});\n\n\nEmailMessageSetInfo.prototype.setVersion1Info = function(/*EmailV1MessageSetInfo*/ version1Info) {\n  this.version1Info = version1Info;\n};\n\n\n\n\nmodule.exports = EmailMessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar VersionSpecificMessageSetInfo = require(\"../../profile/VersionSpecificMessageSetInfo\");\nvar MessageSetType = require(\"../../MessageSetType\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\n\n/**\n * Email Message Set Profile Information\n * @class\n * @augments VersionSpecificMessageSetInfo\n * See \"Section 9.4.2 OFX Spec\"\n */\nfunction EmailV1MessageSetInfo () {\n  VersionSpecificMessageSetInfo.call(this);\n\n  /**\n   * @name EmailV1MessageSetInfo#supportsMail\n   * @type Boolean\n   * @access private\n   */\n  this.supportsMail = null;\n\n  /**\n   * @name EmailV1MessageSetInfo#supportsMimeType\n   * @type Boolean\n   * @access private\n   */\n  this.supportsMimeType = null;\n}\n\ninherit(EmailV1MessageSetInfo, \"extends\", VersionSpecificMessageSetInfo);\n\n\nAggregate.add(\"EMAILMSGSETV1\", EmailV1MessageSetInfo);\n\n\nEmailV1MessageSetInfo.prototype.getMessageSetType = function() {\n  return MessageSetType.email;\n};\n\n\n/**\n * Y if server supports <MAILRQ> request.\n * N if server supports only the <MAILSYNCRQ> request.\n * @return {Boolean} Boolean\n */\nEmailV1MessageSetInfo.prototype.getSupportsMail = function() {\n  return this.supportsMail;\n};\nElement.add(EmailV1MessageSetInfo, {name: \"MAILSUP\", required: true, order: 10, attributeType: Boolean, readMethod: \"getSupportsMail\", writeMethod: \"setSupportsMail\"});\n\n\nEmailV1MessageSetInfo.prototype.setSupportsMail = function(/*Boolean*/ supportsMail) {\n  this.supportsMail = supportsMail;\n};\n\n\n/**\n * Y if server supports get MIME message\n * @return {Boolean} Boolean\n */\nEmailV1MessageSetInfo.prototype.getSupportsMimeType = function() {\n  return this.supportsMimeType;\n};\nElement.add(EmailV1MessageSetInfo, {name: \"GETMIMESUP\", required: true, order: 20, attributeType: Boolean, readMethod: \"getSupportsMimeType\", writeMethod: \"setSupportsMimeType\"});\n\n\nEmailV1MessageSetInfo.prototype.setSupportsMimeType = function(/*Boolean*/ supportsMimeType) {\n  this.supportsMimeType = supportsMimeType;\n};\n\n\n\n\nmodule.exports = EmailV1MessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar AbstractMessageSetInfo = require(\"../../profile/AbstractMessageSetInfo\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar InterbankTransferV1MessageSetInfo = require(\"./InterbankTransferV1MessageSetInfo\");\n\n/**\n * @class\n * @augments AbstractMessageSetInfo\n */\nfunction InterbankTransferMessageSetInfo () {\n  AbstractMessageSetInfo.call(this);\n\n  /**\n   * @name InterbankTransferMessageSetInfo#version1Info\n   * @type InterbankTransferV1MessageSetInfo\n   * @access private\n   */\n  this.version1Info = null;\n}\n\ninherit(InterbankTransferMessageSetInfo, \"extends\", AbstractMessageSetInfo);\n\n\nAggregate.add(\"INTERXFERMSGSET\", InterbankTransferMessageSetInfo);\n\n\nInterbankTransferMessageSetInfo.prototype.getVersion1Info = function() {\n  return this.version1Info;\n};\nChildAggregate.add(InterbankTransferMessageSetInfo, {order: 0, attributeType: InterbankTransferV1MessageSetInfo, readMethod: \"getVersion1Info\", writeMethod: \"setVersion1Info\"});\n\n\nInterbankTransferMessageSetInfo.prototype.setVersion1Info = function(/*InterbankTransferV1MessageSetInfo*/ version1Info) {\n  this.version1Info = version1Info;\n};\n\n\n\n\nmodule.exports = InterbankTransferMessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar VersionSpecificMessageSetInfo = require(\"../../profile/VersionSpecificMessageSetInfo\");\nvar MessageSetType = require(\"../../MessageSetType\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar TransferProfile = require(\"./common/TransferProfile\");\n\n/**\n * Interbank Funds Transfer Message Set Profile\n * @class\n * @augments VersionSpecificMessageSetInfo\n * See \"Section 11.13.4 OFX Spec\"\n */\nfunction InterbankTransferV1MessageSetInfo () {\n  VersionSpecificMessageSetInfo.call(this);\n\n  /**\n   * @name InterbankTransferV1MessageSetInfo#transferProfile\n   * @type TransferProfile\n   * @access private\n   */\n  this.transferProfile = null;\n\n  /**\n   * @name InterbankTransferV1MessageSetInfo#supportsBillPay\n   * @type Boolean\n   * @access private\n   */\n  this.supportsBillPay = null;\n\n  /**\n   * @name InterbankTransferV1MessageSetInfo#cancelWindow\n   * @type Integer\n   * @access private\n   */\n  this.cancelWindow = null;\n\n  /**\n   * @name InterbankTransferV1MessageSetInfo#domesticInterbankTransferFee\n   * @type Double\n   * @access private\n   */\n  this.domesticInterbankTransferFee = null;\n\n  /**\n   * @name InterbankTransferV1MessageSetInfo#internationalInterbankTransferFee\n   * @type Double\n   * @access private\n   */\n  this.internationalInterbankTransferFee = null;\n}\n\ninherit(InterbankTransferV1MessageSetInfo, \"extends\", VersionSpecificMessageSetInfo);\n\n\nAggregate.add(\"INTERXFERMSGSETV1\", InterbankTransferV1MessageSetInfo);\n\n\nInterbankTransferV1MessageSetInfo.prototype.getMessageSetType = function() {\n  return MessageSetType.interbank_transfer;\n};\n\n\nInterbankTransferV1MessageSetInfo.prototype.getTransferProfile = function() {\n  return this.transferProfile;\n};\nChildAggregate.add(InterbankTransferV1MessageSetInfo, {name: \"XFERPROF\", required: true, order: 10, attributeType: TransferProfile, readMethod: \"getTransferProfile\", writeMethod: \"setTransferProfile\"});\n\n\nInterbankTransferV1MessageSetInfo.prototype.setTransferProfile = function(/*TransferProfile*/ transferProfile) {\n  this.transferProfile = transferProfile;\n};\n\n\nInterbankTransferV1MessageSetInfo.prototype.getSupportsBillPay = function() {\n  return this.supportsBillPay;\n};\nElement.add(InterbankTransferV1MessageSetInfo, {name: \"CANBILLPAY\", required: true, order: 20, attributeType: Boolean, readMethod: \"getSupportsBillPay\", writeMethod: \"setSupportsBillPay\"});\n\n\nInterbankTransferV1MessageSetInfo.prototype.setSupportsBillPay = function(/*Boolean*/ supportsBillPay) {\n  this.supportsBillPay = supportsBillPay;\n};\n\n\nInterbankTransferV1MessageSetInfo.prototype.getCancelWindow = function() {\n  return this.cancelWindow;\n};\nElement.add(InterbankTransferV1MessageSetInfo, {name: \"CANCELWND\", required: true, order: 30, attributeType: Number, readMethod: \"getCancelWindow\", writeMethod: \"setCancelWindow\"});\n\n\nInterbankTransferV1MessageSetInfo.prototype.setCancelWindow = function(/*Integer*/ cancelWindow) {\n  this.cancelWindow = cancelWindow;\n};\n\n\nInterbankTransferV1MessageSetInfo.prototype.getDomesticInterbankTransferFee = function() {\n  return this.domesticInterbankTransferFee;\n};\nElement.add(InterbankTransferV1MessageSetInfo, {name: \"DOMXFERFEE\", required: true, order: 40, attributeType: Number, readMethod: \"getDomesticInterbankTransferFee\", writeMethod: \"setDomesticInterbankTransferFee\"});\n\n\nInterbankTransferV1MessageSetInfo.prototype.setDomesticInterbankTransferFee = function(/*Double*/ domesticInterbankTransferFee) {\n  this.domesticInterbankTransferFee = domesticInterbankTransferFee;\n};\n\n\nInterbankTransferV1MessageSetInfo.prototype.getInternationalInterbankTransferFee = function() {\n  return this.internationalInterbankTransferFee;\n};\nElement.add(InterbankTransferV1MessageSetInfo, {name: \"INTLXFERFEE\", required: true, order: 50, attributeType: Number, readMethod: \"getInternationalInterbankTransferFee\", writeMethod: \"setInternationalInterbankTransferFee\"});\n\n\nInterbankTransferV1MessageSetInfo.prototype.setInternationalInterbankTransferFee = function(/*Double*/ internationalInterbankTransferFee) {\n  this.internationalInterbankTransferFee = internationalInterbankTransferFee;\n};\n\n\n\n\nmodule.exports = InterbankTransferV1MessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar AbstractMessageSetInfo = require(\"../../profile/AbstractMessageSetInfo\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar InvestmentV1MessageSetInfo = require(\"./InvestmentV1MessageSetInfo\");\n\n/**\n * @class\n * @augments AbstractMessageSetInfo\n */\nfunction InvestmentMessageSetInfo () {\n  AbstractMessageSetInfo.call(this);\n\n  /**\n   * @name InvestmentMessageSetInfo#version1Info\n   * @type InvestmentV1MessageSetInfo\n   * @access private\n   */\n  this.version1Info = null;\n}\n\ninherit(InvestmentMessageSetInfo, \"extends\", AbstractMessageSetInfo);\n\n\nAggregate.add(\"INVSTMTMSGSET\", InvestmentMessageSetInfo);\n\n\nInvestmentMessageSetInfo.prototype.getVersion1Info = function() {\n  return this.version1Info;\n};\nChildAggregate.add(InvestmentMessageSetInfo, {order: 0, attributeType: InvestmentV1MessageSetInfo, readMethod: \"getVersion1Info\", writeMethod: \"setVersion1Info\"});\n\n\nInvestmentMessageSetInfo.prototype.setVersion1Info = function(/*InvestmentV1MessageSetInfo*/ version1Info) {\n  this.version1Info = version1Info;\n};\n\n\n\n\nmodule.exports = InvestmentMessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar VersionSpecificMessageSetInfo = require(\"../../profile/VersionSpecificMessageSetInfo\");\nvar MessageSetType = require(\"../../MessageSetType\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\n\n/**\n * See \"Section 13.7.1.1, OFX Spec\"\n *\n * @class\n */\nfunction InvestmentV1MessageSetInfo () {\n  VersionSpecificMessageSetInfo.call(this);\n\n  /**\n   * @name InvestmentV1MessageSetInfo#supportsStatementsDownload\n   * @type Boolean\n   * @access private\n   */\n  this.supportsStatementsDownload = null;\n\n  /**\n   * @name InvestmentV1MessageSetInfo#supportsOpenOrdersDownload\n   * @type Boolean\n   * @access private\n   */\n  this.supportsOpenOrdersDownload = null;\n\n  /**\n   * @name InvestmentV1MessageSetInfo#supportsPositionsDownload\n   * @type Boolean\n   * @access private\n   */\n  this.supportsPositionsDownload = null;\n\n  /**\n   * @name InvestmentV1MessageSetInfo#supportsBalanceDownload\n   * @type Boolean\n   * @access private\n   */\n  this.supportsBalanceDownload = null;\n\n  /**\n   * @name InvestmentV1MessageSetInfo#supportsEmail\n   * @type Boolean\n   * @access private\n   */\n  this.supportsEmail = null;\n\n  /**\n   * @name InvestmentV1MessageSetInfo#supports401kInformation\n   * @type Boolean\n   * @access private\n   */\n  this.supports401kInformation = null;\n\n  /**\n   * @name InvestmentV1MessageSetInfo#supportsClosingStatements\n   * @type Boolean\n   * @access private\n   */\n  this.supportsClosingStatements = null;\n}\n\ninherit(InvestmentV1MessageSetInfo, \"extends\", VersionSpecificMessageSetInfo);\n\n\nAggregate.add(\"INVSTMTMSGSETV1\", InvestmentV1MessageSetInfo);\n\n\nInvestmentV1MessageSetInfo.prototype.getMessageSetType = function() {\n  return MessageSetType.investment;\n};\n\n\nInvestmentV1MessageSetInfo.prototype.getSupportsStatementsDownload = function() {\n  return this.supportsStatementsDownload;\n};\nElement.add(InvestmentV1MessageSetInfo, {name: \"TRANDNLD\", required:true, order: 10, attributeType: Boolean, readMethod: \"getSupportsStatementsDownload\", writeMethod: \"setSupportsStatementsDownload\"});\n\n\nInvestmentV1MessageSetInfo.prototype.setSupportsStatementsDownload = function(/*Boolean*/ supportsStatementsDownload) {\n  this.supportsStatementsDownload = supportsStatementsDownload;\n};\n\n\nInvestmentV1MessageSetInfo.prototype.getSupportsOpenOrdersDownload = function() {\n  return this.supportsOpenOrdersDownload;\n};\nElement.add(InvestmentV1MessageSetInfo, {name: \"OODNLD\", required:true, order: 20, attributeType: Boolean, readMethod: \"getSupportsOpenOrdersDownload\", writeMethod: \"setSupportsOpenOrdersDownload\"});\n\n\nInvestmentV1MessageSetInfo.prototype.setSupportsOpenOrdersDownload = function(/*Boolean*/ supportsOpenOrdersDownload) {\n  this.supportsOpenOrdersDownload = supportsOpenOrdersDownload;\n};\n\n\nInvestmentV1MessageSetInfo.prototype.getSupportsPositionsDownload = function() {\n  return this.supportsPositionsDownload;\n};\nElement.add(InvestmentV1MessageSetInfo, {name: \"POSDNLD\", required:true, order: 30, attributeType: Boolean, readMethod: \"getSupportsPositionsDownload\", writeMethod: \"setSupportsPositionsDownload\"});\n\n\nInvestmentV1MessageSetInfo.prototype.setSupportsPositionsDownload = function(/*Boolean*/ supportsPositionsDownload) {\n  this.supportsPositionsDownload = supportsPositionsDownload;\n};\n\n\nInvestmentV1MessageSetInfo.prototype.getSupportsBalanceDownload = function() {\n  return this.supportsBalanceDownload;\n};\nElement.add(InvestmentV1MessageSetInfo, {name: \"BALDNLD\", required:true, order: 40, attributeType: Boolean, readMethod: \"getSupportsBalanceDownload\", writeMethod: \"setSupportsBalanceDownload\"});\n\n\nInvestmentV1MessageSetInfo.prototype.setSupportsBalanceDownload = function(/*Boolean*/ supportsBalanceDownload) {\n  this.supportsBalanceDownload = supportsBalanceDownload;\n};\n\n\nInvestmentV1MessageSetInfo.prototype.getSupportsEmail = function() {\n  return this.supportsEmail;\n};\nElement.add(InvestmentV1MessageSetInfo, {name: \"CANEMAIL\", required:true, order: 50, attributeType: Boolean, readMethod: \"getSupportsEmail\", writeMethod: \"setSupportsEmail\"});\n\n\nInvestmentV1MessageSetInfo.prototype.setSupportsEmail = function(/*Boolean*/ supportsEmail) {\n  this.supportsEmail = supportsEmail;\n};\n\n\nInvestmentV1MessageSetInfo.prototype.getSupports401kInformation = function() {\n  return this.supports401kInformation;\n};\nElement.add(InvestmentV1MessageSetInfo, {name: \"INV401KDNLD\", order: 60, attributeType: Boolean, readMethod: \"getSupports401kInformation\", writeMethod: \"setSupports401kInformation\"});\n\n\nInvestmentV1MessageSetInfo.prototype.setSupports401kInformation = function(/*Boolean*/ supports401kInformation) {\n  this.supports401kInformation = supports401kInformation;\n};\n\n\nInvestmentV1MessageSetInfo.prototype.getSupportsClosingStatements = function() {\n  return this.supportsClosingStatements;\n};\nElement.add(InvestmentV1MessageSetInfo, {name: \"CLOSINGAVAIL\", order: 70, attributeType: Boolean, readMethod: \"getSupportsClosingStatements\", writeMethod: \"setSupportsClosingStatements\"});\n\n\nInvestmentV1MessageSetInfo.prototype.setSupportsClosingStatements = function(/*Boolean*/ supportsClosingStatements) {\n  this.supportsClosingStatements = supportsClosingStatements;\n};\n\n\n\n\nmodule.exports = InvestmentV1MessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar AbstractMessageSetInfo = require(\"../../profile/AbstractMessageSetInfo\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar ProfileV1MessageSetInfo = require(\"./ProfileV1MessageSetInfo\");\n\n/**\n * @class\n * @augments AbstractMessageSetInfo\n */\nfunction ProfileMessageSetInfo () {\n  AbstractMessageSetInfo.call(this);\n\n  /**\n   * @name ProfileMessageSetInfo#version1Info\n   * @type ProfileV1MessageSetInfo\n   * @access private\n   */\n  this.version1Info = null;\n}\n\ninherit(ProfileMessageSetInfo, \"extends\", AbstractMessageSetInfo);\n\n\nAggregate.add(\"PROFMSGSET\", ProfileMessageSetInfo);\n\n\nProfileMessageSetInfo.prototype.getVersion1Info = function() {\n  return this.version1Info;\n};\nChildAggregate.add(ProfileMessageSetInfo, {order: 0, attributeType: ProfileV1MessageSetInfo, readMethod: \"getVersion1Info\", writeMethod: \"setVersion1Info\"});\n\n\nProfileMessageSetInfo.prototype.setVersion1Info = function(/*ProfileV1MessageSetInfo*/ version1Info) {\n  this.version1Info = version1Info;\n};\n\n\n\n\nmodule.exports = ProfileMessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar VersionSpecificMessageSetInfo = require(\"../../profile/VersionSpecificMessageSetInfo\");\nvar MessageSetType = require(\"../../MessageSetType\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\n\n/**\n * @class\n * @augments VersionSpecificMessageSetInfo\n */\nfunction ProfileV1MessageSetInfo () {\n  VersionSpecificMessageSetInfo.call(this);\n}\n\ninherit(ProfileV1MessageSetInfo, \"extends\", VersionSpecificMessageSetInfo);\n\n\nAggregate.add(\"PROFMSGSETV1\", ProfileV1MessageSetInfo);\n\n\nProfileV1MessageSetInfo.prototype.getMessageSetType = function() {\n  return MessageSetType.profile;\n};\n\n\n\n\nmodule.exports = ProfileV1MessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar AbstractMessageSetInfo = require(\"../../profile/AbstractMessageSetInfo\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar SecurityListV1MessageSetInfo = require(\"./SecurityListV1MessageSetInfo\");\n\n/**\n * @class\n * @augments AbstractMessageSetInfo\n */\nfunction SecurityListMessageSetInfo () {\n  AbstractMessageSetInfo.call(this);\n\n  /**\n   * @name SecurityListMessageSetInfo#version1Info\n   * @type SecurityListV1MessageSetInfo\n   * @access private\n   */\n  this.version1Info = null;\n}\n\ninherit(SecurityListMessageSetInfo, \"extends\", AbstractMessageSetInfo);\n\n\nAggregate.add(\"SECLISTMSGSET\", SecurityListMessageSetInfo);\n\n\nSecurityListMessageSetInfo.prototype.getVersion1Info = function() {\n  return this.version1Info;\n};\nChildAggregate.add(SecurityListMessageSetInfo, {order: 0, attributeType: SecurityListV1MessageSetInfo, readMethod: \"getVersion1Info\", writeMethod: \"setVersion1Info\"});\n\n\nSecurityListMessageSetInfo.prototype.setVersion1Info = function(/*SecurityListV1MessageSetInfo*/ version1Info) {\n  this.version1Info = version1Info;\n};\n\n\n\n\nmodule.exports = SecurityListMessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar VersionSpecificMessageSetInfo = require(\"../../profile/VersionSpecificMessageSetInfo\");\nvar MessageSetType = require(\"../../MessageSetType\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\n\n/**\n * See \"Section 13.7.2.1, OFX Spec\"\n *\n * @class\n * @augments VersionSpecificMessageSetInfo\n */\nfunction SecurityListV1MessageSetInfo () {\n  VersionSpecificMessageSetInfo.call(this);\n\n  /**\n   * @name SecurityListV1MessageSetInfo#supportsSecurityListDownload\n   * @type Boolean\n   * @access private\n   */\n  this.supportsSecurityListDownload = null;\n}\n\ninherit(SecurityListV1MessageSetInfo, \"extends\", VersionSpecificMessageSetInfo);\n\n\nAggregate.add(\"SECLISTMSGSETV1\", SecurityListV1MessageSetInfo);\n\n\nSecurityListV1MessageSetInfo.prototype.getMessageSetType = function() {\n  return MessageSetType.investment_security;\n};\n\n\nSecurityListV1MessageSetInfo.prototype.getSupportsSecurityListDownload = function() {\n  return this.supportsSecurityListDownload;\n};\nElement.add(SecurityListV1MessageSetInfo, {name: \"SECLISTRQDNLD\", required:true, order: 10, attributeType: Boolean, readMethod: \"getSupportsSecurityListDownload\", writeMethod: \"setSupportsSecurityListDownload\"});\n\n\nSecurityListV1MessageSetInfo.prototype.setSupportsSecurityListDownload = function(/*Boolean*/ supportsSecurityListDownload) {\n  this.supportsSecurityListDownload = supportsSecurityListDownload;\n};\n\n\n\n\nmodule.exports = SecurityListV1MessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar AbstractMessageSetInfo = require(\"../../profile/AbstractMessageSetInfo\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar SignOnV1MessageSetInfo = require(\"./SignOnV1MessageSetInfo\");\n\n/**\n * @class\n * @augments AbstractMessageSetInfo\n */\nfunction SignOnMessageSetInfo () {\n  AbstractMessageSetInfo.call(this);\n\n  /**\n   * @name SignOnMessageSetInfo#version1Info\n   * @type SignOnV1MessageSetInfo\n   * @access private\n   */\n  this.version1Info = null;\n}\n\ninherit(SignOnMessageSetInfo, \"extends\", AbstractMessageSetInfo);\n\n\nAggregate.add(\"SIGNONMSGSET\", SignOnMessageSetInfo);\n\n\nSignOnMessageSetInfo.prototype.getVersion1Info = function() {\n  return this.version1Info;\n};\nChildAggregate.add(SignOnMessageSetInfo, {order: 0, attributeType: SignOnV1MessageSetInfo, readMethod: \"getVersion1Info\", writeMethod: \"setVersion1Info\"});\n\n\nSignOnMessageSetInfo.prototype.setVersion1Info = function(/*SignOnV1MessageSetInfo*/ version1Info) {\n  this.version1Info = version1Info;\n};\n\n\n\n\nmodule.exports = SignOnMessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar MessageSetType = require(\"../../MessageSetType\");\nvar VersionSpecificMessageSetInfo = require(\"../../profile/VersionSpecificMessageSetInfo\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\n\n/**\n * @class\n * @augments VersionSpecificMessageSetInfo\n */\nfunction SignOnV1MessageSetInfo () {\n  VersionSpecificMessageSetInfo.call(this);\n}\n\ninherit(SignOnV1MessageSetInfo, \"extends\", VersionSpecificMessageSetInfo);\n\n\nAggregate.add(\"SIGNONMSGSETV1\", SignOnV1MessageSetInfo);\n\n\nSignOnV1MessageSetInfo.prototype.getMessageSetType = function() {\n  return MessageSetType.signon;\n};\n\n\n\n\nmodule.exports = SignOnV1MessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar AbstractMessageSetInfo = require(\"../../profile/AbstractMessageSetInfo\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar SignupV1MessageSetInfo = require(\"./SignupV1MessageSetInfo\");\n\n/**\n * @class\n * @augments AbstractMessageSetInfo\n */\nfunction SignupMessageSetInfo () {\n  AbstractMessageSetInfo.call(this);\n\n  /**\n   * @name SignupMessageSetInfo#version1Info\n   * @type SignupV1MessageSetInfo\n   * @access private\n   */\n  this.version1Info = null;\n}\n\ninherit(SignupMessageSetInfo, \"extends\", AbstractMessageSetInfo);\n\n\nAggregate.add(\"SIGNUPMSGSET\", SignupMessageSetInfo);\n\n\nSignupMessageSetInfo.prototype.getVersion1Info = function() {\n  return this.version1Info;\n};\nChildAggregate.add(SignupMessageSetInfo, {order: 0, attributeType: SignupV1MessageSetInfo, readMethod: \"getVersion1Info\", writeMethod: \"setVersion1Info\"});\n\n\nSignupMessageSetInfo.prototype.setVersion1Info = function(/*SignupV1MessageSetInfo*/ version1Info) {\n  this.version1Info = version1Info;\n};\n\n\n\n\nmodule.exports = SignupMessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar VersionSpecificMessageSetInfo = require(\"../../profile/VersionSpecificMessageSetInfo\");\nvar MessageSetType = require(\"../../MessageSetType\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar ClientEnrollment = require(\"./signup/ClientEnrollment\");\nvar WebEnrollment = require(\"./signup/WebEnrollment\");\nvar OtherEnrollment = require(\"./signup/OtherEnrollment\");\n\n/**\n * Servers use the Signup Message Set Profile Information to define how enrollment should proceed.\n *\n * This aggregate should contain 1 Enrollment option among <CLIENTENROLL>, <WEBENROLL>, or <OTHERENROLL>.\n * todo: review how best to enforce this constraint\n *\n * @class\n * @augments VersionSpecificMessageSetInfo\n * See \"Section 8.8 OFX Spec\"\n */\nfunction SignupV1MessageSetInfo () {\n  VersionSpecificMessageSetInfo.call(this);\n\n  /**\n   * @name SignupV1MessageSetInfo#clientEnrollment\n   * @type ClientEnrollment\n   * @access private\n   */\n  this.clientEnrollment = null;\n\n  /**\n   * @name SignupV1MessageSetInfo#webEnrollment\n   * @type WebEnrollment\n   * @access private\n   */\n  this.webEnrollment = null;\n\n  /**\n   * @name SignupV1MessageSetInfo#otherEnrollment\n   * @type OtherEnrollment\n   * @access private\n   */\n  this.otherEnrollment = null;\n\n  /**\n   * @name SignupV1MessageSetInfo#supportsClientUserInfoChanges\n   * @type Boolean\n   * @access private\n   */\n  this.supportsClientUserInfoChanges = null;\n\n  /**\n   * @name SignupV1MessageSetInfo#supportsAvailableAccounts\n   * @type Boolean\n   * @access private\n   */\n  this.supportsAvailableAccounts = null;\n\n  /**\n   * @name SignupV1MessageSetInfo#supportsClientServiceActivationRequests\n   * @type Boolean\n   * @access private\n   */\n  this.supportsClientServiceActivationRequests = null;\n}\n\ninherit(SignupV1MessageSetInfo, \"extends\", VersionSpecificMessageSetInfo);\n\n\nAggregate.add(\"SIGNUPMSGSETV1\", SignupV1MessageSetInfo);\n\n\nSignupV1MessageSetInfo.prototype.getMessageSetType = function() {\n  return MessageSetType.signup;\n};\n\n\nSignupV1MessageSetInfo.prototype.getClientEnrollment = function() {\n  return this.clientEnrollment;\n};\nChildAggregate.add(SignupV1MessageSetInfo, {name: \"CLIENTENROLL\", order: 10, attributeType: ClientEnrollment, readMethod: \"getClientEnrollment\", writeMethod: \"setClientEnrollment\"});\n\n\nSignupV1MessageSetInfo.prototype.setClientEnrollment = function(/*ClientEnrollment*/ clientEnrollment) {\n  this.clientEnrollment = clientEnrollment;\n};\n\n\nSignupV1MessageSetInfo.prototype.getWebEnrollment = function() {\n  return this.webEnrollment;\n};\nChildAggregate.add(SignupV1MessageSetInfo, {name: \"WEBENROLL\", order: 20, attributeType: WebEnrollment, readMethod: \"getWebEnrollment\", writeMethod: \"setWebEnrollment\"});\n\n\nSignupV1MessageSetInfo.prototype.setWebEnrollment = function(/*WebEnrollment*/ webEnrollment) {\n  this.webEnrollment = webEnrollment;\n};\n\n\nSignupV1MessageSetInfo.prototype.getOtherEnrollment = function() {\n  return this.otherEnrollment;\n};\nChildAggregate.add(SignupV1MessageSetInfo, {name: \"OTHERENROLL\", order: 30, attributeType: OtherEnrollment, readMethod: \"getOtherEnrollment\", writeMethod: \"setOtherEnrollment\"});\n\n\nSignupV1MessageSetInfo.prototype.setOtherEnrollment = function(/*OtherEnrollment*/ otherEnrollment) {\n  this.otherEnrollment = otherEnrollment;\n};\n\n\n/**\n * Y if server supports client-based user information changes,\n * @return {Boolean} Boolean\n */\nSignupV1MessageSetInfo.prototype.getSupportsClientUserInfoChanges = function() {\n  return this.supportsClientUserInfoChanges;\n};\nElement.add(SignupV1MessageSetInfo, {name: \"CHGUSERINFO\", required: true, order: 40, attributeType: Boolean, readMethod: \"getSupportsClientUserInfoChanges\", writeMethod: \"setSupportsClientUserInfoChanges\"});\n\n\nSignupV1MessageSetInfo.prototype.setSupportsClientUserInfoChanges = function(/*Boolean*/ supportsClientUserInfoChanges) {\n  this.supportsClientUserInfoChanges = supportsClientUserInfoChanges;\n};\n\n\n/**\n * Y if server can provide information on accounts with SVCSTATUS available,\n * N means client should expect to ask user for specific account information\n * @return {Boolean} Boolean\n */\nSignupV1MessageSetInfo.prototype.getSupportsAvailableAccounts = function() {\n  return this.supportsAvailableAccounts;\n};\nElement.add(SignupV1MessageSetInfo, {name: \"AVAILACCTS\", required: true, order: 50, attributeType: Boolean, readMethod: \"getSupportsAvailableAccounts\", writeMethod: \"setSupportsAvailableAccounts\"});\n\n\nSignupV1MessageSetInfo.prototype.setSupportsAvailableAccounts = function(/*Boolean*/ supportsAvailableAccounts) {\n  this.supportsAvailableAccounts = supportsAvailableAccounts;\n};\n\n\n/**\n * Y if server allows clients to make service activation requests (<ACCTRQ>),\n * N if server will only advise clients via synchronization of service additions,\n * changes, or deletions.\n * @return {Boolean} Boolean\n */\nSignupV1MessageSetInfo.prototype.getSupportsClientServiceActivationRequests = function() {\n  return this.supportsClientServiceActivationRequests;\n};\nElement.add(SignupV1MessageSetInfo, {name: \"CLIENTACTREQ\", required: true, order: 60, attributeType: Boolean, readMethod: \"getSupportsClientServiceActivationRequests\", writeMethod: \"setSupportsClientServiceActivationRequests\"});\n\n\nSignupV1MessageSetInfo.prototype.setSupportsClientServiceActivationRequests = function(/*Boolean*/ supportsClientServiceActivationRequests) {\n  this.supportsClientServiceActivationRequests = supportsClientServiceActivationRequests;\n};\n\n\n\n\nmodule.exports = SignupV1MessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar AbstractMessageSetInfo = require(\"../../profile/AbstractMessageSetInfo\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar WireTransferV1MessageSetInfo = require(\"./WireTransferV1MessageSetInfo\");\n\n/**\n * @class\n * @augments AbstractMessageSetInfo\n */\nfunction WireTransferMessageSetInfo () {\n  AbstractMessageSetInfo.call(this);\n\n  /**\n   * @name WireTransferMessageSetInfo#version1Info\n   * @type WireTransferV1MessageSetInfo\n   * @access private\n   */\n  this.version1Info = null;\n}\n\ninherit(WireTransferMessageSetInfo, \"extends\", AbstractMessageSetInfo);\n\n\nAggregate.add(\"WIREXFERMSGSET\", WireTransferMessageSetInfo);\n\n\nWireTransferMessageSetInfo.prototype.getVersion1Info = function() {\n  return this.version1Info;\n};\nChildAggregate.add(WireTransferMessageSetInfo, {order: 0, attributeType: WireTransferV1MessageSetInfo, readMethod: \"getVersion1Info\", writeMethod: \"setVersion1Info\"});\n\n\nWireTransferMessageSetInfo.prototype.setVersion1Info = function(/*WireTransferV1MessageSetInfo*/ version1Info) {\n  this.version1Info = version1Info;\n};\n\n\n\n\nmodule.exports = WireTransferMessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar VersionSpecificMessageSetInfo = require(\"../../profile/VersionSpecificMessageSetInfo\");\nvar MessageSetType = require(\"../../MessageSetType\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar ProcessorDayOff = require(\"../../common/ProcessorDayOff\");\n\n/**\n * Wire Transfer Message Set Profile\n * @class\n * @augments VersionSpecificMessageSetInfo\n * See \"Section 11.13.5 OFX Spec\"\n */\nfunction WireTransferV1MessageSetInfo () {\n  VersionSpecificMessageSetInfo.call(this);\n\n  /**\n   * @name WireTransferV1MessageSetInfo#processorDaysOff\n   * @type ProcessorDayOff[]\n   * @access private\n   */\n  this.processorDaysOff = null;\n\n  /**\n   * @name WireTransferV1MessageSetInfo#processEndTime\n   * @type String\n   * @access private\n   */\n  this.processEndTime = null;\n\n  /**\n   * @name WireTransferV1MessageSetInfo#supportsScheduledTransfers\n   * @type Boolean\n   * @access private\n   */\n  this.supportsScheduledTransfers = null;\n\n  /**\n   * @name WireTransferV1MessageSetInfo#domesticWireTransferFee\n   * @type Double\n   * @access private\n   */\n  this.domesticWireTransferFee = null;\n\n  /**\n   * @name WireTransferV1MessageSetInfo#internationalWireTransferFee\n   * @type Double\n   * @access private\n   */\n  this.internationalWireTransferFee = null;\n}\n\ninherit(WireTransferV1MessageSetInfo, \"extends\", VersionSpecificMessageSetInfo);\n\n\nAggregate.add(\"WIREXFERMSGSETV1\", WireTransferV1MessageSetInfo);\n\n\nWireTransferV1MessageSetInfo.prototype.getMessageSetType = function() {\n  return MessageSetType.wire_transfer;\n};\n\n\nWireTransferV1MessageSetInfo.prototype.getProcessorDaysOff = function() {\n  return this.processorDaysOff;\n};\nElement.add(WireTransferV1MessageSetInfo, {name: \"PROCDAYSOFF\", order: 10, attributeType: Array, collectionEntryType: ProcessorDayOff, readMethod: \"getProcessorDaysOff\", writeMethod: \"setProcessorDaysOff\"});\n\n\nWireTransferV1MessageSetInfo.prototype.setProcessorDaysOff = function(/*ProcessorDayOff[]*/ processorDaysOff) {\n  this.processorDaysOff = processorDaysOff;\n};\n\n\nWireTransferV1MessageSetInfo.prototype.getProcessEndTime = function() {\n  return this.processEndTime;\n};\nElement.add(WireTransferV1MessageSetInfo, {name: \"PROCENDTM\", required: true, order: 20, attributeType: String, readMethod: \"getProcessEndTime\", writeMethod: \"setProcessEndTime\"});\n\n\nWireTransferV1MessageSetInfo.prototype.setProcessEndTime = function(/*String*/ processEndTime) {\n  this.processEndTime = processEndTime;\n};\n\n\nWireTransferV1MessageSetInfo.prototype.getSupportsScheduledTransfers = function() {\n  return this.supportsScheduledTransfers;\n};\nElement.add(WireTransferV1MessageSetInfo, {name: \"CANSCHED\", required: true, order: 30, attributeType: Boolean, readMethod: \"getSupportsScheduledTransfers\", writeMethod: \"setSupportsScheduledTransfers\"});\n\n\nWireTransferV1MessageSetInfo.prototype.setSupportsScheduledTransfers = function(/*Boolean*/ supportsScheduledTransfers) {\n  this.supportsScheduledTransfers = supportsScheduledTransfers;\n};\n\n\nWireTransferV1MessageSetInfo.prototype.getDomesticWireTransferFee = function() {\n  return this.domesticWireTransferFee;\n};\nElement.add(WireTransferV1MessageSetInfo, {name: \"DOMXFERFEE\", required: true, order: 40, attributeType: Number, readMethod: \"getDomesticWireTransferFee\", writeMethod: \"setDomesticWireTransferFee\"});\n\n\nWireTransferV1MessageSetInfo.prototype.setDomesticWireTransferFee = function(/*Double*/ domesticWireTransferFee) {\n  this.domesticWireTransferFee = domesticWireTransferFee;\n};\n\n\nWireTransferV1MessageSetInfo.prototype.getInternationalWireTransferFee = function() {\n  return this.internationalWireTransferFee;\n};\nElement.add(WireTransferV1MessageSetInfo, {name: \"INTLXFERFEE\", required: true, order: 50, attributeType: Number, readMethod: \"getInternationalWireTransferFee\", writeMethod: \"setInternationalWireTransferFee\"});\n\n\nWireTransferV1MessageSetInfo.prototype.setInternationalWireTransferFee = function(/*Double*/ internationalWireTransferFee) {\n  this.internationalWireTransferFee = internationalWireTransferFee;\n};\n\n\n\n\nmodule.exports = WireTransferV1MessageSetInfo;\n","/*\n * Copyright 2012 TheStash\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../../../meta/Aggregate\");\nvar Element = require(\"../../../../../meta/Element\");\n\n/**\n * Email Profile\n * @class\n * See \"Section 11.13.2.3 OFX Spec\"\n */\nfunction EmailProfile () {\n\n  /**\n   * @name EmailProfile#canEmail\n   * @type Boolean\n   * @access private\n   */\n  this.canEmail = null;\n\n  /**\n   * @name EmailProfile#canNotify\n   * @type Boolean\n   * @access private\n   */\n  this.canNotify = null;\n}\n\n\n\nAggregate.add(\"EMAILPROF\", EmailProfile);\n\n\nEmailProfile.prototype.getCanEmail = function() {\n  return this.canEmail;\n};\nElement.add(EmailProfile, {name: \"CANEMAIL\", required: true, order: 10, attributeType: Boolean, readMethod: \"getCanEmail\", writeMethod: \"setCanEmail\"});\n\n\nEmailProfile.prototype.setCanEmail = function(/*Boolean*/ canEmail) {\n  this.canEmail = canEmail;\n};\n\n\nEmailProfile.prototype.getCanNotify = function() {\n  return this.canNotify;\n};\nElement.add(EmailProfile, {name: \"CANNOTIFY\", required: true, order: 20, attributeType: Boolean, readMethod: \"getCanNotify\", writeMethod: \"setCanNotify\"});\n\n\nEmailProfile.prototype.setCanNotify = function(/*Boolean*/ canNotify) {\n  this.canNotify = canNotify;\n};\n\n\n\n\nmodule.exports = EmailProfile;\n","/*\n * Copyright 2012 TheStash\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../../../meta/Aggregate\");\nvar Element = require(\"../../../../../meta/Element\");\nvar ProcessorDayOff = require(\"../../../common/ProcessorDayOff\");\n\n/**\n * Stop Check Profile\n * @class\n * See \"Section 11.13.2.3 OFX Spec\"\n */\nfunction StopCheckProfile () {\n\n  /**\n   * @name StopCheckProfile#processorDaysOff\n   * @type ProcessorDayOff[]\n   * @access private\n   */\n  this.processorDaysOff = null;\n\n  /**\n   * @name StopCheckProfile#processEndTime\n   * @type String\n   * @access private\n   */\n  this.processEndTime = null;\n\n  /**\n   * @name StopCheckProfile#canUseRange\n   * @type Boolean\n   * @access private\n   */\n  this.canUseRange = null;\n\n  /**\n   * @name StopCheckProfile#canUseDescription\n   * @type Boolean\n   * @access private\n   */\n  this.canUseDescription = null;\n\n  /**\n   * @name StopCheckProfile#stopCheckFee\n   * @type Double\n   * @access private\n   */\n  this.stopCheckFee = null;\n}\n\n\n\nAggregate.add(\"STPCHKPROF\", StopCheckProfile);\n\n\n/**\n * Days of week that no processing occurs: MONDAY, TUESDAY, WEDNESDAY, THURSDAY,\n * FRIDAY, SATURDAY, or SUNDAY. 0 or more <PROCDAYSOFF> can be sent.\n * @return {ProcessorDayOff[]} List of days during the week that no processing occurs.\n */\nStopCheckProfile.prototype.getProcessorDaysOff = function() {\n  return this.processorDaysOff;\n};\nElement.add(StopCheckProfile, {name: \"PROCDAYSOFF\", order: 0, attributeType: Array, collectionEntryType: ProcessorDayOff, readMethod: \"getProcessorDaysOff\", writeMethod: \"setProcessorDaysOff\"});\n\n\nStopCheckProfile.prototype.setProcessorDaysOff = function(/*ProcessorDayOff[]*/ processorDaysOff) {\n  this.processorDaysOff = processorDaysOff;\n};\n\n\n/**\n * Gets time of day that day's processing ends.\n *\n * Time formatted as \"HHMMSS.XXX[gmt offset[:tz name]]\",\n * the milliseconds and time zone are still optional, and default to GMT.\n * See \"Section 3.2.8.3 OFX Spec\"\n * @return {String} Time String formatted as \"HHMMSS.XXX[gmt offset[:tz name]]\"\n */\nStopCheckProfile.prototype.getProcessEndTime = function() {\n  return this.processEndTime;\n};\nElement.add(StopCheckProfile, {name: \"PROCENDTM\", required: true, order: 10, attributeType: String, readMethod: \"getProcessEndTime\", writeMethod: \"setProcessEndTime\"});\n\n\n/**\n * Sets the time of day that day's processing ends.\n *\n * Time formatted as \"HHMMSS.XXX[gmt offset[:tz name]]\",\n * the milliseconds and time zone are still optional, and default to GMT.\n\n * See \"Section 3.2.8.3 OFX Spec\"\n * @param {String} processEndTime formatted as \"HHMMSS.XXX[gmt offset[:tz name]]\"\n */\nStopCheckProfile.prototype.setProcessEndTime = function(processEndTime) {\n  this.processEndTime = processEndTime;\n};\n\n\nStopCheckProfile.prototype.getCanUseRange = function() {\n  return this.canUseRange;\n};\nElement.add(StopCheckProfile, {name: \"CANUSERANGE\", required: true, order: 20, attributeType: Boolean, readMethod: \"getCanUseRange\", writeMethod: \"setCanUseRange\"});\n\n\nStopCheckProfile.prototype.setCanUseRange = function(/*Boolean*/ canUseRange) {\n  this.canUseRange = canUseRange;\n};\n\n\nStopCheckProfile.prototype.getCanUseDescription = function() {\n  return this.canUseDescription;\n};\nElement.add(StopCheckProfile, {name: \"CANUSEDESC\", required: true, order: 30, attributeType: Boolean, readMethod: \"getCanUseDescription\", writeMethod: \"setCanUseDescription\"});\n\n\nStopCheckProfile.prototype.setCanUseDescription = function(/*Boolean*/ canUseDescription) {\n  this.canUseDescription = canUseDescription;\n};\n\n\nStopCheckProfile.prototype.getStopCheckFee = function() {\n  return this.stopCheckFee;\n};\nElement.add(StopCheckProfile, {name: \"STPCHKFEE\", required: true, order: 40, attributeType: Number, readMethod: \"getStopCheckFee\", writeMethod: \"setStopCheckFee\"});\n\n\nStopCheckProfile.prototype.setStopCheckFee = function(/*Double*/ stopCheckFee) {\n  this.stopCheckFee = stopCheckFee;\n};\n\n\n\n\nmodule.exports = StopCheckProfile;\n","\"use strict\";\n\nmodule.exports = {\n  EmailProfile: require(\"./EmailProfile\"),\n  StopCheckProfile: require(\"./StopCheckProfile\"),\n};\n","/*\n * Copyright 2012 TheStash\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../../../meta/Aggregate\");\nvar Element = require(\"../../../../../meta/Element\");\n\n/**\n * Image Profile\n * @class\n * See \"Section 3.1.6.2 OFX Spec\"\n */\nfunction ImageProfile () {\n\n  /**\n   * @name ImageProfile#closingImageAvailable\n   * @type Boolean\n   * @access private\n   */\n  this.closingImageAvailable = null;\n\n  /**\n   * @name ImageProfile#transactionImageAvailable\n   * @type Boolean\n   * @access private\n   */\n  this.transactionImageAvailable = null;\n}\n\n\n\nAggregate.add(\"IMAGEPROF\", ImageProfile);\n\n\nImageProfile.prototype.getClosingImageAvailable = function() {\n  return this.closingImageAvailable;\n};\nElement.add(ImageProfile, {name: \"CLOSINGIMGAVAIL\", required: true, order: 10, attributeType: Boolean, readMethod: \"getClosingImageAvailable\", writeMethod: \"setClosingImageAvailable\"});\n\n\nImageProfile.prototype.setClosingImageAvailable = function(/*Boolean*/ closingImageAvailable) {\n  this.closingImageAvailable = closingImageAvailable;\n};\n\n\nImageProfile.prototype.getTransactionImageAvailable = function() {\n  return this.transactionImageAvailable;\n};\nElement.add(ImageProfile, {name: \"TRANIMGAVAIL\", required: true, order: 20, attributeType: Boolean, readMethod: \"getTransactionImageAvailable\", writeMethod: \"setTransactionImageAvailable\"});\n\n\nImageProfile.prototype.setTransactionImageAvailable = function(/*Boolean*/ transactionImageAvailable) {\n  this.transactionImageAvailable = transactionImageAvailable;\n};\n\n\n\n\nmodule.exports = ImageProfile;\n","/*\n * Copyright 2012 TheStash\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../../../meta/Aggregate\");\nvar Element = require(\"../../../../../meta/Element\");\nvar ProcessorDayOff = require(\"../../../common/ProcessorDayOff\");\n\n/**\n * Funds Transfer Profile\n * @class\n * See \"Section 11.13.2.2 OFX Spec\"\n */\nfunction TransferProfile () {\n\n  /**\n   * @name TransferProfile#processorDaysOff\n   * @type ProcessorDayOff[]\n   * @access private\n   */\n  this.processorDaysOff = null;\n\n  /**\n   * @name TransferProfile#processEndTime\n   * @type String\n   * @access private\n   */\n  this.processEndTime = null;\n\n  /**\n   * @name TransferProfile#supportsScheduledTransfers\n   * @type Boolean\n   * @access private\n   */\n  this.supportsScheduledTransfers = null;\n\n  /**\n   * @name TransferProfile#supportsRecurringTransfers\n   * @type Boolean\n   * @access private\n   */\n  this.supportsRecurringTransfers = null;\n\n  /**\n   * @name TransferProfile#supportsLoanTransfers\n   * @type Boolean\n   * @access private\n   */\n  this.supportsLoanTransfers = null;\n\n  /**\n   * @name TransferProfile#supportsScheduledLoanTransfers\n   * @type Boolean\n   * @access private\n   */\n  this.supportsScheduledLoanTransfers = null;\n\n  /**\n   * @name TransferProfile#supportsRecurringLoanTransfers\n   * @type Boolean\n   * @access private\n   */\n  this.supportsRecurringLoanTransfers = null;\n\n  /**\n   * @name TransferProfile#supportsTransferModification\n   * @type Boolean\n   * @access private\n   */\n  this.supportsTransferModification = null;\n\n  /**\n   * @name TransferProfile#supportsModelModification\n   * @type Boolean\n   * @access private\n   */\n  this.supportsModelModification = null;\n\n  /**\n   * @name TransferProfile#modelWindow\n   * @type Integer\n   * @access private\n   */\n  this.modelWindow = null;\n\n  /**\n   * @name TransferProfile#withdrawnDays\n   * @type Integer\n   * @access private\n   */\n  this.withdrawnDays = null;\n\n  /**\n   * @name TransferProfile#defaultDaysToPay\n   * @type Integer\n   * @access private\n   */\n  this.defaultDaysToPay = null;\n}\n\n\n\nAggregate.add(\"XFERPROF\", TransferProfile);\n\n\n/**\n * Days of week that no processing occurs: MONDAY, TUESDAY, WEDNESDAY, THURSDAY,\n * FRIDAY, SATURDAY, or SUNDAY. 0 or more <PROCDAYSOFF> can be sent.\n * @return {ProcessorDayOff[]} List of days during the week that no processing occurs.\n */\nTransferProfile.prototype.getProcessorDaysOff = function() {\n  return this.processorDaysOff;\n};\nElement.add(TransferProfile, {name: \"PROCDAYSOFF\", order: 0, attributeType: Array, collectionEntryType: ProcessorDayOff, readMethod: \"getProcessorDaysOff\", writeMethod: \"setProcessorDaysOff\"});\n\n\nTransferProfile.prototype.setProcessorDaysOff = function(/*ProcessorDayOff[]*/ processorDaysOff) {\n  this.processorDaysOff = processorDaysOff;\n};\n\n\n/**\n * Gets time of day that day's processing ends.\n *\n * Time formatted as \"HHMMSS.XXX[gmt offset[:tz name]]\",\n * the milliseconds and time zone are still optional, and default to GMT.\n * See \"Section 3.2.8.3 OFX Spec\"\n * @return {String} Time String formatted as \"HHMMSS.XXX[gmt offset[:tz name]]\"\n */\nTransferProfile.prototype.getProcessEndTime = function() {\n  return this.processEndTime;\n};\nElement.add(TransferProfile, {name: \"PROCENDTM\", required: true, order: 10, attributeType: String, readMethod: \"getProcessEndTime\", writeMethod: \"setProcessEndTime\"});\n\n\n/**\n * Sets the time of day that day's processing ends.\n *\n * Time formatted as \"HHMMSS.XXX[gmt offset[:tz name]]\",\n * the milliseconds and time zone are still optional, and default to GMT.\n\n * See \"Section 3.2.8.3 OFX Spec\"\n * @param {String} processEndTime formatted as \"HHMMSS.XXX[gmt offset[:tz name]]\"\n */\nTransferProfile.prototype.setProcessEndTime = function(processEndTime) {\n  this.processEndTime = processEndTime;\n};\n\n\nTransferProfile.prototype.getSupportsScheduledTransfers = function() {\n  return this.supportsScheduledTransfers;\n};\nElement.add(TransferProfile, {name: \"CANSCHED\", required: true, order: 20, attributeType: Boolean, readMethod: \"getSupportsScheduledTransfers\", writeMethod: \"setSupportsScheduledTransfers\"});\n\n\nTransferProfile.prototype.setSupportsScheduledTransfers = function(/*Boolean*/ supportsScheduledTransfers) {\n  this.supportsScheduledTransfers = supportsScheduledTransfers;\n};\n\n\n/**\n * Requires <CANSCHED>\n * @return {Boolean} Boolean whether supports recurring transfers\n */\nTransferProfile.prototype.getSupportsRecurringTransfers = function() {\n  return this.supportsRecurringTransfers;\n};\nElement.add(TransferProfile, {name: \"CANRECUR\", required: true, order: 30, attributeType: Boolean, readMethod: \"getSupportsRecurringTransfers\", writeMethod: \"setSupportsRecurringTransfers\"});\n\n\nTransferProfile.prototype.setSupportsRecurringTransfers = function(/*Boolean*/ supportsRecurringTransfers) {\n  this.supportsRecurringTransfers = supportsRecurringTransfers;\n};\n\n\n/**\n * <CANLOAN>Y must be present for transfers to involve loans\n * @return {Boolean} Boolean whether supports loan transfers\n */\nTransferProfile.prototype.getSupportsLoanTransfers = function() {\n  return this.supportsLoanTransfers;\n};\nElement.add(TransferProfile, {name: \"CANLOAN\", order: 40, attributeType: Boolean, readMethod: \"getSupportsLoanTransfers\", writeMethod: \"setSupportsLoanTransfers\"});\n\n\nTransferProfile.prototype.setSupportsLoanTransfers = function(/*Boolean*/ supportsLoanTransfers) {\n  this.supportsLoanTransfers = supportsLoanTransfers;\n};\n\n\nTransferProfile.prototype.getSupportsScheduledLoanTransfers = function() {\n  return this.supportsScheduledLoanTransfers;\n};\nElement.add(TransferProfile, {name: \"CANSCHEDLOAN\", order: 50, attributeType: Boolean, readMethod: \"getSupportsScheduledLoanTransfers\", writeMethod: \"setSupportsScheduledLoanTransfers\"});\n\n\nTransferProfile.prototype.setSupportsScheduledLoanTransfers = function(/*Boolean*/ supportsScheduledLoanTransfers) {\n  this.supportsScheduledLoanTransfers = supportsScheduledLoanTransfers;\n};\n\n\nTransferProfile.prototype.getSupportsRecurringLoanTransfers = function() {\n  return this.supportsRecurringLoanTransfers;\n};\nElement.add(TransferProfile, {name: \"CANRECURLOAN\", order: 60, attributeType: Boolean, readMethod: \"getSupportsRecurringLoanTransfers\", writeMethod: \"setSupportsRecurringLoanTransfers\"});\n\n\nTransferProfile.prototype.setSupportsRecurringLoanTransfers = function(/*Boolean*/ supportsRecurringLoanTransfers) {\n  this.supportsRecurringLoanTransfers = supportsRecurringLoanTransfers;\n};\n\n\nTransferProfile.prototype.getSupportsTransferModification = function() {\n  return this.supportsTransferModification;\n};\nElement.add(TransferProfile, {name: \"CANMODXFERS\", required: true, order: 70, attributeType: Boolean, readMethod: \"getSupportsTransferModification\", writeMethod: \"setSupportsTransferModification\"});\n\n\nTransferProfile.prototype.setSupportsTransferModification = function(/*Boolean*/ supportsTransferModification) {\n  this.supportsTransferModification = supportsTransferModification;\n};\n\n\nTransferProfile.prototype.getSupportsModelModification = function() {\n  return this.supportsModelModification;\n};\nElement.add(TransferProfile, {name: \"CANMODMDLS\", required: true, order: 80, attributeType: Boolean, readMethod: \"getSupportsModelModification\", writeMethod: \"setSupportsModelModification\"});\n\n\nTransferProfile.prototype.setSupportsModelModification = function(/*Boolean*/ supportsModelModification) {\n  this.supportsModelModification = supportsModelModification;\n};\n\n\n/**\n * Model window\n * the number of days before a recurring transaction is scheduled to be processed that it is\n * instantiated on the system\n * @return {Integer} Integer number of days before a recurring transaction is scheduled to be processed that it is instantiated on the system\n */\nTransferProfile.prototype.getModelWindow = function() {\n  return this.modelWindow;\n};\nElement.add(TransferProfile, {name: \"MODELWND\", required: true, order: 90, attributeType: Number, readMethod: \"getModelWindow\", writeMethod: \"setModelWindow\"});\n\n\nTransferProfile.prototype.setModelWindow = function(/*Integer*/ modelWindow) {\n  this.modelWindow = modelWindow;\n};\n\n\n/**\n * Number of days before processing date that funds are withdrawn\n * @return {Integer} Integer number of days before processing date that funds are withdrawn\n */\nTransferProfile.prototype.getWithdrawnDays = function() {\n  return this.withdrawnDays;\n};\nElement.add(TransferProfile, {name: \"DAYSWITH\", required: true, order: 100, attributeType: Number, readMethod: \"getWithdrawnDays\", writeMethod: \"setWithdrawnDays\"});\n\n\nTransferProfile.prototype.setWithdrawnDays = function(/*Integer*/ withdrawnDays) {\n  this.withdrawnDays = withdrawnDays;\n};\n\n\n/**\n * Default number of days to pay\n * @return {Integer} Integer Default number of days to pay\n */\nTransferProfile.prototype.getDefaultDaysToPay = function() {\n  return this.defaultDaysToPay;\n};\nElement.add(TransferProfile, {name: \"DFLTDAYSTOPAY\", required: true, order: 110, attributeType: Number, readMethod: \"getDefaultDaysToPay\", writeMethod: \"setDefaultDaysToPay\"});\n\n\nTransferProfile.prototype.setDefaultDaysToPay = function(/*Integer*/ defaultDaysToPay) {\n  this.defaultDaysToPay = defaultDaysToPay;\n};\n\n\n\n\nmodule.exports = TransferProfile;\n","\"use strict\";\n\nmodule.exports = {\n  ImageProfile: require(\"./ImageProfile\"),\n  TransferProfile: require(\"./TransferProfile\")\n};\n","\"use strict\";\n\nmodule.exports = {\n  banking: require(\"./banking/index\"),\n  common: require(\"./common/index\"),\n  signup: require(\"./signup/index\"),\n\n  BankingMessageSetInfo: require(\"./BankingMessageSetInfo\"),\n  BankingV1MessageSetInfo: require(\"./BankingV1MessageSetInfo\"),\n  BillpayMessageSetInfo: require(\"./BillpayMessageSetInfo\"),\n  BillpayV1MessageSetInfo: require(\"./BillpayV1MessageSetInfo\"),\n  CreditCardMessageSetInfo: require(\"./CreditCardMessageSetInfo\"),\n  CreditCardV1MessageSetInfo: require(\"./CreditCardV1MessageSetInfo\"),\n  EmailMessageSetInfo: require(\"./EmailMessageSetInfo\"),\n  EmailV1MessageSetInfo: require(\"./EmailV1MessageSetInfo\"),\n  InterbankTransferMessageSetInfo: require(\"./InterbankTransferMessageSetInfo\"),\n  InterbankTransferV1MessageSetInfo: require(\"./InterbankTransferV1MessageSetInfo\"),\n  InvestmentMessageSetInfo: require(\"./InvestmentMessageSetInfo\"),\n  InvestmentV1MessageSetInfo: require(\"./InvestmentV1MessageSetInfo\"),\n  ProfileMessageSetInfo: require(\"./ProfileMessageSetInfo\"),\n  ProfileV1MessageSetInfo: require(\"./ProfileV1MessageSetInfo\"),\n  SecurityListMessageSetInfo: require(\"./SecurityListMessageSetInfo\"),\n  SecurityListV1MessageSetInfo: require(\"./SecurityListV1MessageSetInfo\"),\n  SignOnMessageSetInfo: require(\"./SignOnMessageSetInfo\"),\n  SignOnV1MessageSetInfo: require(\"./SignOnV1MessageSetInfo\"),\n  SignupMessageSetInfo: require(\"./SignupMessageSetInfo\"),\n  SignupV1MessageSetInfo: require(\"./SignupV1MessageSetInfo\"),\n  WireTransferMessageSetInfo: require(\"./WireTransferMessageSetInfo\"),\n  WireTransferV1MessageSetInfo: require(\"./WireTransferV1MessageSetInfo\"),\n};\n","/*\n * Copyright 2012 TheStash\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../../../meta/Aggregate\");\nvar Element = require(\"../../../../../meta/Element\");\n\n/**\n * Client Enrollment option, contains indicator as to whether the account number is required as part of enrollment\n * @class\n * See \"Section 8.8 OFX Spec\"\n */\nfunction ClientEnrollment () {\n\n  /**\n   * @name ClientEnrollment#accountRequired\n   * @type Boolean\n   * @access private\n   */\n  this.accountRequired = null;\n}\n\n\n\nAggregate.add(\"CLIENTENROLL\", ClientEnrollment);\n\n\n/**\n * Y if account number is required as part of enrollment\n * @return {Boolean} Boolean\n */\nClientEnrollment.prototype.getAccountRequired = function() {\n  return this.accountRequired;\n};\nElement.add(ClientEnrollment, {name: \"ACCTREQUIRED\", required: true, order: 0, attributeType: Boolean, readMethod: \"getAccountRequired\", writeMethod: \"setAccountRequired\"});\n\n\nClientEnrollment.prototype.setAccountRequired = function(/*Boolean*/ accountRequired) {\n  this.accountRequired = accountRequired;\n};\n\n\n\n\nmodule.exports = ClientEnrollment;\n","/*\n * Copyright 2012 TheStash\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../../../meta/Aggregate\");\nvar Element = require(\"../../../../../meta/Element\");\n\n/**\n * Other Enrollment option containing a text message directing users to some other method (such as a phone call)\n * @class\n * See \"Section 8.8 OFX Spec\"\n */\n\nfunction OtherEnrollment () {\n\n  /**\n   * @name OtherEnrollment#message\n   * @type String\n   * @access private\n   */\n  this.message = null;\n}\n\n\n\nAggregate.add(\"OTHERENROLL\", OtherEnrollment);\n\n\n/**\n * Message to consumer about what to do next (for example, a phone number),\n * @return {String} String\n */\nOtherEnrollment.prototype.getMessage = function() {\n  return this.message;\n};\nElement.add(OtherEnrollment, {name: \"MESSAGE\", required: true, order: 0, attributeType: String, readMethod: \"getMessage\", writeMethod: \"setMessage\"});\n\n\nOtherEnrollment.prototype.setMessage = function(/*String*/ message) {\n  this.message = message;\n};\n\n\n\n\nmodule.exports = OtherEnrollment;\n","/*\n * Copyright 2012 TheStash\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../../../meta/Aggregate\");\nvar Element = require(\"../../../../../meta/Element\");\n\n/**\n * Web Enrollment option containing URL to direct user for web based enrollment, if supported.\n * @class\n * See \"Section 8.8 OFX Spec\"\n */\nfunction WebEnrollment () {\n\n  /**\n   * @name WebEnrollment#url\n   * @type String\n   * @access private\n   */\n  this.url = null;\n}\n\n\n\nAggregate.add(\"WEBENROLL\", WebEnrollment);\n\n\n/**\n * URL to start enrollment process\n * @return {String} String\n */\nWebEnrollment.prototype.getUrl = function() {\n  return this.url;\n};\nElement.add(WebEnrollment, {name: \"URL\", required: true, order: 0, attributeType: String, readMethod: \"getUrl\", writeMethod: \"setUrl\"});\n\n\nWebEnrollment.prototype.setUrl = function(/*String*/ url) {\n  this.url = url;\n};\n\n\n\n\nmodule.exports = WebEnrollment;\n","\"use strict\";\n\nmodule.exports = {\n  ClientEnrollment: require(\"./ClientEnrollment\"),\n  OtherEnrollment: require(\"./OtherEnrollment\"),\n  WebEnrollment: require(\"./WebEnrollment\"),\n};\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\n/**\n * Asset class for debt.\n * See \"Section 13.8.5.7, OFX Spec\"\n *\n * @enum\n */\nvar AssetClass = {\n  /**\n   * Government or corporate bonds issued in the United States.\n   */\n  DOMESTIC_BOND: \"DOMESTICBOND\",\n\n  /**\n   * Government or corporate bonds issued in foreign countries or the United States.\n   */\n  INTL_BOND: \"INTLBOND\",\n\n  /**\n   * Stocks for US companies with market caps of $2B or more.\n   */\n  LARGE_STOCK: \"LARGESTOCK\",\n\n  /**\n   * Stocks for US companies with market caps of ~$100M to $2B.\n   */\n  SMALL_STOCK: \"SMALLSTOCK\",\n\n  /**\n   * Publicallt traded stocks for companies based in foreign countries.\n   */\n  INTL_STOCK: \"INTLSTOCK\",\n\n  /**\n   * Stable, short-term investments which provide income that rises and falls with short-term\n   * interest rates.\n   */\n  MONEY_MARKET: \"MONEYMARKET\",\n\n  /**\n   * Investments which do not fit into any of the other types.\n   */\n  OTHER: \"OTHER\",\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"DOMESTICBOND\" === ofxVal) {\n      return AssetClass.DOMESTIC_BOND;\n    } else if (\"INTLBOND\" === ofxVal) {\n      return AssetClass.INTL_BOND;\n    } else if (\"LARGESTOCK\" === ofxVal) {\n      return AssetClass.LARGE_STOCK;\n    } else if (\"SMALLSTOCK\" === ofxVal) {\n      return AssetClass.SMALL_STOCK;\n    } else if (\"INTLSTOCK\" === ofxVal) {\n      return AssetClass.INTL_STOCK;\n    } else if (\"MONEYMARKET\" === ofxVal) {\n      return AssetClass.MONEY_MARKET;\n    } else if (\"OTHER\" === ofxVal) {\n      return AssetClass.OTHER;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = AssetClass;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar SecurityInfo = require(\"./SecurityInfo\");\n\n/**\n * Base class for info about the various types of securities.\n * See \"Section 13.8.5.1, OFX Spec\"\n * <br>\n * This class exposes a read-only view of the flattened aggregates that are\n * common to all security info as a convenience to application\n * developers who may not find the ofx aggregation model intuitive.\n *\n * @class\n */\nfunction BaseSecurityInfo () {\n\n  /**\n   * @name BaseSecurityInfo#securityInfo\n   * @type SecurityInfo\n   * @access private\n   */\n  this.securityInfo = null;\n}\n\n\n\n\n\n/**\n * Gets the security info aggregate.\n *\n * @return {SecurityInfo} the security info aggregate.\n */\nBaseSecurityInfo.prototype.getSecurityInfo = function() {\n  return this.securityInfo;\n};\nChildAggregate.add(BaseSecurityInfo, {required: true, order: 10, attributeType: SecurityInfo, readMethod: \"getSecurityInfo\", writeMethod: \"setSecurityInfo\"});\n\n\n/**\n * Sets the security info aggregate.\n *\n * @param {SecurityInfo} securityInfo the security info aggregate.\n */\nBaseSecurityInfo.prototype.setSecurityInfo = function(securityInfo) {\n  this.securityInfo = securityInfo;\n};\n\n\n/**\n * Gets the unique security id for the security. This is a required field according to the OFX\n * spec.\n *\n * @return {SecurityId} the security id\n */\nBaseSecurityInfo.prototype.getSecurityId = function() {\n  return this.getSecurityInfo().getSecurityId();\n};\n\n\n/**\n * Gets the full name of the security. This is a required field according to the OFX spec.\n *\n * @return {String} the full name of the security.\n */\nBaseSecurityInfo.prototype.getSecurityName = function() {\n  return this.getSecurityInfo().getSecurityName();\n};\n\n\n/**\n * Gets the ticker symbol for the security. This is an optional field according to the OFX spec.\n *\n * @return {String} the ticket symbol or null if there's no ticker symbol\n */\nBaseSecurityInfo.prototype.getTickerSymbol = function() {\n  return this.getSecurityInfo().getTickerSymbol();\n};\n\n\n/**\n * Gets the FI ID number for the security. This is an optional field according to the OFX spec.\n *\n * @return {String} the FI ID number for the security\n */\nBaseSecurityInfo.prototype.getFiId = function() {\n  return this.getSecurityInfo().getFiId();\n};\n\n\n/**\n * Gets the rating of the security. This is an optional field according to the OFX spec.\n *\n * @return {String} the rating\n */\nBaseSecurityInfo.prototype.getRating = function() {\n  return this.getSecurityInfo().getRating();\n};\n\n\n/**\n * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the\n * share price. For bonds, this is the percentage of par. For options, this is the per share (not\n * per contact) price. This is a noptional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the per unit price\n */\nBaseSecurityInfo.prototype.getUnitPrice = function() {\n  return this.getSecurityInfo().getUnitPrice();\n};\n\n\n/**\n * Gets the date as-of for the unit price. This is an optional field according to the OFX spec.\n *\n * @return {Date} the date as-of for the unit price\n */\nBaseSecurityInfo.prototype.getUnitPriceAsOfDate = function() {\n  return this.getSecurityInfo().getUnitPriceAsOfDate();\n};\n\n\n/**\n * Gets the overriding currency code for the security. If not set, implies the default currency.\n * This is an optional field according to the OFX spec.\n *\n * @return {String} the overriding currency code or null to mean the default currency\n */\nBaseSecurityInfo.prototype.getCurrencyCode = function() {\n  return this.getSecurityInfo().getCurrencyCode();\n};\n\n\n/**\n * Gets any memo associated with the security. This is an optional field according to the OFX\n * spec.\n *\n * @return {String} the memo\n */\nBaseSecurityInfo.prototype.getMemo = function() {\n  return this.getSecurityInfo().getMemo();\n};\n\n\n\n\nmodule.exports = BaseSecurityInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Call type for debt.\n * See \"Section 13.8.5.2, OFX Spec\"\n *\n * @enum\n */\nvar CallType = {\n  CALL: \"CALL\",\n  PUT: \"PUT\",\n  PREFUND: \"PREFUND\",\n  MATURITY: \"MATURITY\",\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"CALL\" === ofxVal) {\n      return CallType.CALL;\n    } else if (\"PUT\" === ofxVal) {\n      return CallType.PUT;\n    } else if (\"PREFUND\" === ofxVal) {\n      return CallType.PREFUND;\n    } else if (\"MATURITY\" === ofxVal) {\n      return CallType.MATURITY;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = CallType;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Coupon freqency for debt.\n * See \"Section 13.8.5.2, OFX Spec\"\n *\n * @enum\n */\nvar CouponFrequency = {\n  MONTHLY: \"MONTHLY\",\n  QUARTERLY: \"QUARTERLY\",\n  SEMIANNUAL: \"SEMIANNUAL\",\n  ANNUAL: \"ANNUAL\",\n  OTHER: \"OTHER\",\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"MONTHLY\" === ofxVal) {\n      return CouponFrequency.MONTHLY;\n    } else if (\"QUARTERLY\" === ofxVal) {\n      return CouponFrequency.QUARTERLY;\n    } else if (\"SEMIANNUAL\" === ofxVal) {\n      return CouponFrequency.SEMIANNUAL;\n    } else if (\"ANNUAL\" === ofxVal) {\n      return CouponFrequency.ANNUAL;\n    } else if (\"OTHER\" === ofxVal) {\n      return CouponFrequency.OTHER;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = CouponFrequency;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * The class of debt.\n * See \"Section 13.8.5.2, OFX Spec\"\n *\n * @enum\n */\nvar DebtClass = {\n  TREASURY: \"TREASURY\",\n  MUNICIPAL: \"MUNICIPAL\",\n  CORPORATE: \"CORPORATE\",\n  OTHER: \"OTHER\",\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"TREASURY\" === ofxVal) {\n      return DebtClass.TREASURY;\n    } else if (\"MUNICIPAL\" === ofxVal) {\n      return DebtClass.MUNICIPAL;\n    } else if (\"CORPORATE\" === ofxVal) {\n      return DebtClass.CORPORATE;\n    } else if (\"OTHER\" === ofxVal) {\n      return DebtClass.OTHER;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = DebtClass;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar BaseSecurityInfo = require(\"./BaseSecurityInfo\");\nvar DebtType = require(\"./DebtType\");\nvar DebtClass = require(\"./DebtClass\");\nvar CouponFrequency = require(\"./CouponFrequency\");\nvar CallType = require(\"./CallType\");\nvar AssetClass = require(\"./AssetClass\");\n\n/**\n * Info about a debt security.\n * See \"Section 13.8.5.2, OFX Spec\"\n *\n * @class\n * @augments BaseSecurityInfo\n */\nfunction DebtSecurityInfo () {\n  BaseSecurityInfo.call(this);\n\n  /**\n   * @name DebtSecurityInfo#parValue\n   * @type Double\n   * @access private\n   */\n  this.parValue = null;\n\n  /**\n   * @name DebtSecurityInfo#debtType\n   * @type String\n   * @access private\n   */\n  this.debtType = null;\n\n  /**\n   * @name DebtSecurityInfo#debtClass\n   * @type String\n   * @access private\n   */\n  this.debtClass = null;\n\n  /**\n   * @name DebtSecurityInfo#couponRate\n   * @type Double\n   * @access private\n   */\n  this.couponRate = null;\n\n  /**\n   * @name DebtSecurityInfo#nextMaturityDate\n   * @type Date\n   * @access private\n   */\n  this.nextMaturityDate = null;\n\n  /**\n   * @name DebtSecurityInfo#couponFrequency\n   * @type String\n   * @access private\n   */\n  this.couponFrequency = null;\n\n  /**\n   * @name DebtSecurityInfo#callPrice\n   * @type Double\n   * @access private\n   */\n  this.callPrice = null;\n\n  /**\n   * @name DebtSecurityInfo#yieldToCall\n   * @type Double\n   * @access private\n   */\n  this.yieldToCall = null;\n\n  /**\n   * @name DebtSecurityInfo#nextCallDate\n   * @type Date\n   * @access private\n   */\n  this.nextCallDate = null;\n\n  /**\n   * @name DebtSecurityInfo#callType\n   * @type String\n   * @access private\n   */\n  this.callType = null;\n\n  /**\n   * @name DebtSecurityInfo#yieldToMaturity\n   * @type Double\n   * @access private\n   */\n  this.yieldToMaturity = null;\n\n  /**\n   * @name DebtSecurityInfo#debtMaturityDate\n   * @type Date\n   * @access private\n   */\n  this.debtMaturityDate = null;\n\n  /**\n   * @name DebtSecurityInfo#assetClass\n   * @type String\n   * @access private\n   */\n  this.assetClass = null;\n\n  /**\n   * @name DebtSecurityInfo#fiAssetClass\n   * @type String\n   * @access private\n   */\n  this.fiAssetClass = null;\n}\n\ninherit(DebtSecurityInfo, \"extends\", BaseSecurityInfo);\n\n\nAggregate.add(\"DEBTINFO\", DebtSecurityInfo);\n\n\n/**\n * Gets the par value of the debt. This is a required field according to the OFX spec.\n *\n * @return {Double} the par value of the debt\n */\nDebtSecurityInfo.prototype.getParValue = function() {\n  return this.parValue;\n};\nElement.add(DebtSecurityInfo, {name: \"PARVALUE\", required:true, order: 20, attributeType: Number, readMethod: \"getParValue\", writeMethod: \"setParValue\"});\n\n\n/**\n * Sets the par value of the debt. This is a required field according to the OFX spec.\n *\n * @param {Double} parValue the par value of the debt\n */\nDebtSecurityInfo.prototype.setParValue = function(parValue) {\n  this.parValue = parValue;\n};\n\n\n/**\n * Gets the type of debt. One of \"COUPON\" or \"ZERO\". This is a required field according to the\n * OFX spec.\n *\n * @return {String} the type of debt\n */\nDebtSecurityInfo.prototype.getDebtType = function() {\n  return this.debtType;\n};\nElement.add(DebtSecurityInfo, {name: \"DEBTTYPE\", required:true, order: 30, attributeType: String, readMethod: \"getDebtType\", writeMethod: \"setDebtType\"});\n\n\n/**\n * Sets the type of debt. One of \"COUPON\" or \"ZERO\". This is a required field according to the\n * OFX spec.\n *\n * @param {String} debtType the type of debt\n */\nDebtSecurityInfo.prototype.setDebtType = function(debtType) {\n  this.debtType = debtType;\n};\n\n\n/**\n * Gets the type of debt as one of the well-known types.\n *\n * @return {DebtType} the type of debt or null if it's not one of the well-known types\n */\nDebtSecurityInfo.prototype.getDebtTypeEnum = function() {\n  return DebtType.fromOfx(this.getDebtType());\n};\n\n\n/**\n * Gets the class of debt. One of \"TREASURY\", \"MUNICIPAL\", \"CORPORATE\", or \"OTHER\".\n * This is an optional field according to the OFX spec.\n *\n * @return {String} the class of debt\n */\nDebtSecurityInfo.prototype.getDebtClass = function() {\n  return this.debtClass;\n};\nElement.add(DebtSecurityInfo, {name: \"DEBTCLASS\", order: 40, attributeType: String, readMethod: \"getDebtClass\", writeMethod: \"setDebtClass\"});\n\n\n/**\n * Sets the class of debt. One of \"TREASURY\", \"MUNICIPAL\", \"CORPORATE\", or \"OTHER\".\n * This is an optional field according to the OFX spec.\n *\n * @param {String} debtClass the class of debt\n */\nDebtSecurityInfo.prototype.setDebtClass = function(debtClass) {\n  this.debtClass = debtClass;\n};\n\n\n/**\n * Gets the class of debt as one of the well-known types.\n *\n * @return {DebtClass} the class of debt or null if it's not one of the well-known types\n */\nDebtSecurityInfo.prototype.getDebtClassEnum = function() {\n  return DebtClass.fromOfx(this.debtClass);\n};\n\n\n/**\n * Gets the coupon rate of the debt for the next closest call date.\n * This is an optional field according to the OFX spec.\n *\n * @return {Double} the coupon rate\n */\nDebtSecurityInfo.prototype.getCouponRate = function() {\n  return this.couponRate;\n};\nElement.add(DebtSecurityInfo, {name: \"COUPONRT\", order: 50, attributeType: Number, readMethod: \"getCouponRate\", writeMethod: \"setCouponRate\"});\n\n\n/**\n * Sets the coupon rate of the debt for the next closest call date.\n * This is an optional field according to the OFX spec.\n *\n * @param {Double} couponRate the coupon rate\n */\nDebtSecurityInfo.prototype.setCouponRate = function(couponRate) {\n  this.couponRate = couponRate;\n};\n\n\n/**\n * Gets the next maturity date for the next coupon.\n * This is an optional field according to the OFX spec.\n *\n * @return {Date} the maturity date for the next coupon\n */\nDebtSecurityInfo.prototype.getNextMaturityDate = function() {\n  return this.nextMaturityDate;\n};\nElement.add(DebtSecurityInfo, {name: \"DTCOUPON\", order: 60, attributeType: Date, readMethod: \"getNextMaturityDate\", writeMethod: \"setNextMaturityDate\"});\n\n\n/**\n * Sets the next maturity date for the next coupon.\n * This is an optional field according to the OFX spec.\n *\n * @param {Date} nextMaturityDate the maturity date for the next coupon.\n */\nDebtSecurityInfo.prototype.setNextMaturityDate = function(nextMaturityDate) {\n  this.nextMaturityDate = nextMaturityDate;\n};\n\n\n/**\n * Gets the coupon frequency. One of \"MONTHLY\", \"QUARTERLY\", \"SEMIANNUAL\", \"ANNUAL\", or \"OTHER\".\n * This is an optional field according to the OFX spec.\n *\n * @return {String} the coupon frequency\n */\nDebtSecurityInfo.prototype.getCouponFrequency = function() {\n  return this.couponFrequency;\n};\nElement.add(DebtSecurityInfo, {name: \"COUPONFREQ\", order: 70, attributeType: String, readMethod: \"getCouponFrequency\", writeMethod: \"setCouponFrequency\"});\n\n\n/**\n * Sets the coupon frequency. One of \"MONTHLY\", \"QUARTERLY\", \"SEMIANNUAL\", \"ANNUAL\", or \"OTHER\".\n * This is an optional field according to the OFX spec.\n *\n * @param {String} couponFrequency the coupon frequency\n */\nDebtSecurityInfo.prototype.setCouponFrequency = function(couponFrequency) {\n  this.couponFrequency = couponFrequency;\n};\n\n\n/**\n * Gets the coupon frequency as one of the well-known types.\n *\n * @return {CouponFrequency} the coupon frequency or null if it's not one of the well-known types\n */\nDebtSecurityInfo.prototype.getCouponFrequencyEnum = function() {\n  return CouponFrequency.fromOfx(this.getCouponFrequency());\n};\n\n\n/**\n * Gets the bond price. This is an optional field according to the OFX spec.\n *\n * @return {Double} the bond price\n */\nDebtSecurityInfo.prototype.getCallPrice = function() {\n  return this.callPrice;\n};\nElement.add(DebtSecurityInfo, {name: \"CALLPRICE\", order: 80, attributeType: Number, readMethod: \"getCallPrice\", writeMethod: \"setCallPrice\"});\n\n\n/**\n * Sets the bond price. This is an optional field according to the OFX spec.\n *\n * @param {Double} callPrice the bond price\n */\nDebtSecurityInfo.prototype.setCallPrice = function(callPrice) {\n  this.callPrice = callPrice;\n};\n\n\n/**\n * Gets the yield to call as a rate. This is an optional field according to the OFX spec.\n *\n * @return {Double} the yield to call rate\n */\nDebtSecurityInfo.prototype.getYieldToCall = function() {\n  return this.yieldToCall;\n};\nElement.add(DebtSecurityInfo, {name: \"YIELDTOCALL\", order: 90, attributeType: Number, readMethod: \"getYieldToCall\", writeMethod: \"setYieldToCall\"});\n\n\n/**\n * Sets the yield to call as a rate. This is an optional field according to the OFX spec.\n *\n * @param {Double} yieldToCall the yield to call rate\n */\nDebtSecurityInfo.prototype.setYieldToCall = function(yieldToCall) {\n  this.yieldToCall = yieldToCall;\n};\n\n\n/**\n * Gets the next call date. This is an optional field according to the OFX spec.\n *\n * @return {Date} the next call date.\n */\nDebtSecurityInfo.prototype.getNextCallDate = function() {\n  return this.nextCallDate;\n};\nElement.add(DebtSecurityInfo, {name: \"DTCALL\", order: 100, attributeType: Date, readMethod: \"getNextCallDate\", writeMethod: \"setNextCallDate\"});\n\n\n/**\n * Sets the next call date. This is an optional field according to the OFX spec.\n *\n * @param {Date} nextCallDate the next call date.\n */\nDebtSecurityInfo.prototype.setNextCallDate = function(nextCallDate) {\n  this.nextCallDate = nextCallDate;\n};\n\n\n/**\n * Gets the type of call.\n *\n * @return {String} the type of call\n */\nDebtSecurityInfo.prototype.getCallType = function() {\n  return this.callType;\n};\nElement.add(DebtSecurityInfo, {name: \"CALLTYPE\", order: 110, attributeType: String, readMethod: \"getCallType\", writeMethod: \"setCallType\"});\n\n\n/**\n * Sets the type of call.\n *\n * @param {String} callType the type of call\n */\nDebtSecurityInfo.prototype.setCallType = function(callType) {\n  this.callType = callType;\n};\n\n\n/**\n * Gets the type of call as one of the well-known types.\n *\n * @return {CallType} the type of call or null if it's not one of the well-known types\n */\nDebtSecurityInfo.prototype.getCallTypeEnum = function() {\n  return CallType.fromOfx(this.getCallType());\n};\n\n\n/**\n * Gets the yield to maturity as a rate. This is an optional field according to the OFX spec.\n *\n * @return {Double} the yield to call rate\n */\nDebtSecurityInfo.prototype.getYieldToMaturity = function() {\n  return this.yieldToMaturity;\n};\nElement.add(DebtSecurityInfo, {name: \"YIELDTOMAT\", order: 120, attributeType: Number, readMethod: \"getYieldToMaturity\", writeMethod: \"setYieldToMaturity\"});\n\n\n/**\n * Sets the yield to maturity as a rate. This is an optional field according to the OFX spec.\n *\n * @param {Double} yieldToMaturity the yield to call rate\n */\nDebtSecurityInfo.prototype.setYieldToMaturity = function(yieldToMaturity) {\n  this.yieldToMaturity = yieldToMaturity;\n};\n\n\n/**\n * Gets the date when the debt matures. This is an optional field according to the OFX spec.\n *\n * @return {Date} the date when the debt matures\n */\nDebtSecurityInfo.prototype.getDebtMaturityDate = function() {\n  return this.debtMaturityDate;\n};\nElement.add(DebtSecurityInfo, {name: \"DTMAT\", order: 130, attributeType: Date, readMethod: \"getDebtMaturityDate\", writeMethod: \"setDebtMaturityDate\"});\n\n\n/**\n * Sets the date when the debt matures. This is an optional field according to the OFX spec.\n *\n * @param {Date} debtMaturityDate the date when the debt matures\n */\nDebtSecurityInfo.prototype.setDebtMaturityDate = function(debtMaturityDate) {\n  this.debtMaturityDate = debtMaturityDate;\n};\n\n\n/**\n * Gets the asset class of the debt. This is an optional field according to the OFX spec.\n *\n * @return {String} the asset class of the debt\n */\nDebtSecurityInfo.prototype.getAssetClass = function() {\n  return this.assetClass;\n};\nElement.add(DebtSecurityInfo, {name: \"ASSETCLASS\", order: 140, attributeType: String, readMethod: \"getAssetClass\", writeMethod: \"setAssetClass\"});\n\n\n/**\n * Sets the asset class of the debt. This is an optional field according to the OFX spec.\n *\n * @param {String} assetClass the asset class of the debt\n */\nDebtSecurityInfo.prototype.setAssetClass = function(assetClass) {\n  this.assetClass = assetClass;\n};\n\n\n/**\n * Gets the assert class as one of the well-known types.\n *\n * @return {AssetClass} the asset class or null if it's not one of the well-known types\n */\nDebtSecurityInfo.prototype.getAssetClassEnum = function() {\n  return AssetClass.fromOfx(this.getAssetClass());\n};\n\n\n/**\n * Gets the FI-defined asset class of the debt. This is an optional field according to the OFX\n * spec.\n *\n * @return {String} the FI-defined asset class of the debt\n */\nDebtSecurityInfo.prototype.getFiAssetClass = function() {\n  return this.fiAssetClass;\n};\nElement.add(DebtSecurityInfo, {name: \"FIASSETCLASS\", order: 150, attributeType: String, readMethod: \"getFiAssetClass\", writeMethod: \"setFiAssetClass\"});\n\n\n/**\n * Sets the FI-defined asset class of the debt. This is an optional field according to the OFX\n * spec.\n *\n * @param {String} fiAssetClass the FI-defined asset class of the debt\n */\nDebtSecurityInfo.prototype.setFiAssetClass = function(fiAssetClass) {\n  this.fiAssetClass = fiAssetClass;\n};\n\n\n\n\nmodule.exports = DebtSecurityInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * The type of debt.\n * See \"Section 13.8.5.2, OFX Spec\"\n *\n * @class\n */\nvar DebtType = {\n  COUPON: 0,\n  ZERO: 1,\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"COUPON\" === ofxVal) {\n      return DebtType.COUPON;\n    } else if (\"ZERO\" === ofxVal) {\n      return DebtType.ZERO;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = DebtType;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar BaseSecurityInfo = require(\"./BaseSecurityInfo\");\nvar MutualFundType = require(\"./MutualFundType\");\n\n/**\n * Info about a mutual fund security.\n * See \"Section 13.8.5.3, OFX Spec\"\n *\n * @class\n * @augments BaseSecurityInfo\n */\nfunction MutualFundSecurityInfo () {\n  BaseSecurityInfo.call(this);\n\n  /**\n   * @name MutualFundSecurityInfo#mfType\n   * @type String\n   * @access private\n   */\n  this.mfType = null;\n\n  /**\n   * @name MutualFundSecurityInfo#yield\n   * @type Double\n   * @access private\n   */\n  this.yield = null;\n\n  /**\n   * @name MutualFundSecurityInfo#dateYieldAsOf\n   * @type Date\n   * @access private\n   */\n  this.dateYieldAsOf = null;\n}\n\ninherit(MutualFundSecurityInfo, \"extends\", BaseSecurityInfo);\n\n\nAggregate.add(\"MFINFO\", MutualFundSecurityInfo);\n\n\n/**\n * Gets the mutual fund type. One of \"OPENEND\", \"CLOSEEND\", or \"OTHER\". This is an optional field\n * according to the OFX spec.\n *\n * @return {String} the mutual fund type\n */\nMutualFundSecurityInfo.prototype.getType = function() {\n  return this.mfType;\n};\nElement.add(MutualFundSecurityInfo, {name: \"MFTYPE\", order: 20, attributeType: String, readMethod: \"getType\", writeMethod: \"setType\"});\n\n\n/**\n * Sets the mutual fund type. One of \"OPENEND\", \"CLOSEEND\", or \"OTHER\". This is an optional field\n * according to the OFX spec.\n *\n * @param {String} mfType the mutual fund type\n */\nMutualFundSecurityInfo.prototype.setType = function(mfType) {\n  this.mfType = mfType;\n};\n\n\n/**\n * Gets the mutual fund type as one of the well-known types.\n *\n * @return {MutualFundType} the mutual fund type or null if it's not one of the well-known types\n */\nMutualFundSecurityInfo.prototype.getTypeEnum = function() {\n  return MutualFundType.fromOfx(this.getType());\n};\n\n\n/**\n * Gets the yield as a rate. This is an optional field according to the OFX spec.\n *\n * @return {Double} the yield as a rate\n */\nMutualFundSecurityInfo.prototype.getYield = function() {\n  return this.yield;\n};\nElement.add(MutualFundSecurityInfo, {name: \"YIELD\", order: 30, attributeType: Number, readMethod: \"getYield\", writeMethod: \"setYield\"});\n\n\n/**\n * Sets the yield as a rate. This is an optional field according to the OFX spec.\n *\n * @param {Double} yield the yield as a rate\n */\nMutualFundSecurityInfo.prototype.setYield = function(yield_) {\n  this.yield = yield_;\n};\n\n\n/**\n * Gets the as-of date for the yield. This is an optional field according to the OFX spec.\n *\n * @return {Date} the as-of date for the yield\n */\nMutualFundSecurityInfo.prototype.getDateYieldAsOf = function() {\n  return this.dateYieldAsOf;\n};\nElement.add(MutualFundSecurityInfo, {name: \"DTYIELDASOF\", order: 40, attributeType: Date, readMethod: \"getDateYieldAsOf\", writeMethod: \"setDateYieldAsOf\"});\n\n\n/**\n * Sets the as-of date for the yield. This is an optional field according to the OFX spec.\n *\n * @param {Date} dateYieldAsOf the as-of date for the yield\n */\nMutualFundSecurityInfo.prototype.setDateYieldAsOf = function(dateYieldAsOf) {\n  this.dateYieldAsOf = dateYieldAsOf;\n};\n\n\n\n\nmodule.exports = MutualFundSecurityInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * The type of mutual fund.\n * See \"Section 13.8.5.2, OFX Spec\"\n *\n * @enum\n */\nvar MutualFundType = {\n  OPEN_END: \"OPENEND\",\n  CLOSE_END: \"CLOSEEND\",\n  OTHER: \"OTHER\",\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"OPENEND\" === ofxVal) {\n      return MutualFundType.OPEN_END;\n    } else if (\"CLOSEEND\" === ofxVal) {\n      return MutualFundType.CLOSE_END;\n    } else if (\"OTHER\" === ofxVal) {\n      return MutualFundType.OTHER;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = MutualFundType;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar SecurityId = require(\"./SecurityId\");\nvar BaseSecurityInfo = require(\"./BaseSecurityInfo\");\nvar OptionType = require(\"./OptionType\");\nvar AssetClass = require(\"./AssetClass\");\n\n/**\n * Info about an option security.\n * See \"Section 13.8.5.4, OFX Spec\"\n *\n * @class\n * @augments BaseSecurityInfo\n */\nfunction OptionSecurityInfo () {\n  BaseSecurityInfo.call(this);\n\n  /**\n   * @name OptionSecurityInfo#optionType\n   * @type String\n   * @access private\n   */\n  this.optionType = null;\n\n  /**\n   * @name OptionSecurityInfo#strikePrice\n   * @type Double\n   * @access private\n   */\n  this.strikePrice = null;\n\n  /**\n   * @name OptionSecurityInfo#expirationDate\n   * @type Date\n   * @access private\n   */\n  this.expirationDate = null;\n\n  /**\n   * @name OptionSecurityInfo#sharesPerContact\n   * @type Integer\n   * @access private\n   */\n  this.sharesPerContact = null;\n\n  /**\n   * @name OptionSecurityInfo#underlyingSecurity\n   * @type SecurityId\n   * @access private\n   */\n  this.underlyingSecurity = null;\n\n  /**\n   * @name OptionSecurityInfo#assetClass\n   * @type String\n   * @access private\n   */\n  this.assetClass = null;\n\n  /**\n   * @name OptionSecurityInfo#fiAssetClass\n   * @type String\n   * @access private\n   */\n  this.fiAssetClass = null;\n}\n\ninherit(OptionSecurityInfo, \"extends\", BaseSecurityInfo);\n\n\nAggregate.add(\"OPTINFO\", OptionSecurityInfo);\n\n\n/**\n * Gets the type of option. One of \"PUT\" or \"CALL\". This is a required field according to the\n * OFX spec.\n *\n * @return {String} the option type\n */\nOptionSecurityInfo.prototype.getOptionType = function() {\n  return this.optionType;\n};\nElement.add(OptionSecurityInfo, {name: \"OPTTYPE\", order: 20, attributeType: String, readMethod: \"getOptionType\", writeMethod: \"setOptionType\"});\n\n\n/**\n * Sets the type of option. One of \"PUT\" or \"CALL\". This is a required field according to the\n * OFX spec.\n *\n * @param {String} optionType the option type\n */\nOptionSecurityInfo.prototype.setOptionType = function(optionType) {\n  this.optionType = optionType;\n};\n\n\n/**\n * Gets the option type as a well-known enum value.\n *\n * @return {OptionType} the option type or null if it's not one of the well-known types\n */\nOptionSecurityInfo.prototype.getOptionTypeEnum = function() {\n  return OptionType.fromOfx(this.getOptionType());\n};\n\n\n/**\n * Gets the strike price of the option. This is a required field according to the OFX spec.\n *\n * @return {Double} the option strike price\n */\nOptionSecurityInfo.prototype.getStrikePrice = function() {\n  return this.strikePrice;\n};\nElement.add(OptionSecurityInfo, {name: \"STRIKEPRICE\", order: 30, attributeType: Number, readMethod: \"getStrikePrice\", writeMethod: \"setStrikePrice\"});\n\n\n/**\n * Sets the strike price of the option. This is a required field according to the OFX spec.\n *\n * @param {Double} strikePrice the option strike price\n */\nOptionSecurityInfo.prototype.setStrikePrice = function(strikePrice) {\n  this.strikePrice = strikePrice;\n};\n\n\n/**\n * Gets the expiration date of the option. This is a required field according to the OFX spec.\n *\n * @return {Date} the expiration date of the option\n */\nOptionSecurityInfo.prototype.getExpirationDate = function() {\n  return this.expirationDate;\n};\nElement.add(OptionSecurityInfo, {name: \"DTEXPIRE\", order: 40, attributeType: Date, readMethod: \"getExpirationDate\", writeMethod: \"setExpirationDate\"});\n\n\n/**\n * Sets the expiration date of the option. This is a required field according to the OFX spec.\n *\n * @param {Date} expirationDate the expiration date of the option\n */\nOptionSecurityInfo.prototype.setExpirationDate = function(expirationDate) {\n  this.expirationDate = expirationDate;\n};\n\n\n/**\n * Gets the number of shares per option contact. This is a required field according to the OFX\n * spec.\n *\n * @return {Integer} the number of shares per option contact\n */\nOptionSecurityInfo.prototype.getSharesPerContact = function() {\n  return this.sharesPerContact;\n};\nElement.add(OptionSecurityInfo, {name: \"SHPERCTRCT\", order: 50, attributeType: Number, readMethod: \"getSharesPerContact\", writeMethod: \"setSharesPerContact\"});\n\n\n/**\n * Sets the number of shares per option contact. This is a required field according to the OFX\n * spec.\n *\n * @param {Integer} sharesPerContact the number of shares per option contact\n */\nOptionSecurityInfo.prototype.setSharesPerContact = function(sharesPerContact) {\n  this.sharesPerContact = sharesPerContact;\n};\n\n\n/**\n * Gets the security id of the underling security. This is an optional field according to the OFX\n * spec.\n *\n * @return {SecurityId} the security id of the underlying security\n */\nOptionSecurityInfo.prototype.getUnderlyingSecurity = function() {\n  return this.underlyingSecurity;\n};\nElement.add(OptionSecurityInfo, {name: \"SECID\", order: 60, attributeType: SecurityId, readMethod: \"getUnderlyingSecurity\", writeMethod: \"setUnderlyingSecurity\"});\n\n\n/**\n * Sets the security id of the underling security. This is an optional field according to the OFX\n * spec.\n *\n * @param {SecurityId} underlyingSecurity the security id of the underlying security\n */\nOptionSecurityInfo.prototype.setUnderlyingSecurity = function(underlyingSecurity) {\n  this.underlyingSecurity = underlyingSecurity;\n};\n\n\n/**\n * Gets the asset class of the option. This is an optional field according to the OFX spec.\n *\n * @return {String} the asset class of the option\n */\nOptionSecurityInfo.prototype.getAssetClass = function() {\n  return this.assetClass;\n};\nElement.add(OptionSecurityInfo, {name: \"ASSETCLASS\", order: 70, attributeType: String, readMethod: \"getAssetClass\", writeMethod: \"setAssetClass\"});\n\n\n/**\n * Sets the asset class of the option. This is an optional field according to the OFX spec.\n *\n * @param {String} assetClass the asset class of the option\n */\nOptionSecurityInfo.prototype.setAssetClass = function(assetClass) {\n  this.assetClass = assetClass;\n};\n\n\n/**\n * Gets the assert class as one of the well-known types.\n *\n * @return {AssetClass} the asset class or null if it's not one of the well-known types\n */\nOptionSecurityInfo.prototype.getAssetClassEnum = function() {\n  return AssetClass.fromOfx(this.getAssetClass());\n};\n\n\n/**\n * Gets the FI-defined asset class of the option. This is an optional field according to the OFX\n * spec.\n *\n * @return {String} the FI-defined asset class of the option\n */\nOptionSecurityInfo.prototype.getFiAssetClass = function() {\n  return this.fiAssetClass;\n};\nElement.add(OptionSecurityInfo, {name: \"FIASSETCLASS\", order: 80, attributeType: String, readMethod: \"getFiAssetClass\", writeMethod: \"setFiAssetClass\"});\n\n\n/**\n * Sets the FI-defined asset class of the option. This is an optional field according to the OFX\n * spec.\n *\n * @param {String} fiAssetClass the FI-defined asset class of the option\n */\nOptionSecurityInfo.prototype.setFiAssetClass = function(fiAssetClass) {\n  this.fiAssetClass = fiAssetClass;\n};\n\n\n\n\nmodule.exports = OptionSecurityInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Type of option.\n * See \"Section 13.8.5.4, OFX Spec\"\n *\n * @enum\n */\nvar OptionType = {\n  PUT: \"PUT\",\n  CALL: \"CALL\",\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"PUT\" === ofxVal) {\n      return OptionType.PUT;\n    } else if (\"CALL\" === ofxVal) {\n      return OptionType.CALL;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = OptionType;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar BaseSecurityInfo = require(\"./BaseSecurityInfo\");\nvar AssetClass = require(\"./AssetClass\");\n\n/**\n * Info about any other type of security.\n * See \"Section 13.8.5.5, OFX Spec\"\n *\n * @class\n * @augments BaseSecurityInfo\n */\nfunction OtherSecurityInfo () {\n  BaseSecurityInfo.call(this);\n\n  /**\n   * @name OtherSecurityInfo#typeDesc\n   * @type String\n   * @access private\n   */\n  this.typeDesc = null;\n\n  /**\n   * @name OtherSecurityInfo#assetClass\n   * @type String\n   * @access private\n   */\n  this.assetClass = null;\n\n  /**\n   * @name OtherSecurityInfo#fiAssetClass\n   * @type String\n   * @access private\n   */\n  this.fiAssetClass = null;\n}\n\ninherit(OtherSecurityInfo, \"extends\", BaseSecurityInfo);\n\n\nAggregate.add(\"OTHERINFO\", OtherSecurityInfo);\n\n\n/**\n * Gets a description of the type of security. This is an optional field according to the OFX\n * spec.\n *\n * @return {String} the description of the security\n */\nOtherSecurityInfo.prototype.getTypeDesc = function() {\n  return this.typeDesc;\n};\nElement.add(OtherSecurityInfo, {name: \"TYPEDESC\", order: 20, attributeType: String, readMethod: \"getTypeDesc\", writeMethod: \"setTypeDesc\"});\n\n\n/**\n * Sets a description of the type of security. This is an optional field according to the OFX\n * spec.\n *\n * @param {String} typeDesc the description of the security\n */\nOtherSecurityInfo.prototype.setTypeDesc = function(typeDesc) {\n  this.typeDesc = typeDesc;\n};\n\n\n/**\n * Gets the asset class of the option. This is an optional field according to the OFX spec.\n *\n * @return {String} the asset class of the debt\n */\nOtherSecurityInfo.prototype.getAssetClass = function() {\n  return this.assetClass;\n};\nElement.add(OtherSecurityInfo, {name: \"ASSETCLASS\", order: 30, attributeType: String, readMethod: \"getAssetClass\", writeMethod: \"setAssetClass\"});\n\n\n/**\n * Sets the asset class of the debt. This is an optional field according to the OFX spec.\n *\n * @param {String} assetClass the asset class of the debt\n */\nOtherSecurityInfo.prototype.setAssetClass = function(assetClass) {\n  this.assetClass = assetClass;\n};\n\n\n/**\n * Gets the assert class as one of the well-known types.\n *\n * @return {AssetClass} the asset class or null if it's not one of the well-known types\n */\nOtherSecurityInfo.prototype.getAssetClassEnum = function() {\n  return AssetClass.fromOfx(this.getAssetClass());\n};\n\n\n/**\n * Gets the FI-defined asset class of the debt. This is an optional field according to the OFX\n * spec.\n *\n * @return {String} the FI-defined asset class of the debt\n */\nOtherSecurityInfo.prototype.getFiAssetClass = function() {\n  return this.fiAssetClass;\n};\nElement.add(OtherSecurityInfo, {name: \"FIASSETCLASS\", order: 40, attributeType: String, readMethod: \"getFiAssetClass\", writeMethod: \"setFiAssetClass\"});\n\n\n/**\n * Sets the FI-defined asset class of the debt. This is an optional field according to the OFX\n * spec.\n *\n * @param {String} fiAssetClass the FI-defined asset class of the debt\n */\nOtherSecurityInfo.prototype.setFiAssetClass = function(fiAssetClass) {\n  this.fiAssetClass = fiAssetClass;\n};\n\n\n\n\nmodule.exports = OtherSecurityInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\n\n/**\n * Identifier for a security.\n * See \"Section 13.8.1, OFX Spec\"\n *\n * @class\n */\nfunction SecurityId () {\n\n  /**\n   * @name SecurityId#uniqueId\n   * @type String\n   * @access private\n   */\n  this.uniqueId = null;\n\n  /**\n   * @name SecurityId#uniqueIdType\n   * @type String\n   * @access private\n   */\n  this.uniqueIdType = null;\n}\n\n\n\nAggregate.add(\"SECID\", SecurityId);\n\n\n/**\n * Gets the unique id for the security. This is a required field according to the OFX spec.\n *\n * @return {String} the unique id\n */\nSecurityId.prototype.getUniqueId = function() {\n  return this.uniqueId;\n};\nElement.add(SecurityId, {name: \"UNIQUEID\", required: true, order: 10, attributeType: String, readMethod: \"getUniqueId\", writeMethod: \"setUniqueId\"});\n\n\n/**\n * Sets the unique id for the security. This is a required field according to the OFX spec.\n *\n * @param {String} uniqueId the unique id\n */\nSecurityId.prototype.setUniqueId = function(uniqueId) {\n  this.uniqueId = uniqueId;\n};\n\n\n/**\n * Gets the type of unique id.\n *\n * @return {String} the type of unique id\n */\nSecurityId.prototype.getUniqueIdType = function() {\n  return this.uniqueIdType;\n};\nElement.add(SecurityId, {name: \"UNIQUEIDTYPE\", required: true, order: 20, attributeType: String, readMethod: \"getUniqueIdType\", writeMethod: \"setUniqueIdType\"});\n\n\n/**\n * Sets the type of unique id.\n *\n * @param {String} uniqueIdType the type of unique id\n */\nSecurityId.prototype.setUniqueIdType = function(uniqueIdType) {\n  this.uniqueIdType = uniqueIdType;\n};\n\n\n\n\nmodule.exports = SecurityId;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar SecurityId = require(\"./SecurityId\");\n\n\n/**\n * Info about a security.\n * See \"Section 13.8.5.1, OFX Spec\"\n *\n * @class\n */\nfunction SecurityInfo () {\n\n  /**\n   * @name SecurityInfo#securityId\n   * @type SecurityId\n   * @access private\n   */\n  this.securityId = null;\n\n  /**\n   * @name SecurityInfo#securityName\n   * @type String\n   * @access private\n   */\n  this.securityName = null;\n\n  /**\n   * @name SecurityInfo#tickerSymbol\n   * @type String\n   * @access private\n   */\n  this.tickerSymbol = null;\n\n  /**\n   * @name SecurityInfo#fiId\n   * @type String\n   * @access private\n   */\n  this.fiId = null;\n\n  /**\n   * @name SecurityInfo#rating\n   * @type String\n   * @access private\n   */\n  this.rating = null;\n\n  /**\n   * @name SecurityInfo#unitPrice\n   * @type Double\n   * @access private\n   */\n  this.unitPrice = null;\n\n  /**\n   * @name SecurityInfo#marketValueDate\n   * @type Date\n   * @access private\n   */\n  this.marketValueDate = null;\n\n  /**\n   * @name SecurityInfo#currencyCode\n   * @type String\n   * @access private\n   */\n  this.currencyCode = null;\n\n  /**\n   * @name SecurityInfo#memo\n   * @type String\n   * @access private\n   */\n  this.memo = null;\n}\n\n\n\nAggregate.add(\"SECINFO\", SecurityInfo);\n\n\n/**\n * Gets the unique security id for the security. This is a required field according to the OFX\n * spec.\n *\n * @return {SecurityId} the security id\n */\nSecurityInfo.prototype.getSecurityId = function() {\n  return this.securityId;\n};\nChildAggregate.add(SecurityInfo, {required: true, order: 10, attributeType: SecurityId, readMethod: \"getSecurityId\", writeMethod: \"setSecurityId\"});\n\n\n/**\n * Sets the unique security id for the security. This is a required field according to the OFX\n * spec.\n *\n * @param {SecurityId} securityId the security id\n */\nSecurityInfo.prototype.setSecurityId = function(securityId) {\n  this.securityId = securityId;\n};\n\n\n/**\n * Gets the full name of the security. This is a required field according to the OFX spec.\n *\n * @return {String} the full name of the security\n */\nSecurityInfo.prototype.getSecurityName = function() {\n  return this.securityName;\n};\nElement.add(SecurityInfo, {name: \"SECNAME\", required: true, order: 20, attributeType: String, readMethod: \"getSecurityName\", writeMethod: \"setSecurityName\"});\n\n\n/**\n * Sets the full name of the security. This is a required field according to the OFX spec.\n *\n * @param {String} securityName the full name of the security\n */\nSecurityInfo.prototype.setSecurityName = function(securityName) {\n  this.securityName = securityName;\n};\n\n\n/**\n * Gets the ticker symbol for the security. This is an optional field according to the OFX spec.\n *\n * @return {String} the ticket symbol or null if there's no ticker symbol\n */\nSecurityInfo.prototype.getTickerSymbol = function() {\n  return this.tickerSymbol;\n};\nElement.add(SecurityInfo, {name: \"TICKER\", order: 30, attributeType: String, readMethod: \"getTickerSymbol\", writeMethod: \"setTickerSymbol\"});\n\n\n/**\n * Sets the ticker symbol for the security. This is an optional field according to the OFX spec.\n *\n * @param {String} tickerSymbol the ticket symbol or null if there's no ticker symbol\n */\nSecurityInfo.prototype.setTickerSymbol = function(tickerSymbol) {\n  this.tickerSymbol = tickerSymbol;\n};\n\n\n/**\n * Gets the FI ID number for the security. This is an optional field according to the OFX spec.\n *\n * @return {String} the FI ID number for the security\n */\nSecurityInfo.prototype.getFiId = function() {\n  return this.fiId;\n};\nElement.add(SecurityInfo, {name: \"FIID\", order: 40, attributeType: String, readMethod: \"getFiId\", writeMethod: \"setFiId\"});\n\n\n/**\n * Sets the FI ID number for the security. This is an optional field according to the OFX spec.\n *\n * @param {String} fiId the FI ID number for the security\n */\nSecurityInfo.prototype.setFiId = function(fiId) {\n  this.fiId = fiId;\n};\n\n\n/**\n * Gets the rating of the security. This is an optional field according to the OFX spec.\n *\n * @return {String} the rating\n */\nSecurityInfo.prototype.getRating = function() {\n  return this.rating;\n};\nElement.add(SecurityInfo, {name: \"RATING\", order: 50, attributeType: String, readMethod: \"getRating\", writeMethod: \"setRating\"});\n\n\n/**\n * Sets the rating of the security. This is an optional field according to the OFX spec.\n *\n * @param {String} rating the rating\n */\nSecurityInfo.prototype.setRating = function(rating) {\n  this.rating = rating;\n};\n\n\n/**\n * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the\n * share price. For bonds, this is the percentage of par. For options, this is the per share (not\n * per contact) price. This is a noptional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the per unit price\n */\nSecurityInfo.prototype.getUnitPrice = function() {\n  return this.unitPrice;\n};\nElement.add(SecurityInfo, {name: \"UNITPRICE\", order: 60, attributeType: Number, readMethod: \"getUnitPrice\", writeMethod: \"setUnitPrice\"});\n\n\n/**\n * Sets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the\n * share price. For bonds, this is the percentage of par. For options, this is the per share (not\n * per contact) price. This is an optional field according to the OFX spec.\n * See \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} unitPrice the per unit price\n */\nSecurityInfo.prototype.setUnitPrice = function(unitPrice) {\n  this.unitPrice = unitPrice;\n};\n\n\n/**\n * Gets the date as-of for the unit price. This is an optional field according to the OFX spec.\n *\n * @return {Date} the date as-of for the unit price\n */\nSecurityInfo.prototype.getUnitPriceAsOfDate = function() {\n  return this.marketValueDate;\n};\nElement.add(SecurityInfo, {name: \"DTASOF\", order: 70, attributeType: Date, readMethod: \"getUnitPriceAsOfDate\", writeMethod: \"setUnitPriceAsOfDate\"});\n\n\n/**\n * Sets the date as-of for the unit price. This is an optional field according to the OFX spec.\n *\n * param marketValueDate the date as-of for the unit price\n */\nSecurityInfo.prototype.setUnitPriceAsOfDate = function(/*Date*/ marketValueDate) {\n  this.marketValueDate = marketValueDate;\n};\n\n\n/**\n * Gets the overriding currency code for the security. If not set, implies the default currency.\n * This is an optional field according to the OFX spec.\n *\n * @return {String} the overriding currency code or null to mean the default currency\n */\nSecurityInfo.prototype.getCurrencyCode = function() {\n  return this.currencyCode;\n};\nElement.add(SecurityInfo, {name: \"CURRENCY\", order: 80, attributeType: String, readMethod: \"getCurrencyCode\", writeMethod: \"setCurrencyCode\"});\n\n\n/**\n * Sets the overriding currency code for the security. If not set, implies the default currency.\n * This is an optional field according to the OFX spec.\n *\n * @param {String} currencyCode the overriding currency code or null to mean the default currency\n */\nSecurityInfo.prototype.setCurrencyCode = function(currencyCode) {\n  this.currencyCode = currencyCode;\n};\n\n\n/**\n * Gets any memo associated with the security. This is an optional field according to the OFX\n * spec.\n *\n * @return {String} the memo\n */\nSecurityInfo.prototype.getMemo = function() {\n  return this.memo;\n};\nElement.add(SecurityInfo, {name: \"MEMO\", order: 90, attributeType: String, readMethod: \"getMemo\", writeMethod: \"setMemo\"});\n\n\n/**\n * Sets any memo associated with the security. This is an optional field according to the OFX\n * spec.\n *\n * @param {String} memo the memo\n */\nSecurityInfo.prototype.setMemo = function(memo) {\n  this.memo = memo;\n};\n\n\n\n\nmodule.exports = SecurityInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar BaseSecurityInfo = require(\"./BaseSecurityInfo\");\n\n/**\n * Aggregate for a list of securities.\n * See \"Section 13.8.4, OFX Spec\"\n *\n * @class\n */\nfunction SecurityList () {\n\n  /**\n   * @name SecurityList#securityInfos\n   * @type BaseSecurityInfo[]\n   * @access private\n   */\n  this.securityInfos = null;\n}\n\n\n\nAggregate.add(\"SECLIST\", SecurityList);\n\n\nSecurityList.prototype.getSecurityInfos = function() {\n  return this.securityInfos;\n};\nChildAggregate.add(SecurityList, {order: 10, attributeType: Array, collectionEntryType: BaseSecurityInfo, readMethod: \"getSecurityInfos\", writeMethod: \"setSecurityInfos\"});\n\n\nSecurityList.prototype.setSecurityInfos = function(/*BaseSecurityInfo[]*/ securityInfos) {\n  this.securityInfos = securityInfos;\n};\n\n\n\n\nmodule.exports = SecurityList;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar RequestMessage = require(\"../RequestMessage\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar SecurityRequest = require(\"./SecurityRequest\");\n\n/**\n * Request aggregate for the security list.\n * See \"Section 13.8.2.2, OFX Spec\"\n *\n * @class\n */\nfunction SecurityListRequest () {\n  RequestMessage.call(this);\n\n  /**\n   * @name SecurityListRequest#securityRequests\n   * @type SecurityRequest[]\n   * @access private\n   */\n  this.securityRequests = null;\n}\n\ninherit(SecurityListRequest, \"extends\", RequestMessage);\n\n\nAggregate.add(\"SECLISTRQ\", SecurityListRequest);\n\n\nSecurityListRequest.prototype.getSecurityRequests = function() {\n  return this.securityRequests;\n};\nChildAggregate.add(SecurityListRequest, {required: true, order: 10, attributeType: Array, collectionEntryType: SecurityRequest, readMethod: \"getSecurityRequests\", writeMethod: \"setSecurityRequests\"});\n\n\nSecurityListRequest.prototype.setSecurityRequests = function(/*SecurityRequest[]*/ securityRequests) {\n  this.securityRequests = securityRequests;\n};\n\n\n\n\nmodule.exports = SecurityListRequest;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar MessageSetType = require(\"../MessageSetType\");\nvar RequestMessageSet = require(\"../RequestMessageSet\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar SecurityListRequestTransaction = require(\"./SecurityListRequestTransaction\");\n\n/**\n * Security list request message set.\n * See \"Section 13.7.2.2.1, OFX Spec\"\n *\n * @class\n * @augments RequestMessageSet\n */\nfunction SecurityListRequestMessageSet () {\n  RequestMessageSet.call(this);\n\n  /**\n   * @name SecurityListRequestMessageSet#securityListRequest\n   * @type SecurityListRequestTransaction\n   * @access private\n   */\n  this.securityListRequest = null;\n}\n\ninherit(SecurityListRequestMessageSet, \"extends\", RequestMessageSet);\n\n\nAggregate.add(\"SECLISTMSGSRQV1\", SecurityListRequestMessageSet);\n\n\nSecurityListRequestMessageSet.prototype.getType = function() {\n  return MessageSetType.investment;\n};\n\n\n/**\n * Gets the security list request.\n *\n * @return {SecurityListRequestTransaction} the request\n */\nSecurityListRequestMessageSet.prototype.getSecurityListRequest = function() {\n  return this.securityListRequest;\n};\nChildAggregate.add(SecurityListRequestMessageSet, {order: 0, attributeType: SecurityListRequestTransaction, readMethod: \"getSecurityListRequest\", writeMethod: \"setSecurityListRequest\"});\n\n\n/**\n * Sets the security list request.\n *\n * @param {SecurityListRequestTransaction} statementRequest the request\n */\nSecurityListRequestMessageSet.prototype.setSecurityListRequest = function(statementRequest) {\n  this.securityListRequest = statementRequest;\n};\n\n\n// Inherited.\nSecurityListRequestMessageSet.prototype.getRequestMessages = function() {\n  var requestMessages = [];\n  if (this.getSecurityListRequest()) {\n    requestMessages.push(this.getSecurityListRequest());\n  }\n  return requestMessages;\n};\n\n\n\n\nmodule.exports = SecurityListRequestMessageSet;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar TransactionWrappedRequestMessage = require(\"../TransactionWrappedRequestMessage\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar SecurityListRequest = require(\"./SecurityListRequest\");\n\n/**\n * Security list transaction request.\n * See \"Section 13.8.2.1, OFX Spec\"\n *\n * @class\n * @augments TransactionWrappedRequestMessage\n */\nfunction SecurityListRequestTransaction () {\n  TransactionWrappedRequestMessage.call(this);\n\n  /**\n   * @name SecurityListRequestTransaction#message\n   * @type SecurityListRequest\n   * @access private\n   */\n  this.message = null;\n}\n\ninherit(SecurityListRequestTransaction, \"extends\", TransactionWrappedRequestMessage);\n\n\nAggregate.add(\"SECLISTTRNRQ\", SecurityListRequestTransaction);\n\n\n/**\n * The message.\n *\n * @return {SecurityListRequest} The message.\n */\nSecurityListRequestTransaction.prototype.getMessage = function() {\n  return this.message;\n};\nChildAggregate.add(SecurityListRequestTransaction, {required: true, order: 30, attributeType: SecurityListRequest, readMethod: \"getMessage\", writeMethod: \"setMessage\"});\n\n\n/**\n * The message.\n *\n * @param {SecurityListRequest} message The message.\n *\n */\nSecurityListRequestTransaction.prototype.setMessage = function(message) {\n  this.message = message;\n};\n\n\n// Inherited.\nSecurityListRequestTransaction.prototype.setWrappedMessage = function(/*SecurityListRequest*/ message) {\n  this.setMessage(message);\n};\n\n\n\n\nmodule.exports = SecurityListRequestTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar ResponseMessage = require(\"../ResponseMessage\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\n\n/**\n * Security list response. This is an empty aggregate. The actual security information is included\n * in the \"SECLIST\" aggregate.\n * See \"Section 13.8.3, OFX Spec\"\n *\n * @class\n * @augments ResponseMessage\n */\nfunction SecurityListResponse () {\n  ResponseMessage.call(this);\n}\n\ninherit(SecurityListResponse, \"extends\", ResponseMessage);\n\n\nAggregate.add(\"SECLISTRS\", SecurityListResponse);\n\n\nSecurityListResponse.prototype.getResponseMessageName = function() {\n  return \"security list\";\n};\n\n\n\n\nmodule.exports = SecurityListResponse;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar MessageSetType = require(\"../MessageSetType\");\nvar ResponseMessageSet = require(\"../ResponseMessageSet\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar SecurityListResponseTransaction = require(\"./SecurityListResponseTransaction\");\nvar SecurityList = require(\"./SecurityList\");\n\n/**\n * @class\n * @augments ResponseMessageSet\n */\nfunction SecurityListResponseMessageSet () {\n  ResponseMessageSet.call(this);\n\n  /**\n   * @name SecurityListResponseMessageSet#securityListResponse\n   * @type SecurityListResponseTransaction\n   * @access private\n   */\n  this.securityListResponse = null;\n\n  /**\n   * @name SecurityListResponseMessageSet#securityList\n   * @type SecurityList\n   * @access private\n   */\n  this.securityList = null;\n}\n\ninherit(SecurityListResponseMessageSet, \"extends\", ResponseMessageSet);\n\n\nAggregate.add(\"SECLISTMSGSRSV1\", SecurityListResponseMessageSet);\n\n\nSecurityListResponseMessageSet.prototype.getType = function() {\n  return MessageSetType.investment_security;\n};\n\n\n/**\n * The security list response list transaction.\n *\n * Most OFX files have a single security response.\n *\n * @return {SecurityListResponseTransaction} The security list response list.\n */\nSecurityListResponseMessageSet.prototype.getSecurityListResponse = function() {\n  return this.securityListResponse;\n};\nChildAggregate.add(SecurityListResponseMessageSet, {order: 0, attributeType: SecurityListResponseTransaction, readMethod: \"getSecurityListResponse\", writeMethod: \"setSecurityListResponse\"});\n\n\n/**\n * The security list response.\n *\n * @param {SecurityListResponseTransaction} securityListResponse The security list response.\n */\nSecurityListResponseMessageSet.prototype.setSecurityListResponse = function(securityListResponse) {\n  this.securityListResponse = securityListResponse;\n};\n\n\nSecurityListResponseMessageSet.prototype.getSecurityList = function() {\n  return this.securityList;\n};\nChildAggregate.add(SecurityListResponseMessageSet, {order: 10, attributeType: SecurityList, readMethod: \"getSecurityList\", writeMethod: \"setSecurityList\"});\n\n\nSecurityListResponseMessageSet.prototype.setSecurityList = function(/*SecurityList*/ securityList) {\n  this.securityList = securityList;\n};\n\n\n// Inherited.\nSecurityListResponseMessageSet.prototype.getResponseMessages = function() {\n  var ret = [];\n  ret.push(this.securityListResponse);\n  return ret;\n};\n\n\n\n\nmodule.exports = SecurityListResponseMessageSet;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar TransactionWrappedResponseMessage = require(\"../TransactionWrappedResponseMessage\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar SecurityListResponse = require(\"./SecurityListResponse\");\n\n/**\n * Security list transaction response.\n * See \"Section 13.8.3.1, OFX Spec\"\n *\n * @class\n * @augments TransactionWrappedResponseMessage\n */\nfunction SecurityListResponseTransaction () {\n  TransactionWrappedResponseMessage.call(this);\n\n  /**\n   * @name SecurityListResponseTransaction#message\n   * @type SecurityListResponse\n   * @access private\n   */\n  this.message = null;\n}\n\ninherit(SecurityListResponseTransaction, \"extends\", TransactionWrappedResponseMessage);\n\n\nAggregate.add(\"SECLISTTRNRS\", SecurityListResponseTransaction);\n\n\n/**\n * The message.\n *\n * @return {SecurityListResponse} The message.\n */\nSecurityListResponseTransaction.prototype.getMessage = function() {\n  return this.message;\n};\nChildAggregate.add(SecurityListResponseTransaction, {required: true, order: 30, attributeType: SecurityListResponse, readMethod: \"getMessage\", writeMethod: \"setMessage\"});\n\n\n/**\n * The message.\n *\n * @param {SecurityListResponse} message The message.\n */\nSecurityListResponseTransaction.prototype.setMessage = function(message) {\n  this.message = message;\n};\n\n\n// Inherited.\nSecurityListResponseTransaction.prototype.getWrappedMessage = function() {\n  return this.getMessage();\n};\n\n\n\n\nmodule.exports = SecurityListResponseTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar SecurityId = require(\"./SecurityId\");\n\n/**\n * Security request aggregate.\n * See \"Section 13.8.2.2, OFX Spec\"\n *\n * @class\n */\nfunction SecurityRequest () {\n\n  /**\n   * @name SecurityRequest#securityId\n   * @type SecurityId\n   * @access private\n   */\n  this.securityId = null;\n\n  /**\n   * @name SecurityRequest#tickerSymbol\n   * @type String\n   * @access private\n   */\n  this.tickerSymbol = null;\n\n  /**\n   * @name SecurityRequest#fiId\n   * @type String\n   * @access private\n   */\n  this.fiId = null;\n}\n\n\n\nAggregate.add(\"SECRQ\", SecurityRequest);\n\n\nSecurityRequest.prototype.getSecurityId = function() {\n  return this.securityId;\n};\nElement.add(SecurityRequest, {name: \"SECID\", order: 10, attributeType: SecurityId, readMethod: \"getSecurityId\", writeMethod: \"setSecurityId\"});\n\n\nSecurityRequest.prototype.setSecurityId = function(/*SecurityId*/ securityId) {\n  this.securityId = securityId;\n  this.tickerSymbol = null;\n  this.fiId = null;\n};\n\n\nSecurityRequest.prototype.getTickerSymbol = function() {\n  return this.tickerSymbol;\n};\nElement.add(SecurityRequest, {name: \"TICKER\", order: 20, attributeType: String, readMethod: \"getTickerSymbol\", writeMethod: \"setTickerSymbol\"});\n\n\nSecurityRequest.prototype.setTickerSymbol = function(/*String*/ tickerSymbol) {\n  this.tickerSymbol = tickerSymbol;\n  this.securityId = null;\n  this.fiId = null;\n};\n\n\nSecurityRequest.prototype.getFiId = function() {\n  return this.fiId;\n};\nElement.add(SecurityRequest, {name: \"FIID\", order: 30, attributeType: String, readMethod: \"getFiId\", writeMethod: \"setFiId\"});\n\n\nSecurityRequest.prototype.setFiId = function(/*String*/ fiId) {\n  this.fiId = fiId;\n  this.securityId = null;\n  this.tickerSymbol = null;\n};\n\n\n\n\nmodule.exports = SecurityRequest;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar BaseSecurityInfo = require(\"./BaseSecurityInfo\");\nvar StockType = require(\"./StockType\");\nvar AssetClass = require(\"./AssetClass\");\n\n/**\n * Info about a stock security.\n * See \"Section 13.8.5.6, OFX Spec\"\n *\n * @class\n * @augments BaseSecurityInfo\n */\nfunction StockSecurityInfo () {\n  BaseSecurityInfo.call(this);\n\n  /**\n   * @name StockSecurityInfo#stockType\n   * @type String\n   * @access private\n   */\n  this.stockType = null;\n\n  /**\n   * @name StockSecurityInfo#yield\n   * @type Double\n   * @access private\n   */\n  this.yield = null;\n\n  /**\n   * @name StockSecurityInfo#dateYieldAsOf\n   * @type Date\n   * @access private\n   */\n  this.dateYieldAsOf = null;\n\n  /**\n   * @name StockSecurityInfo#assetClass\n   * @type String\n   * @access private\n   */\n  this.assetClass = null;\n\n  /**\n   * @name StockSecurityInfo#fiAssetClass\n   * @type String\n   * @access private\n   */\n  this.fiAssetClass = null;\n}\n\ninherit(StockSecurityInfo, \"extends\", BaseSecurityInfo);\n\n\nAggregate.add(\"STOCKINFO\", StockSecurityInfo);\n\n\n/**\n * Gets the type of stock. One of \"COMMON\", \"PREFERRED\", \"CONVERTIBLE\", or \"OTHER\". This is an\n * optional field according to the OFX spec.\n *\n * @return {String} the type of stock\n */\nStockSecurityInfo.prototype.getType = function() {\n  return this.stockType;\n};\nElement.add(StockSecurityInfo, {name: \"STOCKTYPE\", order: 20, attributeType: String, readMethod: \"getType\", writeMethod: \"setType\"});\n\n\n/**\n * Sets the type of stock. One of \"COMMON\", \"PREFERRED\", \"CONVERTIBLE\", or \"OTHER\". This is an\n * optional field according to the OFX spec.\n *\n * @param {String} stockType the type of stock\n */\nStockSecurityInfo.prototype.setType = function(stockType) {\n  this.stockType = stockType;\n};\n\n\n/**\n * Gets the type of stock as one of the well-known types.\n *\n * @return {StockType} the type of stock or null if it's not one of the well-known types\n */\nStockSecurityInfo.prototype.getTypeEnum = function() {\n  return StockType.fromOfx(this.getType());\n};\n\n\n/**\n * Gets the current yield reported as the dividend expressed as a portion of the current stock\n * price, a rate. This is an optional field according to the OFX spec.\n *\n * @return {Double} the dividend yield\n */\nStockSecurityInfo.prototype.getYield = function() {\n  return this.yield;\n};\nElement.add(StockSecurityInfo, {name: \"YIELD\", order: 30, attributeType: Number, readMethod: \"getYield\", writeMethod: \"setYield\"});\n\n\n/**\n * Sets the current yield reported as the dividend expressed as a portion of the current stock\n * price, a rate. This is an optional field according to the OFX spec.\n *\n * @param {Double} yield the dividend yield\n */\nStockSecurityInfo.prototype.setYield = function(yield_) {\n  this.yield = yield_;\n};\n\n\n/**\n * Gets the as-of date for the yield. This is an optional field according to the OFX spec.\n *\n * @return {Date} the as-of date for the yield\n */\nStockSecurityInfo.prototype.getDateYieldAsOf = function() {\n  return this.dateYieldAsOf;\n};\nElement.add(StockSecurityInfo, {name: \"DTYIELDASOF\", order: 40, attributeType: Date, readMethod: \"getDateYieldAsOf\", writeMethod: \"setDateYieldAsOf\"});\n\n\n/**\n * Sets the as-of date for the yield. This is an optional field according to the OFX spec.\n *\n * @param {Date} dateYieldAsOf the as-of date for the yield\n */\nStockSecurityInfo.prototype.setDateYieldAsOf = function(dateYieldAsOf) {\n  this.dateYieldAsOf = dateYieldAsOf;\n};\n\n\n/**\n * Gets the asset class of the stock. This is an optional field according to the OFX spec.\n *\n * @return {String} the asset class of the stock\n */\nStockSecurityInfo.prototype.getAssetClass = function() {\n  return this.assetClass;\n};\nElement.add(StockSecurityInfo, {name: \"ASSETCLASS\", order: 50, attributeType: String, readMethod: \"getAssetClass\", writeMethod: \"setAssetClass\"});\n\n\n/**\n * Sets the asset class of the stock. This is an optional field according to the OFX spec.\n *\n * @param {String} assetClass the asset class of the stock\n */\nStockSecurityInfo.prototype.setAssetClass = function(assetClass) {\n  this.assetClass = assetClass;\n};\n\n\n/**\n * Gets the assert class as one of the well-known types.\n *\n * @return {AssetClass} the asset class or null if it's not one of the well-known types\n */\nStockSecurityInfo.prototype.getAssetClassEnum = function() {\n  return AssetClass.fromOfx(this.getAssetClass());\n};\n\n\n/**\n * Gets the FI-defined asset class of the stock. This is an optional field according to the OFX\n * spec.\n *\n * @return {String} the FI-defined asset class of the stock\n */\nStockSecurityInfo.prototype.getFiAssetClass = function() {\n  return this.fiAssetClass;\n};\nElement.add(StockSecurityInfo, {name: \"FIASSETCLASS\", order: 60, attributeType: String, readMethod: \"getFiAssetClass\", writeMethod: \"setFiAssetClass\"});\n\n\n/**\n * Sets the FI-defined asset class of the stock. This is an optional field according to the OFX\n * spec.\n *\n * @param {String} fiAssetClass the FI-defined asset class of the stock\n */\nStockSecurityInfo.prototype.setFiAssetClass = function(fiAssetClass) {\n  this.fiAssetClass = fiAssetClass;\n};\n\n\n\n\nmodule.exports = StockSecurityInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * The type of debt.\n * See \"Section 13.8.5.6, OFX Spec\"\n *\n * @enum\n */\nvar StockType = {\n  COMMON: \"COMMON\",\n  PREFERRED: \"PREFERRED\",\n  CONVERTIBLE: \"CONVERTIBLE\",\n  OTHER: \"OTHER\",\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"COMMON\" === ofxVal) {\n      return StockType.COMMON;\n    } else if (\"PREFERRED\" === ofxVal) {\n      return StockType.PREFERRED;\n    } else if (\"CONVERTIBLE\" === ofxVal) {\n      return StockType.CONVERTIBLE;\n    } else if (\"OTHER\" === ofxVal) {\n      return StockType.OTHER;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = StockType;\n","\"use strict\";\n\nmodule.exports = {\n  AssetClass: require(\"./AssetClass\"),\n  BaseSecurityInfo: require(\"./BaseSecurityInfo\"),\n  CallType: require(\"./CallType\"),\n  CouponFrequency: require(\"./CouponFrequency\"),\n  DebtClass: require(\"./DebtClass\"),\n  DebtSecurityInfo: require(\"./DebtSecurityInfo\"),\n  DebtType: require(\"./DebtType\"),\n  MutualFundSecurityInfo: require(\"./MutualFundSecurityInfo\"),\n  MutualFundType: require(\"./MutualFundType\"),\n  OptionSecurityInfo: require(\"./OptionSecurityInfo\"),\n  OptionType: require(\"./OptionType\"),\n  OtherSecurityInfo: require(\"./OtherSecurityInfo\"),\n  SecurityId: require(\"./SecurityId\"),\n  SecurityInfo: require(\"./SecurityInfo\"),\n  SecurityList: require(\"./SecurityList\"),\n  SecurityListRequest: require(\"./SecurityListRequest\"),\n  SecurityListRequestMessageSet: require(\"./SecurityListRequestMessageSet\"),\n  SecurityListRequestTransaction: require(\"./SecurityListRequestTransaction\"),\n  SecurityListResponse: require(\"./SecurityListResponse\"),\n  SecurityListResponseMessageSet: require(\"./SecurityListResponseMessageSet\"),\n  SecurityListResponseTransaction: require(\"./SecurityListResponseTransaction\"),\n  SecurityRequest: require(\"./SecurityRequest\"),\n  StockSecurityInfo: require(\"./StockSecurityInfo\"),\n  StockType: require(\"./StockType\"),\n};\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\n\n/**\n * @class\n */\nfunction FinancialInstitution () {\n\n  /**\n   * @name FinancialInstitution#id\n   * @type String\n   * @access private\n   */\n  this.id = null;\n\n  /**\n   * @name FinancialInstitution#organization\n   * @type String\n   * @access private\n   */\n  this.organization = null;\n}\n\n\n\nAggregate.add(\"FI\", FinancialInstitution);\n\n\n/**\n * Financial institution id.\n *\n * @return {String} Financial institution id.\n */\nFinancialInstitution.prototype.getId = function() {\n  return this.id;\n};\nElement.add(FinancialInstitution, {name: \"FID\", order: 10, attributeType: String, readMethod: \"getId\", writeMethod: \"setId\"});\n\n\n/**\n * Financial institution id.\n *\n * @param {String} id Financial institution id.\n */\nFinancialInstitution.prototype.setId = function(id) {\n  this.id = id;\n};\n\n\n/**\n * The organization.\n *\n * @return {String} The organization.\n */\nFinancialInstitution.prototype.getOrganization = function() {\n  return this.organization;\n};\nElement.add(FinancialInstitution, {name: \"ORG\", required: true, order: 0, attributeType: String, readMethod: \"getOrganization\", writeMethod: \"setOrganization\"});\n\n\n/**\n * The organization.\n *\n * @param {String} organization The organization.\n */\nFinancialInstitution.prototype.setOrganization = function(organization) {\n  this.organization = organization;\n};\n\n\n\n\nmodule.exports = FinancialInstitution;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar RequestMessage = require(\"../RequestMessage\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\n\n/**\n * Request to change a user password.\n *\n * @class\n * See \"Section 2.5.2.1, OFX Spec.\"\n */\nfunction PasswordChangeRequest () {\n  RequestMessage.call(this);\n\n  /**\n   * @name PasswordChangeRequest#userId\n   * @type String\n   * @access private\n   */\n  this.userId = null;\n\n  /**\n   * @name PasswordChangeRequest#newPassword\n   * @type String\n   * @access private\n   */\n  this.newPassword = null;\n}\n\ninherit(PasswordChangeRequest, \"extends\", RequestMessage);\n\n\nAggregate.add(\"PINCHRQ\", PasswordChangeRequest);\n\n\n/**\n * The id of the user changing password.\n *\n * @return {String} The id of the user changing password.\n */\nPasswordChangeRequest.prototype.getUserId = function() {\n  return this.userId;\n};\nElement.add(PasswordChangeRequest, {name: \"USERID\", required: true, order: 0, attributeType: String, readMethod: \"getUserId\", writeMethod: \"setUserId\"});\n\n\n/**\n * The id of the user changing password.\n *\n * @param {String} userId The id of the user changing password.\n */\nPasswordChangeRequest.prototype.setUserId = function(userId) {\n  this.userId = userId;\n};\n\n\n/**\n * The new password.\n *\n * @return {String} The new password.\n */\nPasswordChangeRequest.prototype.getNewPassword = function() {\n  return this.newPassword;\n};\nElement.add(PasswordChangeRequest, {name: \"NEWUSERPASS\", required: true, order: 10, attributeType: String, readMethod: \"getNewPassword\", writeMethod: \"setNewPassword\"});\n\n\n/**\n * The new password.\n *\n * @param {String} newPassword The new password.\n */\nPasswordChangeRequest.prototype.setNewPassword = function(newPassword) {\n  this.newPassword = newPassword;\n};\n\n\n\n\nmodule.exports = PasswordChangeRequest;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar TransactionWrappedRequestMessage = require(\"../TransactionWrappedRequestMessage\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar PasswordChangeRequest = require(\"./PasswordChangeRequest\");\n\n/**\n * @class\n * @augments TransactionWrappedRequestMessage\n */\nfunction PasswordChangeRequestTransaction () {\n  TransactionWrappedRequestMessage.call(this);\n\n  /**\n   * @name PasswordChangeRequestTransaction#message\n   * @type PasswordChangeRequest\n   * @access private\n   */\n  this.message = null;\n}\n\ninherit(PasswordChangeRequestTransaction, \"extends\", TransactionWrappedRequestMessage);\n\n\nAggregate.add(\"PINCHTRNRQ\", PasswordChangeRequestTransaction);\n\n\n/**\n * The wrapped message.\n *\n * @return {PasswordChangeRequest} The wrapped message.\n */\nPasswordChangeRequestTransaction.prototype.getMessage = function() {\n  return this.message;\n};\nChildAggregate.add(PasswordChangeRequestTransaction, {required: true, order: 30, attributeType: PasswordChangeRequest, readMethod: \"getMessage\", writeMethod: \"setMessage\"});\n\n\n/**\n * The wrapped message.\n *\n * @param {PasswordChangeRequest} message The wrapped message.\n */\nPasswordChangeRequestTransaction.prototype.setMessage = function(message) {\n  this.message = message;\n};\n\n\n// Inherited.\nPasswordChangeRequestTransaction.prototype.setWrappedMessage = function(/*PasswordChangeRequest*/ message) {\n  this.setMessage(message);\n};\n\n\n\n\nmodule.exports = PasswordChangeRequestTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar ResponseMessage = require(\"../ResponseMessage\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\n\n/**\n * Response to a change a user password request.\n *\n * @class\n * @augments ResponseMessage\n * See \"Section 2.5.2.2, OFX Spec.\"\n */\nfunction PasswordChangeResponse () {\n  ResponseMessage.call(this);\n\n  /**\n   * @name PasswordChangeResponse#userId\n   * @type String\n   * @access private\n   */\n  this.userId = null;\n\n  /**\n   * @name PasswordChangeResponse#changeTimestamp\n   * @type Date\n   * @access private\n   */\n  this.changeTimestamp = null;\n}\n\ninherit(PasswordChangeResponse, \"extends\", ResponseMessage);\n\n\nAggregate.add(\"PINCHRQ\", PasswordChangeResponse);\n\n\n/**\n * The id of the user changing password.\n *\n * @return {String} The id of the user changing password.\n */\nPasswordChangeResponse.prototype.getUserId = function() {\n  return this.userId;\n};\nElement.add(PasswordChangeResponse, {name: \"USERID\", required: true, order: 0, attributeType: String, readMethod: \"getUserId\", writeMethod: \"setUserId\"});\n\n\n// Inherited.\nPasswordChangeResponse.prototype.getResponseMessageName = function() {\n  return \"password change\";\n};\n\n\n/**\n * The id of the user changing password.\n *\n * @param {String} userId The id of the user changing password.\n */\nPasswordChangeResponse.prototype.setUserId = function(userId) {\n  this.userId = userId;\n};\n\n\n/**\n * The timestamp of the password change.\n *\n * @return {Date} The timestamp of the password change.\n */\nPasswordChangeResponse.prototype.getChangeTimestamp = function() {\n  return this.changeTimestamp;\n};\nElement.add(PasswordChangeResponse, {name: \"DTCHANGED\", order: 10, attributeType: Date, readMethod: \"getChangeTimestamp\", writeMethod: \"setChangeTimestamp\"});\n\n\n/**\n * The timestamp of the password change.\n *\n * @param {Date} changeTimestamp The timestamp of the password change.\n */\nPasswordChangeResponse.prototype.setChangeTimestamp = function(changeTimestamp) {\n  this.changeTimestamp = changeTimestamp;\n};\n\n\n\n\nmodule.exports = PasswordChangeResponse;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar TransactionWrappedResponseMessage = require(\"../TransactionWrappedResponseMessage\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar PasswordChangeResponse = require(\"./PasswordChangeResponse\");\n\n/**\n * @class\n * @augments TransactionWrappedResponseMessage\n */\nfunction PasswordChangeResponseTransaction () {\n  TransactionWrappedResponseMessage.call(this);\n\n  /**\n   * @name PasswordChangeResponseTransaction#message\n   * @type PasswordChangeResponse\n   * @access private\n   */\n  this.message = null;\n}\n\ninherit(PasswordChangeResponseTransaction, \"extends\", TransactionWrappedResponseMessage);\n\n\nAggregate.add(\"PINCHTRNRS\", PasswordChangeResponseTransaction);\n\n\n/**\n * The message.\n *\n * @return {PasswordChangeResponse} The message.\n */\nPasswordChangeResponseTransaction.prototype.getMessage = function() {\n  return this.message;\n};\nChildAggregate.add(PasswordChangeResponseTransaction, {required: true, order: 30, attributeType: PasswordChangeResponse, readMethod: \"getMessage\", writeMethod: \"setMessage\"});\n\n\n/**\n * The message.\n *\n * @param {PasswordChangeResponse} message The message.\n */\nPasswordChangeResponseTransaction.prototype.setMessage = function(message) {\n  this.message = message;\n};\n\n\n// Inherited.\nPasswordChangeResponseTransaction.prototype.getWrappedMessage = function() {\n  return this.getMessage();\n};\n\n\n\n\nmodule.exports = PasswordChangeResponseTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar RequestMessage = require(\"../RequestMessage\");\nvar FinancialInstitution = require(\"./FinancialInstitution\");\n\n/**\n * Sign-on request\n *\n * @class\n * @augments RequestMessage\n * See \"Section 2.5.1.2, OFX Spec.\"\n */\nfunction SignonRequest () {\n  RequestMessage.call(this);\n\n  /**\n   * @name SignonRequest#timestamp\n   * @type Date\n   * @access private\n   */\n  this.timestamp = null;\n\n  /**\n   * @name SignonRequest#userId\n   * @type String\n   * @access private\n   */\n  this.userId = null;\n\n  /**\n   * @name SignonRequest#password\n   * @type String\n   * @access private\n   */\n  this.password = null;\n\n  /**\n   * @name SignonRequest#userKey\n   * @type String\n   * @access private\n   */\n  this.userKey = null;\n\n  /**\n   * @name SignonRequest#generateUserKey\n   * @type Boolean\n   * @access private\n   */\n  this.generateUserKey = null;\n\n  /**\n   * @name SignonRequest#language\n   * @type String\n   * @access private\n   */\n  this.language = \"ENG\";\n\n  /**\n   * @name SignonRequest#financialInstitution\n   * @type FinancialInstitution\n   * @access private\n   */\n  this.financialInstitution = null;\n\n  /**\n   * @name SignonRequest#sessionId\n   * @type String\n   * @access private\n   */\n  this.sessionId = null;\n\n  /**\n   * @name SignonRequest#applicationId\n   * @type String\n   * @access private\n   */\n  this.applicationId = \"Money\";\n\n  /**\n   * @name SignonRequest#applicationVersion\n   * @type String\n   * @access private\n   */\n  this.applicationVersion = \"1600\";\n\n  /**\n   * @name SignonRequest#clientUID\n   * @type String\n   * @access private\n   */\n  this.clientUID = null;\n\n  /**\n   * @name SignonRequest#additionalCredentials1\n   * @type String\n   * @access private\n   */\n  this.additionalCredentials1 = null;\n\n  /**\n   * @name SignonRequest#additionalCredentials2\n   * @type String\n   * @access private\n   */\n  this.additionalCredentials2 = null;\n\n  /**\n   * @name SignonRequest#authToken\n   * @type String\n   * @access private\n   */\n  this.authToken = null;\n\n  /**\n   * @name SignonRequest#accessKey\n   * @type String\n   * @access private\n   */\n  this.accessKey = null;\n}\n\ninherit(SignonRequest, \"extends\", RequestMessage);\n\n\nAggregate.add(\"SONRQ\", SignonRequest);\n\n\n\n/**\n * @name SignonRequest.ANONYMOUS_USER\n * @type String\n */\nSignonRequest.ANONYMOUS_USER = \"anonymous00000000000000000000000\";\n\n\n/**\n * The date and time of the request.\n *\n * @return {Date} The date and time of the request.\n */\nSignonRequest.prototype.getTimestamp = function() {\n  return this.timestamp;\n};\nElement.add(SignonRequest, {name: \"DTCLIENT\", required: true, order: 0, attributeType: Date, readMethod: \"getTimestamp\", writeMethod: \"setTimestamp\"});\n\n\n/**\n * The date and time of the request.\n *\n * @param {Date} timestamp The date and time of the request.\n */\nSignonRequest.prototype.setTimestamp = function(timestamp) {\n  this.timestamp = timestamp;\n};\n\n\n/**\n * The user id.\n *\n * @return {String} The user id.\n */\nSignonRequest.prototype.getUserId = function() {\n  return this.userId;\n};\nElement.add(SignonRequest, {name: \"USERID\", order: 10, attributeType: String, readMethod: \"getUserId\", writeMethod: \"setUserId\"});\n\n\n/**\n * The user id.\n *\n * @param {String} userId The user id.\n */\nSignonRequest.prototype.setUserId = function(userId) {\n  this.userId = userId;\n};\n\n\n/**\n * The password.\n *\n * @return {String} The password.\n */\nSignonRequest.prototype.getPassword = function() {\n  return this.password;\n};\nElement.add(SignonRequest, {name: \"USERPASS\", order: 20, attributeType: String, readMethod: \"getPassword\", writeMethod: \"setPassword\"});\n\n\n/**\n * The password.\n *\n * @param {String} password The password.\n */\nSignonRequest.prototype.setPassword = function(password) {\n  this.password = password;\n};\n\n\n/**\n * The user key provided by the server so as not to require further username/password authentication.\n *\n * @return {String} The user key provided by the server so as not to require further username/password authentication.\n */\nSignonRequest.prototype.getUserKey = function() {\n  return this.userKey;\n};\nElement.add(SignonRequest, {name: \"USERKEY\", order: 30, attributeType: String, readMethod: \"getUserKey\", writeMethod: \"setUserKey\"});\n\n\n/**\n * The user key provided by the server so as not to require further username/password authentication.\n *\n * @param {String} userKey The user key provided by the server so as not to require further username/password authentication.\n */\nSignonRequest.prototype.setUserKey = function(userKey) {\n  this.userKey = userKey;\n};\n\n\n/**\n * Whether to request the server to generate a user key.\n *\n * @return {Boolean} Whether to request the server to generate a user key.\n */\nSignonRequest.prototype.getGenerateUserKey = function() {\n  return this.generateUserKey;\n};\nElement.add(SignonRequest, {name: \"GENUSERKEY\", order: 40, attributeType: Boolean, readMethod: \"getGenerateUserKey\", writeMethod: \"setGenerateUserKey\"});\n\n\n/**\n * Whether to request the server to generate a user key.\n *\n * @param {Boolean} generateUserKey Whether to request the server to generate a user key.\n */\nSignonRequest.prototype.setGenerateUserKey = function(generateUserKey) {\n  this.generateUserKey = generateUserKey;\n};\n\n\n/**\n * The three-letter langauge code.\n *\n * @return {String} The three-letter langauge code.\n * @see java.util.Locale#getISO3Language()\n */\nSignonRequest.prototype.getLanguage = function() {\n  return this.language;\n};\nElement.add(SignonRequest, {name: \"LANGUAGE\", required: true, order: 50, attributeType: String, readMethod: \"getLanguage\", writeMethod: \"setLanguage\"});\n\n\n/**\n * The three-letter langauge code.\n *\n * @param {String} language The three-letter langauge code.\n */\nSignonRequest.prototype.setLanguage = function(language) {\n  this.language = language;\n};\n\n\n/**\n * The financial institution.\n *\n * @return {FinancialInstitution} The financial institution.\n */\nSignonRequest.prototype.getFinancialInstitution = function() {\n  return this.financialInstitution;\n};\nChildAggregate.add(SignonRequest, {order: 60, attributeType: FinancialInstitution, readMethod: \"getFinancialInstitution\", writeMethod: \"setFinancialInstitution\"});\n\n\n/**\n * The financial institution.\n *\n * @param {FinancialInstitution} financialInstitution The financial institution.\n */\nSignonRequest.prototype.setFinancialInstitution = function(financialInstitution) {\n  this.financialInstitution = financialInstitution;\n};\n\n\n/**\n * The server-supplied session id.\n *\n * @return {String} The server-supplied session id.\n */\nSignonRequest.prototype.getSessionId = function() {\n  return this.sessionId;\n};\nElement.add(SignonRequest, {name: \"SESSCOOKIE\", order: 70, attributeType: String, readMethod: \"getSessionId\", writeMethod: \"setSessionId\"});\n\n\n/**\n * The server-supplied session id.\n *\n * @param {String} sessionId The server-supplied session id.\n */\nSignonRequest.prototype.setSessionId = function(sessionId) {\n  this.sessionId = sessionId;\n};\n\n\n/**\n * The application id.\n *\n * @return {String} The application id.\n */\nSignonRequest.prototype.getApplicationId = function() {\n  return this.applicationId;\n};\nElement.add(SignonRequest, {name: \"APPID\", required: true, order: 80, attributeType: String, readMethod: \"getApplicationId\", writeMethod: \"setApplicationId\"});\n\n\n/**\n * The application id.\n *\n * @param {String} applicationId The application id.\n */\nSignonRequest.prototype.setApplicationId = function(applicationId) {\n  this.applicationId = applicationId;\n};\n\n\n/**\n * The application version.\n *\n * @return {String} The application version.\n */\nSignonRequest.prototype.getApplicationVersion = function() {\n  return this.applicationVersion;\n};\nElement.add(SignonRequest, {name: \"APPVER\", required: true, order: 90, attributeType: String, readMethod: \"getApplicationVersion\", writeMethod: \"setApplicationVersion\"});\n\n\n/**\n * The application version.\n *\n * @param {String} applicationVersion The application version.\n */\nSignonRequest.prototype.setApplicationVersion = function(applicationVersion) {\n  this.applicationVersion = applicationVersion;\n};\n\n\n/**\n * The client-supplied UID.\n *\n * @return {String} The client-supplied UID.\n */\nSignonRequest.prototype.getClientUID = function() {\n  return this.clientUID;\n};\nElement.add(SignonRequest, {name: \"CLIENTUID\", order: 100, attributeType: String, readMethod: \"getClientUID\", writeMethod: \"setClientUID\"});\n\n\n/**\n * The client-supplied UID.\n *\n * @param {String} clientUID The client-supplied UID.\n */\nSignonRequest.prototype.setClientUID = function(clientUID) {\n  this.clientUID = clientUID;\n};\n\n\n/**\n * Any additional credentials.\n *\n * @return {String} Any additional credentials.\n */\nSignonRequest.prototype.getAdditionalCredentials1 = function() {\n  return this.additionalCredentials1;\n};\nElement.add(SignonRequest, {name: \"USERCRED1\", order: 110, attributeType: String, readMethod: \"getAdditionalCredentials1\", writeMethod: \"setAdditionalCredentials1\"});\n\n\n/**\n * Any additional credentials.\n *\n * @param {String} additionalCredentials1 Any additional credentials.\n */\nSignonRequest.prototype.setAdditionalCredentials1 = function(additionalCredentials1) {\n  this.additionalCredentials1 = additionalCredentials1;\n};\n\n\n/**\n * Any additional credentials.\n *\n * @return {String} Any additional credentials.\n */\nSignonRequest.prototype.getAdditionalCredentials2 = function() {\n  return this.additionalCredentials2;\n};\nElement.add(SignonRequest, {name: \"USERCRED2\", order: 120, attributeType: String, readMethod: \"getAdditionalCredentials2\", writeMethod: \"setAdditionalCredentials2\"});\n\n\n/**\n * Any additional credentials.\n *\n * @param {String} additionalCredentials2 Any additional credentials.\n */\nSignonRequest.prototype.setAdditionalCredentials2 = function(additionalCredentials2) {\n  this.additionalCredentials2 = additionalCredentials2;\n};\n\n\n/**\n * The authentication token.\n *\n * @return {String} The authentication token.\n */\nSignonRequest.prototype.getAuthToken = function() {\n  return this.authToken;\n};\nElement.add(SignonRequest, {name: \"AUTHTOKEN\", order: 130, attributeType: String, readMethod: \"getAuthToken\", writeMethod: \"setAuthToken\"});\n\n\n/**\n * The authentication token.\n *\n * @param {String} authToken The authentication token.\n */\nSignonRequest.prototype.setAuthToken = function(authToken) {\n  this.authToken = authToken;\n};\n\n\n/**\n * The access key.\n *\n * @return {String} The access key.\n */\nSignonRequest.prototype.getAccessKey = function() {\n  return this.accessKey;\n};\nElement.add(SignonRequest, {name: \"ACCESSKEY\", order: 140, attributeType: String, readMethod: \"getAccessKey\", writeMethod: \"setAccessKey\"});\n\n\n/**\n * The access key.\n *\n * @param {String} accessKey The access key.\n */\nSignonRequest.prototype.setAccessKey = function(accessKey) {\n  this.accessKey = accessKey;\n};\n\n\n\n\nmodule.exports = SignonRequest;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar MessageSetType = require(\"../MessageSetType\");\nvar RequestMessageSet = require(\"../RequestMessageSet\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar SignonRequest = require(\"./SignonRequest\");\nvar PasswordChangeRequestTransaction = require(\"./PasswordChangeRequestTransaction\");\n\n/**\n * The sign-on request message set.\n *\n * @class\n * @augments RequestMessageSet\n * See \"Section 2.5, OFX Spec.\"\n */\nfunction SignonRequestMessageSet () {\n  RequestMessageSet.call(this);\n\n  /**\n   * @name SignonRequestMessageSet#signonRequest\n   * @type SignonRequest\n   * @access private\n   */\n  this.signonRequest = null;\n\n  /**\n   * @name SignonRequestMessageSet#passwordChangeRequest\n   * @type PasswordChangeRequestTransaction\n   * @access private\n   */\n  this.passwordChangeRequest = null;\n}\n\ninherit(SignonRequestMessageSet, \"extends\", RequestMessageSet);\n\n\nAggregate.add(\"SIGNONMSGSRQV1\", SignonRequestMessageSet);\n\n\nSignonRequestMessageSet.prototype.getType = function() {\n  return MessageSetType.signon;\n};\n\n\n/**\n * The message for this message set.\n *\n * @return {SignonRequest} The message for this message set.\n */\nSignonRequestMessageSet.prototype.getSignonRequest = function() {\n  return this.signonRequest;\n};\nChildAggregate.add(SignonRequestMessageSet, {required: true, order: 0, attributeType: SignonRequest, readMethod: \"getSignonRequest\", writeMethod: \"setSignonRequest\"});\n\n\n/**\n * The message for this message set.\n *\n * @param {SignonRequest} signonRequest The message for this message set.\n */\nSignonRequestMessageSet.prototype.setSignonRequest = function(signonRequest) {\n  this.signonRequest = signonRequest;\n};\n\n\n/**\n * The password change request.\n *\n * @return {PasswordChangeRequestTransaction} The password change request.\n */\nSignonRequestMessageSet.prototype.getPasswordChangeRequest = function() {\n  return this.passwordChangeRequest;\n};\nChildAggregate.add(SignonRequestMessageSet, {order: 10, attributeType: PasswordChangeRequestTransaction, readMethod: \"getPasswordChangeRequest\", writeMethod: \"setPasswordChangeRequest\"});\n\n\n/**\n * The password change request.\n *\n * @param {PasswordChangeRequestTransaction} passwordChangeRequest The password change request.\n */\nSignonRequestMessageSet.prototype.setPasswordChangeRequest = function(passwordChangeRequest) {\n  this.passwordChangeRequest = passwordChangeRequest;\n};\n\n\n//todo: challenge request/response\n// Inherited.\nSignonRequestMessageSet.prototype.getRequestMessages = function() {\n  var requestMessages = [];\n\n  if (this.getSignonRequest()) {\n    requestMessages.push(this.getSignonRequest());\n  }\n\n  if (this.getPasswordChangeRequest()) {\n    requestMessages.this(this.getPasswordChangeRequest());\n  }\n\n  return requestMessages;\n};\n\n\n\n\nmodule.exports = SignonRequestMessageSet;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar StatusHolder = require(\"../common/StatusHolder\");\nvar ResponseMessage = require(\"../ResponseMessage\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar Status = require(\"../common/Status\");\nvar FinancialInstitution = require(\"./FinancialInstitution\");\n\n/**\n * The signon response message.\n *\n * @class\n * @augments ResponseMessage\n * @augments StatusHolder\n * See \"Section 2.5.1.2, OFX Spec.\"\n */\nfunction SignonResponse () {\n  ResponseMessage.call(this);\n\n  /**\n   * @name SignonResponse#status\n   * @type Status\n   * @access private\n   */\n  this.status = null;\n\n  /**\n   * @name SignonResponse#timestamp\n   * @type Date\n   * @access private\n   */\n  this.timestamp = null;\n\n  /**\n   * @name SignonResponse#userKey\n   * @type String\n   * @access private\n   */\n  this.userKey = null;\n\n  /**\n   * @name SignonResponse#userKeyExpiration\n   * @type Date\n   * @access private\n   */\n  this.userKeyExpiration = null;\n\n  /**\n   * @name SignonResponse#language\n   * @type String\n   * @access private\n   */\n  this.language = \"eng\";\n\n  /**\n   * @name SignonResponse#profileLastUpdated\n   * @type Date\n   * @access private\n   */\n  this.profileLastUpdated = null;\n\n  /**\n   * @name SignonResponse#accountLastUpdated\n   * @type Date\n   * @access private\n   */\n  this.accountLastUpdated = null;\n\n  /**\n   * @name SignonResponse#financialInstitution\n   * @type FinancialInstitution\n   * @access private\n   */\n  this.financialInstitution = null;\n\n  /**\n   * @name SignonResponse#sessionId\n   * @type String\n   * @access private\n   */\n  this.sessionId = null;\n\n  /**\n   * @name SignonResponse#accessKey\n   * @type String\n   * @access private\n   */\n  this.accessKey = null;\n}\n\ninherit(SignonResponse, \"extends\", ResponseMessage);\ninherit(SignonResponse, \"implements\", StatusHolder);\n\n\nAggregate.add(\"SONRS\", SignonResponse);\n\n\nSignonResponse.prototype.getResponseMessageName = function() {\n  return \"signon\";\n};\n\n\nSignonResponse.prototype.getStatusHolderName = function() {\n  return this.getResponseMessageName();\n};\n\n\n/**\n * The signon response status.\n *\n * @return {Status} The signon response status.\n */\nSignonResponse.prototype.getStatus = function() {\n  return this.status;\n};\nChildAggregate.add(SignonResponse, {required: true, order: 0, attributeType: Status, readMethod: \"getStatus\", writeMethod: \"setStatus\"});\n\n\n/**\n * The signon response status.\n *\n * @param {Status} status The signon response status.\n */\nSignonResponse.prototype.setStatus = function(status) {\n  this.status = status;\n};\n\n\n/**\n * The timestamp of this response.\n *\n * @return {Date} The timestamp of this response.\n */\nSignonResponse.prototype.getTimestamp = function() {\n  return this.timestamp;\n};\nElement.add(SignonResponse, {name: \"DTSERVER\", required: true, order: 10, attributeType: Date, readMethod: \"getTimestamp\", writeMethod: \"setTimestamp\"});\n\n\n/**\n * The timestamp of this response.\n *\n * @param {Date} timestamp The timestamp of this response.\n */\nSignonResponse.prototype.setTimestamp = function(timestamp) {\n  this.timestamp = timestamp;\n};\n\n\n/**\n * The userkey that can be used instead of the username/password.\n *\n * @return {String} The userkey that can be used instead of the username/password.\n */\nSignonResponse.prototype.getUserKey = function() {\n  return this.userKey;\n};\nElement.add(SignonResponse, {name: \"USERKEY\", order: 20, attributeType: String, readMethod: \"getUserKey\", writeMethod: \"setUserKey\"});\n\n\n/**\n * The userkey that can be used instead of the username/password.\n *\n * @param {String} userKey The userkey that can be used instead of the username/password.\n */\nSignonResponse.prototype.setUserKey = function(userKey) {\n  this.userKey = userKey;\n};\n\n\n/**\n * The date/time of the expiration of the user key.\n *\n * @return {Date} The date/time of the expiration of the user key.\n */\nSignonResponse.prototype.getUserKeyExpiration = function() {\n  return this.userKeyExpiration;\n};\nElement.add(SignonResponse, {name: \"TSKEYEXPIRE\", order: 30, attributeType: Date, readMethod: \"getUserKeyExpiration\", writeMethod: \"setUserKeyExpiration\"});\n\n\n/**\n * The date/time of the expiration of the user key.\n *\n * @param {Date} userKeyExpiration The date/time of the expiration of the user key.\n */\nSignonResponse.prototype.setUserKeyExpiration = function(userKeyExpiration) {\n  this.userKeyExpiration = userKeyExpiration;\n};\n\n\n/**\n * The three-letter langauge code.\n *\n * @return {String} The three-letter langauge code.\n * @see java.util.Locale#getISO3Language()\n */\nSignonResponse.prototype.getLanguage = function() {\n  return this.language;\n};\nElement.add(SignonResponse, {name: \"LANGUAGE\", required: true, order: 40, attributeType: String, readMethod: \"getLanguage\", writeMethod: \"setLanguage\"});\n\n\n/**\n * The three-letter langauge code.\n *\n * @param {String} language The three-letter langauge code.\n */\nSignonResponse.prototype.setLanguage = function(language) {\n  this.language = language;\n};\n\n\n/**\n * The date/time that the FI profile was last updated.\n *\n * @return {Date} The date/time that the FI profile was last updated.\n */\nSignonResponse.prototype.getProfileLastUpdated = function() {\n  return this.profileLastUpdated;\n};\nElement.add(SignonResponse, {name: \"DTPROFUP\", order: 50, attributeType: Date, readMethod: \"getProfileLastUpdated\", writeMethod: \"setProfileLastUpdated\"});\n\n\n/**\n * The date/time that the FI profile was last updated.\n *\n * @param {Date} profileLastUpdated The date/time that the FI profile was last updated.\n */\nSignonResponse.prototype.setProfileLastUpdated = function(profileLastUpdated) {\n  this.profileLastUpdated = profileLastUpdated;\n};\n\n\n/**\n * The date/time that the user's account information was updated.\n *\n * @return {Date} The date/time that the user's account information was updated.\n */\nSignonResponse.prototype.getAccountLastUpdated = function() {\n  return this.accountLastUpdated;\n};\nElement.add(SignonResponse, {name: \"DTACCTUP\", order: 60, attributeType: Date, readMethod: \"getAccountLastUpdated\", writeMethod: \"setAccountLastUpdated\"});\n\n\n/**\n * The date/time that the user's account information was updated.\n *\n * @param {Date} accountLastUpdated The date/time that the user's account information was updated.\n */\nSignonResponse.prototype.setAccountLastUpdated = function(accountLastUpdated) {\n  this.accountLastUpdated = accountLastUpdated;\n};\n\n\n/**\n * The financial instutution identity information.\n *\n * @return {FinancialInstitution} The financial instutution identity information.\n */\nSignonResponse.prototype.getFinancialInstitution = function() {\n  return this.financialInstitution;\n};\nChildAggregate.add(SignonResponse, {order: 70, attributeType: FinancialInstitution, readMethod: \"getFinancialInstitution\", writeMethod: \"setFinancialInstitution\"});\n\n\n/**\n * The financial instutution identity information.\n *\n * @param {FinancialInstitution} financialInstitution The financial instutution identity information.\n */\nSignonResponse.prototype.setFinancialInstitution = function(financialInstitution) {\n  this.financialInstitution = financialInstitution;\n};\n\n\n/**\n * The session id for the client.\n *\n * @return {String} The session id for the client.\n */\nSignonResponse.prototype.getSessionId = function() {\n  return this.sessionId;\n};\nElement.add(SignonResponse, {name: \"SESSCOOKIE\", order: 80, attributeType: String, readMethod: \"getSessionId\", writeMethod: \"setSessionId\"});\n\n\n/**\n * The session id for the client.\n *\n * @param {String} sessionId The session id for the client.\n */\nSignonResponse.prototype.setSessionId = function(sessionId) {\n  this.sessionId = sessionId;\n};\n\n\n/**\n * The access key that the client should return in the next sign-on requuest.\n *\n * @return {String} The access key that the client should return in the next sign-on requuest.\n */\nSignonResponse.prototype.getAccessKey = function() {\n  return this.accessKey;\n};\nElement.add(SignonResponse, {name: \"ACCESSKEY\", order: 90, attributeType: String, readMethod: \"getAccessKey\", writeMethod: \"setAccessKey\"});\n\n\n/**\n * The access key that the client should return in the next sign-on requuest.\n *\n * @param {String} accessKey The access key that the client should return in the next sign-on requuest.\n */\nSignonResponse.prototype.setAccessKey = function(accessKey) {\n  this.accessKey = accessKey;\n};\n\n\n\n\nmodule.exports = SignonResponse;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar MessageSetType = require(\"../MessageSetType\");\nvar ResponseMessageSet = require(\"../ResponseMessageSet\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar SignonResponse = require(\"./SignonResponse\");\nvar PasswordChangeResponseTransaction = require(\"./PasswordChangeResponseTransaction\");\n\n/**\n * The sign-on response message set.\n *\n * @class\n * @augments ResponseMessageSet\n * See \"Section 2.5, OFX Spec.\"\n */\nfunction SignonResponseMessageSet () {\n  ResponseMessageSet.call(this);\n\n  /**\n   * @name SignonResponseMessageSet#signonResponse\n   * @type SignonResponse\n   * @access private\n   */\n  this.signonResponse = null;\n\n  /**\n   * @name SignonResponseMessageSet#passwordChangeResponse\n   * @type PasswordChangeResponseTransaction\n   * @access private\n   */\n  this.passwordChangeResponse = null;\n}\n\ninherit(SignonResponseMessageSet, \"extends\", ResponseMessageSet);\n\n\nAggregate.add(\"SIGNONMSGSRSV1\", SignonResponseMessageSet);\n\n\nSignonResponseMessageSet.prototype.getType = function() {\n  return MessageSetType.signon;\n};\n\n\n/**\n * The message for this message set.\n *\n * @return {SignonResponse} The message for this message set.\n */\nSignonResponseMessageSet.prototype.getSignonResponse = function() {\n  return this.signonResponse;\n};\nChildAggregate.add(SignonResponseMessageSet, {order: 0, attributeType: SignonResponse, readMethod: \"getSignonResponse\", writeMethod: \"setSignonResponse\"});\n\n\n/**\n * The message for this message set.\n *\n * @param {SignonResponse} signonResponse The message for this message set.\n */\nSignonResponseMessageSet.prototype.setSignonResponse = function(signonResponse) {\n  this.signonResponse = signonResponse;\n};\n\n\n/**\n * The password change response.\n *\n * @return {PasswordChangeResponseTransaction} The password change response.\n */\nSignonResponseMessageSet.prototype.getPasswordChangeResponse = function() {\n  return this.passwordChangeResponse;\n};\nChildAggregate.add(SignonResponseMessageSet, {order: 10, attributeType: PasswordChangeResponseTransaction, readMethod: \"getPasswordChangeResponse\", writeMethod: \"setPasswordChangeResponse\"});\n\n\n/**\n * The password change response.\n *\n * @param {PasswordChangeResponseTransaction} passwordChangeResponse The password change response.\n */\nSignonResponseMessageSet.prototype.setPasswordChangeResponse = function(passwordChangeResponse) {\n  this.passwordChangeResponse = passwordChangeResponse;\n};\n\n\n//todo: challenge request/response\n// Inherited.\nSignonResponseMessageSet.prototype.getResponseMessages = function() {\n  var messages = [];\n\n  if (this.getSignonResponse()) {\n    messages.push(this.getSignonResponse());\n  }\n\n  return messages;\n};\n\n\n\n\nmodule.exports = SignonResponseMessageSet;\n","\"use strict\";\n\nmodule.exports = {\n  FinancialInstitution: require(\"./FinancialInstitution\"),\n  PasswordChangeRequest: require(\"./PasswordChangeRequest\"),\n  PasswordChangeRequestTransaction: require(\"./PasswordChangeRequestTransaction\"),\n  PasswordChangeResponse: require(\"./PasswordChangeResponse\"),\n  PasswordChangeResponseTransaction: require(\"./PasswordChangeResponseTransaction\"),\n  SignonRequest: require(\"./SignonRequest\"),\n  SignonRequestMessageSet: require(\"./SignonRequestMessageSet\"),\n  SignonResponse: require(\"./SignonResponse\"),\n  SignonResponseMessageSet: require(\"./SignonResponseMessageSet\"),\n};\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar RequestMessage = require(\"../RequestMessage\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\n\n/**\n * @class\n * @augments RequestMessage\n */\nfunction AccountInfoRequest () {\n  RequestMessage.call(this);\n\n  /**\n   * @name AccountInfoRequest#lastUpdated\n   * @type Date\n   * @access private\n   */\n  this.lastUpdated = new Date(0);\n}\n\ninherit(AccountInfoRequest, \"extends\", RequestMessage);\n\n\nAggregate.add(\"ACCTINFORQ\", AccountInfoRequest);\n\n\n/**\n * When the account info was last updated.\n *\n * @return {Date} When the account info was last updated.\n */\nAccountInfoRequest.prototype.getLastUpdated = function() {\n  return this.lastUpdated;\n};\nElement.add(AccountInfoRequest, {name: \"DTACCTUP\", required: true, order: 0, attributeType: Date, readMethod: \"getLastUpdated\", writeMethod: \"setLastUpdated\"});\n\n\n/**\n * When the account info was last updated.\n *\n * @param {Date} lastUpdated When the account info was last updated.\n */\nAccountInfoRequest.prototype.setLastUpdated = function(lastUpdated) {\n  this.lastUpdated = lastUpdated;\n};\n\n\n\n\nmodule.exports = AccountInfoRequest;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar TransactionWrappedRequestMessage = require(\"../TransactionWrappedRequestMessage\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar AccountInfoRequest = require(\"./AccountInfoRequest\");\n\n/**\n * @class\n * @augments TransactionWrappedRequestMessage\n */\nfunction AccountInfoRequestTransaction () {\n  TransactionWrappedRequestMessage.call(this);\n\n  /**\n   * @name AccountInfoRequestTransaction#message\n   * @type AccountInfoRequest\n   * @access private\n   */\n  this.message = null;\n}\n\ninherit(AccountInfoRequestTransaction, \"extends\", TransactionWrappedRequestMessage);\n\n\nAggregate.add(\"ACCTINFOTRNRQ\", AccountInfoRequestTransaction);\n\n\n/**\n * The wrapped message.\n *\n * @return {AccountInfoRequest} The wrapped message.\n */\nAccountInfoRequestTransaction.prototype.getMessage = function() {\n  return this.message;\n};\nChildAggregate.add(AccountInfoRequestTransaction, {required: true, order: 30, attributeType: AccountInfoRequest, readMethod: \"getMessage\", writeMethod: \"setMessage\"});\n\n\n/**\n * The wrapped message.\n *\n * @param {AccountInfoRequest} message The wrapped message.\n */\nAccountInfoRequestTransaction.prototype.setMessage = function(message) {\n  this.message = message;\n};\n\n\n// Inherited.\nAccountInfoRequestTransaction.prototype.setWrappedMessage = function(/*AccountInfoRequest*/ message) {\n  this.setMessage(message);\n};\n\n\n\n\nmodule.exports = AccountInfoRequestTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\nvar AccountProfile = require(\"./AccountProfile\");\nvar ResponseMessage = require(\"../ResponseMessage\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\n\n/**\n * @class\n * @augments ResponseMessage\n */\nfunction AccountInfoResponse () {\n  ResponseMessage.call(this);\n\n  /**\n   * @name AccountInfoResponse#lastUpdated\n   * @type Date\n   * @access private\n   */\n  this.lastUpdated = new Date(0);\n\n  /**\n   * @name AccountInfoResponse#accounts\n   * @type AccountProfile[]\n   * @access private\n   */\n  this.accounts = null;\n}\n\ninherit(AccountInfoResponse, \"extends\", ResponseMessage);\n\n\nAggregate.add(\"ACCTINFORS\", AccountInfoResponse);\n\n\nAccountInfoResponse.prototype.getResponseMessageName = function() {\n  return \"account info\";\n};\n\n\n/**\n * When the account info was last updated.\n *\n * @return {Date} When the account info was last updated.\n */\nAccountInfoResponse.prototype.getLastUpdated = function() {\n  return this.lastUpdated;\n};\nElement.add(AccountInfoResponse, {name: \"DTACCTUP\", required: true, order: 0, attributeType: Date, readMethod: \"getLastUpdated\", writeMethod: \"setLastUpdated\"});\n\n\n/**\n * When the account info was last updated.\n *\n * @param {Date} lastUpdated When the account info was last updated.\n */\nAccountInfoResponse.prototype.setLastUpdated = function(lastUpdated) {\n  this.lastUpdated = lastUpdated;\n};\n\n\n/**\n * The accounts.\n *\n * @return {AccountProfile[]} The accounts.\n */\nAccountInfoResponse.prototype.getAccounts = function() {\n  return this.accounts;\n};\nChildAggregate.add(AccountInfoResponse, {order: 10, attributeType: Array, collectionEntryType: AccountProfile, readMethod: \"getAccounts\", writeMethod: \"setAccounts\"});\n\n\n/**\n * The accounts.\n *\n * @param {AccountProfile[]} accounts The accounts.\n */\nAccountInfoResponse.prototype.setAccounts = function(accounts) {\n  this.accounts = accounts;\n};\n\n\n\n\nmodule.exports = AccountInfoResponse;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar TransactionWrappedResponseMessage = require(\"../TransactionWrappedResponseMessage\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar AccountInfoResponse = require(\"./AccountInfoResponse\");\n\n/**\n * @class\n * @augments TransactionWrappedResponseMessage\n */\nfunction AccountInfoResponseTransaction () {\n  TransactionWrappedResponseMessage.call(this);\n\n  /**\n   * @name AccountInfoResponseTransaction#message\n   * @type AccountInfoResponse\n   * @access private\n   */\n  this.message = null;\n}\n\ninherit(AccountInfoResponseTransaction, \"extends\", TransactionWrappedResponseMessage);\n\n\nAggregate.add(\"ACCTINFOTRNRS\", AccountInfoResponseTransaction);\n\n\n/**\n * The wrapped message.\n *\n * @return {AccountInfoResponse} The wrapped message.\n */\nAccountInfoResponseTransaction.prototype.getMessage = function() {\n  return this.message;\n};\nChildAggregate.add(AccountInfoResponseTransaction, {required: true, order: 30, attributeType: AccountInfoResponse, readMethod: \"getMessage\", writeMethod: \"setMessage\"});\n\n\n/**\n * The wrapped message.\n *\n * @param {AccountInfoResponse} message The wrapped message.\n */\nAccountInfoResponseTransaction.prototype.setMessage = function(message) {\n  this.message = message;\n};\n\n\n// Inherited.\nAccountInfoResponseTransaction.prototype.getWrappedMessage = function() {\n  return this.getMessage();\n};\n\n\n\n\nmodule.exports = AccountInfoResponseTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar InvestmentAccountInfo = require(\"../investment/accounts/InvestmentAccountInfo\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar BankAccountInfo = require(\"../banking/BankAccountInfo\");\nvar CreditCardAccountInfo = require(\"../creditcard/CreditCardAccountInfo\");\n\n/**\n * @class\n */\nfunction AccountProfile () {\n\n  /**\n   * @name AccountProfile#description\n   * @type String\n   * @access private\n   */\n  this.description = null;\n\n  /**\n   * @name AccountProfile#phone\n   * @type String\n   * @access private\n   */\n  this.phone = null;\n\n  /**\n   * @name AccountProfile#bankSpecifics\n   * @type BankAccountInfo\n   * @access private\n   */\n  this.bankSpecifics = null;\n\n  /**\n   * @name AccountProfile#creditCardSpecifics\n   * @type CreditCardAccountInfo\n   * @access private\n   */\n  this.creditCardSpecifics = null;\n\n  /**\n   * @name AccountProfile#investSpecifics\n   * @type InvestmentAccountInfo\n   * @access private\n   */\n  this.investSpecifics = null;\n}\n\n\n\nAggregate.add(\"ACCTINFO\", AccountProfile);\n\n\n/**\n * Description of the account.\n *\n * @return {String} The description of the account.\n */\nAccountProfile.prototype.getDescription = function() {\n  return this.description;\n};\nElement.add(AccountProfile, {name: \"DESC\", order: 0, attributeType: String, readMethod: \"getDescription\", writeMethod: \"setDescription\"});\n\n\n/**\n * The description of the account.\n *\n * @param {String} description The description of the account.\n */\nAccountProfile.prototype.setDescription = function(description) {\n  this.description = description;\n};\n\n\n/**\n * Phone number for the account.\n *\n * @return {String} Phone number for the account.\n */\nAccountProfile.prototype.getPhone = function() {\n  return this.phone;\n};\nElement.add(AccountProfile, {name: \"PHONE\", order: 10, attributeType: String, readMethod: \"getPhone\", writeMethod: \"setPhone\"});\n\n\n/**\n * Phone number for the account.\n *\n * @param {String} phone Phone number for the account.\n */\nAccountProfile.prototype.setPhone = function(phone) {\n  this.phone = phone;\n};\n\n\n/**\n * Account specifics.\n *\n * @return {net.sf.ofx4j.domain.data.common.AccountInfo} Account specifics.\n */\nAccountProfile.prototype.getSpecifics = function() {\n  if (this.getBankSpecifics() && this.getCreditCardSpecifics()) {\n    throw new Error(\"Only one account specifics aggregate can be set at a time.\");\n  }\n  else if (this.getBankSpecifics()) {\n    return this.getBankSpecifics();\n  } else if (this.getInvestmentSpecifics()) {\n    return this.getInvestmentSpecifics();\n  }\n  else {\n    return this.getCreditCardSpecifics();\n  }\n};\n\n\n/**\n * Account specifics.\n *\n * @param {net.sf.ofx4j.domain.data.common.AccountInfo} specifics Account specifics.\n */\nAccountProfile.prototype.setSpecifics = function(specifics) {\n  if (specifics instanceof BankAccountInfo) {\n    this.setBankSpecifics(specifics);\n  }\n  else if (specifics instanceof CreditCardAccountInfo) {\n    this.setCreditCardSpecifics(specifics);\n  } else if (specifics instanceof InvestmentAccountInfo) {\n    this.setInvestmentSpecifics(specifics);\n  }\n  else {\n    throw new Error(\"Unknown specifics type: \" + specifics);\n  }\n};\n\n\n/**\n * Bank-specific info.\n *\n * @return {BankAccountInfo} Bank-specific info.\n */\nAccountProfile.prototype.getBankSpecifics = function() {\n  return this.bankSpecifics;\n};\nChildAggregate.add(AccountProfile, {order: 20, attributeType: BankAccountInfo, readMethod: \"getBankSpecifics\", writeMethod: \"setBankSpecifics\"});\n\n\n/**\n * Bank-specific info.\n *\n * @param {BankAccountInfo} bankSpecifics Bank-specific info.\n */\nAccountProfile.prototype.setBankSpecifics = function(bankSpecifics) {\n  this.creditCardSpecifics = null;\n  this.investSpecifics = null;\n  this.bankSpecifics = bankSpecifics;\n};\n\n\n/**\n * Credit-card account info.\n *\n * @return {CreditCardAccountInfo} Credit-card account info.\n */\nAccountProfile.prototype.getCreditCardSpecifics = function() {\n  return this.creditCardSpecifics;\n};\nChildAggregate.add(AccountProfile, {order: 30, attributeType: CreditCardAccountInfo, readMethod: \"getCreditCardSpecifics\", writeMethod: \"setCreditCardSpecifics\"});\n\n\n/**\n * Credit-card account info.\n *\n * @param {CreditCardAccountInfo} creditCardSpecifics Credit-card account info.\n */\nAccountProfile.prototype.setCreditCardSpecifics = function(creditCardSpecifics) {\n  this.bankSpecifics = null;\n  this.investSpecifics = null;\n  this.creditCardSpecifics = creditCardSpecifics;\n};\n\n\n/**\n * Investment account info.\n *\n * @return {InvestmentAccountInfo} Investment account info.\n */\nAccountProfile.prototype.getInvestmentSpecifics = function() {\n  return this.investSpecifics;\n};\nChildAggregate.add(AccountProfile, {order: 40, attributeType: InvestmentAccountInfo, readMethod: \"getInvestmentSpecifics\", writeMethod: \"setInvestmentSpecifics\"});\n\n\n/**\n * Investment account info.\n *\n * @param {InvestmentAccountInfo} investSpecifics Investment account info.\n */\nAccountProfile.prototype.setInvestmentSpecifics = function(investSpecifics) {\n  this.bankSpecifics = null;\n  this.creditCardSpecifics = null;\n  this.investSpecifics = investSpecifics;\n};\n\n\n\n\nmodule.exports = AccountProfile;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar RequestMessageSet = require(\"../RequestMessageSet\");\nvar MessageSetType = require(\"../MessageSetType\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar AccountInfoRequestTransaction = require(\"./AccountInfoRequestTransaction\");\n\n/**\n * @class\n * @augments RequestMessageSet\n */\nfunction SignupRequestMessageSet () {\n  RequestMessageSet.call(this);\n\n  /**\n   * @name SignupRequestMessageSet#accountInfoRequest\n   * @type AccountInfoRequestTransaction\n   * @access private\n   */\n  this.accountInfoRequest = null;\n}\n\ninherit(SignupRequestMessageSet, \"extends\", RequestMessageSet);\n\n\nAggregate.add(\"SIGNUPMSGSRQV1\", SignupRequestMessageSet);\n\n\nSignupRequestMessageSet.prototype.getType = function() {\n  return MessageSetType.signup;\n};\n\n\n/**\n * The account info request.\n *\n * @return {AccountInfoRequestTransaction} The account info request.\n */\nSignupRequestMessageSet.prototype.getAccountInfoRequest = function() {\n  return this.accountInfoRequest;\n};\nChildAggregate.add(SignupRequestMessageSet, {order: 0, attributeType: AccountInfoRequestTransaction, readMethod: \"getAccountInfoRequest\", writeMethod: \"setAccountInfoRequest\"});\n\n\n/**\n * The account info request.\n *\n * @param {AccountInfoRequestTransaction} accountInfoRequest The account info request.\n */\nSignupRequestMessageSet.prototype.setAccountInfoRequest = function(accountInfoRequest) {\n  this.accountInfoRequest = accountInfoRequest;\n};\n\n\n/**\n * The request messages.\n *\n * @return {RequestMessage[]} The request messages.\n */\nSignupRequestMessageSet.prototype.getRequestMessages = function() {\n  var messages = [];\n\n  if (this.getAccountInfoRequest()) {\n    messages.push(this.getAccountInfoRequest());\n  }\n  \n  return messages;\n};\n\n\n\n\nmodule.exports = SignupRequestMessageSet;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar ResponseMessageSet = require(\"../ResponseMessageSet\");\nvar MessageSetType = require(\"../MessageSetType\");\nvar AccountInfoResponseTransaction = require(\"./AccountInfoResponseTransaction\");\n\n/**\n * @class\n * @augments ResponseMessageSet\n */\nfunction SignupResponseMessageSet () {\n  ResponseMessageSet.call(this);\n\n  /**\n   * @name SignupResponseMessageSet#accountInfoResponse\n   * @type AccountInfoResponseTransaction\n   * @access private\n   */\n  this.accountInfoResponse = null;\n}\n\ninherit(SignupResponseMessageSet, \"extends\", ResponseMessageSet);\n\n\nAggregate.add(\"SIGNUPMSGSRSV1\", SignupResponseMessageSet);\n\n\nSignupResponseMessageSet.prototype.getType = function() {\n  return MessageSetType.signup;\n};\n\n\n/**\n * The account info response.\n *\n * @return {AccountInfoResponseTransaction} The account info response.\n */\nSignupResponseMessageSet.prototype.getAccountInfoResponse = function() {\n  return this.accountInfoResponse;\n};\nChildAggregate.add(SignupResponseMessageSet, {order: 0, attributeType: AccountInfoResponseTransaction, readMethod: \"getAccountInfoResponse\", writeMethod: \"setAccountInfoResponse\"});\n\n\n/**\n * The account info response.\n *\n * @param {AccountInfoResponseTransaction} accountInfoResponse The account info response.\n */\nSignupResponseMessageSet.prototype.setAccountInfoResponse = function(accountInfoResponse) {\n  this.accountInfoResponse = accountInfoResponse;\n};\n\n\n/**\n * The response messages.\n *\n * @return {ResponseMessage[]} The response messages.\n */\nSignupResponseMessageSet.prototype.getResponseMessages = function() {\n  var messages = [];\n\n  if (this.getAccountInfoResponse()) {\n    messages.push(this.getAccountInfoResponse());\n  }\n\n  return messages;\n};\n\n\n\n\nmodule.exports = SignupResponseMessageSet;\n","\"use strict\";\n\nmodule.exports = {\n  AccountInfoRequest: require(\"./AccountInfoRequest\"),\n  AccountInfoRequestTransaction: require(\"./AccountInfoRequestTransaction\"),\n  AccountInfoResponse: require(\"./AccountInfoResponse\"),\n  AccountInfoResponseTransaction: require(\"./AccountInfoResponseTransaction\"),\n  AccountProfile: require(\"./AccountProfile\"),\n  SignupRequestMessageSet: require(\"./SignupRequestMessageSet\"),\n  SignupResponseMessageSet: require(\"./SignupResponseMessageSet\"),\n};\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar ProcDet = require(\"./ProcDet\");\n\n/**\n * @class\n */\nfunction ExtDBInfo () {\n\n  /**\n   * @name ExtDBInfo#procDet\n   * @type ProcDet[]\n   * @access private\n   */\n  this.procDet = null;\n\n  /**\n   * @name ExtDBInfo#teInterest\n   * @type String\n   * @access private\n   */\n  this.teInterest = null;\n\n  /**\n   * @name ExtDBInfo#pabInterest\n   * @type String\n   * @access private\n   */\n  this.pabInterest = null;\n\n  /**\n   * @name ExtDBInfo#teIntDividend\n   * @type String\n   * @access private\n   */\n  this.teIntDividend = null;\n\n  /**\n   * @name ExtDBInfo#pabDividend\n   * @type String\n   * @access private\n   */\n  this.pabDividend = null;\n}\n\n\n\nAggregate.add(\"EXTDBINFO_V100\", ExtDBInfo);\n\n\n/**\n * @return {ProcDet[]} the procDet\n */\nExtDBInfo.prototype.getProcDet = function() {\n  return this.procDet;\n};\nChildAggregate.add(ExtDBInfo, {required:false, order: 0, attributeType: Array, collectionEntryType: ProcDet, readMethod: \"getProcDet\", writeMethod: \"setProcDet\"});\n\n\n/**\n * @param {ProcDet[]} procDet the procDet to set\n */\nExtDBInfo.prototype.setProcDet = function(procDet) {\n  this.procDet = procDet;\n};\n\n\n/**\n * @return {String} the teInterest\n */\nExtDBInfo.prototype.getTeInterest = function() {\n  return this.teInterest;\n};\nElement.add(ExtDBInfo, {name: \"TEINTEREST\",required: false , order: 1, attributeType: String, readMethod: \"getTeInterest\", writeMethod: \"setTeInterest\"});\n\n\n/**\n * @param {String} teInterest the teInterest to set\n */\nExtDBInfo.prototype.setTeInterest = function(teInterest) {\n  this.teInterest = teInterest;\n};\n\n\n/**\n * @return {String} the pabInterest\n */\nExtDBInfo.prototype.getPabInterest = function() {\n  return this.pabInterest;\n};\nElement.add(ExtDBInfo, {name: \"PABINTEREST\",required: false , order: 2, attributeType: String, readMethod: \"getPabInterest\", writeMethod: \"setPabInterest\"});\n\n\n/**\n * @param {String} pabInterest the pabInterest to set\n */\nExtDBInfo.prototype.setPabInterest = function(pabInterest) {\n  this.pabInterest = pabInterest;\n};\n\n\n/**\n * @return {String} the teIntDividend\n */\nExtDBInfo.prototype.getTeIntDividend = function() {\n  return this.teIntDividend;\n};\nElement.add(ExtDBInfo, {name: \"TEINTDIVIDEND\",required: false , order: 3, attributeType: String, readMethod: \"getTeIntDividend\", writeMethod: \"setTeIntDividend\"});\n\n\n/**\n * @param {String} teIntDividend the teIntDividend to set\n */\nExtDBInfo.prototype.setTeIntDividend = function(teIntDividend) {\n  this.teIntDividend = teIntDividend;\n};\n\n\n/**\n * @return {String} the pabDividend\n */\nExtDBInfo.prototype.getPabDividend = function() {\n  return this.pabDividend;\n};\nElement.add(ExtDBInfo, {name: \"PABDIVIDEND\",required: false , order: 4, attributeType: String, readMethod: \"getPabDividend\", writeMethod: \"setPabDividend\"});\n\n\n/**\n * @param {String} pabDividend the pabDividend to set\n */\nExtDBInfo.prototype.setPabDividend = function(pabDividend) {\n  this.pabDividend = pabDividend;\n};\n\n\n\n\nmodule.exports = ExtDBInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\n\n/**\n * @class\n */\nfunction PayerAddress () {\n\n  /**\n   * @name PayerAddress#payerName1\n   * @type String\n   * @access private\n   */\n  this.payerName1 = null;\n\n  /**\n   * @name PayerAddress#payerName2\n   * @type String\n   * @access private\n   */\n  this.payerName2 = null;\n\n  /**\n   * @name PayerAddress#address1\n   * @type String\n   * @access private\n   */\n  this.address1 = null;\n\n  /**\n   * @name PayerAddress#address2\n   * @type String\n   * @access private\n   */\n  this.address2 = null;\n\n  /**\n   * @name PayerAddress#city\n   * @type String\n   * @access private\n   */\n  this.city = null;\n\n  /**\n   * @name PayerAddress#state\n   * @type String\n   * @access private\n   */\n  this.state = null;\n\n  /**\n   * @name PayerAddress#postalCode\n   * @type String\n   * @access private\n   */\n  this.postalCode = null;\n\n  /**\n   * @name PayerAddress#phone\n   * @type String\n   * @access private\n   */\n  this.phone = null;\n}\n\n\n\nAggregate.add(\"PAYERADDR\", PayerAddress);\n\n\n/**\n * @return {String} the payerName1\n */\nPayerAddress.prototype.getPayerName1 = function() {\n  return this.payerName1;\n};\nElement.add(PayerAddress, {name: \"PAYERNAME1\",required: true , order: 0, attributeType: String, readMethod: \"getPayerName1\", writeMethod: \"setPayerName1\"});\n\n\n/**\n * @param {String} payerName1 the payerName1 to set\n */\nPayerAddress.prototype.setPayerName1 = function(payerName1) {\n  this.payerName1 = payerName1;\n};\n\n\n/**\n * @return {String} the payerName2\n */\nPayerAddress.prototype.getPayerName2 = function() {\n  return this.payerName2;\n};\nElement.add(PayerAddress, {name: \"PAYERNAME2\",required: false , order: 1, attributeType: String, readMethod: \"getPayerName2\", writeMethod: \"setPayerName2\"});\n\n\n/**\n * @param {String} payerName2 the payerName2 to set\n */\nPayerAddress.prototype.setPayerName2 = function(payerName2) {\n  this.payerName2 = payerName2;\n};\n\n\n/**\n * @return {String} the address1\n */\nPayerAddress.prototype.getAddress1 = function() {\n  return this.address1;\n};\nElement.add(PayerAddress, {name: \"ADDR1\",required: true , order: 2, attributeType: String, readMethod: \"getAddress1\", writeMethod: \"setAddress1\"});\n\n\n/**\n * @param {String} address1 the address1 to set\n */\nPayerAddress.prototype.setAddress1 = function(address1) {\n  this.address1 = address1;\n};\n\n\n/**\n * @return {String} the address2\n */\nPayerAddress.prototype.getAddress2 = function() {\n  return this.address2;\n};\nElement.add(PayerAddress, {name: \"ADDR2\",required: true , order: 3, attributeType: String, readMethod: \"getAddress2\", writeMethod: \"setAddress2\"});\n\n\n/**\n * @param {String} address2 the address2 to set\n */\nPayerAddress.prototype.setAddress2 = function(address2) {\n  this.address2 = address2;\n};\n\n\n/**\n * @return {String} the city\n */\nPayerAddress.prototype.getCity = function() {\n  return this.city;\n};\nElement.add(PayerAddress, {name: \"CITY\",required: true , order: 4, attributeType: String, readMethod: \"getCity\", writeMethod: \"setCity\"});\n\n\n/**\n * @param {String} city the city to set\n */\nPayerAddress.prototype.setCity = function(city) {\n  this.city = city;\n};\n\n\n/**\n * @return {String} the state\n */\nPayerAddress.prototype.getState = function() {\n  return this.state;\n};\nElement.add(PayerAddress, {name: \"STATE\",required: true , order: 5, attributeType: String, readMethod: \"getState\", writeMethod: \"setState\"});\n\n\n/**\n * @param {String} state the state to set\n */\nPayerAddress.prototype.setState = function(state) {\n  this.state = state;\n};\n\n\n/**\n * @return {String} the postalCode\n */\nPayerAddress.prototype.getPostalCode = function() {\n  return this.postalCode;\n};\nElement.add(PayerAddress, {name: \"POSTALCODE\",required: true , order: 6, attributeType: String, readMethod: \"getPostalCode\", writeMethod: \"setPostalCode\"});\n\n\n/**\n * @param {String} postalCode the postalCode to set\n */\nPayerAddress.prototype.setPostalCode = function(postalCode) {\n  this.postalCode = postalCode;\n};\n\n\n/**\n * @return {String} the phone\n */\nPayerAddress.prototype.getPhone = function() {\n  return this.phone;\n};\nElement.add(PayerAddress, {name: \"PHONE\",required: false , order: 7, attributeType: String, readMethod: \"getPhone\", writeMethod: \"setPhone\"});\n\n\n/**\n * @param {String} phone the phone to set\n */\nPayerAddress.prototype.setPhone = function(phone) {\n  this.phone = phone;\n};\n\n\n\n\nmodule.exports = PayerAddress;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\n\n/**\n * @class\n */\nfunction ProcDet () {\n\n  /**\n   * @name ProcDet#dtAqd\n   * @type String\n   * @access private\n   */\n  this.dtAqd = null;\n\n  /**\n   * @name ProcDet#dtSale\n   * @type String\n   * @access private\n   */\n  this.dtSale = null;\n\n  /**\n   * @name ProcDet#secName\n   * @type String\n   * @access private\n   */\n  this.secName = null;\n\n  /**\n   * @name ProcDet#costBasis\n   * @type String\n   * @access private\n   */\n  this.costBasis = null;\n\n  /**\n   * @name ProcDet#saleSpr\n   * @type String\n   * @access private\n   */\n  this.saleSpr = null;\n\n  /**\n   * @name ProcDet#longShort\n   * @type String\n   * @access private\n   */\n  this.longShort = null;\n\n  /**\n   * @name ProcDet#wasDisAllowed\n   * @type String\n   * @access private\n   */\n  this.wasDisAllowed = null;\n\n  /**\n   * @name ProcDet#noncoveredSec\n   * @type String\n   * @access private\n   */\n  this.noncoveredSec = null;\n\n  /**\n   * @name ProcDet#basisNotshown\n   * @type String\n   * @access private\n   */\n  this.basisNotshown = null;\n}\n\n\n\nAggregate.add(\"PROCDET_V100\", ProcDet);\n\n\n/**\n * @return {String} the dtAqd\n */\nProcDet.prototype.getDtAqd = function() {\n  return this.dtAqd;\n};\nElement.add(ProcDet, {name: \"DTAQD\", required: false, order: 0, attributeType: String, readMethod: \"getDtAqd\", writeMethod: \"setDtAqd\"});\n\n\n/**\n * @param {String} dtAqd the dtAqd to set\n */\nProcDet.prototype.setDtAqd = function(dtAqd) {\n  this.dtAqd = dtAqd;\n};\n\n\n/**\n * @return {String} the dtSale\n */\nProcDet.prototype.getDtSale = function() {\n  return this.dtSale;\n};\nElement.add(ProcDet, {name: \"DTSALE\", required: false, order: 2, attributeType: String, readMethod: \"getDtSale\", writeMethod: \"setDtSale\"});\n\n\n/**\n * @param {String} dtSale the dtSale to set\n */\nProcDet.prototype.setDtSale = function(dtSale) {\n  this.dtSale = dtSale;\n};\n\n\n/**\n * @return {String} the secName\n */\nProcDet.prototype.getSecName = function() {\n  return this.secName;\n};\nElement.add(ProcDet, {name: \"SECNAME\", required: false, order: 3, attributeType: String, readMethod: \"getSecName\", writeMethod: \"setSecName\"});\n\n\n/**\n * @param {String} secName the secName to set\n */\nProcDet.prototype.setSecName = function(secName) {\n  this.secName = secName;\n};\n\n\n/**\n * @return {String} the costBasis\n */\nProcDet.prototype.getCostBasis = function() {\n  return this.costBasis;\n};\nElement.add(ProcDet, {name: \"COSTBASIS\", required: false, order: 4, attributeType: String, readMethod: \"getCostBasis\", writeMethod: \"setCostBasis\"});\n\n\n/**\n * @param {String} costBasis the costBasis to set\n */\nProcDet.prototype.setCostBasis = function(costBasis) {\n  this.costBasis = costBasis;\n};\n\n\n/**\n * @return {String} the saleSpr\n */\nProcDet.prototype.getSaleSpr = function() {\n  return this.saleSpr;\n};\nElement.add(ProcDet, {name: \"SALESPR\", required: false, order: 5, attributeType: String, readMethod: \"getSaleSpr\", writeMethod: \"setSaleSpr\"});\n\n\n/**\n * @param {String} saleSpr the saleSpr to set\n */\nProcDet.prototype.setSaleSpr = function(saleSpr) {\n  this.saleSpr = saleSpr;\n};\n\n\n/**\n * @return {String} the longShort\n */\nProcDet.prototype.getLongShort = function() {\n  return this.longShort;\n};\nElement.add(ProcDet, {name: \"LONGSHORT\", required: false, order: 6, attributeType: String, readMethod: \"getLongShort\", writeMethod: \"setLongShort\"});\n\n\n/**\n * @param {String} longShort the longShort to set\n */\nProcDet.prototype.setLongShort = function(longShort) {\n  this.longShort = longShort;\n};\n\n\n/**\n * @return {String} the wasDisAllowed\n */\nProcDet.prototype.getWasDisAllowed = function() {\n  return this.wasDisAllowed;\n};\nElement.add(ProcDet, {name: \"WASHSALELOSSDISALLOWED\", required: false, order: 7, attributeType: String, readMethod: \"getWasDisAllowed\", writeMethod: \"setWasDisAllowed\"});\n\n\n/**\n * @param {String} wasDisAllowed the wasDisAllowed to set\n */\nProcDet.prototype.setWasDisAllowed = function(wasDisAllowed) {\n  this.wasDisAllowed = wasDisAllowed;\n};\n\n\n/**\n * @return {String} the noncoveredSec\n */\nProcDet.prototype.getNoncoveredSec = function() {\n  return this.noncoveredSec;\n};\nElement.add(ProcDet, {name: \"NONCOVEREDSECURITY\", required: false, order: 8, attributeType: String, readMethod: \"getNoncoveredSec\", writeMethod: \"setNoncoveredSec\"});\n\n\n/**\n * @param {String} noncoveredSec the noncoveredSec to set\n */\nProcDet.prototype.setNoncoveredSec = function(noncoveredSec) {\n  this.noncoveredSec = noncoveredSec;\n};\n\n\n/**\n * @return {String} the basisNotshown\n */\nProcDet.prototype.getBasisNotshown = function() {\n  return this.basisNotshown;\n};\nElement.add(ProcDet, {name: \"BASISNOTSHOWN\", required: false, order: 9, attributeType: String, readMethod: \"getBasisNotshown\", writeMethod: \"setBasisNotshown\"});\n\n\n/**\n * @param {String} basisNotshown the basisNotshown to set\n */\nProcDet.prototype.setBasisNotshown = function(basisNotshown) {\n  this.basisNotshown = basisNotshown;\n};\n\n\n\n\nmodule.exports = ProcDet;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\n\n/**\n * @class\n */\nfunction RecAddress () {\n\n  /**\n   * @name RecAddress#recName1\n   * @type String\n   * @access private\n   */\n  this.recName1 = null;\n\n  /**\n   * @name RecAddress#recName2\n   * @type String\n   * @access private\n   */\n  this.recName2 = null;\n\n  /**\n   * @name RecAddress#address1\n   * @type String\n   * @access private\n   */\n  this.address1 = null;\n\n  /**\n   * @name RecAddress#address2\n   * @type String\n   * @access private\n   */\n  this.address2 = null;\n\n  /**\n   * @name RecAddress#city\n   * @type String\n   * @access private\n   */\n  this.city = null;\n\n  /**\n   * @name RecAddress#state\n   * @type String\n   * @access private\n   */\n  this.state = null;\n\n  /**\n   * @name RecAddress#postalCode\n   * @type String\n   * @access private\n   */\n  this.postalCode = null;\n\n  /**\n   * @name RecAddress#phone\n   * @type String\n   * @access private\n   */\n  this.phone = null;\n}\n\n\n\nAggregate.add(\"RECADDR\", RecAddress);\n\n\n/**\n * @return {String} the recName1\n */\nRecAddress.prototype.getRecName1 = function() {\n  return this.recName1;\n};\nElement.add(RecAddress, {name: \"RECNAME1\",required: true , order: 0, attributeType: String, readMethod: \"getRecName1\", writeMethod: \"setRecName1\"});\n\n\n/**\n * @param {String} recName1 the recName1 to set\n */\nRecAddress.prototype.setRecName1 = function(recName1) {\n  this.recName1 = recName1;\n};\n\n\n/**\n * @return {String} the recName2\n */\nRecAddress.prototype.getRecName2 = function() {\n  return this.recName2;\n};\nElement.add(RecAddress, {name: \"RECNAME2\",required: false , order: 1, attributeType: String, readMethod: \"getRecName2\", writeMethod: \"setRecName2\"});\n\n\n/**\n * @param {String} recName2 the recName2 to set\n */\nRecAddress.prototype.setRecName2 = function(recName2) {\n  this.recName2 = recName2;\n};\n\n\n/**\n * @return {String} the address1\n */\nRecAddress.prototype.getAddress1 = function() {\n  return this.address1;\n};\nElement.add(RecAddress, {name: \"ADDR1\",required: true , order: 2, attributeType: String, readMethod: \"getAddress1\", writeMethod: \"setAddress1\"});\n\n\n/**\n * @param {String} address1 the address1 to set\n */\nRecAddress.prototype.setAddress1 = function(address1) {\n  this.address1 = address1;\n};\n\n\n/**\n * @return {String} the address2\n */\nRecAddress.prototype.getAddress2 = function() {\n  return this.address2;\n};\nElement.add(RecAddress, {name: \"ADDR2\",required: true , order: 3, attributeType: String, readMethod: \"getAddress2\", writeMethod: \"setAddress2\"});\n\n\n/**\n * @param {String} address2 the address2 to set\n */\nRecAddress.prototype.setAddress2 = function(address2) {\n  this.address2 = address2;\n};\n\n\n/**\n * @return {String} the city\n */\nRecAddress.prototype.getCity = function() {\n  return this.city;\n};\nElement.add(RecAddress, {name: \"CITY\",required: true , order: 4, attributeType: String, readMethod: \"getCity\", writeMethod: \"setCity\"});\n\n\n/**\n * @param {String} city the city to set\n */\nRecAddress.prototype.setCity = function(city) {\n  this.city = city;\n};\n\n\n/**\n * @return {String} the state\n */\nRecAddress.prototype.getState = function() {\n  return this.state;\n};\nElement.add(RecAddress, {name: \"STATE\",required: true , order: 5, attributeType: String, readMethod: \"getState\", writeMethod: \"setState\"});\n\n\n/**\n * @param {String} state the state to set\n */\nRecAddress.prototype.setState = function(state) {\n  this.state = state;\n};\n\n\n/**\n * @return {String} the postalCode\n */\nRecAddress.prototype.getPostalCode = function() {\n  return this.postalCode;\n};\nElement.add(RecAddress, {name: \"POSTALCODE\",required: true , order: 6, attributeType: String, readMethod: \"getPostalCode\", writeMethod: \"setPostalCode\"});\n\n\n/**\n * @param {String} postalCode the postalCode to set\n */\nRecAddress.prototype.setPostalCode = function(postalCode) {\n  this.postalCode = postalCode;\n};\n\n\n/**\n * @return {String} the phone\n */\nRecAddress.prototype.getPhone = function() {\n  return this.phone;\n};\nElement.add(RecAddress, {name: \"PHONE\",required: false , order: 7, attributeType: String, readMethod: \"getPhone\", writeMethod: \"setPhone\"});\n\n\n/**\n * @param {String} phone the phone to set\n */\nRecAddress.prototype.setPhone = function(phone) {\n  this.phone = phone;\n};\n\n\n\n\nmodule.exports = RecAddress;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar PayerAddress = require(\"./PayerAddress\");\nvar RecAddress = require(\"./RecAddress\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar ExtDBInfo = require(\"./ExtDBInfo\");\n\n/**\n * @class\n */\nfunction Tax1099B () {\n\n  /**\n   * @name Tax1099B#srvrtId\n   * @type String\n   * @access private\n   */\n  this.srvrtId = null;\n\n  /**\n   * @name Tax1099B#taxYear\n   * @type String\n   * @access private\n   */\n  this.taxYear = null;\n\n  /**\n   * @name Tax1099B#extDBInfo\n   * @type ExtDBInfo\n   * @access private\n   */\n  this.extDBInfo = null;\n\n  /**\n   * @name Tax1099B#payerAddress\n   * @type PayerAddress\n   * @access private\n   */\n  this.payerAddress = null;\n\n  /**\n   * @name Tax1099B#payerId\n   * @type String\n   * @access private\n   */\n  this.payerId = null;\n\n  /**\n   * @name Tax1099B#recAddress\n   * @type RecAddress\n   * @access private\n   */\n  this.recAddress = null;\n\n  /**\n   * @name Tax1099B#recId\n   * @type String\n   * @access private\n   */\n  this.recId = null;\n\n  /**\n   * @name Tax1099B#recAcct\n   * @type String\n   * @access private\n   */\n  this.recAcct = null;\n}\n\n\n\nAggregate.add(\"TAX1099B_V100\", Tax1099B);\n\n\nTax1099B.prototype.getSrvrtId = function() {\n  return this.srvrtId;\n};\nElement.add(Tax1099B, {name: \"SRVRTID\",required: true , order: 0, attributeType: String, readMethod: \"getSrvrtId\", writeMethod: \"setSrvrtId\"});\n\n\nTax1099B.prototype.setSrvrtId = function(/*String*/ srvrtId) {\n  this.srvrtId = srvrtId;\n};\n\n\nTax1099B.prototype.getTaxYear = function() {\n  return this.taxYear;\n};\nElement.add(Tax1099B, {name: \"TAXYEAR\", required: true, order: 1, attributeType: String, readMethod: \"getTaxYear\", writeMethod: \"setTaxYear\"});\n\n\nTax1099B.prototype.setTaxYear = function(/*String*/ taxYear) {\n  this.taxYear = taxYear;\n};\n\n\n/**\n * @return {ExtDBInfo} the extDBInfo\n */\nTax1099B.prototype.getExtDBInfo = function() {\n  return this.extDBInfo;\n};\nChildAggregate.add(Tax1099B, {required:true, order: 2, attributeType: ExtDBInfo, readMethod: \"getExtDBInfo\", writeMethod: \"setExtDBInfo\"});\n\n\n/**\n * @param {ExtDBInfo} extDBInfo the extDBInfo to set\n */\nTax1099B.prototype.setExtDBInfo = function(extDBInfo) {\n  this.extDBInfo = extDBInfo;\n};\n\n\n/**\n * @return {PayerAddress} the payerAddress\n */\nTax1099B.prototype.getPayerAddress = function() {\n  return this.payerAddress;\n};\nChildAggregate.add(Tax1099B, {required:true, order: 3, attributeType: PayerAddress, readMethod: \"getPayerAddress\", writeMethod: \"setPayerAddress\"});\n\n\n/**\n * @param {PayerAddress} payerAddress the payerAddress to set\n */\nTax1099B.prototype.setPayerAddress = function(payerAddress) {\n  this.payerAddress = payerAddress;\n};\n\n\n/**\n * @return {String} the payerId\n */\nTax1099B.prototype.getPayerId = function() {\n  return this.payerId;\n};\nElement.add(Tax1099B, {name: \"PAYERID\", required: true, order: 4, attributeType: String, readMethod: \"getPayerId\", writeMethod: \"setPayerId\"});\n\n\n/**\n * @param {String} payerId the payerId to set\n */\nTax1099B.prototype.setPayerId = function(payerId) {\n  this.payerId = payerId;\n};\n\n\n/**\n * @return {RecAddress} the recAddress\n */\nTax1099B.prototype.getRecAddress = function() {\n  return this.recAddress;\n};\nChildAggregate.add(Tax1099B, {required:true, order: 5, attributeType: RecAddress, readMethod: \"getRecAddress\", writeMethod: \"setRecAddress\"});\n\n\n/**\n * @param {RecAddress} recAddress the recAddress to set\n */\nTax1099B.prototype.setRecAddress = function(recAddress) {\n  this.recAddress = recAddress;\n};\n\n\n/**\n * @return {String} the recId\n */\nTax1099B.prototype.getRecId = function() {\n  return this.recId;\n};\nElement.add(Tax1099B, {name: \"RECID\", required: true, order: 6, attributeType: String, readMethod: \"getRecId\", writeMethod: \"setRecId\"});\n\n\n/**\n * @param {String} recId the recId to set\n */\nTax1099B.prototype.setRecId = function(recId) {\n  this.recId = recId;\n};\n\n\n/**\n * @return {String} the recAcct\n */\nTax1099B.prototype.getRecAcct = function() {\n  return this.recAcct;\n};\nElement.add(Tax1099B, {name: \"RECACCT\", required: true, order: 7, attributeType: String, readMethod: \"getRecAcct\", writeMethod: \"setRecAcct\"});\n\n\n/**\n * @param {String} recAcct the recAcct to set\n */\nTax1099B.prototype.setRecAcct = function(recAcct) {\n  this.recAcct = recAcct;\n};\n\n\n\n\nmodule.exports = Tax1099B;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar PayerAddress = require(\"./PayerAddress\");\nvar RecAddress = require(\"./RecAddress\");\n\n/**\n * @class\n */\nfunction Tax1099DIV () {\n\n  /**\n   * @name Tax1099DIV#srvrtId\n   * @type String\n   * @access private\n   */\n  this.srvrtId = null;\n\n  /**\n   * @name Tax1099DIV#taxYear\n   * @type String\n   * @access private\n   */\n  this.taxYear = null;\n\n  /**\n   * @name Tax1099DIV#ordDiv\n   * @type String\n   * @access private\n   */\n  this.ordDiv = null;\n\n  /**\n   * @name Tax1099DIV#qualifiedDiv\n   * @type String\n   * @access private\n   */\n  this.qualifiedDiv = null;\n\n  /**\n   * @name Tax1099DIV#totCapGain\n   * @type String\n   * @access private\n   */\n  this.totCapGain = null;\n\n  /**\n   * @name Tax1099DIV#p28Gain\n   * @type String\n   * @access private\n   */\n  this.p28Gain = null;\n\n  /**\n   * @name Tax1099DIV#unrecSec1250\n   * @type String\n   * @access private\n   */\n  this.unrecSec1250 = null;\n\n  /**\n   * @name Tax1099DIV#sec1202\n   * @type String\n   * @access private\n   */\n  this.sec1202 = null;\n\n  /**\n   * @name Tax1099DIV#nonTaxDist\n   * @type String\n   * @access private\n   */\n  this.nonTaxDist = null;\n\n  /**\n   * @name Tax1099DIV#fedTaxWh\n   * @type String\n   * @access private\n   */\n  this.fedTaxWh = null;\n\n  /**\n   * @name Tax1099DIV#investExp\n   * @type String\n   * @access private\n   */\n  this.investExp = null;\n\n  /**\n   * @name Tax1099DIV#forTaxPd\n   * @type String\n   * @access private\n   */\n  this.forTaxPd = null;\n\n  /**\n   * @name Tax1099DIV#cashLiq\n   * @type String\n   * @access private\n   */\n  this.cashLiq = null;\n\n  /**\n   * @name Tax1099DIV#nonCashLiq\n   * @type String\n   * @access private\n   */\n  this.nonCashLiq = null;\n\n  /**\n   * @name Tax1099DIV#payerAddress\n   * @type PayerAddress\n   * @access private\n   */\n  this.payerAddress = null;\n\n  /**\n   * @name Tax1099DIV#payerId\n   * @type String\n   * @access private\n   */\n  this.payerId = null;\n\n  /**\n   * @name Tax1099DIV#recAddress\n   * @type RecAddress\n   * @access private\n   */\n  this.recAddress = null;\n\n  /**\n   * @name Tax1099DIV#recId\n   * @type String\n   * @access private\n   */\n  this.recId = null;\n\n  /**\n   * @name Tax1099DIV#recAcct\n   * @type String\n   * @access private\n   */\n  this.recAcct = null;\n}\n\n\n\nAggregate.add(\"TAX1099DIV_V100\", Tax1099DIV);\n\n\nTax1099DIV.prototype.getSrvrtId = function() {\n  return this.srvrtId;\n};\nElement.add(Tax1099DIV, {name: \"SRVRTID\",required: false , order: 0, attributeType: String, readMethod: \"getSrvrtId\", writeMethod: \"setSrvrtId\"});\n\n\nTax1099DIV.prototype.setSrvrtId = function(/*String*/ srvrtId) {\n  this.srvrtId = srvrtId;\n};\n\n\nTax1099DIV.prototype.getTaxYear = function() {\n  return this.taxYear;\n};\nElement.add(Tax1099DIV, {name: \"TAXYEAR\", required: false, order: 1, attributeType: String, readMethod: \"getTaxYear\", writeMethod: \"setTaxYear\"});\n\n\nTax1099DIV.prototype.setTaxYear = function(/*String*/ taxYear) {\n  this.taxYear = taxYear;\n};\n\n\n/**\n * @return {String} the ordDiv\n */\nTax1099DIV.prototype.getOrdDiv = function() {\n  return this.ordDiv;\n};\nElement.add(Tax1099DIV, {name: \"ORDDIV\", required: false, order: 2, attributeType: String, readMethod: \"getOrdDiv\", writeMethod: \"setOrdDiv\"});\n\n\n/**\n * @param {String} ordDiv the ordDiv to set\n */\nTax1099DIV.prototype.setOrdDiv = function(ordDiv) {\n  this.ordDiv = ordDiv;\n};\n\n\n/**\n * @return {String} the qualifiedDiv\n */\nTax1099DIV.prototype.getQualifiedDiv = function() {\n  return this.qualifiedDiv;\n};\nElement.add(Tax1099DIV, {name: \"QUALIFIEDDIV\", required: false, order: 3, attributeType: String, readMethod: \"getQualifiedDiv\", writeMethod: \"setQualifiedDiv\"});\n\n\n/**\n * @param {String} qualifiedDiv the qualifiedDiv to set\n */\nTax1099DIV.prototype.setQualifiedDiv = function(qualifiedDiv) {\n  this.qualifiedDiv = qualifiedDiv;\n};\n\n\n/**\n * @return {String} the totCapGain\n */\nTax1099DIV.prototype.getTotCapGain = function() {\n  return this.totCapGain;\n};\nElement.add(Tax1099DIV, {name: \"TOTCAPGAIN\", required: false, order: 4, attributeType: String, readMethod: \"getTotCapGain\", writeMethod: \"setTotCapGain\"});\n\n\n/**\n * @param {String} totCapGain the totCapGain to set\n */\nTax1099DIV.prototype.setTotCapGain = function(totCapGain) {\n  this.totCapGain = totCapGain;\n};\n\n\n/**\n * @return {String} the p28Gain\n */\nTax1099DIV.prototype.getP28Gain = function() {\n  return this.p28Gain;\n};\nElement.add(Tax1099DIV, {name: \"P28GAIN\", required: false, order: 5, attributeType: String, readMethod: \"getP28Gain\", writeMethod: \"setP28Gain\"});\n\n\n/**\n * @param {String} p28Gain the p28Gain to set\n */\nTax1099DIV.prototype.setP28Gain = function(p28Gain) {\n  this.p28Gain = p28Gain;\n};\n\n\n/**\n * @return {String} the unrecSec1250\n */\nTax1099DIV.prototype.getUnrecSec1250 = function() {\n  return this.unrecSec1250;\n};\nElement.add(Tax1099DIV, {name: \"UNRECSEC1250\", required: false, order: 6, attributeType: String, readMethod: \"getUnrecSec1250\", writeMethod: \"setUnrecSec1250\"});\n\n\n/**\n * @param {String} unrecSec1250 the unrecSec1250 to set\n */\nTax1099DIV.prototype.setUnrecSec1250 = function(unrecSec1250) {\n  this.unrecSec1250 = unrecSec1250;\n};\n\n\n/**\n * @return {String} the sec1202\n */\nTax1099DIV.prototype.getSec1202 = function() {\n  return this.sec1202;\n};\nElement.add(Tax1099DIV, {name: \"SEC1202\", required: false, order: 7, attributeType: String, readMethod: \"getSec1202\", writeMethod: \"setSec1202\"});\n\n\n/**\n * @param {String} sec1202 the sec1202 to set\n */\nTax1099DIV.prototype.setSec1202 = function(sec1202) {\n  this.sec1202 = sec1202;\n};\n\n\n/**\n * @return {String} the nonTaxDist\n */\nTax1099DIV.prototype.getNonTaxDist = function() {\n  return this.nonTaxDist;\n};\nElement.add(Tax1099DIV, {name: \"NONTAXDIST\", required: false, order: 8, attributeType: String, readMethod: \"getNonTaxDist\", writeMethod: \"setNonTaxDist\"});\n\n\n/**\n * @param {String} nonTaxDist the nonTaxDist to set\n */\nTax1099DIV.prototype.setNonTaxDist = function(nonTaxDist) {\n  this.nonTaxDist = nonTaxDist;\n};\n\n\n/**\n * @return {String} the fedTaxWh\n */\nTax1099DIV.prototype.getFedTaxWh = function() {\n  return this.fedTaxWh;\n};\nElement.add(Tax1099DIV, {name: \"FEDTAXWH\", required: false, order: 9, attributeType: String, readMethod: \"getFedTaxWh\", writeMethod: \"setFedTaxWh\"});\n\n\n/**\n * @param {String} fedTaxWh the fedTaxWh to set\n */\nTax1099DIV.prototype.setFedTaxWh = function(fedTaxWh) {\n  this.fedTaxWh = fedTaxWh;\n};\n\n\n/**\n * @return {String} the investExp\n */\nTax1099DIV.prototype.getInvestExp = function() {\n  return this.investExp;\n};\nElement.add(Tax1099DIV, {name: \"INVESTEXP\", required: false, order: 10, attributeType: String, readMethod: \"getInvestExp\", writeMethod: \"setInvestExp\"});\n\n\n/**\n * @param {String} investExp the investExp to set\n */\nTax1099DIV.prototype.setInvestExp = function(investExp) {\n  this.investExp = investExp;\n};\n\n\n/**\n * @return {String} the forTaxPd\n */\nTax1099DIV.prototype.getForTaxPd = function() {\n  return this.forTaxPd;\n};\nElement.add(Tax1099DIV, {name: \"FORTAXPD\", required: false, order: 11, attributeType: String, readMethod: \"getForTaxPd\", writeMethod: \"setForTaxPd\"});\n\n\n/**\n * @param {String} forTaxPd the forTaxPd to set\n */\nTax1099DIV.prototype.setForTaxPd = function(forTaxPd) {\n  this.forTaxPd = forTaxPd;\n};\n\n\n/**\n * @return {String} the cashLiq\n */\nTax1099DIV.prototype.getCashLiq = function() {\n  return this.cashLiq;\n};\nElement.add(Tax1099DIV, {name: \"CASHLIQ\", required: false, order: 12, attributeType: String, readMethod: \"getCashLiq\", writeMethod: \"setCashLiq\"});\n\n\n/**\n * @param {String} cashLiq the cashLiq to set\n */\nTax1099DIV.prototype.setCashLiq = function(cashLiq) {\n  this.cashLiq = cashLiq;\n};\n\n\n/**\n * @return {String} the nonCashLiq\n */\nTax1099DIV.prototype.getNonCashLiq = function() {\n  return this.nonCashLiq;\n};\nElement.add(Tax1099DIV, {name: \"NONCASHLIQ\", required: false, order: 13, attributeType: String, readMethod: \"getNonCashLiq\", writeMethod: \"setNonCashLiq\"});\n\n\n/**\n * @param {String} nonCashLiq the nonCashLiq to set\n */\nTax1099DIV.prototype.setNonCashLiq = function(nonCashLiq) {\n  this.nonCashLiq = nonCashLiq;\n};\n\n\n/**\n * @return {PayerAddress} the payerAddress\n */\nTax1099DIV.prototype.getPayerAddress = function() {\n  return this.payerAddress;\n};\nChildAggregate.add(Tax1099DIV, {required:true, order: 14, attributeType: PayerAddress, readMethod: \"getPayerAddress\", writeMethod: \"setPayerAddress\"});\n\n\n/**\n * @param {PayerAddress} payerAddress the payerAddress to set\n */\nTax1099DIV.prototype.setPayerAddress = function(payerAddress) {\n  this.payerAddress = payerAddress;\n};\n\n\n/**\n * @return {String} the payerId\n */\nTax1099DIV.prototype.getPayerId = function() {\n  return this.payerId;\n};\nElement.add(Tax1099DIV, {name: \"PAYERID\", required: true, order: 15, attributeType: String, readMethod: \"getPayerId\", writeMethod: \"setPayerId\"});\n\n\n/**\n * @param {String} payerId the payerId to set\n */\nTax1099DIV.prototype.setPayerId = function(payerId) {\n  this.payerId = payerId;\n};\n\n\n/**\n * @return {RecAddress} the recAddress\n */\nTax1099DIV.prototype.getRecAddress = function() {\n  return this.recAddress;\n};\nChildAggregate.add(Tax1099DIV, {required:true, order: 16, attributeType: RecAddress, readMethod: \"getRecAddress\", writeMethod: \"setRecAddress\"});\n\n\n/**\n * @param {RecAddress} recAddress the recAddress to set\n */\nTax1099DIV.prototype.setRecAddress = function(recAddress) {\n  this.recAddress = recAddress;\n};\n\n\n/**\n * @return {String} the recId\n */\nTax1099DIV.prototype.getRecId = function() {\n  return this.recId;\n};\nElement.add(Tax1099DIV, {name: \"RECID\", required: true, order: 17, attributeType: String, readMethod: \"getRecId\", writeMethod: \"setRecId\"});\n\n\n/**\n * @param {String} recId the recId to set\n */\nTax1099DIV.prototype.setRecId = function(recId) {\n  this.recId = recId;\n};\n\n\n/**\n * @return {String} the recAcct\n */\nTax1099DIV.prototype.getRecAcct = function() {\n  return this.recAcct;\n};\nElement.add(Tax1099DIV, {name: \"RECACCT\", required: true, order: 18, attributeType: String, readMethod: \"getRecAcct\", writeMethod: \"setRecAcct\"});\n\n\n/**\n * @param {String} recAcct the recAcct to set\n */\nTax1099DIV.prototype.setRecAcct = function(recAcct) {\n  this.recAcct = recAcct;\n};\n\n\n\n\nmodule.exports = Tax1099DIV;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar PayerAddress = require(\"./PayerAddress\");\nvar RecAddress = require(\"./RecAddress\");\n\n/**\n * @class\n */\nfunction Tax1099INT () {\n\n  /**\n   * @name Tax1099INT#srvrtId\n   * @type String\n   * @access private\n   */\n  this.srvrtId = null;\n\n  /**\n   * @name Tax1099INT#taxYear\n   * @type String\n   * @access private\n   */\n  this.taxYear = null;\n\n  /**\n   * @name Tax1099INT#intIncome\n   * @type String\n   * @access private\n   */\n  this.intIncome = null;\n\n  /**\n   * @name Tax1099INT#erlWithPen\n   * @type String\n   * @access private\n   */\n  this.erlWithPen = null;\n\n  /**\n   * @name Tax1099INT#intUsbndtrs\n   * @type String\n   * @access private\n   */\n  this.intUsbndtrs = null;\n\n  /**\n   * @name Tax1099INT#fedTaxWh\n   * @type String\n   * @access private\n   */\n  this.fedTaxWh = null;\n\n  /**\n   * @name Tax1099INT#investExp\n   * @type String\n   * @access private\n   */\n  this.investExp = null;\n\n  /**\n   * @name Tax1099INT#forTaxPd\n   * @type String\n   * @access private\n   */\n  this.forTaxPd = null;\n\n  /**\n   * @name Tax1099INT#payerAddress\n   * @type PayerAddress\n   * @access private\n   */\n  this.payerAddress = null;\n\n  /**\n   * @name Tax1099INT#payerId\n   * @type String\n   * @access private\n   */\n  this.payerId = null;\n\n  /**\n   * @name Tax1099INT#recAddress\n   * @type RecAddress\n   * @access private\n   */\n  this.recAddress = null;\n\n  /**\n   * @name Tax1099INT#recId\n   * @type String\n   * @access private\n   */\n  this.recId = null;\n\n  /**\n   * @name Tax1099INT#recAcct\n   * @type String\n   * @access private\n   */\n  this.recAcct = null;\n\n  /**\n   * @name Tax1099INT#taxExemptInt\n   * @type String\n   * @access private\n   */\n  this.taxExemptInt = null;\n\n  /**\n   * @name Tax1099INT#specifiedPabInt\n   * @type String\n   * @access private\n   */\n  this.specifiedPabInt = null;\n}\n\n\n\nAggregate.add(\"TAX1099INT_V100\", Tax1099INT);\n\n\nTax1099INT.prototype.getSrvrtId = function() {\n  return this.srvrtId;\n};\nElement.add(Tax1099INT, {name: \"SRVRTID\",required: true , order: 0, attributeType: String, readMethod: \"getSrvrtId\", writeMethod: \"setSrvrtId\"});\n\n\nTax1099INT.prototype.setSrvrtId = function(/*String*/ srvrtId) {\n  this.srvrtId = srvrtId;\n};\n\n\nTax1099INT.prototype.getTaxYear = function() {\n  return this.taxYear;\n};\nElement.add(Tax1099INT, {name: \"TAXYEAR\", required: true, order: 1, attributeType: String, readMethod: \"getTaxYear\", writeMethod: \"setTaxYear\"});\n\n\nTax1099INT.prototype.setTaxYear = function(/*String*/ taxYear) {\n  this.taxYear = taxYear;\n};\n\n\n/**\n * @return {String} the intIncome\n */\nTax1099INT.prototype.getIntIncome = function() {\n  return this.intIncome;\n};\nElement.add(Tax1099INT, {name: \"INTINCOME\",required: false , order: 2, attributeType: String, readMethod: \"getIntIncome\", writeMethod: \"setIntIncome\"});\n\n\n/**\n * @param {String} intIncome the intIncome to set\n */\nTax1099INT.prototype.setIntIncome = function(intIncome) {\n  this.intIncome = intIncome;\n};\n\n\n/**\n * @return {String} the erlWithPen\n */\nTax1099INT.prototype.getErlWithPen = function() {\n  return this.erlWithPen;\n};\nElement.add(Tax1099INT, {name: \"ERLWITHPEN\",required: false , order: 3, attributeType: String, readMethod: \"getErlWithPen\", writeMethod: \"setErlWithPen\"});\n\n\n/**\n * @param {String} erlWithPen the erlWithPen to set\n */\nTax1099INT.prototype.setErlWithPen = function(erlWithPen) {\n  this.erlWithPen = erlWithPen;\n};\n\n\n/**\n * @return {String} the intUsbndtrs\n */\nTax1099INT.prototype.getIntUsbndtrs = function() {\n  return this.intUsbndtrs;\n};\nElement.add(Tax1099INT, {name: \"INTUSBNDTRS\",required: false , order: 4, attributeType: String, readMethod: \"getIntUsbndtrs\", writeMethod: \"setIntUsbndtrs\"});\n\n\n/**\n * @param {String} intUsbndtrs the intUsbndtrs to set\n */\nTax1099INT.prototype.setIntUsbndtrs = function(intUsbndtrs) {\n  this.intUsbndtrs = intUsbndtrs;\n};\n\n\n/**\n * @return {String} the fedTaxWh\n */\nTax1099INT.prototype.getFedTaxWh = function() {\n  return this.fedTaxWh;\n};\nElement.add(Tax1099INT, {name: \"FEDTAXWH\", required: false, order: 5, attributeType: String, readMethod: \"getFedTaxWh\", writeMethod: \"setFedTaxWh\"});\n\n\n/**\n * @param {String} fedTaxWh the fedTaxWh to set\n */\nTax1099INT.prototype.setFedTaxWh = function(fedTaxWh) {\n  this.fedTaxWh = fedTaxWh;\n};\n\n\n/**\n * @return {String} the investExp\n */\nTax1099INT.prototype.getInvestExp = function() {\n  return this.investExp;\n};\nElement.add(Tax1099INT, {name: \"INVESTEXP\", required: false, order: 6, attributeType: String, readMethod: \"getInvestExp\", writeMethod: \"setInvestExp\"});\n\n\n/**\n * @param {String} investExp the investExp to set\n */\nTax1099INT.prototype.setInvestExp = function(investExp) {\n  this.investExp = investExp;\n};\n\n\n/**\n * @return {String} the forTaxPd\n */\nTax1099INT.prototype.getForTaxPd = function() {\n  return this.forTaxPd;\n};\nElement.add(Tax1099INT, {name: \"FORTAXPD\", required: false, order: 7, attributeType: String, readMethod: \"getForTaxPd\", writeMethod: \"setForTaxPd\"});\n\n\n/**\n * @param {String} forTaxPd the forTaxPd to set\n */\nTax1099INT.prototype.setForTaxPd = function(forTaxPd) {\n  this.forTaxPd = forTaxPd;\n};\n\n\n/**\n * @return {PayerAddress} the payerAddress\n */\nTax1099INT.prototype.getPayerAddress = function() {\n  return this.payerAddress;\n};\nChildAggregate.add(Tax1099INT, {required:true, order: 8, attributeType: PayerAddress, readMethod: \"getPayerAddress\", writeMethod: \"setPayerAddress\"});\n\n\n/**\n * @param {PayerAddress} payerAddress the payerAddress to set\n */\nTax1099INT.prototype.setPayerAddress = function(payerAddress) {\n  this.payerAddress = payerAddress;\n};\n\n\n/**\n * @return {String} the payerId\n */\nTax1099INT.prototype.getPayerId = function() {\n  return this.payerId;\n};\nElement.add(Tax1099INT, {name: \"PAYERID\", required: true, order: 9, attributeType: String, readMethod: \"getPayerId\", writeMethod: \"setPayerId\"});\n\n\n/**\n * @param {String} payerId the payerId to set\n */\nTax1099INT.prototype.setPayerId = function(payerId) {\n  this.payerId = payerId;\n};\n\n\n/**\n * @return {RecAddress} the recAddress\n */\nTax1099INT.prototype.getRecAddress = function() {\n  return this.recAddress;\n};\nChildAggregate.add(Tax1099INT, {required:true, order: 10, attributeType: RecAddress, readMethod: \"getRecAddress\", writeMethod: \"setRecAddress\"});\n\n\n/**\n * @param {RecAddress} recAddress the recAddress to set\n */\nTax1099INT.prototype.setRecAddress = function(recAddress) {\n  this.recAddress = recAddress;\n};\n\n\n/**\n * @return {String} the recId\n */\nTax1099INT.prototype.getRecId = function() {\n  return this.recId;\n};\nElement.add(Tax1099INT, {name: \"RECID\", required: true, order: 11, attributeType: String, readMethod: \"getRecId\", writeMethod: \"setRecId\"});\n\n\n/**\n * @param {String} recId the recId to set\n */\nTax1099INT.prototype.setRecId = function(recId) {\n  this.recId = recId;\n};\n\n\n/**\n * @return {String} the recAcct\n */\nTax1099INT.prototype.getRecAcct = function() {\n  return this.recAcct;\n};\nElement.add(Tax1099INT, {name: \"RECACCT\", required: true, order: 12, attributeType: String, readMethod: \"getRecAcct\", writeMethod: \"setRecAcct\"});\n\n\n/**\n * @param {String} recAcct the recAcct to set\n */\nTax1099INT.prototype.setRecAcct = function(recAcct) {\n  this.recAcct = recAcct;\n};\n\n\n/**\n * @return {String} the taxExemptInt\n */\nTax1099INT.prototype.getTaxExemptInt = function() {\n  return this.taxExemptInt;\n};\nElement.add(Tax1099INT, {name: \"TAXEXEMPTINT\", required: false, order: 13, attributeType: String, readMethod: \"getTaxExemptInt\", writeMethod: \"setTaxExemptInt\"});\n\n\n/**\n * @param {String} taxExemptInt the taxExemptInt to set\n */\nTax1099INT.prototype.setTaxExemptInt = function(taxExemptInt) {\n  this.taxExemptInt = taxExemptInt;\n};\n\n\n/**\n * @return {String} the specifiedPabInt\n */\nTax1099INT.prototype.getSpecifiedPabInt = function() {\n  return this.specifiedPabInt;\n};\nElement.add(Tax1099INT, {name: \"SPECIFIEDPABINT\", required: false, order: 14, attributeType: String, readMethod: \"getSpecifiedPabInt\", writeMethod: \"setSpecifiedPabInt\"});\n\n\n/**\n * @param {String} specifiedPabInt the specifiedPabInt to set\n */\nTax1099INT.prototype.setSpecifiedPabInt = function(specifiedPabInt) {\n  this.specifiedPabInt = specifiedPabInt;\n};\n\n\n\n\nmodule.exports = Tax1099INT;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar PayerAddress = require(\"./PayerAddress\");\nvar RecAddress = require(\"./RecAddress\");\n\n/**\n * @class\n */\nfunction Tax1099MISC () {\n\n  /**\n   * @name Tax1099MISC#srvrtId\n   * @type String\n   * @access private\n   */\n  this.srvrtId = null;\n\n  /**\n   * @name Tax1099MISC#taxYear\n   * @type String\n   * @access private\n   */\n  this.taxYear = null;\n\n  /**\n   * @name Tax1099MISC#royalties\n   * @type String\n   * @access private\n   */\n  this.royalties = null;\n\n  /**\n   * @name Tax1099MISC#otherIncome\n   * @type String\n   * @access private\n   */\n  this.otherIncome = null;\n\n  /**\n   * @name Tax1099MISC#fedTaxWh\n   * @type String\n   * @access private\n   */\n  this.fedTaxWh = null;\n\n  /**\n   * @name Tax1099MISC#subPmts\n   * @type String\n   * @access private\n   */\n  this.subPmts = null;\n\n  /**\n   * @name Tax1099MISC#payerAddress\n   * @type PayerAddress\n   * @access private\n   */\n  this.payerAddress = null;\n\n  /**\n   * @name Tax1099MISC#payerId\n   * @type String\n   * @access private\n   */\n  this.payerId = null;\n\n  /**\n   * @name Tax1099MISC#recAddress\n   * @type RecAddress\n   * @access private\n   */\n  this.recAddress = null;\n\n  /**\n   * @name Tax1099MISC#recId\n   * @type String\n   * @access private\n   */\n  this.recId = null;\n\n  /**\n   * @name Tax1099MISC#recAcct\n   * @type String\n   * @access private\n   */\n  this.recAcct = null;\n}\n\n\n\nAggregate.add(\"TAX1099MISC_V100\", Tax1099MISC);\n\n\nTax1099MISC.prototype.getSrvrtId = function() {\n  return this.srvrtId;\n};\nElement.add(Tax1099MISC, {name: \"SRVRTID\",required: true , order: 0, attributeType: String, readMethod: \"getSrvrtId\", writeMethod: \"setSrvrtId\"});\n\n\nTax1099MISC.prototype.setSrvrtId = function(/*String*/ srvrtId) {\n  this.srvrtId = srvrtId;\n};\n\n\nTax1099MISC.prototype.getTaxYear = function() {\n  return this.taxYear;\n};\nElement.add(Tax1099MISC, {name: \"TAXYEAR\", required: true, order: 1, attributeType: String, readMethod: \"getTaxYear\", writeMethod: \"setTaxYear\"});\n\n\nTax1099MISC.prototype.setTaxYear = function(/*String*/ taxYear) {\n  this.taxYear = taxYear;\n};\n\n\n/**\n * @return {String} the royalties\n */\nTax1099MISC.prototype.getRoyalties = function() {\n  return this.royalties;\n};\nElement.add(Tax1099MISC, {name: \"ROYALTIES\",required: false , order: 2, attributeType: String, readMethod: \"getRoyalties\", writeMethod: \"setRoyalties\"});\n\n\n/**\n * @param {String} royalties the royalties to set\n */\nTax1099MISC.prototype.setRoyalties = function(royalties) {\n  this.royalties = royalties;\n};\n\n\n/**\n * @return {String} the otherIncome\n */\nTax1099MISC.prototype.getOtherIncome = function() {\n  return this.otherIncome;\n};\nElement.add(Tax1099MISC, {name: \"OTHERINCOME\",required: false , order: 3, attributeType: String, readMethod: \"getOtherIncome\", writeMethod: \"setOtherIncome\"});\n\n\n/**\n * @param {String} otherIncome the otherIncome to set\n */\nTax1099MISC.prototype.setOtherIncome = function(otherIncome) {\n  this.otherIncome = otherIncome;\n};\n\n\n/**\n * @return {String} the fedTaxWh\n */\nTax1099MISC.prototype.getFedTaxWh = function() {\n  return this.fedTaxWh;\n};\nElement.add(Tax1099MISC, {name: \"FEDTAXWH\",required: false , order: 4, attributeType: String, readMethod: \"getFedTaxWh\", writeMethod: \"setFedTaxWh\"});\n\n\n/**\n * @param {String} fedTaxWh the fedTaxWh to set\n */\nTax1099MISC.prototype.setFedTaxWh = function(fedTaxWh) {\n  this.fedTaxWh = fedTaxWh;\n};\n\n\n/**\n * @return {String} the subPmts\n */\nTax1099MISC.prototype.getSubPmts = function() {\n  return this.subPmts;\n};\nElement.add(Tax1099MISC, {name: \"SUBPMTS\",required: false , order: 5, attributeType: String, readMethod: \"getSubPmts\", writeMethod: \"setSubPmts\"});\n\n\n/**\n * @param {String} subPmts the subPmts to set\n */\nTax1099MISC.prototype.setSubPmts = function(subPmts) {\n  this.subPmts = subPmts;\n};\n\n\n/**\n * @return {PayerAddress} the payerAddress\n */\nTax1099MISC.prototype.getPayerAddress = function() {\n  return this.payerAddress;\n};\nChildAggregate.add(Tax1099MISC, {required:true, order: 6, attributeType: PayerAddress, readMethod: \"getPayerAddress\", writeMethod: \"setPayerAddress\"});\n\n\n/**\n * @param {PayerAddress} payerAddress the payerAddress to set\n */\nTax1099MISC.prototype.setPayerAddress = function(payerAddress) {\n  this.payerAddress = payerAddress;\n};\n\n\n/**\n * @return {String} the payerId\n */\nTax1099MISC.prototype.getPayerId = function() {\n  return this.payerId;\n};\nElement.add(Tax1099MISC, {name: \"PAYERID\", required: true, order: 7, attributeType: String, readMethod: \"getPayerId\", writeMethod: \"setPayerId\"});\n\n\n/**\n * @param {String} payerId the payerId to set\n */\nTax1099MISC.prototype.setPayerId = function(payerId) {\n  this.payerId = payerId;\n};\n\n\n/**\n * @return {RecAddress} the recAddress\n */\nTax1099MISC.prototype.getRecAddress = function() {\n  return this.recAddress;\n};\nChildAggregate.add(Tax1099MISC, {required:true, order: 8, attributeType: RecAddress, readMethod: \"getRecAddress\", writeMethod: \"setRecAddress\"});\n\n\n/**\n * @param {RecAddress} recAddress the recAddress to set\n */\nTax1099MISC.prototype.setRecAddress = function(recAddress) {\n  this.recAddress = recAddress;\n};\n\n\n/**\n * @return {String} the recId\n */\nTax1099MISC.prototype.getRecId = function() {\n  return this.recId;\n};\nElement.add(Tax1099MISC, {name: \"RECID\", required: true, order: 9, attributeType: String, readMethod: \"getRecId\", writeMethod: \"setRecId\"});\n\n\n/**\n * @param {String} recId the recId to set\n */\nTax1099MISC.prototype.setRecId = function(recId) {\n  this.recId = recId;\n};\n\n\n/**\n * @return {String} the recAcct\n */\nTax1099MISC.prototype.getRecAcct = function() {\n  return this.recAcct;\n};\nElement.add(Tax1099MISC, {name: \"RECACCT\", required: true, order: 10, attributeType: String, readMethod: \"getRecAcct\", writeMethod: \"setRecAcct\"});\n\n\n/**\n * @param {String} recAcct the recAcct to set\n */\nTax1099MISC.prototype.setRecAcct = function(recAcct) {\n  this.recAcct = recAcct;\n};\n\n\n\n\nmodule.exports = Tax1099MISC;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar PayerAddress = require(\"./PayerAddress\");\nvar RecAddress = require(\"./RecAddress\");\n\n/**\n * @class\n */\nfunction Tax1099OID () {\n\n  /**\n   * @name Tax1099OID#srvrtId\n   * @type String\n   * @access private\n   */\n  this.srvrtId = null;\n\n  /**\n   * @name Tax1099OID#taxYear\n   * @type String\n   * @access private\n   */\n  this.taxYear = null;\n\n  /**\n   * @name Tax1099OID#originalDisc\n   * @type String\n   * @access private\n   */\n  this.originalDisc = null;\n\n  /**\n   * @name Tax1099OID#otherPerInt\n   * @type String\n   * @access private\n   */\n  this.otherPerInt = null;\n\n  /**\n   * @name Tax1099OID#erlWithPen\n   * @type String\n   * @access private\n   */\n  this.erlWithPen = null;\n\n  /**\n   * @name Tax1099OID#fedTaxWh\n   * @type String\n   * @access private\n   */\n  this.fedTaxWh = null;\n\n  /**\n   * @name Tax1099OID#desc\n   * @type String\n   * @access private\n   */\n  this.desc = null;\n\n  /**\n   * @name Tax1099OID#oidOnUstres\n   * @type String\n   * @access private\n   */\n  this.oidOnUstres = null;\n\n  /**\n   * @name Tax1099OID#investExp\n   * @type String\n   * @access private\n   */\n  this.investExp = null;\n\n  /**\n   * @name Tax1099OID#payerAddress\n   * @type PayerAddress\n   * @access private\n   */\n  this.payerAddress = null;\n\n  /**\n   * @name Tax1099OID#payerId\n   * @type String\n   * @access private\n   */\n  this.payerId = null;\n\n  /**\n   * @name Tax1099OID#recAddress\n   * @type RecAddress\n   * @access private\n   */\n  this.recAddress = null;\n\n  /**\n   * @name Tax1099OID#recId\n   * @type String\n   * @access private\n   */\n  this.recId = null;\n\n  /**\n   * @name Tax1099OID#recAcct\n   * @type String\n   * @access private\n   */\n  this.recAcct = null;\n}\n\n\n\nAggregate.add(\"TAX1099OID_V100\", Tax1099OID);\n\n\nTax1099OID.prototype.getSrvrtId = function() {\n  return this.srvrtId;\n};\nElement.add(Tax1099OID, {name: \"SRVRTID\",required: true , order: 0, attributeType: String, readMethod: \"getSrvrtId\", writeMethod: \"setSrvrtId\"});\n\n\nTax1099OID.prototype.setSrvrtId = function(/*String*/ srvrtId) {\n  this.srvrtId = srvrtId;\n};\n\n\nTax1099OID.prototype.getTaxYear = function() {\n  return this.taxYear;\n};\nElement.add(Tax1099OID, {name: \"TAXYEAR\", required: true, order: 1, attributeType: String, readMethod: \"getTaxYear\", writeMethod: \"setTaxYear\"});\n\n\nTax1099OID.prototype.setTaxYear = function(/*String*/ taxYear) {\n  this.taxYear = taxYear;\n};\n\n\n/**\n * @return {String} the originalDisc\n */\nTax1099OID.prototype.getOriginalDisc = function() {\n  return this.originalDisc;\n};\nElement.add(Tax1099OID, {name: \"ORIGISDISC\", required: false, order: 2, attributeType: String, readMethod: \"getOriginalDisc\", writeMethod: \"setOriginalDisc\"});\n\n\n/**\n * @param {String} originalDisc the originalDisc to set\n */\nTax1099OID.prototype.setOriginalDisc = function(originalDisc) {\n  this.originalDisc = originalDisc;\n};\n\n\n/**\n * @return {String} the otherPerInt\n */\nTax1099OID.prototype.getOtherPerInt = function() {\n  return this.otherPerInt;\n};\nElement.add(Tax1099OID, {name: \"OTHERPERINT\", required: false, order: 3, attributeType: String, readMethod: \"getOtherPerInt\", writeMethod: \"setOtherPerInt\"});\n\n\n/**\n * @param {String} otherPerInt the otherPerInt to set\n */\nTax1099OID.prototype.setOtherPerInt = function(otherPerInt) {\n  this.otherPerInt = otherPerInt;\n};\n\n\n/**\n * @return {String} the erlWithPen\n */\nTax1099OID.prototype.getErlWithPen = function() {\n  return this.erlWithPen;\n};\nElement.add(Tax1099OID, {name: \"ERLWITHPEN\", required: false, order: 4, attributeType: String, readMethod: \"getErlWithPen\", writeMethod: \"setErlWithPen\"});\n\n\n/**\n * @param {String} erlWithPen the erlWithPen to set\n */\nTax1099OID.prototype.setErlWithPen = function(erlWithPen) {\n  this.erlWithPen = erlWithPen;\n};\n\n\n/**\n * @return {String} the fedTaxWh\n */\nTax1099OID.prototype.getFedTaxWh = function() {\n  return this.fedTaxWh;\n};\nElement.add(Tax1099OID, {name: \"FEDTAXWH\", required: false, order: 5, attributeType: String, readMethod: \"getFedTaxWh\", writeMethod: \"setFedTaxWh\"});\n\n\n/**\n * @param {String} fedTaxWh the fedTaxWh to set\n */\nTax1099OID.prototype.setFedTaxWh = function(fedTaxWh) {\n  this.fedTaxWh = fedTaxWh;\n};\n\n\n/**\n * @return {String} the desc\n */\nTax1099OID.prototype.getDesc = function() {\n  return this.desc;\n};\nElement.add(Tax1099OID, {name: \"DESCRIPTION\", required: true, order: 6, attributeType: String, readMethod: \"getDesc\", writeMethod: \"setDesc\"});\n\n\n/**\n * @param {String} desc the desc to set\n */\nTax1099OID.prototype.setDesc = function(desc) {\n  this.desc = desc;\n};\n\n\n/**\n * @return {String} the oidOnUstres\n */\nTax1099OID.prototype.getOidOnUstres = function() {\n  return this.oidOnUstres;\n};\nElement.add(Tax1099OID, {name: \"OIDONUSTRES\", required: false, order: 7, attributeType: String, readMethod: \"getOidOnUstres\", writeMethod: \"setOidOnUstres\"});\n\n\n/**\n * @param {String} oidOnUstres the oidOnUstres to set\n */\nTax1099OID.prototype.setOidOnUstres = function(oidOnUstres) {\n  this.oidOnUstres = oidOnUstres;\n};\n\n\n/**\n * @return {String} the investExp\n */\nTax1099OID.prototype.getInvestExp = function() {\n  return this.investExp;\n};\nElement.add(Tax1099OID, {name: \"INVESTEXP\", required: false, order: 8, attributeType: String, readMethod: \"getInvestExp\", writeMethod: \"setInvestExp\"});\n\n\n/**\n * @param {String} investExp the investExp to set\n */\nTax1099OID.prototype.setInvestExp = function(investExp) {\n  this.investExp = investExp;\n};\n\n\n/**\n * @return {PayerAddress} the payerAddress\n */\nTax1099OID.prototype.getPayerAddress = function() {\n  return this.payerAddress;\n};\nChildAggregate.add(Tax1099OID, {required:true, order: 9, attributeType: PayerAddress, readMethod: \"getPayerAddress\", writeMethod: \"setPayerAddress\"});\n\n\n/**\n * @param {PayerAddress} payerAddress the payerAddress to set\n */\nTax1099OID.prototype.setPayerAddress = function(payerAddress) {\n  this.payerAddress = payerAddress;\n};\n\n\n/**\n * @return {String} the payerId\n */\nTax1099OID.prototype.getPayerId = function() {\n  return this.payerId;\n};\nElement.add(Tax1099OID, {name: \"PAYERID\", required: true, order: 10, attributeType: String, readMethod: \"getPayerId\", writeMethod: \"setPayerId\"});\n\n\n/**\n * @param {String} payerId the payerId to set\n */\nTax1099OID.prototype.setPayerId = function(payerId) {\n  this.payerId = payerId;\n};\n\n\n/**\n * @return {RecAddress} the recAddress\n */\nTax1099OID.prototype.getRecAddress = function() {\n  return this.recAddress;\n};\nChildAggregate.add(Tax1099OID, {required:true, order: 11, attributeType: RecAddress, readMethod: \"getRecAddress\", writeMethod: \"setRecAddress\"});\n\n\n/**\n * @param {RecAddress} recAddress the recAddress to set\n */\nTax1099OID.prototype.setRecAddress = function(recAddress) {\n  this.recAddress = recAddress;\n};\n\n\n/**\n * @return {String} the recId\n */\nTax1099OID.prototype.getRecId = function() {\n  return this.recId;\n};\nElement.add(Tax1099OID, {name: \"RECID\", required: true, order: 12, attributeType: String, readMethod: \"getRecId\", writeMethod: \"setRecId\"});\n\n\n/**\n * @param {String} recId the recId to set\n */\nTax1099OID.prototype.setRecId = function(recId) {\n  this.recId = recId;\n};\n\n\n/**\n * @return {String} the recAcct\n */\nTax1099OID.prototype.getRecAcct = function() {\n  return this.recAcct;\n};\nElement.add(Tax1099OID, {name: \"RECACCT\", required: true, order: 13, attributeType: String, readMethod: \"getRecAcct\", writeMethod: \"setRecAcct\"});\n\n\n/**\n * @param {String} recAcct the recAcct to set\n */\nTax1099OID.prototype.setRecAcct = function(recAcct) {\n  this.recAcct = recAcct;\n};\n\n\n\n\nmodule.exports = Tax1099OID;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar PayerAddress = require(\"./PayerAddress\");\nvar RecAddress = require(\"./RecAddress\");\n\n/**\n * @class\n */\nfunction Tax1099R () {\n\n  /**\n   * @name Tax1099R#srvrtId\n   * @type String\n   * @access private\n   */\n  this.srvrtId = null;\n\n  /**\n   * @name Tax1099R#taxYear\n   * @type String\n   * @access private\n   */\n  this.taxYear = null;\n\n  /**\n   * @name Tax1099R#grossDist\n   * @type String\n   * @access private\n   */\n  this.grossDist = null;\n\n  /**\n   * @name Tax1099R#taxAmt\n   * @type String\n   * @access private\n   */\n  this.taxAmt = null;\n\n  /**\n   * @name Tax1099R#taxAmtNd\n   * @type String\n   * @access private\n   */\n  this.taxAmtNd = null;\n\n  /**\n   * @name Tax1099R#capGain\n   * @type String\n   * @access private\n   */\n  this.capGain = null;\n\n  /**\n   * @name Tax1099R#fedTaxWh\n   * @type String\n   * @access private\n   */\n  this.fedTaxWh = null;\n\n  /**\n   * @name Tax1099R#empContins\n   * @type String\n   * @access private\n   */\n  this.empContins = null;\n\n  /**\n   * @name Tax1099R#netUnapEmp\n   * @type String\n   * @access private\n   */\n  this.netUnapEmp = null;\n\n  /**\n   * @name Tax1099R#distCode\n   * @type String\n   * @access private\n   */\n  this.distCode = null;\n\n  /**\n   * @name Tax1099R#iraSepSimp\n   * @type String\n   * @access private\n   */\n  this.iraSepSimp = null;\n\n  /**\n   * @name Tax1099R#annCtrctDist\n   * @type String\n   * @access private\n   */\n  this.annCtrctDist = null;\n\n  /**\n   * @name Tax1099R#totEmpCount\n   * @type String\n   * @access private\n   */\n  this.totEmpCount = null;\n\n  /**\n   * @name Tax1099R#payerAddress\n   * @type PayerAddress\n   * @access private\n   */\n  this.payerAddress = null;\n\n  /**\n   * @name Tax1099R#payerId\n   * @type String\n   * @access private\n   */\n  this.payerId = null;\n\n  /**\n   * @name Tax1099R#recAddress\n   * @type RecAddress\n   * @access private\n   */\n  this.recAddress = null;\n\n  /**\n   * @name Tax1099R#recId\n   * @type String\n   * @access private\n   */\n  this.recId = null;\n\n  /**\n   * @name Tax1099R#recAcct\n   * @type String\n   * @access private\n   */\n  this.recAcct = null;\n}\n\n\n\nAggregate.add(\"TAX1099R_V100\", Tax1099R);\n\n\nTax1099R.prototype.getSrvrtId = function() {\n  return this.srvrtId;\n};\nElement.add(Tax1099R, {name: \"SRVRTID\",required: true , order: 0, attributeType: String, readMethod: \"getSrvrtId\", writeMethod: \"setSrvrtId\"});\n\n\nTax1099R.prototype.setSrvrtId = function(/*String*/ srvrtId) {\n  this.srvrtId = srvrtId;\n};\n\n\nTax1099R.prototype.getTaxYear = function() {\n  return this.taxYear;\n};\nElement.add(Tax1099R, {name: \"TAXYEAR\", required: true, order: 1, attributeType: String, readMethod: \"getTaxYear\", writeMethod: \"setTaxYear\"});\n\n\nTax1099R.prototype.setTaxYear = function(/*String*/ taxYear) {\n  this.taxYear = taxYear;\n};\n\n\n/**\n * @return {String} the grossDist\n */\nTax1099R.prototype.getGrossDist = function() {\n  return this.grossDist;\n};\nElement.add(Tax1099R, {name: \"GROSSDIST\", required: true, order: 2, attributeType: String, readMethod: \"getGrossDist\", writeMethod: \"setGrossDist\"});\n\n\n/**\n * @param {String} grossDist the grossDist to set\n */\nTax1099R.prototype.setGrossDist = function(grossDist) {\n  this.grossDist = grossDist;\n};\n\n\n/**\n * @return {String} the taxAmt\n */\nTax1099R.prototype.getTaxAmt = function() {\n  return this.taxAmt;\n};\nElement.add(Tax1099R, {name: \"TAXAMT\", required: false, order: 3, attributeType: String, readMethod: \"getTaxAmt\", writeMethod: \"setTaxAmt\"});\n\n\n/**\n * @param {String} taxAmt the taxAmt to set\n */\nTax1099R.prototype.setTaxAmt = function(taxAmt) {\n  this.taxAmt = taxAmt;\n};\n\n\n/**\n * @return {String} the taxAmtNd\n */\nTax1099R.prototype.getTaxAmtNd = function() {\n  return this.taxAmtNd;\n};\nElement.add(Tax1099R, {name: \"TAXAMTND\", required: false, order: 4, attributeType: String, readMethod: \"getTaxAmtNd\", writeMethod: \"setTaxAmtNd\"});\n\n\n/**\n * @param {String} taxAmtNd the taxAmtNd to set\n */\nTax1099R.prototype.setTaxAmtNd = function(taxAmtNd) {\n  this.taxAmtNd = taxAmtNd;\n};\n\n\n/**\n * @return {String} the capGain\n */\nTax1099R.prototype.getCapGain = function() {\n  return this.capGain;\n};\nElement.add(Tax1099R, {name: \"CAPGAIN\", required: false, order: 5, attributeType: String, readMethod: \"getCapGain\", writeMethod: \"setCapGain\"});\n\n\n/**\n * @param {String} capGain the capGain to set\n */\nTax1099R.prototype.setCapGain = function(capGain) {\n  this.capGain = capGain;\n};\n\n\n/**\n * @return {String} the fedTaxWh\n */\nTax1099R.prototype.getFedTaxWh = function() {\n  return this.fedTaxWh;\n};\nElement.add(Tax1099R, {name: \"FEDTAXWH\", required: false, order: 6, attributeType: String, readMethod: \"getFedTaxWh\", writeMethod: \"setFedTaxWh\"});\n\n\n/**\n * @param {String} fedTaxWh the fedTaxWh to set\n */\nTax1099R.prototype.setFedTaxWh = function(fedTaxWh) {\n  this.fedTaxWh = fedTaxWh;\n};\n\n\n/**\n * @return {String} the empContins\n */\nTax1099R.prototype.getEmpContins = function() {\n  return this.empContins;\n};\nElement.add(Tax1099R, {name: \"EMPCONTINS\", required: false, order: 7, attributeType: String, readMethod: \"getEmpContins\", writeMethod: \"setEmpContins\"});\n\n\n/**\n * @param {String} empContins the empContins to set\n */\nTax1099R.prototype.setEmpContins = function(empContins) {\n  this.empContins = empContins;\n};\n\n\n/**\n * @return {String} the netUnapEmp\n */\nTax1099R.prototype.getNetUnapEmp = function() {\n  return this.netUnapEmp;\n};\nElement.add(Tax1099R, {name: \"NETUNAPEMP\", required: false, order: 8, attributeType: String, readMethod: \"getNetUnapEmp\", writeMethod: \"setNetUnapEmp\"});\n\n\n/**\n * @param {String} netUnapEmp the netUnapEmp to set\n */\nTax1099R.prototype.setNetUnapEmp = function(netUnapEmp) {\n  this.netUnapEmp = netUnapEmp;\n};\n\n\n/**\n * @return {String} the distCode\n */\nTax1099R.prototype.getDistCode = function() {\n  return this.distCode;\n};\nElement.add(Tax1099R, {name: \"DISTCODE\", required: true, order: 9, attributeType: String, readMethod: \"getDistCode\", writeMethod: \"setDistCode\"});\n\n\n/**\n * @param {String} distCode the distCode to set\n */\nTax1099R.prototype.setDistCode = function(distCode) {\n  this.distCode = distCode;\n};\n\n\n/**\n * @return {String} the iraSepSimp\n */\nTax1099R.prototype.getIraSepSimp = function() {\n  return this.iraSepSimp;\n};\nElement.add(Tax1099R, {name: \"IRASEPSIMP\", required: true, order: 10, attributeType: String, readMethod: \"getIraSepSimp\", writeMethod: \"setIraSepSimp\"});\n\n\n/**\n * @param {String} iraSepSimp the iraSepSimp to set\n */\nTax1099R.prototype.setIraSepSimp = function(iraSepSimp) {\n  this.iraSepSimp = iraSepSimp;\n};\n\n\n/**\n * @return {String} the annCtrctDist\n */\nTax1099R.prototype.getAnnCtrctDist = function() {\n  return this.annCtrctDist;\n};\nElement.add(Tax1099R, {name: \"ANNCTRCTDIST\", required: false, order: 11, attributeType: String, readMethod: \"getAnnCtrctDist\", writeMethod: \"setAnnCtrctDist\"});\n\n\n/**\n * @param {String} annCtrctDist the annCtrctDist to set\n */\nTax1099R.prototype.setAnnCtrctDist = function(annCtrctDist) {\n  this.annCtrctDist = annCtrctDist;\n};\n\n\n/**\n * @return {String} the totEmpCount\n */\nTax1099R.prototype.getTotEmpCount = function() {\n  return this.totEmpCount;\n};\nElement.add(Tax1099R, {name: \"TOTEMPCONT\", required: false, order: 12, attributeType: String, readMethod: \"getTotEmpCount\", writeMethod: \"setTotEmpCount\"});\n\n\n/**\n * @param {String} totEmpCount the totEmpCount to set\n */\nTax1099R.prototype.setTotEmpCount = function(totEmpCount) {\n  this.totEmpCount = totEmpCount;\n};\n\n\n/**\n * @return {PayerAddress} the payerAddress\n */\nTax1099R.prototype.getPayerAddress = function() {\n  return this.payerAddress;\n};\nChildAggregate.add(Tax1099R, {required:true, order: 13, attributeType: PayerAddress, readMethod: \"getPayerAddress\", writeMethod: \"setPayerAddress\"});\n\n\n/**\n * @param {PayerAddress} payerAddress the payerAddress to set\n */\nTax1099R.prototype.setPayerAddress = function(payerAddress) {\n  this.payerAddress = payerAddress;\n};\n\n\n/**\n * @return {String} the payerId\n */\nTax1099R.prototype.getPayerId = function() {\n  return this.payerId;\n};\nElement.add(Tax1099R, {name: \"PAYERID\", required: true, order: 14, attributeType: String, readMethod: \"getPayerId\", writeMethod: \"setPayerId\"});\n\n\n/**\n * @param {String} payerId the payerId to set\n */\nTax1099R.prototype.setPayerId = function(payerId) {\n  this.payerId = payerId;\n};\n\n\n/**\n * @return {RecAddress} the recAddress\n */\nTax1099R.prototype.getRecAddress = function() {\n  return this.recAddress;\n};\nChildAggregate.add(Tax1099R, {required:true, order: 15, attributeType: RecAddress, readMethod: \"getRecAddress\", writeMethod: \"setRecAddress\"});\n\n\n/**\n * @param {RecAddress} recAddress the recAddress to set\n */\nTax1099R.prototype.setRecAddress = function(recAddress) {\n  this.recAddress = recAddress;\n};\n\n\n/**\n * @return {String} the recId\n */\nTax1099R.prototype.getRecId = function() {\n  return this.recId;\n};\nElement.add(Tax1099R, {name: \"RECID\", required: true, order: 16, attributeType: String, readMethod: \"getRecId\", writeMethod: \"setRecId\"});\n\n\n/**\n * @param {String} recId the recId to set\n */\nTax1099R.prototype.setRecId = function(recId) {\n  this.recId = recId;\n};\n\n\n/**\n * @return {String} the recAcct\n */\nTax1099R.prototype.getRecAcct = function() {\n  return this.recAcct;\n};\nElement.add(Tax1099R, {name: \"RECACCT\", required: true, order: 17, attributeType: String, readMethod: \"getRecAcct\", writeMethod: \"setRecAcct\"});\n\n\n/**\n * @param {String} recAcct the recAcct to set\n */\nTax1099R.prototype.setRecAcct = function(recAcct) {\n  this.recAcct = recAcct;\n};\n\n\n\n\nmodule.exports = Tax1099R;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar T1099Request = require(\"../common/T1099Request\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\n\n/**\n * @class\n * @augments T1099Request\n */\nfunction Tax1099Request () {\n  T1099Request.call(this);\n\n  /**\n   * @name Tax1099Request#taxYear\n   * @type String\n   * @access private\n   */\n  this.taxYear = null;\n}\n\ninherit(Tax1099Request, \"extends\", T1099Request);\n\n\nAggregate.add(\"TAX1099RQ\", Tax1099Request);\n\n\nTax1099Request.prototype.getTaxYear = function() {\n  return this.taxYear;\n};\nElement.add(Tax1099Request, {name: \"TAXYEAR\", required: true, order: 0, attributeType: String, readMethod: \"getTaxYear\", writeMethod: \"setTaxYear\"});\n\n\nTax1099Request.prototype.setTaxYear = function(/*String*/ taxYear) {\n  this.taxYear = taxYear;\n};\n\n\n\n\nmodule.exports = Tax1099Request;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar MessageSetType = require(\"../MessageSetType\");\nvar RequestMessageSet = require(\"../RequestMessageSet\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Tax1099RequestTransaction = require(\"./Tax1099RequestTransaction\");\n\n/**\n * @class\n * @augments RequestMessageSet\n */\nfunction Tax1099RequestMessageSet () {\n  RequestMessageSet.call(this);\n\n  /**\n   * @name Tax1099RequestMessageSet#taxRequestTransaction\n   * @type Tax1099RequestTransaction\n   * @access private\n   */\n  this.taxRequestTransaction = null;\n}\n\ninherit(Tax1099RequestMessageSet, \"extends\", RequestMessageSet);\n\n\nAggregate.add(\"TAX1099MSGSRQV1\", Tax1099RequestMessageSet);\n\n\nTax1099RequestMessageSet.prototype.getType = function() {\n  return MessageSetType.tax1099;\n};\n\n\n/**\n * The statement request.\n *\n * @return {Tax1099RequestTransaction} The statement request.\n */\nTax1099RequestMessageSet.prototype.getTaxRequestTransaction = function() {\n  return this.taxRequestTransaction;\n};\nChildAggregate.add(Tax1099RequestMessageSet, {order: 0, attributeType: Tax1099RequestTransaction, readMethod: \"getTaxRequestTransaction\", writeMethod: \"setTaxRequestTransaction\"});\n\n\n/**\n * The statement request.\n *\n * @param {Tax1099RequestTransaction} taxRequestTransaction The statement request.\n */\nTax1099RequestMessageSet.prototype.setTaxRequestTransaction = function(taxRequestTransaction) {\n  this.taxRequestTransaction = taxRequestTransaction;\n};\n\n\n// Inherited.\nTax1099RequestMessageSet.prototype.getRequestMessages = function() {\n  var requestMessages = [];\n  if (this.getTaxRequestTransaction()) {\n    requestMessages.push(this.getTaxRequestTransaction());\n  }\n  return requestMessages;\n};\n\n\n\n\nmodule.exports = Tax1099RequestMessageSet;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar TransactionWrappedRequestMessage = require(\"../TransactionWrappedRequestMessage\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Tax1099Request = require(\"./Tax1099Request\");\n\n/**\n * @class\n * @augments TransactionWrappedRequestMessage\n */\nfunction Tax1099RequestTransaction () {\n  TransactionWrappedRequestMessage.call(this);\n\n  /**\n   * @name Tax1099RequestTransaction#tax1099Request\n   * @type Tax1099Request\n   * @access private\n   */\n  this.tax1099Request = null;\n}\n\ninherit(Tax1099RequestTransaction, \"extends\", TransactionWrappedRequestMessage);\n\n\nAggregate.add(\"TAX1099TRNRQ\", Tax1099RequestTransaction);\n\n\n/**\n * The tax1099Request.\n *\n * @return {Tax1099Request} The tax1099Request.\n */\nTax1099RequestTransaction.prototype.getTax1099Request = function() {\n  return this.tax1099Request;\n};\nChildAggregate.add(Tax1099RequestTransaction, {required: true, order: 30, attributeType: Tax1099Request, readMethod: \"getTax1099Request\", writeMethod: \"setTax1099Request\"});\n\n\n/**\n * The tax1099Request.\n *\n * @param {Tax1099Request} tax1099Request The message.\n *\n */\nTax1099RequestTransaction.prototype.setTax1099Request = function(tax1099Request) {\n  this.tax1099Request = tax1099Request;\n};\n\n\n// Inherited.\nTax1099RequestTransaction.prototype.setWrappedMessage = function(/*Tax1099Request*/ tax1099Request) {\n  this.setTax1099Request(tax1099Request);\n};\n\n\n\n\nmodule.exports = Tax1099RequestTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar T1099Response = require(\"../common/T1099Response\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Tax1099DIV = require(\"./Tax1099DIV\");\nvar Tax1099INT = require(\"./Tax1099INT\");\nvar Tax1099R = require(\"./Tax1099R\");\nvar Tax1099B = require(\"./Tax1099B\");\nvar Tax1099MISC = require(\"./Tax1099MISC\");\nvar Tax1099OID = require(\"./Tax1099OID\");\n\n/**\n * @class\n * @augments T1099Response\n */\nfunction Tax1099Response () {\n  T1099Response.call(this);\n\n  /**\n   * @name Tax1099Response#tax1099div\n   * @type Tax1099DIV\n   * @access private\n   */\n  this.tax1099div = null;\n\n  /**\n   * @name Tax1099Response#lstTax1099DIV\n   * @type Tax1099DIV[]\n   * @access private\n   */\n  this.lstTax1099DIV = null;\n\n  /**\n   * @name Tax1099Response#lstTax1099INT\n   * @type Tax1099INT[]\n   * @access private\n   */\n  this.lstTax1099INT = null;\n\n  /**\n   * @name Tax1099Response#lstTax1099R\n   * @type Tax1099R[]\n   * @access private\n   */\n  this.lstTax1099R = null;\n\n  /**\n   * @name Tax1099Response#lstTax1099B\n   * @type Tax1099B[]\n   * @access private\n   */\n  this.lstTax1099B = null;\n\n  /**\n   * @name Tax1099Response#lstTax1099MISC\n   * @type Tax1099MISC[]\n   * @access private\n   */\n  this.lstTax1099MISC = null;\n\n  /**\n   * @name Tax1099Response#lstTax1099OID\n   * @type Tax1099OID[]\n   * @access private\n   */\n  this.lstTax1099OID = null;\n}\n\ninherit(Tax1099Response, \"extends\", T1099Response);\n\n\nAggregate.add(\"TAX1099RS\", Tax1099Response);\n\n\n/**\n * @return {Tax1099DIV[]} the lstTax1099DIV\n */\nTax1099Response.prototype.getLstTax1099DIV = function() {\n  return this.lstTax1099DIV;\n};\nChildAggregate.add(Tax1099Response, {required: false, order: 0, attributeType: Array, collectionEntryType: Tax1099DIV, readMethod: \"getLstTax1099DIV\", writeMethod: \"setLstTax1099DIV\"});\n\n\n/**\n * @param {Tax1099DIV[]} lstTax1099DIV\n *            the lstTax1099DIV to set\n */\nTax1099Response.prototype.setLstTax1099DIV = function(lstTax1099DIV) {\n  this.lstTax1099DIV = lstTax1099DIV;\n};\n\n\nTax1099Response.prototype.getResponseMessageName = function() {\n  return \"1099 Tax details\";\n};\n\n\n/**\n * @return {Tax1099INT[]} the lstTax1099INT\n */\nTax1099Response.prototype.getLstTax1099INT = function() {\n  return this.lstTax1099INT;\n};\nChildAggregate.add(Tax1099Response, {required: false, order: 1, attributeType: Array, collectionEntryType: Tax1099INT, readMethod: \"getLstTax1099INT\", writeMethod: \"setLstTax1099INT\"});\n\n\n/**\n * @param {Tax1099INT[]} lstTax1099INT the lstTax1099INT to set\n */\nTax1099Response.prototype.setLstTax1099INT = function(lstTax1099INT) {\n  this.lstTax1099INT = lstTax1099INT;\n};\n\n\n/**\n * @return {Tax1099R[]} the lstTax1099R\n */\nTax1099Response.prototype.getLstTax1099R = function() {\n  return this.lstTax1099R;\n};\nChildAggregate.add(Tax1099Response, {required: false, order: 2, attributeType: Array, collectionEntryType: Tax1099R, readMethod: \"getLstTax1099R\", writeMethod: \"setLstTax1099R\"});\n\n\n/**\n * @param {Tax1099R[]} lstTax1099R the lstTax1099R to set\n */\nTax1099Response.prototype.setLstTax1099R = function(lstTax1099R) {\n  this.lstTax1099R = lstTax1099R;\n};\n\n\n/**\n * @return {Tax1099B[]} the lstTax1099B\n */\nTax1099Response.prototype.getLstTax1099B = function() {\n  return this.lstTax1099B;\n};\nChildAggregate.add(Tax1099Response, {required: false, order: 3, attributeType: Array, collectionEntryType: Tax1099B, readMethod: \"getLstTax1099B\", writeMethod: \"setLstTax1099B\"});\n\n\n/**\n * @param {Tax1099B[]} lstTax1099B the lstTax1099B to set\n */\nTax1099Response.prototype.setLstTax1099B = function(lstTax1099B) {\n  this.lstTax1099B = lstTax1099B;\n};\n\n\n/**\n * @return {Tax1099MISC[]} the lstTax1099MISC\n */\nTax1099Response.prototype.getLstTax1099MISC = function() {\n  return this.lstTax1099MISC;\n};\nChildAggregate.add(Tax1099Response, {required: false, order: 4, attributeType: Array, collectionEntryType: Tax1099MISC, readMethod: \"getLstTax1099MISC\", writeMethod: \"setLstTax1099MISC\"});\n\n\n/**\n * @param {Tax1099MISC[]} lstTax1099MISC the lstTax1099MISC to set\n */\nTax1099Response.prototype.setLstTax1099MISC = function(lstTax1099MISC) {\n  this.lstTax1099MISC = lstTax1099MISC;\n};\n\n\n/**\n * @return {Tax1099OID[]} the lstTax1099OID\n */\nTax1099Response.prototype.getLstTax1099OID = function() {\n  return this.lstTax1099OID;\n};\nChildAggregate.add(Tax1099Response, {required: false, order:5, attributeType: Array, collectionEntryType: Tax1099OID, readMethod: \"getLstTax1099OID\", writeMethod: \"setLstTax1099OID\"});\n\n\n/**\n * @param {Tax1099OID[]} lstTax1099OID the lstTax1099OID to set\n */\nTax1099Response.prototype.setLstTax1099OID = function(lstTax1099OID) {\n  this.lstTax1099OID = lstTax1099OID;\n};\n\n\n\n\nmodule.exports = Tax1099Response;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar MessageSetType = require(\"../MessageSetType\");\nvar ResponseMessageSet = require(\"../ResponseMessageSet\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Tax1099ResponseTransaction = require(\"./Tax1099ResponseTransaction\");\n\n/**\n * @class\n * @augments ResponseMessageSet\n */\nfunction Tax1099ResponseMessageSet () {\n  ResponseMessageSet.call(this);\n\n  /**\n   * @name Tax1099ResponseMessageSet#taxResponseTransaction\n   * @type Tax1099ResponseTransaction[]\n   * @access private\n   */\n  this.taxResponseTransaction = null;\n}\n\ninherit(Tax1099ResponseMessageSet, \"extends\", ResponseMessageSet);\n\n\nAggregate.add(\"TAX1099MSGSRSV1\", Tax1099ResponseMessageSet);\n\n\nTax1099ResponseMessageSet.prototype.getType = function() {\n  return MessageSetType.tax1099;\n};\n\n\n/**\n * The taxResponseTransaction list.\n *\n * Most OFX files have a single statement response, except MT2OFX\n * which outputs OFX with multiple statement responses\n * in a single banking response message set.\n *\n * @return {Tax1099ResponseTransaction[]} The taxResponseTransaction list.\n */\nTax1099ResponseMessageSet.prototype.getTaxResponseTransaction = function() {\n  return this.taxResponseTransaction;\n};\nChildAggregate.add(Tax1099ResponseMessageSet, {order: 0, attributeType: Array, collectionEntryType: Tax1099ResponseTransaction, readMethod: \"getTaxResponseTransaction\", writeMethod: \"setTaxResponseTransaction\"});\n\n\n/**\n * The taxResponseTransaction.\n *\n * @param {Tax1099ResponseTransaction[]} taxResponseTransaction The statement responses.\n */\nTax1099ResponseMessageSet.prototype.setTaxResponseTransaction = function(taxResponseTransaction) {\n  if (taxResponseTransaction instanceof Array) {\n    this.taxResponseTransaction = taxResponseTransaction;\n  } else {\n    this.taxResponseTransaction = [taxResponseTransaction];\n  }\n};\n\n\n// Inherited.\nTax1099ResponseMessageSet.prototype.getResponseMessages = function() {\n  return this.taxResponseTransaction;\n};\n\n\n/**\n * The first statement response.\n *\n * @return {Tax1099ResponseTransaction} the first bank statement response.\n * @deprecated Use getStatementResponses() because sometimes there are multiple responses\n */\nTax1099ResponseMessageSet.prototype.getStatementResponse = function() {\n  return !this.taxResponseTransaction || this.taxResponseTransaction.length === 0 ? null : this.taxResponseTransaction.get(0);\n};\n\n\nmodule.exports = Tax1099ResponseMessageSet;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar TransactionWrappedResponseMessage = require(\"../TransactionWrappedResponseMessage\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Tax1099Response = require(\"./Tax1099Response\");\n\n/**\n * @class\n * @augments TransactionWrappedResponseMessage\n */\nfunction Tax1099ResponseTransaction () {\n  TransactionWrappedResponseMessage.call(this);\n\n  /**\n   * @name Tax1099ResponseTransaction#tax1099Response\n   * @type Tax1099Response\n   * @access private\n   */\n  this.tax1099Response = null;\n}\n\ninherit(Tax1099ResponseTransaction, \"extends\", TransactionWrappedResponseMessage);\n\n\nAggregate.add(\"TAX1099TRNRS\", Tax1099ResponseTransaction);\n\n\n/**\n * The tax1099Response.\n *\n * @return {Tax1099Response} The tax1099Response.\n */\nTax1099ResponseTransaction.prototype.getTax1099Response = function() {\n  return this.tax1099Response;\n};\nChildAggregate.add(Tax1099ResponseTransaction, {required:false, order: 2, attributeType: Tax1099Response, readMethod: \"getTax1099Response\", writeMethod: \"setTax1099Response\"});\n\n\n/**\n * The tax1099Response.\n *\n * @param {Tax1099Response} tax1099Response The message.\n */\nTax1099ResponseTransaction.prototype.setTax1099Response = function(tax1099Response) {\n  this.tax1099Response = tax1099Response;\n};\n\n\n// Inherited.\nTax1099ResponseTransaction.prototype.getWrappedMessage = function() {\n  return this.getTax1099Response();\n};\n\n\n\n\nmodule.exports = Tax1099ResponseTransaction;\n","\"use strict\";\n\nmodule.exports = {\n  ExtDBInfo: require(\"./ExtDBInfo\"),\n  PayerAddress: require(\"./PayerAddress\"),\n  ProcDet: require(\"./ProcDet\"),\n  RecAddress: require(\"./RecAddress\"),\n  Tax1099B: require(\"./Tax1099B\"),\n  Tax1099DIV: require(\"./Tax1099DIV\"),\n  Tax1099INT: require(\"./Tax1099INT\"),\n  Tax1099MISC: require(\"./Tax1099MISC\"),\n  Tax1099OID: require(\"./Tax1099OID\"),\n  Tax1099R: require(\"./Tax1099R\"),\n  Tax1099Request: require(\"./Tax1099Request\"),\n  Tax1099RequestMessageSet: require(\"./Tax1099RequestMessageSet\"),\n  Tax1099RequestTransaction: require(\"./Tax1099RequestTransaction\"),\n  Tax1099Response: require(\"./Tax1099Response\"),\n  Tax1099ResponseMessageSet: require(\"./Tax1099ResponseMessageSet\"),\n  Tax1099ResponseTransaction: require(\"./Tax1099ResponseTransaction\"),\n};\n","\"use strict\";\n\nmodule.exports = {\n  data: require(\"./data/index\"),\n};\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * A generic descriptor for an attribute of an OFX aggregate.\n *\n * @class\n */\nfunction AggregateAttribute(type, info) {\n\n  /**\n   * @name AggregateAttribute#readMethod\n   * @type Method\n   * @access private\n   */\n  this.readMethod = null;\n\n  /**\n   * @name AggregateAttribute#writeMethod\n   * @type Method\n   * @access private\n   */\n  this.writeMethod = null;\n\n  /**\n   * @name AggregateAttribute#attributeType\n   * @type Class\n   * @access private\n   */\n  this.attributeType = null;\n\n  /**\n   * @name AggregateAttribute#collectionEntryType\n   * @type Class\n   * @access private\n   */\n  this.collectionEntryType = null;\n\n  /**\n   * @name AggregateAttribute#name\n   * @type String\n   * @access private\n   */\n  this.name = null;\n\n  /**\n   * @name AggregateAttribute#order\n   * @type int\n   * @access private\n   */\n  this.order = null;\n\n  /**\n   * @name AggregateAttribute#required\n   * @type boolean\n   * @access private\n   */\n  this.required = null;\n\n  /**\n   * @name AggregateAttribute#type\n   * @type Type\n   * @access private\n   */\n  this.type = type;\n\n  /**\n   * @name AggregateAttribute#toString_\n   * @type String\n   * @access private\n   */\n  this.toString_ = null;\n\n  /**\n   * @name AggregateAttribute#collection\n   * @type boolean\n   * @access private\n   */\n  this.collection = false;\n  \n  switch(type) {\n    case AggregateAttribute.Type.CHILD_AGGREGATE:\n      this.AggregateAttributeForChildAggregate(info);\n      break;\n      \n    case AggregateAttribute.Type.ELEMENT:\n      this.AggregateAttributeForElement(info);\n      break;\n      \n    default:\n      throw new Error(\"illegal invocation\");\n  }\n}\n\n\nvar Type = AggregateAttribute.Type = {\n  CHILD_AGGREGATE: 0,\n  ELEMENT: 1\n};\n\n\nAggregateAttribute.prototype.AggregateAttributeForElement = function(elementInfo) {\n  this.readMethod = elementInfo.readMethod;\n  this.writeMethod = elementInfo.writeMethod;\n  if (!this.readMethod) {\n    throw new Error(\"Illegal property '\" + elementInfo.name + \"' for aggregate: no read method.\");\n  }\n  else if (!this.writeMethod) {\n    throw new Error(\"Illegal property '\" + elementInfo.name + \"' for aggregate: no write method.\");\n  }\n\n  this.attributeType = elementInfo.attributeType;\n  this.collectionEntryType = null;\n  this.name = elementInfo.name;\n  this.order = elementInfo.order;\n  this.required = elementInfo.required;\n  this.type = Type.ELEMENT;\n  this.toString_ = \"Element '\" + this.name + \"'\";\n  this.collection = false;\n\n  //todo: validate known/supported element types here?\n};\n\n\nAggregateAttribute.prototype.AggregateAttributeForChildAggregate = function(childAggregate) {\n  this.readMethod = childAggregate.readMethod;\n  this.writeMethod = childAggregate.writeMethod;\n  if (!this.readMethod) {\n    throw new Error(\"Illegal property '\" + childAggregate.name + \"' for aggregate: no read method.\");\n  }\n  else if (!this.writeMethod) {\n    throw new Error(\"Illegal property '\" + childAggregate.name + \"' for aggregate: no write method.\");\n  }\n\n  this.attributeType = childAggregate.attributeType;\n  this.collection = false;\n  if (childAggregate.collectionEntryType) {\n    this.collection = true;\n    this.name = null;\n    this.collectionEntryType = childAggregate.collectionEntryType;\n  }\n  else if (\"##not_specified##\" === childAggregate.name) {\n    var AggregateIntrospector = require(\"./AggregateIntrospector\");\n    var aggregateInfo = AggregateIntrospector.getAggregateInfo(childAggregate.attributeType);\n    if (!aggregateInfo) {\n      throw new Error(\"Illegal child aggregate type '\" + childAggregate.attributeType + \"': no aggregate information available.\");\n    }\n\n    this.name = aggregateInfo.getName();\n    if (\"##not_specified##\" === this.name) {\n      throw new Error(\"Illegal child aggregate type '\" + childAggregate.attributeType + \"': a child aggregate name must be specified.\");\n    }\n    this.collectionEntryType = null;\n  }\n  else {\n    this.name = childAggregate.name;\n    this.collectionEntryType = null;\n  }\n\n  this.order = childAggregate.order;\n  this.required = childAggregate.required;\n  this.type = Type.CHILD_AGGREGATE;\n  this.toString_ = \"ChildAggregate '\" + this.name + \"'\";\n};\n\n\nAggregateAttribute.prototype.get = function(/*Object*/ instance) {\n  var readMethod = instance[this.readMethod];\n  return readMethod.call(instance);\n};\n\n\nAggregateAttribute.prototype.set = function(/*Object*/ value, /*Object*/ instance) {\n  if (this.collection) {\n    var collection = this.get(instance);\n    if (!collection) {\n      collection = [];\n    }\n    collection.push(value);\n    value = collection;\n  }\n\n  var writeMethod = instance[this.writeMethod];\n  writeMethod.call(instance, value);\n};\n\n\nAggregateAttribute.prototype.getAttributeType = function() {\n  return this.attributeType;\n};\n\n\nAggregateAttribute.prototype.getCollectionEntryType = function() {\n  return this.collectionEntryType;\n};\n\n\nAggregateAttribute.prototype.getName = function() {\n  return this.name;\n};\n\n\nAggregateAttribute.prototype.isRequired = function() {\n  return this.required;\n};\n\n\nAggregateAttribute.prototype.getOrder = function() {\n  return this.order;\n};\n\n\nAggregateAttribute.prototype.getType = function() {\n  return this.type;\n};\n\n\nAggregateAttribute.prototype.compareTo = function(/*AggregateAttribute*/ other) {\n  return this.order - other.order;\n};\n\n\nAggregateAttribute.prototype.isCollection = function() {\n  return this.collection;\n};\n\n\n// @Override\nAggregateAttribute.prototype.toString = function() {\n  return this.toString_;\n};\n\n\n\n\nmodule.exports = AggregateAttribute;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = null;\nvar AggregateAttribute = require(\"./AggregateAttribute\");\n\n\n/**\n * Holder for meta information about an aggregate class.\n *\n * @class\n */\nfunction AggregateInfo(name, clazz) {\n  \n  /**\n   * @name AggregateInfo#clazz\n   * @type Class\n   * @access private\n   */\n  this.clazz = clazz;\n\n  /**\n   * @name AggregateInfo#name\n   * @type String\n   * @access private\n   */\n  this.name = name;\n\n  /**\n   * @name AggregateInfo#attributes\n   * @type AggregateAttribute[]\n   * @access private\n   */\n  this.attributes = [];\n\n  /**\n   * @name AggregateInfo#headers\n   * @type object\n   */\n  this.headers = {};\n}\n\n\nAggregateInfo.prototype.addChildAggregate = function(childAggregateInfo) {\n  var attribute = new AggregateAttribute(AggregateAttribute.Type.CHILD_AGGREGATE, childAggregateInfo);\n  this.attributes.push(attribute);\n};\n\nAggregateInfo.prototype.addElement = function(elementInfo) {\n  var attribute = new AggregateAttribute(AggregateAttribute.Type.ELEMENT, elementInfo);\n  this.attributes.push(attribute);\n};\n\nAggregateInfo.prototype.addHeader = function(options) {\n  console.assert(options.name);\n  this.headers[options.name] = options;\n};\n\n\n/**\n * The name of the aggregate.\n *\n * @return {String} The name of the aggregate.\n */\nAggregateInfo.prototype.getName = function() {\n  return this.name;\n};\n\n\n/**\n * The name of the aggregate.\n *\n * @param {String} value The name of the aggregate.\n */\nAggregateInfo.prototype.setName = function(value) {\n  this.name = value;\n};\n\n\n/**\n * The attributes.\n *\n * @return {AggregateAttribute[]} The attributes.\n */\nAggregateInfo.prototype.getAttributes = function() {\n  return this.attributes;\n};\n\n\n\n/**\n * Get the attribute by the specified name.\n *\n * @param {String} name The name of the attribute.\n * @param {int} orderHint The order at which the attribute should come after in case there are more than one candidates.\n * @param {Class} [assignableTo=null] The class this attribute must be assignable to\n * @return {AggregateAttribute} The attribute by the specified name,\n * or if there are more than one by that name,\n * the first one after the specified order,\n * or if there are none then the first collection that\n * comes after the order hint, or the latest if there\n * are none that come after the order hint, or null.\n */\nAggregateInfo.prototype.getAttribute = function(name, orderHint, assignableTo) {\n  if(!inherit) {\n    inherit = require(\"../util/inherit\");\n  }\n  var candidates = [];\n  var collectionBucket = null;\n  for (var attributeIdx=0; attributeIdx<this.attributes.length; attributeIdx++) {\n    var attribute = this.attributes[attributeIdx];\n    if (name === attribute.getName()) {\n      candidates.push(attribute);\n    }\n    else if (attribute.isCollection()) {\n      if (assignableTo) {\n        // Verify it's the right generic type.\n        var entryType = attribute.getCollectionEntryType();\n        if (entryType && !inherit.isAssignableFrom(entryType, assignableTo)) {\n          // Collection is of wrong type.\n          continue;\n        }\n      }\n      if (!collectionBucket || collectionBucket.getOrder() < orderHint) {\n        //the default is the first collection that comes after the order hint, or the latest if there are none that come after the order hint.\n        collectionBucket = attribute;\n      }\n    }\n  }\n\n  if (candidates.length > 0) {\n    if (candidates.length === 1) {\n      return candidates[0];\n    }\n    else {\n      for (var candidateIdx=0; candidateIdx<candidates.length; candidateIdx++) {\n        var candidate = candidates[candidateIdx];\n        if (candidate.getOrder() >= orderHint) {\n          return candidate;\n        }\n      }\n    }\n  }\n\n  return collectionBucket;\n};\n\n\n/**\n * Whether this aggregate has headers.\n *\n * @return {boolean} Whether this aggregate has headers.\n */\nAggregateInfo.prototype.hasHeaders = function() {\n  return Object.keys(this.headers).length > 0;\n};\n\n\nAggregateInfo.prototype.getMethod = function(header, name) {\n  console.assert(header[name]);\n  var fcn = this.clazz.prototype[header[name]];\n  console.assert(fcn && (typeof(fcn) === \"function\"));\n  return fcn;\n};\n\n/**\n * Get the headers defined by the specific aggregate instance.\n *\n * @param {Object} instance The aggregate instance.\n * @return {Object} The headers.\n */\nAggregateInfo.prototype.getHeaders = function(instance) {\n  var headers = {};\n  for (var name in this.headers) {\n    var header = this.headers[name];\n    var readMethod = this.getMethod(header, \"readMethod\");\n    var headerValue = readMethod.call(instance);\n    headers[header.name] = headerValue;\n  }\n  return headers;\n};\n\n\n/**\n * The type of the specified header.\n *\n * @param {String} name The header name.\n * @return {Class} The header type, or null if no header by the specified name exists.\n */\nAggregateInfo.prototype.getHeaderType = function(name) {\n  if (this.headers[name]) {\n    var header = this.headers[name];\n    return header.attributeType;\n  }\n  return null;\n};\n\n\n/**\n * Set the header value for the specified instance.\n *\n * @param {Object} instance The instance.\n * @param {String} name     The name of the header.\n * @param {Object} value    the value of the header.\n */\nAggregateInfo.prototype.setHeader = function(instance, name, value) {\n  if (this.headers[name]) {\n    var header = this.headers[name];\n    var writeMethod = this.getMethod(header, \"writeMethod\");\n    writeMethod.call(instance, value);\n  }\n};\n\n\n\n\nmodule.exports = AggregateInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar AggregateInfo = require(\"./AggregateInfo\");\nvar clone = require(\"clone\");\n\nvar AGGREGATE_CLASSES_BY_NAME = {};\nvar placeholderName = \"##PLACEHOLDER##\";\n\n/**\n * Introspector for aggregate information.\n *\n * @class\n */\nvar AggregateIntrospector = {};\n\nAggregateIntrospector.AGGREGATE_CLASSES_BY_NAME = AGGREGATE_CLASSES_BY_NAME;\nAggregateIntrospector.placeholderName = placeholderName;\n\n/**\n * Get the aggregate meta information for the specified class.\n *\n * @param clazz the aggregate class.\n * @return {AggregateInfo} The aggregate meta information, or null if the class isn't an aggregate.\n */\nAggregateIntrospector.getAggregateInfo = function(clazz) {\n  return clazz.Aggregate;\n};\n\n/**\n * Find the aggregate class by name.\n *\n * @param {String} aggregateName The name of the aggregate.\n * @return The aggregate class.\n */\nAggregateIntrospector.findAggregateByName = function(aggregateName) {\n  return AGGREGATE_CLASSES_BY_NAME[aggregateName];\n};\n\n\n/**\n * Add parent's aggregate data to child\n *\n * @param clazz the child class\n * @return parent the parent class\n */\nAggregateIntrospector.extend = function(clazz, parent) {\n  var parentAggregate = AggregateIntrospector.getAggregateInfo(parent);\n  if(parentAggregate) {\n    clazz.Aggregate = clone(parentAggregate);\n    clazz.Aggregate.setName(AggregateIntrospector.placeholderName);\n  }\n};\n\n\nAggregateIntrospector.getAggregateName = function(clazz) {\n  if(!clazz.Aggregate || clazz.Aggregate.getName() === AggregateIntrospector.placeholderName) {\n    return null;\n  } else {\n    return clazz.Aggregate.getName();\n  }\n};\n\n\nAggregateIntrospector.addAggregate = function(name, clazz) {\n//  console.assert(!(name in AGGREGATE_CLASSES_BY_NAME));\n  AGGREGATE_CLASSES_BY_NAME[name] = clazz;\n  \n  if(clazz.Aggregate) {\n    console.assert(clazz.Aggregate.getName() === AggregateIntrospector.placeholderName);\n    clazz.Aggregate.setName(name);\n  } else {\n    clazz.Aggregate = new AggregateInfo(name, clazz);\n  }\n};\n\n\nAggregateIntrospector.addChildAggregate = function(clazz, options) {\n  var aggregateInfo = AggregateIntrospector.getAggregateInfo(clazz);\n  if(!aggregateInfo) {\n    aggregateInfo = clazz.Aggregate = new AggregateInfo(AggregateIntrospector.placeholderName, clazz);\n  }\n  console.assert(aggregateInfo);\n  if(aggregateInfo) {\n    aggregateInfo.addChildAggregate(options);\n  }\n};\n\n\nAggregateIntrospector.addElement = function(clazz, options) {\n  var aggregateInfo = AggregateIntrospector.getAggregateInfo(clazz);\n  if(!aggregateInfo) {\n    aggregateInfo = clazz.Aggregate = new AggregateInfo(AggregateIntrospector.placeholderName, clazz);\n  }\n  console.assert(aggregateInfo);\n  if(aggregateInfo) {\n    aggregateInfo.addElement(options);\n  }\n};\n\nAggregateIntrospector.addHeader = function(clazz, options) {\n  var aggregateInfo = AggregateIntrospector.getAggregateInfo(clazz);\n  if(!aggregateInfo) {\n    aggregateInfo = clazz.Aggregate = new AggregateInfo(AggregateIntrospector.placeholderName, clazz);\n  }\n  console.assert(aggregateInfo);\n  if(aggregateInfo) {\n    aggregateInfo.addHeader(options);\n  }\n};\n\n\nmodule.exports = AggregateIntrospector;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar AggregateIntrospector = require(\"./AggregateIntrospector\");\nvar DefaultStringConversion = require(\"./DefaultStringConversion\");\nvar AggregateAttribute = require(\"./AggregateAttribute\");\n\n/**\n * Marshaller for aggregate objects.\n *\n * @class\n */\nfunction AggregateMarshaller () {\n  /**\n   * @name AggregateMarshaller#conversion\n   * @type StringConversion\n   * @access private\n   */\n  this.conversion = new DefaultStringConversion();\n}\n\n\n/**\n * Marshal the specified aggregate object.\n *\n * @param {Object} aggregate The aggregate to marshal.\n * @param {OFXWriter} writer    The writer.\n */\nAggregateMarshaller.prototype.marshal = function(aggregate, writer) {\n  var aggregateInfo = AggregateIntrospector.getAggregateInfo(aggregate.constructor);\n  if (!aggregateInfo) {\n    throw new Error(\"Unable to marshal object: no aggregate metadata found.\");\n  }\n\n  if (aggregateInfo.hasHeaders()) {\n    var headerValues = aggregateInfo.getHeaders(aggregate);\n    var convertedValues = {};\n    for (var header in headerValues) {\n      convertedValues[header] = this.getConversion().toString(headerValues[header]);\n    }\n    writer.writeHeaders(convertedValues);\n  }\n\n  writer.writeStartAggregate(aggregateInfo.getName());\n  var aggregateAttributes = aggregateInfo.getAttributes();\n  this.writeAggregateAttributes(aggregate, writer, aggregateAttributes);\n  writer.writeEndAggregate(aggregateInfo.getName());\n};\n\n\n/**\n * Write the aggregate attributes for the specified aggregate.\n *\n * @param {Object} aggregate           The aggregate.\n * @param {OFXWriter} writer              The writer.\n * @param {Object} aggregateAttributes The aggregate attributes.\n */\nAggregateMarshaller.prototype.writeAggregateAttributes = function(aggregate, writer, /*AggregateAttribute[]*/ aggregateAttributes) {\n  for (var i=0; i<aggregateAttributes.length; i++) {\n    var aggregateAttribute = aggregateAttributes[i];\n    var childValue = aggregateAttribute.get(aggregate);\n    if (childValue) {\n      switch (aggregateAttribute.getType()) {\n        case AggregateAttribute.Type.CHILD_AGGREGATE:\n          var childValues;\n          if (childValue instanceof Array) {\n            childValues = childValue;\n          }\n          else {\n            childValues = [childValue];\n          }\n\n          for (var childValueIdx=0; childValueIdx<childValues.length; childValueIdx++) {\n            var value = childValues[childValueIdx];\n            var aggregateInfo = AggregateIntrospector.getAggregateInfo(value.constructor);\n            if (!aggregateInfo) {\n              throw new Error(\"Unable to marshal object of type \" + value.constructor.name + \" (no aggregate metadata found).\");\n            }\n\n            var attributeName = aggregateAttribute.getName();\n            if (aggregateAttribute.isCollection()) {\n              attributeName = aggregateInfo.getName();\n            }\n            \n            writer.writeStartAggregate(attributeName);\n            this.writeAggregateAttributes(value, writer, aggregateInfo.getAttributes());\n            writer.writeEndAggregate(attributeName);\n          }\n          break;\n        case AggregateAttribute.Type.ELEMENT:\n          /*jshint -W004*/\n          var value = this.getConversion().toString(childValue);\n          if ((value) && (\"\" !== value.trim())) {\n            writer.writeElement(aggregateAttribute.getName(), value);\n          }\n          break;\n        default:\n          throw new Error(\"Unknown aggregate attribute type: \" + aggregateAttribute.getType());\n      }\n    }\n    else if (aggregateAttribute.isRequired()) {\n      throw new Error(\"Required \" + aggregateAttribute.toString() + \" is null or empty.\");\n    }\n  }\n};\n\n\n/**\n * The conversion.\n *\n * @return {StringConversion} The conversion.\n */\nAggregateMarshaller.prototype.getConversion = function() {\n  return this.conversion;\n};\n\n\n/**\n * The conversion.\n *\n * @param {StringConversion} conversion The conversion.\n */\nAggregateMarshaller.prototype.setConversion = function(conversion) {\n  this.conversion = conversion;\n};\n\n\n\n\nmodule.exports = AggregateMarshaller;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../util/inherit\");\nvar Stack = require(\"../util/stack\");\nvar AggregateIntrospector = require(\"./AggregateIntrospector\");\nvar OFXHandler = require(\"./OFXHandler\");\nvar AggregateAttribute = require(\"./AggregateAttribute\");\nvar LOG = require(\"../util/log\");\n\nfunction AggregateInfoHolder() {\n\n  /**\n   * @name AggregateInfoHolder#aggregate\n   * @type Object\n   */\n  this.aggregate = null;\n\n  /**\n   * @name AggregateInfoHolder#info\n   * @type AggregateInfo\n   */\n  this.info = null;\n\n  /**\n   * @name AggregateInfoHolder#aggregateName\n   * @type String\n   */\n  this.aggregateName = null;\n\n  /**\n   * @name AggregateInfoHolder#currentAttributeIndex\n   * @type int\n   */\n  this.currentAttributeIndex = 0;\n\n  switch(arguments.length) {\n    case 1:\n      var ignoredAggregateName = arguments[0];\n      this.aggregate = null;\n      this.info = null;\n      this.aggregateName = ignoredAggregateName;\n      break;\n      \n    case 3:\n      var aggregate = arguments[0],\n          info = arguments[1],\n          aggregateName = arguments[2];\n      this.aggregateName = aggregateName;\n      this.aggregate = aggregate;\n      this.info = info;\n      break;\n  }\n}\n\n\n/**\n * @returns boolean\n */\nAggregateInfoHolder.prototype.isBeingSkipped = function() {\n  return !this.aggregate || !this.info;\n};\n\n/**\n * @param {String} aggregateName\n * @returns boolean\n */\nAggregateInfoHolder.prototype.isSkipping = function(aggregateName) {\n  return this.isBeingSkipped() && aggregateName === this.aggregateName;\n};\n\n\n\n/**\n * Content handler that manages the aggregate using a stack-based implementation.\n * @param {Object} root\n * @param {StringConversion} conversion\n *\n * @class\n */\nfunction AggregateStackContentHandler(root, conversion) {\n  /**\n   * @name AggregateStackContentHandler#stack\n   * @type Stack<AggregateInfoHolder>\n   * @access private\n   */\n  this.stack = new Stack();\n\n  /**\n   * @name AggregateStackContentHandler#conversion\n   * @type StringConversion\n   * @access private\n   */\n  this.conversion = conversion;\n\n  /**\n   * @name AggregateStackContentHandler#parsingRoot\n   * @type boolean\n   * @access private\n   */\n  this.parsingRoot = false;\n\n  var aggregateInfo = AggregateIntrospector.getAggregateInfo(root.constructor);\n  if (!aggregateInfo) {\n    throw new Error(\"Unable to marshal object of type '\" + root.constructor.name + \"' (no aggregate metadata found).\");\n  }\n\n  this.stack.push(new AggregateInfoHolder(root, aggregateInfo, aggregateInfo.getName()));\n}\n\ninherit(AggregateStackContentHandler, 'implements', OFXHandler);\n\n\n\n/**\n * @param {String} name\n * @param {String} value\n */\nAggregateStackContentHandler.prototype.onHeader = function(name, value) {\n  var headerType = this.stack.peek().info.getHeaderType(name);\n  if (headerType) {\n    this.stack.peek().info.setHeader(this.stack.peek().aggregate, name, this.conversion.fromString(headerType, value));\n  }\n};\n\n/**\n * @param {String} name\n * @param {String} value\n */\nAggregateStackContentHandler.prototype.onElement = function(name, value) {\n  if (!this.stack.peek().isBeingSkipped()) {\n    var attribute = this.stack.peek().info.getAttribute(name, this.stack.peek().currentAttributeIndex);\n    if (attribute && attribute.getType() === AggregateAttribute.Type.ELEMENT) {\n      try {\n        attribute.set(this.conversion.fromString(attribute.getAttributeType(), value), this.stack.peek().aggregate);\n      }\n      catch (e) {\n        console.log(\"Unable to set \" + attribute.toString(), e);\n      }\n      this.stack.peek().currentAttributeIndex = attribute.getOrder();\n    }\n    else {\n      console.log(\"Element \" + name + \" is not supported on aggregate \" + this.stack.peek().info.getName() + \" at index \" + this.stack.peek().currentAttributeIndex);\n    }\n  }\n};\n\n/**\n * @param {String} aggregateName\n */\nAggregateStackContentHandler.prototype.startAggregate = function(aggregateName) {\n  if (this.stack.peek().isBeingSkipped()) {\n    this.stack.push(new AggregateInfoHolder(aggregateName));\n  }\n  else if (!this.parsingRoot) {\n    if (aggregateName !== this.stack.peek().info.getName()) {\n      throw new Error(\"Unexpected root element: \" + aggregateName);\n    }\n\n    this.parsingRoot = true;\n  }\n  else {\n    var infoHolder;\n\n    var attribute = this.stack.peek().info.getAttribute(aggregateName, this.stack.peek().currentAttributeIndex);\n    if (attribute) {\n      if (attribute.getType() == AggregateAttribute.Type.CHILD_AGGREGATE) {\n        var aggregateType;\n        if (attribute.isCollection()) {\n          aggregateType = AggregateIntrospector.findAggregateByName(aggregateName);\n        }\n        else {\n          aggregateType = attribute.getAttributeType();\n        }\n\n        if (aggregateType) {\n          var aggregateInfo = AggregateIntrospector.getAggregateInfo(aggregateType);\n          if (!aggregateInfo) {\n            throw new Error(\"Unable to locate aggregate info for type \" + aggregateType.getName());\n          }\n\n          /*jshint -W055*/\n          var aggregate = new aggregateType();\n          infoHolder = new AggregateInfoHolder(aggregate, aggregateInfo, aggregateName);\n        }\n        else {\n          if (LOG.warning) {\n            console.log(\"Child aggregate \" + aggregateName + \" is not supported on aggregate \" + this.stack.peek().info.getName() + \": name not assigned a type.\");\n          }\n\n          //element not supported.  push a skipping aggregate on the stack.\n          infoHolder = new AggregateInfoHolder(aggregateName);\n        }\n\n        this.stack.peek().currentAttributeIndex = attribute.getOrder();\n      }\n      else {\n        if (LOG.warning) {\n          console.log(\"Child aggregate \" + aggregateName + \" is not supported on aggregate \" + this.stack.peek().info.getName() + \": no child aggregate, but there does exist an element by that name.\");\n        }\n\n        //child aggregate not supported.  push a skipping aggregate on the stack.\n        infoHolder = new AggregateInfoHolder(aggregateName);\n      }\n    }\n    else {\n      if (LOG.warning) {\n        console.log(\"Child aggregate \" + aggregateName + \" is not supported on aggregate \" + this.stack.peek().info.getName() + \": no attributes found by that name after index \" + this.stack.peek().currentAttributeIndex);\n      }\n\n      //child aggregate not supported.  push a skipping aggregate on the stack.\n      infoHolder = new AggregateInfoHolder(aggregateName);\n    }\n\n    this.stack.push(infoHolder);\n  }\n};\n\n/**\n * @param {String} aggregateName\n */\nAggregateStackContentHandler.prototype.endAggregate = function(aggregateName) {\n  var infoHolder = this.stack.pop();\n  if (aggregateName !== infoHolder.aggregateName) {\n    throw new Error(\"Unexpected end aggregate \" + aggregateName + \". (Perhaps \" +\n      infoHolder.aggregateName + \" is an element with an empty value, making it impossible to parse.)\");\n  }\n\n  if (!this.stack.isEmpty()) {\n    if (!infoHolder.isSkipping(aggregateName)) {\n      //we're not skipping the top aggregate, so process it.\n      var attribute = this.stack.peek().info.getAttribute(\n          aggregateName, this.stack.peek().currentAttributeIndex, infoHolder.aggregate.constructor);\n      try {\n        if (attribute) {\n          attribute.set(infoHolder.aggregate, this.stack.peek().aggregate);\n        } else {\n          if (LOG.warning) {\n            console.log(\"Child aggregate \" + aggregateName + \" is not supported on aggregate \" + this.stack.peek().info.getName() + \": no attributes found by that name after index \" + this.stack.peek().currentAttributeIndex);\n            \n            attribute = this.stack.peek().info.getAttribute(aggregateName, this.stack.peek().currentAttributeIndex, infoHolder.aggregate.constructor);\n          }\n        }\n      }\n      catch (e) {\n        console.log(\"Unable to set \" + attribute.toString(), e);\n      }\n      this.stack.peek().currentAttributeIndex = attribute.getOrder();\n    }\n  }\n  else {\n    //ended the root element.\n  }\n};\n\n\nmodule.exports = AggregateStackContentHandler;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n//var NanoXMLOFXReader = require(\"io/nanoxml/NanoXMLOFXReader\");\nvar DefaultStringConversion = require(\"./DefaultStringConversion\");\nvar AggregateStackContentHandler = require(\"./AggregateStackContentHandler\");\nvar BaseOFXReader = require(\"./BaseOFXReader\");\n\n/**\n * Unmarshaller for aggregate objects.\n * \n * @class\n */\nfunction AggregateUnmarshaller (clazz) {\n  console.assert(clazz);\n\n  /**\n   * @name AggregateUnmarshaller#clazz\n   * @type Class\n   * @access private\n   */\n  this.clazz = clazz;\n\n  /**\n   * @name AggregateUnmarshaller#conversion\n   * @type StringConversion\n   * @access private\n   */\n  this.conversion = new DefaultStringConversion();\n}\n\n\n\nAggregateUnmarshaller.prototype.unmarshal = function(/*Reader*/ reader) {\n  var aggregate = new this.clazz();\n  var ofxReader = this.newReader();\n  ofxReader.setContentHandler(new AggregateStackContentHandler(aggregate, this.getConversion()));\n  ofxReader.parse(reader);\n  return aggregate;\n};\n\n\n/**\n * New OFX reader.\n *\n * @return {OFXReader} new OFX reader.\n */\nAggregateUnmarshaller.prototype.newReader = function() {\n  return new BaseOFXReader/*NanoXMLOFXReader*/();\n};\n\n\n/**\n * The conversion.\n *\n * @return {StringConversion} The conversion.\n */\nAggregateUnmarshaller.prototype.getConversion = function() {\n  return this.conversion;\n};\n\n\n/**\n * The conversion.\n *\n * @param {StringConversion} conversion The conversion.\n */\nAggregateUnmarshaller.prototype.setConversion = function(conversion) {\n  this.conversion = conversion;\n};\n\n\n\n\nmodule.exports = AggregateUnmarshaller;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../util/inherit\");\nvar DefaultHandler = require(\"./DefaultHandler\");\nvar OFXReader = require(\"./OFXReader\");\nvar OFXV2ContentHandler = require(\"./OFXV2ContentHandler\");\nvar StringReader = require(\"../util/StringReader\");\nvar LOG = require(\"../util/log\");\nvar sax = require(\"sax\");\n\n\n/**\n * @type RegExp\n */\nvar OFX_2_PROCESSING_INSTRUCTION_PATTERN = /<\\\\?OFX ([^\\\\?]+)\\\\?>/;\n\n\n/**\n * Base class for an OFX reader.  Parses the headers and determines whether we're parsing an\n * OFX v2 or OFX v1 element.  For OFX v2, uses a standard SAX library.\n *\n * @class\n */\nfunction BaseOFXReader () {\n  /**\n   * @name BaseOFXReader#contentHandler\n   * @type OFXHandler\n   * @access private\n   */\n  this.contentHandler = new DefaultHandler();\n}\n\ninherit(BaseOFXReader, \"implements\", OFXReader);\n\n\n\n\n/**\n * The content handler.\n *\n * @return {OFXHandler} The content handler.\n */\nBaseOFXReader.prototype.getContentHandler = function() {\n  return this.contentHandler;\n};\n\n\n/**\n * The content handler.\n *\n * @param {OFXHandler} handler The content handler.\n */\nBaseOFXReader.prototype.setContentHandler = function(handler) {\n  this.contentHandler = handler;\n};\n\n\nfunction arraysEqual(a1, a2) {\n  if(a1.length !== a2.length) {\n    return false;\n  }\n  for(var i=0; i<a1.length; i++) {\n    if(a1[i] !== a2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n\n/**\n * Parse the text, including the headers.\n *\n * @param {String} text The text to parse.\n */\nBaseOFXReader.prototype.parse = function(text) {\n  var header = \"\";\n  var reader = new StringReader(text);\n  var firstElementStart = this.getFirstElementStart();\n  var buffer = new Array(firstElementStart.length);\n  reader.mark(firstElementStart.length);\n  var ch = reader.read(buffer);\n  while ((ch != -1) && (!arraysEqual(buffer, firstElementStart))) {\n    if (!this.contains(buffer, '<')) {\n      //if the buffer contains a '<', then we might already have marked the beginning.\n      reader.mark(firstElementStart.length);\n    }\n    ch = reader.read();\n    var shifted = this.shiftAndAppend(buffer, ch);\n    header += shifted;\n  }\n\n  if (ch == -1) {\n    throw new Error(\"Invalid OFX: no root <OFX> element!\");\n  }\n  else {\n    var matches = OFX_2_PROCESSING_INSTRUCTION_PATTERN.exec(header);\n    if (matches) {\n      if (LOG.parse) {\n        console.log(\"Processing OFX 2 header...\");\n      }\n      this.processOFXv2Headers(matches[1]);\n      reader.reset();\n      this.parseV2FromFirstElement(reader.remainder());\n    }\n    else {\n      if (LOG.parse) {\n        console.log(\"Processing OFX 1 headers...\");\n      }\n      this.processOFXv1Headers(header);\n      reader.reset();\n      this.parseV1FromFirstElement(reader.remainder());\n    }\n  }\n};\n\n\n/**\n * The first characters of the first OFX element, '<', 'O', 'F', 'X'\n *\n * @return {} The first characters of the OFX element.\n */\nBaseOFXReader.prototype.getFirstElementStart = function() {\n  return [ '<', 'O', 'F', 'X' ];\n};\n\n\n/**\n * Whether the specified buffer contains the specified character.\n *\n * @param {} buffer The buffer.\n * @param {} c The character to search for.\n * @return {boolean} Whether the specified buffer contains the specified character.\n */\nBaseOFXReader.prototype.contains = function(buffer, /*char*/ c) {\n  for (var i=0; i<buffer.length; i++) {\n    var ch = buffer[i];\n    if (ch === c) {\n      return true;\n    }\n  }\n  return false;\n};\n\n\nBaseOFXReader.prototype.shiftAndAppend = function(buffer, /*char*/ c) {\n  var shifted = buffer[0];\n  for (var i = 0; i + 1 < buffer.length; i++) {\n    buffer[i] = buffer[i + 1];\n  }\n  buffer[buffer.length - 1] = c;\n  return shifted;\n};\n\n\n/**\n * Parse an OFX version 1 stream from the first OFX element (defined by the {@link BaseOFXReader#getFirstElementStart() first element characters}).\n *\n * @param {Reader} reader The reader.\n */\nBaseOFXReader.prototype.parseV1FromFirstElement = function(text) {\n  var strict = false;\n  var parser = sax.parser(strict);\n  var handler = new OFXV2ContentHandler(this.getContentHandler());\n  handler.install(parser);\n  parser.write(text);\n};\n\n\n/**\n * Parse an OFX version 2 stream from the first OFX element (defined by the {@link BaseOFXReader#getFirstElementStart() first element characters}).\n *\n * @param {string} text The text.\n */\nBaseOFXReader.prototype.parseV2FromFirstElement = function(text) {\n  var strict = true;\n  var parser = sax.parser(strict);\n  var handler = new OFXV2ContentHandler(this.getContentHandler());\n  handler.install(parser);\n  parser.write(text);\n};\n\n/**\n * Process the given characters as OFX version 1 headers.\n *\n * @param {String} chars The characters to process.\n */\nBaseOFXReader.prototype.processOFXv1Headers = function(chars) {\n  var lines = chars.split(/(\\n|\\r\\n)/);\n  for(var i=0; i<lines.length; i++) {\n    var line = lines[i];\n    var colonIndex = line.indexOf(':');\n    if (colonIndex >= 0) {\n      var name = line.substring(0, colonIndex);\n      var value = line.length > colonIndex ? line.substring(colonIndex + 1) : \"\";\n      this.contentHandler.onHeader(name, value);\n    }\n  }\n};\n\n/**\n * Process the given characters as OFX version 2 headers.\n *\n * @param {String} chars The characters to process.\n */\nBaseOFXReader.prototype.processOFXv2Headers = function(chars) {\n  var nameValuePairs = chars.split(\"\\\\s+\");\n  for (var nameValuePair in nameValuePairs) {\n    var equalsIndex = nameValuePair.indexOf('=');\n    if (equalsIndex >= 0) {\n      var name = nameValuePair.substring(0, equalsIndex);\n      var value = nameValuePair.length > equalsIndex ? nameValuePair.substring(equalsIndex + 1) : \"\";\n      value = value.replace('\"', ' ');\n      value = value.replace('\\'', ' ');\n      value = value.trim();\n      this.contentHandler.onHeader(name, value);\n    }\n  }\n};\n\n\n\n\nmodule.exports = BaseOFXReader;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../util/inherit\");\nvar OFXHandler = require(\"./OFXHandler\");\n\n/**\n * Default (no-op) implementation of an OFX handler.\n *\n * @class\n */\nfunction DefaultHandler () {\n}\n\ninherit(DefaultHandler, \"implements\", OFXHandler);\n\n\n\n\nDefaultHandler.prototype.onHeader = function(/*name, value*/) {\n};\n\n\nDefaultHandler.prototype.onElement = function(/*name, value*/) {\n};\n\n\nDefaultHandler.prototype.startAggregate = function(/*aggregateName*/) {\n};\n\n\nDefaultHandler.prototype.endAggregate = function(/*aggregateName*/) {\n};\n\n\n\n\nmodule.exports = DefaultHandler;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../util/inherit\");\n\nvar Status = require(\"../domain/data/common/Status\");\nvar StatusCode = require(\"../domain/data/common/StatusCode\");\nvar UnknownStatusCode = require(\"../domain/data/common/UnknownStatusCode\");\nvar StringConversion = require(\"./StringConversion\");\n\n/**\n * Utility class for conversion to/from OFX strings.\n *\n * @class\n */\nfunction DefaultStringConversion () {\n}\n\n\ninherit(DefaultStringConversion, \"implements\", StringConversion);\n\n\nDefaultStringConversion.prototype.toString = function(/*Object*/ value) {\n  if (!value) {\n    return null;\n  }\n  else if (value instanceof Boolean) {\n    return value ? \"Y\" : \"N\";\n  }\n  else if (value instanceof Date) {\n    return this.formatDate(value);\n  }\n  else if (typeof value === \"number\") {\n    return value + \"\";\n  }\n  else {\n    return value;\n  }\n};\n\n\nDefaultStringConversion.prototype.fromString = function(/*Class<E>*/ clazz, /*String*/ value) {\n  if (!value) {\n    return null;\n  }\n  else if (typeof clazz === \"object\") {\n    // enum\n    console.assert(value in clazz);\n    if(value in clazz) {\n      return clazz[value];\n    }\n  }\n  else if (inherit.isAssignableFrom(StatusCode, clazz)) {\n    var code = value;\n    var statusCode = Status.KnownCode.fromCode(code);\n    if (!statusCode) {\n      statusCode = new UnknownStatusCode(code, \"Unknown status code.\", Status.Severity.ERROR);\n    }\n    \n    return statusCode;\n  }\n  else if (inherit.isAssignableFrom(Boolean, clazz)) {\n    return \"Y\" === value.toUpperCase();\n  }\n  else if (inherit.isAssignableFrom(Date, clazz)) {\n    return this.parseDate(value);\n  }\n  return value;\n};\n\n\n/**\n * Parses a date according to OFX.\n *\n * @param {String} value The value of the date.\n * @return {Date} The date value.\n */\nDefaultStringConversion.prototype.parseDate = function(value) {\n  var year = parseInt(value.substr(0, 4));\n  var month = parseInt(value.substr(4, 2)) - 1; // javascript month numbers are zero-based\n  var day = parseInt(value.substr(6, 2));\n  var hour = parseInt(value.substr(8, 2));\n  var minute = parseInt(value.substr(10, 2));\n  var second = parseInt(value.substr(12, 2));\n  var milli = parseInt(value.substr(15, 3));\n\n  // add timezone offset\n  var bracket = value.indexOf(\"[\");\n  if(bracket != -1) {\n    var close = value.indexOf(\":\");\n    if(close === -1) {\n      close = value.indexOf(\"]\");\n    }\n    var gmtOffset = value.substring(bracket+1, close);\n    hour -= 1.0 * gmtOffset;\n  }\n  \n  // create date as UTC\n  return new Date(Date.UTC(year, month, day, hour, minute, second, milli));\n};\n\n\n/**\n * Pad a number with leading zeroes until it is of <tt>size</tt> length\n *\n * @param {int} num number\n * @param {int} size number of digits in final number\n * @return {string} padded number\n */\nfunction pad(num, size) {\n  var s = num+\"\";\n  while (s.length < size) {\n    s = \"0\" + s;\n  }\n  return s;\n}\n\n\n/**\n * Format the date according to the OFX spec.\n *\n * @param {Date} date The date.\n * @return {String} The date format.\n */\nDefaultStringConversion.prototype.formatDate = function(date) {\n  return pad(date.getFullYear(), 4) +\n    pad(date.getMonth() + 1, 2) +\n    pad(date.getDay(), 2) +\n    pad(date.getHours(), 2) +\n    pad(date.getMinutes(), 2) +\n    pad(date.getSeconds(), 2) +\n    \".\" +\n    date.getMilliseconds() +\n    \"[\" +\n    (date.getTimezoneOffset() / 60) +\n    \"]\";\n};\n\n\n\n\nmodule.exports = DefaultStringConversion;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n\n/**\n * An OFX aggregate is just an aggregate of name-value pairs that identify the elements and element values of the aggregate.\n * The element values can strings or another (sub)aggregate.  The implementation of a\n *\n * @class\n */\nfunction OFXAggregate() {\n}\n\n/**\n * The name of the OFX aggregate.\n *\n * @return {String} The name of the aggregate.\n */\nOFXAggregate.prototype.getName = function() { throw new Error(\"not implemented\"); };\n\n/**\n * Whether this aggregate contains the specified element.\n *\n * @param {String} elementName The name of the element.\n * @return {boolean} Whether this aggregate contains the specified element.\n */\nOFXAggregate.prototype.containsElement = function(/*elementName*/) { throw new Error(\"not implemented\"); };\n\n/**\n * The element names of this aggregate.\n *\n * @return {String[]} The element names of this aggregate.\n */\nOFXAggregate.prototype.elementNames = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The value of the element.  This will be either a string or another OFXAggregate.\n *\n * @param {String} elementName The name of the element.\n * @return {Object} The value of the specified element.\n */\nOFXAggregate.prototype.getElementValue = function(/*elementName*/) { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = OFXAggregate;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Handler for events during OFX parsing.\n *\n * @class\n */\nfunction OFXHandler() {\n}\n\n/**\n * Handler an OFX header.\n *\n * @param {String} name The name of the header.\n * @param {String} value The value of the header.\n */\nOFXHandler.prototype.onHeader = function(/*name, value*/) { throw new Error(\"not implemented\"); };\n\n/**\n * Handle a new OFX element.\n *\n * @param {String} name The name of the element.\n * @param {String} value The value of the element.\n */\nOFXHandler.prototype.onElement = function(/*name, value*/) { throw new Error(\"not implemented\"); };\n\n/**\n * Handle the start of a new OFX aggregate.\n *\n * @param {String} aggregateName The name of the aggregate.\n */\nOFXHandler.prototype.startAggregate = function(/*aggregateName*/) { throw new Error(\"not implemented\"); };\n\n/**\n * Handle the end of an OFX aggregate.\n *\n * @param {String} aggregateName The aggregate name.\n */\nOFXHandler.prototype.endAggregate = function(/*aggregateName*/) { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = OFXHandler;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * An event during OFX parsing.\n *\n * @class\n */\nfunction OFXParseEvent (/*Type*/ eventType, /*String*/ eventValue) {\n\n  /**\n   * @name OFXParseEvent#eventType\n   * @type Type\n   * @access private\n   */\n  this.eventType = eventType;\n\n  /**\n   * @name OFXParseEvent#eventValue\n   * @type String\n   * @access private\n   */\n  this.eventValue = eventValue;\n}\n\n\n\n\n\nOFXParseEvent.Type = {\n\n  CHARACTERS: 0,\n\n  ELEMENT: 1\n};\n\n\nOFXParseEvent.prototype.getEventType = function() {\n  return this.eventType;\n};\n\n\nOFXParseEvent.prototype.getEventValue = function() {\n  return this.eventValue;\n};\n\n\n\n\nmodule.exports = OFXParseEvent;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Basic interface for reading an OFX document.\n *\n * @class\n */\nfunction OFXReader() {\n}\n\n/**\n * Set the handler for this OFX reader.\n *\n * @param {OFXHandler} handler The handler.\n */\nOFXReader.prototype.setContentHandler = function(/*handler*/) { throw new Error(\"not implemented\"); };\n\n/**\n * Parse a stream.\n *\n * @param {string} text The stream or reader to parse.\n */\nOFXReader.prototype.parse = function(/*text*/) { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = OFXReader;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Stack = require(\"../util/stack\");\nvar OFXParseEvent = require(\"./OFXParseEvent\");\nvar LOG = require(\"../util/log\");\n\n\n/**\n * @class\n * @param {sax.parser} parser\n * @param {OFXHandler} ofxHandler\n */\nfunction OFXV2ContentHandler(ofxHandler) {\n  if (!ofxHandler) {\n    throw new Error(\"An OFX handler must be supplied.\");\n  }\n  \n  /**\n   * @name OFXV2ContentHandler#eventStack\n   * @type Stack<OFXParseEvent>\n   * @access private\n   */\n  this.eventStack = new Stack();\n\n  /**\n   * @name OFXV2ContentHandler#ofxHandler\n   * @type OFXHandler\n   * @access private\n   */\n  this.ofxHandler = ofxHandler;\n\n  /**\n   * @name OFXV2ContentHandler#startedEvents\n   * @type OFXParseEvent[]\n   * @access private\n   */\n  this.startedEvents = [];\n}\n\n\n\nOFXV2ContentHandler.prototype.install = function(parser) {\n  var self = this;\n  parser.ontext = function(value) { self.ontext(value); };\n  parser.onopentag = function(params) { self.onopentag(params); };\n  parser.onclosetag = function(name) { self.onclosetag(name); };\n};\n\n\n\n// @Override\nOFXV2ContentHandler.prototype.onopentag = function(params) {\n  var qName = params.name;\n\n  if (LOG.parse) {\n    console.log(\"START ELEMENT: \" + qName);\n  }\n\n  if ((!this.eventStack.isEmpty()) && (this.eventStack.peek().getEventType() == OFXParseEvent.Type.ELEMENT) && (!this.isAlreadyStarted(this.eventStack.peek()))) {\n    var eventValue = this.eventStack.peek().getEventValue();\n    if (LOG.parse) {\n      console.log(\"Element \" + qName + \" is starting aggregate \" + eventValue);\n    }\n\n    //the last element started was not ended; we are assuming we've started a new aggregate.\n    this.ofxHandler.startAggregate(eventValue);\n    this.startedEvents.push(this.eventStack.peek());\n  }\n\n  this.eventStack.push(new OFXParseEvent(OFXParseEvent.Type.ELEMENT, qName));\n};\n\n\n/**\n * Whether the specified element aggregate has already been started.\n *\n * @param {OFXParseEvent} event The event containing the start.\n * @return {boolean} Whether the specified element aggregate has already been started.\n */\nOFXV2ContentHandler.prototype.isAlreadyStarted = function(event) {\n  return this.startedEvents.indexOf(event) != -1;\n};\n\n\n// @Override\nOFXV2ContentHandler.prototype.onclosetag = function(qName) {\n  if (LOG.parse) {\n    console.log(\"END ELEMENT: \" + qName);\n  }\n\n  var eventToFinish = this.eventStack.pop();\n  if (eventToFinish.getEventType() == OFXParseEvent.Type.CHARACTERS) {\n    var chars = eventToFinish.getEventValue().trim();\n\n    if (this.eventStack.isEmpty()) {\n      throw new Error(\"Illegal character data outside main OFX root element: \\\"\" + chars + \"\\\".\");\n    }\n    else {\n      var elementEvent = this.eventStack.pop();\n      if (elementEvent.getEventType() != OFXParseEvent.Type.ELEMENT) {\n        throw new Error(\"Illegal OFX event before characters \\\"\" + chars + \"\\\" (\" + elementEvent.getEventType() + \")!\");\n      }\n      else {\n        var value = elementEvent.getEventValue();\n        if (LOG.parse) {\n          console.log(\"Element \" + value + \" processed with value \" + chars);\n        }\n        this.ofxHandler.onElement(value, chars);\n      }\n    }\n  }\n  else if (eventToFinish.getEventType() == OFXParseEvent.Type.ELEMENT) {\n    //we're ending an aggregate (no character data on the stack).\n    if (qName === eventToFinish.getEventValue()) {\n      //the last element on the stack is ours; we're ending an OFX aggregate.\n      /*jshint -W004*/\n      var value = eventToFinish.getEventValue();\n      if (LOG.parse) {\n        console.log(\"Ending aggregate \" + value);\n      }\n      this.ofxHandler.endAggregate(value);\n      var i = this.startedEvents.indexOf(eventToFinish);\n      console.assert(i !== -1);\n      if (i > -1) {\n        this.startedEvents.splice(i, 1);\n      }\n    }\n    else {\n      throw new Error(\"Unexpected end tag: \" + eventToFinish.getEventValue());\n    }\n  }\n  else {\n    throw new Error(\"Illegal OFX event: \" + eventToFinish.getEventType());\n  }\n};\n\n\n// @Override\nOFXV2ContentHandler.prototype.ontext = function(value) {\n  if (value.trim().length > 0) {\n    var event;\n    if ((!this.eventStack.isEmpty()) && (this.eventStack.peek().getEventType() == OFXParseEvent.Type.CHARACTERS)) {\n      //append the characters...\n      event = new OFXParseEvent(OFXParseEvent.Type.CHARACTERS, this.eventStack.pop().getEventValue() + value);\n    }\n    else {\n      event = new OFXParseEvent(OFXParseEvent.Type.CHARACTERS, value);\n    }\n    this.eventStack.push(event);\n  }\n};\n\n\n\n\nmodule.exports = OFXV2ContentHandler;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * @class\n */\nfunction OFXWriter() {\n}\n\n/**\n * Write the specified headers.\n *\n * @param {} headers The headers to be written.\n */\nOFXWriter.prototype.writeHeaders = function(/*headers*/) { throw new Error(\"not implemented\"); };\n\n/**\n * Write the start of a new aggregate.\n *\n * @param {String} aggregateName The aggregate name.\n */\nOFXWriter.prototype.writeStartAggregate = function(/*aggregateName*/) { throw new Error(\"not implemented\"); };\n\n/**\n * Write an element to the current aggregate.\n *\n * @param {String} name The name of the element.\n * @param {String} value The value of the element.\n */\nOFXWriter.prototype.writeElement = function(/*name, value*/) { throw new Error(\"not implemented\"); };\n\n/**\n * Write the end of an aggregate.\n *\n * @param {String} aggregateName The aggregate name.\n * @throws IllegalArgumentException If the specified aggregate hasn't been started.\n */\nOFXWriter.prototype.writeEndAggregate = function(/*aggregateName*/) { throw new Error(\"not implemented\"); };\n\n/**\n * Close this OFX writer.\n */\nOFXWriter.prototype.close = function() { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = OFXWriter;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Interface for converting to/from OFX strings.\n *\n * @class\n */\nfunction StringConversion() {\n}\n\n/**\n * Convert the specified object to a string.\n *\n * @param {Object} value The value to convert to a string.\n * @return {String} The string.\n */\nStringConversion.prototype.toString = function(/*value*/) { throw new Error(\"not implemented\"); };\n\n/**\n * Convert the specified value to an object of the specified type.\n *\n * @param {Class<E>} clazz The class.\n * @param {String} value The value.\n * @return {E} The converted value.\n * @throws OFXSyntaxException If there was something wrong with the syntax of the string.\n */\nStringConversion.prototype.fromString = function(/*clazz, value*/) { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = StringConversion;\n","\"use strict\";\n\nmodule.exports = {\n  AggregateAttribute: require(\"./AggregateAttribute\"),\n  AggregateInfo: require(\"./AggregateInfo\"),\n  AggregateIntrospector: require(\"./AggregateIntrospector\"),\n  AggregateMarshaller: require(\"./AggregateMarshaller\"),\n  AggregateStackContentHandler: require(\"./AggregateStackContentHandler\"),\n  AggregateUnmarshaller: require(\"./AggregateUnmarshaller\"),\n  BaseOFXReader: require(\"./BaseOFXReader\"),\n  DefaultHandler: require(\"./DefaultHandler\"),\n  DefaultStringConversion: require(\"./DefaultStringConversion\"),\n  OFXAggregate: require(\"./OFXAggregate\"),\n  OFXHandler: require(\"./OFXHandler\"),\n  OFXParseEvent: require(\"./OFXParseEvent\"),\n  OFXReader: require(\"./OFXReader\"),\n  OFXV2ContentHandler: require(\"./OFXV2ContentHandler\"),\n  OFXWriter: require(\"./OFXWriter\"),\n  StringConversion: require(\"./StringConversion\"),\n  \n  v1: {\n    OFXV1Writer: require(\"./v1/OFXV1Writer\"),\n  },\n  v2: {\n    OFXV2Writer: require(\"./v2/OFXV2Writer\"),\n  },\n};\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../util/inherit\");\nvar OutputStreamWriter = require(\"../../util/OutputStreamWriter\");\nvar OFXWriter = require(\"../OFXWriter\");\n\n/**\n * OFX writer to SGML, suitable for OFX versions < 2.0.\n *\n * @class\n */\nfunction OFXV1Writer (/*Uint8Array*/ out) {\n\n  /**\n   * @name OFXV1Writer#LINE_SEPARATOR\n   * @type String\n   */\n  this.LINE_SEPARATOR = \"\\r\\n\";\n\n  /**\n   * @name OFXV1Writer#headersWritten\n   * @type boolean\n   * @access protected\n   */\n  this.headersWritten = false;\n\n  /**\n   * @name OFXV1Writer#writer\n   * @type OutputStreamWriter\n   * @access protected\n   */\n  this.writer = this.newWriter(out);\n\n  /**\n   * @name OFXV1Writer#writeAttributesOnNewLine\n   * @type boolean\n   * @access private\n   */\n  this.writeAttributesOnNewLine = false;\n}\n\ninherit(OFXV1Writer, \"implements\", OFXWriter);\n\n\n\nOFXV1Writer.prototype.newWriter = function(/*OutputStream*/ out) {\n  return new OutputStreamWriter(out, \"ISO-8859-1\");\n};\n\n\nOFXV1Writer.prototype.writeHeaders = function(/*object*/ headers) {\n  if (this.headersWritten) {\n    throw new Error(\"Headers have already been written!\");\n  }\n\n  //write out the 1.0 headers\n  this.println(\"OFXHEADER:100\");\n  this.println(\"DATA:OFXSGML\");\n  this.println(\"VERSION:102\");\n\n  this.print(\"SECURITY:\");\n  var security = headers[\"SECURITY\"];\n  if (!security) {\n    security = \"NONE\";\n  }\n  this.println(security);\n  this.println(\"ENCODING:USASCII\"); //too many ofx v1 servers don't read unicode...\n  this.println(\"CHARSET:1252\"); //windows-compatible.\n  this.println(\"COMPRESSION:NONE\");\n  this.print(\"OLDFILEUID:\");\n  var olduid = headers[\"OLDFILEUID\"];\n  if (!olduid) {\n    olduid = \"NONE\";\n  }\n  this.println(olduid);\n  this.print(\"NEWFILEUID:\");\n  var uid = headers[\"NEWFILEUID\"];\n  if (!uid) {\n    uid = \"NONE\";\n  }\n  this.println(uid);\n  this.println();\n\n  this.headersWritten = true;\n};\n\n\nOFXV1Writer.prototype.writeStartAggregate = function(/*String*/ aggregateName) {\n  this.print('<');\n  this.print(aggregateName);\n  this.print('>');\n  if (this.isWriteAttributesOnNewLine()) {\n    this.println();\n  }\n};\n\n\nOFXV1Writer.prototype.writeElement = function(/*String*/ name, /*String*/ value) {\n  if (!value) {\n    throw new Error(\"Illegal element value for element '\" + name + \"' (value must not be null or empty).\");\n  }\n\n  //todo: optimize performance of the character escaping\n  if (value.indexOf('&') >= 0) {\n    value = value.replace(\"&\", \"&amp;\");\n  }\n\n  if (value.indexOf('<') >= 0) {\n    value = value.replace(\"<\", \"&lt;\");\n  }\n\n  if (value.indexOf('>') >= 0) {\n    value = value.replace(\">\", \"&gt;\");\n  }\n  \n  this.print('<');\n  this.print(name);\n  this.print('>');\n  this.print(value);\n  if (this.isWriteAttributesOnNewLine()) {\n    this.println();\n  }\n};\n\n\nOFXV1Writer.prototype.writeEndAggregate = function(/*String*/ aggregateName) {\n  this.print(\"</\");\n  this.print(aggregateName);\n  this.print('>');\n  if (this.isWriteAttributesOnNewLine()) {\n    this.println();\n  }\n};\n\n\nOFXV1Writer.prototype.isWriteAttributesOnNewLine = function() {\n  return this.writeAttributesOnNewLine;\n};\n\n\nOFXV1Writer.prototype.setWriteAttributesOnNewLine = function(/*boolean*/ writeAttributesOnNewLine) {\n  this.writeAttributesOnNewLine = writeAttributesOnNewLine;\n};\n\n\nOFXV1Writer.prototype.close = function() {\n  this.flush();\n  this.writer.close();\n};\n\n\nOFXV1Writer.prototype.flush = function() {\n  this.writer.flush();\n};\n\n\nOFXV1Writer.prototype.println = function(/*String*/ line) {\n  if(line !== undefined && line !== null) {\n    this.print(line);\n  }\n  this.writer.write(this.LINE_SEPARATOR);\n};\n\n\nOFXV1Writer.prototype.print = function(/*String*/ line) {\n  this.writer.write(!line ? \"null\" : line);\n};\n\n\n\nmodule.exports = OFXV1Writer;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../util/inherit\");\n\nvar OFXV1Writer = require(\"../v1/OFXV1Writer\");\nvar OutputStreamWriter = require(\"../../util/OutputStreamWriter\");\n\n/**\n * OFX writer to XML, suitable for OFX version 2.0.\n *\n * @class\n */\nfunction OFXV2Writer () {\n  OFXV1Writer.call(this);\n}\n\ninherit(OFXV2Writer, \"extends\", OFXV1Writer);\n\n\n\n// @Override\nOFXV2Writer.prototype.newWriter = function(/*OutputStream*/ out) {\n  return new OutputStreamWriter(out, \"UTF-8\");\n};\n\n\nOFXV2Writer.prototype.writeHeaders = function(/*object*/ headers) {\n  if (this.headersWritten) {\n    throw new Error(\"Headers have already been written!\");\n  }\n\n  //write out the XML PI\n  this.print(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\");\n  var security = headers.get(\"SECURITY\");\n  if (!security) {\n    security = \"NONE\";\n  }\n  var olduid = headers.get(\"OLDFILEUID\");\n  if (!olduid) {\n    olduid = \"NONE\";\n  }\n  // println(olduid);\n  var uid = headers.get(\"NEWFILEUID\");\n  if (!uid) {\n    uid = \"NONE\";\n  }\n\n  this.print(\"<?OFX OFXHEADER=\\\"200\\\" VERSION=\\\"202\\\" SECURITY=\\\"\" + security + \"\\\" OLDFILEUID=\\\"\" + olduid + \"\\\" NEWFILEUID=\\\"\" + uid + \"\\\"?>\");\n  this.headersWritten = true;\n};\n\n\nOFXV2Writer.prototype.writeElement = function(/*String*/ name, /*String*/ value) {\n  OFXV1Writer.prototype.writeElement.call(this, name, value);\n  this.print(\"</\");\n  this.print(name);\n  this.print('>');\n};\n\n\n// @Override\nOFXV2Writer.prototype.isWriteAttributesOnNewLine = function() {\n  return false;\n};\n\n\n\n\nmodule.exports = OFXV2Writer;\n","/*\n * Copyright 2008 Web Cohesion\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar AggregateIntrospector = require(\"../io/AggregateIntrospector\");\n\nvar Aggregate = {};\n\nAggregate.add = function(name, clazz) {\n  AggregateIntrospector.addAggregate(name, clazz);\n};\n\nmodule.exports = Aggregate;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar AggregateIntrospector = require(\"../io/AggregateIntrospector\");\n\nvar ChildAggregate = {};\n\nChildAggregate.add = function(clazz, options) {\n  options.name = options.name || \"##not_specified##\";\n  AggregateIntrospector.addChildAggregate(clazz, options);\n};\n\nmodule.exports = ChildAggregate;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar AggregateIntrospector = require(\"../io/AggregateIntrospector\");\n\nvar Element = {};\n\nElement.add = function(clazz, options) {\n  AggregateIntrospector.addElement(clazz, options);\n};\n\nmodule.exports = Element;\n","/*\n * Copyright 2008 Web Cohesion\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar AggregateIntrospector = require(\"../io/AggregateIntrospector\");\n\nvar Header = {};\n\nHeader.add = function(clazz, options) {\n  AggregateIntrospector.addHeader(clazz, options);\n};\n\nmodule.exports = Header;\n","\"use strict\";\n\nmodule.exports = {\n  Aggregate: require('./Aggregate'),\n  ChildAggregate: require('./ChildAggregate'),\n  Element: require('./Element'),\n  Header: require('./Header'),\n};\n","\"use strict\";\n\nfunction OutputStreamWriter(/*array*/ out, /*string*/ encoding) {\n  this.out = out;\n  this.encoding = encoding;\n}\n\n\nOutputStreamWriter.prototype.flush = function() {\n};\n\n\nOutputStreamWriter.prototype.close = function() {\n};\n\n\nOutputStreamWriter.prototype.write = function(data) {\n  Array.prototype.push.apply(this.out, data.split(''));\n};\n\n\n\nmodule.exports = OutputStreamWriter;\n","\"use strict\";\n\nfunction StringReader(text) {\n  this._text = text;\n  this._cursor = 0;\n  this._mark = 0;\n}\n\nStringReader.prototype.read = function() {\n  if(this._cursor >= this._text.length) {\n    return -1;\n  } else {\n    if(arguments.length === 0) {\n      return this.readChar();\n    } else {\n      var cbuf = arguments[0];\n      var offset = arguments[1] || 0;\n      var length = arguments[2] || cbuf.length;\n      length = Math.min(length, this._text.length - this._cursor);\n      for(var i=0; i<length; i++) {\n        cbuf[offset + i] = this.readChar();\n      }\n      return length;\n    }\n  }\n};\n\n\nStringReader.prototype.readChar = function() {\n  console.assert(this._cursor < this._text.length);\n  var ch = this._text[this._cursor];\n  this._cursor++;\n  return ch;\n};\n\n\nStringReader.prototype.close = function() {\n  this._text = null;\n  this._cursor = null;\n  this._mark = null;\n};\n\n\nStringReader.prototype.mark = function(/*readLimit*/) {\n  this._mark = this._cursor;\n};\n\n\nStringReader.prototype.reset = function() {\n  this._cursor = this._mark;\n};\n\n\nStringReader.prototype.remainder = function() {\n  return this._text.substring(this._cursor);\n};\n\n\nmodule.exports = StringReader;\n","\"use strict\";\n\nmodule.exports = {\n  inherit: require(\"./inherit\"),\n  log: require(\"./log\"),\n  OutputStreamWriter: require(\"./OutputStreamWriter\"),\n  stack: require(\"./stack\"),\n  StringReader: require(\"./StringReader\"),\n};\n","\"use strict\";\n\nvar inherits = require(\"inherits\");\n\n\nvar AggregateIntrospector = require(\"../io/AggregateIntrospector\");\n\nfunction inherit(child, type, parent) {\n  switch(type) {\n    case 'extends':\n      inherits(child, parent);\n//      child.prototype = Object.create(parent);\n//      child.prototype.constructor = child;\n      \n      AggregateIntrospector.extend(child, parent);\n      break;\n      \n    case 'implements':\n      break;\n      \n    default:\n      throw new Error(\"unknown inheritance type\");\n  }\n}\n\n\ninherit.isAssignableFrom = function(entryType, assignableTo) {\n  return (assignableTo === entryType) ||\n    ((typeof entryType === \"function\") && (assignableTo.prototype instanceof entryType));\n};\n\n\nmodule.exports = inherit;\n","\n\nmodule.exports = {\n  /**\n   * recoverable but possibly problematic messages\n   */\n  warning: true,\n  \n  /**\n   * informational status messages\n   */\n  info: false,\n  \n  /**\n   * full text of messages sent & received\n   */\n  network: false,\n  \n  /**\n   * detailed ofx parsing status messages\n   */\n  parse: false,\n};\n","\"use strict\";\n\nfunction Stack() {\n  this.values = [];\n}\n\n\nStack.prototype.push = function() {\n  return Array.prototype.push.apply(this.values, arguments);\n};\n\n\nStack.prototype.pop = function() {\n  return Array.prototype.pop.apply(this.values, arguments);\n};\n\n\nStack.prototype.peek = function() {\n  if(this.values.length === 0) {\n    return null;\n  } else {\n    return this.values[this.values.length - 1];\n  }\n};\n\n\nStack.prototype.isEmpty = function() {\n  return this.values.length === 0;\n};\n\nmodule.exports = Stack;\n"]}