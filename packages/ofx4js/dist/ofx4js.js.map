{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/index.js","node_modules/uuid/rng-browser.js","node_modules/uuid/uuid.js","src/client/AccountStatement.js","src/client/BankAccount.js","src/client/CreditCardAccount.js","src/client/FinancialInstitution.js","src/client/FinancialInstitutionAccount.js","src/client/FinancialInstitutionData.js","src/client/FinancialInstitutionDataStore.js","src/client/FinancialInstitutionProfile.js","src/client/FinancialInstitutionService.js","src/client/InvestmentAccount.js","src/client/context/DefaultApplicationContext.js","src/client/context/OFXApplicationContext.js","src/client/context/OFXApplicationContextHolder.js","src/client/context/index.js","src/client/impl/BankingAccountImpl.js","src/client/impl/BaseAccountImpl.js","src/client/impl/BaseFinancialInstitutionData.js","src/client/impl/CreditCardAccountImpl.js","src/client/impl/FIDataList.js","src/client/impl/FinancialInstitutionImpl.js","src/client/impl/FinancialInstitutionServiceImpl.js","src/client/impl/InvestmentAccountImpl.js","src/client/impl/LocalResourceFIDataStore.js","src/client/impl/OFXHomeFIDataStore.js","src/client/impl/index.js","src/client/index.js","src/client/main/index.js","src/client/net/OFXConnection.js","src/client/net/OFXV1Connection.js","src/client/net/OFXV2Connection.js","src/client/net/index.js","src/domain/data/ApplicationSecurity.js","src/domain/data/MessageSetProfile.js","src/domain/data/MessageSetType.js","src/domain/data/RequestEnvelope.js","src/domain/data/RequestMessage.js","src/domain/data/RequestMessageSet.js","src/domain/data/ResponseEnvelope.js","src/domain/data/ResponseMessage.js","src/domain/data/ResponseMessageSet.js","src/domain/data/SignonProfile.js","src/domain/data/TransactionWrappedRequestMessage.js","src/domain/data/TransactionWrappedResponseMessage.js","src/domain/data/banking/AccountType.js","src/domain/data/banking/BankAccountDetails.js","src/domain/data/banking/BankAccountInfo.js","src/domain/data/banking/BankStatementRequest.js","src/domain/data/banking/BankStatementRequestTransaction.js","src/domain/data/banking/BankStatementResponse.js","src/domain/data/banking/BankStatementResponseTransaction.js","src/domain/data/banking/BankingRequestMessageSet.js","src/domain/data/banking/BankingResponseMessageSet.js","src/domain/data/banking/index.js","src/domain/data/common/AccountDetails.js","src/domain/data/common/AccountInfo.js","src/domain/data/common/AccountStatus.js","src/domain/data/common/BalanceInfo.js","src/domain/data/common/BalanceRecord.js","src/domain/data/common/CorrectionAction.js","src/domain/data/common/Currency.js","src/domain/data/common/Payee.js","src/domain/data/common/ProcessorDayOff.js","src/domain/data/common/StatementRange.js","src/domain/data/common/StatementRequest.js","src/domain/data/common/StatementResponse.js","src/domain/data/common/Status.js","src/domain/data/common/StatusCode.js","src/domain/data/common/StatusHolder.js","src/domain/data/common/T1099Request.js","src/domain/data/common/T1099Response.js","src/domain/data/common/Transaction.js","src/domain/data/common/TransactionList.js","src/domain/data/common/TransactionType.js","src/domain/data/common/TransferInfo.js","src/domain/data/common/TransferStatus.js","src/domain/data/common/TransferStatusEvent.js","src/domain/data/common/UnknownStatusCode.js","src/domain/data/common/index.js","src/domain/data/creditcard/CreditCardAccountDetails.js","src/domain/data/creditcard/CreditCardAccountInfo.js","src/domain/data/creditcard/CreditCardRequestMessageSet.js","src/domain/data/creditcard/CreditCardResponseMessageSet.js","src/domain/data/creditcard/CreditCardStatementRequest.js","src/domain/data/creditcard/CreditCardStatementRequestTransaction.js","src/domain/data/creditcard/CreditCardStatementResponse.js","src/domain/data/creditcard/CreditCardStatementResponseTransaction.js","src/domain/data/creditcard/index.js","src/domain/data/index.js","src/domain/data/investment/accounts/AccountType.js","src/domain/data/investment/accounts/ActivationStatus.js","src/domain/data/investment/accounts/InvestmentAccountDetails.js","src/domain/data/investment/accounts/InvestmentAccountInfo.js","src/domain/data/investment/accounts/SubAccountType.js","src/domain/data/investment/accounts/UnitedStatesAccountType.js","src/domain/data/investment/accounts/index.js","src/domain/data/investment/index.js","src/domain/data/investment/positions/BasePosition.js","src/domain/data/investment/positions/DebtPosition.js","src/domain/data/investment/positions/Inv401KSource.js","src/domain/data/investment/positions/InvestmentPosition.js","src/domain/data/investment/positions/InvestmentPositionList.js","src/domain/data/investment/positions/MutualFundPosition.js","src/domain/data/investment/positions/OptionsPosition.js","src/domain/data/investment/positions/OtherPosition.js","src/domain/data/investment/positions/PositionType.js","src/domain/data/investment/positions/ShortOptionSecurity.js","src/domain/data/investment/positions/StockPosition.js","src/domain/data/investment/positions/index.js","src/domain/data/investment/statements/BalanceList.js","src/domain/data/investment/statements/IncludePosition.js","src/domain/data/investment/statements/InvestmentBalance.js","src/domain/data/investment/statements/InvestmentStatementRequest.js","src/domain/data/investment/statements/InvestmentStatementRequestMessageSet.js","src/domain/data/investment/statements/InvestmentStatementRequestTransaction.js","src/domain/data/investment/statements/InvestmentStatementResponse.js","src/domain/data/investment/statements/InvestmentStatementResponseMessageSet.js","src/domain/data/investment/statements/InvestmentStatementResponseTransaction.js","src/domain/data/investment/statements/index.js","src/domain/data/investment/transactions/BaseBuyInvestmentTransaction.js","src/domain/data/investment/transactions/BaseInvestmentTransaction.js","src/domain/data/investment/transactions/BaseOtherInvestmentTransaction.js","src/domain/data/investment/transactions/BaseSellInvestmentTransaction.js","src/domain/data/investment/transactions/BuyDebtTransaction.js","src/domain/data/investment/transactions/BuyInvestmentTransaction.js","src/domain/data/investment/transactions/BuyMutualFundTransaction.js","src/domain/data/investment/transactions/BuyOptionTransaction.js","src/domain/data/investment/transactions/BuyOtherTransaction.js","src/domain/data/investment/transactions/BuyStockTransaction.js","src/domain/data/investment/transactions/BuyType.js","src/domain/data/investment/transactions/CloseOptionAction.js","src/domain/data/investment/transactions/CloseOptionTransaction.js","src/domain/data/investment/transactions/IncomeTransaction.js","src/domain/data/investment/transactions/IncomeType.js","src/domain/data/investment/transactions/InvestmentBankTransaction.js","src/domain/data/investment/transactions/InvestmentExpenseTransaction.js","src/domain/data/investment/transactions/InvestmentTransaction.js","src/domain/data/investment/transactions/InvestmentTransactionList.js","src/domain/data/investment/transactions/JournalFundTransaction.js","src/domain/data/investment/transactions/JournalSecurityTransaction.js","src/domain/data/investment/transactions/MarginInterestTransaction.js","src/domain/data/investment/transactions/OptionBuyType.js","src/domain/data/investment/transactions/OptionSellType.js","src/domain/data/investment/transactions/OriginalCurrency.js","src/domain/data/investment/transactions/ReinvestIncomeTransaction.js","src/domain/data/investment/transactions/RelatedOptionType.js","src/domain/data/investment/transactions/ReturnOfCapitalTransaction.js","src/domain/data/investment/transactions/SellDebtReason.js","src/domain/data/investment/transactions/SellDebtTransaction.js","src/domain/data/investment/transactions/SellInvestmentTransaction.js","src/domain/data/investment/transactions/SellMutualFundTransaction.js","src/domain/data/investment/transactions/SellOptionTransaction.js","src/domain/data/investment/transactions/SellOtherTransaction.js","src/domain/data/investment/transactions/SellStockTransaction.js","src/domain/data/investment/transactions/SellType.js","src/domain/data/investment/transactions/SplitTransaction.js","src/domain/data/investment/transactions/TransactionType.js","src/domain/data/investment/transactions/TransactionWithSecurity.js","src/domain/data/investment/transactions/TransferAction.js","src/domain/data/investment/transactions/TransferInvestmentTransaction.js","src/domain/data/investment/transactions/index.js","src/domain/data/profile/AbstractMessageSetInfo.js","src/domain/data/profile/CharacterType.js","src/domain/data/profile/ClientRoutingCapability.js","src/domain/data/profile/CoreMessageSetInfo.js","src/domain/data/profile/MessageSetInfoList.js","src/domain/data/profile/ProfileRequest.js","src/domain/data/profile/ProfileRequestMessageSet.js","src/domain/data/profile/ProfileRequestTransaction.js","src/domain/data/profile/ProfileResponse.js","src/domain/data/profile/ProfileResponseMessageSet.js","src/domain/data/profile/ProfileResponseTransaction.js","src/domain/data/profile/SignonInfo.js","src/domain/data/profile/SignonInfoList.js","src/domain/data/profile/SynchronizationCapability.js","src/domain/data/profile/VersionSpecificMessageSetInfo.js","src/domain/data/profile/index.js","src/domain/data/profile/info/BankingMessageSetInfo.js","src/domain/data/profile/info/BankingV1MessageSetInfo.js","src/domain/data/profile/info/BillpayMessageSetInfo.js","src/domain/data/profile/info/BillpayV1MessageSetInfo.js","src/domain/data/profile/info/CreditCardMessageSetInfo.js","src/domain/data/profile/info/CreditCardV1MessageSetInfo.js","src/domain/data/profile/info/EmailMessageSetInfo.js","src/domain/data/profile/info/EmailV1MessageSetInfo.js","src/domain/data/profile/info/InterbankTransferMessageSetInfo.js","src/domain/data/profile/info/InterbankTransferV1MessageSetInfo.js","src/domain/data/profile/info/InvestmentMessageSetInfo.js","src/domain/data/profile/info/InvestmentV1MessageSetInfo.js","src/domain/data/profile/info/ProfileMessageSetInfo.js","src/domain/data/profile/info/ProfileV1MessageSetInfo.js","src/domain/data/profile/info/SecurityListMessageSetInfo.js","src/domain/data/profile/info/SecurityListV1MessageSetInfo.js","src/domain/data/profile/info/SignOnMessageSetInfo.js","src/domain/data/profile/info/SignOnV1MessageSetInfo.js","src/domain/data/profile/info/SignupMessageSetInfo.js","src/domain/data/profile/info/SignupV1MessageSetInfo.js","src/domain/data/profile/info/WireTransferMessageSetInfo.js","src/domain/data/profile/info/WireTransferV1MessageSetInfo.js","src/domain/data/profile/info/banking/EmailProfile.js","src/domain/data/profile/info/banking/StopCheckProfile.js","src/domain/data/profile/info/banking/index.js","src/domain/data/profile/info/common/ImageProfile.js","src/domain/data/profile/info/common/TransferProfile.js","src/domain/data/profile/info/common/index.js","src/domain/data/profile/info/index.js","src/domain/data/profile/info/signup/ClientEnrollment.js","src/domain/data/profile/info/signup/OtherEnrollment.js","src/domain/data/profile/info/signup/WebEnrollment.js","src/domain/data/profile/info/signup/index.js","src/domain/data/seclist/AssetClass.js","src/domain/data/seclist/BaseSecurityInfo.js","src/domain/data/seclist/CallType.js","src/domain/data/seclist/CouponFrequency.js","src/domain/data/seclist/DebtClass.js","src/domain/data/seclist/DebtSecurityInfo.js","src/domain/data/seclist/DebtType.js","src/domain/data/seclist/MutualFundSecurityInfo.js","src/domain/data/seclist/MutualFundType.js","src/domain/data/seclist/OptionSecurityInfo.js","src/domain/data/seclist/OptionType.js","src/domain/data/seclist/OtherSecurityInfo.js","src/domain/data/seclist/SecurityId.js","src/domain/data/seclist/SecurityInfo.js","src/domain/data/seclist/SecurityList.js","src/domain/data/seclist/SecurityListRequest.js","src/domain/data/seclist/SecurityListRequestMessageSet.js","src/domain/data/seclist/SecurityListRequestTransaction.js","src/domain/data/seclist/SecurityListResponse.js","src/domain/data/seclist/SecurityListResponseMessageSet.js","src/domain/data/seclist/SecurityListResponseTransaction.js","src/domain/data/seclist/SecurityRequest.js","src/domain/data/seclist/StockSecurityInfo.js","src/domain/data/seclist/StockType.js","src/domain/data/seclist/index.js","src/domain/data/signon/FinancialInstitution.js","src/domain/data/signon/PasswordChangeRequest.js","src/domain/data/signon/PasswordChangeRequestTransaction.js","src/domain/data/signon/PasswordChangeResponse.js","src/domain/data/signon/PasswordChangeResponseTransaction.js","src/domain/data/signon/SignonRequest.js","src/domain/data/signon/SignonRequestMessageSet.js","src/domain/data/signon/SignonResponse.js","src/domain/data/signon/SignonResponseMessageSet.js","src/domain/data/signon/index.js","src/domain/data/signup/AccountInfoRequest.js","src/domain/data/signup/AccountInfoRequestTransaction.js","src/domain/data/signup/AccountInfoResponse.js","src/domain/data/signup/AccountInfoResponseTransaction.js","src/domain/data/signup/AccountProfile.js","src/domain/data/signup/SignupRequestMessageSet.js","src/domain/data/signup/SignupResponseMessageSet.js","src/domain/data/signup/index.js","src/domain/data/tax1099/ExtDBInfo.js","src/domain/data/tax1099/PayerAddress.js","src/domain/data/tax1099/ProcDet.js","src/domain/data/tax1099/RecAddress.js","src/domain/data/tax1099/Tax1099B.js","src/domain/data/tax1099/Tax1099DIV.js","src/domain/data/tax1099/Tax1099INT.js","src/domain/data/tax1099/Tax1099MISC.js","src/domain/data/tax1099/Tax1099OID.js","src/domain/data/tax1099/Tax1099R.js","src/domain/data/tax1099/Tax1099Request.js","src/domain/data/tax1099/Tax1099RequestMessageSet.js","src/domain/data/tax1099/Tax1099RequestTransaction.js","src/domain/data/tax1099/Tax1099Response.js","src/domain/data/tax1099/Tax1099ResponseMessageSet.js","src/domain/data/tax1099/Tax1099ResponseTransaction.js","src/domain/data/tax1099/index.js","src/domain/index.js","src/meta/Aggregate.js","src/meta/ChildAggregate.js","src/meta/Element.js","src/meta/Header.js","src/meta/index.js","src/util/inherit.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjvLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvrJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjhnJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjpPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnpNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACptKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClzIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClzzLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzvxrHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClrjrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtmttlCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrhGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClvGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpvxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACthzJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtfzhKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrttGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbpxtpfvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClnZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChxzpvhhpLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvnGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxgttBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClzOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACthDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvvXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzvgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxxxzIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxxxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxxxxIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzrJA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzzSA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjlKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChpfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3QA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvttphjNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzvGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzrdxhpHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzpGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxhxhxdrtcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzlMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ofx4js.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\n\nmodule.exports = {\n  client: require(\"./client/index\"),\n  domain: require(\"./domain/index\"),\n  meta: require(\"./meta/index\"),\n};\n","(function (global){\n\nvar rng;\n\nif (global.crypto && crypto.getRandomValues) {\n  // WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto\n  // Moderately fast, high quality\n  var _rnds8 = new Uint8Array(16);\n  rng = function whatwgRNG() {\n    crypto.getRandomValues(_rnds8);\n    return _rnds8;\n  };\n}\n\nif (!rng) {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var  _rnds = new Array(16);\n  rng = function() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      _rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return _rnds;\n  };\n}\n\nmodule.exports = rng;\n\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})","//     uuid.js\n//\n//     Copyright (c) 2010-2012 Robert Kieffer\n//     MIT License - http://opensource.org/licenses/mit-license.php\n\n// Unique ID creation requires a high quality random # generator.  We feature\n// detect to determine the best RNG source, normalizing to a function that\n// returns 128-bits of randomness, since that's what's usually required\nvar _rng = require('./rng');\n\n// Maps for number <-> hex string conversion\nvar _byteToHex = [];\nvar _hexToByte = {};\nfor (var i = 0; i < 256; i++) {\n  _byteToHex[i] = (i + 0x100).toString(16).substr(1);\n  _hexToByte[_byteToHex[i]] = i;\n}\n\n// **`parse()` - Parse a UUID into it's component bytes**\nfunction parse(s, buf, offset) {\n  var i = (buf && offset) || 0, ii = 0;\n\n  buf = buf || [];\n  s.toLowerCase().replace(/[0-9a-f]{2}/g, function(oct) {\n    if (ii < 16) { // Don't overflow!\n      buf[i + ii++] = _hexToByte[oct];\n    }\n  });\n\n  // Zero out remaining bytes if string was short\n  while (ii < 16) {\n    buf[i + ii++] = 0;\n  }\n\n  return buf;\n}\n\n// **`unparse()` - Convert UUID byte array (ala parse()) into a string**\nfunction unparse(buf, offset) {\n  var i = offset || 0, bth = _byteToHex;\n  return  bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]];\n}\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\n// random #'s we need to init node and clockseq\nvar _seedBytes = _rng();\n\n// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\nvar _nodeId = [\n  _seedBytes[0] | 0x01,\n  _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]\n];\n\n// Per 4.2.2, randomize (14 bit) clockseq\nvar _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;\n\n// Previous uuid creation time\nvar _lastMSecs = 0, _lastNSecs = 0;\n\n// See https://github.com/broofa/node-uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  var node = options.node || _nodeId;\n  for (var n = 0; n < 6; n++) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : unparse(b);\n}\n\n// **`v4()` - Generate random UUID**\n\n// See https://github.com/broofa/node-uuid for API details\nfunction v4(options, buf, offset) {\n  // Deprecated - 'format' argument, as supported in v1.2\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options == 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || _rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ii++) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || unparse(rnds);\n}\n\n// Export public API\nvar uuid = v4;\nuuid.v1 = v1;\nuuid.v4 = v4;\nuuid.parse = parse;\nuuid.unparse = unparse;\n\nmodule.exports = uuid;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * @class\n */\nfunction AccountStatement() {\n}\n\n/**\n * The currency code.\n *\n * @return {String} The currency code.\n * @see java.util.Currency#getCurrencyCode()\n */\nAccountStatement.prototype.getCurrencyCode = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The transaction list.\n *\n * @return {TransactionList} The transaction list.\n */\nAccountStatement.prototype.getTransactionList = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The ledger balance.\n *\n * @return {BalanceInfo} The ledger balance.\n */\nAccountStatement.prototype.getLedgerBalance = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The available balance.\n *\n * @return {BalanceInfo} The available balance.\n */\nAccountStatement.prototype.getAvailableBalance = function() { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = AccountStatement;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * @class\n */\nfunction BankAccount() {\n}\n\n/**\n * The details of the account.\n *\n * @return {BankAccountDetails} The details of the account.\n */\nBankAccount.prototype.getDetails = function() { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = BankAccount;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * @class\n */\nfunction CreditCardAccount() {\n}\n\n/**\n * The details of the credit card account.\n *\n * @return {CreditCardAccountDetails} The details of the credit card account.\n */\nCreditCardAccount.prototype.getDetails = function() { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = CreditCardAccount;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * @class\n */\nfunction FinancialInstitution() {\n}\n\n/**\n * The financial institution data defining this FI.\n *\n * @return {FinancialInstitutionData} The financial institution data.\n */\nFinancialInstitution.prototype.getData = function() { throw new Error(\"not implemented\"); };\n\n/**\n * Read the specified financial institution profile. Implies a network call.\n *\n * @return {FinancialInstitutionProfile} The profile.\n * @throws OFXException if something goes awry.\n */\nFinancialInstitution.prototype.readProfile = function() { throw new Error(\"not implemented\"); };\n\n/**\n * Read the account profiles of the specified user.\n *\n * @param {String} username The username.\n * @param {String} password The password.\n * @return {Collection<AccountProfile>} The profiles.\n */\nFinancialInstitution.prototype.readAccountProfiles = function(/*username, password*/) { throw new Error(\"not implemented\"); };\n\n/**\n * Load a bank account.\n *\n * @param {BankAccountDetails} details The bank account details.\n * @param {String} username The username.\n * @param {String} password The password.\n * @return {BankAccount} The bank account.\n */\nFinancialInstitution.prototype.loadBankAccount = function(/*details, username, password*/) { throw new Error(\"not implemented\"); };\n\n/**\n * Load a credit card account.\n *\n * @param {CreditCardAccountDetails} details The credit card account details.\n * @param {String} username The username.\n * @param {String} password The password.\n * @return {CreditCardAccount} The credit card account.\n */\nFinancialInstitution.prototype.loadCreditCardAccount = function(/*details, username, password*/) { throw new Error(\"not implemented\"); };\n\n/**\n * Load an investment account.\n *\n * @param {InvestmentAccountDetails} details The investment account details.\n * @param {String} username The username.\n * @param {String} password The password.\n * @return {InvestmentAccount} The investment account.\n */\nFinancialInstitution.prototype.loadInvestmentAccount = function(/*details, username, password*/) { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = FinancialInstitution;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * A specific account at a financial institution.\n *\n * @class\n */\nfunction FinancialInstitutionAccount() {\n}\n\n/**\n * Read an account statement.\n *\n * @param {Date} start The start date of the statement.\n * @param {Date} end The end date of the statement.\n * @return {AccountStatement} The account statement.\n */\nFinancialInstitutionAccount.prototype.readStatement = function(/*start, end*/) { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = FinancialInstitutionAccount;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Interface for core FI data.  This is the base set of information\n * required in order to initiate a connection to an FI server.\n *\n * @author Ryan Heaton\n */\nfunction FinancialInstitutionData() {\n}\n\n/**\n * A unique id for this FI.\n *\n * @return {String} A unique id for this FI.\n */\nFinancialInstitutionData.prototype.getId = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The id of the FI.\n *\n * @return {String} The id of the FI.\n */\nFinancialInstitutionData.prototype.getFinancialInstitutionId = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The name of the FI.\n *\n * @return {String} The name of the FI.\n */\nFinancialInstitutionData.prototype.getName = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The OFX organization name.\n *\n * @return {String} The OFX organization name.\n */\nFinancialInstitutionData.prototype.getOrganization = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The URL to the OFX server for this institution.\n *\n * @return {URL} The URL to the OFX server for this institution.\n */\nFinancialInstitutionData.prototype.getOFXURL = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The broker id.\n *\n * @return {String} The broker id.\n */\nFinancialInstitutionData.prototype.getBrokerId = function() { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = FinancialInstitutionData;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * @class\n */\nfunction FinancialInstitutionDataStore() {\n}\n\n/**\n * Get the data for the financial institution of the specified id.\n *\n * @param {String} fid The id of the financial institution.\n * @return {FinancialInstitutionData} The financial institution data, or null if none exists for the specified id.\n */\nFinancialInstitutionDataStore.prototype.getInstitutionData = function(/*fid*/) { throw new Error(\"not implemented\"); };\n\n/**\n * Get the whole list of financial institution data.\n *\n * @return {FinancialInstitutionData[]} The whole list of financial institution data.\n */\nFinancialInstitutionDataStore.prototype.getInstitutionDataList = function() { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = FinancialInstitutionDataStore;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * @class\n */\nfunction FinancialInstitutionProfile() {\n}\n\n/**\n * When this profile was last updated.\n *\n * @return {Date} When this profile was last updated.\n */\nFinancialInstitutionProfile.prototype.getLastUpdated = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The name of the financial institution.\n *\n * @return {String} The name of the financial institution.\n */\nFinancialInstitutionProfile.prototype.getFinancialInstitutionName = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The address of the financial institution.\n *\n * @return {String} The address of the financial institution.\n */\nFinancialInstitutionProfile.prototype.getAddress1 = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The address of the financial institution.\n *\n * @return {String} The address of the financial institution.\n */\nFinancialInstitutionProfile.prototype.getAddress2 = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The address of the financial institution.\n *\n * @return {String} The address of the financial institution.\n */\nFinancialInstitutionProfile.prototype.getAddress3 = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The city of the financial institution.\n *\n * @return {String} The city of the financial institution.\n */\nFinancialInstitutionProfile.prototype.getCity = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The state of this financial institution.\n *\n * @return {String} The state of this financial institution.\n */\nFinancialInstitutionProfile.prototype.getState = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The postal code of this financial institution.\n *\n * @return {String} The postal code of this financial institution.\n */\nFinancialInstitutionProfile.prototype.getZip = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The country code for this financial institution.\n *\n * @return {String} The country code for this financial institution.\n * @see java.util.Locale#getISO3Country()\n */\nFinancialInstitutionProfile.prototype.getCountry = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The phone number to customer service.\n *\n * @return {String} The phone number to customer service.\n */\nFinancialInstitutionProfile.prototype.getCustomerServicePhone = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The phone number to tech support.\n *\n * @return {String} The phone number to tech support.\n */\nFinancialInstitutionProfile.prototype.getTechnicalSupportPhone = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The fax number.\n *\n * @return {String} The fax number.\n */\nFinancialInstitutionProfile.prototype.getFax = function() { throw new Error(\"not implemented\"); };\n\n/**\n * URL for the financial institution.\n *\n * @return {String} URL for the financial institution.\n */\nFinancialInstitutionProfile.prototype.getSiteURL = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The email for this FI\n *\n * @return {String} The email for this FI\n */\nFinancialInstitutionProfile.prototype.getEmail = function() { throw new Error(\"not implemented\"); };\n\n/**\n * Get the message set profile for the specified message set.\n *\n * @param {MessageSetType} type The message set type for which to retrieve the profile.\n * @return {MessageSetProfile} The message set profile information, or null if the FI doesn't support any message sets of the specified type.\n * @throws IllegalStateException If multiple versions of the specified message set exist.\n */\nFinancialInstitutionProfile.prototype.getMessageSetProfile = function(/*type*/) { throw new Error(\"not implemented\"); };\n\n/**\n * Get the message set profile for the specified message set and the specified version.\n *\n * @param {MessageSetType} type The message set type for which to retrieve the profile.\n * @param {String} version The version for which to retrieve the profile.\n * @return {MessageSetProfile} The message set profile information, or null if the FI doesn't support the specified message set of the specified version.\n */\nFinancialInstitutionProfile.prototype.getMessageSetProfile = function(/*type, version*/) { throw new Error(\"not implemented\"); };\n\n/**\n * Get the signon profile for the specified message set.\n *\n * @param {MessageSetProfile} messageSet The message set.\n * @return {SignonProfile} The signon profile, or null if none was found.\n */\nFinancialInstitutionProfile.prototype.getSignonProfile = function(/*messageSet*/) { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = FinancialInstitutionProfile;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * @class\n */\nfunction FinancialInstitutionService() {\n}\n\n/**\n * Get the financial institution by the specified id.\n *\n * @param {String} fid The financial institution id.\n * @return {FinancialInstitution} The financial institution, or null if not found.\n */\nFinancialInstitutionService.prototype.getFinancialInstitution = function(/*fid*/) { throw new Error(\"not implemented\"); };\n\n/**\n * Get the financial institution by the specified data.\n *\n * @param {FinancialInstitutionData} data The financial institution data.\n * @return {FinancialInstitution} The financial institution, or null if not found.\n */\nFinancialInstitutionService.prototype.getFinancialInstitution = function(/*data*/) { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = FinancialInstitutionService;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * @class\n */\nfunction InvestmentAccount() {\n}\n\n/**\n * Read an account statement.\n *\n * @param {Date} start The start date of the statement.\n * @param {Date} end The end date of the statement.\n * @throws OFXException if there's an error talking to the brokerage\n * @return {InvestmentStatementResponse} The account statement.\n */\nInvestmentAccount.prototype.readStatement = function(/*start, end*/) { throw new Error(\"not implemented\"); };\n\n/**\n * Reads a list of securities from the brokerage\n *\n * @param {SecurityRequest[]} securities the securities to read\n * @return {SecurityList} The security response containing the security infos\n * @throws OFXException if there's an error talking to the brokerage\n */\nInvestmentAccount.prototype.readSecurityList = function(/*securities*/) { throw new Error(\"not implemented\"); };\n\n/**\n * The details of the account.\n *\n * @return {InvestmentAccountDetails} The details of the account.\n */\nInvestmentAccount.prototype.getDetails = function() { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = InvestmentAccount;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../util/inherit\");\nvar OFXApplicationContext = require(\"./OFXApplicationContext\");\n\n/**\n * Default application context.\n * \n * @class\n */\nfunction DefaultApplicationContext () {\n\n  /**\n   * @name DefaultApplicationContext#appId\n   * @type String\n   * @access private\n   */\n  this.appId = null;\n\n  /**\n   * @name DefaultApplicationContext#appVersion\n   * @type String\n   * @access private\n   */\n  this.appVersion = null;\n}\n\ninherit(DefaultApplicationContext, \"implements\", OFXApplicationContext);\n\n\n\n\nDefaultApplicationContext.prototype.DefaultApplicationContext = function(/*String*/ appId, /*String*/ appVersion) {\n  this.appId = appId;\n  this.appVersion = appVersion;\n};\n\n\nDefaultApplicationContext.prototype.getAppId = function() {\n  return this.appId;\n};\n\n\nDefaultApplicationContext.prototype.getAppVersion = function() {\n  return this.appVersion;\n};\n\n\n\n\nmodule.exports = DefaultApplicationContext;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * The application context.\n *\n * @class\n */\nfunction OFXApplicationContext() {\n}\n\n/**\n * The current application id.\n *\n * @return {String} The current application id.\n */\nOFXApplicationContext.prototype.getAppId = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The application version.\n *\n * @return {String} The application version.\n */\nOFXApplicationContext.prototype.getAppVersion = function() { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = OFXApplicationContext;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar DefaultApplicationContext = require(\"./DefaultApplicationContext\");\n\n/**\n * @class\n */\nvar OFXApplicationContextHolder = {};\n\n\n/**\n * @name OFXApplicationContextHolder.CURRENT_CONTEXT\n * @type OFXApplicationContext\n */\nOFXApplicationContextHolder.CURRENT_CONTEXT = new DefaultApplicationContext(\"Money\", \"1600\"); //some apps fail unless you're Quicken or Money...\n\n\n\n\n/**\n * Get the current (thread-safe) context.\n *\n * @return {OFXApplicationContext} The thread-safe context.\n */\nOFXApplicationContextHolder.getCurrentContext = function() {\n  //todo: implement a strategy (perhaps for thread-local access or something)?\n  return OFXApplicationContextHolder.CURRENT_CONTEXT;\n};\n\n\n/**\n * Set the current context.\n *\n * @param {OFXApplicationContext} context The context.\n */\nOFXApplicationContextHolder.setCurrentContext = function(context) {\n  OFXApplicationContextHolder.CURRENT_CONTEXT = context;\n};\n\n\n\n\nmodule.exports = OFXApplicationContextHolder;\n","\"use strict\";\n\nmodule.exports = {\n  DefaultApplicationContext: require(\"./DefaultApplicationContext\"),\n  OFXApplicationContext: require(\"./OFXApplicationContext\"),\n  OFXApplicationContextHolder: require(\"./OFXApplicationContextHolder\"),\n};\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../util/inherit\");\n\nvar BankAccount = require(\"../BankAccount\");\nvar BaseAccountImpl = require(\"./BaseAccountImpl\");\nvar MessageSetType = require(\"../../domain/data/MessageSetType\");\nvar BankingRequestMessageSet = require(\"../../domain/data/banking/BankingRequestMessageSet\");\nvar BankStatementRequestTransaction = require(\"../../domain/data/banking/BankStatementRequestTransaction\");\nvar BankStatementRequest = require(\"../../domain/data/banking/BankStatementRequest\");\n\n/**\n * @class\n * @augments BaseAccountImpl\n */\nfunction BankingAccountImpl(/*BankAccountDetails*/ details, /*String*/ username, /*String*/ password, /*FinancialInstitutionImpl*/ institution) {\n  BaseAccountImpl.call(this, details, username, password, institution);\n}\n\ninherit(BankingAccountImpl, \"extends\", BaseAccountImpl);\ninherit(BankingAccountImpl, \"implements\", BankAccount);\n\n\n\nBankingAccountImpl.prototype.unwrapStatementResponse = function(/*ResponseEnvelope*/ response) {\n  var bankingSet = response.getMessageSet(MessageSetType.banking);\n  if (bankingSet === null) {\n    throw new Error(\"No banking response message set.\");\n  }\n\n  var statementTransactionResponse = bankingSet.getStatementResponse();\n  if (statementTransactionResponse === null) {\n    throw new Error(\"No banking statement response transaction.\");\n  }\n\n  var statement = statementTransactionResponse.getMessage();\n  if (statement === null) {\n    throw new Error(\"No banking statement in the transaction.\");\n  }\n  \n  return statement;\n};\n\n\nBankingAccountImpl.prototype.createRequestMessageSet = function(/*TransactionWrappedRequestMessage*/ transaction) {\n  var bankingRequest = new BankingRequestMessageSet();\n  bankingRequest.setStatementRequest(transaction);\n  return bankingRequest;\n};\n\n\nBankingAccountImpl.prototype.createTransaction = function() {\n  return new BankStatementRequestTransaction();\n};\n\n\nBankingAccountImpl.prototype.createStatementRequest = function(/*BankAccountDetails*/ details, /*StatementRange*/ range) {\n  var bankRequest = new BankStatementRequest();\n  bankRequest.setAccount(details);\n  bankRequest.setStatementRange(range);\n  return bankRequest;\n};\n\n\n\n\nmodule.exports = BankingAccountImpl;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../util/inherit\");\n\nvar FinancialInstitutionAccount = require(\"../FinancialInstitutionAccount\");\nvar BankAccountDetails = require(\"../../domain/data/banking/BankAccountDetails\");\nvar StatementRange = require(\"../../domain/data/common/StatementRange\");\nvar CreditCardAccountDetails = require(\"../../domain/data/creditcard/CreditCardAccountDetails\");\nvar InvestmentAccountDetails = require(\"../../domain/data/investment/accounts/InvestmentAccountDetails\");\nvar MessageSetType = require(\"../../domain/data/MessageSetType\");\n\n\n/**\n * Base account implementation. Supports banking and credit card accounts.\n *\n * @class\n */\nfunction BaseAccountImpl() {\n\n  /**\n   * @name BaseAccountImpl#details\n   * @access private\n   */\n  this.details = null;\n\n  /**\n   * @name BaseAccountImpl#messageType\n   * @type MessageSetType\n   * @access private\n   */\n  this.messageType = null;\n\n  /**\n   * @name BaseAccountImpl#username\n   * @type String\n   * @access private\n   */\n  this.username = null;\n\n  /**\n   * @name BaseAccountImpl#password\n   * @type String\n   * @access private\n   */\n  this.password = null;\n\n  /**\n   * @name BaseAccountImpl#institution\n   * @type FinancialInstitutionImpl\n   * @access private\n   */\n  this.institution = null;\n\n  /**\n   * @name BaseAccountImpl#OFXException\n   * @type throws\n   */\n  this.OFXException = null;\n}\n\ninherit(BaseAccountImpl, \"implements\", FinancialInstitutionAccount);\n\n\n\n\nBaseAccountImpl.prototype.BaseAccountImpl = function(/*D*/ details, /*String*/ username, /*String*/ password, /*FinancialInstitutionImpl*/ institution) {\n  this.details = details;\n  this.username = username;\n  this.password = password;\n  this.institution = institution;\n  this.messageType = this.getMessageSetType(details);\n};\n\n\n/**\n * Get the message set type of the specified details.\n *\n * @param details The details.\n * @return {MessageSetType} The message set type.\n */\nBaseAccountImpl.prototype.getMessageSetType = function(details) {\n  var messageType;\n  if (details instanceof BankAccountDetails) {\n    messageType = MessageSetType.banking;\n  }\n  else if (this.getDetails() instanceof CreditCardAccountDetails) {\n    messageType = MessageSetType.creditcard;\n  }\n  else if (this.getDetails() instanceof InvestmentAccountDetails) {\n    messageType = MessageSetType.investment;\n  }\n  else {\n    throw new Error(\"Illegal details: \" + this.details.getClass().getName());\n  }\n  return messageType;\n};\n\n\nBaseAccountImpl.prototype.readStatement = function(/*Date*/ start, /*Date*/ end) {\n  var range = new StatementRange();\n  range.setIncludeTransactions(true);\n  range.setStart(start);\n  range.setEnd(end);\n\n  var request = this.institution.createAuthenticatedRequest(this.username, this.password);\n  var requestTransaction = this.createTransaction();\n  requestTransaction.setWrappedMessage(this.createStatementRequest(this.getDetails(), range));\n  request.getMessageSets().add(this.createRequestMessageSet(requestTransaction));\n\n  var response = this.institution.sendRequest(request);\n  this.institution.doGeneralValidationChecks(request, response);\n\n  return this.unwrapStatementResponse(response);\n};\n\n\n/**\n * Create a request message set from the specified transaction.\n *\n * @param {TransactionWrappedRequestMessage} transaction The transaction.\n * @return {RequestMessageSet} The request message set.\n */\nBaseAccountImpl.prototype.createRequestMessageSet = function(/*transaction*/) { throw new Error(\"not implemented\"); };\n\n/**\n * Create a transaction.\n *\n * @return {TransactionWrappedRequestMessage} The transaction.\n */\nBaseAccountImpl.prototype.createTransaction = function() { throw new Error(\"not implemented\"); };\n\n/**\n * Create a statement request.\n *\n * @param details The details.\n * @param {StatementRange} range the range.\n * @return {StatementRequest} The statement request.\n */\nBaseAccountImpl.prototype.createStatementRequest = function(/*details, range*/) { throw new Error(\"not implemented\"); };\n\n/**\n * The details of this account.\n *\n * @return The details of this account.\n */\nBaseAccountImpl.prototype.getDetails = function() {\n  return this.details;\n};\n\n/**\n * The message set type.\n *\n * @return {MessageSetType} The message set type.\n */\nBaseAccountImpl.prototype.getMessageType = function() {\n  return this.messageType;\n};\n\n\n\n\nmodule.exports = BaseAccountImpl;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../util/inherit\");\n\nvar FinancialInstitutionData = require(\"../FinancialInstitutionData\");\n\n/**\n * Base bean for FI data.\n *\n * @author Ryan Heaton\n */\nfunction BaseFinancialInstitutionData () {\n\n  /**\n   * @name BaseFinancialInstitutionData#id\n   * @type String\n   * @access private\n   */\n  this.id = null;\n\n  /**\n   * @name BaseFinancialInstitutionData#fid\n   * @type String\n   * @access private\n   */\n  this.fid = null;\n\n  /**\n   * @name BaseFinancialInstitutionData#name\n   * @type String\n   * @access private\n   */\n  this.name = null;\n\n  /**\n   * @name BaseFinancialInstitutionData#organization\n   * @type String\n   * @access private\n   */\n  this.organization = null;\n\n  /**\n   * @name BaseFinancialInstitutionData#ofxUrl\n   * @type URL\n   * @access private\n   */\n  this.ofxUrl = null;\n\n  /**\n   * @name BaseFinancialInstitutionData#brokerId\n   * @type String\n   * @access private\n   */\n  this.brokerId = null;\n}\n\ninherit(BaseFinancialInstitutionData, \"implements\", FinancialInstitutionData);\n\n\n\n\nBaseFinancialInstitutionData.prototype.BaseFinancialInstitutionData = function() {\n};\n\n\nBaseFinancialInstitutionData.prototype.BaseFinancialInstitutionData = function(/*String*/ id) {\n  this.id = id;\n};\n\n\nBaseFinancialInstitutionData.prototype.getId = function() {\n  return this.id;\n};\n\n\nBaseFinancialInstitutionData.prototype.setId = function(/*String*/ id) {\n  this.id = id;\n};\n\n\nBaseFinancialInstitutionData.prototype.getFinancialInstitutionId = function() {\n  return this.fid;\n};\n\n\nBaseFinancialInstitutionData.prototype.setFinancialInstitutionId = function(/*String*/ id) {\n  this.fid = id;\n};\n\n\nBaseFinancialInstitutionData.prototype.getName = function() {\n  return this.name;\n};\n\n\nBaseFinancialInstitutionData.prototype.setName = function(/*String*/ name) {\n  this.name = name;\n};\n\n\nBaseFinancialInstitutionData.prototype.getOrganization = function() {\n  return this.organization;\n};\n\n\nBaseFinancialInstitutionData.prototype.setOrganization = function(/*String*/ organization) {\n  this.organization = organization;\n};\n\n\nBaseFinancialInstitutionData.prototype.getOFXURL = function() {\n  return this.ofxUrl;\n};\n\n\nBaseFinancialInstitutionData.prototype.setOFXURL = function(/*URL*/ OFXURL) {\n  this.ofxUrl = OFXURL;\n};\n\n\nBaseFinancialInstitutionData.prototype.getBrokerId = function() {\n  return this.brokerId;\n};\n\n\nBaseFinancialInstitutionData.prototype.setBrokerId = function(/*String*/ brokerId) {\n  this.brokerId = brokerId;\n};\n\n\n\n\nmodule.exports = BaseFinancialInstitutionData;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../util/inherit\");\n\nvar CreditCardAccount = require(\"../CreditCardAccount\");\nvar BaseAccountImpl = require(\"./BaseAccountImpl\");\nvar MessageSetType = require(\"../../domain/data/MessageSetType\");\nvar CreditCardRequestMessageSet = require(\"../../domain/data/creditcard/CreditCardRequestMessageSet\");\nvar CreditCardStatementRequestTransaction = require(\"../../domain/data/creditcard/CreditCardStatementRequestTransaction\");\nvar CreditCardStatementRequest = require(\"../../domain/data/creditcard/CreditCardStatementRequest\");\n\n/**\n * @class\n */\nfunction CreditCardAccountImpl(/*CreditCardAccountDetails*/ details, /*String*/ username, /*String*/ password, /*FinancialInstitutionImpl*/ institution) {\n  BaseAccountImpl.call(this, details, username, password, institution);\n}\n\ninherit(CreditCardAccountImpl, \"extends\", BaseAccountImpl);\ninherit(CreditCardAccountImpl, \"implements\", CreditCardAccount);\n\n\n\n\nCreditCardAccountImpl.prototype.unwrapStatementResponse = function(/*ResponseEnvelope*/ response) {\n  var creditCardSet = response.getMessageSet(MessageSetType.creditcard);\n  if (creditCardSet === null) {\n    throw new Error(\"No credit card response message set.\");\n  }\n\n  var statementTransactionResponse = creditCardSet.getStatementResponse();\n  if (statementTransactionResponse === null) {\n    throw new Error(\"No credit card statement response transaction.\");\n  }\n\n  var statement = statementTransactionResponse.getMessage();\n  if (statement === null) {\n    throw new Error(\"No credit card statement in the transaction.\");\n  }\n\n  return statement;\n};\n\n\nCreditCardAccountImpl.prototype.createRequestMessageSet = function(/*TransactionWrappedRequestMessage*/ transaction) {\n  var creditCardRequest = new CreditCardRequestMessageSet();\n  creditCardRequest.setStatementRequest(transaction);\n  return creditCardRequest;\n};\n\n\nCreditCardAccountImpl.prototype.createTransaction = function() {\n  return new CreditCardStatementRequestTransaction();\n};\n\n\nCreditCardAccountImpl.prototype.createStatementRequest = function(/*CreditCardAccountDetails*/ details, /*StatementRange*/ range) {\n  var bankRequest = new CreditCardStatementRequest();\n  bankRequest.setAccount(details);\n  bankRequest.setStatementRange(range);\n  return bankRequest;\n};\n\n\n\n\nmodule.exports = CreditCardAccountImpl;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * @author Ryan Heaton\n */\nfunction FIDataList () {\n\n  /**\n   * @name FIDataList#data\n   * @type BaseFinancialInstitutionData[]\n   * @access private\n   */\n  this.data = null;\n}\n\n\n\n\n\nFIDataList.prototype.getData = function() {\n  return this.data;\n};\n\n\nFIDataList.prototype.setData = function(/*Collection<BaseFinancialInstitutionData>*/ data) {\n  this.data = data;\n};\n\n\n\n\nmodule.exports = FIDataList;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../util/inherit\");\n\nvar OFXApplicationContextHolder = require(\"../context/OFXApplicationContextHolder\");\nvar Status = require(\"../../domain/data/common/Status\");\nvar StatusHolder = require(\"../../domain/data/common/StatusHolder\");\nvar SignonRequest = require(\"../../domain/data/signon/SignonRequest\");\nvar SignonRequestMessageSet = require(\"../../domain/data/signon/SignonRequestMessageSet\");\nvar FinancialInstitution = require(\"../FinancialInstitution\");\nvar ProfileRequestMessageSet = require(\"../../domain/data/profile/ProfileRequestMessageSet\");\nvar SignupRequestMessageSet = require(\"../../domain/data/signup/SignupRequestMessageSet\");\nvar BankingAccountImpl = require(\"./BankingAccountImpl\");\nvar CreditCardAccountImpl = require(\"./CreditCardAccountImpl\");\nvar InvestmentAccountImpl = require(\"./InvestmentAccountImpl\");\nvar RequestEnvelope = require(\"../../domain/data/RequestEnvelope\");\nvar MessageSetType = require(\"../../domain/data/MessageSetType\");\nvar ApplicationSecurity = require(\"../../domain/data/ApplicationSecurity\");\nvar TransactionWrappedRequestMessage = require(\"../../domain/data/TransactionWrappedRequestMessage\");\nvar TransactionWrappedResponseMessage = require(\"../../domain/data/TransactionWrappedResponseMessage\");\nvar AccountInfoRequest = require(\"../../domain/data/signup/AccountInfoRequest\");\nvar AccountInfoRequestTransaction = require(\"../../domain/data/signup/AccountInfoRequestTransaction\");\nvar ProfileRequestTransaction = require(\"../../domain/data/profile/ProfileRequestTransaction\");\nvar ProfileRequest = require(\"../../domain/data/profile/ProfileRequest\");\n\n/**\n * Base implementation for the financial institution.\n *\n * @class\n */\nfunction FinancialInstitutionImpl () {\n\n  /**\n   * @name FinancialInstitutionImpl#connection\n   * @type OFXConnection\n   * @access private\n   */\n  this.connection = null;\n\n  /**\n   * @name FinancialInstitutionImpl#data\n   * @type FinancialInstitutionData\n   * @access private\n   */\n  this.data = null;\n}\n\ninherit(FinancialInstitutionImpl, \"implements\", FinancialInstitution);\n\n\n\n\nFinancialInstitutionImpl.prototype.FinancialInstitutionImpl = function(/*FinancialInstitutionData*/ data, /*OFXConnection*/ connection) {\n  if (data === null) {\n    throw new Error(\"Data cannot be null\");\n  }\n  if (connection === null) {\n    throw new Error(\"An OFX connection must be supplied\");\n  }\n\n  this.data = data;\n  this.connection = connection;\n};\n\n\n// Inherited.\nFinancialInstitutionImpl.prototype.readProfile = function() {\n  var request = this.createAuthenticatedRequest(SignonRequest.ANONYMOUS_USER, SignonRequest.ANONYMOUS_USER);\n  var profileRequest = new ProfileRequestMessageSet();\n  profileRequest.setProfileRequest(this.createProfileTransaction());\n  request.getMessageSets().add(profileRequest);\n  var response = this.sendRequest(request, this.getData().getOFXURL());\n  this.doGeneralValidationChecks(request, response);\n  return this.getProfile(response);\n};\n\n\n// Inherited.\nFinancialInstitutionImpl.prototype.readAccountProfiles = function(/*String*/ username, /*String*/ password) {\n  var request = this.createAuthenticatedRequest(username, password);\n  var signupRequest = new SignupRequestMessageSet();\n  signupRequest.setAccountInfoRequest(this.createAccountInfoTransaction());\n  request.getMessageSets().add(signupRequest);\n  var response = this.sendRequest(request, this.getData().getOFXURL());\n  this.doGeneralValidationChecks(request, response);\n  return this.getAccountProfiles(response);\n};\n\n\n// Inherited.\nFinancialInstitutionImpl.prototype.loadBankAccount = function(/*BankAccountDetails*/ details, /*String*/ username, /*String*/ password) {\n  return new BankingAccountImpl(details, username, password, this);\n};\n\n\n// Inherited.\nFinancialInstitutionImpl.prototype.loadCreditCardAccount = function(/*CreditCardAccountDetails*/ details, /*String*/ username, /*String*/ password) {\n  return new CreditCardAccountImpl(details, username, password, this);\n};\n\n\n// Inherited\nFinancialInstitutionImpl.prototype.loadInvestmentAccount = function(/*InvestmentAccountDetails*/ details, /*String*/ username, /*String*/ password) {\n  return new InvestmentAccountImpl(details, username, password, this);\n};\n\n\n/**\n * Create an authenticated request envelope.\n *\n * @param {String} username The username.\n * @param {String} password The password.\n * @return {RequestEnvelope} The request envelope.\n */\nFinancialInstitutionImpl.prototype.createAuthenticatedRequest = function(username, password) {\n  var request = new RequestEnvelope();\n  var messageSets = {};\n  var signonRequest = new SignonRequestMessageSet();\n  signonRequest.setSignonRequest(this.createSignonRequest(username, password));\n  messageSets[signonRequest] = signonRequest;\n  request.setMessageSets(messageSets);\n  return request;\n};\n\n\n/**\n * Send a request.\n *\n * @param {RequestEnvelope} request The request.\n * @return {ResponseEnvelope} The request.\n */\nFinancialInstitutionImpl.prototype.sendRequest = function(request) {\n  return this.getConnection().sendRequest(request, this.getData().getOFXURL());\n};\n\n\n/**\n * Send a request to a specific URL.\n *\n * @param {RequestEnvelope} request The request.\n * @param {URL} url The url.\n * @return {ResponseEnvelope} The request.\n */\nFinancialInstitutionImpl.prototype.sendRequest = function(request, url) {\n  return this.getConnection().sendRequest(request, url);\n};\n\n\n/**\n * Open the specified response envelope and look for the profile.\n *\n * @param {ResponseEnvelope} response The response envelope.\n * @return {FinancialInstitutionProfile} The profile.\n */\nFinancialInstitutionImpl.prototype.getProfile = function(response) {\n\n  var profileSet = response.getMessageSet(MessageSetType.profile);\n  if (profileSet === null) {\n    throw new Error(\"No profile response set.\");\n  }\n\n  var transactionResponse = profileSet.getProfileResponse();\n  if (transactionResponse === null) {\n    throw new Error(\"No profile transaction wrapper.\");\n  }\n\n  var message = transactionResponse.getMessage();\n  if (message === null) {\n    throw new Error(\"No profile message.\");\n  }\n  return message;\n};\n\n\n/**\n * General validation checks on the specified response.\n *\n * @param {RequestEnvelope} request The request.\n * @param {ResponseEnvelope} response Their response.\n * @throws OFXException Upon invalid response.\n */\nFinancialInstitutionImpl.prototype.doGeneralValidationChecks = function(request, response) {\n  if (response.getSecurity() != ApplicationSecurity.NONE) {\n    throw new Error(String.format(\"Unable to participate in %s security.\", response.getSecurity()));\n  }\n\n  if (!request.getUID().equals(response.getUID())) {\n    throw new Error(String.format(\"Invalid transaction ID '%s' in response.  Expected: %s\", response.getUID(), request));\n  }\n\n  for (var requestSet in request.getMessageSets()) {\n    var responseSet = response.getMessageSet(requestSet.getType());\n    if (responseSet === null) {\n      throw new Error(\"No response for the \" + requestSet.getType() + \" request.\");\n    }\n\n    if (responseSet.getType() === MessageSetType.signon) {\n      var signonResponse = responseSet.getSignonResponse();\n\n      if (signonResponse === null) {\n        throw new Error(\"No signon response.\");\n      }\n    }\n\n    var transactionIds = {};\n    for (var requestMessage in requestSet.getRequestMessages()) {\n      if (requestMessage instanceof TransactionWrappedRequestMessage) {\n        transactionIds[requestMessage.getUID()] = 1;\n      }\n    }\n\n    for (var responseMessage in responseSet.getResponseMessages()) {\n      if (responseMessage instanceof StatusHolder) {\n        this.validateStatus(responseMessage);\n      }\n\n      if (responseMessage instanceof TransactionWrappedResponseMessage) {\n        var uid = responseMessage.getUID();\n        if (uid === null) {\n          throw new Error(\"Invalid response transaction: no UID.\");\n        }\n        else if (!transactionIds.remove(uid)) {\n          throw new Error(\"Response to an unknown transaction: \" + uid + \".\");\n        }\n      }\n    }\n\n    if (!transactionIds.isEmpty()) {\n      throw new Error(\"No response to the following transactions: \" + transactionIds);\n    }\n  }\n};\n\n\n/**\n * Validate the status of the given status holder.\n *\n * @param {StatusHolder} statusHolder The status holder.\n */\nFinancialInstitutionImpl.prototype.validateStatus = function(statusHolder) {\n  var status = statusHolder.getStatus();\n  if (status === null) {\n    throw new Error(\"Invalid OFX response: no status returned in the \" + statusHolder.getStatusHolderName() + \" response.\");\n  }\n\n  if (!Status.KnownCode.SUCCESS.equals(status.getCode())) {\n    var message = status.getMessage();\n    if (message === null) {\n      message = \"No response status code.\";\n\n      if (status.getCode() !== null) {\n        message = status.getCode().getMessage();\n      }\n    }\n\n    throw new Error(status, \"Invalid \" + statusHolder.getStatusHolderName() + \": \" + message);\n  }\n};\n\n\n/**\n * Create a transaction message for a profile request.\n *\n * @return {ProfileRequestTransaction} The transaction message.\n */\nFinancialInstitutionImpl.prototype.createProfileTransaction = function() {\n  var profileTx = new ProfileRequestTransaction();\n  profileTx.setMessage(this.createProfileRequest());\n  return profileTx;\n};\n\n\n/**\n * Create a profile request.\n *\n * @return {ProfileRequest} The profile request.\n */\nFinancialInstitutionImpl.prototype.createProfileRequest = function() {\n  var profileRequest = new ProfileRequest();\n  profileRequest.setProfileLastUpdated(new Date(0));\n  return profileRequest;\n};\n\n\n/**\n * Create a sign-on request for the specified user.\n *\n * @param {String} username The username.\n * @param {String} password The password.\n * @return {SignonRequest} The signon request.\n */\nFinancialInstitutionImpl.prototype.createSignonRequest = function(username, password) {\n  var signonRequest = new SignonRequest();\n  signonRequest.setTimestamp(new Date());\n  var fi = new FinancialInstitution();\n  fi.setId(this.getData().getFinancialInstitutionId());\n  fi.setOrganization(this.getData().getOrganization());\n  signonRequest.setFinancialInstitution(fi);\n  signonRequest.setUserId(username);\n  signonRequest.setPassword(password);\n  signonRequest.setApplicationId(OFXApplicationContextHolder.getCurrentContext().getAppId());\n  signonRequest.setApplicationVersion(OFXApplicationContextHolder.getCurrentContext().getAppVersion());\n  return signonRequest;\n};\n\n\n/**\n * Create a transaction for an account info request.\n *\n * @return {AccountInfoRequestTransaction} The transaction.\n */\nFinancialInstitutionImpl.prototype.createAccountInfoTransaction = function() {\n  var transaction = new AccountInfoRequestTransaction();\n  transaction.setMessage(this.createAccountInfoRequest());\n  return transaction;\n};\n\n\n/**\n * Create an account info request.\n *\n * @return {AccountInfoRequest} The account info request.\n */\nFinancialInstitutionImpl.prototype.createAccountInfoRequest = function() {\n  return new AccountInfoRequest();\n};\n\n\n/**\n * Get the account profiles for the specified response envelope.\n *\n * @param {ResponseEnvelope} response The response envelope.\n * @return {Collection<AccountProfile>} The account profiles.\n */\nFinancialInstitutionImpl.prototype.getAccountProfiles = function(response) {\n  var messageSet = response.getMessageSet(MessageSetType.signup);\n  if (messageSet === null) {\n    throw new Error(\"No signup response message set.\");\n  }\n\n  var transaction = messageSet.getAccountInfoResponse();\n  if (transaction === null) {\n    throw new Error(\"No account info transaction in the signup response.\");\n  }\n\n  var infoResponse = transaction.getMessage();\n  if (infoResponse === null) {\n    throw new Error(\"No account info response in the transaction.\");\n  }\n\n  return infoResponse.getAccounts();\n};\n\n\n/**\n * The connection used by this implementation.\n *\n * @return {OFXConnection} The connection used by this implementation.\n */\nFinancialInstitutionImpl.prototype.getConnection = function() {\n  return this.connection;\n};\n\n\n/**\n * The financial institution data.\n *\n * @return {FinancialInstitutionData} The financial institution data.\n */\nFinancialInstitutionImpl.prototype.getData = function() {\n  return this.data;\n};\n\n\n\n\nmodule.exports = FinancialInstitutionImpl;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../util/inherit\");\n\nvar FinancialInstitutionImpl = require(\"./FinancialInstitutionImpl\");\nvar FinancialInstitutionService = require(\"../FinancialInstitutionService\");\nvar OFXV1Connection = require(\"../net/OFXV1Connection\");\n\n/**\n * @class\n */\nfunction FinancialInstitutionServiceImpl () {\n\n  /**\n   * @name FinancialInstitutionServiceImpl#connection\n   * @type OFXConnection\n   * @access private\n   */\n  this.connection = new OFXV1Connection();\n\n  /**\n   * @name FinancialInstitutionServiceImpl#dataStore\n   * @type FinancialInstitutionDataStore\n   * @access private\n   */\n  this.dataStore = null;\n}\n\ninherit(FinancialInstitutionServiceImpl, \"implements\", FinancialInstitutionService);\n\n\n\n\nFinancialInstitutionServiceImpl.prototype.getFinancialInstitution = function(/*String*/ fid) {\n  return this.dataStore === null ? null : this.getFinancialInstitution(this.getDataStore().getInstitutionData(fid));\n};\n\n\nFinancialInstitutionServiceImpl.prototype.getFinancialInstitution = function(/*FinancialInstitutionData*/ data) {\n  if (data === null) {\n    return null;\n  }\n\n  return new FinancialInstitutionImpl(data, this.getConnection());\n};\n\n\nFinancialInstitutionServiceImpl.prototype.getDataStore = function() {\n  return this.dataStore;\n};\n\n\nFinancialInstitutionServiceImpl.prototype.setDataStore = function(/*FinancialInstitutionDataStore*/ dataStore) {\n  this.dataStore = dataStore;\n};\n\n\nFinancialInstitutionServiceImpl.prototype.getConnection = function() {\n  return this.connection;\n};\n\n\nFinancialInstitutionServiceImpl.prototype.setConnection = function(/*OFXConnection*/ connection) {\n  this.connection = connection;\n};\n\n\n\n\nmodule.exports = FinancialInstitutionServiceImpl;\n","\"use strict\";\n\nvar inherit = require(\"../../util/inherit\");\n\nvar InvestmentAccount = require(\"../InvestmentAccount\");\nvar StatementRange = require(\"../../domain/data/common/StatementRange\");\nvar IncludePosition = require(\"../../domain/data/investment/statements/IncludePosition\");\nvar InvestmentStatementRequestTransaction = require(\"../../domain/data/investment/statements/InvestmentStatementRequestTransaction\");\nvar SecurityListRequestTransaction = require(\"../../domain/data/seclist/SecurityListRequestTransaction\");\nvar MessageSetType = require(\"../../domain/data/MessageSetType\");\nvar InvestmentStatementRequestMessageSet = require(\"../../domain/data/investment/statements/InvestmentStatementRequestMessageSet\");\nvar InvestmentStatementRequest = require(\"../../domain/data/investment/statements/InvestmentStatementRequest\");\nvar SecurityListRequestMessageSet = require(\"../../domain/data/seclist/SecurityListRequestMessageSet\");\nvar SecurityListRequest = require(\"../../domain/data/seclist/SecurityListRequest\");\n\n/**\n * @class\n */\nfunction InvestmentAccountImpl () {\n\n  /**\n   * @name InvestmentAccountImpl#details\n   * @type InvestmentAccountDetails\n   * @access private\n   */\n  this.details = null;\n\n  /**\n   * @name InvestmentAccountImpl#username\n   * @type String\n   * @access private\n   */\n  this.username = null;\n\n  /**\n   * @name InvestmentAccountImpl#password\n   * @type String\n   * @access private\n   */\n  this.password = null;\n\n  /**\n   * @name InvestmentAccountImpl#institution\n   * @type FinancialInstitutionImpl\n   * @access private\n   */\n  this.institution = null;\n}\n\ninherit(InvestmentAccountImpl, \"implements\", InvestmentAccount);\n\n\n\n\nInvestmentAccountImpl.prototype.InvestmentAccountImpl = function(/*InvestmentAccountDetails*/ details, /*String*/ username, /*String*/ password, /*FinancialInstitutionImpl*/ institution) {\n  this.details = details;\n  this.username = username;\n  this.password = password;\n  this.institution = institution;\n};\n\n\nInvestmentAccountImpl.prototype.readStatement = function(/*Date*/ start, /*Date*/ end) {\n  var range = new StatementRange();\n  range.setIncludeTransactions(true);\n  range.setStart(start);\n  range.setEnd(end);\n\n  var request = this.institution.createAuthenticatedRequest(this.username, this.password);\n  var requestTransaction = new InvestmentStatementRequestTransaction();\n  requestTransaction.setWrappedMessage(this.createStatementRequest(this.getDetails(), range));\n  request.getMessageSets().add(this.createStatementRequestMessageSet(requestTransaction));\n\n  var response = this.institution.sendRequest(request);\n  this.institution.doGeneralValidationChecks(request, response);\n\n  return this.unwrapStatementResponse(response);\n};\n\n\nInvestmentAccountImpl.prototype.readSecurityList = function(/*SecurityRequest[]*/ securities) {\n  var request = this.institution.createAuthenticatedRequest(this.username, this.password);\n  var requestTransaction = new SecurityListRequestTransaction();\n  requestTransaction.setWrappedMessage(this.createSecurityListRequest(securities));\n  request.getMessageSets().add(this.createSecurityListRequestMessageSet(requestTransaction));\n\n  var response = this.institution.sendRequest(request);\n  this.institution.doGeneralValidationChecks(request, response);\n\n  return this.unwrapSecurityList(response);\n};\n\n\n/**\n * The details of this account.\n *\n * @return {InvestmentAccountDetails} The details of this account.\n */\nInvestmentAccountImpl.prototype.getDetails = function() {\n  return this.details;\n};\n\n\nInvestmentAccountImpl.prototype.unwrapStatementResponse = function(/*ResponseEnvelope*/ response) {\n  var investmentStatementSet = response.getMessageSet(MessageSetType.investment);\n  if (investmentStatementSet === null) {\n    throw new Error(\"No investment response message set.\");\n  }\n\n  var statementTransactionResponse = investmentStatementSet.getStatementResponse();\n  if (statementTransactionResponse === null) {\n    throw new Error(\"No investment statement response transaction.\");\n  }\n\n  var statement = statementTransactionResponse.getMessage();\n  if (statement === null) {\n    throw new Error(\"No investment statement in the transaction.\");\n  }\n\n  // See if there's a security list -- often sent back with an account statement by servers.\n  var securityListMessageSet = response.getMessageSet(MessageSetType.investment_security);\n  if (securityListMessageSet !== null) {\n    statement.setSecurityList(securityListMessageSet.getSecurityList());\n  }\n\n  return statement;\n};\n\n\nInvestmentAccountImpl.prototype.createStatementRequestMessageSet = function(/*InvestmentStatementRequestTransaction*/ transaction) {\n  var investmentStatementRequest = new InvestmentStatementRequestMessageSet();\n  investmentStatementRequest.setStatementRequest(transaction);\n  return investmentStatementRequest;\n};\n\n\nInvestmentAccountImpl.prototype.createStatementRequest = function(/*InvestmentAccountDetails*/ details, /*StatementRange*/ range) {\n  var investRequest = new InvestmentStatementRequest();\n  investRequest.setAccount(details);\n  investRequest.setStatementRange(range);\n  investRequest.setIncludePosition(new IncludePosition());\n  return investRequest;\n};\n\n\nInvestmentAccountImpl.prototype.createSecurityListRequestMessageSet = function(/*SecurityListRequestTransaction*/ transaction) {\n  var securityListRequest = new SecurityListRequestMessageSet();\n  securityListRequest.setSecurityListRequest(transaction);\n  return securityListRequest;\n};\n\n\nInvestmentAccountImpl.prototype.createSecurityListRequest = function(/*SecurityRequest[]*/ securities) {\n  var securityListRequest = new SecurityListRequest();\n  securityListRequest.setSecurityRequests(securities);\n  return securityListRequest;\n};\n\n\nInvestmentAccountImpl.prototype.unwrapSecurityList = function(/*ResponseEnvelope*/ response) {\n  var securityListSet = response.getMessageSet(MessageSetType.investment_security);\n  if (securityListSet === null) {\n    throw new Error(\"No security list response message set.\");\n  }\n\n  var securityList = securityListSet.getSecurityList();\n  if (securityList === null) {\n    throw new Error(\"No security list response transaction.\");\n  }\n\n  return securityList;\n};\n\n\n\n\nmodule.exports = InvestmentAccountImpl;\n","///*\n// * Licensed under the Apache License, Version 2.0 (the \"License\");\n// * you may not use this file except in compliance with the License.\n// * You may obtain a copy of the License at\n// *\n// *   http://www.apache.org/licenses/LICENSE-2.0\n// *\n// * Unless required by applicable law or agreed to in writing, software\n// * distributed under the License is distributed on an \"AS IS\" BASIS,\n// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// * See the License for the specific language governing permissions and\n// * limitations under the License.\n// */\n//\n//\"use strict\";\n//\n//var inherit = require(\"../inherit\");\n//\n//var FinancialInstitutionData = require(\"client/FinancialInstitutionData\");\n//var FinancialInstitutionDataStore = require(\"client/FinancialInstitutionDataStore\");\n////import org.apache.commons.logging.Log;\n////import org.apache.commons.logging.LogFactory;\n//\n////import javax.xml.bind.JAXBContext;\n////import javax.xml.bind.JAXBException;\n////import java.io.*;\n////import java.util.ArrayList;\n////import java.util.HashMap;\n////import java.util.List;\n////import java.util.Map;\n//\n///**\n// * Implementation of a FI data store that loads its FI data from a local resource.\n// *\n// * @author Ryan Heaton\n// */\n//function LocalResourceFIDataStore () {\n//\n//  /**\n//   * @name LocalResourceFIDataStore#LOG\n//   * @type Log\n//   */\n//  this.LOG = LogFactory.getLog(LocalResourceFIDataStore.class);\n//\n//  /**\n//   * @name LocalResourceFIDataStore#fiData\n//   * @type FinancialInstitutionData>\n//   */\n//  this.fiData = null;\n//}\n//\n//inherit(LocalResourceFIDataStore, \"implements\", FinancialInstitutionDataStore);\n//\n//\n//\n//\n///**\n// * Load the default set of institution data (found at classpath:/institutions.xml).\n// *\n// * @throws IOException If the resource is unreadable or malformed.\n// */\n//LocalResourceFIDataStore.prototype.LocalResourceFIDataStore = function() {\n//  this(LocalResourceFIDataStore.class.getResourceAsStream(\"/META-INF/ofx4j/institutions.xml\"));\n//};\n//\n//\n///**\n// * Load the institution data from a file.\n// *\n// * @param {File} in The file to read.\n// * @throws IOException If the resource is unreadable or malformed.\n// */\n//LocalResourceFIDataStore.prototype.LocalResourceFIDataStore = function(in) {\n//  this(new FileInputStream(in));\n//};\n//\n//\n///**\n// * Load the institution data from a specific stream.\n// *\n// * @param {InputStream} in The stream.\n// * @throws IOException If the resource is unreadable or malformed.\n// */\n//LocalResourceFIDataStore.prototype.LocalResourceFIDataStore = function(in) {\n//  Map<String, FinancialInstitutionData> fiData = new HashMap<String, FinancialInstitutionData>();\n//  if (in != null) {\n//    try {\n//      FIDataList list = (FIDataList) JAXBContext.newInstance(FIDataList.class).createUnmarshaller().unmarshal(in);\n//      if (list != null && list.getData() != null) {\n//        for (BaseFinancialInstitutionData fi : list.getData()) {\n//          fiData.put(fi.getId(), fi);\n//        }\n//      }\n//    }\n//    catch (JAXBException e) {\n//      throw new IOException(e.getMessage());\n//    }\n//\n//    if (LOG.isInfoEnabled()) {\n//      LOG.info(fiData.size() + \" institutions loaded.\");\n//    }\n//  }\n//\n//  this.fiData = fiData;\n//};\n//\n//\n//// Inherited.\n//LocalResourceFIDataStore.prototype.getInstitutionData = function(/*String*/ fid) {\n//  return fiData.get(fid);\n//};\n//\n//\n//// Inherited.\n//LocalResourceFIDataStore.prototype.getInstitutionDataList = function() {\n//  return new ArrayList<FinancialInstitutionData>(fiData.values());\n//};\n//\n//\n///**\n// * Add a financial institution.\n// *\n// * @param {BaseFinancialInstitutionData} data The data to add.\n// */\n//LocalResourceFIDataStore.prototype.add = function(data) {\n//  this.fiData.put(data.getId(), data);\n//};\n//\n//\n///**\n// * Store the data somewhere.\n// *\n// * @param {OutputStream} out The output stream.\n// * @throws IOException If an error occurs.\n// */\n//LocalResourceFIDataStore.prototype.storeData = function(out) {\n//  try {\n//    FIDataList dataList = new FIDataList();\n//    ArrayList<BaseFinancialInstitutionData> data = new ArrayList<BaseFinancialInstitutionData>();\n//    for (FinancialInstitutionData datum : fiData.values()) {\n//      if (datum instanceof BaseFinancialInstitutionData) {\n//        data.add((BaseFinancialInstitutionData) datum);\n//      }\n//    }\n//    dataList.setData(data);\n//    JAXBContext.newInstance(FIDataList.class).createMarshaller().marshal(dataList, out);\n//  }\n//  catch (JAXBException e) {\n//    throw new IOException(e.getMessage());\n//  }\n//};\n//\n//\n//\n//\n//module.exports = LocalResourceFIDataStore;\n","///*\n// * Licensed under the Apache License, Version 2.0 (the \"License\");\n// * you may not use this file except in compliance with the License.\n// * You may obtain a copy of the License at\n// *\n// *   http://www.apache.org/licenses/LICENSE-2.0\n// *\n// * Unless required by applicable law or agreed to in writing, software\n// * distributed under the License is distributed on an \"AS IS\" BASIS,\n// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// * See the License for the specific language governing permissions and\n// * limitations under the License.\n// */\n//\n//\"use strict\";\n//\n//var inherit = require(\"../inherit\");\n//\n//var FinancialInstitutionData = require(\"client/FinancialInstitutionData\");\n//var FinancialInstitutionDataStore = require(\"client/FinancialInstitutionDataStore\");\n////import org.apache.commons.logging.Log;\n////import org.apache.commons.logging.LogFactory;\n////import org.ccil.cowan.tagsoup.Parser;\n////import org.xml.sax.Attributes;\n////import org.xml.sax.InputSource;\n////import org.xml.sax.SAXException;\n////import org.xml.sax.XMLReader;\n////import org.xml.sax.helpers.DefaultHandler;\n//\n////import java.io.IOException;\n////import java.net.MalformedURLException;\n////import java.net.URL;\n////import java.util.*;\n////import java.util.regex.Matcher;\n////import java.util.regex.Pattern;\n//\n///**\n// * Implementation of a financial institution data store that reads its FI data from <a href=\"http://www.ofxhome.com\">OFX Home</a>.\n// *\n// * @author Ryan Heaton\n// */\n//public class OFXHomeFIDataStore implements FinancialInstitutionDataStore {\n//\n//  private static final Log LOG = LogFactory.getLog(OFXHomeFIDataStore.class);\n//  public static final Pattern INSTITUTION_HREF_PATTERN = Pattern.compile(\"http\\\\://www.ofxhome.com/index.php/institution/view/\\\\w+\");\n//  private String url = \"http://www.ofxhome.com/index.php/home/directory/all\";\n//  private Map<String, FinancialInstitutionData> fiData;\n//\n//  public FinancialInstitutionData getInstitutionData(String fid) {\n//    return getFiData().get(fid);\n//  }\n//\n//  public List<FinancialInstitutionData> getInstitutionDataList() {\n//    return new ArrayList<FinancialInstitutionData>(getFiData().values());\n//  }\n//\n//  public synchronized Map<String, FinancialInstitutionData> getFiData() {\n//    if (this.fiData == null) {\n//      this.fiData = new HashMap<String, FinancialInstitutionData>();\n//      try {\n//        initializeFIData();\n//        if (LOG.isInfoEnabled()) {\n//          LOG.info(this.fiData.size() + \" institutions loaded from \" + getUrl());\n//        }\n//      }\n//      catch (Exception e) {\n//        fiData = Collections.emptyMap();\n//      }\n//    }\n//\n//    return fiData;\n//  }\n//\n//  private void initializeFIData() throws IOException, SAXException {\n//    URL url = new URL(getUrl());\n//    XMLReader xmlReader = new Parser();\n//    xmlReader.setFeature(\"http://xml.org/sax/features/namespaces\", false);\n//    xmlReader.setFeature(\"http://xml.org/sax/features/validation\", false);\n//    xmlReader.setContentHandler(new DirectoryContentHandler());\n//    xmlReader.parse(new InputSource(url.openStream()));\n//  }\n//\n//  private BaseFinancialInstitutionData loadInstitutionData(String href) throws IOException, SAXException {\n//    if (LOG.isInfoEnabled()) {\n//      LOG.info(\"Loading institution data from: \" + href);\n//    }\n//    \n//    URL url = new URL(href);\n//    XMLReader xmlReader = new Parser();\n//    xmlReader.setFeature(\"http://xml.org/sax/features/namespaces\", false);\n//    xmlReader.setFeature(\"http://xml.org/sax/features/validation\", false);\n//    InstitutionContentHandler institutionHandler = new InstitutionContentHandler();\n//    xmlReader.setContentHandler(institutionHandler);\n//    xmlReader.parse(new InputSource(url.openStream()));\n//    return institutionHandler.data;\n//  }\n//\n//  /**\n//   * The URL of the OFX home directory.\n//   *\n//   * @return The URL of the OFX home directory.\n//   */\n//  public String getUrl() {\n//    return url;\n//  }\n//\n//  /**\n//   * The URL of the OFX home directory.\n//   *\n//   * @param url The URL of the OFX home directory.\n//   */\n//  public void setUrl(String url) {\n//    this.url = url;\n//  }\n//\n//  private class DirectoryContentHandler extends DefaultHandler {\n//\n//    private Set<String> visited = new TreeSet<String>();\n//\n//    @Override\n//    public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {\n//      if (\"a\".equalsIgnoreCase(qName) || \"a\".equalsIgnoreCase(localName)) {\n//        for (int i = 0; i < attributes.getLength(); i++) {\n//          String href = attributes.getValue(\"href\");\n//          if (href != null) {\n//            Matcher matcher = INSTITUTION_HREF_PATTERN.matcher(href);\n//            if (matcher.matches() && visited.add(href)) {\n//              try {\n//                BaseFinancialInstitutionData data = loadInstitutionData(href);\n//                data.setName(attributes.getValue(\"title\"));\n//                fiData.put(data.getId(), data);\n//              }\n//              catch (IOException e) {\n//                throw new SAXException(e);\n//              }\n//            }\n//          }\n//        }\n//      }\n//    }\n//  }\n//\n//  private enum FIField {\n//    ID,\n//\n//    ORG,\n//\n//    URL,\n//\n//    BROKERID\n//  }\n//\n//  private class InstitutionContentHandler extends DefaultHandler {\n//\n//    private FIField currentField = null;\n//    private StringBuilder fieldNameBuffer = null;\n//    private StringBuilder fieldValueBuffer = null;\n//    private BaseFinancialInstitutionData data;\n//\n//    @Override\n//    public void startDocument() throws SAXException {\n//      this.data = new BaseFinancialInstitutionData(UUID.randomUUID().toString());\n//    }\n//\n//    @Override\n//    public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {\n//      if (\"td\".equalsIgnoreCase(qName)) {\n//        if (this.fieldNameBuffer == null) {\n//          this.fieldNameBuffer = new StringBuilder();\n//        }\n//        else if (currentField != null) {\n//          this.fieldValueBuffer = new StringBuilder();\n//        }\n//      }\n//    }\n//\n//    @Override\n//    public void endElement(String uri, String localName, String qName) throws SAXException {\n//      if (\"td\".equalsIgnoreCase(qName)) {\n//        if (currentField == null) {\n//          if (fieldNameBuffer != null) {\n//            String fieldName = this.fieldNameBuffer.toString().toLowerCase();\n//            if (fieldName.contains(\"fi id\")) {\n//              this.currentField = FIField.ID;\n//              return;\n//            }\n//            else if (fieldName.contains(\"fi org\")) {\n//              this.currentField = FIField.ORG;\n//              return;\n//            }\n//            else if (fieldName.contains(\"fi url\")) {\n//              this.currentField = FIField.URL;\n//              return;\n//            }\n//            else if (fieldName.contains(\"fi broker id\")) {\n//              this.currentField = FIField.BROKERID;\n//              return;\n//            }\n//          }\n//        }\n//        else if (this.fieldValueBuffer != null) {\n//          String fieldValue = this.fieldValueBuffer.toString().trim();\n//          if (\"\".equals(fieldValue)) {\n//            fieldValue = null;\n//          }\n//\n//          switch (currentField) {\n//            case ID:\n//              this.data.setFinancialInstitutionId(fieldValue);\n//              break;\n//            case BROKERID:\n//              this.data.setBrokerId(fieldValue);\n//              break;\n//            case ORG:\n//              this.data.setOrganization(fieldValue);\n//              break;\n//            case URL:\n//              try {\n//                this.data.setOFXURL(new URL(fieldValue));\n//              }\n//              catch (MalformedURLException e) {\n//                //fall through...\n//              }\n//          }\n//        }\n//\n//        this.currentField = null;\n//        this.fieldNameBuffer = null;\n//        this.fieldValueBuffer = null;\n//      }\n//    }\n//\n//    @Override\n//    public void characters(char ch[], int start, int length) throws SAXException {\n//      if (this.currentField != null && fieldValueBuffer != null) {\n//        fieldValueBuffer.append(ch, start, length);\n//      }\n//      else if (fieldNameBuffer != null) {\n//        fieldNameBuffer.append(ch, start, length);\n//      }\n//    }\n//  }\n//\n//}\n","\"use strict\";\n\nmodule.exports = {\n  BankingAccountImpl: require(\"./BankingAccountImpl\"),\n  BaseAccountImpl: require(\"./BaseAccountImpl\"),\n  BaseFinancialInstitutionData: require(\"./BaseFinancialInstitutionData\"),\n  CreditCardAccountImpl: require(\"./CreditCardAccountImpl\"),\n  FIDataList: require(\"./FIDataList\"),\n  FinancialInstitutionImpl: require(\"./FinancialInstitutionImpl\"),\n  FinancialInstitutionServiceImpl: require(\"./FinancialInstitutionServiceImpl\"),\n  InvestmentAccountImpl: require(\"./InvestmentAccountImpl\"),\n  LocalResourceFIDataStore: require(\"./LocalResourceFIDataStore\"),\n  OFXHomeFIDataStore: require(\"./OFXHomeFIDataStore\"),\n};\n","\"use strict\";\n\nmodule.exports = {\n  context: require(\"./context/index\"),\n  impl: require(\"./impl/index\"),\n  main: require(\"./main/index\"),\n  net: require(\"./net/index\"),\n\n  AccountStatement: require(\"./AccountStatement\"),\n  BankAccount: require(\"./BankAccount\"),\n  CreditCardAccount: require(\"./CreditCardAccount\"),\n  FinancialInstitution: require(\"./FinancialInstitution\"),\n  FinancialInstitutionAccount: require(\"./FinancialInstitutionAccount\"),\n  FinancialInstitutionData: require(\"./FinancialInstitutionData\"),\n  FinancialInstitutionDataStore: require(\"./FinancialInstitutionDataStore\"),\n  FinancialInstitutionProfile: require(\"./FinancialInstitutionProfile\"),\n  FinancialInstitutionService: require(\"./FinancialInstitutionService\"),\n  InvestmentAccount: require(\"./InvestmentAccount\"),\n};\n","\"use strict\";\n\nmodule.exports = {\n//  DownloadAccountInfo: require(\"./DownloadAccountInfo\"),\n//  DownloadStatement: require(\"./DownloadStatement\"),\n};\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Connection to an OFX interface.\n *\n * @author Ryan Heaton\n */\nfunction OFXConnection() {\n}\n\n/**\n * Send a request.\n *\n * @param {RequestEnvelope} request The request to send.\n * @param {URL} url The URL to which to send the request.\n * @return {ResponseEnvelope} The response.\n */\nOFXConnection.prototype.sendRequest = function(/*request, url*/) { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = OFXConnection;\n","///*\n// * Licensed under the Apache License, Version 2.0 (the \"License\");\n// * you may not use this file except in compliance with the License.\n// * You may obtain a copy of the License at\n// *\n// *   http://www.apache.org/licenses/LICENSE-2.0\n// *\n// * Unless required by applicable law or agreed to in writing, software\n// * distributed under the License is distributed on an \"AS IS\" BASIS,\n// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// * See the License for the specific language governing permissions and\n// * limitations under the License.\n// */\n//\n//\"use strict\";\n//\n//var inherit = require(\"../inherit\");\n//\n//var RequestEnvelope = require(\"domain/data/RequestEnvelope\");\n//var ResponseEnvelope = require(\"domain/data/ResponseEnvelope\");\n//var OFXParseException = require(\"io/OFXParseException\");\n//var OFXWriter = require(\"io/OFXWriter\");\n//var AggregateMarshaller = require(\"io/AggregateMarshaller\");\n//var OFXV1Writer = require(\"io/v1/OFXV1Writer\");\n//var AggregateUnmarshaller = require(\"io/AggregateUnmarshaller\");\n//\n///**\n// * Base implementation for an OFX connection.\n// *\n// * @class\n// */\n//function OFXV1Connection () {\n//\n//  /**\n//   * @name OFXV1Connection#LOG\n//   * @type Log\n//   */\n//  this.LOG = LogFactory.getLog(OFXV1Connection.class);\n//\n//  /**\n//   * @name OFXV1Connection#marshaller\n//   * @type AggregateMarshaller\n//   * @access private\n//   */\n//  this.marshaller = new AggregateMarshaller();\n//\n//  /**\n//   * @name OFXV1Connection#unmarshaller\n//   * @type AggregateUnmarshaller<ResponseEnvelope>\n//   * @access private\n//   */\n//  this.unmarshaller = new AggregateUnmarshaller<ResponseEnvelope>(ResponseEnvelope.class);\n//}\n//\n//inherit(OFXV1Connection, \"implements\", OFXConnection);\n//\n//\n//\n//\n//// Inherited.\n//OFXV1Connection.prototype.sendRequest = function(/*RequestEnvelope*/ request, /*URL*/ url) {\n//  try {\n//    if (!url.getProtocol().toLowerCase().startsWith(\"http\")) {\n//      throw new IllegalArgumentException(\"Invalid URL: \" + url + \" only http(s) is supported.\");\n//    }\n//\n//    //marshal to memory so we can determine the size...\n//    ByteArrayOutputStream outBuffer = new ByteArrayOutputStream();\n//    OFXWriter ofxWriter = newOFXWriter(outBuffer);\n//    getMarshaller().marshal(request, ofxWriter);\n//    ofxWriter.close();\n//    logRequest(outBuffer);\n//    InputStream in = sendBuffer(url, outBuffer);\n//    return unmarshal(in);\n//  }\n//  catch (IOException e) {\n//    throw new OFXConnectionException(e);\n//  }\n//};\n//\n//\n///**\n// * Log a request buffer.\n// *\n// * @param {ByteArrayOutputStream} outBuffer The buffer to log.\n// */\n//OFXV1Connection.prototype.logRequest = function(outBuffer) {\n//  if (LOG.isInfoEnabled()) {\n//    LOG.info(\"Marshalling \" + outBuffer.size() + \" bytes of the OFX request.\");\n//    if (LOG.isDebugEnabled()) {\n//      LOG.debug(outBuffer.toString(\"utf-8\"));\n//    }\n//  }\n//};\n//\n//\n///**\n// * Send the specified buffer to the specified URL.\n// *\n// * @param {URL} url The URL.\n// * @param {ByteArrayOutputStream} outBuffer The buffer.\n// * @return {InputStream} The response.\n// */\n//OFXV1Connection.prototype.sendBuffer = function(url, outBuffer) {\n//  HttpURLConnection connection = openConnection(url);\n//  connection.setRequestMethod(\"POST\");\n//  connection.setRequestProperty(\"Content-Type\", \"application/x-ofx\");\n//  connection.setRequestProperty(\"Content-Length\", String.valueOf(outBuffer.size()));\n//  connection.setRequestProperty(\"Accept\", \"*/*, application/x-ofx\");\n//  connection.setDoOutput(true);\n//  connection.connect();\n//\n//  OutputStream out  = connection.getOutputStream();\n//  out.write(outBuffer.toByteArray());\n//\n//  InputStream in;\n//  int responseCode = connection.getResponseCode();\n//  if (responseCode >= 200 && responseCode < 300) {\n//    in = connection.getInputStream();\n//  }\n//  else if (responseCode >= 400 && responseCode < 500) {\n//    throw new OFXServerException(\"Error with client request: \" + connection.getResponseMessage(), responseCode);\n//  }\n//  else {\n//    throw new OFXServerException(\"Invalid response code from OFX server: \" + connection.getResponseMessage(), responseCode);\n//  }\n//\n//  return in;\n//};\n//\n//\n///**\n// * Unmarshal the input stream.\n// *\n// * @param {InputStream} in The input stream.\n// * @return {ResponseEnvelope} The response envelope.\n// */\n//OFXV1Connection.prototype.unmarshal = function(in) {\n//  try {\n//    return getUnmarshaller().unmarshal(in);\n//  }\n//  catch (OFXParseException e) {\n//    throw new OFXConnectionException(\"Unable to parse the OFX response.\", e);\n//  }\n//};\n//\n//\n///**\n// * Open a connection to the specified URL.\n// *\n// * @param {URL} url The URL.\n// * @return {HttpURLConnection} The connection.\n// */\n//OFXV1Connection.prototype.openConnection = function(url) {\n//  return (HttpURLConnection) url.openConnection();\n//};\n//\n//\n///**\n// * Create a new OFX writer.\n// *\n// * @param {OutputStream} out The output stream for the writer.\n// * @return {OFXWriter} The OFX writer.\n// */\n//OFXV1Connection.prototype.newOFXWriter = function(out) {\n//  return new OFXV1Writer(out);\n//};\n//\n//\n///**\n// * The marshaller.\n// *\n// * @return {AggregateMarshaller} The marshaller.\n// */\n//OFXV1Connection.prototype.getMarshaller = function() {\n//  return marshaller;\n//};\n//\n//\n///**\n// * The marshaller.\n// *\n// * @param {AggregateMarshaller} marshaller The marshaller.\n// */\n//OFXV1Connection.prototype.setMarshaller = function(marshaller) {\n//  this.marshaller = marshaller;\n//};\n//\n//\n///**\n// * The unmarshaller.\n// *\n// * @return {AggregateUnmarshaller<ResponseEnvelope>} The unmarshaller.\n// */\n//OFXV1Connection.prototype.getUnmarshaller = function() {\n//  return unmarshaller;\n//};\n//\n//\n///**\n// * The unmarshaller.\n// *\n// * @param {AggregateUnmarshaller<ResponseEnvelope>} unmarshaller The unmarshaller.\n// */\n//OFXV1Connection.prototype.setUnmarshaller = function(unmarshaller) {\n//  this.unmarshaller = unmarshaller;\n//};\n//\n//\n//\n//\n//module.exports = OFXV1Connection;\n","///*\n// * Licensed under the Apache License, Version 2.0 (the \"License\");\n// * you may not use this file except in compliance with the License.\n// * You may obtain a copy of the License at\n// *\n// *   http://www.apache.org/licenses/LICENSE-2.0\n// *\n// * Unless required by applicable law or agreed to in writing, software\n// * distributed under the License is distributed on an \"AS IS\" BASIS,\n// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// * See the License for the specific language governing permissions and\n// * limitations under the License.\n// */\n//\n//\"use strict\";\n//\n//var inherit = require(\"../inherit\");\n//\n//var OFXWriter = require(\"io/OFXWriter\");\n//var OFXV2Writer = require(\"io/v2/OFXV2Writer\");\n//\n////import java.io.OutputStream;\n//\n///**\n// * @author Ryan Heaton\n// */\n//function OFXV2Connection () {\n//}\n//\n//inherit(OFXV2Connection, \"extends\", OFXV1Connection);\n//\n//\n//\n//\n//// @Override\n//OFXV2Connection.prototype.newOFXWriter = function(/*OutputStream*/ out) {\n//  return new OFXV2Writer(out);\n//};\n//\n//\n//\n//\n//module.exports = OFXV2Connection;\n","\"use strict\";\n\nmodule.exports = {\n  OFXConnection: require(\"./OFXConnection\"),\n  OFXV1Connection: require(\"./OFXV1Connection\"),\n  OFXV2Connection: require(\"./OFXV2Connection\"),\n};\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * @enum\n * @see \"Section 4, OFX spec\"\n */\nvar ApplicationSecurity = {\n\n  NONE: 0,\n\n  TYPE1: 1\n};\n\n\nmodule.exports = ApplicationSecurity;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * @class\n */\nfunction MessageSetProfile() {\n}\n\n/**\n * Version of the message set.\n *\n * @return {String} The version of the message set.\n */\nMessageSetProfile.prototype.getVersion = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The name of the service provider (sometimes the message set processing is outsourced).\n *\n * @return {String} The name of the service provider (sometimes the message set processing is outsourced).\n */\nMessageSetProfile.prototype.getServiceProviderName = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The URL at which the message set is processed.\n *\n * @return {String} The URL at which the message set is processed.\n */\nMessageSetProfile.prototype.getUrl = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The application-level security required for this message set.\n *\n * @return {ApplicationSecurity} The application-level security required for this message set.\n */\nMessageSetProfile.prototype.getSecurity = function() { throw new Error(\"not implemented\"); };\n\n/**\n * Whether transport-level security is required for this message set.\n *\n * @return {boolean} Whether transport-level security is required for this message set.\n */\nMessageSetProfile.prototype.isSslRequired = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The sign-on realm.\n *\n * @return {String} The sign-on realm.\n */\nMessageSetProfile.prototype.getRealm = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The language.\n *\n * @return {String} The language.\n * @see java.util.Locale#getISO3Language()\n */\nMessageSetProfile.prototype.getLanguage = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The synchronization capability for this message set.\n *\n * @return {SynchronizationCapability} The synchronization capability for this message set.\n */\nMessageSetProfile.prototype.getSyncCapability = function() { throw new Error(\"not implemented\"); };\n\n/**\n * Whether there exists support for resposne-file based error recovery.\n *\n * @return {boolean} Whether there exists support for resposne-file based error recovery.\n */\nMessageSetProfile.prototype.hasFileBasedErrorRecoverySupport = function() { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = MessageSetProfile;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * The message set type, used to define message set order in the envelope.\n *\n * @enum\n * @see \"Section 2.4.5.2, OFX spec\"\n */\nvar MessageSetType = {\n\n  signon: 0,\n\n  signup: 1,\n\n  banking: 2,\n\n  creditcard: 3,\n\n  investment: 4,\n\n  interbank_transfer: 5,\n\n  wire_transfer: 6,\n\n  payments: 7,\n\n  email: 8,\n\n  investment_security: 9,\n\n  profile: 10,\n\n  tax1099: 11\n\n};\n\n\nmodule.exports = MessageSetType;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../meta/ChildAggregate\");\nvar Header = require(\"../../meta/Header\");\nvar ApplicationSecurity = require(\"./ApplicationSecurity\");\nvar UUID = require(\"uuid\");\n\n/**\n * Envelope for enclosing an OFX request.\n *\n * @class\n * @see \"Section 2.4.3, OFX Spec\"\n */\nfunction RequestEnvelope () {\n\n  /**\n   * @name RequestEnvelope#security\n   * @type ApplicationSecurity\n   * @access private\n   */\n  this.security = ApplicationSecurity.NONE;\n\n  /**\n   * @name RequestEnvelope#UID\n   * @type String\n   * @access private\n   */\n  this.UID = null;\n\n  /**\n   * @name RequestEnvelope#lastProcessedUID\n   * @type String\n   * @access private\n   */\n  this.lastProcessedUID = null;\n\n  /**\n   * @name RequestEnvelope#messageSets\n   * @type SortedSet<RequestMessageSet>\n   * @access private\n   */\n  this.messageSets = null;\n}\n\n\n\nAggregate.add(\"OFX\", RequestEnvelope);\n\n\n//headers\n//content\nRequestEnvelope.prototype.RequestEnvelope = function() {\n  this.UID = UUID.v4();\n};\n\n\nRequestEnvelope.prototype.RequestEnvelope = function(/*String*/ UID) {\n  this.UID = UID;\n};\n\n\n/**\n * The security of this envelope.\n *\n * @return {ApplicationSecurity} The security of this envelope.\n * @see \"Section 2.2, OFX spec\"\n */\nRequestEnvelope.prototype.getSecurity = function() {\n  return this.security;\n};\nHeader.add({name: \"SECURITY\", owner: RequestEnvelope, /*type: ApplicationSecurity,*/ fcn: \"getSecurity\"});\n\n\n/**\n * The security of this envelope.\n *\n * @param {ApplicationSecurity} security The security of this envelope.\n * @see \"Section 2.2, OFX spec\"\n */\nRequestEnvelope.prototype.setSecurity = function(security) {\n  this.security = security;\n};\n\n\n/**\n * The UID for the envelope.\n *\n * @return {String} The UID for the envelope.\n * @see \"Section 2.2, OFX spec\"\n */\nRequestEnvelope.prototype.getUID = function() {\n  return this.UID;\n};\nHeader.add({name: \"NEWFILEUID\", owner: RequestEnvelope, /*type: String,*/ fcn: \"getUID\"});\n\n\n/**\n * The UID for the envelope.\n *\n * @param {String} UID The UID for the envelope.\n * @see \"Section 2.2, OFX spec\"\n */\nRequestEnvelope.prototype.setUID = function(UID) {\n  this.UID = UID;\n};\n\n\n/**\n * The UID of the last-processed request/response (used for file-based error recovery).\n *\n * @return {String} The UID of the last-processed request/response (used for file-based error recovery).\n * @see \"Section 2.2, OFX spec\"\n */\nRequestEnvelope.prototype.getLastProcessedUID = function() {\n  return this.lastProcessedUID;\n};\nHeader.add({name: \"OLDFILEUID\", owner: RequestEnvelope, /*type: String,*/ fcn: \"getLastProcessedUID\"});\n\n\n/**\n * The UID of the last-processed request/response (used for file-based error recovery).\n *\n * @param {String} lastProcessedUID The UID of the last-processed request/response (used for file-based error recovery).\n * @see \"Section 2.2, OFX spec\"\n */\nRequestEnvelope.prototype.setLastProcessedUID = function(lastProcessedUID) {\n  this.lastProcessedUID = lastProcessedUID;\n};\n\n\n/**\n * The message sets that make up the content of this request.\n *\n * @return {SortedSet<RequestMessageSet>} The message sets that make up the content of this request.\n * @see \"Section 2.4.5, OFX Spec\"\n */\nRequestEnvelope.prototype.getMessageSets = function() {\n  return this.messageSets;\n};\nChildAggregate.add({order: 1, owner: RequestEnvelope, /*type: SortedSet<RequestMessageSet>,*/ fcn: \"getMessageSets\"});\n\n\n/**\n * The message sets that make up the content of this request.\n *\n * @param {SortedSet<RequestMessageSet>} messageSets The message sets that make up the content of this request.\n * @see \"Section 2.4.5, OFX Spec\"\n */\nRequestEnvelope.prototype.setMessageSets = function(messageSets) {\n  this.messageSets = messageSets;\n};\n\n\n\n\nmodule.exports = RequestEnvelope;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../util/inherit\");\n\n/**\n * A message applicable to a request message set.\n *\n * @class\n */\nfunction RequestMessage () {\n}\n\n\n\n\n\n\n\nmodule.exports = RequestMessage;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * A message set enclosed in an OFX request envelope.\n *\n * @class\n */\nfunction RequestMessageSet () {\n\n  /**\n   * @name RequestMessageSet#version\n   * @type String\n   * @access private\n   */\n  this.version = \"1\";\n}\n\n\nRequestMessageSet.prototype.getType = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The version of this request message.\n *\n * @return {String} The version of this request message.\n */\nRequestMessageSet.prototype.getVersion = function() {\n  return this.version;\n};\n\n/**\n * The version of this request message.\n *\n * @param {String} version The version of this request message.\n */\nRequestMessageSet.prototype.setVersion = function(version) {\n  this.version = version;\n};\n\n/**\n * The request messages for this request message set.\n *\n * @return {RequestMessage[]} The request messages for this request message set.\n */\nRequestMessageSet.prototype.getRequestMessages = function() { throw new Error(\"not implemented\"); };\n\n// Inherited.\nRequestMessageSet.prototype.compareTo = function(/*RequestMessageSet*/ o) {\n  return this.getType().compareTo(o.getType());\n};\n\n\n\n\nmodule.exports = RequestMessageSet;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../meta/ChildAggregate\");\nvar Header = require(\"../../meta/Header\");\nvar MessageSetType = require(\"./MessageSetType\");\n\n/**\n * Envelope for enclosing an OFX response.\n *\n * @class\n * @see \"Section 2.4.3, OFX Spec\"\n */\nfunction ResponseEnvelope () {\n\n  /**\n   * @name ResponseEnvelope#security\n   * @type ApplicationSecurity\n   * @access private\n   */\n  this.security = null;\n\n  /**\n   * @name ResponseEnvelope#UID\n   * @type String\n   * @access private\n   */\n  this.UID = null;\n\n  /**\n   * @name ResponseEnvelope#messageSets\n   * @type SortedSet<ResponseMessageSet>\n   * @access private\n   */\n  this.messageSets = null;\n}\n\n\n\nAggregate.add(\"OFX\", ResponseEnvelope);\n\n\n/**\n * The security of this envelope.\n *\n * @return {ApplicationSecurity} The security of this envelope.\n * @see \"Section 2.2, OFX spec\"\n */\nResponseEnvelope.prototype.getSecurity = function() {\n  return this.security;\n};\nHeader.add({name: \"SECURITY\", owner: ResponseEnvelope, /*type: ApplicationSecurity,*/ fcn: \"getSecurity\"});\n\n\n/**\n * The security of this envelope.\n *\n * @param {ApplicationSecurity} security The security of this envelope.\n * @see \"Section 2.2, OFX spec\"\n */\nResponseEnvelope.prototype.setSecurity = function(security) {\n  this.security = security;\n};\n\n\n/**\n * The UID for the envelope.\n *\n * @return {String} The UID for the envelope.\n * @see \"Section 2.2, OFX spec\"\n */\nResponseEnvelope.prototype.getUID = function() {\n  return this.UID;\n};\nHeader.add({name: \"NEWFILEUID\", owner: ResponseEnvelope, /*type: String,*/ fcn: \"getUID\"});\n\n\n/**\n * The UID for the envelope.\n *\n * @param {String} UID The UID for the envelope.\n * @see \"Section 2.2, OFX spec\"\n */\nResponseEnvelope.prototype.setUID = function(UID) {\n  this.UID = UID;\n};\n\n\n/**\n * The message sets that make up the content of this response.\n *\n * @return {SortedSet<ResponseMessageSet>} The message sets that make up the content of this response.\n * @see \"Section 2.4.5, OFX Spec\"\n */\nResponseEnvelope.prototype.getMessageSets = function() {\n  return this.messageSets;\n};\nChildAggregate.add({order: 1, owner: ResponseEnvelope, /*type: SortedSet<ResponseMessageSet>,*/ fcn: \"getMessageSets\"});\n\n\n/**\n * The message sets that make up the content of this response.\n *\n * @param {SortedSet<ResponseMessageSet>} messageSets The message sets that make up the content of this response.\n * @see \"Section 2.4.5, OFX Spec\"\n */\nResponseEnvelope.prototype.setMessageSets = function(messageSets) {\n  this.messageSets = messageSets;\n};\n\n\n/**\n * Helper method for looking up the signon response.\n *\n * @return {SignonResponse} The signon response, or null if none found.\n */\nResponseEnvelope.prototype.getSignonResponse = function() {\n  var type = MessageSetType.signon;\n  var message = this.getMessageSet(type);\n\n  if (message !== null) {\n    return message.getSignonResponse();\n  }\n  else {\n    return null;\n  }\n};\n\n\n/**\n * Get the message set of the specified type.\n *\n * @param {MessageSetType} type The type.\n * @return {ResponseMessageSet} The message set, or null.\n */\nResponseEnvelope.prototype.getMessageSet = function(type) {\n  var message = null;\n  if (this.messageSets !== null) {\n    for (var messageSet in this.messageSets) {\n      if (messageSet.getType() == type) {\n        message = messageSet;\n        break;\n      }\n    }\n  }\n  return message;\n};\n\n\n\n\nmodule.exports = ResponseEnvelope;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * A message applicable to a response message set.\n *\n * @class\n */\nfunction ResponseMessage () {\n}\n\n\n\n\n\n/**\n * The name of the response message.\n *\n * @return {String} The name of the response message.\n */\nResponseMessage.prototype.getResponseMessageName = function() { throw new Error(\"not implemented\"); };\n\n\n\n\nmodule.exports = ResponseMessage;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * A message set enclosed in a response envelope.\n *\n * @class\n */\nfunction ResponseMessageSet () {\n\n  /**\n   * @name ResponseMessageSet#version\n   * @type String\n   * @access private\n   */\n  this.version = \"1\";\n}\n\n\nResponseMessageSet.prototype.getType = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The version of this message set.\n *\n * @return {String} The version of this message set.\n */\nResponseMessageSet.prototype.getVersion = function() {\n  return this.version;\n};\n\n/**\n * The version of this message set.\n *\n * @param {String} version The version of this message set.\n */\nResponseMessageSet.prototype.setVersion = function(version) {\n  this.version = version;\n};\n\n/**\n * The list of response messages.\n *\n * @return {ResponseMessage[]} The list of response messages.\n */\nResponseMessageSet.prototype.getResponseMessages = function() { throw new Error(\"not implemented\"); };\n\n// Inherited.\nResponseMessageSet.prototype.compareTo = function(/*ResponseMessageSet*/ o) {\n  return this.getType().compareTo(o.getType());\n};\n\n\n\n\nmodule.exports = ResponseMessageSet;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * @class\n */\nfunction SignonProfile() {\n}\n\n/**\n * The name of the sign-on realm.\n *\n * @return {String} The name of the sign-on realm.\n */\nSignonProfile.prototype.getRealm = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The minimum number of password characters.\n *\n * @return {Integer} The minimum number of password characters.\n */\nSignonProfile.prototype.getMinPasswordCharacters = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The maximum number of password characters.\n *\n * @return {Integer} The maximum number of password characters.\n */\nSignonProfile.prototype.getMaxPasswordCharacters = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The type of password characters supported.\n *\n * @return {CharacterType} The type of password characters supported.\n */\nSignonProfile.prototype.getPasswordCharacterType = function() { throw new Error(\"not implemented\"); };\n\n/**\n * Whether the password is case-sensitive.\n *\n * @return {Boolean} Whether the password is case-sensitive.\n */\nSignonProfile.prototype.getPasswordCaseSensitive = function() { throw new Error(\"not implemented\"); };\n\n/**\n * Whether special characters are allowed in the password.\n *\n * @return {Boolean} Whether special characters are allowed in the password.\n */\nSignonProfile.prototype.getPasswordSpecialCharsAllowed = function() { throw new Error(\"not implemented\"); };\n\n/**\n * Whether spaces are allowed in the password.\n *\n * @return {Boolean} Whether spaces are allowed in the password.\n */\nSignonProfile.prototype.getPasswordSpacesAllowed = function() { throw new Error(\"not implemented\"); };\n\n/**\n * Whether the server can process a password change request for this realm.\n *\n * @return {Boolean} Whether the server can process a password change request for this realm.\n */\nSignonProfile.prototype.getChangePasswordSupported = function() { throw new Error(\"not implemented\"); };\n\n/**\n * Whether the server requires the user to change their password as part of their first signon.\n *\n * @return {Boolean} Whether the server requires the user to change their password as part of their first signon.\n */\nSignonProfile.prototype.getChangePasswordFirstRequired = function() { throw new Error(\"not implemented\"); };\n\n/**\n * Label for a set of additional credentials that the user must supply.\n *\n * @return {String} Label for a set of additional credentials that the user must supply.\n */\nSignonProfile.prototype.getAdditionalCredientialsLabel1 = function() { throw new Error(\"not implemented\"); };\n\n/**\n * Label for a set of additional credentials that the user must supply.\n *\n * @return {String} Label for a set of additional credentials that the user must supply.\n */\nSignonProfile.prototype.getAdditionalCredientialsLabel2 = function() { throw new Error(\"not implemented\"); };\n\n/**\n * Whether a client UID is required for teh sign-on.\n *\n * @return {Boolean} Whether a client UID is required for teh sign-on.\n */\nSignonProfile.prototype.getClientUIDRequired = function() { throw new Error(\"not implemented\"); };\n\n/**\n * Whether an auth token is required for the sign-on.\n *\n * @return {Boolean} Whether an auth token is required for the sign-on.\n */\nSignonProfile.prototype.getAuthTokenRequiredForFirstSignon = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The label of the auth token.\n *\n * @return {String} The label of the auth token.\n */\nSignonProfile.prototype.getAuthTokenLabel = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The URL for the auth token information.\n *\n * @return {String} The URL for the auth token information.\n */\nSignonProfile.prototype.getAuthTokenInfoURL = function() { throw new Error(\"not implemented\"); };\n\n/**\n * Whether MFA is supported.\n *\n * @return {Boolean} Whether MFA is supported.\n */\nSignonProfile.prototype.getMfaSupported = function() { throw new Error(\"not implemented\"); };\n\n/**\n * Whether an MFA challenge request is required for the first sign-on into this realm.\n *\n * @return {Boolean} Whether an MFA challenge request is required for the first sign-on into this realm.\n */\nSignonProfile.prototype.getMfaChallengeRequiredForFirstSignon = function() { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = SignonProfile;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../util/inherit\");\n\nvar Element = require(\"../../meta/Element\");\nvar UUID = require(\"uuid\");\nvar RequestMessage = require(\"./ResponseMessage\");\n\n/**\n * A request message wrapped in a transaction.\n *\n * @class\n * @see \"Section 2.4.6, OFX Spec\"\n * @param {RequestMessage} M\n */\nfunction TransactionWrappedRequestMessage(/*M*/) {\n\n  /**\n   * constructor\n   */\n  var c = function() {\n    var UID;\n    if(arguments.length === 1) {\n      UID = arguments[0];\n    } else {\n      UID = UUID.v4();\n    }\n\n    /**\n     * @type String\n     */\n    this.UID = UID;\n\n    /**\n     * @type String\n     */\n    this.clientCookie = null;\n\n    /**\n     * @type String\n     */\n    this.transactionAuthorizationNumber = null;\n  };\n\n  /**\n   * UID of this transaction.\n   *\n   * @return UID of this transaction.\n   */\n  c.prototype.getUID = function() {\n    return this.UID;\n  };\n  Element.add({name: \"TRNUID\", required: true, order: 0, owner: c, /*type: String,*/ fcn: \"getUID\"});\n\n\n  /**\n   * UID of this transaction.\n   *\n   * @param {String} UID UID of this transaction.\n   */\n  c.prototype.setUID = function(UID) {\n    this.UID = UID;\n  };\n\n  /**\n   * Client cookie (echoed back by the response).\n   *\n   * @return {String} Client cookie (echoed back by the response).\n   */\n  c.prototype.getClientCookie = function() {\n    return this.clientCookie;\n  };\n  Element.add({name: \"CLTCOOKIE\", order: 10, owner: c, /*type: String,*/ fcn: \"getClientCookie\"});\n\n  /**\n   * Client cookie (echoed back by the response).\n   *\n   * @param {String} clientCookie Client cookie (echoed back by the response).\n   */\n  c.prototype.setClientCookie = function(clientCookie) {\n    this.clientCookie = clientCookie;\n  };\n\n  /**\n   * The transaction authorization number.\n   *\n   * @return {String} The transaction authorization number.\n   */\n  c.prototype.getTransactionAuthorizationNumber = function() {\n    return this.transactionAuthorizationNumber;\n  };\n  Element.add({name: \"TAN\", order: 20, owner: c, /*type: String,*/ fcn: \"getTransactionAuthorizationNumber\"});\n\n  /**\n   * The transaction authorization number.\n   *\n   * @param {String} transactionAuthorizationNumber The transaction authorization number.\n   */\n  c.prototype.setTransactionAuthorizationNumber = function(transactionAuthorizationNumber) {\n    this.transactionAuthorizationNumber = transactionAuthorizationNumber;\n  };\n  \n  \n  /**\n   * Set the wrapped message.\n   *\n   * @param {M} message The wrapped message.\n   */\n  c.prototype.setWrappedMessage = function(/*message*/) { throw new Error(\"not implemented\"); };\n\n\n  inherit(c, 'extends', RequestMessage);\n  return c;\n}\n\nmodule.exports = TransactionWrappedRequestMessage;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../util/inherit\");\n\nvar StatusHolder = require(\"./common/StatusHolder\");\nvar ChildAggregate = require(\"../../meta/ChildAggregate\");\nvar Element = require(\"../../meta/Element\");\nvar Aggregate = require(\"../../meta/Aggregate\");\nvar ResponseMessage = require(\"./ResponseMessage\");\n\n/**\n * A response message wrapped in a transaction.\n *\n * @author Ryan Heaton\n * @see \"Section 2.4.6, OFX Spec\"\n */\nfunction TransactionWrappedResponseMessage(/*M*/) {\n\n  var c = function() {\n    /**\n     * @type String\n     */\n    this.UID = null;\n\n    /**\n     * @type String\n     */\n    this.clientCookie = null;\n\n    /**\n     * @type Status\n     */\n    this.status = null;\n  };\n\n  /**\n   * UID of this transaction.\n   *\n   * @return {String} UID of this transaction.\n   */\n  c.prototype.getUID = function() {\n    return this.UID;\n  };\n  Element.add({name: \"TRNUID\", required: true, order: 0, owner: c, /*type: String,*/ fcn: \"getUID\"});\n\n  /**\n   * UID of this transaction.\n   *\n   * @param {String} UID UID of this transaction.\n   */\n  c.prototype.setUID = function(UID) {\n    this.UID = UID;\n  };\n\n  /**\n   * Client cookie (echoed back by the response).\n   *\n   * @return {String} Client cookie (echoed back by the response).\n   */\n  c.prototype.getClientCookie = function() {\n    return this.clientCookie;\n  };\n  Element.add({name: \"CLTCOOKIE\", order: 20, owner: c, /*type: String,*/ fcn: \"getClientCookie\"});\n\n  /**\n   * Client cookie (echoed back by the response).\n   *\n   * @param {String} clientCookie Client cookie (echoed back by the response).\n   */\n  c.prototype.setClientCookie = function(clientCookie) {\n    this.clientCookie = clientCookie;\n  };\n\n  // Inherited.\n  c.prototype.getStatusHolderName = function() {\n    return this.getResponseMessageName();\n  };\n\n  // Inherited.\n  c.prototype.getResponseMessageName = function() {\n    var name = \"transaction response\";\n    if (this.getWrappedMessage() !== null) {\n      name = this.getWrappedMessage().getResponseMessageName() + \" transaction\";\n    }\n    else if (this.getClass().isAnnotationPresent(Aggregate.class)) {\n      name = this.getClass().getAnnotation(Aggregate.class).value() + \" transaction\";\n    }\n\n    return name;\n  };\n\n  /**\n   * Status of the transaction.\n   *\n   * @return {Status} Status of the transaction.\n   */\n  c.prototype.getStatus = function() {\n    return this.status;\n  };\n  ChildAggregate.add({required: true, order: 10, owner: c, /*type: Status,*/ fcn: \"getStatus\"});\n\n  /**\n   * Status of the transaction.\n   *\n   * @param {Status} status Status of the transaction.\n   */\n  c.prototype.setStatus = function(status) {\n    this.status = status;\n  };\n\n  /**\n   * Get the wrapped message.\n   *\n   * @return The wrapped message.\n   */\n  c.prototype.getWrappedMessage = function() { throw new Error(\"not implemented\"); };\n\n  inherit(c, 'extends', ResponseMessage);\n  inherit(c, 'implements', StatusHolder);\n  return c;\n}\n\nmodule.exports = TransactionWrappedResponseMessage;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * @see \"OFX Spec, Section 11.3.1.1\"\n * @enum\n */\nvar AccountType = {\n\n  CHECKING: 0,\n\n  SAVINGS: 1,\n\n  MONEYMRKT: 2,\n\n  CREDITLINE: 3\n  \n};\n\n\nmodule.exports = AccountType;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar AccountDetails = require(\"../common/AccountDetails\");\n\n/**\n * Base bank account details.\n *\n * @class\n * @augments AccountDetails\n * @see \"OFX Spec, Section 11.3.1\"\n */\nfunction BankAccountDetails () {\n\n  /**\n   * @name BankAccountDetails#bankId\n   * @type String\n   * @access private\n   */\n  this.bankId = null;\n\n  /**\n   * @name BankAccountDetails#branchId\n   * @type String\n   * @access private\n   */\n  this.branchId = null;\n\n  /**\n   * @name BankAccountDetails#accountNumber\n   * @type String\n   * @access private\n   */\n  this.accountNumber = null;\n\n  /**\n   * @name BankAccountDetails#accountType\n   * @type AccountType\n   * @access private\n   */\n  this.accountType = null;\n\n  /**\n   * @name BankAccountDetails#accountKey\n   * @type String\n   * @access private\n   */\n  this.accountKey = null;\n}\n\ninherit(BankAccountDetails, \"implements\", AccountDetails);\n\n\nAggregate.add(\"BankAccountDetails\", BankAccountDetails);\n\n\n/**\n * The routing and transit number.\n *\n * @return {String} The routing and transit number.\n */\nBankAccountDetails.prototype.getBankId = function() {\n  return this.bankId;\n};\nElement.add({name: \"BANKID\", required: true, order: 0, owner: BankAccountDetails, /*type: String,*/ fcn: \"getBankId\"});\n\n\n/**\n * The routing and transit number.\n *\n * @param {String} bankId The routing and transit number.\n */\nBankAccountDetails.prototype.setBankId = function(bankId) {\n  this.bankId = bankId;\n};\n\n\n/**\n * The routing and transit number.\n *\n * @return {String} The routing and transit number.\n */\nBankAccountDetails.prototype.getRoutingNumber = function() {\n  return this.getBankId();\n};\n\n\n/**\n * The routing and transit number.\n *\n * @param {String} routingNumber The routing and transit number.\n */\nBankAccountDetails.prototype.setRoutingNumber = function(routingNumber) {\n  this.setBankId(routingNumber);\n};\n\n\n/**\n * The branch id.\n *\n * @return {String} The branch id.\n */\nBankAccountDetails.prototype.getBranchId = function() {\n  return this.branchId;\n};\nElement.add({name: \"BRANCHID\", order: 10, owner: BankAccountDetails, /*type: String,*/ fcn: \"getBranchId\"});\n\n\n/**\n * The branch id.\n *\n * @param {String} branchId The branch id.\n */\nBankAccountDetails.prototype.setBranchId = function(branchId) {\n  this.branchId = branchId;\n};\n\n\n/**\n * The account number.\n *\n * @return {String} The account number.\n */\nBankAccountDetails.prototype.getAccountNumber = function() {\n  return this.accountNumber;\n};\nElement.add({name: \"ACCTID\", required: true, order: 20, owner: BankAccountDetails, /*type: String,*/ fcn: \"getAccountNumber\"});\n\n\n/**\n * The account number.\n *\n * @param {String} accountNumber The account number.\n */\nBankAccountDetails.prototype.setAccountNumber = function(accountNumber) {\n  this.accountNumber = accountNumber;\n};\n\n\n/**\n * The account type.\n *\n * @return {AccountType} The account type.\n */\nBankAccountDetails.prototype.getAccountType = function() {\n  return this.accountType;\n};\nElement.add({name: \"ACCTTYPE\", required: true, order: 30, owner: BankAccountDetails, /*type: AccountType,*/ fcn: \"getAccountType\"});\n\n\n/**\n * The account type.\n *\n * @param {AccountType} accountType The account type.\n */\nBankAccountDetails.prototype.setAccountType = function(accountType) {\n  this.accountType = accountType;\n};\n\n\n/**\n * The account key.\n *\n * @return {String} The account key.\n */\nBankAccountDetails.prototype.getAccountKey = function() {\n  return this.accountKey;\n};\nElement.add({name: \"ACCTKEY\", order: 40, owner: BankAccountDetails, /*type: String,*/ fcn: \"getAccountKey\"});\n\n\n/**\n * The account key.\n *\n * @param {String} accountKey The account key.\n */\nBankAccountDetails.prototype.setAccountKey = function(accountKey) {\n  this.accountKey = accountKey;\n};\n\n\n\n\nmodule.exports = BankAccountDetails;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar AccountInfo = require(\"../common/AccountInfo\");\n\n/**\n * @class\n * @augments AccountInfo\n */\nfunction BankAccountInfo () {\n\n  /**\n   * @name BankAccountInfo#bankAccount\n   * @type BankAccountDetails\n   * @access private\n   */\n  this.bankAccount = null;\n\n  /**\n   * @name BankAccountInfo#supportsTransactionDetailOperations\n   * @type Boolean\n   * @access private\n   */\n  this.supportsTransactionDetailOperations = null;\n\n  /**\n   * @name BankAccountInfo#supportsTransferToOtherAccountOperations\n   * @type Boolean\n   * @access private\n   */\n  this.supportsTransferToOtherAccountOperations = null;\n\n  /**\n   * @name BankAccountInfo#supportsTransferFromOtherAccountOperations\n   * @type Boolean\n   * @access private\n   */\n  this.supportsTransferFromOtherAccountOperations = null;\n\n  /**\n   * @name BankAccountInfo#status\n   * @type AccountStatus\n   * @access private\n   */\n  this.status = null;\n}\n\ninherit(BankAccountInfo, \"implements\", AccountInfo);\n\n\nAggregate.add(\"BANKACCTINFO\", BankAccountInfo);\n\n\n/**\n * The bank account this information is referencing.\n *\n * @return {BankAccountDetails} The bank account this information is referencing.\n */\nBankAccountInfo.prototype.getBankAccount = function() {\n  return this.bankAccount;\n};\nChildAggregate.add({name: \"BANKACCTFROM\", required: true, order: 0, owner: BankAccountInfo, /*type: BankAccountDetails,*/ fcn: \"getBankAccount\"});\n\n\n/**\n * The bank account this information is referencing.\n *\n * @param {BankAccountDetails} bankAccount The bank account this information is referencing.\n */\nBankAccountInfo.prototype.setBankAccount = function(bankAccount) {\n  this.bankAccount = bankAccount;\n};\n\n\n// Inherited.\nBankAccountInfo.prototype.getAccountDetails = function() {\n  return this.getBankAccount();\n};\n\n\n/**\n * Whether this account supports download of transaction details.\n *\n * @return {Boolean} Whether this account supports download of transaction details.\n */\nBankAccountInfo.prototype.getSupportsTransactionDetailOperations = function() {\n  return this.supportsTransactionDetailOperations;\n};\nElement.add({name: \"SUPTXDL\", required: true, order: 10, owner: BankAccountInfo, /*type: Boolean,*/ fcn: \"getSupportsTransactionDetailOperations\"});\n\n\n/**\n * Whether this account supports download of transaction details.\n *\n * @param {Boolean} supportsTransactionDetailOperations Whether this account supports download of transaction details.\n */\nBankAccountInfo.prototype.setSupportsTransactionDetailOperations = function(supportsTransactionDetailOperations) {\n  this.supportsTransactionDetailOperations = supportsTransactionDetailOperations;\n};\n\n\n/**\n * Whether this account supports transfer operations to other accounts.\n *\n * @return {Boolean} Whether this account supports transfer operations to other accounts.\n */\nBankAccountInfo.prototype.getSupportsTransferToOtherAccountOperations = function() {\n  return this.supportsTransferToOtherAccountOperations;\n};\nElement.add({name: \"XFERSRC\", required: true, order: 20, owner: BankAccountInfo, /*type: Boolean,*/ fcn: \"getSupportsTransferToOtherAccountOperations\"});\n\n\n/**\n * Whether this account supports transfer operations to other accounts.\n *\n * @param {Boolean} supportsTransferToOtherAccountOperations Whether this account supports transfer operations to other accounts.\n */\nBankAccountInfo.prototype.setSupportsTransferToOtherAccountOperations = function(supportsTransferToOtherAccountOperations) {\n  this.supportsTransferToOtherAccountOperations = supportsTransferToOtherAccountOperations;\n};\n\n\n/**\n * Whether this account supports transfer operations from other accounts.\n *\n * @return {Boolean} Whether this account supports transfer operations from other accounts.\n */\nBankAccountInfo.prototype.getSupportsTransferFromOtherAccountOperations = function() {\n  return this.supportsTransferFromOtherAccountOperations;\n};\nElement.add({name: \"XFERDEST\", required: true, order: 30, owner: BankAccountInfo, /*type: Boolean,*/ fcn: \"getSupportsTransferFromOtherAccountOperations\"});\n\n\n/**\n * Whether this account supports transfer operations from other accounts.\n *\n * @param {Boolean} supportsTransferFromOtherAccountOperations Whether this account supports transfer operations from other accounts.\n */\nBankAccountInfo.prototype.setSupportsTransferFromOtherAccountOperations = function(supportsTransferFromOtherAccountOperations) {\n  this.supportsTransferFromOtherAccountOperations = supportsTransferFromOtherAccountOperations;\n};\n\n\n/**\n * The account status.\n *\n * @return {AccountStatus} The account status.\n */\nBankAccountInfo.prototype.getStatus = function() {\n  return this.status;\n};\nElement.add({name: \"SVCSTATUS\", required: true, order: 40, owner: BankAccountInfo, /*type: AccountStatus,*/ fcn: \"getStatus\"});\n\n\n/**\n * The account status.\n *\n * @param {AccountStatus} status The account status.\n */\nBankAccountInfo.prototype.setStatus = function(status) {\n  this.status = status;\n};\n\n\n\n\nmodule.exports = BankAccountInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar StatementRequest = require(\"../common/StatementRequest\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\n\n/**\n * @class\n * @augments StatementRequest\n */\nfunction BankStatementRequest () {\n\n  /**\n   * @name BankStatementRequest#account\n   * @type BankAccountDetails\n   * @access private\n   */\n  this.account = null;\n}\n\ninherit(BankStatementRequest, \"extends\", StatementRequest);\n\n\nAggregate.add(\"STMTRQ\", BankStatementRequest);\n\n\n/**\n * The account details.\n *\n * @return {BankAccountDetails} The account details.\n */\nBankStatementRequest.prototype.getAccount = function() {\n  return this.account;\n};\nChildAggregate.add({name: \"BANKACCTFROM\", required: true, order: 0, owner: BankStatementRequest, /*type: BankAccountDetails,*/ fcn: \"getAccount\"});\n\n\n/**\n * The account details.\n *\n * @param {BankAccountDetails} account The account details.\n */\nBankStatementRequest.prototype.setAccount = function(account) {\n  this.account = account;\n};\n\n\n\n\nmodule.exports = BankStatementRequest;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar BankStatementRequest = require(\"./BankStatementRequest\");\nvar TransactionWrappedRequestMessage = require(\"../TransactionWrappedRequestMessage\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\n\n/**\n * @class\n * @augments TransactionWrappedRequestMessage\n */\nfunction BankStatementRequestTransaction () {\n\n  /**\n   * @name BankStatementRequestTransaction#message\n   * @type BankStatementRequest\n   * @access private\n   */\n  this.message = null;\n}\n\ninherit(BankStatementRequestTransaction, \"extends\", new TransactionWrappedRequestMessage(BankStatementRequest));\n\n\nAggregate.add(\"STMTTRNRQ\", BankStatementRequestTransaction);\n\n\n/**\n * The message.\n *\n * @return {BankStatementRequest} The message.\n */\nBankStatementRequestTransaction.prototype.getMessage = function() {\n  return this.message;\n};\nChildAggregate.add({required: true, order: 30, owner: BankStatementRequestTransaction, /*type: BankStatementRequest,*/ fcn: \"getMessage\"});\n\n\n/**\n * The message.\n *\n * @param {BankStatementRequest} message The message.\n *\n */\nBankStatementRequestTransaction.prototype.setMessage = function(message) {\n  this.message = message;\n};\n\n\n// Inherited.\nBankStatementRequestTransaction.prototype.setWrappedMessage = function(/*BankStatementRequest*/ message) {\n  this.setMessage(message);\n};\n\n\n\n\nmodule.exports = BankStatementRequestTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar StatementResponse = require(\"../common/StatementResponse\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\n\n/**\n * @class\n * @augments StatementResponse\n */\nfunction BankStatementResponse () {\n\n  /**\n   * @name BankStatementResponse#account\n   * @type BankAccountDetails\n   * @access private\n   */\n  this.account = null;\n}\n\ninherit(BankStatementResponse, \"extends\", StatementResponse);\n\n\nAggregate.add(\"STMTRS\", BankStatementResponse);\n\n\nBankStatementResponse.prototype.getResponseMessageName = function() {\n  return \"bank statement\";\n};\n\n\n/**\n * The account for the statement.\n *\n * @return {BankAccountDetails} The account for the statement.\n */\nBankStatementResponse.prototype.getAccount = function() {\n  return this.account;\n};\nChildAggregate.add({name:\"BANKACCTFROM\", order: 10, owner: BankStatementResponse, /*type: BankAccountDetails,*/ fcn: \"getAccount\"});\n\n\n/**\n * The account for the statement.\n *\n * @param {BankAccountDetails} account The account for the statement.\n */\nBankStatementResponse.prototype.setAccount = function(account) {\n  this.account = account;\n};\n\n\n\n\nmodule.exports = BankStatementResponse;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar BankStatementResponse = require(\"./BankStatementResponse\");\nvar TransactionWrappedResponseMessage = require(\"../TransactionWrappedResponseMessage\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\n\n/**\n * @class\n * @augments TransactionWrappedResponseMessage\n */\nfunction BankStatementResponseTransaction () {\n\n  /**\n   * @name BankStatementResponseTransaction#message\n   * @type BankStatementResponse\n   * @access private\n   */\n  this.message = null;\n}\n\ninherit(BankStatementResponseTransaction, \"extends\", new TransactionWrappedResponseMessage(BankStatementResponse));\n\n\nAggregate.add(\"STMTTRNRS\", BankStatementResponseTransaction);\n\n\n/**\n * The message.\n *\n * @return {BankStatementResponse} The message.\n */\nBankStatementResponseTransaction.prototype.getMessage = function() {\n  return this.message;\n};\nChildAggregate.add({required: true, order: 30, owner: BankStatementResponseTransaction, /*type: BankStatementResponse,*/ fcn: \"getMessage\"});\n\n\n/**\n * The message.\n *\n * @param {BankStatementResponse} message The message.\n */\nBankStatementResponseTransaction.prototype.setMessage = function(message) {\n  this.message = message;\n};\n\n\n// Inherited.\nBankStatementResponseTransaction.prototype.getWrappedMessage = function() {\n  return this.getMessage();\n};\n\n\n\n\nmodule.exports = BankStatementResponseTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar MessageSetType = require(\"../MessageSetType\");\nvar RequestMessageSet = require(\"../RequestMessageSet\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\n\n/**\n * @class\n * @augments BankingRequestMessageSet\n */\nfunction BankingRequestMessageSet () {\n\n  /**\n   * @name BankingRequestMessageSet#statementRequest\n   * @type BankStatementRequestTransaction\n   * @access private\n   */\n  this.statementRequest = null;\n}\n\ninherit(BankingRequestMessageSet, \"extends\", RequestMessageSet);\n\n\nAggregate.add(\"BANKMSGSRQV1\", BankingRequestMessageSet);\n\n\nBankingRequestMessageSet.prototype.getType = function() {\n  return MessageSetType.banking;\n};\n\n\n/**\n * The statement request.\n *\n * @return {BankStatementRequestTransaction} The statement request.\n */\nBankingRequestMessageSet.prototype.getStatementRequest = function() {\n  return this.statementRequest;\n};\nChildAggregate.add({order: 0, owner: BankingRequestMessageSet, /*type: BankStatementRequestTransaction,*/ fcn: \"getStatementRequest\"});\n\n\n/**\n * The statement request.\n *\n * @param {BankStatementRequestTransaction} statementRequest The statement request.\n */\nBankingRequestMessageSet.prototype.setStatementRequest = function(statementRequest) {\n  this.statementRequest = statementRequest;\n};\n\n\n// Inherited.\nBankingRequestMessageSet.prototype.getRequestMessages = function() {\n  var requestMessages = [];\n  if (this.getStatementRequest() !== null) {\n    requestMessages.push(this.getStatementRequest());\n  }\n  return requestMessages;\n};\n\n\n\n\nmodule.exports = BankingRequestMessageSet;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar MessageSetType = require(\"../MessageSetType\");\nvar ResponseMessageSet = require(\"../ResponseMessageSet\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\n\n/**\n * @class\n * @augments ResponseMessageSet\n */\nfunction BankingResponseMessageSet () {\n\n  /**\n   * @name BankingResponseMessageSet#statementResponses\n   * @type List<BankStatementResponseTransaction>\n   * @access private\n   */\n  this.statementResponses = null;\n}\n\ninherit(BankingResponseMessageSet, \"extends\", ResponseMessageSet);\n\n\nAggregate.add(\"BANKMSGSRSV1\", BankingResponseMessageSet);\n\n\nBankingResponseMessageSet.prototype.getType = function() {\n  return MessageSetType.banking;\n};\n\n\n/**\n * The statement response list.\n *\n * Most OFX files have a single statement response, except MT2OFX\n * which outputs OFX with multiple statement responses\n * in a single banking response message set.\n *\n * @return {BankStatementResponseTransaction[]} The statement response list.\n */\nBankingResponseMessageSet.prototype.getStatementResponses = function() {\n  return this.statementResponses;\n};\nChildAggregate.add({order: 0, owner: BankingResponseMessageSet, /*type: BankStatementResponseTransaction[],*/ fcn: \"getStatementResponses\"});\n\n\n/**\n * The statement response.\n *\n * @param {BankStatementResponseTransaction[]} statementResponses The statement responses.\n */\nBankingResponseMessageSet.prototype.setStatementResponses = function(statementResponses) {\n  this.statementResponses = statementResponses;\n};\n\n\n// Inherited.\nBankingResponseMessageSet.prototype.getResponseMessages = function() {\n  return [this.statementResponses];\n};\n\n\n/**\n * The first statement response.\n *\n * @return {BankStatementResponseTransaction} the first bank statement response.\n * @deprecated Use getStatementResponses() because sometimes there are multiple responses\n */\nBankingResponseMessageSet.prototype.getStatementResponse = function() {\n  return this.statementResponses === null || this.statementResponses.length === 0 ? null : this.statementResponses[0];\n};\n\n\nBankingResponseMessageSet.prototype.setStatementResponse = function(/*BankStatementResponseTransaction*/ statementResponse) {\n  this.statementResponses = [statementResponse];\n};\n\n\n\n\nmodule.exports = BankingResponseMessageSet;\n","\"use strict\";\n\nmodule.exports = {\n  AccountType: require(\"./AccountType\"),\n  BankAccountDetails: require(\"./BankAccountDetails\"),\n  BankAccountInfo: require(\"./BankAccountInfo\"),\n  BankingRequestMessageSet: require(\"./BankingRequestMessageSet\"),\n  BankingResponseMessageSet: require(\"./BankingResponseMessageSet\"),\n  BankStatementRequest: require(\"./BankStatementRequest\"),\n  BankStatementRequestTransaction: require(\"./BankStatementRequestTransaction\"),\n  BankStatementResponse: require(\"./BankStatementResponse\"),\n  BankStatementResponseTransaction: require(\"./BankStatementResponseTransaction\"),\n};\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Common details about an account.\n *\n * @class\n */\nfunction AccountDetails() {\n}\n\n/**\n * The account number.\n *\n * @return {String} The account number.\n */\nAccountDetails.prototype.getAccountNumber = function() { throw new Error(\"not implemented\"); };\n\n/**\n * The account key.\n *\n * @return {String} The account key.\n */\nAccountDetails.prototype.getAccountKey = function() { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = AccountDetails;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Marker interface for account information.\n *\n * @class\n */\nfunction AccountInfo() {\n}\n\n/**\n * The account details.\n *\n * @return {AccountDetails} The account details.\n */\nAccountInfo.prototype.getAccountDetails = function() { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = AccountInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * @enum\n */\nvar AccountStatus = {\n\n  /**\n   * Available: 0, but not yet requested.\n   */\n  AVAIL: 1,\n\n  /**\n   * Requested: 2, but not yet available.\n   */\n  PEND: 3,\n\n  /**\n   * Active: 4.\n   */\n  ACTIVE: 5\n\n};\n\n\nmodule.exports = AccountStatus;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\n\n/**\n * @class\n */\nfunction BalanceInfo () {\n\n  /**\n   * @name BalanceInfo#amount\n   * @type double\n   * @access private\n   */\n  this.amount = null;\n\n  /**\n   * @name BalanceInfo#asOfDate\n   * @type Date\n   * @access private\n   */\n  this.asOfDate = null;\n}\n\n\n\nAggregate.add(\"BalanceInfo\", BalanceInfo);\n\n\n/**\n * The amount.\n *\n * @return {double} The amount.\n */\nBalanceInfo.prototype.getAmount = function() {\n  return this.amount;\n};\nElement.add({name: \"BALAMT\", required: true, order: 0, owner: BalanceInfo, /*type: double,*/ fcn: \"getAmount\"});\n\n\n/**\n * The amount.\n *\n * @param {double} amount The amount.\n */\nBalanceInfo.prototype.setAmount = function(amount) {\n  this.amount = amount;\n};\n\n\n/**\n * The as-of date.\n *\n * @return {Date} The as-of date.\n */\nBalanceInfo.prototype.getAsOfDate = function() {\n  return this.asOfDate;\n};\nElement.add({name: \"DTASOF\", required: true, order: 10, owner: BalanceInfo, /*type: Date,*/ fcn: \"getAsOfDate\"});\n\n\n/**\n * The as-of date.\n *\n * @param {Date} asOfDate The as-of date.\n */\nBalanceInfo.prototype.setAsOfDate = function(asOfDate) {\n  this.asOfDate = asOfDate;\n};\n\n\n\n\nmodule.exports = BalanceInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Element = require(\"../../../meta/Element\");\n\n/**\n * @class\n * @see \"Section 3.1.3, OFX Spec\"\n */\nfunction BalanceRecord () {\n\n  /**\n   * @name BalanceRecord#name\n   * @type String\n   * @access private\n   */\n  this.name = null;\n\n  /**\n   * @name BalanceRecord#description\n   * @type String\n   * @access private\n   */\n  this.description = null;\n\n  /**\n   * @name BalanceRecord#type\n   * @type Type\n   * @access private\n   */\n  this.type = null;\n\n  /**\n   * @name BalanceRecord#value\n   * @type String\n   * @access private\n   */\n  this.value = null;\n\n  /**\n   * @name BalanceRecord#timestamp\n   * @type Date\n   * @access private\n   */\n  this.timestamp = null;\n\n  /**\n   * @name BalanceRecord#currency\n   * @type Currency\n   * @access private\n   */\n  this.currency = null;\n}\n\n\n\nAggregate.add(\"BAL\", BalanceRecord);\n\n\n/**\n * @enum\n */\nBalanceRecord.Type = {\n\n  DOLLAR: 0,\n\n  PERCENT: 1,\n\n  NUMBER: 2\n};\n\n/**\n * Name of the balance.\n *\n * @return {String} Name of the balance.\n */\nBalanceRecord.prototype.getName = function() {\n  return this.name;\n};\nElement.add({name: \"NAME\", required: true, order: 0, owner: BalanceRecord, /*type: String,*/ fcn: \"getName\"});\n\n\n/**\n * Name of the balance.\n *\n * @param {String} name Name of the balance.\n */\nBalanceRecord.prototype.setName = function(name) {\n  this.name = name;\n};\n\n\n/**\n * Description of the balance.\n *\n * @return {String} Description of the balance.\n */\nBalanceRecord.prototype.getDescription = function() {\n  return this.description;\n};\nElement.add({name: \"DESC\", required: true, order: 10, owner: BalanceRecord, /*type: String,*/ fcn: \"getDescription\"});\n\n\n/**\n * Description of the balance.\n *\n * @param {String} description Description of the balance.\n */\nBalanceRecord.prototype.setDescription = function(description) {\n  this.description = description;\n};\n\n\n/**\n * Type of the balance.\n *\n * @return {Type} Type of the balance.\n */\nBalanceRecord.prototype.getType = function() {\n  return this.type;\n};\nElement.add({name: \"BALTYPE\", required: true, order: 20, owner: BalanceRecord, /*type: Type,*/ fcn: \"getType\"});\n\n\n/**\n * Type of the balance.\n *\n * @param {Type} type Type of the balance.\n */\nBalanceRecord.prototype.setType = function(type) {\n  this.type = type;\n};\n\n\n/**\n * The value of the balance.\n *\n * @return {String} The value of the balance.\n */\nBalanceRecord.prototype.getValue = function() {\n  return this.value;\n};\nElement.add({name: \"VALUE\", required: true, order: 30, owner: BalanceRecord, /*type: String,*/ fcn: \"getValue\"});\n\n\n/**\n * The value of the balance.\n *\n * @param {String} value The value of the balance.\n */\nBalanceRecord.prototype.setValue = function(value) {\n  this.value = value;\n};\n\n\n/**\n * Timestamp of the balance.\n *\n * @return {Date} Timestamp of the balance.\n */\nBalanceRecord.prototype.getTimestamp = function() {\n  return this.timestamp;\n};\nElement.add({name: \"DTASOF\", order: 40, owner: BalanceRecord, /*type: Date,*/ fcn: \"getTimestamp\"});\n\n\n/**\n * Timestamp of the balance.\n *\n * @param {Date} timestamp Timestamp of the balance.\n */\nBalanceRecord.prototype.setTimestamp = function(timestamp) {\n  this.timestamp = timestamp;\n};\n\n\n/**\n * Currency.\n *\n * @return {Currency} Currency.\n */\nBalanceRecord.prototype.getCurrency = function() {\n  return this.currency;\n};\nChildAggregate.add({order: 50, owner: BalanceRecord, /*type: Currency,*/ fcn: \"getCurrency\"});\n\n\n/**\n * Currency.\n *\n * @param {Currency} currency Currency.\n */\nBalanceRecord.prototype.setCurrency = function(currency) {\n  this.currency = currency;\n};\n\n\n\n\nmodule.exports = BalanceRecord;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * @enum\n */\nvar CorrectionAction = {\n\n  REPLACE: 0,\n\n  DELETE: 1\n};\n\n\nmodule.exports = CorrectionAction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\n\n/**\n * @class\n * @see \"Section 5.2, OFX Spec\"\n */\nfunction Currency () {\n\n  /**\n   * @name Currency#code\n   * @type String\n   * @access private\n   */\n  this.code = \"USD\";\n\n  /**\n   * @name Currency#exchangeRate\n   * @type Float\n   * @access private\n   */\n  this.exchangeRate = null;\n}\n\n\n\nAggregate.add(\"CURRENCY\", Currency);\n\n\n/**\n * The currency code.\n *\n * @return {String} The currency code.\n * @see java.util.Currency#getCurrencyCode()\n */\nCurrency.prototype.getCode = function() {\n  return this.code;\n};\nElement.add({name: \"CURSYM\", required: true, order: 0, owner: Currency, /*type: String,*/ fcn: \"getCode\"});\n\n\n/**\n * The currency code\n *\n * @param {String} code The currency code\n */\nCurrency.prototype.setCode = function(code) {\n  this.code = code;\n};\n\n\n/**\n * The exchange rate.\n *\n * @return {Float} The exchange rate.\n */\nCurrency.prototype.getExchangeRate = function() {\n  return this.exchangeRate;\n};\nElement.add({name: \"CURRATE\", required: true, order: 10, owner: Currency, /*type: Float,*/ fcn: \"getExchangeRate\"});\n\n\n/**\n * The exchange rate.\n *\n * @param {Float} exchangeRate The exchange rate.\n */\nCurrency.prototype.setExchangeRate = function(exchangeRate) {\n  this.exchangeRate = exchangeRate;\n};\n\n\n\n\nmodule.exports = Currency;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\n\n/**\n * @class\n */\nfunction Payee () {\n\n  /**\n   * @name Payee#name\n   * @type String\n   * @access private\n   */\n  this.name = null;\n\n  /**\n   * @name Payee#address1\n   * @type String\n   * @access private\n   */\n  this.address1 = null;\n\n  /**\n   * @name Payee#address2\n   * @type String\n   * @access private\n   */\n  this.address2 = null;\n\n  /**\n   * @name Payee#address3\n   * @type String\n   * @access private\n   */\n  this.address3 = null;\n\n  /**\n   * @name Payee#city\n   * @type String\n   * @access private\n   */\n  this.city = null;\n\n  /**\n   * @name Payee#state\n   * @type String\n   * @access private\n   */\n  this.state = null;\n\n  /**\n   * @name Payee#zip\n   * @type String\n   * @access private\n   */\n  this.zip = null;\n\n  /**\n   * @name Payee#country\n   * @type String\n   * @access private\n   */\n  this.country = null;\n\n  /**\n   * @name Payee#phone\n   * @type String\n   * @access private\n   */\n  this.phone = null;\n}\n\n\n\nAggregate.add(\"PAYEE\", Payee);\n\n\n/**\n * The name of the payee.\n *\n * @return {String} The name of the payee.\n */\nPayee.prototype.getName = function() {\n  return this.name;\n};\nElement.add({name: \"NAME\", order: 30, owner: Payee, /*type: String,*/ fcn: \"getName\"});\n\n\n/**\n * The name of the payee.\n *\n * @param {String} name The name of the payee.\n */\nPayee.prototype.setName = function(name) {\n  this.name = name;\n};\n\n\n/**\n * The address of the payee.\n *\n * @return {String} The address of the payee.\n */\nPayee.prototype.getAddress1 = function() {\n  return this.address1;\n};\nElement.add({name: \"ADDR1\", required: true, order: 40, owner: Payee, /*type: String,*/ fcn: \"getAddress1\"});\n\n\n/**\n * The address of the payee.\n *\n * @param {String} address1 The address of the payee.\n */\nPayee.prototype.setAddress1 = function(address1) {\n  this.address1 = address1;\n};\n\n\n/**\n * The address of the payee.\n *\n * @return {String} The address of the payee.\n */\nPayee.prototype.getAddress2 = function() {\n  return this.address2;\n};\nElement.add({name: \"ADDR2\", order: 50, owner: Payee, /*type: String,*/ fcn: \"getAddress2\"});\n\n\n/**\n * The address of the payee.\n *\n * @param {String} address2 The address of the payee.\n */\nPayee.prototype.setAddress2 = function(address2) {\n  this.address2 = address2;\n};\n\n\n/**\n * The address of the payee.\n *\n * @return {String} The address of the payee.\n */\nPayee.prototype.getAddress3 = function() {\n  return this.address3;\n};\nElement.add({name: \"ADDR3\", order: 60, owner: Payee, /*type: String,*/ fcn: \"getAddress3\"});\n\n\n/**\n * The address of the payee.\n *\n * @param {String} address3 The address of the payee.\n */\nPayee.prototype.setAddress3 = function(address3) {\n  this.address3 = address3;\n};\n\n\n/**\n * The city of the payee.\n *\n * @return {String} The city of the payee.\n */\nPayee.prototype.getCity = function() {\n  return this.city;\n};\nElement.add({name: \"CITY\", required: true, order: 70, owner: Payee, /*type: String,*/ fcn: \"getCity\"});\n\n\n/**\n * The city of the payee.\n *\n * @param {String} city The city of the payee.\n */\nPayee.prototype.setCity = function(city) {\n  this.city = city;\n};\n\n\n/**\n * The state of this payee.\n *\n * @return {String} The state of this payee.\n */\nPayee.prototype.getState = function() {\n  return this.state;\n};\nElement.add({name: \"STATE\", required: true, order: 80, owner: Payee, /*type: String,*/ fcn: \"getState\"});\n\n\n/**\n * The state of this payee.\n *\n * @param {String} state The state of this payee.\n */\nPayee.prototype.setState = function(state) {\n  this.state = state;\n};\n\n\n/**\n * The postal code of this payee.\n *\n * @return {String} The postal code of this payee.\n */\nPayee.prototype.getZip = function() {\n  return this.zip;\n};\nElement.add({name: \"POSTALCODE\", required: true, order: 90, owner: Payee, /*type: String,*/ fcn: \"getZip\"});\n\n\n/**\n * The postal code of this payee.\n *\n * @param {String} zip The postal code of this payee.\n */\nPayee.prototype.setZip = function(zip) {\n  this.zip = zip;\n};\n\n\n/**\n * The country code for this payee.\n *\n * @return {String} The country code for this payee.\n * @see java.util.Locale#getISO3Country()\n */\nPayee.prototype.getCountry = function() {\n  return this.country;\n};\nElement.add({name: \"COUNTRY\", required: true, order: 100, owner: Payee, /*type: String,*/ fcn: \"getCountry\"});\n\n\n/**\n * The country code for this payee.\n *\n * @param {String} country The country code for this payee.\n */\nPayee.prototype.setCountry = function(country) {\n  this.country = country;\n};\n\n\n/**\n * The phone number.\n *\n * @return {String} The phone number.\n */\nPayee.prototype.getPhone = function() {\n  return this.phone;\n};\nElement.add({name: \"PHONE\", order: 110, owner: Payee, /*type: String,*/ fcn: \"getPhone\"});\n\n\n/**\n * The phone number.\n *\n * @param {String} phone The phone number.\n */\nPayee.prototype.setPhone = function(phone) {\n  this.phone = phone;\n};\n\n\n\n\nmodule.exports = Payee;\n","/*\n * Copyright 2012 TheStash\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Day of week used in \"PROCDAYSOFF\" lists.\n *\n * @enum\n * @see \"OFX Spec, Section 13.6.2\"\n */\nvar ProcessorDayOff = {\n  MONDAY: 0,\n  TUESDAY: 1,\n  WEDNESDAY: 2,\n  THURSDAY: 3,\n  FRIDAY: 4,\n  SATURDAY: 5,\n  SUNDAY: 6,\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"MONDAY\".equals(ofxVal)) {\n      return this.MONDAY;\n    } else if (\"TUESDAY\".equals(ofxVal)) {\n      return this.TUESDAY;\n    } else if (\"WEDNESDAY\".equals(ofxVal)) {\n      return this.WEDNESDAY;\n    } else if (\"THURSDAY\".equals(ofxVal)) {\n      return this.THURSDAY;\n    } else if (\"FRIDAY\".equals(ofxVal)) {\n      return this.FRIDAY;\n    } else if (\"SATURDAY\".equals(ofxVal)) {\n      return this.SATURDAY;\n    } else if (\"SUNDAY\".equals(ofxVal)) {\n      return this.SUNDAY;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = ProcessorDayOff;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\n\n/**\n * @class\n */\nfunction StatementRange () {\n\n  /**\n   * @name StatementRange#start\n   * @type Date\n   * @access private\n   */\n  this.start = null;\n\n  /**\n   * @name StatementRange#end\n   * @type Date\n   * @access private\n   */\n  this.end = null;\n\n  /**\n   * @name StatementRange#includeTransactions\n   * @type Boolean\n   * @access private\n   */\n  this.includeTransactions = Boolean.TRUE;\n}\n\n\n\nAggregate.add(\"INCTRAN\", StatementRange);\n\n\n/**\n * The start of the statement range.\n *\n * @return {Date} The start of the statement range.\n */\nStatementRange.prototype.getStart = function() {\n  return this.start;\n};\nElement.add({name: \"DTSTART\", order: 0, owner: StatementRange, /*type: Date,*/ fcn: \"getStart\"});\n\n\n/**\n * The start of the statement range.\n *\n * @param {Date} start The start of the statement range.\n */\nStatementRange.prototype.setStart = function(start) {\n  this.start = start;\n};\n\n\n/**\n * The end of the statement range.\n *\n * @return {Date} The end of the statement range.\n */\nStatementRange.prototype.getEnd = function() {\n  return this.end;\n};\nElement.add({name: \"DTEND\", order: 10, owner: StatementRange, /*type: Date,*/ fcn: \"getEnd\"});\n\n\n/**\n * The end of the statement range.\n *\n * @param {Date} end The end of the statement range.\n */\nStatementRange.prototype.setEnd = function(end) {\n  this.end = end;\n};\n\n\n/**\n * Whether to include transactions.\n *\n * @return {Boolean} Whether to include transactions.\n */\nStatementRange.prototype.getIncludeTransactions = function() {\n  return this.includeTransactions;\n};\nElement.add({name: \"INCLUDE\", required: true, order: 20, owner: StatementRange, /*type: Boolean,*/ fcn: \"getIncludeTransactions\"});\n\n\n/**\n * Whether to include transactions.\n *\n * @param {Boolean} includeTransactions Whether to include transactions.\n */\nStatementRange.prototype.setIncludeTransactions = function(includeTransactions) {\n  this.includeTransactions = includeTransactions;\n};\n\n\n\n\nmodule.exports = StatementRange;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar RequestMessage = require(\"../RequestMessage\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\n\n/**\n * @class\n * @augments RequestMessage\n */\nfunction StatementRequest () {\n\n  /**\n   * @name StatementRequest#statementRange\n   * @type StatementRange\n   * @access private\n   */\n  this.statementRange = null;\n}\n\ninherit(StatementRequest, \"extends\", RequestMessage);\n\n\nAggregate.add(\"STMTRQ\", StatementRequest);\n\n\n/**\n * The statement range.\n *\n * @return {StatementRange} The statement range.\n */\nStatementRequest.prototype.getStatementRange = function() {\n  return this.statementRange;\n};\nChildAggregate.add({name: \"INCTRAN\", required: false, order: 10, owner: StatementRequest, /*type: StatementRange,*/ fcn: \"getStatementRange\"});\n\n\n/**\n * The statement range.\n *\n * @param {StatementRange} statementRange The statement range.\n */\nStatementRequest.prototype.setStatementRange = function(statementRange) {\n  this.statementRange = statementRange;\n};\n\n\n\n\nmodule.exports = StatementRequest;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar ResponseMessage = require(\"../ResponseMessage\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar AccountStatement = require(\"../../../client/AccountStatement\");\n\n/**\n * @class\n * @augments ResponseMessage\n * @augments AccountStatement\n */\nfunction StatementResponse () {\n\n  /**\n   * @name StatementResponse#currencyCode\n   * @type String\n   * @access private\n   */\n  this.currencyCode = \"USD\";\n\n  /**\n   * @name StatementResponse#transactionList\n   * @type TransactionList\n   * @access private\n   */\n  this.transactionList = null;\n\n  /**\n   * @name StatementResponse#ledgerBalance\n   * @type BalanceInfo\n   * @access private\n   */\n  this.ledgerBalance = null;\n\n  /**\n   * @name StatementResponse#availableBalance\n   * @type BalanceInfo\n   * @access private\n   */\n  this.availableBalance = null;\n\n  /**\n   * @name StatementResponse#marketingInfo\n   * @type String\n   * @access private\n   */\n  this.marketingInfo = null;\n}\n\ninherit(StatementResponse, \"extends\", ResponseMessage);\ninherit(StatementResponse, \"implements\", AccountStatement);\n\n\n\n\n/**\n * The currency code.\n *\n * @return {String} The currency code.\n * @see java.util.Currency#getCurrencyCode()\n */\nStatementResponse.prototype.getCurrencyCode = function() {\n  return this.currencyCode;\n};\nElement.add({name: \"CURDEF\", required: true, order: 0, owner: StatementResponse, /*type: String,*/ fcn: \"getCurrencyCode\"});\n\n\n/**\n * The currency code.\n *\n * @param {String} currencyCode The currency code.\n */\nStatementResponse.prototype.setCurrencyCode = function(currencyCode) {\n  this.currencyCode = currencyCode;\n};\n\n\n/**\n * The transaction list.\n *\n * @return {TransactionList} The transaction list.\n */\nStatementResponse.prototype.getTransactionList = function() {\n  return this.transactionList;\n};\nChildAggregate.add({order: 20, owner: StatementResponse, /*type: TransactionList,*/ fcn: \"getTransactionList\"});\n\n\n/**\n * The transaction list.\n *\n * @param {TransactionList} transactionList The transaction list.\n */\nStatementResponse.prototype.setTransactionList = function(transactionList) {\n  this.transactionList = transactionList;\n};\n\n\n/**\n * The ledger balance.\n *\n * @return {BalanceInfo} The ledger balance.\n */\nStatementResponse.prototype.getLedgerBalance = function() {\n  return this.ledgerBalance;\n};\nChildAggregate.add({name: \"LEDGERBAL\", order: 30, owner: StatementResponse, /*type: BalanceInfo,*/ fcn: \"getLedgerBalance\"});\n\n\n/**\n * The ledger balance.\n *\n * @param {BalanceInfo} ledgerBalance The ledger balance.\n */\nStatementResponse.prototype.setLedgerBalance = function(ledgerBalance) {\n  this.ledgerBalance = ledgerBalance;\n};\n\n\n/**\n * The available balance.\n *\n * @return {BalanceInfo} The available balance.\n */\nStatementResponse.prototype.getAvailableBalance = function() {\n  return this.availableBalance;\n};\nChildAggregate.add({name: \"AVAILBAL\", order: 40, owner: StatementResponse, /*type: BalanceInfo,*/ fcn: \"getAvailableBalance\"});\n\n\n/**\n * The available balance.\n *\n * @param {BalanceInfo} availableBalance The available balance.\n */\nStatementResponse.prototype.setAvailableBalance = function(availableBalance) {\n  this.availableBalance = availableBalance;\n};\n\n\n/**\n * Marketing information. (?)\n *\n * @return {String} Marketing information.\n */\nStatementResponse.prototype.getMarketingInfo = function() {\n  return this.marketingInfo;\n};\nElement.add({name: \"MKTGINFO\", order: 50, owner: StatementResponse, /*type: String,*/ fcn: \"getMarketingInfo\"});\n\n\n/**\n * Marketing information. (?)\n *\n * @param {String} marketingInfo Marketing information.\n */\nStatementResponse.prototype.setMarketingInfo = function(marketingInfo) {\n  this.marketingInfo = marketingInfo;\n};\n\n\n\n\nmodule.exports = StatementResponse;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar StatusCode = require(\"./StatusCode\");\n\n/**\n * Transaction status element.\n *\n * @class\n * @see \"Section 3.1.4, OFX Spec\"\n */\nfunction Status () {\n\n  /**\n   * @name Status#code\n   * @type StatusCode\n   * @access private\n   */\n  this.code = Status.KnownCode.SUCCESS;\n\n  /**\n   * @name Status#severity\n   * @type Severity\n   * @access private\n   */\n  this.severity = null;\n\n  /**\n   * @name Status#message\n   * @type String\n   * @access private\n   */\n  this.message = null;\n}\n\n\n\nAggregate.add(\"STATUS\", Status);\n\n\nvar Severity = Status.Severity = {\n  INFO: 0,\n  WARN: 1,\n  ERROR: 2\n};\n\nStatus.KnownCode = function(/*int*/ code, /*String*/ message, /*Severity*/ defaultSeverity) {\n\n  /**\n   * @name Status.KnownCode#code\n   * @type int\n   * @access private\n   */\n  this.code = code;\n\n  /**\n   * @name Status.KnownCode#message\n   * @type String\n   * @access private\n   */\n  this.message = message;\n\n  /**\n   * @name Status.KnownCode#defaultSeverity\n   * @type Severity\n   * @access private\n   */\n  this.defaultSeverity = defaultSeverity;\n};\n\ninherit(Status.KnownCode, \"implements\", StatusCode);\n\n\nStatus.KnownCode.SUCCESS = new Status.KnownCode(0, \"Success\", Severity.INFO);\nStatus.KnownCode.CLIENT_UP_TO_DATE = new Status.KnownCode(1, \"Client is up-to-date\", Severity.INFO);\nStatus.KnownCode.GENERAL_ERROR = new Status.KnownCode(2000, \"General error.\", Severity.ERROR);\nStatus.KnownCode.GENERAL_ACCOUNT_ERROR = new Status.KnownCode(2002, \"General account error.\", Severity.ERROR);\nStatus.KnownCode.ACCOUNT_NOT_FOUND = new Status.KnownCode(2003, \"Account not found.\", Severity.ERROR);\nStatus.KnownCode.ACCOUNT_CLOSED = new Status.KnownCode(2004, \"Account closed.\", Severity.ERROR);\nStatus.KnownCode.ACCOUNT_NOT_AUTHORIZED = new Status.KnownCode(2005, \"Account not authorized.\", Severity.ERROR);\nStatus.KnownCode.DATE_TOO_SOON = new Status.KnownCode(2014, \"Date too soon\", Severity.ERROR);\nStatus.KnownCode.DUPLICATE_REQUEST = new Status.KnownCode(2019, \"Duplicate request.\", Severity.ERROR);\nStatus.KnownCode.UNSUPPORTED_VERSION = new Status.KnownCode(2021, \"Unsupported version\", Severity.ERROR);\nStatus.KnownCode.INVALID_TAN = new Status.KnownCode(2022, \"Invalid transaction authorization number.\", Severity.ERROR);\nStatus.KnownCode.MFA_CHALLENGE_REQUIRED = new Status.KnownCode(3000, \"Further authentication required.\", Severity.ERROR);\nStatus.KnownCode.MFA_CHALLENGE_FAILED = new Status.KnownCode(3001, \"MFA failed.\", Severity.ERROR);\nStatus.KnownCode.PASSWORD_CHANGE_REQUIRED = new Status.KnownCode(15000, \"Password change required.\", Severity.INFO);\nStatus.KnownCode.SIGNON_INVALID = new Status.KnownCode(15500, \"Invalid signon\", Severity.ERROR);\nStatus.KnownCode.CUSTOMER_ACCOUNT_IN_USE = new Status.KnownCode(15501, \"Customer account in use.\", Severity.ERROR);\nStatus.KnownCode.PASSWORD_LOCKED = new Status.KnownCode(15502, \"Password locked.\", Severity.ERROR);\nStatus.KnownCode.INVALID_CLIENT_UID = new Status.KnownCode(15510, \"Invalid client UID.\", Severity.ERROR);\nStatus.KnownCode.CONTACT_FI = new Status.KnownCode(15511, \"User must contact FI.\", Severity.ERROR);\nStatus.KnownCode.AUTHTOKEN_REQUIRED = new Status.KnownCode(15512, \"Auth token required.\", Severity.ERROR);\nStatus.KnownCode.INVALID_AUTHTOKEN = new Status.KnownCode(15513, \"Invalid auth token.\", Severity.ERROR);\nStatus.KnownCode.NO_DATA = new Status.KnownCode(14701, \"No Tax Data for Account.\", Severity.ERROR);\nStatus.KnownCode.DB_EXCEPTION = new Status.KnownCode(14702,\"Database error has occured.\",Severity.ERROR);\nStatus.KnownCode.NO_TAXSUPPORT = new Status.KnownCode(14703,\"This Tax Year is not supported.\",Severity.ERROR);\n\n/**\n * @returns int\n */\nStatus.KnownCode.prototype.getCode = function() {\n  return this.code;\n};\n\n/**\n * @returns String\n */\nStatus.KnownCode.prototype.getMessage = function() {\n  return this.message;\n};\n\n/**\n * @returns Severity\n */\nStatus.KnownCode.prototype.getDefaultSeverity = function() {\n  return this.defaultSeverity;\n};\n\n/**\n * @param {int} code\n * @returns KnownCode\n */\nStatus.KnownCode.fromCode = function(code) {\n  for (var value in Status.KnownCode) {\n    if (value instanceof Status.KnownCode && value.getCode() == code) {\n      return value;\n    }\n  }\n  return null;\n};\n\n/**\n * @returns String\n */\nStatus.KnownCode.prototype.toString = function() {\n  return this.code.toString();\n};\n\n/**\n * Status code.\n *\n * @return {StatusCode} The status code.\n */\nStatus.prototype.getCode = function() {\n  return this.code;\n};\nElement.add({name: \"CODE\", required: true, order: 0, owner: Status, /*type: StatusCode,*/ fcn: \"getCode\"});\n\n\n/**\n * Status code.\n *\n * @param {StatusCode} code Status code.\n */\nStatus.prototype.setCode = function(code) {\n  this.code = code;\n  if (this.severity === null) {\n    this.severity = code.getDefaultSeverity();\n  }\n};\n\n\n/**\n * The severity.\n *\n * @return {Severity} The severity.\n */\nStatus.prototype.getSeverity = function() {\n  return this.severity;\n};\nElement.add({name: \"SEVERITY\", required: true, order: 10, owner: Status, /*type: Severity,*/ fcn: \"getSeverity\"});\n\n\n/**\n * The severity.\n *\n * @param {Severity} severity The severity.\n */\nStatus.prototype.setSeverity = function(severity) {\n  this.severity = severity;\n};\n\n\n/**\n * Server-supplied message.\n *\n * @return {String} Server-supplied message.\n */\nStatus.prototype.getMessage = function() {\n  return this.message;\n};\nElement.add({name: \"MESSAGE\", order: 20, owner: Status, /*type: String,*/ fcn: \"getMessage\"});\n\n\n/**\n * Server-supplied message.\n *\n * @param {String} message Server-supplied message.\n */\nStatus.prototype.setMessage = function(message) {\n  this.message = message;\n};\n\n\n\n\nmodule.exports = Status;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * @class\n */\nfunction StatusCode() {\n}\n\nStatusCode.prototype.getCode = function() { throw new Error(\"not implemented\"); };\n\nStatusCode.prototype.getMessage = function() { throw new Error(\"not implemented\"); };\n\nStatusCode.prototype.getDefaultSeverity = function() { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = StatusCode;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\n/**\n * A status holder (usually applied to a response).\n *\n * @class\n */\nfunction StatusHolder() {\n}\n\n/**\n * The name of this status holder (for error reporting).\n *\n * @return {String} The name of this status holder (for error reporting).\n */\nStatusHolder.prototype.getStatusHolderName = function() { throw new Error(\"not implemented\"); };\n\n/**\n * Get the status.\n *\n * @return {Status} The status.\n */\nStatusHolder.prototype.getStatus = function() { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = StatusHolder;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar RequestMessage = require(\"../RequestMessage\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\n\n/**\n * @class\n * @augments ResponseMessage\n */\nfunction T1099Request () {\n}\n\ninherit(T1099Request, \"extends\", RequestMessage);\n\n\nAggregate.add(\"STMTRQ\", T1099Request);\n\n\n\n\nmodule.exports = T1099Request;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar ResponseMessage = require(\"../ResponseMessage\");\n\n/**\n * @class\n * @augments ResponseMessage\n */\nfunction T1099Response () {\n}\n\ninherit(T1099Response, \"extends\", ResponseMessage);\n\n\n\n\n\n\nmodule.exports = T1099Response;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\n\n/**\n * @class\n */\nfunction Transaction () {\n\n  /**\n   * @name Transaction#transactionType\n   * @type TransactionType\n   * @access private\n   */\n  this.transactionType = null;\n\n  /**\n   * @name Transaction#datePosted\n   * @type Date\n   * @access private\n   */\n  this.datePosted = null;\n\n  /**\n   * @name Transaction#dateInitiated\n   * @type Date\n   * @access private\n   */\n  this.dateInitiated = null;\n\n  /**\n   * @name Transaction#dateAvailable\n   * @type Date\n   * @access private\n   */\n  this.dateAvailable = null;\n\n  /**\n   * @name Transaction#amount\n   * @type BigDecimal\n   * @access private\n   */\n  this.amount = null;\n\n  /**\n   * @name Transaction#id\n   * @type String\n   * @access private\n   */\n  this.id = null;\n\n  /**\n   * @name Transaction#correctionId\n   * @type String\n   * @access private\n   */\n  this.correctionId = null;\n\n  /**\n   * @name Transaction#correctionAction\n   * @type CorrectionAction\n   * @access private\n   */\n  this.correctionAction = null;\n\n  /**\n   * @name Transaction#tempId\n   * @type String\n   * @access private\n   */\n  this.tempId = null;\n\n  /**\n   * @name Transaction#checkNumber\n   * @type String\n   * @access private\n   */\n  this.checkNumber = null;\n\n  /**\n   * @name Transaction#referenceNumber\n   * @type String\n   * @access private\n   */\n  this.referenceNumber = null;\n\n  /**\n   * @name Transaction#standardIndustrialCode\n   * @type String\n   * @access private\n   */\n  this.standardIndustrialCode = null;\n\n  /**\n   * @name Transaction#payeeId\n   * @type String\n   * @access private\n   */\n  this.payeeId = null;\n\n  /**\n   * @name Transaction#name\n   * @type String\n   * @access private\n   */\n  this.name = null;\n\n  /**\n   * @name Transaction#payee\n   * @type Payee\n   * @access private\n   */\n  this.payee = null;\n\n  /**\n   * @name Transaction#bankAccountTo\n   * @type BankAccountDetails\n   * @access private\n   */\n  this.bankAccountTo = null;\n\n  /**\n   * @name Transaction#creditCardAccountTo\n   * @type CreditCardAccountDetails\n   * @access private\n   */\n  this.creditCardAccountTo = null;\n\n  /**\n   * @name Transaction#memo\n   * @type String\n   * @access private\n   */\n  this.memo = null;\n\n  /**\n   * @name Transaction#currency\n   * @type Currency\n   * @access private\n   */\n  this.currency = null;\n\n  /**\n   * @name Transaction#originalCurrency\n   * @type Currency\n   * @access private\n   */\n  this.originalCurrency = null;\n}\n\n\n\nAggregate.add(\"STMTTRN\", Transaction);\n\n\n/**\n * The transaction type.\n *\n * @return {TransactionType} The transaction type.\n */\nTransaction.prototype.getTransactionType = function() {\n  return this.transactionType;\n};\nElement.add({name: \"TRNTYPE\", required: true, order: 0, owner: Transaction, /*type: TransactionType,*/ fcn: \"getTransactionType\"});\n\n\n/**\n * The transaction type.\n *\n * @param {TransactionType} transactionType The transaction type.\n */\nTransaction.prototype.setTransactionType = function(transactionType) {\n  this.transactionType = transactionType;\n};\n\n\n/**\n * The date the transaction was posted.\n *\n * @return {Date} The date the transaction was posted.\n */\nTransaction.prototype.getDatePosted = function() {\n  return this.datePosted;\n};\nElement.add({name: \"DTPOSTED\", required: true, order: 10, owner: Transaction, /*type: Date,*/ fcn: \"getDatePosted\"});\n\n\n/**\n * The date the transaction was posted.\n *\n * @param {Date} datePosted The date the transaction was posted.\n */\nTransaction.prototype.setDatePosted = function(datePosted) {\n  this.datePosted = datePosted;\n};\n\n\n/**\n * The date the transaction was initiated.\n *\n * @return {Date} The date the transaction was initiated.\n */\nTransaction.prototype.getDateInitiated = function() {\n  return this.dateInitiated;\n};\nElement.add({name: \"DTUSER\", order: 20, owner: Transaction, /*type: Date,*/ fcn: \"getDateInitiated\"});\n\n\n/**\n * The date the transaction was initiated.\n *\n * @param {Date} dateInitiated The date the transaction was initiated.\n */\nTransaction.prototype.setDateInitiated = function(dateInitiated) {\n  this.dateInitiated = dateInitiated;\n};\n\n\n/**\n * The date the funds are available.\n *\n * @return {Date} The date the funds are available.\n */\nTransaction.prototype.getDateAvailable = function() {\n  return this.dateAvailable;\n};\nElement.add({name: \"DTAVAIL\", order: 30, owner: Transaction, /*type: Date,*/ fcn: \"getDateAvailable\"});\n\n\n/**\n * The date the funds are available.\n *\n * @param {Date} dateAvailable The date the funds are available.\n */\nTransaction.prototype.setDateAvailable = function(dateAvailable) {\n  this.dateAvailable = dateAvailable;\n};\n\n\n/**\n * The transaction amount.\n *\n * @return {Double} The transaction amount.\n */\nTransaction.prototype.getAmount = function() {\n  return this.amount;\n};\n\n\n/**\n * The transaction amount.\n *\n * @param {Double} amount The transaction amount.\n */\nTransaction.prototype.setAmount = function(amount) {\n  this.amount = amount;\n};\n\n\n/**\n * The transaction amount.\n *\n * @return {BigDecimal} The transaction amount.\n */\nTransaction.prototype.getBigDecimalAmount = function() {\n  return this.amount;\n};\nElement.add({name: \"TRNAMT\", required: true, order: 40, owner: Transaction, /*type: BigDecimal,*/ fcn: \"getBigDecimalAmount\"});\n\n\n/**\n * The transaction amount.\n *\n * @param {BigDecimal} amount The transaction amount.\n */\nTransaction.prototype.setBigDecimalAmount = function(amount) {\n  this.amount = amount;\n};\n\n\n/**\n * The transaction id (server-assigned).\n *\n * @return {String} The transaction id (server-assigned).\n */\nTransaction.prototype.getId = function() {\n  return this.id;\n};\nElement.add({name: \"FITID\", required: true, order: 50, owner: Transaction, /*type: String,*/ fcn: \"getId\"});\n\n\n/**\n * The transaction id (server-assigned).\n *\n * @param {String} id The transaction id (server-assigned).\n */\nTransaction.prototype.setId = function(id) {\n  this.id = id;\n};\n\n\n/**\n * The id of the transaction that this is correcting.\n *\n * @return {String} The id of the transaction that this is correcting.\n */\nTransaction.prototype.getCorrectionId = function() {\n  return this.correctionId;\n};\nElement.add({name: \"CORRECTFITID\", order: 60, owner: Transaction, /*type: String,*/ fcn: \"getCorrectionId\"});\n\n\n/**\n * The id of the transaction that this is correcting.\n *\n * @param {String} correctionId The id of the transaction that this is correcting.\n */\nTransaction.prototype.setCorrectionId = function(correctionId) {\n  this.correctionId = correctionId;\n};\n\n\n/**\n * The action to take on the {@link #getCorrectionId() corrected transaction}.\n *\n * @return {CorrectionAction} The action to take on the {@link #getCorrectionId() corrected transaction}.\n */\nTransaction.prototype.getCorrectionAction = function() {\n  return this.correctionAction;\n};\nElement.add({name: \"CORRECTACTION\", order: 70, owner: Transaction, /*type: CorrectionAction,*/ fcn: \"getCorrectionAction\"});\n\n\n/**\n * The action to take on the {@link #getCorrectionId() corrected transaction}.\n *\n * @param {CorrectionAction} correctionAction The action to take on the {@link #getCorrectionId() corrected transaction}.\n */\nTransaction.prototype.setCorrectionAction = function(correctionAction) {\n  this.correctionAction = correctionAction;\n};\n\n\n/**\n * The server-assigned temporary id for client-initiated transactions.\n *\n * @return {String} The server-assigned temporary id for client-initiated transactions.\n */\nTransaction.prototype.getTempId = function() {\n  return this.tempId;\n};\nElement.add({name: \"SRVRTID\", order: 80, owner: Transaction, /*type: String,*/ fcn: \"getTempId\"});\n\n\n/**\n * The server-assigned temporary id for client-initiated transactions.\n *\n * @param {String} tempId The server-assigned temporary id for client-initiated transactions.\n */\nTransaction.prototype.setTempId = function(tempId) {\n  this.tempId = tempId;\n};\n\n\n/**\n * The check number.\n *\n * @return {String} The check number.\n */\nTransaction.prototype.getCheckNumber = function() {\n  return this.checkNumber;\n};\nElement.add({name: \"CHECKNUM\", order: 90, owner: Transaction, /*type: String,*/ fcn: \"getCheckNumber\"});\n\n\n/**\n * The check number.\n *\n * @param {String} checkNumber The check number.\n */\nTransaction.prototype.setCheckNumber = function(checkNumber) {\n  this.checkNumber = checkNumber;\n};\n\n\n/**\n * The reference number.\n *\n * @return {String} The reference number.\n */\nTransaction.prototype.getReferenceNumber = function() {\n  return this.referenceNumber;\n};\nElement.add({name: \"REFNUM\", order: 100, owner: Transaction, /*type: String,*/ fcn: \"getReferenceNumber\"});\n\n\n/**\n * The reference number.\n *\n * @param {String} referenceNumber The reference number.\n */\nTransaction.prototype.setReferenceNumber = function(referenceNumber) {\n  this.referenceNumber = referenceNumber;\n};\n\n\n/**\n * The standard industrial code.\n *\n * @return {String} The standard industrial code.\n */\nTransaction.prototype.getStandardIndustrialCode = function() {\n  return this.standardIndustrialCode;\n};\nElement.add({name: \"SIC\", order: 110, owner: Transaction, /*type: String,*/ fcn: \"getStandardIndustrialCode\"});\n\n\n/**\n * The standard industrial code.\n *\n * @param {String} standardIndustrialCode The standard industrial code.\n */\nTransaction.prototype.setStandardIndustrialCode = function(standardIndustrialCode) {\n  this.standardIndustrialCode = standardIndustrialCode;\n};\n\n\n/**\n * The payee id.\n *\n * @return {String} The payee id.\n */\nTransaction.prototype.getPayeeId = function() {\n  return this.payeeId;\n};\nElement.add({name: \"PAYEEID\", order: 120, owner: Transaction, /*type: String,*/ fcn: \"getPayeeId\"});\n\n\n/**\n * The payee id.\n *\n * @param {String} payeeId The payee id.\n */\nTransaction.prototype.setPayeeId = function(payeeId) {\n  this.payeeId = payeeId;\n};\n\n\n/**\n * The name (description) or the transaction.\n *\n * @return {String} The name (description) or the transaction.\n */\nTransaction.prototype.getName = function() {\n  return this.name;\n};\nElement.add({name: \"NAME\", order: 130, owner: Transaction, /*type: String,*/ fcn: \"getName\"});\n\n\n/**\n * The name (description) or the transaction.\n *\n * @param {String} name The name (description) or the transaction.\n */\nTransaction.prototype.setName = function(name) {\n  this.name = name;\n};\n\n\n/**\n * The payee.\n *\n * @return {Payee} The payee.\n */\nTransaction.prototype.getPayee = function() {\n  return this.payee;\n};\nChildAggregate.add({order: 140, owner: Transaction, /*type: Payee,*/ fcn: \"getPayee\"});\n\n\n/**\n * The payee.\n *\n * @param {Payee} payee The payee.\n */\nTransaction.prototype.setPayee = function(payee) {\n  this.payee = payee;\n};\n\n\n/**\n * The bank account the transfer was to.\n *\n * @return {BankAccountDetails} The bank account the transfer was to.\n */\nTransaction.prototype.getBankAccountTo = function() {\n  return this.bankAccountTo;\n};\nChildAggregate.add({name: \"BANKACCTTO\", order: 150, owner: Transaction, /*type: BankAccountDetails,*/ fcn: \"getBankAccountTo\"});\n\n\n/**\n * The bank account the transfer was to.\n *\n * @param {BankAccountDetails} bankAccountTo The bank account the transfer was to.\n */\nTransaction.prototype.setBankAccountTo = function(bankAccountTo) {\n  this.bankAccountTo = bankAccountTo;\n};\n\n\n/**\n * The credit-card account the transfer was to.\n *\n * @return {CreditCardAccountDetails} The credit-card account the transfer was to.\n */\nTransaction.prototype.getCreditCardAccountTo = function() {\n  return this.creditCardAccountTo;\n};\nChildAggregate.add({name: \"CCACCTTO\", order: 160, owner: Transaction, /*type: CreditCardAccountDetails,*/ fcn: \"getCreditCardAccountTo\"});\n\n\n/**\n * The credit-card account the transfer was to.\n *\n * @param {CreditCardAccountDetails} creditCardAccountTo The credit-card account the transfer was to.\n */\nTransaction.prototype.setCreditCardAccountTo = function(creditCardAccountTo) {\n  this.creditCardAccountTo = creditCardAccountTo;\n};\n\n\n/**\n * Notes.\n *\n * @return {String} Notes.\n */\nTransaction.prototype.getMemo = function() {\n  return this.memo;\n};\nElement.add({name: \"MEMO\", order: 170, owner: Transaction, /*type: String,*/ fcn: \"getMemo\"});\n\n\n/**\n * Notes.\n *\n * @param {String} memo Notes.\n */\nTransaction.prototype.setMemo = function(memo) {\n  this.memo = memo;\n};\n\n\n/**\n * The currency.\n *\n * @return {Currency} The currency.\n */\nTransaction.prototype.getCurrency = function() {\n  return this.currency;\n};\nChildAggregate.add({order: 180, owner: Transaction, /*type: Currency,*/ fcn: \"getCurrency\"});\n\n\n/**\n * The currency.\n *\n * @param {Currency} currency The currency.\n */\nTransaction.prototype.setCurrency = function(currency) {\n  this.currency = currency;\n};\n\n\n/**\n * The original currency.\n *\n * @return {Currency} The original currency.\n */\nTransaction.prototype.getOriginalCurrency = function() {\n  return this.originalCurrency;\n};\nChildAggregate.add({name: \"ORIGCURRENCY\", order: 190, owner: Transaction, /*type: Currency,*/ fcn: \"getOriginalCurrency\"});\n\n\n/**\n * The original currency.\n *\n * @param {Currency} originalCurrency The original currency.\n */\nTransaction.prototype.setOriginalCurrency = function(originalCurrency) {\n  this.originalCurrency = originalCurrency;\n};\n\n\n\n\nmodule.exports = Transaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\n\n/**\n * @class\n */\nfunction TransactionList () {\n\n  /**\n   * @name TransactionList#start\n   * @type Date\n   * @access private\n   */\n  this.start = null;\n\n  /**\n   * @name TransactionList#end\n   * @type Date\n   * @access private\n   */\n  this.end = null;\n\n  /**\n   * @name TransactionList#transactions\n   * @type List<Transaction>\n   * @access private\n   */\n  this.transactions = null;\n}\n\n\n\nAggregate.add(\"BANKTRANLIST\", TransactionList);\n\n\n/**\n * The start date.\n *\n * @return {Date} The start date.\n */\nTransactionList.prototype.getStart = function() {\n  return this.start;\n};\nElement.add({name: \"DTSTART\", required: true, order: 0, owner: TransactionList, /*type: Date,*/ fcn: \"getStart\"});\n\n\n/**\n * The start date.\n *\n * @param {Date} start The start date.\n */\nTransactionList.prototype.setStart = function(start) {\n  this.start = start;\n};\n\n\n/**\n * The end date.\n *\n * @return {Date} The end date.\n */\nTransactionList.prototype.getEnd = function() {\n  return this.end;\n};\nElement.add({name: \"DTEND\", required: true, order: 10, owner: TransactionList, /*type: Date,*/ fcn: \"getEnd\"});\n\n\n/**\n * The end date.\n *\n * @param {Date} end The end date.\n */\nTransactionList.prototype.setEnd = function(end) {\n  this.end = end;\n};\n\n\n/**\n * The transaction list.\n *\n * @return {Transaction[]} The transaction list.\n */\nTransactionList.prototype.getTransactions = function() {\n  return this.transactions;\n};\nChildAggregate.add({order: 20, owner: TransactionList, /*type: Transaction[],*/ fcn: \"getTransactions\"});\n\n\n/**\n * The transaction list.\n *\n * @param {Transaction[]} transactions The transaction list.\n */\nTransactionList.prototype.setTransactions = function(transactions) {\n  this.transactions = transactions;\n};\n\n\n\n\nmodule.exports = TransactionList;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * @enum\n */\nvar TransactionType = {\n\n  /**\n   * generic: 0 credit.\n   */\n  CREDIT: 1,\n\n  /**\n   * genertic: 2 debit.\n   */\n  DEBIT: 3,\n\n  /**\n   * interest: 4 earned.\n   */\n  INT: 5,\n\n  /**\n   * dividend: 6.\n   */\n  DIV: 7,\n\n  /**\n   * bank: 8 fee.\n   */\n  FEE: 9,\n\n  /**\n   * service: 10 charge.\n   */\n  SRVCHG: 11,\n\n  /**\n   * deposit: 12.\n   */\n  DEP: 13,\n\n  /**\n   * ATM: 14 transaction.\n   */\n  ATM: 15,\n\n  /**\n   * point: 16 of sale\n   */\n  POS: 17,\n\n  /**\n   * transfer: 18\n   */\n  XFER: 19,\n\n  /**\n   * check: 20\n   */\n  CHECK: 21,\n\n  /**\n   * electronic: 22 payment\n   */\n  PAYMENT: 23,\n\n  /**\n   * cash: 24.\n   */\n  CASH: 25,\n\n  /**\n   * direct: 26 deposit.\n   */\n  DIRECTDEP: 27,\n\n  /**\n   * merchant: 28-initiated debit\n   */\n  DIRECTDEBIT: 29,\n\n  /**\n   * repeating: 30 payment.\n   */\n  REPEATPMT: 31,\n\n  /**\n   * other: 32\n   */\n  OTHER: 33\n};\n\n\nmodule.exports = TransactionType;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Element = require(\"../../../meta/Element\");\n\n/**\n * @class\n */\nfunction TransferInfo () {\n\n  /**\n   * @name TransferInfo#bankAccountFrom\n   * @type BankAccountDetails\n   * @access private\n   */\n  this.bankAccountFrom = null;\n\n  /**\n   * @name TransferInfo#creditCardAccountFrom\n   * @type CreditCardAccountDetails\n   * @access private\n   */\n  this.creditCardAccountFrom = null;\n\n  /**\n   * @name TransferInfo#bankAccountTo\n   * @type BankAccountDetails\n   * @access private\n   */\n  this.bankAccountTo = null;\n\n  /**\n   * @name TransferInfo#creditCardAccountTo\n   * @type CreditCardAccountDetails\n   * @access private\n   */\n  this.creditCardAccountTo = null;\n\n  /**\n   * @name TransferInfo#amount\n   * @type Double\n   * @access private\n   */\n  this.amount = null;\n\n  /**\n   * @name TransferInfo#due\n   * @type Date\n   * @access private\n   */\n  this.due = null;\n}\n\n\n\nAggregate.add(\"XFERINFO\", TransferInfo);\n\n\n/**\n * The bank account to transfer from.\n *\n * @return {BankAccountDetails} The bank account to transfer from.\n */\nTransferInfo.prototype.getBankAccountFrom = function() {\n  return this.bankAccountFrom;\n};\nChildAggregate.add({name: \"BANKACCTFROM\", order: 0, owner: TransferInfo, /*type: BankAccountDetails,*/ fcn: \"getBankAccountFrom\"});\n\n\n/**\n * The bank account to transfer from.\n *\n * @param {BankAccountDetails} bankAccountFrom The bank account to transfer from.\n */\nTransferInfo.prototype.setBankAccountFrom = function(bankAccountFrom) {\n  this.creditCardAccountFrom = null;\n  this.bankAccountFrom = bankAccountFrom;\n};\n\n\n/**\n * The account to transfer from.\n *\n * @param {BankAccountDetails} bankAccountFrom The account to transfer from.\n */\nTransferInfo.prototype.setAccountFrom = function(bankAccountFrom) {\n  this.setBankAccountFrom(bankAccountFrom);\n};\n\n\n/**\n * The credit card to transfer from.\n *\n * @return {CreditCardAccountDetails} The credit card to transfer from.\n */\nTransferInfo.prototype.getCreditCardAccountFrom = function() {\n  return this.creditCardAccountFrom;\n};\nChildAggregate.add({name: \"CCACCTFROM\", order: 10, owner: TransferInfo, /*type: CreditCardAccountDetails,*/ fcn: \"getCreditCardAccountFrom\"});\n\n\n/**\n * The credit card to transfer from.\n *\n * @param {CreditCardAccountDetails} creditCardAccountFrom The credit card to transfer from.\n */\nTransferInfo.prototype.setCreditCardAccountFrom = function(creditCardAccountFrom) {\n  this.bankAccountFrom = null;\n  this.creditCardAccountFrom = creditCardAccountFrom;\n};\n\n\n/**\n * The credit card to transfer from.\n *\n * @param {CreditCardAccountDetails} creditCardAccountFrom The credit card to transfer from.\n */\nTransferInfo.prototype.setAccountFrom = function(creditCardAccountFrom) {\n  this.setCreditCardAccountFrom(creditCardAccountFrom);\n};\n\n\n/**\n * The bank account to transfer to.\n *\n * @return {BankAccountDetails} The bank account to transfer to.\n */\nTransferInfo.prototype.getBankAccountTo = function() {\n  return this.bankAccountTo;\n};\nChildAggregate.add({name: \"BANKACCTTO\", order: 20, owner: TransferInfo, /*type: BankAccountDetails,*/ fcn: \"getBankAccountTo\"});\n\n\n/**\n * The bank account to transfer to.\n *\n * @param {BankAccountDetails} bankAccountTo The bank account to transfer to.\n */\nTransferInfo.prototype.setBankAccountTo = function(bankAccountTo) {\n  this.creditCardAccountTo = null;\n  this.bankAccountTo = bankAccountTo;\n};\n\n\n/**\n * The bank account to transfer to.\n *\n * @param {BankAccountDetails} bankAccountTo The bank account to transfer to.\n */\nTransferInfo.prototype.setAccountTo = function(bankAccountTo) {\n  this.setBankAccountTo(bankAccountTo);\n};\n\n\n/**\n * The credit card account to transfer to.\n *\n * @return {CreditCardAccountDetails} The credit card account to transfer to.\n */\nTransferInfo.prototype.getCreditCardAccountTo = function() {\n  return this.creditCardAccountTo;\n};\nChildAggregate.add({name: \"CCACCTTO\", order: 30, owner: TransferInfo, /*type: CreditCardAccountDetails,*/ fcn: \"getCreditCardAccountTo\"});\n\n\n/**\n * The credit card account to transfer to.\n *\n * @param {CreditCardAccountDetails} creditCardAccountTo The credit card account to transfer to.\n */\nTransferInfo.prototype.setCreditCardAccountTo = function(creditCardAccountTo) {\n  this.bankAccountTo = null;\n  this.creditCardAccountTo = creditCardAccountTo;\n};\n\n\n/**\n * The credit card account to transfer to.\n *\n * @param {CreditCardAccountDetails} creditCardAccountTo The credit card account to transfer to.\n */\nTransferInfo.prototype.setAccountTo = function(creditCardAccountTo) {\n  this.setCreditCardAccountTo(creditCardAccountTo);\n};\n\n\n/**\n * The amount.\n *\n * @return {Double} The amount.\n */\nTransferInfo.prototype.getAmount = function() {\n  return this.amount;\n};\nElement.add({name: \"TRNAMT\", required: true, order: 40, owner: TransferInfo, /*type: Double,*/ fcn: \"getAmount\"});\n\n\n/**\n * The amount.\n *\n * @param {Double} amount The amount.\n */\nTransferInfo.prototype.setAmount = function(amount) {\n  this.amount = amount;\n};\n\n\n/**\n * The due date.\n *\n * @return {Date} The due date.\n */\nTransferInfo.prototype.getDue = function() {\n  return this.due;\n};\nElement.add({name: \"DTDUE\", order: 50, owner: TransferInfo, /*type: Date,*/ fcn: \"getDue\"});\n\n\n/**\n * The due date.\n *\n * @param {Date} due The due date.\n */\nTransferInfo.prototype.setDue = function(due) {\n  this.due = due;\n};\n\n\n\n\nmodule.exports = TransferInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\n\n//import java.util.Date;\n\n/**\n * @class\n */\nfunction TransferStatus () {\n\n  /**\n   * @name TransferStatus#event\n   * @type TransferStatusEvent\n   * @access private\n   */\n  this.event = null;\n\n  /**\n   * @name TransferStatus#date\n   * @type Date\n   * @access private\n   */\n  this.date = null;\n}\n\n\n\nAggregate.add(\"XFERPRCSTS\", TransferStatus);\n\n\n/**\n * The event.\n *\n * @return {TransferStatusEvent} The event.\n */\nTransferStatus.prototype.getEvent = function() {\n  return this.event;\n};\nElement.add({name: \"XFERPRCCODE\", required: true, order: 0, owner: TransferStatus, /*type: TransferStatusEvent,*/ fcn: \"getEvent\"});\n\n\n/**\n * The event.\n *\n * @param {TransferStatusEvent} event The event.\n */\nTransferStatus.prototype.setEvent = function(event) {\n  this.event = event;\n};\n\n\n/**\n * The date of the event.\n *\n * @return {Date} The date of the event.\n */\nTransferStatus.prototype.getDate = function() {\n  return this.date;\n};\nElement.add({name: \"DTXFERPRC\", required: true, order: 10, owner: TransferStatus, /*type: Date,*/ fcn: \"getDate\"});\n\n\n/**\n * The date of the event.\n *\n * @param {Date} date The date of the event.\n */\nTransferStatus.prototype.setDate = function(date) {\n  this.date = date;\n};\n\n\n\n\nmodule.exports = TransferStatus;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * @enum\n */\nvar TransferStatusEvent = {\n\n  WILLPROCESSON: 0,\n\n  POSTEDON: 1,\n\n  NOFUNDSON: 2,\n\n  CANCELEDON: 3,\n\n  FAILEDON: 4\n};\n\n\nmodule.exports = TransferStatusEvent;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\nvar StatusCode = require(\"./StatusCode\");\n\n/**\n * Holder for an unknown status code.\n *\n * @class\n * @augments StatusCode\n */\nfunction UnknownStatusCode () {\n\n  /**\n   * @name UnknownStatusCode#code\n   * @type int\n   * @access private\n   */\n  this.code = null;\n\n  /**\n   * @name UnknownStatusCode#message\n   * @type String\n   * @access private\n   */\n  this.message = null;\n\n  /**\n   * @name UnknownStatusCode#defaultSeverity\n   * @type Status.Severity\n   * @access private\n   */\n  this.defaultSeverity = null;\n}\n\ninherit(UnknownStatusCode, \"implements\", StatusCode);\n\n\n\n\nUnknownStatusCode.prototype.UnknownStatusCode = function(/*int*/ code, /*String*/ message, /*Severity*/ defaultSeverity) {\n  this.code = code;\n  this.message = message;\n  this.defaultSeverity = defaultSeverity;\n};\n\n\nUnknownStatusCode.prototype.getCode = function() {\n  return this.code;\n};\n\n\nUnknownStatusCode.prototype.getMessage = function() {\n  return this.message;\n};\n\n\nUnknownStatusCode.prototype.getDefaultSeverity = function() {\n  return this.defaultSeverity;\n};\n\n\n// @Override\nUnknownStatusCode.prototype.toString = function() {\n  return String.valueOf(this.code);\n};\n\n\n\n\nmodule.exports = UnknownStatusCode;\n","\"use strict\";\n\nmodule.exports = {\n  AccountDetails: require(\"./AccountDetails\"),\n  AccountInfo: require(\"./AccountInfo\"),\n  AccountStatus: require(\"./AccountStatus\"),\n  BalanceInfo: require(\"./BalanceInfo\"),\n  BalanceRecord: require(\"./BalanceRecord\"),\n  CorrectionAction: require(\"./CorrectionAction\"),\n  Currency: require(\"./Currency\"),\n  Payee: require(\"./Payee\"),\n  ProcessorDayOff: require(\"./ProcessorDayOff\"),\n  StatementRange: require(\"./StatementRange\"),\n  StatementRequest: require(\"./StatementRequest\"),\n  StatementResponse: require(\"./StatementResponse\"),\n  Status: require(\"./Status\"),\n  StatusCode: require(\"./StatusCode\"),\n  StatusHolder: require(\"./StatusHolder\"),\n  T1099Request: require(\"./T1099Request\"),\n  T1099Response: require(\"./T1099Response\"),\n  Transaction: require(\"./Transaction\"),\n  TransactionList: require(\"./TransactionList\"),\n  TransactionType: require(\"./TransactionType\"),\n  TransferInfo: require(\"./TransferInfo\"),\n  TransferStatus: require(\"./TransferStatus\"),\n  TransferStatusEvent: require(\"./TransferStatusEvent\"),\n  UnknownStatusCode: require(\"./UnknownStatusCode\"),\n};\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar Element = require(\"../../../meta/Element\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar AccountDetails = require(\"../common/AccountDetails\");\n\n/**\n * @class\n * \n * @see \"OFX Spec, Section 11.3.2\"\n * @augments AccountDetails\n */\nfunction CreditCardAccountDetails () {\n\n  /**\n   * @name CreditCardAccountDetails#accountNumber\n   * @type String\n   * @access private\n   */\n  this.accountNumber = null;\n\n  /**\n   * @name CreditCardAccountDetails#accountKey\n   * @type String\n   * @access private\n   */\n  this.accountKey = null;\n}\n\ninherit(CreditCardAccountDetails, \"implements\", AccountDetails);\n\n\nAggregate.add(\"CreditCardAccountDetails\", CreditCardAccountDetails);\n\n\n/**\n * The account number.\n *\n * @return {String} The account number.\n */\nCreditCardAccountDetails.prototype.getAccountNumber = function() {\n  return this.accountNumber;\n};\nElement.add({name: \"ACCTID\", required: true, order: 0, owner: CreditCardAccountDetails, /*type: String,*/ fcn: \"getAccountNumber\"});\n\n\n/**\n * The account number.\n *\n * @param {String} accountNumber The account number.\n */\nCreditCardAccountDetails.prototype.setAccountNumber = function(accountNumber) {\n  this.accountNumber = accountNumber;\n};\n\n\n/**\n * The account key.\n *\n * @return {String} The account key.\n */\nCreditCardAccountDetails.prototype.getAccountKey = function() {\n  return this.accountKey;\n};\nElement.add({name: \"ACCKEY\", order: 10, owner: CreditCardAccountDetails, /*type: String,*/ fcn: \"getAccountKey\"});\n\n\n/**\n * The account key.\n *\n * @param {String} accountKey The account key.\n */\nCreditCardAccountDetails.prototype.setAccountKey = function(accountKey) {\n  this.accountKey = accountKey;\n};\n\n\n\n\nmodule.exports = CreditCardAccountDetails;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar AccountInfo = require(\"../common/AccountInfo\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Element = require(\"../../../meta/Element\");\n\n/**\n * @class\n * @augments AccountInfo\n */\nfunction CreditCardAccountInfo () {\n\n  /**\n   * @name CreditCardAccountInfo#creditCardAccount\n   * @type CreditCardAccountDetails\n   * @access private\n   */\n  this.creditCardAccount = null;\n\n  /**\n   * @name CreditCardAccountInfo#supportsTransactionDetailOperations\n   * @type Boolean\n   * @access private\n   */\n  this.supportsTransactionDetailOperations = null;\n\n  /**\n   * @name CreditCardAccountInfo#supportsTransferToOtherAccountOperations\n   * @type Boolean\n   * @access private\n   */\n  this.supportsTransferToOtherAccountOperations = null;\n\n  /**\n   * @name CreditCardAccountInfo#supportsTransferFromOtherAccountOperations\n   * @type Boolean\n   * @access private\n   */\n  this.supportsTransferFromOtherAccountOperations = null;\n\n  /**\n   * @name CreditCardAccountInfo#status\n   * @type AccountStatus\n   * @access private\n   */\n  this.status = null;\n}\n\ninherit(CreditCardAccountInfo, \"implements\", AccountInfo);\n\n\nAggregate.add(\"CCACCTINFO\", CreditCardAccountInfo);\n\n\n/**\n * The credit card account this information is referencing.\n *\n * @return {CreditCardAccountDetails} The credit card account this information is referencing.\n */\nCreditCardAccountInfo.prototype.getCreditCardAccount = function() {\n  return this.creditCardAccount;\n};\nChildAggregate.add({name: \"CCACCTFROM\", required: true, order: 0, owner: CreditCardAccountInfo, /*type: CreditCardAccountDetails,*/ fcn: \"getCreditCardAccount\"});\n\n\n/**\n * The credit card account this information is referencing.\n *\n * @param {CreditCardAccountDetails} creditCardAccount The credit card account this information is referencing.\n */\nCreditCardAccountInfo.prototype.setCreditCardAccount = function(creditCardAccount) {\n  this.creditCardAccount = creditCardAccount;\n};\n\n\n// Inherited.\nCreditCardAccountInfo.prototype.getAccountDetails = function() {\n  return this.getCreditCardAccount();\n};\n\n\n/**\n * Whether this account supports download of transaction details.\n *\n * @return {Boolean} Whether this account supports download of transaction details.\n */\nCreditCardAccountInfo.prototype.getSupportsTransactionDetailOperations = function() {\n  return this.supportsTransactionDetailOperations;\n};\nElement.add({name: \"SUPTXDL\", required: true, order: 10, owner: CreditCardAccountInfo, /*type: Boolean,*/ fcn: \"getSupportsTransactionDetailOperations\"});\n\n\n/**\n * Whether this account supports download of transaction details.\n *\n * @param {Boolean} supportsTransactionDetailOperations Whether this account supports download of transaction details.\n */\nCreditCardAccountInfo.prototype.setSupportsTransactionDetailOperations = function(supportsTransactionDetailOperations) {\n  this.supportsTransactionDetailOperations = supportsTransactionDetailOperations;\n};\n\n\n/**\n * Whether this account supports transfer operations to other accounts.\n *\n * @return {Boolean} Whether this account supports transfer operations to other accounts.\n */\nCreditCardAccountInfo.prototype.getSupportsTransferToOtherAccountOperations = function() {\n  return this.supportsTransferToOtherAccountOperations;\n};\nElement.add({name: \"XFERSRC\", required: true, order: 20, owner: CreditCardAccountInfo, /*type: Boolean,*/ fcn: \"getSupportsTransferToOtherAccountOperations\"});\n\n\n/**\n * Whether this account supports transfer operations to other accounts.\n *\n * @param {Boolean} supportsTransferToOtherAccountOperations Whether this account supports transfer operations to other accounts.\n */\nCreditCardAccountInfo.prototype.setSupportsTransferToOtherAccountOperations = function(supportsTransferToOtherAccountOperations) {\n  this.supportsTransferToOtherAccountOperations = supportsTransferToOtherAccountOperations;\n};\n\n\n/**\n * Whether this account supports transfer operations from other accounts.\n *\n * @return {Boolean} Whether this account supports transfer operations from other accounts.\n */\nCreditCardAccountInfo.prototype.getSupportsTransferFromOtherAccountOperations = function() {\n  return this.supportsTransferFromOtherAccountOperations;\n};\nElement.add({name: \"XFERDEST\", required: true, order: 30, owner: CreditCardAccountInfo, /*type: Boolean,*/ fcn: \"getSupportsTransferFromOtherAccountOperations\"});\n\n\n/**\n * Whether this account supports transfer operations from other accounts.\n *\n * @param {Boolean} supportsTransferFromOtherAccountOperations Whether this account supports transfer operations from other accounts.\n */\nCreditCardAccountInfo.prototype.setSupportsTransferFromOtherAccountOperations = function(supportsTransferFromOtherAccountOperations) {\n  this.supportsTransferFromOtherAccountOperations = supportsTransferFromOtherAccountOperations;\n};\n\n\n/**\n * The account status.\n *\n * @return {AccountStatus} The account status.\n */\nCreditCardAccountInfo.prototype.getStatus = function() {\n  return this.status;\n};\nElement.add({name: \"SVCSTATUS\", required: true, order: 40, owner: CreditCardAccountInfo, /*type: AccountStatus,*/ fcn: \"getStatus\"});\n\n\n/**\n * The account status.\n *\n * @param {AccountStatus} status The account status.\n */\nCreditCardAccountInfo.prototype.setStatus = function(status) {\n  this.status = status;\n};\n\n\n\n\nmodule.exports = CreditCardAccountInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar MessageSetType = require(\"../MessageSetType\");\nvar RequestMessageSet = require(\"../RequestMessageSet\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\n\n/**\n * @class\n * @augments CreditCardRequestMessageSet\n */\nfunction CreditCardRequestMessageSet () {\n\n  /**\n   * @name CreditCardRequestMessageSet#statementRequest\n   * @type CreditCardStatementRequestTransaction\n   * @access private\n   */\n  this.statementRequest = null;\n}\n\ninherit(CreditCardRequestMessageSet, \"extends\", RequestMessageSet);\n\n\nAggregate.add(\"CREDITCARDMSGSRQV1\", CreditCardRequestMessageSet);\n\n\nCreditCardRequestMessageSet.prototype.getType = function() {\n  return MessageSetType.creditcard;\n};\n\n\n/**\n * The request.\n *\n * @return {CreditCardStatementRequestTransaction} The request.\n */\nCreditCardRequestMessageSet.prototype.getStatementRequest = function() {\n  return this.statementRequest;\n};\nChildAggregate.add({order: 0, owner: CreditCardRequestMessageSet, /*type: CreditCardStatementRequestTransaction,*/ fcn: \"getStatementRequest\"});\n\n\n/**\n * The request.\n *\n * @param {CreditCardStatementRequestTransaction} statementRequest The request.\n */\nCreditCardRequestMessageSet.prototype.setStatementRequest = function(statementRequest) {\n  this.statementRequest = statementRequest;\n};\n\n\n// Inherited.\nCreditCardRequestMessageSet.prototype.getRequestMessages = function() {\n  var requestMessages = [];\n  if (this.getStatementRequest() !== null) {\n    requestMessages.push(this.getStatementRequest());\n  }\n  return requestMessages;\n};\n\n\n\n\nmodule.exports = CreditCardRequestMessageSet;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar MessageSetType = require(\"../MessageSetType\");\nvar ResponseMessageSet = require(\"../ResponseMessageSet\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\n\n/**\n * @class\n * @augments ResponseMessageSet\n */\nfunction CreditCardResponseMessageSet () {\n\n  /**\n   * @name CreditCardResponseMessageSet#statementResponses\n   * @type List<CreditCardStatementResponseTransaction>\n   * @access private\n   */\n  this.statementResponses = null;\n}\n\ninherit(CreditCardResponseMessageSet, \"extends\", ResponseMessageSet);\n\n\nAggregate.add(\"CREDITCARDMSGSRSV1\", CreditCardResponseMessageSet);\n\n\nCreditCardResponseMessageSet.prototype.getType = function() {\n  return MessageSetType.creditcard;\n};\n\n\n/**\n * The statement response list.\n *\n * Most OFX files have a single statement response, except MT2OFX\n * which outputs OFX with multiple statement responses\n * in a single banking response message set.\n *\n * @return {CreditCardStatementResponseTransaction[]} The statement response list.\n */\nCreditCardResponseMessageSet.prototype.getStatementResponses = function() {\n  return this.statementResponses;\n};\nChildAggregate.add({order: 0, owner: CreditCardResponseMessageSet, /*type: CreditCardStatementResponseTransaction[],*/ fcn: \"getStatementResponses\"});\n\n\n/**\n * The statement reponse list.\n *\n * @param {CreditCardStatementResponseTransaction[]} statementResponses The statement response list.\n */\nCreditCardResponseMessageSet.prototype.setStatementResponses = function(statementResponses) {\n  this.statementResponses = statementResponses;\n};\n\n\n/**\n * The first statement response.\n *\n * @return {CreditCardStatementResponseTransaction} the first bank statement response.\n * @deprecated Use getStatementResponses() because sometimes there are multiple responses\n */\nCreditCardResponseMessageSet.prototype.getStatementResponse = function() {\n  return this.statementResponses === null || this.statementResponses.length === 0 ? null : this.statementResponses[0];\n};\n\n\n/**\n * The statement response.\n *\n * @param {CreditCardStatementResponseTransaction} statementResponse The statement response.\n */\nCreditCardResponseMessageSet.prototype.setStatementResponse = function(statementResponse) {\n  this.statementResponses = [statementResponse];\n};\n\n\n// Inherited.\nCreditCardResponseMessageSet.prototype.getResponseMessages = function() {\n  return this.statementResponses;\n};\n\n\n\n\nmodule.exports = CreditCardResponseMessageSet;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar StatementRequest = require(\"../common/StatementRequest\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\n\n/**\n * @class\n * @augments StatementRequest\n */\nfunction CreditCardStatementRequest () {\n\n  /**\n   * @name CreditCardStatementRequest#account\n   * @type CreditCardAccountDetails\n   * @access private\n   */\n  this.account = null;\n}\n\ninherit(CreditCardStatementRequest, \"extends\", StatementRequest);\n\n\nAggregate.add(\"CCSTMTRQ\", CreditCardStatementRequest);\n\n\n/**\n * The account details.\n *\n * @return {CreditCardAccountDetails} The account details.\n */\nCreditCardStatementRequest.prototype.getAccount = function() {\n  return this.account;\n};\nChildAggregate.add({name: \"CCACCTFROM\", required: true, order: 0, owner: CreditCardStatementRequest, /*type: CreditCardAccountDetails,*/ fcn: \"getAccount\"});\n\n\n/**\n * The account details.\n *\n * @param {CreditCardAccountDetails} account The account details.\n */\nCreditCardStatementRequest.prototype.setAccount = function(account) {\n  this.account = account;\n};\n\n\n\n\nmodule.exports = CreditCardStatementRequest;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar CreditCardStatementRequest = require(\"./CreditCardStatementRequest\");\nvar TransactionWrappedRequestMessage = require(\"../TransactionWrappedRequestMessage\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\n\n/**\n * @class\n * @augments TransactionWrappedRequestMessage\n */\nfunction CreditCardStatementRequestTransaction () {\n\n  /**\n   * @name CreditCardStatementRequestTransaction#message\n   * @type CreditCardStatementRequest\n   * @access private\n   */\n  this.message = null;\n}\n\ninherit(CreditCardStatementRequestTransaction, \"extends\", new TransactionWrappedRequestMessage(CreditCardStatementRequest));\n\n\nAggregate.add(\"CCSTMTTRNRQ\", CreditCardStatementRequestTransaction);\n\n\n/**\n * The message.\n *\n * @return {CreditCardStatementRequest} The message.\n */\nCreditCardStatementRequestTransaction.prototype.getMessage = function() {\n  return this.message;\n};\nChildAggregate.add({required: true, order: 30, owner: CreditCardStatementRequestTransaction, /*type: CreditCardStatementRequest,*/ fcn: \"getMessage\"});\n\n\n/**\n * The message.\n *\n * @param {CreditCardStatementRequest} message The message.\n *\n */\nCreditCardStatementRequestTransaction.prototype.setMessage = function(message) {\n  this.message = message;\n};\n\n\n// Inherited.\nCreditCardStatementRequestTransaction.prototype.setWrappedMessage = function(/*CreditCardStatementRequest*/ message) {\n  this.setMessage(message);\n};\n\n\n\n\nmodule.exports = CreditCardStatementRequestTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar StatementResponse = require(\"../common/StatementResponse\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\n\n/**\n * @class\n * @augments StatementResponse\n */\nfunction CreditCardStatementResponse () {\n\n  /**\n   * @name CreditCardStatementResponse#account\n   * @type CreditCardAccountDetails\n   * @access private\n   */\n  this.account = null;\n}\n\ninherit(CreditCardStatementResponse, \"extends\", StatementResponse);\n\n\nAggregate.add(\"CCSTMTRS\", CreditCardStatementResponse);\n\n\nCreditCardStatementResponse.prototype.getResponseMessageName = function() {\n  return \"credit card statement\";\n};\n\n\n/**\n * The account for the statement.\n *\n * @return {CreditCardAccountDetails} The account for the statement.\n */\nCreditCardStatementResponse.prototype.getAccount = function() {\n  return this.account;\n};\nChildAggregate.add({name:\"CCACCTFROM\", order: 10, owner: CreditCardStatementResponse, /*type: CreditCardAccountDetails,*/ fcn: \"getAccount\"});\n\n\n/**\n * The account for the statement.\n *\n * @param {CreditCardAccountDetails} account The account for the statement.\n */\nCreditCardStatementResponse.prototype.setAccount = function(account) {\n  this.account = account;\n};\n\n\n\n\nmodule.exports = CreditCardStatementResponse;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar CreditCardStatementResponse = require(\"./CreditCardStatementResponse\");\nvar TransactionWrappedResponseMessage = require(\"../TransactionWrappedResponseMessage\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\n\n/**\n * @class\n * @augments TransactionWrappedResponseMessage\n */\nfunction CreditCardStatementResponseTransaction () {\n\n  /**\n   * @name CreditCardStatementResponseTransaction#message\n   * @type CreditCardStatementResponse\n   * @access private\n   */\n  this.message = null;\n}\n\ninherit(CreditCardStatementResponseTransaction, \"extends\", new TransactionWrappedResponseMessage(CreditCardStatementResponse));\n\n\nAggregate.add(\"CCSTMTTRNRS\", CreditCardStatementResponseTransaction);\n\n\n/**\n * The message.\n *\n * @return {CreditCardStatementResponse} The message.\n */\nCreditCardStatementResponseTransaction.prototype.getMessage = function() {\n  return this.message;\n};\nChildAggregate.add({required: true, order: 30, owner: CreditCardStatementResponseTransaction, /*type: CreditCardStatementResponse,*/ fcn: \"getMessage\"});\n\n\n/**\n * The message.\n *\n * @param {CreditCardStatementResponse} message The message.\n */\nCreditCardStatementResponseTransaction.prototype.setMessage = function(message) {\n  this.message = message;\n};\n\n\n// Inherited.\nCreditCardStatementResponseTransaction.prototype.getWrappedMessage = function() {\n  return this.getMessage();\n};\n\n\n\n\nmodule.exports = CreditCardStatementResponseTransaction;\n","\"use strict\";\n\nmodule.exports = {\n  CreditCardAccountDetails: require(\"./CreditCardAccountDetails\"),\n  CreditCardAccountInfo: require(\"./CreditCardAccountInfo\"),\n  CreditCardRequestMessageSet: require(\"./CreditCardRequestMessageSet\"),\n  CreditCardResponseMessageSet: require(\"./CreditCardResponseMessageSet\"),\n  CreditCardStatementRequest: require(\"./CreditCardStatementRequest\"),\n  CreditCardStatementRequestTransaction: require(\"./CreditCardStatementRequestTransaction\"),\n  CreditCardStatementResponse: require(\"./CreditCardStatementResponse\"),\n  CreditCardStatementResponseTransaction: require(\"./CreditCardStatementResponseTransaction\"),\n};\n","\"use strict\";\n\nmodule.exports = {\n  banking: require(\"./banking/index\"),\n  common: require(\"./common/index\"),\n  creditcard: require(\"./creditcard/index\"),\n  investment: require(\"./investment/index\"),\n  profile: require(\"./profile/index\"),\n  seclist: require(\"./seclist/index\"),\n  signon: require(\"./signon/index\"),\n  signup: require(\"./signup/index\"),\n  tax1099: require(\"./tax1099/index\"),\n\n  ApplicationSecurity: require(\"./ApplicationSecurity\"),\n  MessageSetProfile: require(\"./MessageSetProfile\"),\n  MessageSetType: require(\"./MessageSetType\"),\n  RequestEnvelope: require(\"./RequestEnvelope\"),\n  RequestMessage: require(\"./RequestMessage\"),\n  RequestMessageSet: require(\"./RequestMessageSet\"),\n  ResponseEnvelope: require(\"./ResponseEnvelope\"),\n  ResponseMessage: require(\"./ResponseMessage\"),\n  ResponseMessageSet: require(\"./ResponseMessageSet\"),\n  SignonProfile: require(\"./SignonProfile\"),\n  TransactionWrappedRequestMessage: require(\"./TransactionWrappedRequestMessage\"),\n  TransactionWrappedResponseMessage: require(\"./TransactionWrappedResponseMessage\")\n};\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Type of investment account.\n *\n * @enum\n * @see \"OFX Spec, Section 13.6.2\"\n */\nvar AccountType = {\n  INDIVIDUAL: 0,\n  JOINT: 1,\n  TRUST: 2,\n  CORPORATE: 3,\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"INDIVIDUAL\".equals(ofxVal)) {\n      return AccountType.INDIVIDUAL;\n    } else if (\"JOINT\".equals(ofxVal)) {\n      return AccountType.JOINT;\n    } else if (\"CORPORATE\".equals(ofxVal)) {\n      return AccountType.CORPORATE;\n    } else if (\"CORPORATE\".equals(ofxVal)) {\n      return AccountType.CORPORATE;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = AccountType;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Activation status of an account.\n * @see \"Section 13.6.2, OFX Spec\"\n *\n * @enum\n */\nvar ActivationStatus = {\n  ACTIVE: 0,\n  PENDING: 1,\n  AVAILABLE: 2,\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"ACTIVE\".equals(ofxVal)) {\n      return ActivationStatus.ACTIVE;\n    } else if (\"PEND\".equals(ofxVal)) {\n      return ActivationStatus.PENDING;\n    } else if (\"AVAIL\".equals(ofxVal)) {\n      return ActivationStatus.AVAILABLE;\n    } else {\n      return null;\n    }\n  }\n}\n;\n\n\nmodule.exports = ActivationStatus;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar AccountDetails = require(\"../../common/AccountDetails\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\n\n/**\n * Aggregate for the details that identifity a brokerage account.\n *\n * @class\n * @augments AccountDetails\n * @see \"OFX Spec, Section 13.6.1\"\n */\nfunction InvestmentAccountDetails () {\n\n  /**\n   * @name InvestmentAccountDetails#brokerId\n   * @type String\n   * @access private\n   */\n  this.brokerId = null;\n\n  /**\n   * @name InvestmentAccountDetails#accountNumber\n   * @type String\n   * @access private\n   */\n  this.accountNumber = null;\n\n  /**\n   * @name InvestmentAccountDetails#accountKey\n   * @type String\n   * @access private\n   */\n  this.accountKey = null;\n}\n\ninherit(InvestmentAccountDetails, \"implements\", AccountDetails);\n\n\nAggregate.add(\"InvestmentAccountDetails\", InvestmentAccountDetails);\n\n\n/**\n * Gets the broker id.\n *\n * @return {String} the id of the broker\n */\nInvestmentAccountDetails.prototype.getBrokerId = function() {\n  return this.brokerId;\n};\nElement.add({name: \"BROKERID\", required: true, order: 0, owner: InvestmentAccountDetails, /*type: String,*/ fcn: \"getBrokerId\"});\n\n\n/**\n * Sets the broker id.\n *\n * @param {String} brokerId the id of the broker\n */\nInvestmentAccountDetails.prototype.setBrokerId = function(brokerId) {\n  this.brokerId = brokerId;\n};\n\n\n/**\n * Gets the account number.\n *\n * @return {String} the account number\n */\nInvestmentAccountDetails.prototype.getAccountNumber = function() {\n  return this.accountNumber;\n};\nElement.add({name: \"ACCTID\", required: true, order: 20, owner: InvestmentAccountDetails, /*type: String,*/ fcn: \"getAccountNumber\"});\n\n\n/**\n * Sets the account number.\n *\n * @param {String} accountNumber the account number\n */\nInvestmentAccountDetails.prototype.setAccountNumber = function(accountNumber) {\n  this.accountNumber = accountNumber;\n};\n\n\n/**\n * Gets the account key.\n *\n * @return {String} the account key\n */\nInvestmentAccountDetails.prototype.getAccountKey = function() {\n  return this.accountKey;\n};\nElement.add({name: \"ACCTKEY\", order: 40, owner: InvestmentAccountDetails, /*type: String,*/ fcn: \"getAccountKey\"});\n\n\n/**\n * Sets the account key.\n *\n * @param {String} accountKey the account key\n */\nInvestmentAccountDetails.prototype.setAccountKey = function(accountKey) {\n  this.accountKey = accountKey;\n};\n\n\n\n\nmodule.exports = InvestmentAccountDetails;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar AccountInfo = require(\"../../common/AccountInfo\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar UnitedStatesAccountType = require(\"./UnitedStatesAccountType\");\nvar ActivationStatus = require(\"./ActivationStatus\");\nvar AccountType = require(\"./AccountType\");\n\n/**\n * Aggregate for the info about a brokerage account.\n *\n * @class\n * @augments AccountInfo\n * @see \"OFX Spec, Section 13.6.2\"\n */\nfunction InvestmentAccountInfo () {\n\n  /**\n   * @name InvestmentAccountInfo#investmentAccount\n   * @type InvestmentAccountDetails\n   * @access private\n   */\n  this.investmentAccount = null;\n\n  /**\n   * @name InvestmentAccountInfo#unitedStatesAccountType\n   * @type String\n   * @access private\n   */\n  this.unitedStatesAccountType = null;\n\n  /**\n   * @name InvestmentAccountInfo#supportsChecking\n   * @type Boolean\n   * @access private\n   */\n  this.supportsChecking = null;\n\n  /**\n   * @name InvestmentAccountInfo#activationStatus\n   * @type String\n   * @access private\n   */\n  this.activationStatus = null;\n\n  /**\n   * @name InvestmentAccountInfo#investmentAccountType\n   * @type String\n   * @access private\n   */\n  this.investmentAccountType = null;\n\n  /**\n   * @name InvestmentAccountInfo#optionLevel\n   * @type String\n   * @access private\n   */\n  this.optionLevel = null;\n}\n\ninherit(InvestmentAccountInfo, \"implements\", AccountInfo);\n\n\nAggregate.add(\"INVACCTINFO\", InvestmentAccountInfo);\n\n\n/**\n * Gets the investment account this information is referencing.\n *\n * @return {InvestmentAccountDetails} the investment account this information is referencing\n */\nInvestmentAccountInfo.prototype.getInvestmentAccount = function() {\n  return this.investmentAccount;\n};\nChildAggregate.add({name: \"INVACCTFROM\", required: true, order: 0, owner: InvestmentAccountInfo, /*type: InvestmentAccountDetails,*/ fcn: \"getInvestmentAccount\"});\n\n\n/**\n * Sets the investment account this information is referencing. This is a required field\n * according to the OFX spec.\n *\n * @param {InvestmentAccountDetails} investmentAccount the investment account this information is referencing\n */\nInvestmentAccountInfo.prototype.setInvestmentAccount = function(investmentAccount) {\n  this.investmentAccount = investmentAccount;\n};\n\n\n// Inherited.\nInvestmentAccountInfo.prototype.getAccountDetails = function() {\n  return this.getInvestmentAccount();\n};\n\n\n/**\n * Gets the United States account type. This is a required field according to the OFX spec.\n * @see \"OFX Spec, Section 13.6.1\"\n *\n * @return {String} the United States account type\n */\nInvestmentAccountInfo.prototype.getUnitedStatesAccountType = function() {\n  return this.unitedStatesAccountType;\n};\nElement.add({name: \"USPRODUCTTYPE\", required: true, order: 10, owner: InvestmentAccountInfo, /*type: String,*/ fcn: \"getUnitedStatesAccountType\"});\n\n\n/**\n * Sets United States account type. This is a required field according to the OFX spec.\n * @see \"OFX Spec, Section 13.6.1\"\n *\n * @param {String} unitedStatesAccountType the United States account type\n */\nInvestmentAccountInfo.prototype.setUnitedStatesAccountType = function(unitedStatesAccountType) {\n  this.unitedStatesAccountType = unitedStatesAccountType;\n};\n\n\n/**\n * Gets the United States account type as one of the well-known types.\n *\n * @return {UnitedStatesAccountType} the account type or null if it's not one of the well-known types\n */\nInvestmentAccountInfo.prototype.getUnitedStatesAccountTypeEnum = function() {\n  return UnitedStatesAccountType.fromOfx(this.unitedStatesAccountType);\n};\n\n\n/**\n * Gets whether the account supports checking. This is a required field according to the OFX spec.\n * @see \"OFX Spec, Section 13.6.1\"\n *\n * @return {Boolean} whether the account supports checking\n */\nInvestmentAccountInfo.prototype.getSupportsChecking = function() {\n  return this.supportsChecking;\n};\nElement.add({name: \"CHECKING\", required: true, order: 20, owner: InvestmentAccountInfo, /*type: Boolean,*/ fcn: \"getSupportsChecking\"});\n\n\n/**\n * Sets whether the account supports checking. This is a required field according to the OFX spec.\n * @see \"OFX Spec, Section 13.6.1\"\n *\n * @param {Boolean} supportsChecking whether the account supports checking\n */\nInvestmentAccountInfo.prototype.setSupportsChecking = function(supportsChecking) {\n  this.supportsChecking = supportsChecking;\n};\n\n\n/**\n * Gets the activation status for investment statement download. This is a required field\n * according to the OFX spec.\n *\n * @return {String} the activation status\n */\nInvestmentAccountInfo.prototype.getActivationStatus = function() {\n  return this.activationStatus;\n};\nElement.add({name: \"SVCSTATUS\", required: true, order: 30, owner: InvestmentAccountInfo, /*type: String,*/ fcn: \"getActivationStatus\"});\n\n\n/**\n * Sets the activation status for investment statement download. This is a required field\n * according to the OFX spec.\n *\n * @param {String} activationStatus the activation status\n */\nInvestmentAccountInfo.prototype.setActivationStatus = function(activationStatus) {\n  this.activationStatus = activationStatus;\n};\n\n\n/**\n * Gets the activation status as one of the well-known types.\n *\n * @return {ActivationStatus} the activation status or null if it wasn't one of the well known types\n */\nInvestmentAccountInfo.prototype.getActivationStatusEnum = function() {\n  return ActivationStatus.fromOfx(this.getActivationStatus());\n};\n\n\n/**\n * Gets the type of investment account. One of \"INDIVIDUAL\", \"JOINT\", \"TRUST\", or \"CORPORATE\".\n * This is an optional field according to the OFX spec.\n *\n * @return {String} the type of account\n */\nInvestmentAccountInfo.prototype.getInvestmentAccountType = function() {\n  return this.investmentAccountType;\n};\nElement.add({name: \"INVACCTTYPE\", order: 40, owner: InvestmentAccountInfo, /*type: String,*/ fcn: \"getInvestmentAccountType\"});\n\n\n/**\n * Sets the type of investment account. One of \"INDIVIDUAL\", \"JOINT\", \"TRUST\", or \"CORPORATE\".\n * This is an optional field according to the OFX spec.\n *\n * @param {String} investmentAccountType the type of account\n */\nInvestmentAccountInfo.prototype.setInvestmentAccountType = function(investmentAccountType) {\n  this.investmentAccountType = investmentAccountType;\n};\n\n\n/**\n * Gets the type of investment account as one of the well-known types.\n *\n * @return {AccountType} the type of investment account or null if it's not one of the well-known types\n */\nInvestmentAccountInfo.prototype.getInvestmentAccountTypeEnum = function() {\n  return AccountType.fromOfx(this.getInvestmentAccountType());\n};\n\n\n/**\n * Gets the description of option trading privileges. * This is an optional field according to\n * the OFX spec.\n *\n * @return {String} the description of option trading privileges.\n */\nInvestmentAccountInfo.prototype.getOptionLevel = function() {\n  return this.optionLevel;\n};\nElement.add({name: \"OPTIONLEVEL\", order: 50, owner: InvestmentAccountInfo, /*type: String,*/ fcn: \"getOptionLevel\"});\n\n\n/**\n * Sets the description of option trading privileges. * This is an optional field according to\n * the OFX spec.\n *\n * @param {String} optionLevel the description of option trading privileges.\n */\nInvestmentAccountInfo.prototype.setOptionLevel = function(optionLevel) {\n  this.optionLevel = optionLevel;\n};\n\n\n\n\nmodule.exports = InvestmentAccountInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Types of well-known sub-accounts.\n * @see \"Section 13.9.2.4.2, OFX Spec\"\n *\n * @enum\n */\nvar SubAccountType = {\n  CASH: 0,\n  MARGIN: 1,\n  SHORT: 2,\n  OTHER: 3,\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"CASH\".equals(ofxVal)) {\n      return SubAccountType.CASH;\n    } else if (\"MARGIN\".equals(ofxVal)) {\n      return SubAccountType.MARGIN;\n    } else if (\"SHORT\".equals(ofxVal)) {\n      return SubAccountType.SHORT;\n    } else if (\"OTHER\".equals(ofxVal)) {\n      return SubAccountType.OTHER;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = SubAccountType;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n\n/**\n * @enum\n * @see \"OFX Spec, Section 13.6.2.1\"\n */\nvar UnitedStatesAccountType = {\n\n  /** A: 0 401(k) retirement account */\n  R401K: 1,\n\n  /** A: 2 403(B) retirement account */\n  R403B: 3,\n\n  /** An: 4 IRA retirement account */\n  IRA: 5,\n\n  /** Keough: 6 (money purchase/profit sharing) account */\n  KEOUGH: 7,\n\n  /** Other: 8 account type */\n  OTHER: 9,\n\n  /** Salary: 10 Reduction Employer Pension Plan */\n  SARSEP: 11,\n\n  /** Savings: 12 Incentive Match Plan for Employees*/\n  SIMPLE: 13,\n\n  /** Regular: 14 investment account */\n  NORMAL: 15,\n\n  /** Tax: 16 Deferred Annuity */\n  TDA: 17,\n\n  /** Trust: 18 (including UTMA) */\n  TRUST: 19,\n\n  /** Custodial: 20 account */\n  UGMA: 21,\n  \n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"401K\".equals(ofxVal)) {\n      return UnitedStatesAccountType.R401K;\n    } else if (\"403B\".equals(ofxVal)) {\n      return UnitedStatesAccountType.R403B;\n    } else if (\"IRA\".equals(ofxVal)) {\n      return UnitedStatesAccountType.IRA;\n    } else if (\"KEOUGH\".equals(ofxVal)) {\n      return UnitedStatesAccountType.KEOUGH;\n    } else if (\"OTHER\".equals(ofxVal)) {\n      return UnitedStatesAccountType.OTHER;\n    } else if (\"SARSEP\".equals(ofxVal)) {\n      return UnitedStatesAccountType.SARSEP;\n    } else if (\"SIMPLE\".equals(ofxVal)) {\n      return UnitedStatesAccountType.SIMPLE;\n    } else if (\"NORMAL\".equals(ofxVal)) {\n      return UnitedStatesAccountType.NORMAL;\n    } else if (\"TDA\".equals(ofxVal)) {\n      return UnitedStatesAccountType.TDA;\n    } else if (\"TRUST\".equals(ofxVal)) {\n      return UnitedStatesAccountType.TRUST;\n    } else if (\"UGMA\".equals(ofxVal)) {\n      return UnitedStatesAccountType.UGMA;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = UnitedStatesAccountType;\n","\"use strict\";\n\nmodule.exports = {\n  AccountType: require(\"./AccountType\"),\n  ActivationStatus: require(\"./ActivationStatus\"),\n  InvestmentAccountDetails: require(\"./InvestmentAccountDetails\"),\n  InvestmentAccountInfo: require(\"./InvestmentAccountInfo\"),\n  SubAccountType: require(\"./SubAccountType\"),\n  UnitedStatesAccountType: require(\"./UnitedStatesAccountType\"),\n};\n","\"use strict\";\n\nmodule.exports = {\n  accounts: require(\"./accounts/index\"),\n  positions: require(\"./positions/index\"),\n  statements: require(\"./statements/index\"),\n  transactions: require(\"./transactions/index\"),\n};\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar SubAccountType = require(\"../accounts/SubAccountType\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar PositionType = require(\"./PositionType\");\nvar Inv401KSource = require(\"./Inv401KSource\");\n\n/**\n * Base class for the various types of positions.\n * <br>\n * This class exposes a read-only view of the flattened aggregates that are\n * common to all positions as a convenience to application\n * developers who may not find the ofx aggregation model intuitive.\n *\n * @class\n */\nfunction BasePosition () {\n\n  /**\n   * @name BasePosition#investmentPosition\n   * @type InvestmentPosition\n   * @access private\n   */\n  this.investmentPosition = null;\n}\n\n\n\n\n\n/**\n * Gets the investment position child aggregate.\n *\n * @return {InvestmentPosition} the investment position child aggregate\n */\nBasePosition.prototype.getInvestmentPosition = function() {\n  return this.investmentPosition;\n};\nChildAggregate.add({required: true, order: 10, owner: BasePosition, /*type: InvestmentPosition,*/ fcn: \"getInvestmentPosition\"});\n\n\n/**\n * Sets the investment position child aggregate.\n *\n * @param {InvestmentPosition} investmentPosition the investment position child aggregate\n */\nBasePosition.prototype.setInvestmentPosition = function(investmentPosition) {\n  this.investmentPosition = investmentPosition;\n};\n\n\n/**\n * Gets the security id for the position. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {SecurityId} the security id for the position\n */\nBasePosition.prototype.getSecurityId = function() {\n  return this.getInvestmentPosition().getSecurityId();\n};\n\n\n/**\n * Gets the sub-account type. One of \"CASH\", \"MARGIN\", \"SHORT\", \"OTHER\". This is a required field\n * according to the OFX spec.\n * @see \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {String} the sub-account type\n */\nBasePosition.prototype.getHeldInAccount = function() {\n  return this.getInvestmentPosition().getHeldInAccount();\n};\n\n\n/**\n * Gets the sub-account type as one of the well-known types.\n * @see \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {SubAccountType} the sub-account type or null if it's not one of the well-known types\n */\nBasePosition.prototype.getHeldInAccountEnum = function() {\n  return SubAccountType.fromOfx(this.getHeldInAccount());\n};\n\n\n/**\n * Gets the position type. One of SHORT or LONG. This is a required field according to the OFX\n * spec.\n * @see \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {String} the position type\n */\nBasePosition.prototype.getPositionType = function() {\n  return this.getInvestmentPosition().getPositionType();\n};\n\n\n/**\n * Gets the position type as one of the well-known types.\n * @see \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {PositionType} the position type or null if it's not one of the well-known types\n */\nBasePosition.prototype.getPositionTypeEnum = function() {\n  return PositionType.fromOfx(this.getPositionType());\n};\n\n\n/**\n * Gets the number of units in the position. For stocks, mutual funds, and others, this\n * is the number of shares. For bonds, this is the face value. For options, this is the number of\n * contacts. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {Double} the number of units in the position\n */\nBasePosition.prototype.getUnits = function() {\n  return this.getInvestmentPosition().getUnits();\n};\n\n\n/**\n * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the\n * share price. For bonds, this is the percentage of par. For options, this is the per share (not\n * per contact) price. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {Double} the per unit price\n */\nBasePosition.prototype.getUnitPrice = function() {\n  return this.getInvestmentPosition().getUnitPrice();\n};\n\n\n/**\n * Gets the market value of this position. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {Double} the market value of the position\n */\nBasePosition.prototype.getMarketValue = function() {\n  return this.getInvestmentPosition().getMarketValue();\n};\n\n\n/**\n * Gets the date and time of the unit price and market value. This is a required field according\n * to the OFX spec.\n * @see \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {Date} the market value date\n */\nBasePosition.prototype.getMarketValueDate = function() {\n  return this.getInvestmentPosition().getMarketValueDate();\n};\n\n\n/**\n * Gets the currency code of the position. This is an optional field according to the OFX spec.\n * If not present, it's the default currency of the account.\n * @see \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {String} the currency code of the position or null for the default currency\n */\nBasePosition.prototype.getCurrencyCode = function() {\n  return this.getInvestmentPosition().getCurrencyCode();\n};\n\n\n/**\n * Gets the memo associated with the position. This is an optional field according to the OFX\n * spec.\n * @see \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {String} the memo\n */\nBasePosition.prototype.getMemo = function() {\n  return this.getInvestmentPosition().getMemo();\n};\n\n\n/**\n * Gets the 401K source for the sale. Should be one of \"PRETAX\", \"AFTERTAX\", \"MATCH\",\n * \"PROFITSHARING\", \"ROLLOVER\", \"OTHERVEST\", \"OTHERNONVEST\".  This is an optional field\n * according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the 401k source\n */\nBasePosition.prototype.get401kSource = function() {\n  return this.getInvestmentPosition().get401kSource();\n};\n\n\n/**\n * Gets the 401k source as one of the well-known types.\n *\n * @return {Inv401KSource} the 401k source or null if it's not one of the well-known types\n */\nBasePosition.prototype.get401kSourceEnum = function() {\n  return Inv401KSource.fromOfx(this.get401kSource());\n};\n\n\n\n\nmodule.exports = BasePosition;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar BasePosition = require(\"./BasePosition\");\n\n/**\n * Represents a debt position.\n * @see \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @class\n * @augments BasePosition\n */\nfunction DebtPosition () {\n}\n\ninherit(DebtPosition, \"extends\", BasePosition);\n\n\nAggregate.add(\"POSDEBT\", DebtPosition);\n\n\n\n\nmodule.exports = DebtPosition;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Types of 401(k) sources.\n * @see \"Section 13.9.2.4.2, OFX Spec\"\n *\n * @enum\n */\nvar Inv401KSource = {\n  PRETAX: 0,\n  AFTER_TAX: 1,\n  MATCH: 2,\n  PROFIT_SHARING: 3,\n  ROLLOVER: 4,\n  OTHER_VEST: 5,\n  OTHER_NONVEST: 6,\n  \n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"PRETAX\".equals(ofxVal)) {\n      return Inv401KSource.PRETAX;\n    } else if (\"AFTERTAX\".equals(ofxVal)) {\n      return Inv401KSource.AFTER_TAX;\n    } else if (\"MATCH\".equals(ofxVal)) {\n      return Inv401KSource.MATCH;\n    } else if (\"PROFITSHARING\".equals(ofxVal)) {\n      return Inv401KSource.PROFIT_SHARING;\n    } else if (\"ROLLOVER\".equals(ofxVal)) {\n      return Inv401KSource.ROLLOVER;\n    } else if (\"OTHERVEST\".equals(ofxVal)) {\n      return Inv401KSource.OTHER_VEST;\n    } else if (\"OTHERNONVEST\".equals(ofxVal)) {\n      return Inv401KSource.OTHER_NONVEST;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = Inv401KSource;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar SubAccountType = require(\"../accounts/SubAccountType\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar PositionType = require(\"./PositionType\");\nvar Inv401KSource = require(\"./Inv401KSource\");\n\n/**\n * Class for the investment position aggregate.\n * @see \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @class\n * @augments BasePosition\n */\nfunction InvestmentPosition () {\n\n  /**\n   * @name InvestmentPosition#securityId\n   * @type SecurityId\n   * @access private\n   */\n  this.securityId = null;\n\n  /**\n   * @name InvestmentPosition#heldInAccount\n   * @type String\n   * @access private\n   */\n  this.heldInAccount = null;\n\n  /**\n   * @name InvestmentPosition#positionType\n   * @type String\n   * @access private\n   */\n  this.positionType = null;\n\n  /**\n   * @name InvestmentPosition#units\n   * @type Double\n   * @access private\n   */\n  this.units = null;\n\n  /**\n   * @name InvestmentPosition#unitPrice\n   * @type Double\n   * @access private\n   */\n  this.unitPrice = null;\n\n  /**\n   * @name InvestmentPosition#marketValue\n   * @type Double\n   * @access private\n   */\n  this.marketValue = null;\n\n  /**\n   * @name InvestmentPosition#marketValueDate\n   * @type Date\n   * @access private\n   */\n  this.marketValueDate = null;\n\n  /**\n   * @name InvestmentPosition#currencyCode\n   * @type String\n   * @access private\n   */\n  this.currencyCode = null;\n\n  /**\n   * @name InvestmentPosition#memo\n   * @type String\n   * @access private\n   */\n  this.memo = null;\n\n  /**\n   * @name InvestmentPosition#inv401kSource\n   * @type String\n   * @access private\n   */\n  this.inv401kSource = null;\n}\n\n\n\nAggregate.add(\"INVPOS\", InvestmentPosition);\n\n\n/**\n * Gets the security id for the position. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {SecurityId} the security id for the position\n */\nInvestmentPosition.prototype.getSecurityId = function() {\n  return this.securityId;\n};\nChildAggregate.add({required: true, order: 10, owner: InvestmentPosition, /*type: SecurityId,*/ fcn: \"getSecurityId\"});\n\n\n/**\n * Sets the security id for the position. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @param {SecurityId} securityId the security id for the position\n */\nInvestmentPosition.prototype.setSecurityId = function(securityId) {\n  this.securityId = securityId;\n};\n\n\n/**\n * Gets the sub-account type. One of \"CASH\", \"MARGIN\", \"SHORT\", \"OTHER\". This is a required field\n * according to the OFX spec.\n * @see \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {String} the sub-account type\n */\nInvestmentPosition.prototype.getHeldInAccount = function() {\n  return this.heldInAccount;\n};\nElement.add({name: \"HELDINACCT\", required: true, order: 20, owner: InvestmentPosition, /*type: String,*/ fcn: \"getHeldInAccount\"});\n\n\n/**\n * Sets the sub-account type. One of \"CASH\", \"MARGIN\", \"SHORT\", \"OTHER\". This is a required field\n * according to the OFX spec.\n * @see \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @param {String} heldInAccount the sub-account type\n */\nInvestmentPosition.prototype.setHeldInAccount = function(heldInAccount) {\n  this.heldInAccount = heldInAccount;\n};\n\n\n/**\n * Gets the sub-account type as one of the well-known types.\n * @see \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {SubAccountType} the sub-account type or null if it's not one of the well-known types\n */\nInvestmentPosition.prototype.getHeldInAccountEnum = function() {\n  return SubAccountType.fromOfx(this.getHeldInAccount());\n};\n\n\n/**\n * Gets the position type. One of SHORT or LONG. This is a required field according to the OFX\n * spec.\n * @see \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {String} the position type\n */\nInvestmentPosition.prototype.getPositionType = function() {\n  return this.positionType;\n};\nElement.add({name: \"POSTYPE\", required: true, order: 30, owner: InvestmentPosition, /*type: String,*/ fcn: \"getPositionType\"});\n\n\n/**\n * Sets the position type. One of SHORT or LONG. This is a required field according to the OFX\n * spec.\n * @see \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @param {String} positionType the position type\n */\nInvestmentPosition.prototype.setPositionType = function(positionType) {\n  this.positionType = positionType;\n};\n\n\n/**\n * Gets the position type as one of the well-known types.\n * @see \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {PositionType} the position type or null if it's not one of the well-known types\n */\nInvestmentPosition.prototype.getPositionTypeEnum = function() {\n  return PositionType.fromOfx(this.getPositionType());\n};\n\n\n/**\n * Gets the number of units in the position. For stocks, mutual funds, and others, this\n * is the number of shares. For bonds, this is the face value. For options, this is the number of\n * contacts. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {Double} the number of units in the position\n */\nInvestmentPosition.prototype.getUnits = function() {\n  return this.units;\n};\nElement.add({name: \"UNITS\", required: true, order: 40, owner: InvestmentPosition, /*type: Double,*/ fcn: \"getUnits\"});\n\n\n/**\n * Sets the number of units in the position. For stocks, mutual funds, and others, this\n * is the number of shares. For bonds, this is the face value. For options, this is the number of\n * contacts. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @param {Double} units the number of units in the position\n */\nInvestmentPosition.prototype.setUnits = function(units) {\n  this.units = units;\n};\n\n\n/**\n * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the\n * share price. For bonds, this is the percentage of par. For options, this is the per share (not\n * per contact) price. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {Double} the per unit price\n */\nInvestmentPosition.prototype.getUnitPrice = function() {\n  return this.unitPrice;\n};\nElement.add({name: \"UNITPRICE\", required: true, order: 50, owner: InvestmentPosition, /*type: Double,*/ fcn: \"getUnitPrice\"});\n\n\n/**\n * Sets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the\n * share price. For bonds, this is the percentage of par. For options, this is the per share (not\n * per contact) price. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @param {Double} unitPrice the per unit price\n */\nInvestmentPosition.prototype.setUnitPrice = function(unitPrice) {\n  this.unitPrice = unitPrice;\n};\n\n\n/**\n * Gets the market value of this position. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {Double} the market value of the position\n */\nInvestmentPosition.prototype.getMarketValue = function() {\n  return this.marketValue;\n};\nElement.add({name: \"MKTVAL\", required: true, order: 60, owner: InvestmentPosition, /*type: Double,*/ fcn: \"getMarketValue\"});\n\n\n/**\n * Sets the market value of this position. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @param {Double} marketValue the market value of the position\n */\nInvestmentPosition.prototype.setMarketValue = function(marketValue) {\n  this.marketValue = marketValue;\n};\n\n\n/**\n * Gets the date and time of the unit price and market value. This is a required field according\n * to the OFX spec.\n * @see \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {Date} the market value date\n */\nInvestmentPosition.prototype.getMarketValueDate = function() {\n  return this.marketValueDate;\n};\nElement.add({name: \"DTPRICEASOF\", required: true, order: 70, owner: InvestmentPosition, /*type: Date,*/ fcn: \"getMarketValueDate\"});\n\n\n/**\n * Sets the date and time of the unit price and market value. This is a required field according\n * to the OFX spec.\n * @see \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @param {Date} marketValueDate the market value date\n */\nInvestmentPosition.prototype.setMarketValueDate = function(marketValueDate) {\n  this.marketValueDate = marketValueDate;\n};\n\n\n/**\n * Gets the currency code of the position. This is an optional field according to the OFX spec.\n * If not present, it's the default currency of the account.\n * @see \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {String} the currency code of the position or null for the default currency\n */\nInvestmentPosition.prototype.getCurrencyCode = function() {\n  return this.currencyCode;\n};\nElement.add({name: \"CURRENCY\", order: 80, owner: InvestmentPosition, /*type: String,*/ fcn: \"getCurrencyCode\"});\n\n\n/**\n * Sets the currency code of the position. This is an optional field according to the OFX spec.\n * If not present, it's the default currency of the account.\n * @see \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @param {String} currencyCode the currency code of the position or null for the default currency\n */\nInvestmentPosition.prototype.setCurrencyCode = function(currencyCode) {\n  this.currencyCode = currencyCode;\n};\n\n\n/**\n * Gets the memo associated with the position. This is an optional field according to the OFX\n * spec.\n * @see \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @return {String} the memo\n */\nInvestmentPosition.prototype.getMemo = function() {\n  return this.memo;\n};\nElement.add({name: \"MEMO\", order: 90, owner: InvestmentPosition, /*type: String,*/ fcn: \"getMemo\"});\n\n\n/**\n * Sets the memo associated with the position. This is an optional field according to the OFX\n * spec.\n * @see \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @param {String} memo the memo\n */\nInvestmentPosition.prototype.setMemo = function(memo) {\n  this.memo = memo;\n};\n\n\n/**\n * Gets the 401K source for the sale. Should be one of \"PRETAX\", \"AFTERTAX\", \"MATCH\",\n * \"PROFITSHARING\", \"ROLLOVER\", \"OTHERVEST\", \"OTHERNONVEST\".  This is an optional field\n * according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the 401k source\n */\nInvestmentPosition.prototype.get401kSource = function() {\n  return this.inv401kSource;\n};\nElement.add({name: \"INV401KSOURCE\", order: 100, owner: InvestmentPosition, /*type: String,*/ fcn: \"get401kSource\"});\n\n\n/**\n * Sets the 401K source for the sale. Should be one of \"PRETAX\", \"AFTERTAX\", \"MATCH\",\n * \"PROFITSHARING\", \"ROLLOVER\", \"OTHERVEST\", \"OTHERNONVEST\".  This is an optional field\n * according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} inv401kSource the 401k source\n */\nInvestmentPosition.prototype.set401kSource = function(inv401kSource) {\n  this.inv401kSource = inv401kSource;\n};\n\n\n/**\n * Gets the 401k source as one of the well-known types.\n *\n * @return {Inv401KSource} the 401k source or null if it's not one of the well-known types\n */\nInvestmentPosition.prototype.get401kSourceEnum = function() {\n  return Inv401KSource.fromOfx(this.get401kSource());\n};\n\n\n\n\nmodule.exports = InvestmentPosition;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\n\n/**\n * Aggregate for a list of invesment positions.\n * @see \"Section 13.9.2.2, OFX Spec\"\n *\n * @class\n */\nfunction InvestmentPositionList () {\n\n  /**\n   * @name InvestmentPositionList#positions\n   * @type List<BasePosition>\n   * @access private\n   */\n  this.positions = null;\n}\n\n\n\nAggregate.add(\"INVPOSLIST\", InvestmentPositionList);\n\n\n/**\n * Gets the list of positions\n *\n * @return {BasePosition[]} the list of positions\n */\nInvestmentPositionList.prototype.getPositions = function() {\n  return this.positions;\n};\nChildAggregate.add({order: 10, owner: InvestmentPositionList, /*type: BasePosition[],*/ fcn: \"getPositions\"});\n\n\n/**\n * Sets the list of positions.\n *\n * @param {BasePosition[]} positions the list of positions\n */\nInvestmentPositionList.prototype.setPositions = function(positions) {\n  this.positions = positions;\n};\n\n\n\n\nmodule.exports = InvestmentPositionList;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar BasePosition = require(\"./BasePosition\");\n\n/**\n * Represents a mutual fund position.\n * @see \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @class\n * @augments BasePosition\n */\nfunction MutualFundPosition () {\n\n  /**\n   * @name MutualFundPosition#unitsStreet\n   * @type Double\n   * @access private\n   */\n  this.unitsStreet = null;\n\n  /**\n   * @name MutualFundPosition#unitsUser\n   * @type Double\n   * @access private\n   */\n  this.unitsUser = null;\n\n  /**\n   * @name MutualFundPosition#reinvestDividends\n   * @type Boolean\n   * @access private\n   */\n  this.reinvestDividends = null;\n\n  /**\n   * @name MutualFundPosition#reinvestCapitalGains\n   * @type Boolean\n   * @access private\n   */\n  this.reinvestCapitalGains = null;\n}\n\ninherit(MutualFundPosition, \"extends\", BasePosition);\n\n\nAggregate.add(\"POSMF\", MutualFundPosition);\n\n\n/**\n * Gets the number of units in the financial insititution's street name.\n *\n * @return {Double} the number of units in the financial insititution's street name.\n */\nMutualFundPosition.prototype.getUnitsStreet = function() {\n  return this.unitsStreet;\n};\nElement.add({name: \"UNITSSTREET\", order: 20, owner: MutualFundPosition, /*type: Double,*/ fcn: \"getUnitsStreet\"});\n\n\n/**\n * Sets the number of units in the financial insititution's street name.\n *\n * @param {Double} unitsStreet the number of units in the financial insititution's street name.\n */\nMutualFundPosition.prototype.setUnitsStreet = function(unitsStreet) {\n  this.unitsStreet = unitsStreet;\n};\n\n\n/**\n * Gets the number of units in the user's name.\n *\n * @return {Double} the number of units in the user's name.\n */\nMutualFundPosition.prototype.getUnitsUser = function() {\n  return this.unitsUser;\n};\nElement.add({name: \"UNITSUSER\", order: 30, owner: MutualFundPosition, /*type: Double,*/ fcn: \"getUnitsUser\"});\n\n\n/**\n * Sets the number of units in the user's name.\n *\n * @param {Double} unitsUser the number of units in the user's name.\n */\nMutualFundPosition.prototype.setUnitsUser = function(unitsUser) {\n  this.unitsUser = unitsUser;\n};\n\n\n/**\n * Gets whether dividends are automatically reinvested.\n *\n * @return {Boolean} whether dividends are automatically reinvested\n */\nMutualFundPosition.prototype.getReinvestDividends = function() {\n  return this.reinvestDividends;\n};\nElement.add({name: \"REINVDIV\", order: 50, owner: MutualFundPosition, /*type: Boolean,*/ fcn: \"getReinvestDividends\"});\n\n\n/**\n * Sets whether dividends are automatically reinvested.\n *\n * @param {Boolean} reinvestDividends whether dividends are automatically reinvested\n */\nMutualFundPosition.prototype.setReinvestDividends = function(reinvestDividends) {\n  this.reinvestDividends = reinvestDividends;\n};\n\n\n/**\n * Gets whether capital gains are automatically reinvested.\n *\n * @return {Boolean} whether capital gains are automatically reinvested\n */\nMutualFundPosition.prototype.getReinvestCapitalGains = function() {\n  return this.reinvestCapitalGains;\n};\nElement.add({name: \"REINVCG\", order: 60, owner: MutualFundPosition, /*type: Boolean,*/ fcn: \"getReinvestCapitalGains\"});\n\n\n/**\n * Sets whether capital gains are automatically reinvested.\n *\n * @param {Boolean} reinvestCapitalGains whether capital gains are automatically reinvested\n */\nMutualFundPosition.prototype.setReinvestCapitalGains = function(reinvestCapitalGains) {\n  this.reinvestCapitalGains = reinvestCapitalGains;\n};\n\n\n\n\nmodule.exports = MutualFundPosition;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar BasePosition = require(\"./BasePosition\");\nvar ShortOptionSecurity = require(\"./ShortOptionSecurity\");\n\n/**\n * Represents an options position.\n * @see \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @class\n * @augments BasePosition\n */\nfunction OptionsPosition () {\n\n  /**\n   * @name OptionsPosition#secured\n   * @type String\n   * @access private\n   */\n  this.secured = null;\n}\n\ninherit(OptionsPosition, \"extends\", BasePosition);\n\n\nAggregate.add(\"POSOPT\", OptionsPosition);\n\n\n/**\n * Gets how the options position is secured (for short positions).\n *\n * @return {String} how the options position is secured\n */\nOptionsPosition.prototype.getSecured = function() {\n  return this.secured;\n};\nElement.add({name: \"SECURED\", order: 20, owner: OptionsPosition, /*type: String,*/ fcn: \"getSecured\"});\n\n\n/**\n * Sets how the options position is secured (for short positions).\n *\n * @param {String} secured how the options position is secured\n */\nOptionsPosition.prototype.setSecured = function(secured) {\n  this.secured = secured;\n};\n\n\n/**\n * Gets how the options position is secured as a well-known type.\n *\n * @return {ShortOptionSecurity} how the option position is secured or null if it's not a well-known type\n */\nOptionsPosition.prototype.getSecuredEnum = function() {\n  return ShortOptionSecurity.fromOfx(this.getSecured());\n};\n\n\n\n\nmodule.exports = OptionsPosition;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar BasePosition = require(\"./BasePosition\");\n\n/**\n * Represents other types of positions.\n * @see \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @class\n * @augments BasePosition\n */\nfunction OtherPosition () {\n}\n\ninherit(OtherPosition, \"extends\", BasePosition);\n\n\nAggregate.add(\"POSOTHER\", OtherPosition);\n\n\n\n\nmodule.exports = OtherPosition;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Type of position.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @enum\n */\nvar PositionType = {\n  LONG: 0,\n  SHORT: 1,\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"LONG\".equals(ofxVal)) {\n      return PositionType.LONG;\n    } else if (\"SHORT\".equals(ofxVal)) {\n      return PositionType.SHORT;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = PositionType;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\n/**\n * How a short option is secured.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @enum\n */\nvar ShortOptionSecurity = {\n  NAKED: 0,\n  COVERED: 1,\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"NAKED\".equals(ofxVal)) {\n      return ShortOptionSecurity.NAKED;\n    } else if (\"COVERED\".equals(ofxVal)) {\n      return ShortOptionSecurity.COVERED;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = ShortOptionSecurity;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar BasePosition = require(\"./BasePosition\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\n\n/**\n * Represents a stock position.\n * @see \"Section 13.9.2.6.1, OFX Spec\"\n *\n * @class\n * @augments BasePosition\n */\nfunction StockPosition () {\n\n  /**\n   * @name StockPosition#unitsStreet\n   * @type Double\n   * @access private\n   */\n  this.unitsStreet = null;\n\n  /**\n   * @name StockPosition#unitsUser\n   * @type Double\n   * @access private\n   */\n  this.unitsUser = null;\n\n  /**\n   * @name StockPosition#reinvestDividends\n   * @type Boolean\n   * @access private\n   */\n  this.reinvestDividends = null;\n}\n\ninherit(StockPosition, \"extends\", BasePosition);\n\n\nAggregate.add(\"POSSTOCK\", StockPosition);\n\n\n/**\n * Gets the number of units in the financial insititution's street name.\n *\n * @return {Double} the number of units in the financial insititution's street name.\n */\nStockPosition.prototype.getUnitsStreet = function() {\n  return this.unitsStreet;\n};\nElement.add({name: \"UNITSSTREET\", order: 20, owner: StockPosition, /*type: Double,*/ fcn: \"getUnitsStreet\"});\n\n\n/**\n * Sets the number of units in the financial insititution's street name.\n *\n * @param {Double} unitsStreet the number of units in the financial insititution's street name.\n */\nStockPosition.prototype.setUnitsStreet = function(unitsStreet) {\n  this.unitsStreet = unitsStreet;\n};\n\n\n/**\n * Gets the number of units in the user's name.\n *\n * @return {Double} the number of units in the user's name.\n */\nStockPosition.prototype.getUnitsUser = function() {\n  return this.unitsUser;\n};\nElement.add({name: \"UNITSUSER\", order: 30, owner: StockPosition, /*type: Double,*/ fcn: \"getUnitsUser\"});\n\n\n/**\n * Sets the number of units in the user's name.\n *\n * @param {Double} unitsUser the number of units in the user's name.\n */\nStockPosition.prototype.setUnitsUser = function(unitsUser) {\n  this.unitsUser = unitsUser;\n};\n\n\n/**\n * Gets whether dividends are automatically reinvested.\n *\n * @return {Boolean} whether dividends are automatically reinvested\n */\nStockPosition.prototype.getReinvestDividends = function() {\n  return this.reinvestDividends;\n};\nElement.add({name: \"REINVDIV\", order: 40, owner: StockPosition, /*type: Boolean,*/ fcn: \"getReinvestDividends\"});\n\n\n/**\n * Sets whether dividends are automatically reinvested.\n *\n * @param {Boolean} reinvestDividends whether dividends are automatically reinvested\n */\nStockPosition.prototype.setReinvestDividends = function(reinvestDividends) {\n  this.reinvestDividends = reinvestDividends;\n};\n\n\n\n\nmodule.exports = StockPosition;\n","\"use strict\";\n\nmodule.exports = {\n  BasePosition: require(\"./BasePosition\"),\n  DebtPosition: require(\"./DebtPosition\"),\n  Inv401KSource: require(\"./Inv401KSource\"),\n  InvestmentPosition: require(\"./InvestmentPosition\"),\n  InvestmentPositionList: require(\"./InvestmentPositionList\"),\n  MutualFundPosition: require(\"./MutualFundPosition\"),\n  OptionsPosition: require(\"./OptionsPosition\"),\n  OtherPosition: require(\"./OtherPosition\"),\n  PositionType: require(\"./PositionType\"),\n  ShortOptionSecurity: require(\"./ShortOptionSecurity\"),\n  StockPosition: require(\"./StockPosition\")\n};\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\n\n/**\n * Aggregate for the investment balance list.\n * @see \"Section 13.9.2.7, OFX Spec\"\n *\n * @class\n */\nfunction BalanceList () {\n\n  /**\n   * @name BalanceList#balanceRecords\n   * @type List<BalanceRecord>\n   * @access private\n   */\n  this.balanceRecords = null;\n}\n\n\n\nAggregate.add(\"BALLIST\", BalanceList);\n\n\n/**\n * Gets the list of balance records.\n *\n * @return {BalanceRecord[]} the list of balance records.\n */\nBalanceList.prototype.getBalanceRecords = function() {\n  return this.balanceRecords;\n};\nChildAggregate.add({order: 10, owner: BalanceList, /*type: BalanceRecord[],*/ fcn: \"getBalanceRecords\"});\n\n\n/**\n * Sets the list of balance records.\n *\n * @param {BalanceRecord[]} balanceRecords the list of balance records.\n */\nBalanceList.prototype.setBalanceRecords = function(balanceRecords) {\n  this.balanceRecords = balanceRecords;\n};\n\n\n\n\nmodule.exports = BalanceList;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\n\n\n/**\n * Aggreate to indicate whether position information is requested as part of the statement\n * @see \"Section 13.9.1.2, OFX Spec\"\n *\n * @class\n */\nfunction IncludePosition () {\n\n  /**\n   * @name IncludePosition#sentDownDate\n   * @type Date\n   * @access private\n   */\n  this.sentDownDate = null;\n\n  /**\n   * @name IncludePosition#includePositions\n   * @type Boolean\n   * @access private\n   */\n  this.includePositions = Boolean.TRUE;\n}\n\n\n\nAggregate.add(\"INCPOS\", IncludePosition);\n\n\n/**\n * Gets the date that the position should be sent down for. This is an optional field according\n * to the OFX spec.\n *\n * @return {Date} the date for the position\n */\nIncludePosition.prototype.getDateSentDown = function() {\n  return this.sentDownDate;\n};\nElement.add({name: \"DTASOF\", order: 0, owner: IncludePosition, /*type: Date,*/ fcn: \"getDateSentDown\"});\n\n\n/**\n * Sets the date that the position should be sent down for. This is an optional field according\n * to the OFX spec.\n *\n * @param {Date} sentDownDate the date for the position\n */\nIncludePosition.prototype.setDateSentDown = function(sentDownDate) {\n  this.sentDownDate = sentDownDate;\n};\n\n\n/**\n * Gets whether to include positions in the statement download.\n *\n * @return {Boolean} whether to include positions in the statement download\n */\nIncludePosition.prototype.getIncludePositions = function() {\n  return this.includePositions;\n};\nElement.add({name: \"INCLUDE\", order: 10, owner: IncludePosition, /*type: Boolean,*/ fcn: \"getIncludePositions\"});\n\n\n/**\n * Sets whether to include positions in the statement download.\n *\n * @param {Boolean} includePositions whether to include positions in the statement download\n */\nIncludePosition.prototype.setIncludePositions = function(includePositions) {\n  this.includePositions = includePositions;\n};\n\n\n\n\nmodule.exports = IncludePosition;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\n\n/**\n * Aggregate for the investment balance.\n * @see \"Section 13.9.2.7, OFX Spec\"\n *\n * @class\n */\nfunction InvestmentBalance () {\n\n  /**\n   * @name InvestmentBalance#availableCash\n   * @type Double\n   * @access private\n   */\n  this.availableCash = null;\n\n  /**\n   * @name InvestmentBalance#marginBalance\n   * @type Double\n   * @access private\n   */\n  this.marginBalance = null;\n\n  /**\n   * @name InvestmentBalance#shortBalance\n   * @type Double\n   * @access private\n   */\n  this.shortBalance = null;\n\n  /**\n   * @name InvestmentBalance#buyingPower\n   * @type Double\n   * @access private\n   */\n  this.buyingPower = null;\n\n  /**\n   * @name InvestmentBalance#balanceList\n   * @type BalanceList\n   * @access private\n   */\n  this.balanceList = null;\n}\n\n\n\nAggregate.add(\"INVBAL\", InvestmentBalance);\n\n\n/**\n * Gets the available cash balance across all sub-accounts, including sweep funds. This is\n * required field according to the OFX spec.\n *\n * @return {Double} the available cash balance\n */\nInvestmentBalance.prototype.getAvailableCash = function() {\n  return this.availableCash;\n};\nElement.add({name: \"AVAILCASH\", required: true, order: 10, owner: InvestmentBalance, /*type: Double,*/ fcn: \"getAvailableCash\"});\n\n\n/**\n * Sets the available cash balance across all sub-accounts, including sweep funds. This is\n * required field according to the OFX spec.\n *\n * @param {Double} availableCash the available cash balance\n */\nInvestmentBalance.prototype.setAvailableCash = function(availableCash) {\n  this.availableCash = availableCash;\n};\n\n\n/**\n * Gets the margin account balance. A positive balance indicates a positive cash balance, while\n * a negative balance indicates the customer borrowed funds. This is a required field according\n * to the OFX spec.\n *\n * @return {Double} the margin account balance\n */\nInvestmentBalance.prototype.getMarginBalance = function() {\n  return this.marginBalance;\n};\nElement.add({name: \"MARGINBALANCE\", required: true, order: 20, owner: InvestmentBalance, /*type: Double,*/ fcn: \"getMarginBalance\"});\n\n\n/**\n * Sets the margin account balance. A positive balance indicates a positive cash balance, while\n * a negative balance indicates the customer borrowed funds. This is a required field according\n * to the OFX spec.\n *\n * @param {Double} marginBalance the margin account balance\n */\nInvestmentBalance.prototype.setMarginBalance = function(marginBalance) {\n  this.marginBalance = marginBalance;\n};\n\n\n/**\n * Gets the market value of all short positions. This is a positive balance. This is a required\n * field according to the OFX spec.\n *\n * @return {Double} the market value of all short positions\n */\nInvestmentBalance.prototype.getShortBalance = function() {\n  return this.shortBalance;\n};\nElement.add({name: \"SHORTBALANCE\", required: true, order: 30, owner: InvestmentBalance, /*type: Double,*/ fcn: \"getShortBalance\"});\n\n\n/**\n * Sets the market value of all short positions. This is a positive balance. This is a required\n * field according to the OFX spec.\n *\n * @param {Double} shortBalance the market value of all short positions\n */\nInvestmentBalance.prototype.setShortBalance = function(shortBalance) {\n  this.shortBalance = shortBalance;\n};\n\n\n/**\n * Gets the buying power amount. This is an optional field according to the OFX spec.\n *\n * @return {Double} the buying power\n */\nInvestmentBalance.prototype.getBuyingPower = function() {\n  return this.buyingPower;\n};\nElement.add({name: \"BUYPOWER\", order: 40, owner: InvestmentBalance, /*type: Double,*/ fcn: \"getBuyingPower\"});\n\n\n/**\n * Sets the buying power amount. This is an optional field according to the OFX spec.\n *\n * @param {Double} buyingPower the buying power\n */\nInvestmentBalance.prototype.setBuyingPower = function(buyingPower) {\n  this.buyingPower = buyingPower;\n};\n\n\n/**\n * Gets the investment balance list. This is an optional field according to the OFX spec.\n *\n * @return {BalanceList} the investment balance list\n */\nInvestmentBalance.prototype.getBalanceList = function() {\n  return this.balanceList;\n};\nChildAggregate.add({order: 50, owner: InvestmentBalance, /*type: BalanceList,*/ fcn: \"getBalanceList\"});\n\n\n/**\n * Sets the investment balance list. This is an optional field according to the OFX spec.\n *\n * @param {BalanceList} balanceList the investment balance list\n */\nInvestmentBalance.prototype.setBalanceList = function(balanceList) {\n  this.balanceList = balanceList;\n};\n\n\n\n\nmodule.exports = InvestmentBalance;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar StatementRequest = require(\"../../common/StatementRequest\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\n\n/**\n * Aggregate for the investment statement download request.\n * @see \"Section 13.9.1.1, OFX Spec\"\n *\n * @class\n * @augments StatementRequest\n */\nfunction InvestmentStatementRequest () {\n\n  /**\n   * @name InvestmentStatementRequest#account\n   * @type InvestmentAccountDetails\n   * @access private\n   */\n  this.account = null;\n\n  /**\n   * @name InvestmentStatementRequest#includeOpenOrders\n   * @type Boolean\n   * @access private\n   */\n  this.includeOpenOrders = Boolean.FALSE;\n\n  /**\n   * @name InvestmentStatementRequest#includePosition\n   * @type IncludePosition\n   * @access private\n   */\n  this.includePosition = null;\n\n  /**\n   * @name InvestmentStatementRequest#includeBalance\n   * @type Boolean\n   * @access private\n   */\n  this.includeBalance = Boolean.TRUE;\n}\n\ninherit(InvestmentStatementRequest, \"extends\", StatementRequest);\n\n\nAggregate.add(\"INVSTMTRQ\", InvestmentStatementRequest);\n\n\n/**\n * The account details.\n *\n * @return {InvestmentAccountDetails} The account details.\n */\nInvestmentStatementRequest.prototype.getAccount = function() {\n  return this.account;\n};\nChildAggregate.add({name: \"INVACCTFROM\", required: true, order: 0, owner: InvestmentStatementRequest, /*type: InvestmentAccountDetails,*/ fcn: \"getAccount\"});\n\n\n/**\n * The account details.\n *\n * @param {InvestmentAccountDetails} account The account details.\n */\nInvestmentStatementRequest.prototype.setAccount = function(account) {\n  this.account = account;\n};\n\n\n/**\n * Gets whether to include open orders. This is an optional field according to the OFX spec.\n * <br>\n * Note, open orders are not yet implemented.\n *\n * @return {Boolean} whether to include open orders\n */\nInvestmentStatementRequest.prototype.getIncludeOpenOrders = function() {\n  return this.includeOpenOrders;\n};\nElement.add({name: \"INCOO\", order: 20, owner: InvestmentStatementRequest, /*type: Boolean,*/ fcn: \"getIncludeOpenOrders\"});\n\n\n/**\n * Sets whether to include open orders. This is an optional field according to the OFX spec.\n * <br>\n * Note, open orders are not yet implemented.\n *\n * @param {Boolean} includeOpenOrders whether to include open orders\n */\nInvestmentStatementRequest.prototype.setIncludeOpenOrders = function(includeOpenOrders) {\n  this.includeOpenOrders = includeOpenOrders;\n};\n\n\n/**\n * Gets the include position child aggregate. This is a required field according to the OFX spec.\n *\n * @return {IncludePosition} the include position child aggregate\n */\nInvestmentStatementRequest.prototype.getIncludePosition = function() {\n  return this.includePosition;\n};\nChildAggregate.add({name: \"INCPOS\", required: true, order: 30, owner: InvestmentStatementRequest, /*type: IncludePosition,*/ fcn: \"getIncludePosition\"});\n\n\n/**\n * Gets the include position child aggregate. This is a required field according to the OFX spec.\n *\n * @param {IncludePosition} includePosition the include position child aggregate\n */\nInvestmentStatementRequest.prototype.setIncludePosition = function(includePosition) {\n  this.includePosition = includePosition;\n};\n\n\n/**\n * Gets whether to include balance info in the response. This is a required field according to\n * the OFX spec.\n *\n * @return {Boolean} whether to include balance info in the response\n */\nInvestmentStatementRequest.prototype.getIncludeBalance = function() {\n  return this.includeBalance;\n};\nElement.add({name: \"INCBAL\", required: true, order: 40, owner: InvestmentStatementRequest, /*type: Boolean,*/ fcn: \"getIncludeBalance\"});\n\n\n/**\n * Sets whether to include balance info in the response. This is a required field according to\n * the OFX spec.\n *\n * @param {Boolean} includeBalance whether to include balance info in the response\n */\nInvestmentStatementRequest.prototype.setIncludeBalance = function(includeBalance) {\n  this.includeBalance = includeBalance;\n};\n\n\n\n\nmodule.exports = InvestmentStatementRequest;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar MessageSetType = require(\"../../MessageSetType\");\nvar RequestMessageSet = require(\"../../RequestMessageSet\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\n\n/**\n * Investment statement request message set.\n * @see \"Section 13.7.1.2.1, OFX Spec\"\n *\n * @class\n * @augments RequestMessageSet\n */\nfunction InvestmentStatementRequestMessageSet () {\n\n  /**\n   * @name InvestmentStatementRequestMessageSet#statementRequest\n   * @type InvestmentStatementRequestTransaction\n   * @access private\n   */\n  this.statementRequest = null;\n}\n\ninherit(InvestmentStatementRequestMessageSet, \"extends\", RequestMessageSet);\n\n\nAggregate.add(\"INVSTMTMSGSRQV1\", InvestmentStatementRequestMessageSet);\n\n\nInvestmentStatementRequestMessageSet.prototype.getType = function() {\n  return MessageSetType.investment;\n};\n\n\n/**\n * Gets the statement request.\n *\n * @return {InvestmentStatementRequestTransaction} the request\n */\nInvestmentStatementRequestMessageSet.prototype.getStatementRequest = function() {\n  return this.statementRequest;\n};\nChildAggregate.add({order: 0, owner: InvestmentStatementRequestMessageSet, /*type: InvestmentStatementRequestTransaction,*/ fcn: \"getStatementRequest\"});\n\n\n/**\n * Sets the statement request.\n *\n * @param {InvestmentStatementRequestTransaction} statementRequest the request\n */\nInvestmentStatementRequestMessageSet.prototype.setStatementRequest = function(statementRequest) {\n  this.statementRequest = statementRequest;\n};\n\n\n// Inherited.\nInvestmentStatementRequestMessageSet.prototype.getRequestMessages = function() {\n  var requestMessages = [];\n  if (this.getStatementRequest() !== null) {\n    requestMessages.push(this.getStatementRequest());\n  }\n  return requestMessages;\n};\n\n\n\n\nmodule.exports = InvestmentStatementRequestMessageSet;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar InvestmentStatementRequest = require(\"./InvestmentStatementRequest\");\nvar TransactionWrappedRequestMessage = require(\"../../TransactionWrappedRequestMessage\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\n\n/**\n * Investment statement transaction request.\n * @see \"Section 13.9.1.1, OFX Spec\"\n *\n * @class\n * @augments TransactionWrappedRequestMessage\n */\nfunction InvestmentStatementRequestTransaction () {\n\n  /**\n   * @name InvestmentStatementRequestTransaction#message\n   * @type InvestmentStatementRequest\n   * @access private\n   */\n  this.message = null;\n}\n\ninherit(InvestmentStatementRequestTransaction, \"extends\", new TransactionWrappedRequestMessage(InvestmentStatementRequest));\n\n\nAggregate.add(\"INVSTMTTRNRQ\", InvestmentStatementRequestTransaction);\n\n\n/**\n * Gets the the statement request message.\n *\n * @return {InvestmentStatementRequest} the statement request message.\n */\nInvestmentStatementRequestTransaction.prototype.getMessage = function() {\n  return this.message;\n};\nChildAggregate.add({required: true, order: 30, owner: InvestmentStatementRequestTransaction, /*type: InvestmentStatementRequest,*/ fcn: \"getMessage\"});\n\n\n/**\n * Sets the the statement request message.\n *\n * @param {InvestmentStatementRequest} message the statement request message.\n */\nInvestmentStatementRequestTransaction.prototype.setMessage = function(message) {\n  this.message = message;\n};\n\n\n// Inherited.\nInvestmentStatementRequestTransaction.prototype.setWrappedMessage = function(/*InvestmentStatementRequest*/ message) {\n  this.setMessage(message);\n};\n\n\n\n\nmodule.exports = InvestmentStatementRequestTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar StatementResponse = require(\"../../common/StatementResponse\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\n\n/**\n * Aggregate for the investment statement download response.\n * @see \"Section 13.9.2.2, OFX Spec\"\n *\n * @class\n * @augments StatementResponse\n */\nfunction InvestmentStatementResponse () {\n\n  /**\n   * @name InvestmentStatementResponse#dateOfStatement\n   * @type Date\n   * @access private\n   */\n  this.dateOfStatement = null;\n\n  /**\n   * @name InvestmentStatementResponse#account\n   * @type InvestmentAccountDetails\n   * @access private\n   */\n  this.account = null;\n\n  /**\n   * @name InvestmentStatementResponse#transactionList\n   * @type InvestmentTransactionList\n   * @access private\n   */\n  this.transactionList = null;\n\n  /**\n   * @name InvestmentStatementResponse#positionList\n   * @type InvestmentPositionList\n   * @access private\n   */\n  this.positionList = null;\n\n  /**\n   * @name InvestmentStatementResponse#accountBalance\n   * @type InvestmentBalance\n   * @access private\n   */\n  this.accountBalance = null;\n\n  /**\n   * @name InvestmentStatementResponse#securityList\n   * @type SecurityList\n   * @access private\n   */\n  this.securityList = null;\n}\n\ninherit(InvestmentStatementResponse, \"extends\", StatementResponse);\n\n\nAggregate.add(\"INVSTMTRS\", InvestmentStatementResponse);\n\n\n/**\n * Gets the name of the response message.\n *\n * @return {String} the name of the response message\n */\n// @Override\nInvestmentStatementResponse.prototype.getResponseMessageName = function() {\n  return \"investment statement\";\n};\n\n\n/**\n * Gets the date and time for the statement download. This is a required field according to the\n * OFX spec.\n *\n * @return {Date} the date and time for the statement download\n */\nInvestmentStatementResponse.prototype.getDateOfStatement = function() {\n  return this.dateOfStatement;\n};\nElement.add({name: \"DTASOF\", required: true, order: 60, owner: InvestmentStatementResponse, /*type: Date,*/ fcn: \"getDateOfStatement\"});\n\n\n/**\n * Sets the date and time for the statement download. This is a required field according to the\n * OFX spec.\n *\n * @param {Date} dateOfStatement the date and time for the statement download\n */\nInvestmentStatementResponse.prototype.setDateOfStatement = function(dateOfStatement) {\n  this.dateOfStatement = dateOfStatement;\n};\n\n\n/**\n * Gets the account for the statement. This is a required field according to the OFX spec.\n *\n * @return {InvestmentAccountDetails} the account for the statement\n */\nInvestmentStatementResponse.prototype.getAccount = function() {\n  return this.account;\n};\nChildAggregate.add({name:\"INVACCTFROM\", required: true, order: 10, owner: InvestmentStatementResponse, /*type: InvestmentAccountDetails,*/ fcn: \"getAccount\"});\n\n\n/**\n * Sets the account for the statement. This is a required field according to the OFX spec.\n *\n * @param {InvestmentAccountDetails} account the account for the statement\n */\nInvestmentStatementResponse.prototype.setAccount = function(account) {\n  this.account = account;\n};\n\n\n/**\n * Gets the transaction list aggregate. This is an optional field according to the OFX spec.\n *\n * @return {InvestmentTransactionList} the transaction list aggregate\n */\nInvestmentStatementResponse.prototype.getInvestmentTransactionList = function() {\n  return this.transactionList;\n};\nChildAggregate.add({order: 70, owner: InvestmentStatementResponse, /*type: InvestmentTransactionList,*/ fcn: \"getInvestmentTransactionList\"});\n\n\n/**\n * Sets the transaction list aggregate. This is an optional field according to the OFX spec.\n *\n * @param {InvestmentTransactionList} transactionList the transaction list aggregate\n */\nInvestmentStatementResponse.prototype.setInvestmentTransactionList = function(transactionList) {\n  this.transactionList = transactionList;\n};\n\n\n/**\n * Gets the position list aggreate. This is an optional field according to the OFX spec.\n *\n * @return {InvestmentPositionList} the position list aggregate\n */\nInvestmentStatementResponse.prototype.getPositionList = function() {\n  return this.positionList;\n};\nChildAggregate.add({order: 80, owner: InvestmentStatementResponse, /*type: InvestmentPositionList,*/ fcn: \"getPositionList\"});\n\n\n/**\n * Sets the position list aggreate. This is an optional field according to the OFX spec.\n *\n * @param {InvestmentPositionList} positionList the position list aggregate\n */\nInvestmentStatementResponse.prototype.setPositionList = function(positionList) {\n  this.positionList = positionList;\n};\n\n\n/**\n * Gets the account balance. This is an optional field according to the OFX spec.\n *\n * @return {InvestmentBalance} the account balance\n */\nInvestmentStatementResponse.prototype.getAccountBalance = function() {\n  return this.accountBalance;\n};\nChildAggregate.add({order: 90, owner: InvestmentStatementResponse, /*type: InvestmentBalance,*/ fcn: \"getAccountBalance\"});\n\n\n/**\n * Sets the account balance. This is an optional field according to the OFX spec.\n *\n * @param {InvestmentBalance} accountBalance the account balance\n */\nInvestmentStatementResponse.prototype.setAccountBalance = function(accountBalance) {\n  this.accountBalance = accountBalance;\n};\n\n\n/**\n * Gets the security list aggregate.\n * <br>\n * This is not actually technically part of the investment statement responsr aggregate, but\n * according to Section 13.8.4, OFX spec, this aggregate can appear the overall response and\n * we provide it here for convenience.\n *\n * @return {SecurityList} the security list aggregate\n */\nInvestmentStatementResponse.prototype.getSecurityList = function() {\n  return this.securityList;\n};\n\n\n/**\n * Sets the security list aggregate.\n * <br>\n * This is not actually technically part of the investment statement responsr aggregate, but\n * according to Section 13.8.4, OFX spec, this aggregate can appear the overall response and\n * we provide it here for convenience.\n *\n * @param {SecurityList} securityList the security list aggregate\n */\nInvestmentStatementResponse.prototype.setSecurityList = function(securityList) {\n  this.securityList = securityList;\n};\n\n\n\n\nmodule.exports = InvestmentStatementResponse;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar MessageSetType = require(\"../../MessageSetType\");\nvar ResponseMessageSet = require(\"../../ResponseMessageSet\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\n\n/**\n * Investment statement response message set.\n * @see \"Section 13.7.1.2.2, OFX Spec\"\n *\n * @class\n * @augments ResponseMessageSet\n */\nfunction InvestmentStatementResponseMessageSet () {\n\n  /**\n   * @name InvestmentStatementResponseMessageSet#statementResponses\n   * @type List<InvestmentStatementResponseTransaction>\n   * @access private\n   */\n  this.statementResponses = null;\n}\n\ninherit(InvestmentStatementResponseMessageSet, \"extends\", ResponseMessageSet);\n\n\nAggregate.add(\"INVSTMTMSGSRSV1\", InvestmentStatementResponseMessageSet);\n\n\nInvestmentStatementResponseMessageSet.prototype.getType = function() {\n  return MessageSetType.investment;\n};\n\n\n/**\n * Gets the statement response list. Most OFX files have a single statement response.\n *\n * @return {InvestmentStatementResponseTransaction[]} the statement response list\n */\nInvestmentStatementResponseMessageSet.prototype.getStatementResponses = function() {\n  return this.statementResponses;\n};\nChildAggregate.add({order: 0, owner: InvestmentStatementResponseMessageSet, /*type: InvestmentStatementResponseTransaction[],*/ fcn: \"getStatementResponses\"});\n\n\n/**\n * Sets the statement reponse list. Most OFX files have a single statement response.\n *\n * @param {InvestmentStatementResponseTransaction[]} statementResponses the statement response list\n */\nInvestmentStatementResponseMessageSet.prototype.setStatementResponses = function(statementResponses) {\n  this.statementResponses = statementResponses;\n};\n\n\n/**\n * Gets the first statement response. Use getStatementResponses() if you are expecting multiple\n * responses.\n *\n * @return {InvestmentStatementResponseTransaction} the first investment statement response.\n */\nInvestmentStatementResponseMessageSet.prototype.getStatementResponse = function() {\n  return this.statementResponses === null || this.statementResponses.length === 0 ? null : this.statementResponses[0];\n};\n\n\n/**\n * Sets the statement response if there is a single response.\n *\n * @param {InvestmentStatementResponseTransaction} statementResponse The statement response.\n */\nInvestmentStatementResponseMessageSet.prototype.setStatementResponse = function(statementResponse) {\n  this.statementResponses = [statementResponse];\n};\n\n\n// Inherited.\nInvestmentStatementResponseMessageSet.prototype.getResponseMessages = function() {\n  return this.statementResponses;\n};\n\n\n\n\nmodule.exports = InvestmentStatementResponseMessageSet;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar TransactionWrappedResponseMessage = require(\"../../TransactionWrappedResponseMessage\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar InvestmentStatementResponse = require(\"./InvestmentStatementResponse\");\n\n/**\n * Investment statement transaction response.\n * @see \"Section 13.9.2.1, OFX Spec\"\n *\n * @class\n * @augments TransactionWrappedResponseMessage\n */\nfunction InvestmentStatementResponseTransaction () {\n\n  /**\n   * @name InvestmentStatementResponseTransaction#message\n   * @type InvestmentStatementResponse\n   * @access private\n   */\n  this.message = null;\n}\n\ninherit(InvestmentStatementResponseTransaction, \"extends\", new TransactionWrappedResponseMessage(InvestmentStatementResponse));\n\n\nAggregate.add(\"INVSTMTTRNRS\", InvestmentStatementResponseTransaction);\n\n\n/**\n * Gets the the statement response message.\n *\n * @return {InvestmentStatementResponse} the statement response message.\n */\nInvestmentStatementResponseTransaction.prototype.getMessage = function() {\n  return this.message;\n};\nChildAggregate.add({required: true, order: 30, owner: InvestmentStatementResponseTransaction, /*type: InvestmentStatementResponse,*/ fcn: \"getMessage\"});\n\n\n/**\n * Sets the the statement response message.\n *\n * @param {InvestmentStatementResponse} message the statement response message.\n */\nInvestmentStatementResponseTransaction.prototype.setMessage = function(message) {\n  this.message = message;\n};\n\n\n// Inherited.\nInvestmentStatementResponseTransaction.prototype.getWrappedMessage = function() {\n  return this.getMessage();\n};\n\n\n\n\nmodule.exports = InvestmentStatementResponseTransaction;\n","\"use strict\";\n\nmodule.exports = {\n  BalanceList: require(\"./BalanceList\"),\n  IncludePosition: require(\"./IncludePosition\"),\n  InvestmentBalance: require(\"./InvestmentBalance\"),\n  InvestmentStatementRequest: require(\"./InvestmentStatementRequest\"),\n  InvestmentStatementRequestMessageSet: require(\"./InvestmentStatementRequestMessageSet\"),\n  InvestmentStatementRequestTransaction: require(\"./InvestmentStatementRequestTransaction\"),\n  InvestmentStatementResponse: require(\"./InvestmentStatementResponse\"),\n  InvestmentStatementResponseMessageSet: require(\"./InvestmentStatementResponseMessageSet\"),\n  InvestmentStatementResponseTransaction: require(\"./InvestmentStatementResponseTransaction\")\n};\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar SubAccountType = require(\"../accounts/SubAccountType\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar BaseInvestmentTransaction = require(\"./BaseInvestmentTransaction\");\nvar TransactionWithSecurity = require(\"./TransactionWithSecurity\");\n\n\n/**\n * Base class for all investment transactions for buying securities.\n * <br>\n * This class exposes a read-only view of the flattened aggregates that are\n * common to all buy investment transactions as a convenience to application\n * developers who may not find the ofx aggregation model intuitive.\n *\n * @class\n * @augments BaseInvestmentTransaction\n * @augments TransactionWithSecurity\n */\nfunction BaseBuyInvestmentTransaction (/*TransactionType*/ transactionType) {\n  BaseInvestmentTransaction.call(this, transactionType);\n\n  /**\n   * @name BaseBuyInvestmentTransaction#buyInvestment\n   * @type BuyInvestmentTransaction\n   * @access private\n   */\n  this.buyInvestment = null;\n}\n\ninherit(BaseBuyInvestmentTransaction, \"extends\", BaseInvestmentTransaction);\ninherit(BaseBuyInvestmentTransaction, \"implements\", TransactionWithSecurity);\n\n\n\n/**\n * Gets the buy investment transaction child aggregate.\n *\n * @return {BuyInvestmentTransaction} the buy investment transaction child aggregate\n */\nBaseBuyInvestmentTransaction.prototype.getBuyInvestment = function() {\n  return this.buyInvestment;\n};\nChildAggregate.add({order: 10, owner: BaseBuyInvestmentTransaction, /*type: BuyInvestmentTransaction,*/ fcn: \"getBuyInvestment\"});\n\n\n/**\n * Sets the buy investment transaction child aggregate.\n *\n * @param {BuyInvestmentTransaction} buyInvestment the buy investment transaction child aggregate\n */\nBaseBuyInvestmentTransaction.prototype.setBuyInvestment = function(buyInvestment) {\n  this.buyInvestment = buyInvestment;\n};\n\n\n/**\n * Gets the investment transaction aggregate.\n *\n * @return {InvestmentTransaction} the investment transaction aggregate\n */\n// @Overridden\nBaseBuyInvestmentTransaction.prototype.getInvestmentTransaction = function() {\n  return this.getBuyInvestment().getInvestmentTransaction();\n};\n\n\n/**\n * Gets the id of the security that was bought. This is a required field according to the OFX\n * spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {SecurityId} the security id of the security that was bought\n */\nBaseBuyInvestmentTransaction.prototype.getSecurityId = function() {\n  return this.getBuyInvestment().getSecurityId();\n};\n\n\n/**\n * Gets the number of units of the security that was bought. For security-based actions other\n * than stock splits, this is the quantity bought. For stocks, mutual funds, and others, this\n * is the number of shares. For bonds, this is the face value. For options, this is the number of\n * contacts. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the number of units purchased.\n */\nBaseBuyInvestmentTransaction.prototype.getUnits = function() {\n  return this.getBuyInvestment().getUnits();\n};\n\n\n/**\n * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the\n * share price. For bonds, this is the percentage of par. For options, this is the per share (not\n * per contact) price. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the per unit price\n */\nBaseBuyInvestmentTransaction.prototype.getUnitPrice = function() {\n  return this.getBuyInvestment().getUnitPrice();\n};\n\n\n/**\n * Gets the portion of the unit price that is attributed to the dealer markup. This is an\n * optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the per unit markeup price\n */\nBaseBuyInvestmentTransaction.prototype.getMarkup = function() {\n  return this.getBuyInvestment().getMarkup();\n};\n\n\n/**\n * Gets the transaction commission for the purchase. This is an optional field according to the\n * OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the transaction commision\n */\nBaseBuyInvestmentTransaction.prototype.getCommission = function() {\n  return this.getBuyInvestment().getCommission();\n};\n\n\n/**\n * Gets the taxes for the purchase. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the transaction taxes\n */\nBaseBuyInvestmentTransaction.prototype.getTaxes = function() {\n  return this.getBuyInvestment().getTaxes();\n};\n\n\n/**\n * Gets the fees for the purchase. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the transaction fees\n */\nBaseBuyInvestmentTransaction.prototype.getFees = function() {\n  return this.getBuyInvestment().getFees();\n};\n\n\n/**\n * Gets the load for the purchase. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the load\n */\nBaseBuyInvestmentTransaction.prototype.getLoad = function() {\n  return this.getBuyInvestment().getLoad();\n};\n\n\n/**\n * Gets the total for the purchase. Should be equal to\n * (units * (unitPrice + markup)) + (commision + fees + load + taxes) according to the OFX\n * spec. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the total\n */\nBaseBuyInvestmentTransaction.prototype.getTotal = function() {\n  return this.getBuyInvestment().getTotal();\n};\n\n\n/**\n * Gets the currency code for the transaction. Only one of currency code or original currency\n * info should be set according to the OFX spec. If neither are set, means the default currency.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the currency code for the transaction\n */\nBaseBuyInvestmentTransaction.prototype.getCurrencyCode = function() {\n  return this.getBuyInvestment().getCurrencyCode();\n};\n\n\n/**\n * Gets the original currency info for the transaction.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {OriginalCurrency} the original currency info for the transaction\n */\nBaseBuyInvestmentTransaction.prototype.getOriginalCurrencyInfo = function() {\n  return this.getBuyInvestment().getOriginalCurrencyInfo();\n};\n\n\n/**\n * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the sub account type\n */\nBaseBuyInvestmentTransaction.prototype.getSubAccountSecurity = function() {\n  return this.getBuyInvestment().getSubAccountSecurity();\n};\n\n\n/**\n * Gets the result of getSubAccountSecurity as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types\n */\nBaseBuyInvestmentTransaction.prototype.getSubAccountSecurityEnum = function() {\n  return SubAccountType.fromOfx(this.getSubAccountSecurity());\n};\n\n\n/**\n * Gets the sub account type that the money came from. (e.g. CASH, MARGIN, SHORT, OTHER).\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the sub account fund\n */\nBaseBuyInvestmentTransaction.prototype.getSubAccountFund = function() {\n  return this.getBuyInvestment().getSubAccountFund();\n};\n\n\n/**\n * Gets the result of getSubAccountFund as one of the well-known types.\n *\n * @return {SubAccountType} the type or null if it wasn't one of the well known types.\n */\nBaseBuyInvestmentTransaction.prototype.getSubAccountFundEnum = function() {\n  return SubAccountType.fromOfx(this.getSubAccountFund());\n};\n\n\n\n\nmodule.exports = BaseBuyInvestmentTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Base class for all investment transactions.\n * <br>\n * This class exposes a read-only view of the flattened aggregates that are\n * common to all investment transactions as a convenience to application\n * developers who may not find the ofx aggregation model intuitive.\n *\n * @class\n */\nfunction BaseInvestmentTransaction (/*TransactionType*/ transactionType) {\n\n  /**\n   * @name BaseInvestmentTransaction#transactionType\n   * @type TransactionType\n   * @access private\n   */\n  this.transactionType = transactionType;\n}\n\n\n\n\n/**\n * Gets the type of transaction.\n *\n * @return {TransactionType} the type of transaction\n */\nBaseInvestmentTransaction.prototype.getTransactionType = function() {\n  return this.transactionType;\n};\n\n\n/**\n * Gets the {@link InvestmentTransaction} aggregate.\n *\n * @return {InvestmentTransaction} the {@link InvestmentTransaction} aggregate\n */\nBaseInvestmentTransaction.prototype.getInvestmentTransaction = function() { throw new Error(\"Not implemented\"); };\n\n/**\n * Gets the unique financial institution assigned transaction id. This is a\n * required field according to the OFX spec.\n * @see \"Section 13.9.2.4.1, OFX Spec\"\n *\n * @return {String} the financial institution asssigned transaction id\n */\nBaseInvestmentTransaction.prototype.getTransactionId = function() {\n  return this.getInvestmentTransaction().getTransactionId();\n};\n\n/**\n * Gets the server assigned transaction id. This is an optional field\n * according to the OFX spec.\n * @see \"Section 13.9.2.4.1, OFX Spec\"\n *\n * @return {String} the server assigned transaction id\n */\nBaseInvestmentTransaction.prototype.getServerId = function() {\n  return this.getInvestmentTransaction().getServerId();\n};\n\n/**\n * Gets the trade date of the transaction. For stock splits, this is the\n * day of record. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.4.1, OFX Spec\"\n *\n * @return {Date} the trade date\n */\nBaseInvestmentTransaction.prototype.getTradeDate = function() {\n  return this.getInvestmentTransaction().getTradeDate();\n};\n\n/**\n * Gets the settlement date of the transaction. For stock splits, this is the\n * day of of execution. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.1, OFX Spec\"\n *\n * @return {Date} the trade date\n */\nBaseInvestmentTransaction.prototype.getSettlementDate = function() {\n  return this.getInvestmentTransaction().getSettlementDate();\n};\n\n/**\n * For a reveral transaction, gets the financial institution assigned\n * transaction id for the transaction being revesed.\n * @see \"Section 13.9.2.4.1, OFX Spec\"\n *\n * @return {String} the transaction id of the transaction being reversed\n */\nBaseInvestmentTransaction.prototype.getReversalTransactionId = function() {\n  return this.getInvestmentTransaction().getReversalTransactionId();\n};\n\n/**\n * Gets the memo associated with the transaction. This is an optional field\n * according to the OFX spec.\n * @see \"Section 13.9.2.4.1, OFX Spec\"\n *\n * @return {String} the memo\n */\nBaseInvestmentTransaction.prototype.getMemo = function() {\n  return this.getInvestmentTransaction().getMemo();\n};\n\n\n\n\nmodule.exports = BaseInvestmentTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar BaseInvestmentTransaction = require(\"./BaseInvestmentTransaction\");\n\n/**\n * Base class for investment transactions that aren't buys or sales..\n * <br>\n * This class exposes a read-only view of the flattened aggregates that are\n * common to all investment transactions as a convenience to application\n * developers who may not find the ofx aggregation model intuitive.\n *\n * @class\n * @augments BaseInvestmentTransaction\n */\nfunction BaseOtherInvestmentTransaction (/*TransactionType*/ transactionType) {\n  BaseInvestmentTransaction.call(this, transactionType);\n\n  /**\n   * @name BaseOtherInvestmentTransaction#investmentTransaction\n   * @type InvestmentTransaction\n   * @access private\n   */\n  this.investmentTransaction = null;\n}\n\ninherit(BaseOtherInvestmentTransaction, \"extends\", BaseInvestmentTransaction);\n\n\n\n\n/**\n * Gets the {@link InvestmentTransaction} aggregate.\n *\n * @return {InvestmentTransaction} the {@link InvestmentTransaction} aggregate\n */\n// @Override\nBaseOtherInvestmentTransaction.prototype.getInvestmentTransaction = function() {\n  return this.investmentTransaction;\n};\nChildAggregate.add({order: 10, owner: BaseOtherInvestmentTransaction, /*type: InvestmentTransaction,*/ fcn: \"getInvestmentTransaction\"});\n\n\n/**\n * Sets the {@link InvestmentTransaction} aggregate.\n *\n * @param {InvestmentTransaction} investmentTransaction the {@link InvestmentTransaction} aggregate\n */\nBaseOtherInvestmentTransaction.prototype.setInvestmentTransaction = function(investmentTransaction) {\n  this.investmentTransaction = investmentTransaction;\n};\n\n\n\n\nmodule.exports = BaseOtherInvestmentTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar Inv401KSource = require(\"../positions/Inv401KSource\");\nvar SubAccountType = require(\"../accounts/SubAccountType\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar BaseInvestmentTransaction = require(\"./BaseInvestmentTransaction\");\nvar TransactionWithSecurity = require(\"./TransactionWithSecurity\");\n\n/**\n * Base class for all investment transactions for selling securities.\n * <br>\n * This class exposes a read-only view of the flattened aggregates that are\n * common to all sell investment transactions as a convenience to application\n * developers who may not find the ofx aggregation model intuitive.\n *\n * @class\n * @augments BaseInvestmentTransaction\n * @augments TransactionWithSecurity\n */\nfunction BaseSellInvestmentTransaction (/*TransactionType*/ transactionType) {\n  BaseInvestmentTransaction.call(this, transactionType);\n\n  /**\n   * @name BaseSellInvestmentTransaction#sellInvestment\n   * @type SellInvestmentTransaction\n   * @access private\n   */\n  this.sellInvestment = null;\n}\n\ninherit(BaseSellInvestmentTransaction, \"extends\", BaseInvestmentTransaction);\ninherit(BaseSellInvestmentTransaction, \"implements\", TransactionWithSecurity);\n\n\n\n\nBaseSellInvestmentTransaction.prototype.BaseSellInvestmentTransaction = function(/*TransactionType*/ transactionType) {\n  super(transactionType);\n};\n\n\n/**\n * Gets the sell investment transaction child aggregate.\n *\n * @return {SellInvestmentTransaction} the sell investment transaction child aggregate\n */\n// @Override\nBaseSellInvestmentTransaction.prototype.getSellInvestment = function() {\n  return this.sellInvestment;\n};\nChildAggregate.add({order: 10, owner: BaseSellInvestmentTransaction, /*type: SellInvestmentTransaction,*/ fcn: \"getSellInvestment\"});\n\n\n/**\n * Sets the sell investment transaction child aggregate.\n *\n * @param {SellInvestmentTransaction} sellInvestment the sell investment transaction child aggregate\n */\nBaseSellInvestmentTransaction.prototype.setSellInvestment = function(sellInvestment) {\n  this.sellInvestment = sellInvestment;\n};\n\n\n/**\n * Gets the investment transaction aggregate.\n *\n * @return {InvestmentTransaction} the investment transaction aggregate\n */\n// @Overridden\nBaseSellInvestmentTransaction.prototype.getInvestmentTransaction = function() {\n  return this.getSellInvestment().getInvestmentTransaction();\n};\n\n\n/**\n * Gets the id of the security that was sold. This is a required field according to the OFX\n * spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {SecurityId} the security id of the security that was bought\n */\nBaseSellInvestmentTransaction.prototype.getSecurityId = function() {\n  return this.getSellInvestment().getSecurityId();\n};\n\n\n/**\n * Gets the number of units of the security that was sold. For security-based actions other\n * than stock splits, this is the quantity sold. For stocks, mutual funds, and others, this\n * is the number of shares. For bonds, this is the face value. For options, this is the number of\n * contacts. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the number of units purchased.\n */\nBaseSellInvestmentTransaction.prototype.getUnits = function() {\n  return this.getSellInvestment().getUnits();\n};\n\n\n/**\n * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the\n * share price. For bonds, this is the percentage of par. For options, this is the per share (not\n * per contact) price. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the per unit price\n */\nBaseSellInvestmentTransaction.prototype.getUnitPrice = function() {\n  return this.getSellInvestment().getUnitPrice();\n};\n\n\n/**\n * Gets the portion of the unit price that is attributed to the dealer markdown. This is an\n * optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the per unit markedown price\n */\nBaseSellInvestmentTransaction.prototype.getMarkdown = function() {\n  return this.getSellInvestment().getMarkdown();\n};\n\n\n/**\n * Gets the transaction commission for the sale. This is an optional field according to the\n * OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the transaction commision\n */\nBaseSellInvestmentTransaction.prototype.getCommission = function() {\n  return this.getSellInvestment().getCommission();\n};\n\n\n/**\n * Gets the taxes for the sale. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the transaction taxes\n */\nBaseSellInvestmentTransaction.prototype.getTaxes = function() {\n  return this.getSellInvestment().getTaxes();\n};\n\n\n/**\n * Gets the fees for the sale. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the transaction fees\n */\nBaseSellInvestmentTransaction.prototype.getFees = function() {\n  return this.getSellInvestment().getFees();\n};\n\n\n/**\n * Gets the load for the sale. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the load\n */\nBaseSellInvestmentTransaction.prototype.getLoad = function() {\n  return this.getSellInvestment().getLoad();\n};\n\n\n/**\n * Gets the withholding for the sale. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the withholding\n */\nBaseSellInvestmentTransaction.prototype.getWithholding = function() {\n  return this.getSellInvestment().getWithholding();\n};\n\n\n/**\n * Gets whether the sale was tax exempt. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Boolean} whether the transaction was tax exempt\n */\nBaseSellInvestmentTransaction.prototype.getTaxExempt = function() {\n  return this.getSellInvestment().getTaxExempt();\n};\n\n\n/**\n * Gets the total for the sale. Should be equal to\n * (units * (unitPrice + markdown)) + (commision + fees + load + taxes + penalty + withholding +\n * statewithholding) according to the OFX spec. This is a required field according to the OFX\n * spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the total\n */\nBaseSellInvestmentTransaction.prototype.getTotal = function() {\n  return this.getSellInvestment().getTotal();\n};\n\n\n/**\n * Gets the gain sale. This is aan optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the gain for the sale\n */\nBaseSellInvestmentTransaction.prototype.getGain = function() {\n  return this.getSellInvestment().getGain();\n};\n\n\n/**\n * Gets the currency code for the transaction. Only one of currency code or original currency\n * info should be set according to the OFX spec. If neither are set, means the default currency.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the currency code for the transaction.\n */\nBaseSellInvestmentTransaction.prototype.getCurrencyCode = function() {\n  return this.getSellInvestment().getCurrencyCode();\n};\n\n\n/**\n * Gets the origianl currency info for the transaction.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {OriginalCurrency} the currency info for the transaction.\n */\nBaseSellInvestmentTransaction.prototype.getOriginalCurrencyInfo = function() {\n  return this.getSellInvestment().getOriginalCurrencyInfo();\n};\n\n\n/**\n * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the sub account type\n */\nBaseSellInvestmentTransaction.prototype.getSubAccountSecurity = function() {\n  return this.getSellInvestment().getSubAccountSecurity();\n};\n\n\n/**\n * Gets the result of getSubAccountSecurity as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types.\n */\nBaseSellInvestmentTransaction.prototype.getSubAccountSecurityEnum = function() {\n  return SubAccountType.fromOfx(this.getSubAccountSecurity());\n};\n\n\n/**\n * Gets the sub account type that the money went to  (e.g. CASH, MARGIN, SHORT, OTHER).\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the sub account fund\n */\nBaseSellInvestmentTransaction.prototype.getSubAccountFund = function() {\n  return this.getSellInvestment().getSubAccountFund();\n};\n\n\n/**\n * Gets the result of getSubAccountFund as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types.\n */\nBaseSellInvestmentTransaction.prototype.getSubAccountFundEnum = function() {\n  return SubAccountType.fromOfx(this.getSubAccountFund());\n};\n\n\n/**\n * Gets the loan id if this transaction was due to a loan or loan repayment on a 401k. This is an\n * optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the loan id\n */\nBaseSellInvestmentTransaction.prototype.getLoadId = function() {\n  return this.getSellInvestment().getLoanId();\n};\n\n\n/**\n * Gets the state withholding for the sale. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the state withholding\n */\nBaseSellInvestmentTransaction.prototype.getStateWithholding = function() {\n  return this.getSellInvestment().getStateWithholding();\n};\n\n\n/**\n * Gets the penalty for the sale. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the state withholding\n */\nBaseSellInvestmentTransaction.prototype.getPenalty = function() {\n  return this.getSellInvestment().getPenalty();\n};\n\n\n/**\n * Gets the 401K source for the sale. Should be one of \"PRETAX\", \"AFTERTAX\", \"MATCH\",\n * \"PROFITSHARING\", \"ROLLOVER\", \"OTHERVEST\", \"OTHERNONVEST\".  This is an optional field\n * according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the 401k source\n */\nBaseSellInvestmentTransaction.prototype.get401kSource = function() {\n  return this.getSellInvestment().get401kSource();\n};\n\n\n/**\n * Gets the 401k source as one of the well-known types.\n *\n * @return {Inv401KSource} the 401k source or null if its not one of the well-known types\n */\nBaseSellInvestmentTransaction.prototype.get401kSourceEnum = function() {\n  return Inv401KSource.fromOfx(this.get401kSource());\n};\n\n\n\n\nmodule.exports = BaseSellInvestmentTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar BaseBuyInvestmentTransaction = require(\"./BaseBuyInvestmentTransaction\");\nvar TransactionType = require(\"./TransactionType\");\n\n/**\n * Transaction for buying debt (i.e. bonds, CDs, etc.,).\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @class\n * @augments BaseBuyInvestmentTransaction\n */\nfunction BuyDebtTransaction () {\n  BaseBuyInvestmentTransaction.call(this, TransactionType.BUY_DEBT);\n\n  /**\n   * @name BuyDebtTransaction#accruedInterest\n   * @type Double\n   * @access private\n   */\n  this.accruedInterest = null;\n}\n\ninherit(BuyDebtTransaction, \"extends\", BaseBuyInvestmentTransaction);\n\n\nAggregate.add(\"BUYDEBT\", BuyDebtTransaction);\n\n\n\n\n/**\n * Gets the amount of accrued interest on the debt. This is an optional field according to the\n * OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {Double} the amount of accrued interest\n */\nBuyDebtTransaction.prototype.getAccruedInterest = function() {\n  return this.accruedInterest;\n};\nElement.add({name: \"ACCRDINT\", order: 20, owner: BuyDebtTransaction, /*type: Double,*/ fcn: \"getAccruedInterest\"});\n\n\n/**\n * Sets the amount of accrued interest on the debt. This is an optional field according to the\n * OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {Double} accruedInterest the amount of accrued interest\n */\nBuyDebtTransaction.prototype.setAccruedInterest = function(accruedInterest) {\n  this.accruedInterest = accruedInterest;\n};\n\n\n\n\nmodule.exports = BuyDebtTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar SubAccountType = require(\"../accounts/SubAccountType\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\n\n/**\n * Buy investment transaction aggregate (\"INVBUY\").\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @class\n */\nfunction BuyInvestmentTransaction () {\n\n  /**\n   * @name BuyInvestmentTransaction#investmentTransaction\n   * @type InvestmentTransaction\n   * @access private\n   */\n  this.investmentTransaction = null;\n\n  /**\n   * @name BuyInvestmentTransaction#securityId\n   * @type SecurityId\n   * @access private\n   */\n  this.securityId = null;\n\n  /**\n   * @name BuyInvestmentTransaction#units\n   * @type Double\n   * @access private\n   */\n  this.units = null;\n\n  /**\n   * @name BuyInvestmentTransaction#unitPrice\n   * @type Double\n   * @access private\n   */\n  this.unitPrice = null;\n\n  /**\n   * @name BuyInvestmentTransaction#markup\n   * @type Double\n   * @access private\n   */\n  this.markup = null;\n\n  /**\n   * @name BuyInvestmentTransaction#commission\n   * @type Double\n   * @access private\n   */\n  this.commission = null;\n\n  /**\n   * @name BuyInvestmentTransaction#taxes\n   * @type Double\n   * @access private\n   */\n  this.taxes = null;\n\n  /**\n   * @name BuyInvestmentTransaction#fees\n   * @type Double\n   * @access private\n   */\n  this.fees = null;\n\n  /**\n   * @name BuyInvestmentTransaction#load\n   * @type Double\n   * @access private\n   */\n  this.load = null;\n\n  /**\n   * @name BuyInvestmentTransaction#total\n   * @type Double\n   * @access private\n   */\n  this.total = null;\n\n  /**\n   * @name BuyInvestmentTransaction#currencyCode\n   * @type String\n   * @access private\n   */\n  this.currencyCode = null;\n\n  /**\n   * @name BuyInvestmentTransaction#originalCurrencyInfo\n   * @type OriginalCurrency\n   * @access private\n   */\n  this.originalCurrencyInfo = null;\n\n  /**\n   * @name BuyInvestmentTransaction#subAccountSecurity\n   * @type String\n   * @access private\n   */\n  this.subAccountSecurity = null;\n\n  /**\n   * @name BuyInvestmentTransaction#subAccountFund\n   * @type String\n   * @access private\n   */\n  this.subAccountFund = null;\n}\n\n\n\nAggregate.add(\"INVBUY\", BuyInvestmentTransaction);\n\n\n/**\n * Gets the investment transaction child aggregate.\n *\n * @return {InvestmentTransaction} the investment transaction child aggregate\n */\nBuyInvestmentTransaction.prototype.getInvestmentTransaction = function() {\n  return this.investmentTransaction;\n};\nChildAggregate.add({order: 10, owner: BuyInvestmentTransaction, /*type: InvestmentTransaction,*/ fcn: \"getInvestmentTransaction\"});\n\n\n/**\n * Sets the investment transaction child aggregate.\n *\n * @param {InvestmentTransaction} investmentTransaction the investment transaction child aggregate\n */\nBuyInvestmentTransaction.prototype.setInvestmentTransaction = function(investmentTransaction) {\n  this.investmentTransaction = investmentTransaction;\n};\n\n\n/**\n * Gets the id of the security that was bought. This is a required field according to the OFX\n * spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {SecurityId} the security id of the security that was bought\n */\nBuyInvestmentTransaction.prototype.getSecurityId = function() {\n  return this.securityId;\n};\nChildAggregate.add({required: true, order: 20, owner: BuyInvestmentTransaction, /*type: SecurityId,*/ fcn: \"getSecurityId\"});\n\n\n/**\n * Sets the id of the security that was bought. This is a required field according to the OFX\n * spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {SecurityId} securityId the security id of the security that was bought\n */\nBuyInvestmentTransaction.prototype.setSecurityId = function(securityId) {\n  this.securityId = securityId;\n};\n\n\n/**\n * Gets the number of units of the security that was bought. For security-based actions other\n * than stock splits, this is the quantity bought. For stocks, mutual funds, and others, this\n * is the number of shares. For bonds, this is the face value. For options, this is the number of\n * contacts. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the number of units purchased.\n */\nBuyInvestmentTransaction.prototype.getUnits = function() {\n  return this.units;\n};\nElement.add({name: \"UNITS\", required: true, order: 30, owner: BuyInvestmentTransaction, /*type: Double,*/ fcn: \"getUnits\"});\n\n\n/**\n * Sets the number of units of the security that was bought. For security-based actions other\n * than stock splits, this is the quantity bought. For stocks, mutual funds, and others, this\n * is the number of shares. For bonds, this is the face value. For options, this is the number of\n * contacts. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} units the number of units purchased.\n */\nBuyInvestmentTransaction.prototype.setUnits = function(units) {\n  this.units = units;\n};\n\n\n/**\n * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the\n * share price. For bonds, this is the percentage of par. For options, this is the per share (not\n * per contact) price. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the per unit price\n */\nBuyInvestmentTransaction.prototype.getUnitPrice = function() {\n  return this.unitPrice;\n};\nElement.add({name: \"UNITPRICE\", required: true, order: 40, owner: BuyInvestmentTransaction, /*type: Double,*/ fcn: \"getUnitPrice\"});\n\n\n/**\n * Sets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the\n * share price. For bonds, this is the percentage of par. For options, this is the per share (not\n * per contact) price. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} unitPrice the per unit price\n */\nBuyInvestmentTransaction.prototype.setUnitPrice = function(unitPrice) {\n  this.unitPrice = unitPrice;\n};\n\n\n/**\n * Gets the portion of the unit price that is attributed to the dealer markup. This is an\n * optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the per unit markeup price\n */\nBuyInvestmentTransaction.prototype.getMarkup = function() {\n  return this.markup;\n};\nElement.add({name: \"MARKUP\", order: 50, owner: BuyInvestmentTransaction, /*type: Double,*/ fcn: \"getMarkup\"});\n\n\n/**\n * Sets the portion of the unit price that is attributed to the dealer markup. This is an\n * optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} markup the per unit markeup price\n */\nBuyInvestmentTransaction.prototype.setMarkup = function(markup) {\n  this.markup = markup;\n};\n\n\n/**\n * Gets the transaction commission for the purchase. This is an optional field according to the\n * OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the transaction commision\n */\nBuyInvestmentTransaction.prototype.getCommission = function() {\n  return this.commission;\n};\nElement.add({name: \"COMMISSION\", order: 60, owner: BuyInvestmentTransaction, /*type: Double,*/ fcn: \"getCommission\"});\n\n\n/**\n * Sets the transaction commission for the purchase. This is an optional field according to the\n * OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} commission the transaction commision\n */\nBuyInvestmentTransaction.prototype.setCommission = function(commission) {\n  this.commission = commission;\n};\n\n\n/**\n * Gets the taxes for the purchase. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the transaction taxes\n */\nBuyInvestmentTransaction.prototype.getTaxes = function() {\n  return this.taxes;\n};\nElement.add({name: \"TAXES\", order: 70, owner: BuyInvestmentTransaction, /*type: Double,*/ fcn: \"getTaxes\"});\n\n\n/**\n * Sets the taxes for the purchase. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} taxes the transaction taxes\n */\nBuyInvestmentTransaction.prototype.setTaxes = function(taxes) {\n  this.taxes = taxes;\n};\n\n\n/**\n * Gets the fees for the purchase. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the transaction fees\n */\nBuyInvestmentTransaction.prototype.getFees = function() {\n  return this.fees;\n};\nElement.add({name: \"FEES\", order: 80, owner: BuyInvestmentTransaction, /*type: Double,*/ fcn: \"getFees\"});\n\n\n/**\n * Sets the fees for the purchase. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} fees the transaction fees\n */\nBuyInvestmentTransaction.prototype.setFees = function(fees) {\n  this.fees = fees;\n};\n\n\n/**\n * Gets the load for the purchase. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the load\n */\nBuyInvestmentTransaction.prototype.getLoad = function() {\n  return this.load;\n};\nElement.add({name: \"LOAD\", order: 90, owner: BuyInvestmentTransaction, /*type: Double,*/ fcn: \"getLoad\"});\n\n\n/**\n * Sets the load for the purchase. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} load the load\n */\nBuyInvestmentTransaction.prototype.setLoad = function(load) {\n  this.load = load;\n};\n\n\n/**\n * Gets the total for the purchase. Should be equal to\n * (units * (unitPrice + markup)) + (commision + fees + taxes) according to the OFX\n * spec. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the total\n */\nBuyInvestmentTransaction.prototype.getTotal = function() {\n  return this.total;\n};\nElement.add({name: \"TOTAL\", required: true, order: 100, owner: BuyInvestmentTransaction, /*type: Double,*/ fcn: \"getTotal\"});\n\n\n/**\n * Sets the total for the purchase. Should be equal to\n * (units * (unitPrice + markup)) + (commision + fees + taxes) according to the OFX\n * spec. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} total the total\n */\nBuyInvestmentTransaction.prototype.setTotal = function(total) {\n  this.total = total;\n};\n\n\n/**\n * Gets the currency code for the transaction. Only one of currency code or original currency\n * info should be set according to the OFX spec. If neither are set, means the default currency.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the currency code for the transaction.\n */\nBuyInvestmentTransaction.prototype.getCurrencyCode = function() {\n  return this.currencyCode;\n};\nElement.add({name: \"CURRENCY\", order: 110, owner: BuyInvestmentTransaction, /*type: String,*/ fcn: \"getCurrencyCode\"});\n\n\n/**\n * Sets the currency code for the transaction. Only one of currency code or original currency\n * info may be set according to the OFX spec. If neither are set, means the default currency.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} currencyCode the currency code for the transaction.\n */\nBuyInvestmentTransaction.prototype.setCurrencyCode = function(currencyCode) {\n  this.currencyCode = currencyCode;\n  this.originalCurrencyInfo = null;\n};\n\n\n/**\n * Gets the original currency info for the transaction.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {OriginalCurrency} the original currency info for the transaction\n */\nBuyInvestmentTransaction.prototype.getOriginalCurrencyInfo = function() {\n  return this.originalCurrencyInfo;\n};\nChildAggregate.add({order: 120, owner: BuyInvestmentTransaction, /*type: OriginalCurrency,*/ fcn: \"getOriginalCurrencyInfo\"});\n\n\n/**\n * Sets the original currency info for the transaction\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {OriginalCurrency} originalCurrencyInfo the original currency info for the transaction\n */\nBuyInvestmentTransaction.prototype.setOriginalCurrencyInfo = function(originalCurrencyInfo) {\n  this.originalCurrencyInfo = originalCurrencyInfo;\n  this.currencyCode = null;\n};\n\n\n /**\n * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the sub account type\n */\nBuyInvestmentTransaction.prototype.getSubAccountSecurity = function() {\n  return this.subAccountSecurity;\n};\nElement.add({name: \"SUBACCTSEC\", order: 130, owner: BuyInvestmentTransaction, /*type: String,*/ fcn: \"getSubAccountSecurity\"});\n\n\n/**\n  * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).\n  * @see \"Section 13.9.2.4.3, OFX Spec\"\n  *\n  * @param {String} subAccountSecurity the sub account type\n  */\nBuyInvestmentTransaction.prototype.setSubAccountSecurity = function(subAccountSecurity) {\n  this.subAccountSecurity = subAccountSecurity;\n};\n\n\n/**\n * Gets the result of getSubAccountSecurity as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types.\n */\nBuyInvestmentTransaction.prototype.getSubAccountSecurityEnum = function() {\n  return SubAccountType.fromOfx(this.getSubAccountSecurity());\n};\n\n\n/**\n * Gets the sub account type that the money came from. (e.g. CASH, MARGIN, SHORT, OTHER).\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the sub account fund\n */\nBuyInvestmentTransaction.prototype.getSubAccountFund = function() {\n  return this.subAccountFund;\n};\nElement.add({name: \"SUBACCTFUND\", order: 140, owner: BuyInvestmentTransaction, /*type: String,*/ fcn: \"getSubAccountFund\"});\n\n\n/**\n * Sets the sub account type that the money came from. (e.g. CASH, MARGIN, SHORT, OTHER).\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} subAcctFund the sub account fund\n */\nBuyInvestmentTransaction.prototype.setSubAccountFund = function(subAcctFund) {\n  this.subAccountFund = subAcctFund;\n};\n\n\n/**\n * Gets the result of getSubAccountFund as one of the well-known types.\n *\n * @return {SubAccountType} the type or null if it wasn't one of the well known types.\n */\nBuyInvestmentTransaction.prototype.getSubAccountFundEnum = function() {\n  return SubAccountType.fromOfx(this.getSubAccountFund());\n};\n\n\n\n\nmodule.exports = BuyInvestmentTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar BaseBuyInvestmentTransaction = require(\"./BaseBuyInvestmentTransaction\");\nvar TransactionType = require(\"./TransactionType\");\nvar BuyType = require(\"./BuyType\");\n\n/**\n * Transaction for buying mutual funds.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @class\n * @augments BaseBuyInvestmentTransaction\n */\nfunction BuyMutualFundTransaction () {\n  BaseBuyInvestmentTransaction.call(this, TransactionType.BUY_MUTUAL_FUND);\n\n  /**\n   * @name BuyMutualFundTransaction#buyType\n   * @type String\n   * @access private\n   */\n  this.buyType = null;\n\n  /**\n   * @name BuyMutualFundTransaction#relatedTransactionId\n   * @type String\n   * @access private\n   */\n  this.relatedTransactionId = null;\n}\n\ninherit(BuyMutualFundTransaction, \"extends\", BaseBuyInvestmentTransaction);\n\n\nAggregate.add(\"BUYMF\", BuyMutualFundTransaction);\n\n\n\n/**\n * Gets the type of purchase (i.e. \"BUY\" or \"BUYTOCOVER\"). This is a required field according to\n * the OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {String} the buy type\n */\nBuyMutualFundTransaction.prototype.getBuyType = function() {\n  return this.buyType;\n};\nElement.add({name: \"BUYTYPE\", required: true, order: 20, owner: BuyMutualFundTransaction, /*type: String,*/ fcn: \"getBuyType\"});\n\n\n/**\n * Sets the type of purchase (i.e. \"BUY\" or \"BUYTOCOVER\"). This is a required field according to\n * the OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {String} buyType the buy type\n */\nBuyMutualFundTransaction.prototype.setBuyType = function(buyType) {\n  this.buyType = buyType;\n};\n\n\n/**\n * Gets the buy type as one of the well-known types.\n *\n * @return {BuyType} the type of purchase or null if it's not known\n */\nBuyMutualFundTransaction.prototype.getBuyTypeEnum = function() {\n  return BuyType.fromOfx(this.buyType);\n};\n\n\n/**\n * Gets any related transaction id for a mutual fund purchase (e.g. for a mutual fund exchange).\n * This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {String} the related transaction id\n */\nBuyMutualFundTransaction.prototype.getRelatedTransactionId = function() {\n  return this.relatedTransactionId;\n};\nElement.add({name: \"RELFITID\", order: 30, owner: BuyMutualFundTransaction, /*type: String,*/ fcn: \"getRelatedTransactionId\"});\n\n\n/**\n * Sets any related transaction id for a mutual fund purchase (e.g. for a mutual fund exchange).\n * This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {String} relatedTransactionId the related transaction id\n */\nBuyMutualFundTransaction.prototype.setRelatedTransactionId = function(relatedTransactionId) {\n  this.relatedTransactionId = relatedTransactionId;\n};\n\n\n\n\nmodule.exports = BuyMutualFundTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar TransactionType = require(\"./TransactionType\");\nvar BaseBuyInvestmentTransaction = require(\"./BaseBuyInvestmentTransaction\");\nvar OptionBuyType = require(\"./OptionBuyType\");\n\n/**\n * Transaction for buying options.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @class\n * @augments BaseBuyInvestmentTransaction\n */\nfunction BuyOptionTransaction () {\n  BaseBuyInvestmentTransaction.call(this, TransactionType.BUY_OPTION);\n\n  /**\n   * @name BuyOptionTransaction#optionBuyType\n   * @type String\n   * @access private\n   */\n  this.optionBuyType = null;\n\n  /**\n   * @name BuyOptionTransaction#sharesPerContact\n   * @type Integer\n   * @access private\n   */\n  this.sharesPerContact = null;\n}\n\ninherit(BuyOptionTransaction, \"extends\", BaseBuyInvestmentTransaction);\n\n\nAggregate.add(\"BUYOPT\", BuyOptionTransaction);\n\n\n\n/**\n * Gets the type of option purchase (i.e. \"BUYTOOPEN\" or \"BUYTOCLOSE\"). This is a required field\n * according to the OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {String} the option buy type\n */\nBuyOptionTransaction.prototype.getOptionBuyType = function() {\n  return this.optionBuyType;\n};\nElement.add({name: \"OPTBUYTYPE\", required: true, order: 20, owner: BuyOptionTransaction, /*type: String,*/ fcn: \"getOptionBuyType\"});\n\n\n/**\n * Sets the type of option purchase (i.e. \"BUYTOOPEN\" or \"BUYTOCLOSE\"). This is a required field\n * according to the OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {String} optionBuyType the option buy type\n */\nBuyOptionTransaction.prototype.setOptionBuyType = function(optionBuyType) {\n  this.optionBuyType = optionBuyType;\n};\n\n\n/**\n * Gets the option buy type as one of the well-known types.\n *\n * @return {OptionBuyType} the type of purchase or null if it's not known\n */\nBuyOptionTransaction.prototype.getOptionBuyTypeEnum = function() {\n  return OptionBuyType.fromOfx(this.optionBuyType);\n};\n\n\n/**\n * Gets the number of shares per contact. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {Integer} the number of shares per contact\n */\nBuyOptionTransaction.prototype.getSharesPerContract = function() {\n  return this.sharesPerContact;\n};\nElement.add({name: \"SHPERCTRCT\", required: true, order: 30, owner: BuyOptionTransaction, /*type: Integer,*/ fcn: \"getSharesPerContract\"});\n\n\n/**\n * Sets the number of shares per contact. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {Integer} sharesPerContact the number of shares per contact\n */\nBuyOptionTransaction.prototype.setSharesPerContract = function(sharesPerContact) {\n  this.sharesPerContact = sharesPerContact;\n};\n\n\n\n\nmodule.exports = BuyOptionTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar BaseBuyInvestmentTransaction = require(\"./BaseBuyInvestmentTransaction\");\nvar TransactionType = require(\"./TransactionType\");\n\n/**\n * Transaction for buying other types of securities.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @class\n * @augments BaseBuyInvestmentTransaction\n */\nfunction BuyOtherTransaction () {\n  BaseBuyInvestmentTransaction.call(this, TransactionType.BUY_OTHER);\n}\n\ninherit(BuyOtherTransaction, \"extends\", BaseBuyInvestmentTransaction);\n\n\nAggregate.add(\"BUYOTHER\", BuyOtherTransaction);\n\n\n\nmodule.exports = BuyOtherTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar TransactionType = require(\"./TransactionType\");\nvar BaseBuyInvestmentTransaction = require(\"./BaseBuyInvestmentTransaction\");\nvar BuyType = require(\"./BuyType\");\n\n/**\n * Transaction for buying stock.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @class\n * @augments BaseBuyInvestmentTransaction\n */\nfunction BuyStockTransaction () {\n  BaseBuyInvestmentTransaction.call(this, TransactionType.BUY_STOCK);\n\n  /**\n   * @name BuyStockTransaction#buyType\n   * @type String\n   * @access private\n   */\n  this.buyType = null;\n}\n\ninherit(BuyStockTransaction, \"extends\", BaseBuyInvestmentTransaction);\n\n\nAggregate.add(\"BUYSTOCK\", BuyStockTransaction);\n\n\n\n/**\n * Gets the type of stock purchase (i.e. \"BUY\" or \"BUYTOCOVER\"). This is a required field\n * according to the OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {String} the buy type\n */\nBuyStockTransaction.prototype.getBuyType = function() {\n  return this.buyType;\n};\nElement.add({name: \"BUYTYPE\", required: true, order: 20, owner: BuyStockTransaction, /*type: String,*/ fcn: \"getBuyType\"});\n\n\n/**\n * Sets the type of stock purchase (i.e. \"BUY\" or \"BUYTOCOVER\"). This is a required field\n * according to the OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {String} buyType the buy type\n */\nBuyStockTransaction.prototype.setBuyType = function(buyType) {\n  this.buyType = buyType;\n};\n\n\n/**\n * Gets the buy type as one of the well-known types.\n *\n * @return {BuyType} the type of purchase or null if it's not well known\n */\nBuyStockTransaction.prototype.getBuyTypeEnum = function() {\n  return BuyType.fromOfx(this.buyType);\n};\n\n\n\n\nmodule.exports = BuyStockTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Type of purchase for stocks and mutual funds.\n * @see \"Section 13.9.2.4.2, OFX Spec\"\n *\n * @enum\n */\nvar BuyType = {\n  BUY: 0,\n  BUY_TO_COVER: 1,\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"BUY\".equals(ofxVal)) {\n      return BuyType.BUY;\n    } else if (\"BUYTOCOVER\".equals(ofxVal)) {\n      return BuyType.BUY_TO_COVER;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = BuyType;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Type of action for closing a stock option.\n * @see \"Section 13.9.2.4.2, OFX Spec\"\n *\n * @enum\n */\nvar CloseOptionAction = {\n  EXERCISE: 0,\n  ASSIGN: 1,\n  EXPIRE: 2,\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"EXERCISE\".equals(ofxVal)) {\n      return CloseOptionAction.EXERCISE;\n    } else if (\"ASSIGN\".equals(ofxVal)) {\n      return CloseOptionAction.ASSIGN;\n    } else if (\"EXPIRE\".equals(ofxVal)) {\n      return CloseOptionAction.EXPIRE;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = CloseOptionAction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar SubAccountType = require(\"../accounts/SubAccountType\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar BaseOtherInvestmentTransaction = require(\"./BaseOtherInvestmentTransaction\");\nvar TransactionWithSecurity = require(\"./TransactionWithSecurity\");\nvar TransactionType = require(\"./TransactionType\");\nvar CloseOptionAction = require(\"./CloseOptionAction\");\n\n\n/**\n * Transaction for closing an option position due to expiration, exercise, or assignment.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @class\n * @augments BaseOtherInvestmentTransaction\n * @augments TransactionWithSecurity\n */\nfunction CloseOptionTransaction () {\n  BaseOtherInvestmentTransaction.call(this, TransactionType.CLOSE_OPTION);\n  \n  /**\n   * @name CloseOptionTransaction#securityId\n   * @type SecurityId\n   * @access private\n   */\n  this.securityId = null;\n\n  /**\n   * @name CloseOptionTransaction#optionAction\n   * @type String\n   * @access private\n   */\n  this.optionAction = null;\n\n  /**\n   * @name CloseOptionTransaction#units\n   * @type Double\n   * @access private\n   */\n  this.units = null;\n\n  /**\n   * @name CloseOptionTransaction#sharesPerContact\n   * @type Integer\n   * @access private\n   */\n  this.sharesPerContact = null;\n\n  /**\n   * @name CloseOptionTransaction#subAccountSecurity\n   * @type String\n   * @access private\n   */\n  this.subAccountSecurity = null;\n\n  /**\n   * @name CloseOptionTransaction#relatedTransactionId\n   * @type String\n   * @access private\n   */\n  this.relatedTransactionId = null;\n\n  /**\n   * @name CloseOptionTransaction#gain\n   * @type Double\n   * @access private\n   */\n  this.gain = null;\n}\n\ninherit(CloseOptionTransaction, \"extends\", BaseOtherInvestmentTransaction);\ninherit(CloseOptionTransaction, \"implements\", TransactionWithSecurity);\n\n\nAggregate.add(\"CLOSUREOPT\", CloseOptionTransaction);\n\n\n\n\n/**\n * Gets the security id of the option.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {SecurityId} the security id of the option\n */\nCloseOptionTransaction.prototype.getSecurityId = function() {\n  return this.securityId;\n};\nChildAggregate.add({order: 20, owner: CloseOptionTransaction, /*type: SecurityId,*/ fcn: \"getSecurityId\"});\n\n\n/**\n * Sets the security id of the option.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {SecurityId} securityId the security id of the option\n */\nCloseOptionTransaction.prototype.setSecurityId = function(securityId) {\n  this.securityId = securityId;\n};\n\n\n/**\n * Gets the action being performed (i.e. \"EXERCISE\", \"ASSIGN\", \"EXPIRE\" This is a required field\n * according to the OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {String} the option action\n */\nCloseOptionTransaction.prototype.getOptionAction = function() {\n  return this.optionAction;\n};\nElement.add({name: \"OPTACTION\", required: true, order: 30, owner: CloseOptionTransaction, /*type: String,*/ fcn: \"getOptionAction\"});\n\n\n/**\n * Sets the action being performed (i.e. \"EXERCISE\", \"ASSIGN\", \"EXPIRE\" This is a required field\n * according to the OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {String} optionAction the option action\n */\nCloseOptionTransaction.prototype.setOptionAction = function(optionAction) {\n  this.optionAction = optionAction;\n};\n\n\n/**\n * Gets the action as one of the well-known types.\n *\n * @return {CloseOptionAction} the type of close or null if it's not a well-known type\n */\nCloseOptionTransaction.prototype.getOptionActionEnum = function() {\n  return CloseOptionAction.fromOfx(this.getOptionAction());\n};\n\n\n/**\n * Gets the number of units of the option that were closed. This is a required field according\n * to the OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {Double} the number of units closed\n */\nCloseOptionTransaction.prototype.getUnits = function() {\n  return this.units;\n};\nElement.add({name: \"UNITS\", required: true, order: 40, owner: CloseOptionTransaction, /*type: Double,*/ fcn: \"getUnits\"});\n\n\n/**\n * Sets the number of units of the option that were closed. This is a required field according\n * to the OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {Double} units the number of units closed\n */\nCloseOptionTransaction.prototype.setUnits = function(units) {\n  this.units = units;\n};\n\n\n/**\n * Gets the number of shares per contact. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {Integer} the number of shares per contact\n */\nCloseOptionTransaction.prototype.getSharesPerContact = function() {\n  return this.sharesPerContact;\n};\nElement.add({name: \"SHPERCTRCT\", required: true, order: 50, owner: CloseOptionTransaction, /*type: Integer,*/ fcn: \"getSharesPerContact\"});\n\n\n/**\n * Sets the number of shares per contact. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {Integer} sharesPerContact the number of shares per contact\n */\nCloseOptionTransaction.prototype.setSharesPerContact = function(sharesPerContact) {\n  this.sharesPerContact = sharesPerContact;\n};\n\n\n/**\n * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {String} the sub account type\n */\nCloseOptionTransaction.prototype.getSubAccountSecurity = function() {\n  return this.subAccountSecurity;\n};\nElement.add({name: \"SUBACCTSEC\", required: true, order: 60, owner: CloseOptionTransaction, /*type: String,*/ fcn: \"getSubAccountSecurity\"});\n\n\n/**\n * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {String} subAccountSecurity the sub account type\n */\nCloseOptionTransaction.prototype.setSubAccountSecurity = function(subAccountSecurity) {\n  this.subAccountSecurity = subAccountSecurity;\n};\n\n\n/**\n * Gets the result of getSubAccountFund as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types\n */\nCloseOptionTransaction.prototype.getSubAccountSecurityEnum = function() {\n  return SubAccountType.fromOfx(this.getSubAccountSecurity());\n};\n\n\n/**\n * Gets the related transaction id for the related buy or sell corresponding to the\n * EXERCISE or ASSIGN action. This is a required field according to the OFX spec if the\n * action or EXERCISE or ASSIGN.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {String} the related transaction id\n */\nCloseOptionTransaction.prototype.getRelatedTransactionId = function() {\n  return this.relatedTransactionId;\n};\nElement.add({name: \"RELFITID\", order: 70, owner: CloseOptionTransaction, /*type: String,*/ fcn: \"getRelatedTransactionId\"});\n\n\n/**\n * Sets the related transaction id for the related buy or sell corresponding to the\n * EXERCISE or ASSIGN action. This is a required field according to the OFX spec if the\n * action or EXERCISE or ASSIGN.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {String} relatedTransactionId the related transaction id\n */\nCloseOptionTransaction.prototype.setRelatedTransactionId = function(relatedTransactionId) {\n  this.relatedTransactionId = relatedTransactionId;\n};\n\n\n/**\n * Gets the gain related to the transaction. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {Double} the gain related to the transaction\n */\nCloseOptionTransaction.prototype.getGain = function() {\n  return this.gain;\n};\nElement.add({name: \"GAIN\", order: 80, owner: CloseOptionTransaction, /*type: Double,*/ fcn: \"getGain\"});\n\n\n/**\n * Sets the gain related to the transaction. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {Double} gain the gain related to the transaction\n */\nCloseOptionTransaction.prototype.setGain = function(gain) {\n  this.gain = gain;\n};\n\n\n\n\nmodule.exports = CloseOptionTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar SubAccountType = require(\"../accounts/SubAccountType\");\nvar Inv401KSource = require(\"../positions/Inv401KSource\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar BaseOtherInvestmentTransaction = require(\"./BaseOtherInvestmentTransaction\");\nvar TransactionWithSecurity = require(\"./TransactionWithSecurity\");\nvar TransactionType = require(\"./TransactionType\");\nvar IncomeType = require(\"./IncomeType\");\n\n/**\n * Transaction for investment income that is realized as cash into the investment account.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @class\n * @augments BaseOtherInvestmentTransaction\n * @augments TransactionWithSecurity\n */\nfunction IncomeTransaction () {\n  BaseOtherInvestmentTransaction.call(this, TransactionType.INCOME);\n\n  /**\n   * @name IncomeTransaction#securityId\n   * @type SecurityId\n   * @access private\n   */\n  this.securityId = null;\n\n  /**\n   * @name IncomeTransaction#incomeType\n   * @type String\n   * @access private\n   */\n  this.incomeType = null;\n\n  /**\n   * @name IncomeTransaction#total\n   * @type Double\n   * @access private\n   */\n  this.total = null;\n\n  /**\n   * @name IncomeTransaction#subAccountSecurity\n   * @type String\n   * @access private\n   */\n  this.subAccountSecurity = null;\n\n  /**\n   * @name IncomeTransaction#subAccountFund\n   * @type String\n   * @access private\n   */\n  this.subAccountFund = null;\n\n  /**\n   * @name IncomeTransaction#taxExempt\n   * @type Boolean\n   * @access private\n   */\n  this.taxExempt = null;\n\n  /**\n   * @name IncomeTransaction#withholding\n   * @type Double\n   * @access private\n   */\n  this.withholding = null;\n\n  /**\n   * @name IncomeTransaction#currencyCode\n   * @type String\n   * @access private\n   */\n  this.currencyCode = null;\n\n  /**\n   * @name IncomeTransaction#originalCurrencyInfo\n   * @type OriginalCurrency\n   * @access private\n   */\n  this.originalCurrencyInfo = null;\n\n  /**\n   * @name IncomeTransaction#inv401kSource\n   * @type String\n   * @access private\n   */\n  this.inv401kSource = null;\n}\n\ninherit(IncomeTransaction, \"extends\", BaseOtherInvestmentTransaction);\ninherit(IncomeTransaction, \"implements\", TransactionWithSecurity);\n\n\nAggregate.add(\"INCOME\", IncomeTransaction);\n\n\n\n/**\n * Gets the id of the security that the income was for. This is a required field according to the\n * OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {SecurityId} the security id of the security that the income was for\n */\nIncomeTransaction.prototype.getSecurityId = function() {\n  return this.securityId;\n};\nChildAggregate.add({required: true, order: 20, owner: IncomeTransaction, /*type: SecurityId,*/ fcn: \"getSecurityId\"});\n\n\n/**\n * Sets the id of the security that the income was for. This is a required field according to the\n * OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {SecurityId} securityId the security id of the security that the income was for\n */\nIncomeTransaction.prototype.setSecurityId = function(securityId) {\n  this.securityId = securityId;\n};\n\n\n/**\n * Gets the type of income. One of \"CGLONG\" (long term capital gains), \"CGSHORT\" (short term\n * capital gains), \"DIV\" (dividend), INTEREST, or MISC>\n * @see \"Section 13.9.2.4.4, OFX Spec\" This is a required field according to the OFX spec.\n *\n * @return {String} the type of income\n */\nIncomeTransaction.prototype.getIncomeType = function() {\n  return this.incomeType;\n};\nElement.add({name: \"INCOMETYPE\", required: true, order: 30, owner: IncomeTransaction, /*type: String,*/ fcn: \"getIncomeType\"});\n\n\n/**\n * Sets the type of income. One of \"CGLONG\" (long term capital gains), \"CGSHORT\" (short term\n * capital gains), \"DIV\" (dividend), INTEREST, or MISC>\n * @see \"Section 13.9.2.4.4, OFX Spec\" This is a required field according to the OFX spec.\n *\n * @param {String} incomeType the type of income\n */\nIncomeTransaction.prototype.setIncomeType = function(incomeType) {\n  this.incomeType = incomeType;\n};\n\n\n/**\n * Gets the income type as one of the well-known types.\n *\n * @return {IncomeType} the income type or null if it's not well known\n */\nIncomeTransaction.prototype.getIncomeTypeEnum = function() {\n  return IncomeType.fromOfx(this.getIncomeType());\n};\n\n\n/**\n * Gets the total income received.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {Double} the total\n */\nIncomeTransaction.prototype.getTotal = function() {\n  return this.total;\n};\nElement.add({name: \"TOTAL\", required: true, order: 40, owner: IncomeTransaction, /*type: Double,*/ fcn: \"getTotal\"});\n\n\n/**\n * Sets the total income received.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {Double} total the total\n */\nIncomeTransaction.prototype.setTotal = function(total) {\n  this.total = total;\n};\n\n\n/**\n * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the sub account type\n */\nIncomeTransaction.prototype.getSubAccountSecurity = function() {\n  return this.subAccountSecurity;\n};\nElement.add({name: \"SUBACCTSEC\", order: 50, owner: IncomeTransaction, /*type: String,*/ fcn: \"getSubAccountSecurity\"});\n\n\n/**\n * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} subAcctSec the sub account type\n */\nIncomeTransaction.prototype.setSubAccountSecurity = function(subAcctSec) {\n  this.subAccountSecurity = subAcctSec;\n};\n\n\n/**\n * Gets the result of getSubAccountSecurity as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types.\n */\nIncomeTransaction.prototype.getSubAccountSecurityEnum = function() {\n  return SubAccountType.fromOfx(this.getSubAccountSecurity());\n};\n\n\n/**\n * Gets the sub account type that the security is from (e.g. CASH, MARGIN, SHORT, OTHER).\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the sub account fund for the transaction\n */\nIncomeTransaction.prototype.getSubAccountFund = function() {\n  return this.subAccountFund;\n};\nElement.add({name: \"SUBACCTFUND\", order: 60, owner: IncomeTransaction, /*type: String,*/ fcn: \"getSubAccountFund\"});\n\n\n/**\n * Sets the sub account type that the security is from (e.g. CASH, MARGIN, SHORT, OTHER).\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} subAcctFund the sub account fund for the transaction\n */\nIncomeTransaction.prototype.setSubAccountFund = function(subAcctFund) {\n  this.subAccountFund = subAcctFund;\n};\n\n\n/**\n * Gets the result of getSubAccountFund as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types\n */\nIncomeTransaction.prototype.getSubAccountFundEnum = function() {\n  return SubAccountType.fromOfx(this.getSubAccountFund());\n};\n\n\n/**\n * Gets whether the income was tax exempt. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Boolean} whether the transaction was tax exempt\n */\nIncomeTransaction.prototype.getTaxExempt = function() {\n  return this.taxExempt;\n};\nElement.add({name: \"TAXEXEMPT\", order: 70, owner: IncomeTransaction, /*type: Boolean,*/ fcn: \"getTaxExempt\"});\n\n\n/**\n * Sets whether the income was tax exempt. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Boolean} taxExempt whether the transaction was tax exempt\n */\nIncomeTransaction.prototype.setTaxExempt = function(taxExempt) {\n  this.taxExempt = taxExempt;\n};\n\n\n/**\n * Gets the withholding for the income. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the withholding\n */\nIncomeTransaction.prototype.getWithholding = function() {\n  return this.withholding;\n};\nElement.add({name: \"WITHHOLDING\", order: 80, owner: IncomeTransaction, /*type: Double,*/ fcn: \"getWithholding\"});\n\n\n/**\n * Sets the withholding for the income. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} withholding the withholding\n */\nIncomeTransaction.prototype.setWithholding = function(withholding) {\n  this.withholding = withholding;\n};\n\n\n/**\n * Gets the currency code for the transaction. Only one of currency code or original currency\n * info should be set according to the OFX spec. If neither are set, means the default currency.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the currency code for the transaction\n */\nIncomeTransaction.prototype.getCurrencyCode = function() {\n  return this.currencyCode;\n};\nElement.add({name: \"CURRENCY\", order: 90, owner: IncomeTransaction, /*type: String,*/ fcn: \"getCurrencyCode\"});\n\n\n/**\n * Sets the currency code for the transaction. Only one of currency code or original currency\n * info should be set according to the OFX spec. If neither are set, means the default currency.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} currencyCode the currency code for the transaction\n */\nIncomeTransaction.prototype.setCurrencyCode = function(currencyCode) {\n  this.currencyCode = currencyCode;\n  this.originalCurrencyInfo = null;\n};\n\n\n/**\n * Gets the original currency info for the transaction.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {OriginalCurrency} the currency info for the transaction\n */\nIncomeTransaction.prototype.getOriginalCurrencyInfo = function() {\n  return this.originalCurrencyInfo;\n};\nChildAggregate.add({order: 120, owner: IncomeTransaction, /*type: OriginalCurrency,*/ fcn: \"getOriginalCurrencyInfo\"});\n\n\n/**\n * Sets the original currency info for the transaction.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {OriginalCurrency} originalCurrencyInfo the currency info for the transaction\n */\nIncomeTransaction.prototype.setOriginalCurrencyInfo = function(originalCurrencyInfo) {\n  this.originalCurrencyInfo = originalCurrencyInfo;\n  this.currencyCode = null;\n};\n\n\n/**\n * Gets the 401K source for the sale. Should be one of \"PRETAX\", \"AFTERTAX\", \"MATCH\",\n * \"PROFITSHARING\", \"ROLLOVER\", \"OTHERVEST\", \"OTHERNONVEST\".  This is an optional field\n * according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the state withholding\n */\nIncomeTransaction.prototype.get401kSource = function() {\n  return this.inv401kSource;\n};\nElement.add({name: \"INV401KSOURCE\", order: 110, owner: IncomeTransaction, /*type: String,*/ fcn: \"get401kSource\"});\n\n\n/**\n * Sets the 401K source for the sale. Should be one of \"PRETAX\", \"AFTERTAX\", \"MATCH\",\n * \"PROFITSHARING\", \"ROLLOVER\", \"OTHERVEST\", \"OTHERNONVEST\".  This is an optional field\n * according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} inv401kSource the state withholding\n */\nIncomeTransaction.prototype.set401kSource = function(inv401kSource) {\n  this.inv401kSource = inv401kSource;\n};\n\n\n/**\n * Gets the 401(k) source as one of the well-known types.\n *\n * @return {Inv401KSource} the type of close or null if it's not well known.\n */\nIncomeTransaction.prototype.get401kSourceEnum = function() {\n  return Inv401KSource.fromOfx(this.get401kSource());\n};\n\n\n\n\nmodule.exports = IncomeTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Type of income.\n * @see \"Section 13.9.2.4.2, OFX Spec\"\n *\n * @enum\n */\nvar IncomeType = {\n  LONG_TERM_CAP_GAINS: 0,\n  SHORT_TERM_CAP_GAINS: 1,\n  DIVIDEND: 2,\n  INTEREST: 3,\n  MISC: 4,\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"CGLONG\".equals(ofxVal)) {\n      return IncomeType.LONG_TERM_CAP_GAINS;\n    } else if (\"CGSHORT\".equals(ofxVal)) {\n      return IncomeType.SHORT_TERM_CAP_GAINS;\n    } else if (\"DIV\".equals(ofxVal)) {\n      return IncomeType.DIVIDEND;\n    } else if (\"INTEREST\".equals(ofxVal)) {\n      return IncomeType.INTEREST;\n    } else if (\"MISC\".equals(ofxVal)) {\n      return IncomeType.MISC;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = IncomeType;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar SubAccountType = require(\"../accounts/SubAccountType\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\n\n/**\n * Bank transactions that are part of an investment account statement. Wraps a {@link Transaction}.\n * @see \"Section 13.9.2.3, OFX Spec\"\n *\n * @class\n */\nfunction InvestmentBankTransaction () {\n\n  /**\n   * @name InvestmentBankTransaction#transaction\n   * @type Transaction\n   * @access private\n   */\n  this.transaction = null;\n\n  /**\n   * @name InvestmentBankTransaction#subAccountFund\n   * @type String\n   * @access private\n   */\n  this.subAccountFund = null;\n}\n\n\n\nAggregate.add(\"INVBANKTRAN\", InvestmentBankTransaction);\n\n\n/**\n * Gets the wrapped transaction aggregate.\n * @return {Transaction} the wrapped transaction\n */\nInvestmentBankTransaction.prototype.getTransaction = function() {\n  return this.transaction;\n};\nChildAggregate.add({order: 10, owner: InvestmentBankTransaction, /*type: Transaction,*/ fcn: \"getTransaction\"});\n\n\n/**\n * Sets the wrapped transaction aggregate.\n * @param {Transaction} transaction the wrapped transaction\n */\nInvestmentBankTransaction.prototype.setTransaction = function(transaction) {\n  this.transaction = transaction;\n};\n\n\n/**\n * Gets the sub account type that the security is from (e.g. CASH, MARGIN, SHORT, OTHER).\n * @see \"Section 13.9.2.4.2, OFX Spec\"\n *\n * @return {String} the sub account fund for the transaction\n */\nInvestmentBankTransaction.prototype.getSubAccountFund = function() {\n  return this.subAccountFund;\n};\nElement.add({name: \"SUBACCTFUND\", required: true, order: 20, owner: InvestmentBankTransaction, /*type: String,*/ fcn: \"getSubAccountFund\"});\n\n\n/**\n * Sets the sub account type that the security is from (e.g. CASH, MARGIN, SHORT, OTHER).\n * @see \"Section 13.9.2.4.2, OFX Spec\"\n *\n * @param {String} subAccountFund the sub account fund for the transaction\n */\nInvestmentBankTransaction.prototype.setSubAccountFund = function(subAccountFund) {\n  this.subAccountFund = subAccountFund;\n};\n\n\n/**\n * Gets the result of getSubAccountFund as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types\n */\nInvestmentBankTransaction.prototype.getSubAccountFundEnum = function() {\n  return SubAccountType.fromOfx(this.getSubAccountFund());\n};\n\n\n\n\nmodule.exports = InvestmentBankTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar SubAccountType = require(\"../accounts/SubAccountType\");\nvar Inv401KSource = require(\"../positions/Inv401KSource\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar BaseOtherInvestmentTransaction = require(\"./BaseOtherInvestmentTransaction\");\nvar TransactionType = require(\"./TransactionType\");\n\n/**\n * Transaction for an investment expense\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @class\n * @augments BaseOtherInvestmentTransaction\n */\nfunction InvestmentExpenseTransaction () {\n  BaseOtherInvestmentTransaction.call(this, TransactionType.INVESTMENT_EXPENSE);\n\n  /**\n   * @name InvestmentExpenseTransaction#securityId\n   * @type SecurityId\n   * @access private\n   */\n  this.securityId = null;\n\n  /**\n   * @name InvestmentExpenseTransaction#total\n   * @type Double\n   * @access private\n   */\n  this.total = null;\n\n  /**\n   * @name InvestmentExpenseTransaction#subAccountSecurity\n   * @type String\n   * @access private\n   */\n  this.subAccountSecurity = null;\n\n  /**\n   * @name InvestmentExpenseTransaction#subAccountFund\n   * @type String\n   * @access private\n   */\n  this.subAccountFund = null;\n\n  /**\n   * @name InvestmentExpenseTransaction#currencyCode\n   * @type String\n   * @access private\n   */\n  this.currencyCode = null;\n\n  /**\n   * @name InvestmentExpenseTransaction#originalCurrencyInfo\n   * @type OriginalCurrency\n   * @access private\n   */\n  this.originalCurrencyInfo = null;\n\n  /**\n   * @name InvestmentExpenseTransaction#inv401kSource\n   * @type String\n   * @access private\n   */\n  this.inv401kSource = null;\n}\n\ninherit(InvestmentExpenseTransaction, \"extends\", BaseOtherInvestmentTransaction);\n\n\nAggregate.add(\"INVEXPENSE\", InvestmentExpenseTransaction);\n\n\n\n/**\n * Gets the id of the security for the expense. This is a required field according to the OFX\n * spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {SecurityId} the security id of the security for the expsense\n */\nInvestmentExpenseTransaction.prototype.getSecurityId = function() {\n  return this.securityId;\n};\nChildAggregate.add({required: true, order: 20, owner: InvestmentExpenseTransaction, /*type: SecurityId,*/ fcn: \"getSecurityId\"});\n\n\n/**\n * Sets the id of the security for the expense. This is a required field according to the OFX\n * spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {SecurityId} securityId the security id of the security for the expsense\n */\nInvestmentExpenseTransaction.prototype.setSecurityId = function(securityId) {\n  this.securityId = securityId;\n};\n\n\n/**\n * Gets the total for the expense.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the total\n */\nInvestmentExpenseTransaction.prototype.getTotal = function() {\n  return this.total;\n};\nElement.add({name: \"TOTAL\", required: true, order: 30, owner: InvestmentExpenseTransaction, /*type: Double,*/ fcn: \"getTotal\"});\n\n\n/**\n * Sets the total for the expense.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} total the total\n */\nInvestmentExpenseTransaction.prototype.setTotal = function(total) {\n  this.total = total;\n};\n\n\n/**\n * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the sub account type\n */\nInvestmentExpenseTransaction.prototype.getSubAccountSecurity = function() {\n  return this.subAccountSecurity;\n};\nElement.add({name: \"SUBACCTSEC\", order: 40, owner: InvestmentExpenseTransaction, /*type: String,*/ fcn: \"getSubAccountSecurity\"});\n\n\n/**\n * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} subAccountSecurity the sub account type\n */\nInvestmentExpenseTransaction.prototype.setSubAccountSecurity = function(subAccountSecurity) {\n  this.subAccountSecurity = subAccountSecurity;\n};\n\n\n/**\n * Gets the result of getSubAccountSecurity as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types.\n */\nInvestmentExpenseTransaction.prototype.getSubAccountSecurityEnum = function() {\n  return SubAccountType.fromOfx(this.getSubAccountSecurity());\n};\n\n\n/**\n * Gets the sub account type for the fund. (e.g. CASH, MARGIN, SHORT, OTHER).\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the sub account fund\n */\nInvestmentExpenseTransaction.prototype.getSubAccountFund = function() {\n  return this.subAccountFund;\n};\nElement.add({name: \"SUBACCTFUND\", order: 50, owner: InvestmentExpenseTransaction, /*type: String,*/ fcn: \"getSubAccountFund\"});\n\n\n/**\n * Sets the sub account type for the fund. (e.g. CASH, MARGIN, SHORT, OTHER).\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} subAccountFund the sub account fund\n */\nInvestmentExpenseTransaction.prototype.setSubAccountFund = function(subAccountFund) {\n  this.subAccountFund = subAccountFund;\n};\n\n\n/**\n * Gets the result of getSubAccountFund as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types\n */\nInvestmentExpenseTransaction.prototype.getSubAccountFundEnum = function() {\n  return SubAccountType.fromOfx(this.getSubAccountFund());\n};\n\n\n/**\n * Gets the currency code for the transaction. Only one of currency code or original currency\n * code should be set according to the OFX spec. If neither are set, means the default currency.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the currency code for the transaction\n */\nInvestmentExpenseTransaction.prototype.getCurrencyCode = function() {\n  return this.currencyCode;\n};\nElement.add({name: \"CURRENCY\", order: 60, owner: InvestmentExpenseTransaction, /*type: String,*/ fcn: \"getCurrencyCode\"});\n\n\n/**\n * sets the currency code for the transaction. Only one of currency code or original currency\n * code should be set according to the OFX spec. If neither are set, means the default currency.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} currencyCode the currency code for the transaction\n */\nInvestmentExpenseTransaction.prototype.setCurrencyCode = function(currencyCode) {\n  this.currencyCode = currencyCode;\n  this.originalCurrencyInfo = null;\n};\n\n\n/**\n * Gets the original currency info for the transaction.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {OriginalCurrency} the original currency info for the transaction\n */\nInvestmentExpenseTransaction.prototype.getOriginalCurrencyInfo = function() {\n  return this.originalCurrencyInfo;\n};\nElement.add({name: \"ORIGCURRENCY\", order: 70, owner: InvestmentExpenseTransaction, /*type: OriginalCurrency,*/ fcn: \"getOriginalCurrencyInfo\"});\n\n\n/**\n * Sets the original currency info for the transaction.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {OriginalCurrency} originalCurrencyInfo the original currency info for the transaction\n */\nInvestmentExpenseTransaction.prototype.setOriginalCurrencyInfo = function(originalCurrencyInfo) {\n  this.originalCurrencyInfo = originalCurrencyInfo;\n  this.currencyCode = null;\n};\n\n\n/**\n * Gets the 401K source for the transaction. Should be one of \"PRETAX\", \"AFTERTAX\", \"MATCH\",\n * \"PROFITSHARING\", \"ROLLOVER\", \"OTHERVEST\", \"OTHERNONVEST\".  This is an optional field\n * according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the 401k source\n */\nInvestmentExpenseTransaction.prototype.get401kSource = function() {\n  return this.inv401kSource;\n};\nElement.add({name: \"INV401KSOURCE\", order: 180, owner: InvestmentExpenseTransaction, /*type: String,*/ fcn: \"get401kSource\"});\n\n\n/**\n * Sets the 401K source for the transaction. Should be one of \"PRETAX\", \"AFTERTAX\", \"MATCH\",\n * \"PROFITSHARING\", \"ROLLOVER\", \"OTHERVEST\", \"OTHERNONVEST\".  This is an optional field\n * according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} inv401kSource the 401k source\n */\nInvestmentExpenseTransaction.prototype.set401kSource = function(inv401kSource) {\n  this.inv401kSource = inv401kSource;\n};\n\n\n/**\n * Gets the 401k source as one of the well-known types.\n *\n * @return {Inv401KSource} the 401k source or null if its not one of the well-known types\n */\nInvestmentExpenseTransaction.prototype.get401kSourceEnum = function() {\n  return Inv401KSource.fromOfx(this.get401kSource());\n};\n\n\n\n\nmodule.exports = InvestmentExpenseTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\n\n/**\n * Investment transaction aggregate (\"INVTRAN\").\n * @see \"Section 13.9.2.4.1, OFX Spec\"\n *\n * @class\n */\nfunction InvestmentTransaction () {\n\n  /**\n   * @name InvestmentTransaction#transactionId\n   * @type String\n   * @access private\n   */\n  this.transactionId = null;\n\n  /**\n   * @name InvestmentTransaction#serverId\n   * @type String\n   * @access private\n   */\n  this.serverId = null;\n\n  /**\n   * @name InvestmentTransaction#tradeDate\n   * @type Date\n   * @access private\n   */\n  this.tradeDate = null;\n\n  /**\n   * @name InvestmentTransaction#settlementDate\n   * @type Date\n   * @access private\n   */\n  this.settlementDate = null;\n\n  /**\n   * @name InvestmentTransaction#reversalTransactionId\n   * @type String\n   * @access private\n   */\n  this.reversalTransactionId = null;\n\n  /**\n   * @name InvestmentTransaction#memo\n   * @type String\n   * @access private\n   */\n  this.memo = null;\n}\n\n\n\nAggregate.add(\"INVTRAN\", InvestmentTransaction);\n\n\n/**\n * Gets the unique financial institution assigned transaction id. This is a\n * required field according to the OFX spec.\n * @see \"Section 13.9.2.4.1, OFX Spec\"\n *\n * @return {String} the financial institution asssigned transaction id\n */\nInvestmentTransaction.prototype.getTransactionId = function() {\n  return this.transactionId;\n};\nElement.add({name: \"FITID\", required: true, order: 0, owner: InvestmentTransaction, /*type: String,*/ fcn: \"getTransactionId\"});\n\n\n/**\n * Sets the unique financial institution assigned transaction id. This is a\n * required field according to the OFX spec.\n * @see \"Section 13.9.2.4.1, OFX Spec\"\n *\n * @param {String} transactionId the financial institution asssigned transaction id\n */\nInvestmentTransaction.prototype.setTransactionId = function(transactionId) {\n  this.transactionId = transactionId;\n};\n\n\n/**\n * Gets the server assigned transaction id. This is an optional field\n * according to the OFX spec.\n * @see \"Section 13.9.2.4.1, OFX Spec\"\n *\n * @return {String} the server assigned transaction id\n */\nInvestmentTransaction.prototype.getServerId = function() {\n  return this.serverId;\n};\nElement.add({name: \"SRVRTID\", order: 10, owner: InvestmentTransaction, /*type: String,*/ fcn: \"getServerId\"});\n\n\n/**\n * Sets the server assigned transaction id. This is an optional field\n * according to the OFX spec.\n * @see \"Section 13.9.2.4.1, OFX Spec\"\n *\n * @param {String} serverId the server assigned transaction id\n */\nInvestmentTransaction.prototype.setServerId = function(serverId) {\n  this.serverId = serverId;\n};\n\n\n/**\n * Gets the trade date of the transaction. For stock splits, this is the\n * day of record. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.4.1, OFX Spec\"\n *\n * @return {Date} the trade date\n */\nInvestmentTransaction.prototype.getTradeDate = function() {\n  return this.tradeDate;\n};\nElement.add({name: \"DTTRADE\", required: true, order: 20, owner: InvestmentTransaction, /*type: Date,*/ fcn: \"getTradeDate\"});\n\n\n/**\n * Sets the trade date of the transaction. For stock splits, this is the\n * day of record. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.4.1, OFX Spec\"\n *\n * @param {Date} tradeDate the trade date\n */\nInvestmentTransaction.prototype.setTradeDate = function(tradeDate) {\n  this.tradeDate = tradeDate;\n};\n\n\n/**\n * Gets the settlement date of the transaction. For stock splits, this is the\n * day of of execution. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.1, OFX Spec\"\n *\n * @return {Date} the trade date\n */\nInvestmentTransaction.prototype.getSettlementDate = function() {\n  return this.settlementDate;\n};\nElement.add({name: \"DTSETTLE\", order: 30, owner: InvestmentTransaction, /*type: Date,*/ fcn: \"getSettlementDate\"});\n\n\n/**\n * Sets the settlement date of the transaction. For stock splits, this is the\n * day of of execution. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.1, OFX Spec\"\n *\n * @param {Date} settlementDate the trade date\n */\nInvestmentTransaction.prototype.setSettlementDate = function(settlementDate) {\n  this.settlementDate = settlementDate;\n};\n\n\n/**\n * For a reveral transaction, gets the financial institution assigned\n * transaction id for the transaction being revesed.\n * @see \"Section 13.9.2.4.1, OFX Spec\"\n *\n * @return {String} the transaction id of the transaction being reversed\n */\nInvestmentTransaction.prototype.getReversalTransactionId = function() {\n  return this.reversalTransactionId;\n};\nElement.add({name: \"REVERSALFITID\", order: 40, owner: InvestmentTransaction, /*type: String,*/ fcn: \"getReversalTransactionId\"});\n\n\n/**\n * For a reveral transaction, gets the financial institution assigned\n * transaction id for the transaction being revesed.\n * @see \"Section 13.9.2.4.1, OFX Spec\"\n *\n * @param {String} reversalTransactionId the transaction id of the transaction being reversed\n */\nInvestmentTransaction.prototype.setReversalTransactionId = function(reversalTransactionId) {\n  this.reversalTransactionId = reversalTransactionId;\n};\n\n\n/**\n * Gets the memo associated with the transaction. This is an optional field\n * according to the OFX spec.\n * @see \"Section 13.9.2.4.1, OFX Spec\"\n *\n * @return {String} the memo\n */\nInvestmentTransaction.prototype.getMemo = function() {\n  return this.memo;\n};\nElement.add({name: \"MEMO\", order: 50, owner: InvestmentTransaction, /*type: String,*/ fcn: \"getMemo\"});\n\n\n/**\n * Sets the memo associated with the transaction. This is an optional field\n * according to the OFX spec.\n * @see \"Section 13.9.2.4.1, OFX Spec\"\n *\n * @param {String} memo the memo\n */\nInvestmentTransaction.prototype.setMemo = function(memo) {\n  this.memo = memo;\n};\n\n\n\n\nmodule.exports = InvestmentTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\n\n/**\n * The transaction list aggregate.\n * @see \"Section 13.9.1.2, OFX Spec\"\n *\n * @class\n */\nfunction InvestmentTransactionList () {\n\n  /**\n   * @name InvestmentTransactionList#start\n   * @type Date\n   * @access private\n   */\n  this.start = null;\n\n  /**\n   * @name InvestmentTransactionList#end\n   * @type Date\n   * @access private\n   */\n  this.end = null;\n\n  /**\n   * @name InvestmentTransactionList#transactions\n   * @type List<BaseInvestmentTransaction>\n   * @access private\n   */\n  this.transactions = null;\n\n  /**\n   * @name InvestmentTransactionList#bankTransactions\n   * @type List<InvestmentBankTransaction>\n   * @access private\n   */\n  this.bankTransactions = null;\n}\n\n\n\nAggregate.add(\"INVTRANLIST\", InvestmentTransactionList);\n\n\n/**\n * Gets the start date. This is a required field according to the OFX spec.\n *\n * @return {Date} The start date\n */\nInvestmentTransactionList.prototype.getStart = function() {\n  return this.start;\n};\nElement.add({name: \"DTSTART\", required: true, order: 0, owner: InvestmentTransactionList, /*type: Date,*/ fcn: \"getStart\"});\n\n\n/**\n * Sets the start date. This is a required field according to the OFX spec.\n *\n * @param {Date} start The start date\n */\nInvestmentTransactionList.prototype.setStart = function(start) {\n  this.start = start;\n};\n\n\n/**\n * Gets the end date. This is a required field according to the OFX spec.\n *\n * @return {Date} he end date\n */\nInvestmentTransactionList.prototype.getEnd = function() {\n  return this.end;\n};\nElement.add({name: \"DTEND\", required: true, order: 10, owner: InvestmentTransactionList, /*type: Date,*/ fcn: \"getEnd\"});\n\n\n/**\n * Sets the end date. This is a required field according to the OFX spec.\n *\n * @param {Date} end the end date\n */\nInvestmentTransactionList.prototype.setEnd = function(end) {\n  this.end = end;\n};\n\n\n/**\n * Gets the investment transaction list. This is a heterogenous list of different types of\n * transactions returned in the order the brokerage provides them.\n *\n * @return {BaseInvestmentTransaction[]} the investment transaction list\n */\nInvestmentTransactionList.prototype.getInvestmentTransactions = function() {\n  return this.transactions;\n};\nChildAggregate.add({order: 20, owner: InvestmentTransactionList, /*type: BaseInvestmentTransaction[],*/ fcn: \"getInvestmentTransactions\"});\n\n\n/**\n * Sets the investment transaction list. This is a heterogenous list of different types of\n * transactions returned in the order the brokerage provides them.\n *\n * @param {BaseInvestmentTransaction[]} transactions the investment transaction list\n */\nInvestmentTransactionList.prototype.setInvestmentTransactions = function(transactions) {\n  this.transactions = transactions;\n};\n\n\n/**\n * Gets the bank transaction list.\n *\n * @return {InvestmentBankTransaction[]} the bank transaction list\n */\nInvestmentTransactionList.prototype.getBankTransactions = function() {\n  return this.bankTransactions;\n};\nChildAggregate.add({order: 30, owner: InvestmentTransactionList, /*type: InvestmentBankTransaction[],*/ fcn: \"getBankTransactions\"});\n\n\n/**\n * Sets the bank transaction list.\n *\n * @param {InvestmentBankTransaction[]} bankTransactions the bank transaction list\n */\nInvestmentTransactionList.prototype.setBankTransactions = function(bankTransactions) {\n  this.bankTransactions = bankTransactions;\n};\n\n\n\n\nmodule.exports = InvestmentTransactionList;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar SubAccountType = require(\"../../../../domain/data/investment/accounts/SubAccountType\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar BaseOtherInvestmentTransaction = require(\"./BaseOtherInvestmentTransaction\");\nvar TransactionType = require(\"./TransactionType\");\n\n/**\n * Transaction for journal fund transactions between sub-accounts within the same investment\n * account.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @class\n * @augments BaseOtherInvestmentTransaction\n */\nfunction JournalFundTransaction () {\n  BaseOtherInvestmentTransaction.call(this, TransactionType.JOURNAL_FUND);\n\n  /**\n   * @name JournalFundTransaction#subAccountFrom\n   * @type String\n   * @access private\n   */\n  this.subAccountFrom = null;\n\n  /**\n   * @name JournalFundTransaction#subAccountTo\n   * @type String\n   * @access private\n   */\n  this.subAccountTo = null;\n\n  /**\n   * @name JournalFundTransaction#total\n   * @type Double\n   * @access private\n   */\n  this.total = null;\n}\n\ninherit(JournalFundTransaction, \"extends\", BaseOtherInvestmentTransaction);\n\n\nAggregate.add(\"JRNLFUND\", JournalFundTransaction);\n\n\nJournalFundTransaction.prototype.JournalFundTransaction = function() {\n  super(TransactionType.JOURNAL_FUND);\n};\n\n\n/**\n * Gets the sub account type the transer is from (e.g. CASH, MARGIN, SHORT, OTHER).\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {String} the sub account type\n */\nJournalFundTransaction.prototype.getFromSubAccountFund = function() {\n  return this.subAccountFrom;\n};\nElement.add({name: \"SUBACCTFROM\", order: 20, owner: JournalFundTransaction, /*type: String,*/ fcn: \"getFromSubAccountFund\"});\n\n\n/**\n * Sets the sub account type the transer is from (e.g. CASH, MARGIN, SHORT, OTHER).\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {String} subAccountFrom the sub account type\n */\nJournalFundTransaction.prototype.setFromSubAccountFund = function(subAccountFrom) {\n  this.subAccountFrom = subAccountFrom;\n};\n\n\n/**\n * Gets the result of getFromSubAccountFund as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types.\n */\nJournalFundTransaction.prototype.getFromSubAccountFundEnum = function() {\n  return SubAccountType.fromOfx(this.getFromSubAccountFund());\n};\n\n\n/**\n * Gets the sub account type that the transfer is to (e.g. CASH, MARGIN, SHORT, OTHER).\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {String} the sub account fund\n */\nJournalFundTransaction.prototype.getToSubAccountFund = function() {\n  return this.subAccountTo;\n};\nElement.add({name: \"SUBACCTTO\", order: 30, owner: JournalFundTransaction, /*type: String,*/ fcn: \"getToSubAccountFund\"});\n\n\n/**\n * Sets the sub account type that the transfer is to (e.g. CASH, MARGIN, SHORT, OTHER).\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {String} subAccountTo the sub account fund\n */\nJournalFundTransaction.prototype.setToSubAccountFund = function(subAccountTo) {\n  this.subAccountTo = subAccountTo;\n};\n\n\n/**\n * Gets the result of getToSubAccountFund as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types.\n */\nJournalFundTransaction.prototype.getToSubAccountFundEnum = function() {\n  return SubAccountType.fromOfx(this.getToSubAccountFund());\n};\n\n\n/**\n * Gets the total for the transaction.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {Double} the total\n */\nJournalFundTransaction.prototype.getTotal = function() {\n  return this.total;\n};\nElement.add({name: \"TOTAL\", order: 40, owner: JournalFundTransaction, /*type: Double,*/ fcn: \"getTotal\"});\n\n\n/**\n * Sets the total for the transaction.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {Double} total the total\n */\nJournalFundTransaction.prototype.setTotal = function(total) {\n  this.total = total;\n};\n\n\n\n\nmodule.exports = JournalFundTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar SubAccountType = require(\"../accounts/SubAccountType\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar BaseOtherInvestmentTransaction = require(\"./BaseOtherInvestmentTransaction\");\nvar TransactionWithSecurity = require(\"./TransactionWithSecurity\");\nvar TransactionType = require(\"./TransactionType\");\n\n/**\n * Transaction for journal security transactions between sub-accounts within the same investment\n * account.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @class\n * @augments BaseOtherInvestmentTransaction\n * @augments TransactionWithSecurity\n */\nfunction JournalSecurityTransaction () {\n  BaseOtherInvestmentTransaction.call(this, TransactionType.JOURNAL_SECURITY);\n\n  /**\n   * @name JournalSecurityTransaction#securityId\n   * @type SecurityId\n   * @access private\n   */\n  this.securityId = null;\n\n  /**\n   * @name JournalSecurityTransaction#subAccountFrom\n   * @type String\n   * @access private\n   */\n  this.subAccountFrom = null;\n\n  /**\n   * @name JournalSecurityTransaction#subAccountTo\n   * @type String\n   * @access private\n   */\n  this.subAccountTo = null;\n\n  /**\n   * @name JournalSecurityTransaction#total\n   * @type Double\n   * @access private\n   */\n  this.total = null;\n}\n\ninherit(JournalSecurityTransaction, \"extends\", BaseOtherInvestmentTransaction);\ninherit(JournalSecurityTransaction, \"implements\", TransactionWithSecurity);\n\n\nAggregate.add(\"JRNLSEC\", JournalSecurityTransaction);\n\n\n\n/**\n * Gets the id of the security that was transferred. This is a required field according to the OFX\n * spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {SecurityId} the security id of the security that was bought\n */\nJournalSecurityTransaction.prototype.getSecurityId = function() {\n  return this.securityId;\n};\nChildAggregate.add({required: true, order: 20, owner: JournalSecurityTransaction, /*type: SecurityId,*/ fcn: \"getSecurityId\"});\n\n\n/**\n * Sets the id of the security that was transferred. This is a required field according to the OFX\n * spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {SecurityId} securityId the security id of the security that was bought\n */\nJournalSecurityTransaction.prototype.setSecurityId = function(securityId) {\n  this.securityId = securityId;\n};\n\n\n/**\n * Gets the sub account type the transer is from (e.g. CASH, MARGIN, SHORT, OTHER).\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {String} the sub account type\n */\nJournalSecurityTransaction.prototype.getFromSubAccountFund = function() {\n  return this.subAccountFrom;\n};\nElement.add({name: \"SUBACCTFROM\", order: 30, owner: JournalSecurityTransaction, /*type: String,*/ fcn: \"getFromSubAccountFund\"});\n\n\n/**\n * Sets the sub account type the transer is from (e.g. CASH, MARGIN, SHORT, OTHER).\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {String} subAccountFrom the sub account type\n */\nJournalSecurityTransaction.prototype.setFromSubAccountFund = function(subAccountFrom) {\n  this.subAccountFrom = subAccountFrom;\n};\n\n\n/**\n * Gets the result of getFromSubAccountFund as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types.\n */\nJournalSecurityTransaction.prototype.getFromSubAccountFundEnum = function() {\n  return SubAccountType.fromOfx(this.getFromSubAccountFund());\n};\n\n\n/**\n * Gets the sub account type that the transfer is to (e.g. CASH, MARGIN, SHORT, OTHER).\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {String} the sub account fund\n */\nJournalSecurityTransaction.prototype.getToSubAccountFund = function() {\n  return this.subAccountTo;\n};\nElement.add({name: \"SUBACCTTO\", order: 40, owner: JournalSecurityTransaction, /*type: String,*/ fcn: \"getToSubAccountFund\"});\n\n\n/**\n * sets the sub account type that the transfer is to (e.g. CASH, MARGIN, SHORT, OTHER).\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {String} subAccountTo the sub account fund\n */\nJournalSecurityTransaction.prototype.setToSubAccountFund = function(subAccountTo) {\n  this.subAccountTo = subAccountTo;\n};\n\n\n/**\n * Gets the result of getToSubAccountFund as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types.\n */\nJournalSecurityTransaction.prototype.getToSubAccountFundEnum = function() {\n  return SubAccountType.fromOfx(this.getToSubAccountFund());\n};\n\n\n/**\n * Gets the total for the transaction.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {Double} the total\n */\nJournalSecurityTransaction.prototype.getTotal = function() {\n  return this.total;\n};\nElement.add({name: \"TOTAL\", order: 50, owner: JournalSecurityTransaction, /*type: Double,*/ fcn: \"getTotal\"});\n\n\n/**\n * Sets the total for the transaction.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {Double} total the total\n */\nJournalSecurityTransaction.prototype.setTotal = function(total) {\n  this.total = total;\n};\n\n\n\n\nmodule.exports = JournalSecurityTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar SubAccountType = require(\"../accounts/SubAccountType\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar BaseOtherInvestmentTransaction = require(\"./BaseOtherInvestmentTransaction\");\nvar TransactionType = require(\"./TransactionType\");\n\n/**\n * Transaction for journal security transactions between sub-accounts within the same investment\n * account.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @class\n * @augments BaseOtherInvestmentTransaction\n */\nfunction MarginInterestTransaction () {\n  BaseOtherInvestmentTransaction.call(this, TransactionType.MARGIN_INTEREST);\n\n  /**\n   * @name MarginInterestTransaction#total\n   * @type Double\n   * @access private\n   */\n  this.total = null;\n\n  /**\n   * @name MarginInterestTransaction#subAccountFund\n   * @type String\n   * @access private\n   */\n  this.subAccountFund = null;\n\n  /**\n   * @name MarginInterestTransaction#currencyCode\n   * @type String\n   * @access private\n   */\n  this.currencyCode = null;\n\n  /**\n   * @name MarginInterestTransaction#originalCurrencyInfo\n   * @type OriginalCurrency\n   * @access private\n   */\n  this.originalCurrencyInfo = null;\n}\n\ninherit(MarginInterestTransaction, \"extends\", BaseOtherInvestmentTransaction);\n\n\nAggregate.add(\"MARGININTEREST\", MarginInterestTransaction);\n\n\n/**\n * Gets the sub account type the margin interest affects (e.g. CASH, MARGIN, SHORT, OTHER).\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {String} the sub account type\n */\nMarginInterestTransaction.prototype.getSubAccountFund = function() {\n  return this.subAccountFund;\n};\nElement.add({name: \"SUBACCTFUND\", order: 30, owner: MarginInterestTransaction, /*type: String,*/ fcn: \"getSubAccountFund\"});\n\n\n/**\n * Sets the sub account type the margin interest affects (e.g. CASH, MARGIN, SHORT, OTHER).\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {String} subAccountFund the sub account type\n */\nMarginInterestTransaction.prototype.setSubAccountFund = function(subAccountFund) {\n  this.subAccountFund = subAccountFund;\n};\n\n\n/**\n * Gets the result of getSubAccountFund as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types.\n */\nMarginInterestTransaction.prototype.getSubAccountFundEnum = function() {\n  var type = this.getSubAccountFund();\n  return type !== null ? SubAccountType.valueOf(type) : null;\n};\n\n\n/**\n * Gets the total for the transaction.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {Double} the total\n */\nMarginInterestTransaction.prototype.getTotal = function() {\n  return this.total;\n};\nElement.add({name: \"TOTAL\", order: 40, owner: MarginInterestTransaction, /*type: Double,*/ fcn: \"getTotal\"});\n\n\n/**\n * Sets the total for the transaction.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {Double} total the total\n */\nMarginInterestTransaction.prototype.setTotal = function(total) {\n  this.total = total;\n};\n\n\n/**\n * Gets the currency code for the transaction. Only one of currency code or original currency\n * info should be set according to the OFX spec. If neither are set, means the default currency.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the currency code for the transaction.\n */\nMarginInterestTransaction.prototype.getCurrencyCode = function() {\n  return this.currencyCode;\n};\nElement.add({name: \"CURRENCY\", order: 110, owner: MarginInterestTransaction, /*type: String,*/ fcn: \"getCurrencyCode\"});\n\n\n/**\n * Sets the currency code for the transaction. Only one of currency code or original currency\n * info should be set according to the OFX spec. If neither are set, means the default currency.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} currencyCode the currency code for the transaction.\n */\nMarginInterestTransaction.prototype.setCurrencyCode = function(currencyCode) {\n  this.currencyCode = currencyCode;\n  this.originalCurrencyInfo = null;\n};\n\n\n/**\n * Gets the original currency info for the transaction.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {OriginalCurrency} the original currency info for the transaction.\n */\nMarginInterestTransaction.prototype.getOriginalCurrencyInfo = function() {\n  return this.originalCurrencyInfo;\n};\nElement.add({name: \"ORIGCURRENCY\", order: 120, owner: MarginInterestTransaction, /*type: OriginalCurrency,*/ fcn: \"getOriginalCurrencyInfo\"});\n\n\n/**\n * Sets the original currency info for the transaction.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {OriginalCurrency} originalCurrency the original currency info for the transaction.\n */\nMarginInterestTransaction.prototype.SetOriginalCurrency = function(originalCurrency) {\n  this.originalCurrencyInfo = originalCurrency;\n  this.currencyCode = null;\n};\n\n\n\n\nmodule.exports = MarginInterestTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Type of purchase for options.\n * @see \"Section 13.9.2.4.2, OFX Spec\"\n *\n * @enum\n */\nvar OptionBuyType = {\n  BUY_TO_OPEN: 0,\n  BUY_TO_CLOSE: 1,\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"BUYTOOPEN\".equals(ofxVal)) {\n      return OptionBuyType.BUY_TO_OPEN;\n    } else if (\"BUYTOCLOSE\".equals(ofxVal)) {\n      return OptionBuyType.BUY_TO_CLOSE;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = OptionBuyType;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Type of sale for options.\n * @see \"Section 13.9.2.4.2, OFX Spec\"\n *\n * @enum\n */\nvar OptionSellType = {\n  SELL_TO_CLOSE: 0,\n  SELL_TO_OPEN: 1,\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"SELLTOOPEN\".equals(ofxVal)) {\n      return OptionSellType.SELL_TO_OPEN;\n    } else if (\"SELLTOCLOSE\".equals(ofxVal)) {\n      return OptionSellType.SELL_TO_CLOSE;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = OptionSellType;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\n\n/**\n * Original currency aggregate (\"ORIGCURRENCY\"). For investment transactions in other currencies,\n * the financial institution can report the transaction as converted into the default currency\n * and then include this child aggregate to report what the original currency was and what the\n * rate of conversion was.\n * @see \"Section 5.2, OFX Spec\"\n *\n * @class\n */\nfunction OriginalCurrency () {\n\n  /**\n   * @name OriginalCurrency#currencyRate\n   * @type double\n   * @access private\n   */\n  this.currencyRate = null;\n\n  /**\n   * @name OriginalCurrency#currencyCode\n   * @type String\n   * @access private\n   */\n  this.currencyCode = null;\n}\n\n\n\nAggregate.add(\"ORIGCURRENCY\", OriginalCurrency);\n\n\n/**\n * Gets the rate of currency conversion. This is the ratio of \"CURDEF\" (the default currency in\n * the transaction response) to \"CURSYM\" (the original currency code below).\n *\n * @return {double} the currency rate\n */\nOriginalCurrency.prototype.getCurrencyRate = function() {\n  return this.currencyRate;\n};\nElement.add({name: \"CURRATE\", required: true, order: 10, owner: OriginalCurrency, /*type: double,*/ fcn: \"getCurrencyRate\"});\n\n\n/**\n * Sets the rate of currency conversion. This is the ratio of \"CURDEF\" (the default currency in\n * the transaction response) to \"CURSYM\" (the original currency code below).\n *\n * @param {double} currencyRate the currency rate\n */\nOriginalCurrency.prototype.setCurrencyRate = function(currencyRate) {\n  this.currencyRate = currencyRate;\n};\n\n\n/**\n * Gets the ISO-4217 3-letter currency identifier of the original currency.\n * @see java.util.Currency#getCurrencyCode()\n *\n * @return {String} the currency code\n */\nOriginalCurrency.prototype.getCurrencyCode = function() {\n  return this.currencyCode;\n};\nElement.add({name: \"CURSYM\", required: true, order: 20, owner: OriginalCurrency, /*type: String,*/ fcn: \"getCurrencyCode\"});\n\n\n/**\n * Sets the ISO-4217 3-letter currency identifier of the original currency.\n * @see java.util.Currency#getCurrencyCode()\n *\n * @param {String} currencyCode the currency code\n */\nOriginalCurrency.prototype.setCurrencyCode = function(currencyCode) {\n  this.currencyCode = currencyCode;\n};\n\n\n\n\nmodule.exports = OriginalCurrency;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar SubAccountType = require(\"../accounts/SubAccountType\");\nvar Inv401KSource = require(\"../positions/Inv401KSource\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar BaseOtherInvestmentTransaction = require(\"./BaseOtherInvestmentTransaction\");\nvar TransactionType = require(\"./TransactionType\");\nvar TransactionWithSecurity = require(\"./TransactionWithSecurity\");\nvar IncomeType = require(\"./IncomeType\");\n\n/**\n * Transaction for reinvestment transactions.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @class\n * @augments BaseOtherInvestmentTransaction\n * @augments TransactionWithSecurity\n */\nfunction ReinvestIncomeTransaction () {\n  BaseOtherInvestmentTransaction.call(this, TransactionType.REINVEST_INCOME);\n\n  /**\n   * @name ReinvestIncomeTransaction#securityId\n   * @type SecurityId\n   * @access private\n   */\n  this.securityId = null;\n\n  /**\n   * @name ReinvestIncomeTransaction#incomeType\n   * @type String\n   * @access private\n   */\n  this.incomeType = null;\n\n  /**\n   * @name ReinvestIncomeTransaction#total\n   * @type Double\n   * @access private\n   */\n  this.total = null;\n\n  /**\n   * @name ReinvestIncomeTransaction#subAccountSecurity\n   * @type String\n   * @access private\n   */\n  this.subAccountSecurity = null;\n\n  /**\n   * @name ReinvestIncomeTransaction#units\n   * @type Double\n   * @access private\n   */\n  this.units = null;\n\n  /**\n   * @name ReinvestIncomeTransaction#unitPrice\n   * @type Double\n   * @access private\n   */\n  this.unitPrice = null;\n\n  /**\n   * @name ReinvestIncomeTransaction#commission\n   * @type Double\n   * @access private\n   */\n  this.commission = null;\n\n  /**\n   * @name ReinvestIncomeTransaction#taxes\n   * @type Double\n   * @access private\n   */\n  this.taxes = null;\n\n  /**\n   * @name ReinvestIncomeTransaction#fees\n   * @type Double\n   * @access private\n   */\n  this.fees = null;\n\n  /**\n   * @name ReinvestIncomeTransaction#load\n   * @type Double\n   * @access private\n   */\n  this.load = null;\n\n  /**\n   * @name ReinvestIncomeTransaction#taxExempt\n   * @type Boolean\n   * @access private\n   */\n  this.taxExempt = null;\n\n  /**\n   * @name ReinvestIncomeTransaction#currencyCode\n   * @type String\n   * @access private\n   */\n  this.currencyCode = null;\n\n  /**\n   * @name ReinvestIncomeTransaction#originalCurrencyInfo\n   * @type OriginalCurrency\n   * @access private\n   */\n  this.originalCurrencyInfo = null;\n\n  /**\n   * @name ReinvestIncomeTransaction#inv401kSource\n   * @type String\n   * @access private\n   */\n  this.inv401kSource = null;\n}\n\ninherit(ReinvestIncomeTransaction, \"extends\", BaseOtherInvestmentTransaction);\ninherit(ReinvestIncomeTransaction, \"implements\", TransactionWithSecurity);\n\n\nAggregate.add(\"REINVEST\", ReinvestIncomeTransaction);\n\n\n/**\n * Gets the id of the security that was reinvested in. This is a required field according to the\n * OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {SecurityId} the security id of the security that was reinvested in\n */\nReinvestIncomeTransaction.prototype.getSecurityId = function() {\n  return this.securityId;\n};\nChildAggregate.add({required: true, order: 20, owner: ReinvestIncomeTransaction, /*type: SecurityId,*/ fcn: \"getSecurityId\"});\n\n\n/**\n * Sets the id of the security that was reinvested in. This is a required field according to the\n * OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {SecurityId} securityId the security id of the security that was reinvested in\n */\nReinvestIncomeTransaction.prototype.setSecurityId = function(securityId) {\n  this.securityId = securityId;\n};\n\n\n/**\n * Gets the type of income. One of \"CGLONG\" (long term capital gains), \"CGSHORT\" (short term\n * capital gains), \"DIV\" (dividend), INTEREST, or MISC. This is a required field according to the\n * OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\" This is a required field according to the OFX spec.\n *\n * @return {String} the type of income\n */\nReinvestIncomeTransaction.prototype.getIncomeType = function() {\n  return this.incomeType;\n};\nElement.add({name: \"INCOMETYPE\", required: true, order: 30, owner: ReinvestIncomeTransaction, /*type: String,*/ fcn: \"getIncomeType\"});\n\n\n/**\n * Sets the type of income. One of \"CGLONG\" (long term capital gains), \"CGSHORT\" (short term\n * capital gains), \"DIV\" (dividend), INTEREST, or MISC. This is a required field according to the\n * OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\" This is a required field according to the OFX spec.\n *\n * @param {String} incomeType the type of income\n */\nReinvestIncomeTransaction.prototype.setIncomeType = function(incomeType) {\n  this.incomeType = incomeType;\n};\n\n\n/**\n * Gets the type of income as one of the well-known types.\n *\n * @return {IncomeType} the income type or null if it's not one of the well-known types\n */\nReinvestIncomeTransaction.prototype.getIncomeTypeEnum = function() {\n  return IncomeType.fromOfx(this.getIncomeType());\n};\n\n\n/**\n * Gets the total income received. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {Double} the total\n */\nReinvestIncomeTransaction.prototype.getTotal = function() {\n  return this.total;\n};\nElement.add({name: \"TOTAL\", required: true, order: 40, owner: ReinvestIncomeTransaction, /*type: Double,*/ fcn: \"getTotal\"});\n\n\n/**\n * Sets the total income received. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {Double} total the total\n */\nReinvestIncomeTransaction.prototype.setTotal = function(total) {\n  this.total = total;\n};\n\n\n/**\n * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER). This is a\n * required field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the sub account type\n */\nReinvestIncomeTransaction.prototype.getSubAccountSecurity = function() {\n  return this.subAccountSecurity;\n};\nElement.add({name: \"SUBACCTSEC\", order: 50, owner: ReinvestIncomeTransaction, /*type: String,*/ fcn: \"getSubAccountSecurity\"});\n\n\n/**\n * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER). This is a\n * required field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} subAccountSecurity the sub account type\n */\nReinvestIncomeTransaction.prototype.setSubAccountSecurity = function(subAccountSecurity) {\n  this.subAccountSecurity = subAccountSecurity;\n};\n\n\n/**\n * Gets the result of getSubAccountSecurity as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types\n */\nReinvestIncomeTransaction.prototype.getSubAccountSecurityEnum = function() {\n  return SubAccountType.fromOfx(this.getSubAccountSecurity());\n};\n\n\n/**\n * Gets the number of units of the security that was reinvested in. This is a required field\n * according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the number of units purchased\n */\nReinvestIncomeTransaction.prototype.getUnits = function() {\n  return this.units;\n};\nElement.add({name: \"UNITS\", required: true, order: 60, owner: ReinvestIncomeTransaction, /*type: Double,*/ fcn: \"getUnits\"});\n\n\n/**\n * Sets the number of units of the security that was reinvested in. This is a required field\n * according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} units the number of units purchased\n */\nReinvestIncomeTransaction.prototype.setUnits = function(units) {\n  this.units = units;\n};\n\n\n/**\n * Gets the price per commonly-quoted unit. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the per unit price\n */\nReinvestIncomeTransaction.prototype.getUnitPrice = function() {\n  return this.unitPrice;\n};\nElement.add({name: \"UNITPRICE\", required: true, order: 70, owner: ReinvestIncomeTransaction, /*type: Double,*/ fcn: \"getUnitPrice\"});\n\n\n/**\n * Sets the price per commonly-quoted unit. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} unitPrice the per unit price\n */\nReinvestIncomeTransaction.prototype.setUnitPrice = function(unitPrice) {\n  this.unitPrice = unitPrice;\n};\n\n\n/**\n * Gets the transaction commission for the reinvestment. This is an optional field according to\n * the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the transaction commision\n */\nReinvestIncomeTransaction.prototype.getCommission = function() {\n  return this.commission;\n};\nElement.add({name: \"COMMISSION\", order: 80, owner: ReinvestIncomeTransaction, /*type: Double,*/ fcn: \"getCommission\"});\n\n\n/**\n * Sets the transaction commission for the reinvestment. This is an optional field according to\n * the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} commission the transaction commision\n */\nReinvestIncomeTransaction.prototype.setCommission = function(commission) {\n  this.commission = commission;\n};\n\n\n/**\n * Gets the taxes for the reinvestment. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the transaction taxes\n */\nReinvestIncomeTransaction.prototype.getTaxes = function() {\n  return this.taxes;\n};\nElement.add({name: \"TAXES\", order: 90, owner: ReinvestIncomeTransaction, /*type: Double,*/ fcn: \"getTaxes\"});\n\n\n/**\n * Sets the taxes for the reinvestment. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} taxes the transaction taxes\n */\nReinvestIncomeTransaction.prototype.setTaxes = function(taxes) {\n  this.taxes = taxes;\n};\n\n\n/**\n * Gets the fees for the reinvestment. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the transaction fees\n */\nReinvestIncomeTransaction.prototype.getFees = function() {\n  return this.fees;\n};\nElement.add({name: \"FEES\", order: 100, owner: ReinvestIncomeTransaction, /*type: Double,*/ fcn: \"getFees\"});\n\n\n/**\n * Sets the fees for the reinvestment. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} fees the transaction fees\n */\nReinvestIncomeTransaction.prototype.setFees = function(fees) {\n  this.fees = fees;\n};\n\n\n/**\n * Gets the load for the reinvestment. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the load\n */\nReinvestIncomeTransaction.prototype.getLoad = function() {\n  return this.load;\n};\nElement.add({name: \"LOAD\", order: 110, owner: ReinvestIncomeTransaction, /*type: Double,*/ fcn: \"getLoad\"});\n\n\n/**\n * Sets the load for the reinvestment. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} load the load\n */\nReinvestIncomeTransaction.prototype.setLoad = function(load) {\n  this.load = load;\n};\n\n\n/**\n * Gets whether the income was tax exempt. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Boolean} whether the transaction was tax exempt\n */\nReinvestIncomeTransaction.prototype.getTaxExempt = function() {\n  return this.taxExempt;\n};\nElement.add({name: \"TAXEXEMPT\", order: 120, owner: ReinvestIncomeTransaction, /*type: Boolean,*/ fcn: \"getTaxExempt\"});\n\n\n/**\n * Sets whether the income was tax exempt. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Boolean} taxExempt whether the transaction was tax exempt\n */\nReinvestIncomeTransaction.prototype.setTaxExempt = function(taxExempt) {\n  this.taxExempt = taxExempt;\n};\n\n\n/**\n * Gets the currency code for the transaction. Only one of currency code or original currency\n * info should be set according to the OFX spec. If neither are set, means the default currency.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the currency code for the transaction\n */\nReinvestIncomeTransaction.prototype.getCurrencyCode = function() {\n  return this.currencyCode;\n};\nElement.add({name: \"CURRENCY\", order: 130, owner: ReinvestIncomeTransaction, /*type: String,*/ fcn: \"getCurrencyCode\"});\n\n\n/**\n * Sets the currency code for the transaction. Only one of currency code or original currency\n * info should be set according to the OFX spec. If neither are set, means the default currency.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} currencyCode the currency code for the transaction\n */\nReinvestIncomeTransaction.prototype.setCurrencyCode = function(currencyCode) {\n  this.currencyCode = currencyCode;\n  this.originalCurrencyInfo = null;\n};\n\n\n/**\n * Gets the original currency info for the transaction.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {OriginalCurrency} the original currency info for the transaction.\n */\nReinvestIncomeTransaction.prototype.getOriginalCurrencyInfo = function() {\n  return this.originalCurrencyInfo;\n};\nElement.add({name: \"ORIGCURRENCY\", order: 140, owner: ReinvestIncomeTransaction, /*type: OriginalCurrency,*/ fcn: \"getOriginalCurrencyInfo\"});\n\n\n/**\n * Sets the original currency info for the transaction.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {OriginalCurrency} originalCurrencyInfo the original currency info for the transaction.\n */\nReinvestIncomeTransaction.prototype.setOriginalCurrencyInfo = function(originalCurrencyInfo) {\n  this.originalCurrencyInfo = originalCurrencyInfo;\n  this.currencyCode = null;\n};\n\n\n/**\n * Gets the 401K source for the reinvestment. Should be one of \"PRETAX\", \"AFTERTAX\", \"MATCH\",\n * \"PROFITSHARING\", \"ROLLOVER\", \"OTHERVEST\", \"OTHERNONVEST\".  This is an optional field\n * according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the state withholding\n */\nReinvestIncomeTransaction.prototype.get401kSource = function() {\n  return this.inv401kSource;\n};\nElement.add({name: \"INV401KSOURCE\", order: 150, owner: ReinvestIncomeTransaction, /*type: String,*/ fcn: \"get401kSource\"});\n\n\n/**\n * Sets the 401K source for the reinvestment. Should be one of \"PRETAX\", \"AFTERTAX\", \"MATCH\",\n * \"PROFITSHARING\", \"ROLLOVER\", \"OTHERVEST\", \"OTHERNONVEST\".  This is an optional field\n * according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} inv401kSource the state withholding\n */\nReinvestIncomeTransaction.prototype.set401kSource = function(inv401kSource) {\n  this.inv401kSource = inv401kSource;\n};\n\n\n/**\n * Gets the 401(k) source as one of the well-known types.\n *\n * @return {Inv401KSource} the type of close or null if it's not well known\n */\nReinvestIncomeTransaction.prototype.get401kSourceEnum = function() {\n  return Inv401KSource.fromOfx(this.get401kSource());\n};\n\n\n\n\nmodule.exports = ReinvestIncomeTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\n/**\n * Related option transaction type.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @enum\n */\nvar RelatedOptionType = {\n  SPREAD: 0,\n  STRADDLE: 1,\n  NONE: 2,\n  OTHER: 3,\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"SPREAD\".equals(ofxVal)) {\n      return RelatedOptionType.SPREAD;\n    } else if (\"STRADDLE\".equals(ofxVal)) {\n      return RelatedOptionType.STRADDLE;\n    } else if (\"NONE\".equals(ofxVal)) {\n      return RelatedOptionType.NONE;\n    } else if (\"OTHER\".equals(ofxVal)) {\n      return RelatedOptionType.OTHER;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = RelatedOptionType;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar SubAccountType = require(\"../accounts/SubAccountType\");\nvar Inv401KSource = require(\"../positions/Inv401KSource\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar BaseOtherInvestmentTransaction = require(\"./BaseOtherInvestmentTransaction\");\nvar TransactionWithSecurity = require(\"./TransactionWithSecurity\");\nvar TransactionType = require(\"./TransactionType\");\n\n/**\n * Transaction for return of capital transactions.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @class\n * @augments BaseOtherInvestmentTransaction\n * @augments TransactionWithSecurity\n */\nfunction ReturnOfCapitalTransaction () {\n  BaseOtherInvestmentTransaction.call(this, TransactionType.RETURN_OF_CAPITAL);\n\n  /**\n   * @name ReturnOfCapitalTransaction#securityId\n   * @type SecurityId\n   * @access private\n   */\n  this.securityId = null;\n\n  /**\n   * @name ReturnOfCapitalTransaction#total\n   * @type Double\n   * @access private\n   */\n  this.total = null;\n\n  /**\n   * @name ReturnOfCapitalTransaction#subAccountSecurity\n   * @type String\n   * @access private\n   */\n  this.subAccountSecurity = null;\n\n  /**\n   * @name ReturnOfCapitalTransaction#subAccountFund\n   * @type String\n   * @access private\n   */\n  this.subAccountFund = null;\n\n  /**\n   * @name ReturnOfCapitalTransaction#currencyCode\n   * @type String\n   * @access private\n   */\n  this.currencyCode = null;\n\n  /**\n   * @name ReturnOfCapitalTransaction#originalCurrencyInfo\n   * @type OriginalCurrency\n   * @access private\n   */\n  this.originalCurrencyInfo = null;\n\n  /**\n   * @name ReturnOfCapitalTransaction#inv401kSource\n   * @type String\n   * @access private\n   */\n  this.inv401kSource = null;\n}\n\ninherit(ReturnOfCapitalTransaction, \"extends\", BaseOtherInvestmentTransaction);\ninherit(ReturnOfCapitalTransaction, \"implements\", TransactionWithSecurity);\n\n\nAggregate.add(\"RETOFCAP\", ReturnOfCapitalTransaction);\n\n\n/**\n * Gets the id of the security that capital was returned from. This is a required field according\n * to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {SecurityId} the security id of the security that capital was returned from\n */\nReturnOfCapitalTransaction.prototype.getSecurityId = function() {\n  return this.securityId;\n};\nChildAggregate.add({required: true, order: 20, owner: ReturnOfCapitalTransaction, /*type: SecurityId,*/ fcn: \"getSecurityId\"});\n\n\n/**\n * Sets the id of the security that capital was returned from. This is a required field according\n * to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {SecurityId} securityId the security id of the security that capital was returned from\n */\nReturnOfCapitalTransaction.prototype.setSecurityId = function(securityId) {\n  this.securityId = securityId;\n};\n\n\n/**\n * Gets the total amount of capital returned. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {Double} the total\n */\nReturnOfCapitalTransaction.prototype.getTotal = function() {\n  return this.total;\n};\nElement.add({name: \"TOTAL\", required: true, order: 40, owner: ReturnOfCapitalTransaction, /*type: Double,*/ fcn: \"getTotal\"});\n\n\n/**\n * Sets the total amount of capital returned. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {Double} total the total\n */\nReturnOfCapitalTransaction.prototype.setTotal = function(total) {\n  this.total = total;\n};\n\n\n/**\n * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER). This is a\n * required field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the sub account type\n */\nReturnOfCapitalTransaction.prototype.getSubAccountSecurity = function() {\n  return this.subAccountSecurity;\n};\nElement.add({name: \"SUBACCTSEC\", order: 50, owner: ReturnOfCapitalTransaction, /*type: String,*/ fcn: \"getSubAccountSecurity\"});\n\n\n/**\n * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER). This is a\n * required field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} subAccountSecurity the sub account type\n */\nReturnOfCapitalTransaction.prototype.setSubAccountSecurity = function(subAccountSecurity) {\n  this.subAccountSecurity = subAccountSecurity;\n};\n\n\n/**\n * Gets the result of getSubAccountSecurity as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types.\n */\nReturnOfCapitalTransaction.prototype.getSubAccountSecurityEnum = function() {\n  return SubAccountType.fromOfx(this.getSubAccountSecurity());\n};\n\n\n/**\n * Gets the sub account type that the transaction affects.\n * (e.g. CASH, MARGIN, SHORT, OTHER). This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the sub account fund\n */\nReturnOfCapitalTransaction.prototype.getSubAccountFund = function() {\n  return this.subAccountFund;\n};\nElement.add({name: \"SUBACCTFUND\", order: 140, owner: ReturnOfCapitalTransaction, /*type: String,*/ fcn: \"getSubAccountFund\"});\n\n\n/**\n * Sets the sub account type that the transaction affects.\n * (e.g. CASH, MARGIN, SHORT, OTHER). This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} subAccountFund the sub account fund\n */\nReturnOfCapitalTransaction.prototype.setSubAccountFund = function(subAccountFund) {\n  this.subAccountFund = subAccountFund;\n};\n\n\n/**\n * Gets the result of getSubAccountFund as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types\n */\nReturnOfCapitalTransaction.prototype.getSubAccountFundEnum = function() {\n  return SubAccountType.fromOfx(this.getSubAccountFund());\n};\n\n\n/**\n * Gets the currency code for the transaction. Only one of currency code or original currency\n * info should be set according to the OFX spec. If neither are set, means the default currency.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the currency code for the transaction\n */\nReturnOfCapitalTransaction.prototype.getCurrencyCode = function() {\n  return this.currencyCode;\n};\nElement.add({name: \"CURRENCY\", order: 110, owner: ReturnOfCapitalTransaction, /*type: String,*/ fcn: \"getCurrencyCode\"});\n\n\n/**\n * Sets the currency code for the transaction. Only one of currency code or original currency\n * info should be set according to the OFX spec. If neither are set, means the default currency.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} currencyCode the currency code for the transaction\n */\nReturnOfCapitalTransaction.prototype.setCurrencyCode = function(currencyCode) {\n  this.currencyCode = currencyCode;\n  this.originalCurrencyInfo = null;\n};\n\n\n/**\n * Gets the original currency info for the transaction.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {OriginalCurrency} the currency code for the transaction.\n */\nReturnOfCapitalTransaction.prototype.getOriginalCurrencyInfo = function() {\n  return this.originalCurrencyInfo;\n};\nElement.add({name: \"ORIGCURRENCY\", order: 120, owner: ReturnOfCapitalTransaction, /*type: OriginalCurrency,*/ fcn: \"getOriginalCurrencyInfo\"});\n\n\n/**\n * Sets the original currency info for the transaction.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {OriginalCurrency} originalCurrencyInfo the currency code for the transaction.\n */\nReturnOfCapitalTransaction.prototype.setOriginalCurrencyInfo = function(originalCurrencyInfo) {\n  this.originalCurrencyInfo = originalCurrencyInfo;\n  this.currencyCode = null;\n};\n\n\n/**\n * Gets the 401K source for the reinvestment. Should be one of \"PRETAX\", \"AFTERTAX\", \"MATCH\",\n * \"PROFITSHARING\", \"ROLLOVER\", \"OTHERVEST\", \"OTHERNONVEST\".  This is an optional field\n * according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the state withholding\n */\nReturnOfCapitalTransaction.prototype.get401kSource = function() {\n  return this.inv401kSource;\n};\nElement.add({name: \"INV401KSOURCE\", order: 180, owner: ReturnOfCapitalTransaction, /*type: String,*/ fcn: \"get401kSource\"});\n\n\n/**\n * Sets the 401K source for the reinvestment. Should be one of \"PRETAX\", \"AFTERTAX\", \"MATCH\",\n * \"PROFITSHARING\", \"ROLLOVER\", \"OTHERVEST\", \"OTHERNONVEST\".  This is an optional field\n * according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} inv401kSource the state withholding\n */\nReturnOfCapitalTransaction.prototype.set401kSource = function(inv401kSource) {\n  this.inv401kSource = inv401kSource;\n};\n\n\n/**\n * Gets the 401(k) source as one of the well-known types.\n *\n * @return {Inv401KSource} the type of close or null if it's not well known.\n */\nReturnOfCapitalTransaction.prototype.get401kSourceEnum = function() {\n  return Inv401KSource.fromOfx(this.get401kSource());\n};\n\n\n\n\nmodule.exports = ReturnOfCapitalTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Reason debt was sold.\n * @see \"Section 13.9.2.4.2, OFX Spec\"\n *\n * @enum\n */\nvar SellDebtReason = {\n  CALL: 0,\n  SELL: 1,\n  MATURITY: 2,\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"CALL\".equals(ofxVal)) {\n      return SellDebtReason.CALL;\n    } else if (\"SELL\".equals(ofxVal)) {\n      return SellDebtReason.SELL;\n    } else if (\"MATURITY\".equals(ofxVal)) {\n      return SellDebtReason.MATURITY;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = SellDebtReason;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar BaseSellInvestmentTransaction = require(\"./BaseSellInvestmentTransaction\");\nvar TransactionType = require(\"./TransactionType\");\nvar SellDebtReason = require(\"./SellDebtReason\");\n\n/**\n * Transaction for selling debt (i.e. bonds, CDs, etc.,).\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @class\n * @augments BaseSellInvestmentTransaction\n */\nfunction SellDebtTransaction () {\n  BaseSellInvestmentTransaction.call(this, TransactionType.SELL_DEBT);\n\n  /**\n   * @name SellDebtTransaction#sellReason\n   * @type String\n   * @access private\n   */\n  this.sellReason = null;\n\n  /**\n   * @name SellDebtTransaction#accruedInterest\n   * @type Double\n   * @access private\n   */\n  this.accruedInterest = null;\n}\n\ninherit(SellDebtTransaction, \"extends\", BaseSellInvestmentTransaction);\n\n\nAggregate.add(\"SELLDEBT\", SellDebtTransaction);\n\n\n/**\n * Gets the reason for the sale. One of \"CALL\" (the debt was called), \"SELL\" (the debt was sold),\n * \"MATURITY\" (the debt reached maturity).\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {String} The reason for the sale\n */\nSellDebtTransaction.prototype.getSellReason = function() {\n  return this.sellReason;\n};\nElement.add({name: \"SELLREASON\", order: 30, owner: SellDebtTransaction, /*type: String,*/ fcn: \"getSellReason\"});\n\n\n/**\n * Sets the reason for the sale. One of \"CALL\" (the debt was called), \"SELL\" (the debt was sold),\n * \"MATURITY\" (the debt reached maturity).\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {String} sellReason The reason for the sale\n */\nSellDebtTransaction.prototype.setSellReason = function(sellReason) {\n  this.sellReason = sellReason;\n};\n\n\n/**\n * Gets the sell reason as one of the well-known types.\n *\n * @return {SellDebtReason} the sell reason or null if it's not well known\n */\nSellDebtTransaction.prototype.getSellReasonEnum = function() {\n  return SellDebtReason.fromOfx(this.getSellReason());\n};\n\n\n/**\n * Gets the amount of accrued interest on the debt. This is an optional field according to the\n * OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {Double} the amount of accrued interest\n */\nSellDebtTransaction.prototype.getAccruedInterest = function() {\n  return this.accruedInterest;\n};\nElement.add({name: \"ACCRDINT\", order: 40, owner: SellDebtTransaction, /*type: Double,*/ fcn: \"getAccruedInterest\"});\n\n\n/**\n * Sets the amount of accrued interest on the debt. This is an optional field according to the\n * OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {Double} accruedInterest the amount of accrued interest\n */\nSellDebtTransaction.prototype.setAccruedInterest = function(accruedInterest) {\n  this.accruedInterest = accruedInterest;\n};\n\n\n\n\nmodule.exports = SellDebtTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar SubAccountType = require(\"../accounts/SubAccountType\");\nvar Inv401KSource = require(\"../positions/Inv401KSource\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\n\n/**\n * Sell investment transaction aggregate (\"INVSELL\").\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @class\n */\nfunction SellInvestmentTransaction () {\n\n  /**\n   * @name SellInvestmentTransaction#investmentTransaction\n   * @type InvestmentTransaction\n   * @access private\n   */\n  this.investmentTransaction = null;\n\n  /**\n   * @name SellInvestmentTransaction#securityId\n   * @type SecurityId\n   * @access private\n   */\n  this.securityId = null;\n\n  /**\n   * @name SellInvestmentTransaction#units\n   * @type Double\n   * @access private\n   */\n  this.units = null;\n\n  /**\n   * @name SellInvestmentTransaction#unitPrice\n   * @type Double\n   * @access private\n   */\n  this.unitPrice = null;\n\n  /**\n   * @name SellInvestmentTransaction#markdown\n   * @type Double\n   * @access private\n   */\n  this.markdown = null;\n\n  /**\n   * @name SellInvestmentTransaction#commission\n   * @type Double\n   * @access private\n   */\n  this.commission = null;\n\n  /**\n   * @name SellInvestmentTransaction#taxes\n   * @type Double\n   * @access private\n   */\n  this.taxes = null;\n\n  /**\n   * @name SellInvestmentTransaction#fees\n   * @type Double\n   * @access private\n   */\n  this.fees = null;\n\n  /**\n   * @name SellInvestmentTransaction#load\n   * @type Double\n   * @access private\n   */\n  this.load = null;\n\n  /**\n   * @name SellInvestmentTransaction#withholding\n   * @type Double\n   * @access private\n   */\n  this.withholding = null;\n\n  /**\n   * @name SellInvestmentTransaction#taxExempt\n   * @type Boolean\n   * @access private\n   */\n  this.taxExempt = null;\n\n  /**\n   * @name SellInvestmentTransaction#total\n   * @type Double\n   * @access private\n   */\n  this.total = null;\n\n  /**\n   * @name SellInvestmentTransaction#gain\n   * @type Double\n   * @access private\n   */\n  this.gain = null;\n\n  /**\n   * @name SellInvestmentTransaction#currencyCode\n   * @type String\n   * @access private\n   */\n  this.currencyCode = null;\n\n  /**\n   * @name SellInvestmentTransaction#originalCurrencyInfo\n   * @type OriginalCurrency\n   * @access private\n   */\n  this.originalCurrencyInfo = null;\n\n  /**\n   * @name SellInvestmentTransaction#subAccountSecurity\n   * @type String\n   * @access private\n   */\n  this.subAccountSecurity = null;\n\n  /**\n   * @name SellInvestmentTransaction#subAccountFund\n   * @type String\n   * @access private\n   */\n  this.subAccountFund = null;\n\n  /**\n   * @name SellInvestmentTransaction#loanId\n   * @type String\n   * @access private\n   */\n  this.loanId = null;\n\n  /**\n   * @name SellInvestmentTransaction#stateWithholding\n   * @type Double\n   * @access private\n   */\n  this.stateWithholding = null;\n\n  /**\n   * @name SellInvestmentTransaction#penalty\n   * @type Double\n   * @access private\n   */\n  this.penalty = null;\n\n  /**\n   * @name SellInvestmentTransaction#inv401kSource\n   * @type String\n   * @access private\n   */\n  this.inv401kSource = null;\n}\n\n\n\nAggregate.add(\"INVSELL\", SellInvestmentTransaction);\n\n\n/**\n * Gets the investment transaction child aggregate.\n *\n * @return {InvestmentTransaction} the investment transaction child aggregate\n */\nSellInvestmentTransaction.prototype.getInvestmentTransaction = function() {\n  return this.investmentTransaction;\n};\nChildAggregate.add({order: 10, owner: SellInvestmentTransaction, /*type: InvestmentTransaction,*/ fcn: \"getInvestmentTransaction\"});\n\n\n/**\n * Sets the investment transaction child aggregate.\n *\n * @param {InvestmentTransaction} investmentTransaction the investment transaction child aggregate\n */\nSellInvestmentTransaction.prototype.setInvestmentTransaction = function(investmentTransaction) {\n  this.investmentTransaction = investmentTransaction;\n};\n\n\n/**\n * Gets the id of the security that was sold. This is a required field according to the OFX\n * spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {SecurityId} the security id of the security that was sold\n */\nSellInvestmentTransaction.prototype.getSecurityId = function() {\n  return this.securityId;\n};\nChildAggregate.add({required: true, order: 20, owner: SellInvestmentTransaction, /*type: SecurityId,*/ fcn: \"getSecurityId\"});\n\n\n/**\n * Sets the id of the security that was sold. This is a required field according to the OFX\n * spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {SecurityId} securityId the security id of the security that was sold\n */\nSellInvestmentTransaction.prototype.setSecurityId = function(securityId) {\n  this.securityId = securityId;\n};\n\n\n/**\n * Gets the number of units of the security that was sold. For security-based actions other\n * than stock splits, this is the quantity sold. For stocks, mutual funds, and others, this\n * is the number of shares. For bonds, this is the face value. For options, this is the number of\n * contacts. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the number of units sold\n */\nSellInvestmentTransaction.prototype.getUnits = function() {\n  return this.units;\n};\nElement.add({name: \"UNITS\", required: true, order: 30, owner: SellInvestmentTransaction, /*type: Double,*/ fcn: \"getUnits\"});\n\n\n/**\n * Sets the number of units of the security that was sold. For security-based actions other\n * than stock splits, this is the quantity sold. For stocks, mutual funds, and others, this\n * is the number of shares. For bonds, this is the face value. For options, this is the number of\n * contacts. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} units the number of units sold\n */\nSellInvestmentTransaction.prototype.setUnits = function(units) {\n  this.units = units;\n};\n\n\n/**\n * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the\n * share price. For bonds, this is the percentage of par. For options, this is the per share (not\n * per contact) price. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the per unit price\n */\nSellInvestmentTransaction.prototype.getUnitPrice = function() {\n  return this.unitPrice;\n};\nElement.add({name: \"UNITPRICE\", required: true, order: 40, owner: SellInvestmentTransaction, /*type: Double,*/ fcn: \"getUnitPrice\"});\n\n\n/**\n * Sets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the\n * share price. For bonds, this is the percentage of par. For options, this is the per share (not\n * per contact) price. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} unitPrice the per unit price\n */\nSellInvestmentTransaction.prototype.setUnitPrice = function(unitPrice) {\n  this.unitPrice = unitPrice;\n};\n\n\n/**\n * Gets the portion of the unit price that is attributed to the dealer markdown. This is an\n * optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the per unit markedown price\n */\nSellInvestmentTransaction.prototype.getMarkdown = function() {\n  return this.markdown;\n};\nElement.add({name: \"MARKDOWN\", order: 50, owner: SellInvestmentTransaction, /*type: Double,*/ fcn: \"getMarkdown\"});\n\n\n/**\n * Sets the portion of the unit price that is attributed to the dealer markdown. This is an\n * optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} markdown the per unit markedown price\n */\nSellInvestmentTransaction.prototype.setMarkdown = function(markdown) {\n  this.markdown = markdown;\n};\n\n\n/**\n * Gets the transaction commission for the sale. This is an optional field according to the\n * OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the transaction commision\n */\nSellInvestmentTransaction.prototype.getCommission = function() {\n  return this.commission;\n};\nElement.add({name: \"COMMISSION\", order: 60, owner: SellInvestmentTransaction, /*type: Double,*/ fcn: \"getCommission\"});\n\n\n/**\n * Sets the transaction commission for the sale. This is an optional field according to the\n * OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} commission the transaction commision\n */\nSellInvestmentTransaction.prototype.setCommission = function(commission) {\n  this.commission = commission;\n};\n\n\n/**\n * Gets the taxes for the sale. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the transaction taxes\n */\nSellInvestmentTransaction.prototype.getTaxes = function() {\n  return this.taxes;\n};\nElement.add({name: \"TAXES\", order: 70, owner: SellInvestmentTransaction, /*type: Double,*/ fcn: \"getTaxes\"});\n\n\n/**\n * Sets the taxes for the sale. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} taxes the transaction taxes\n */\nSellInvestmentTransaction.prototype.setTaxes = function(taxes) {\n  this.taxes = taxes;\n};\n\n\n/**\n * Gets the fees for the sale. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the transaction fees\n */\nSellInvestmentTransaction.prototype.getFees = function() {\n  return this.fees;\n};\nElement.add({name: \"FEES\", order: 80, owner: SellInvestmentTransaction, /*type: Double,*/ fcn: \"getFees\"});\n\n\n/**\n * Sets the fees for the sale. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} fees the transaction fees\n */\nSellInvestmentTransaction.prototype.setFees = function(fees) {\n  this.fees = fees;\n};\n\n\n/**\n * Gets the load for the sale. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the load\n */\nSellInvestmentTransaction.prototype.getLoad = function() {\n  return this.load;\n};\nElement.add({name: \"LOAD\", order: 90, owner: SellInvestmentTransaction, /*type: Double,*/ fcn: \"getLoad\"});\n\n\n/**\n * Sets the load for the sale. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} load the load\n */\nSellInvestmentTransaction.prototype.setLoad = function(load) {\n  this.load = load;\n};\n\n\n/**\n * Gets the withholding for the sale. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the withholding\n */\nSellInvestmentTransaction.prototype.getWithholding = function() {\n  return this.withholding;\n};\nElement.add({name: \"WITHHOLDING\", order: 93, owner: SellInvestmentTransaction, /*type: Double,*/ fcn: \"getWithholding\"});\n\n\n/**\n * Sets the withholding for the sale. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} withholding the withholding\n */\nSellInvestmentTransaction.prototype.setWithholding = function(withholding) {\n  this.withholding = withholding;\n};\n\n\n/**\n * Gets whether the sale was tax exempt. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Boolean} whether the transaction was tax exempt\n */\nSellInvestmentTransaction.prototype.getTaxExempt = function() {\n  return this.taxExempt;\n};\nElement.add({name: \"TAXEXEMPT\", order: 97, owner: SellInvestmentTransaction, /*type: Boolean,*/ fcn: \"getTaxExempt\"});\n\n\n/**\n * Sets whether the sale was tax exempt. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Boolean} taxExempt whether the transaction was tax exempt\n */\nSellInvestmentTransaction.prototype.setTaxExempt = function(taxExempt) {\n  this.taxExempt = taxExempt;\n};\n\n\n/**\n * Gets the total for the sale. Should be equal to\n * (units * (unitPrice + markdown)) + (commision + fees + load + taxes + penalty + withholding +\n * statewithholding) according to the OFX spec. This is a required field according to the OFX\n * spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the total\n */\nSellInvestmentTransaction.prototype.getTotal = function() {\n  return this.total;\n};\nElement.add({name: \"TOTAL\", required: true, order: 100, owner: SellInvestmentTransaction, /*type: Double,*/ fcn: \"getTotal\"});\n\n\n/**\n * Sets the total for the sale. Should be equal to\n * (units * (unitPrice + markdown)) + (commision + fees + load + taxes + penalty + withholding +\n * statewithholding) according to the OFX spec. This is a required field according to the OFX\n * spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} total the total\n */\nSellInvestmentTransaction.prototype.setTotal = function(total) {\n  this.total = total;\n};\n\n\n/**\n * Gets the gain sale. This is aan optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the gain for the sale\n */\nSellInvestmentTransaction.prototype.getGain = function() {\n  return this.gain;\n};\nElement.add({name: \"GAIN\", order: 105, owner: SellInvestmentTransaction, /*type: Double,*/ fcn: \"getGain\"});\n\n\n/**\n * Sets the gain sale. This is aan optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} gain the gain for the sale\n */\nSellInvestmentTransaction.prototype.setGain = function(gain) {\n  this.gain = gain;\n};\n\n\n/**\n * Gets the currency code for the transaction. Only one of currency code or original currency\n * code should be set according to the OFX spec. If neither are set, means the default currency.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the currency code for the transaction\n */\nSellInvestmentTransaction.prototype.getCurrencyCode = function() {\n  return this.currencyCode;\n};\nElement.add({name: \"CURRENCY\", order: 110, owner: SellInvestmentTransaction, /*type: String,*/ fcn: \"getCurrencyCode\"});\n\n\n/**\n * sets the currency code for the transaction. Only one of currency code or original currency\n * code should be set according to the OFX spec. If neither are set, means the default currency.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} currencyCode the currency code for the transaction\n */\nSellInvestmentTransaction.prototype.setCurrencyCode = function(currencyCode) {\n  this.currencyCode = currencyCode;\n  this.originalCurrencyInfo = null;\n};\n\n\n/**\n * Gets the original currency info for the transaction.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {OriginalCurrency} the original currency info for the transaction\n */\nSellInvestmentTransaction.prototype.getOriginalCurrencyInfo = function() {\n  return this.originalCurrencyInfo;\n};\nElement.add({name: \"ORIGCURRENCY\", order: 120, owner: SellInvestmentTransaction, /*type: OriginalCurrency,*/ fcn: \"getOriginalCurrencyInfo\"});\n\n\n/**\n * Sets the original currency info for the transaction.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {OriginalCurrency} originalCurrencyInfo the original currency info for the transaction\n */\nSellInvestmentTransaction.prototype.setOriginalCurrencyInfo = function(originalCurrencyInfo) {\n  this.originalCurrencyInfo = originalCurrencyInfo;\n  this.currencyCode = null;\n};\n\n\n/**\n * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the sub account type\n */\nSellInvestmentTransaction.prototype.getSubAccountSecurity = function() {\n  return this.subAccountSecurity;\n};\nElement.add({name: \"SUBACCTSEC\", order: 130, owner: SellInvestmentTransaction, /*type: String,*/ fcn: \"getSubAccountSecurity\"});\n\n\n/**\n * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} subAccountSecurity the sub account type\n */\nSellInvestmentTransaction.prototype.setSubAccountSecurity = function(subAccountSecurity) {\n  this.subAccountSecurity = subAccountSecurity;\n};\n\n\n/**\n * Gets the result of getSubAccountSecurity as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types.\n */\nSellInvestmentTransaction.prototype.getSubAccountSecurityEnum = function() {\n  return SubAccountType.fromOfx(this.getSubAccountSecurity());\n};\n\n\n/**\n * Gets the sub account type that the security is being transfered from\n * (e.g. CASH, MARGIN, SHORT, OTHER).\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the sub account fund\n */\nSellInvestmentTransaction.prototype.getSubAccountFund = function() {\n  return this.subAccountFund;\n};\nElement.add({name: \"SUBACCTFUND\", order: 140, owner: SellInvestmentTransaction, /*type: String,*/ fcn: \"getSubAccountFund\"});\n\n\n/**\n * Sets the sub account type that the security is being transfered from\n * (e.g. CASH, MARGIN, SHORT, OTHER).\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} subAccountFund the sub account fund\n */\nSellInvestmentTransaction.prototype.setSubAccountFund = function(subAccountFund) {\n  this.subAccountFund = subAccountFund;\n};\n\n\n/**\n * Gets the result of getSubAccountFund as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types\n */\nSellInvestmentTransaction.prototype.getSubAccountFundEnum = function() {\n  return SubAccountType.fromOfx(this.getSubAccountFund());\n};\n\n\n/**\n * Gets the loan id if this transaction was due to a loan or loan repayment on a 401k. This is an\n * optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the loan id\n */\nSellInvestmentTransaction.prototype.getLoanId = function() {\n  return this.loanId;\n};\nElement.add({name: \"LOANID\", order: 150, owner: SellInvestmentTransaction, /*type: String,*/ fcn: \"getLoanId\"});\n\n\n/**\n * Sets the loan id if this transaction was due to a loan or loan repayment on a 401k. This is an\n * optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} loanId the loan id\n */\nSellInvestmentTransaction.prototype.setLoanId = function(loanId) {\n  this.loanId = loanId;\n};\n\n\n/**\n * Gets the state withholding for the sale. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the state withholding\n */\nSellInvestmentTransaction.prototype.getStateWithholding = function() {\n  return this.stateWithholding;\n};\nElement.add({name: \"STATEWITHHOLDING\", order: 160, owner: SellInvestmentTransaction, /*type: Double,*/ fcn: \"getStateWithholding\"});\n\n\n/**\n * Sets the state withholding for the sale. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} stateWithholding the state withholding\n */\nSellInvestmentTransaction.prototype.setStateWithholding = function(stateWithholding) {\n  this.stateWithholding = stateWithholding;\n};\n\n\n/**\n * Gets the penalty for the sale. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the state withholding\n */\nSellInvestmentTransaction.prototype.getPenalty = function() {\n  return this.penalty;\n};\nElement.add({name: \"PENALTY\", order: 170, owner: SellInvestmentTransaction, /*type: Double,*/ fcn: \"getPenalty\"});\n\n\n/**\n * Sets the penalty for the sale. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} penalty the state withholding\n */\nSellInvestmentTransaction.prototype.setPenalty = function(penalty) {\n  this.penalty = penalty;\n};\n\n\n/**\n * Gets the 401K source for the sale. Should be one of \"PRETAX\", \"AFTERTAX\", \"MATCH\",\n * \"PROFITSHARING\", \"ROLLOVER\", \"OTHERVEST\", \"OTHERNONVEST\".  This is an optional field\n * according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the 401k source\n */\nSellInvestmentTransaction.prototype.get401kSource = function() {\n  return this.inv401kSource;\n};\nElement.add({name: \"INV401KSOURCE\", order: 180, owner: SellInvestmentTransaction, /*type: String,*/ fcn: \"get401kSource\"});\n\n\n/**\n * Sets the 401K source for the sale. Should be one of \"PRETAX\", \"AFTERTAX\", \"MATCH\",\n * \"PROFITSHARING\", \"ROLLOVER\", \"OTHERVEST\", \"OTHERNONVEST\".  This is an optional field\n * according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} inv401kSource the 401k source\n */\nSellInvestmentTransaction.prototype.set401kSource = function(inv401kSource) {\n  this.inv401kSource = inv401kSource;\n};\n\n\n/**\n * Gets the 401k source as one of the well-known types.\n *\n * @return {Inv401KSource} the 401k source or null if its not one of the well-known types\n */\nSellInvestmentTransaction.prototype.get401kSourceEnum = function() {\n  return Inv401KSource.fromOfx(this.get401kSource());\n};\n\n\n\n\nmodule.exports = SellInvestmentTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar BaseSellInvestmentTransaction = require(\"./BaseSellInvestmentTransaction\");\nvar TransactionType = require(\"./TransactionType\");\nvar SellType = require(\"./SellType\");\n\n/**\n * Transaction for selling mutual fund.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @class\n * @augments BaseSellInvestmentTransaction\n */\nfunction SellMutualFundTransaction () {\n  BaseSellInvestmentTransaction.call(this, TransactionType.SELL_MUTUAL_FUND);\n\n  /**\n   * @name SellMutualFundTransaction#sellType\n   * @type String\n   * @access private\n   */\n  this.sellType = null;\n\n  /**\n   * @name SellMutualFundTransaction#averageCostBasis\n   * @type Double\n   * @access private\n   */\n  this.averageCostBasis = null;\n\n  /**\n   * @name SellMutualFundTransaction#relatedTransactionId\n   * @type String\n   * @access private\n   */\n  this.relatedTransactionId = null;\n}\n\ninherit(SellMutualFundTransaction, \"extends\", BaseSellInvestmentTransaction);\n\n\nAggregate.add(\"SELLMF\", SellMutualFundTransaction);\n\n\n/**\n * Gets the type of sale. One of \"SELL\" or \"SELLSHORT\".\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {String} The type of sale\n */\nSellMutualFundTransaction.prototype.getSellType = function() {\n  return this.sellType;\n};\nElement.add({name: \"SELLTYPE\", order: 20, owner: SellMutualFundTransaction, /*type: String,*/ fcn: \"getSellType\"});\n\n\n/**\n * Sets the type of sale. One of \"SELL\" or \"SELLSHORT\".\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {String} sellType The type of sale\n */\nSellMutualFundTransaction.prototype.setSellType = function(sellType) {\n  this.sellType = sellType;\n};\n\n\n/**\n * Gets the sell type as one of the well-known types.\n *\n * @return {SellType} the type of sale or null if it's not known.\n */\nSellMutualFundTransaction.prototype.getSellTypeEnum = function() {\n  return SellType.fromOfx(this.sellType);\n};\n\n\n/**\n * Gets the average cost basis of the sale.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {Double} The average cost basis of the sale\n */\nSellMutualFundTransaction.prototype.getAverageCostBasis = function() {\n  return this.averageCostBasis;\n};\nElement.add({name: \"AVGCOSTBASIS\", order: 30, owner: SellMutualFundTransaction, /*type: Double,*/ fcn: \"getAverageCostBasis\"});\n\n\n/**\n * Sets the average cost basis of the sale.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {Double} averageCostBasis The average cost basis of the sale\n */\nSellMutualFundTransaction.prototype.setAverageCostBasis = function(averageCostBasis) {\n  this.averageCostBasis = averageCostBasis;\n};\n\n\n/**\n * Gets any related transaction id for a mutual fund sale (e.g. for a mutual fund exchange).\n * This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {String} the related transaction id\n */\nSellMutualFundTransaction.prototype.getRelatedTransactionId = function() {\n  return this.relatedTransactionId;\n};\nElement.add({name: \"RELFITID\", order: 40, owner: SellMutualFundTransaction, /*type: String,*/ fcn: \"getRelatedTransactionId\"});\n\n\n/**\n * Sets any related transaction id for a mutual fund sale (e.g. for a mutual fund exchange).\n * This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {String} relatedTransactionId the related transaction id\n */\nSellMutualFundTransaction.prototype.setRelatedTransactionId = function(relatedTransactionId) {\n  this.relatedTransactionId = relatedTransactionId;\n};\n\n\n\n\nmodule.exports = SellMutualFundTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar ShortOptionSecurity = require(\"../positions/ShortOptionSecurity\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar BaseSellInvestmentTransaction = require(\"./BaseSellInvestmentTransaction\");\nvar TransactionType = require(\"./TransactionType\");\nvar OptionSellType = require(\"./OptionSellType\");\nvar RelatedOptionType = require(\"./RelatedOptionType\");\n\n/**\n * Transaction for selling options.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @class\n * @augments BaseSellInvestmentTransaction\n */\nfunction SellOptionTransaction () {\n  BaseSellInvestmentTransaction.call(this, TransactionType.SELL_OPTION);\n\n  /**\n   * @name SellOptionTransaction#optionSellType\n   * @type String\n   * @access private\n   */\n  this.optionSellType = null;\n\n  /**\n   * @name SellOptionTransaction#sharesPerContact\n   * @type Integer\n   * @access private\n   */\n  this.sharesPerContact = null;\n\n  /**\n   * @name SellOptionTransaction#relatedTransactionId\n   * @type String\n   * @access private\n   */\n  this.relatedTransactionId = null;\n\n  /**\n   * @name SellOptionTransaction#relatedType\n   * @type String\n   * @access private\n   */\n  this.relatedType = null;\n\n  /**\n   * @name SellOptionTransaction#secured\n   * @type String\n   * @access private\n   */\n  this.secured = null;\n}\n\ninherit(SellOptionTransaction, \"extends\", BaseSellInvestmentTransaction);\n\n\nAggregate.add(\"SELLOPT\", SellOptionTransaction);\n\n\n/**\n * Gets the type of option sale (i.e. \"SELLTOCLOSE\" or \"SELLTOOPEN\"). This is a required field\n * according to the OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {String} the option sell type\n */\nSellOptionTransaction.prototype.getOptionSellType = function() {\n  return this.optionSellType;\n};\nElement.add({name: \"OPTSELLTYPE\", required: true, order: 20, owner: SellOptionTransaction, /*type: String,*/ fcn: \"getOptionSellType\"});\n\n\n/**\n * Sets the type of option sale (i.e. \"SELLTOCLOSE\" or \"SELLTOOPEN\"). This is a required field\n * according to the OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {String} optionSellType the option sell type\n */\nSellOptionTransaction.prototype.setOptionSellType = function(optionSellType) {\n  this.optionSellType = optionSellType;\n};\n\n\n/**\n * Gets the option sell type as one of the well-known types.\n *\n * @return {OptionSellType} the type of sale or null if it's not known.\n */\nSellOptionTransaction.prototype.getOptionSellTypeEnum = function() {\n  return OptionSellType.fromOfx(this.optionSellType);\n};\n\n\n/**\n * Gets the number of shares per contact. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {Integer} the number of shares per contact\n */\nSellOptionTransaction.prototype.getSharesPerContact = function() {\n  return this.sharesPerContact;\n};\nElement.add({name: \"SHPERCTRCT\", required: true, order: 30, owner: SellOptionTransaction, /*type: Integer,*/ fcn: \"getSharesPerContact\"});\n\n\n/**\n * Sets the number of shares per contact. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {Integer} sharesPerContact the number of shares per contact\n */\nSellOptionTransaction.prototype.setSharesPerContact = function(sharesPerContact) {\n  this.sharesPerContact = sharesPerContact;\n};\n\n\n/**\n * Gets a related transaction for the option sale for complex option transactions. This\n * is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {String} The related transaction id\n */\nSellOptionTransaction.prototype.getRelatedTransactionId = function() {\n  return this.relatedTransactionId;\n};\nElement.add({name: \"RELFITID\", order: 40, owner: SellOptionTransaction, /*type: String,*/ fcn: \"getRelatedTransactionId\"});\n\n\n/**\n * Sets a related transaction for the option sale for complex option transactions. This\n * is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {String} relatedTransactionId The related transaction id\n */\nSellOptionTransaction.prototype.setRelatedTransactionId = function(relatedTransactionId) {\n  this.relatedTransactionId = relatedTransactionId;\n};\n\n\n/**\n * Gets the type for the related transaction. One of \"SPREAD\", \"STRADDLE\", \"NONE\", \"OTHER\". This\n * is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {String} The related tansaction type\n */\nSellOptionTransaction.prototype.getRelatedType = function() {\n  return this.relatedType;\n};\nElement.add({name: \"RELTYPE\", order: 50, owner: SellOptionTransaction, /*type: String,*/ fcn: \"getRelatedType\"});\n\n\n/**\n * Sets the type for the related transaction. One of \"SPREAD\", \"STRADDLE\", \"NONE\", \"OTHER\". This\n * is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {String} relatedType The related tansaction type\n */\nSellOptionTransaction.prototype.setRelatedType = function(relatedType) {\n  this.relatedType = relatedType;\n};\n\n\n/**\n * Gets the related transaction as one of the well-known types.\n *\n * @return {RelatedOptionType} the related tansaction type or null if it's not well known\n */\nSellOptionTransaction.prototype.getRelatedTypeEnum = function() {\n  return RelatedOptionType.fromOfx(this.getRelatedType());\n};\n\n\n/**\n * Gets how the option sale is secured. One of \"NAKED\" or \"COVERED\". This is an optional field\n * according to the OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {String} how the option sale is secured\n */\nSellOptionTransaction.prototype.getSecured = function() {\n  return this.secured;\n};\nElement.add({name: \"SECURED\", order: 60, owner: SellOptionTransaction, /*type: String,*/ fcn: \"getSecured\"});\n\n\n/**\n * Sets how the option sale is secured. One of \"NAKED\" or \"COVERED\". This is an optional field\n * according to the OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {String} secured how the option sale is secured\n */\nSellOptionTransaction.prototype.setSecured = function(secured) {\n  this.secured = secured;\n};\n\n\n/**\n * Gets how the option sale is secured as one of the well-known types.\n *\n * @return {ShortOptionSecurity} the type indicating how the option is secured or null if it's not well known.\n */\nSellOptionTransaction.prototype.getSecuredEnum = function() {\n  return  ShortOptionSecurity.fromOfx(this.getSecured());\n};\n\n\n\n\nmodule.exports = SellOptionTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar BaseSellInvestmentTransaction = require(\"./BaseSellInvestmentTransaction\");\nvar TransactionType = require(\"./TransactionType\");\n\n/**\n * Transaction for buying other types of securities.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @class\n * @augments BaseSellInvestmentTransaction\n */\nfunction SellOtherTransaction () {\n  BaseSellInvestmentTransaction.call(this, TransactionType.SELL_OTHER);\n}\n\ninherit(SellOtherTransaction, \"extends\", BaseSellInvestmentTransaction);\n\n\nAggregate.add(\"SELLOTHER\", SellOtherTransaction);\n\n\nmodule.exports = SellOtherTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar BaseSellInvestmentTransaction = require(\"./BaseSellInvestmentTransaction\");\nvar TransactionType = require(\"./TransactionType\");\nvar SellType = require(\"./SellType\");\n\n/**\n * Transaction for selling stock.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @class\n * @augments BaseSellInvestmentTransaction\n */\nfunction SellStockTransaction () {\n  BaseSellInvestmentTransaction.call(this, TransactionType.SELL_STOCK);\n\n  /**\n   * @name SellStockTransaction#sellType\n   * @type String\n   * @access private\n   */\n  this.sellType = null;\n}\n\ninherit(SellStockTransaction, \"extends\", BaseSellInvestmentTransaction);\n\n\nAggregate.add(\"SELLSTOCK\", SellStockTransaction);\n\n\n/**\n * Gets the type of stock sale (i.e. \"SELL\" or \"SELLSHORT\"). This is a required field\n * according to the OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @return {String} the sell type\n */\nSellStockTransaction.prototype.getSellType = function() {\n  return this.sellType;\n};\nElement.add({name: \"SELLTYPE\", required: true, order: 20, owner: SellStockTransaction, /*type: String,*/ fcn: \"getSellType\"});\n\n\n/**\n * Sets the type of stock sale (i.e. \"SELL\" or \"SELLSHORT\"). This is a required field\n * according to the OFX spec.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @param {String} sellType the sell type\n */\nSellStockTransaction.prototype.setSellType = function(sellType) {\n  this.sellType = sellType;\n};\n\n\n/**\n * Gets the sell type as one of the well-known types.\n *\n * @return {SellType} the type of sale or null if it's not known\n */\nSellStockTransaction.prototype.getSellTypeEnum = function() {\n  return SellType.fromOfx(this.sellType);\n};\n\n\n\n\nmodule.exports = SellStockTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Type of sale for stocks and mutual funds.\n *\n * @enum\n */\nvar SellType = {\n  SELL: 0,\n  SELL_SHORT: 1,\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"SELL\".equals(ofxVal)) {\n      return SellType.SELL;\n    } else if (\"SELLSHORT\".equals(ofxVal)) {\n      return SellType.SELL_SHORT;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = SellType;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar SubAccountType = require(\"../accounts/SubAccountType\");\nvar Inv401KSource = require(\"../positions/Inv401KSource\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar BaseOtherInvestmentTransaction = require(\"./BaseOtherInvestmentTransaction\");\nvar TransactionType = require(\"./TransactionType\");\n\n/**\n * Transaction for a stock split.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @class\n * @augments BaseOtherInvestmentTransaction\n */\nfunction SplitTransaction () {\n  BaseOtherInvestmentTransaction.call(this, TransactionType.SPLIT);\n\n  /**\n   * @name SplitTransaction#securityId\n   * @type SecurityId\n   * @access private\n   */\n  this.securityId = null;\n\n  /**\n   * @name SplitTransaction#subAccountSecurity\n   * @type String\n   * @access private\n   */\n  this.subAccountSecurity = null;\n\n  /**\n   * @name SplitTransaction#oldUnits\n   * @type Double\n   * @access private\n   */\n  this.oldUnits = null;\n\n  /**\n   * @name SplitTransaction#newUnits\n   * @type Double\n   * @access private\n   */\n  this.newUnits = null;\n\n  /**\n   * @name SplitTransaction#numerator\n   * @type Double\n   * @access private\n   */\n  this.numerator = null;\n\n  /**\n   * @name SplitTransaction#denominator\n   * @type Double\n   * @access private\n   */\n  this.denominator = null;\n\n  /**\n   * @name SplitTransaction#currencyCode\n   * @type String\n   * @access private\n   */\n  this.currencyCode = null;\n\n  /**\n   * @name SplitTransaction#originalCurrencyInfo\n   * @type OriginalCurrency\n   * @access private\n   */\n  this.originalCurrencyInfo = null;\n\n  /**\n   * @name SplitTransaction#cashForFractionalUnits\n   * @type Double\n   * @access private\n   */\n  this.cashForFractionalUnits = null;\n\n  /**\n   * @name SplitTransaction#subAccountFund\n   * @type String\n   * @access private\n   */\n  this.subAccountFund = null;\n\n  /**\n   * @name SplitTransaction#inv401kSource\n   * @type String\n   * @access private\n   */\n  this.inv401kSource = null;\n}\n\ninherit(SplitTransaction, \"extends\", BaseOtherInvestmentTransaction);\n\n\nAggregate.add(\"SPLIT\", SplitTransaction);\n\n\n/**\n * Gets the id of the security for the split. This is a required field according to the OFX\n * spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {SecurityId} the security id of the security for the expsense\n */\nSplitTransaction.prototype.getSecurityId = function() {\n  return this.securityId;\n};\nChildAggregate.add({required: true, order: 20, owner: SplitTransaction, /*type: SecurityId,*/ fcn: \"getSecurityId\"});\n\n\n/**\n * Sets the id of the security for the split. This is a required field according to the OFX\n * spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {SecurityId} securityId the security id of the security for the expsense\n */\nSplitTransaction.prototype.setSecurityId = function(securityId) {\n  this.securityId = securityId;\n};\n\n\n/**\n * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER). This is a\n * required field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the sub account type\n */\nSplitTransaction.prototype.getSubAccountSecurity = function() {\n  return this.subAccountSecurity;\n};\nElement.add({name: \"SUBACCTSEC\", order: 30, owner: SplitTransaction, /*type: String,*/ fcn: \"getSubAccountSecurity\"});\n\n\n/**\n * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER). This is a\n * required field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} subAccountSecurity the sub account type\n */\nSplitTransaction.prototype.setSubAccountSecurity = function(subAccountSecurity) {\n  this.subAccountSecurity = subAccountSecurity;\n};\n\n\n/**\n * Gets the result of getSubAccountSecurity as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types.\n */\nSplitTransaction.prototype.getSubAccountSecurityEnum = function() {\n  return SubAccountType.fromOfx(this.getSubAccountSecurity());\n};\n\n\n/**\n * Gets the old number of units for the split. This is a required field according to the OFX\n * spec.\n *\n * @return {Double} the old number of units.\n */\nSplitTransaction.prototype.getOldUnits = function() {\n  return this.oldUnits;\n};\nElement.add({name: \"OLDUNITS\", order: 40, owner: SplitTransaction, /*type: Double,*/ fcn: \"getOldUnits\"});\n\n\n/**\n * Sets the old number of units for the split. This is a  equired field according to the OFX\n * spec.\n *\n * @param {Double} oldUnits the old number of units.\n */\nSplitTransaction.prototype.setOldUnits = function(oldUnits) {\n  this.oldUnits = oldUnits;\n};\n\n\n/**\n * Gets the new number of units for the split. This is a required field according to the OFX\n * spec.\n *\n * @return {Double} the new number of units.\n */\nSplitTransaction.prototype.getNewUnits = function() {\n  return this.newUnits;\n};\nElement.add({name: \"NEWUNITS\", order: 50, owner: SplitTransaction, /*type: Double,*/ fcn: \"getNewUnits\"});\n\n\n/**\n * Sets the new number of units for the split. This is a required field according to the OFX\n * spec.\n *\n * @param {Double} newUnits the new number of units.\n */\nSplitTransaction.prototype.setNewUnits = function(newUnits) {\n  this.newUnits = newUnits;\n};\n\n\n/**\n * Gets the numerator for the split ratio. This is a required field according to the OFX spec.\n *\n * @return {Double} the numerator for the split ratio\n */\nSplitTransaction.prototype.getNumerator = function() {\n  return this.numerator;\n};\nElement.add({name: \"NUMERATOR\", order: 60, owner: SplitTransaction, /*type: Double,*/ fcn: \"getNumerator\"});\n\n\n/**\n * Sets the numerator for the split ratio. This is a required field according to the OFX spec.\n *\n * @param {Double} numerator the numerator for the split ratio\n */\nSplitTransaction.prototype.setNumerator = function(numerator) {\n  this.numerator = numerator;\n};\n\n\n/**\n * Gets the denominator for the split ratio. This is a required field according to the OFX spec.\n *\n * @return {Double} the numerator for the split ratio\n */\nSplitTransaction.prototype.getDenominator = function() {\n  return this.denominator;\n};\nElement.add({name: \"DENOMINATOR\", order: 70, owner: SplitTransaction, /*type: Double,*/ fcn: \"getDenominator\"});\n\n\n/**\n * Sets the denominator for the split ratio. This is a required field according to the OFX spec.\n *\n * @param {Double} denominator the numerator for the split ratio\n */\nSplitTransaction.prototype.setDenominator = function(denominator) {\n  this.denominator = denominator;\n};\n\n\n/**\n * Gets the currency code for the transaction. Only one of currency code or original currency\n * code should be set according to the OFX spec. If neither are set, means the default currency.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the currency code for the transaction\n */\nSplitTransaction.prototype.getCurrencyCode = function() {\n  return this.currencyCode;\n};\nElement.add({name: \"CURRENCY\", order: 80, owner: SplitTransaction, /*type: String,*/ fcn: \"getCurrencyCode\"});\n\n\n/**\n * sets the currency code for the transaction. Only one of currency code or original currency\n * code should be set according to the OFX spec. If neither are set, means the default currency.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {void} the currency code for the transaction\n */\nSplitTransaction.prototype.setCurrencyCode = function(/*String*/ currencyCode) {\n  this.currencyCode = currencyCode;\n  this.originalCurrencyInfo = null;\n};\n\n\n/**\n * Gets the original currency info for the transaction.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {OriginalCurrency} the original currency info for the transaction\n */\nSplitTransaction.prototype.getOriginalCurrencyInfo = function() {\n  return this.originalCurrencyInfo;\n};\nElement.add({name: \"ORIGCURRENCY\", order: 90, owner: SplitTransaction, /*type: OriginalCurrency,*/ fcn: \"getOriginalCurrencyInfo\"});\n\n\n/**\n * Sets the original currency info for the transaction.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {void} the original currency info for the transaction\n */\nSplitTransaction.prototype.setOriginalCurrencyInfo = function(/*OriginalCurrency*/ originalCurrencyInfo) {\n  this.originalCurrencyInfo = originalCurrencyInfo;\n  this.currencyCode = null;\n};\n\n\n/**\n * Gets the cash for fractional units.\n *\n * @return {Double} the cash for fractional units\n */\nSplitTransaction.prototype.getCashForFractionalUnits = function() {\n  return this.cashForFractionalUnits;\n};\nElement.add({name: \"FRACCASH\", order: 100, owner: SplitTransaction, /*type: Double,*/ fcn: \"getCashForFractionalUnits\"});\n\n\n/**\n * Sets the cash for fractional units.\n *\n * @param {Double} cashForFractionalUnits the cash for fractional units\n */\nSplitTransaction.prototype.setCashForFractionalUnits = function(cashForFractionalUnits) {\n  this.cashForFractionalUnits = cashForFractionalUnits;\n};\n\n\n/**\n * Gets the sub account type for the fund. (e.g. CASH, MARGIN, SHORT, OTHER).\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the sub account fund\n */\nSplitTransaction.prototype.getSubAccountFund = function() {\n  return this.subAccountFund;\n};\nElement.add({name: \"SUBACCTFUND\", order: 110, owner: SplitTransaction, /*type: String,*/ fcn: \"getSubAccountFund\"});\n\n\n/**\n * Sets the sub account type for the fund. (e.g. CASH, MARGIN, SHORT, OTHER).\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} subAccountFund the sub account fund\n */\nSplitTransaction.prototype.setSubAccountFund = function(subAccountFund) {\n  this.subAccountFund = subAccountFund;\n};\n\n\n/**\n * Gets the result of getSubAccountFund as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types\n */\nSplitTransaction.prototype.getSubAccountFundEnum = function() {\n  return SubAccountType.fromOfx(this.getSubAccountFund());\n};\n\n\n/**\n * Gets the 401K source for the transaction. Should be one of \"PRETAX\", \"AFTERTAX\", \"MATCH\",\n * \"PROFITSHARING\", \"ROLLOVER\", \"OTHERVEST\", \"OTHERNONVEST\".  This is an optional field\n * according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the 401k source\n */\nSplitTransaction.prototype.get401kSource = function() {\n  return this.inv401kSource;\n};\nElement.add({name: \"INV401KSOURCE\", order: 120, owner: SplitTransaction, /*type: String,*/ fcn: \"get401kSource\"});\n\n\n/**\n * Sets the 401K source for the transaction. Should be one of \"PRETAX\", \"AFTERTAX\", \"MATCH\",\n * \"PROFITSHARING\", \"ROLLOVER\", \"OTHERVEST\", \"OTHERNONVEST\".  This is an optional field\n * according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} inv401kSource the 401k source\n */\nSplitTransaction.prototype.set401kSource = function(inv401kSource) {\n  this.inv401kSource = inv401kSource;\n};\n\n\n/**\n * Gets the 401k source as one of the well-known types.\n *\n * @return {Inv401KSource} the 401k source or null if its not one of the well-known types\n */\nSplitTransaction.prototype.get401kSourceEnum = function() {\n  return Inv401KSource.fromOfx(this.get401kSource());\n};\n\n\n\n\nmodule.exports = SplitTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Type of investment transaction.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @enum\n */\nvar TransactionType = {\n\n  BUY_DEBT: 0,\n  BUY_MUTUAL_FUND: 1,\n  BUY_OPTION: 2,\n  BUY_OTHER: 3,\n  BUY_STOCK: 4,\n  CLOSE_OPTION: 5,\n  INCOME: 6,\n  INVESTMENT_EXPENSE: 7,\n  JOURNAL_FUND: 8,\n  JOURNAL_SECURITY: 9,\n  MARGIN_INTEREST: 10,\n  REINVEST_INCOME: 11,\n  RETURN_OF_CAPITAL: 12,\n  SELL_DEBT: 13,\n  SELL_MUTUAL_FUND: 14,\n  SELL_OPTION: 15,\n  SELL_OTHER: 16,\n  SELL_STOCK: 17,\n  SPLIT: 18,\n  TRANSFER: 19\n};\n\n\nmodule.exports = TransactionType;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Interface for transactions that have a security associated with them.\n *\n * @class\n */\nfunction TransactionWithSecurity() {\n}\n\n/**\n * Gets the security for the transaction.\n *\n * @return {SecurityId} the security id for the transaction\n */\nTransactionWithSecurity.prototype.getSecurityId = function() { throw new Error(\"not implemented\"); };\n\n\nmodule.exports = TransactionWithSecurity;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Type of transfer.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @enum\n */\nvar TransferAction = {\n  IN: 0,\n  OUT: 1,\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"IN\".equals(ofxVal)) {\n      return TransferAction.IN;\n    } else if (\"OUT\".equals(ofxVal)) {\n      return TransferAction.OUT;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = TransferAction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar SubAccountType = require(\"../accounts/SubAccountType\");\nvar Inv401KSource = require(\"../positions/Inv401KSource\");\nvar PositionType = require(\"../positions/PositionType\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\nvar BaseOtherInvestmentTransaction = require(\"./BaseOtherInvestmentTransaction\");\nvar TransactionType = require(\"./TransactionType\");\nvar TransferAction = require(\"./TransferAction\");\n\n/**\n * Transaction for transfers.\n * @see \"Section 13.9.2.4.4, OFX Spec\"\n *\n * @class\n * @augments BaseOtherInvestmentTransaction\n */\nfunction TransferInvestmentTransaction () {\n  // TODO (jonp) -- INVACCTFROM\n  BaseOtherInvestmentTransaction.call(this, TransactionType.TRANSFER);\n\n  /**\n   * @name TransferInvestmentTransaction#securityId\n   * @type SecurityId\n   * @access private\n   */\n  this.securityId = null;\n\n  /**\n   * @name TransferInvestmentTransaction#subAccountSecurity\n   * @type String\n   * @access private\n   */\n  this.subAccountSecurity = null;\n\n  /**\n   * @name TransferInvestmentTransaction#units\n   * @type Double\n   * @access private\n   */\n  this.units = null;\n\n  /**\n   * @name TransferInvestmentTransaction#transferAction\n   * @type String\n   * @access private\n   */\n  this.transferAction = null;\n\n  /**\n   * @name TransferInvestmentTransaction#positionType\n   * @type String\n   * @access private\n   */\n  this.positionType = null;\n\n  /**\n   * @name TransferInvestmentTransaction#averageCostBasis\n   * @type Double\n   * @access private\n   */\n  this.averageCostBasis = null;\n\n  /**\n   * @name TransferInvestmentTransaction#unitPrice\n   * @type Double\n   * @access private\n   */\n  this.unitPrice = null;\n\n  /**\n   * @name TransferInvestmentTransaction#purchaseDate\n   * @type Date\n   * @access private\n   */\n  this.purchaseDate = null;\n\n  /**\n   * @name TransferInvestmentTransaction#inv401kSource\n   * @type String\n   * @access private\n   */\n  this.inv401kSource = null;\n}\n\ninherit(TransferInvestmentTransaction, \"extends\", BaseOtherInvestmentTransaction);\n\n\nAggregate.add(\"TRANSFER\", TransferInvestmentTransaction);\n\n\n/**\n * Gets the id of the security that was transferred. This is a required field according to the OFX\n * spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {SecurityId} the security id of the security that was transferred\n */\nTransferInvestmentTransaction.prototype.getSecurityId = function() {\n  return this.securityId;\n};\nChildAggregate.add({required: true, order: 20, owner: TransferInvestmentTransaction, /*type: SecurityId,*/ fcn: \"getSecurityId\"});\n\n\n/**\n * Sets the id of the security that was transferred. This is a required field according to the OFX\n * spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {SecurityId} securityId the security id of the security that was transferred\n */\nTransferInvestmentTransaction.prototype.setSecurityId = function(securityId) {\n  this.securityId = securityId;\n};\n\n\n/**\n  * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).\n  * @see \"Section 13.9.2.4.3, OFX Spec\"\n  *\n  * @return {String} the sub account type\n  */\nTransferInvestmentTransaction.prototype.getSubAccountSecurity = function() {\n  return this.subAccountSecurity;\n};\nElement.add({name: \"SUBACCTSEC\", order: 30, owner: TransferInvestmentTransaction, /*type: String,*/ fcn: \"getSubAccountSecurity\"});\n\n\n/**\n  * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).\n  * @see \"Section 13.9.2.4.3, OFX Spec\"\n  *\n  * @param {String} subAccountSecurity the sub account type\n  */\nTransferInvestmentTransaction.prototype.setSubAccountSecurity = function(subAccountSecurity) {\n   this.subAccountSecurity = subAccountSecurity;\n };\n\n\n/**\n * Gets the result of getSubAccountSecurity as one of the well-known types.\n *\n * @return {SubAccountType} the type of null if it wasn't one of the well known types.\n */\nTransferInvestmentTransaction.prototype.getSubAccountSecurityEnum = function() {\n  return SubAccountType.fromOfx(this.getSubAccountSecurity());\n};\n\n\n/**\n * Gets the number of units of the security that was transferred. For security-based actions other\n * than stock splits, this is the quantity bought. For stocks, mutual funds, and others, this\n * is the number of shares. For bonds, this is the face value. For options, this is the number of\n * contacts. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the number of units transferred\n */\nTransferInvestmentTransaction.prototype.getUnits = function() {\n  return this.units;\n};\nElement.add({name: \"UNITS\", required: true, order: 40, owner: TransferInvestmentTransaction, /*type: Double,*/ fcn: \"getUnits\"});\n\n\n/**\n * Sets the number of units of the security that was transferred. For security-based actions other\n * than stock splits, this is the quantity bought. For stocks, mutual funds, and others, this\n * is the number of shares. For bonds, this is the face value. For options, this is the number of\n * contacts. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} units the number of units transferred\n */\nTransferInvestmentTransaction.prototype.setUnits = function(units) {\n  this.units = units;\n};\n\n\n/**\n * Gets the type of transfer. One of \"IN\" or \"OUT\". This is a required field according to the\n * OFX spec.\n *\n * @return {String} the type of transfer\n */\nTransferInvestmentTransaction.prototype.getTransferAction = function() {\n  return this.transferAction;\n};\nElement.add({name: \"TFERACTION\", required: true, order: 50, owner: TransferInvestmentTransaction, /*type: String,*/ fcn: \"getTransferAction\"});\n\n\n/**\n * Sets the type of transfer. One of \"IN\" or \"OUT\". This is a required field according to the\n * OFX spec.\n *\n * @param {String} transferAction the type of transfer\n */\nTransferInvestmentTransaction.prototype.setTransferAction = function(transferAction) {\n  this.transferAction = transferAction;\n};\n\n\n/**\n * Gets the transfer action as one of the well-known types.\n *\n * @return {TransferAction} the type of transfer or null if it's not well known\n */\nTransferInvestmentTransaction.prototype.getTransferActionEnum = function() {\n  return TransferAction.fromOfx(this.getTransferAction());\n};\n\n\n/**\n * Gets the type of position. One of \"LONG\" or \"SHORT\". This is a required field according to the\n * OFX spec.\n *\n * @return {String} the position type\n */\nTransferInvestmentTransaction.prototype.getPositionType = function() {\n  return this.positionType;\n};\nElement.add({name: \"POSTYPE\", required: true, order: 60, owner: TransferInvestmentTransaction, /*type: String,*/ fcn: \"getPositionType\"});\n\n\n/**\n * Sets the type of position. One of \"LONG\" or \"SHORT\". This is a required field according to the\n * OFX spec.\n *\n * @param {String} positionType the position type\n */\nTransferInvestmentTransaction.prototype.setPositionType = function(positionType) {\n  this.positionType = positionType;\n};\n\n\n/**\n * Gets the position type as one of the well-known types.\n *\n * @return {PositionType} the position type or null if it's not well known\n */\nTransferInvestmentTransaction.prototype.getPositionTypeEnum = function() {\n  return PositionType.fromOfx(this.getPositionType());\n};\n\n\n/**\n * Gets the average cost basis for the securities being transfered. This is an optional field\n * according to the ofx spec.\n *\n * @return {Double} the average cost basis\n */\nTransferInvestmentTransaction.prototype.getAverageCostBasis = function() {\n  return this.averageCostBasis;\n};\nElement.add({name: \"AVGCOSTBASIS\", order: 70, owner: TransferInvestmentTransaction, /*type: Double,*/ fcn: \"getAverageCostBasis\"});\n\n\n/**\n * Sets the average cost basis for the securities being transfered. This is an optional field\n * according to the ofx spec.\n *\n * @param {Double} averageCostBasis the average cost basis\n */\nTransferInvestmentTransaction.prototype.setAverageCostBasis = function(averageCostBasis) {\n  this.averageCostBasis = averageCostBasis;\n};\n\n\n/**\n * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the\n * share price. For bonds, this is the percentage of par. For options, this is the per share (not\n * per contact) price. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the per unit price\n */\nTransferInvestmentTransaction.prototype.getUnitPrice = function() {\n  return this.unitPrice;\n};\nElement.add({name: \"UNITPRICE\", required: true, order: 80, owner: TransferInvestmentTransaction, /*type: Double,*/ fcn: \"getUnitPrice\"});\n\n\n/**\n * Sets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the\n * share price. For bonds, this is the percentage of par. For options, this is the per share (not\n * per contact) price. This is a required field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} unitPrice the per unit price\n */\nTransferInvestmentTransaction.prototype.setUnitPrice = function(unitPrice) {\n  this.unitPrice = unitPrice;\n};\n\n\n/**\n * Gets the original date of purchase for the securities. This is an optional field according to\n * the ofx spec.\n *\n * @return {Date} the original date of purchase\n */\nTransferInvestmentTransaction.prototype.getPurchaseDate = function() {\n  return this.purchaseDate;\n};\nElement.add({name: \"DTPURCHASE\", order: 90, owner: TransferInvestmentTransaction, /*type: Date,*/ fcn: \"getPurchaseDate\"});\n\n\n/**\n * Sets the original date of purchase for the securities. This is an optional field according to\n * the ofx spec.\n *\n * @param {Date} purchaseDate the original date of purchase\n */\nTransferInvestmentTransaction.prototype.setPurchaseDate = function(purchaseDate) {\n  this.purchaseDate = purchaseDate;\n};\n\n\n/**\n * Gets the 401K source for the transfer. Should be one of \"PRETAX\", \"AFTERTAX\", \"MATCH\",\n * \"PROFITSHARING\", \"ROLLOVER\", \"OTHERVEST\", \"OTHERNONVEST\".  This is an optional field\n * according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {String} the state withholding\n */\nTransferInvestmentTransaction.prototype.get401kSource = function() {\n  return this.inv401kSource;\n};\nElement.add({name: \"INV401KSOURCE\", order: 100, owner: TransferInvestmentTransaction, /*type: String,*/ fcn: \"get401kSource\"});\n\n\n/**\n * Sets the 401K source for the transfer. Should be one of \"PRETAX\", \"AFTERTAX\", \"MATCH\",\n * \"PROFITSHARING\", \"ROLLOVER\", \"OTHERVEST\", \"OTHERNONVEST\".  This is an optional field\n * according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {String} inv401kSource the state withholding\n */\nTransferInvestmentTransaction.prototype.set401kSource = function(inv401kSource) {\n  this.inv401kSource = inv401kSource;\n};\n\n\n/**\n * Gets the 401(k) source as one of the well-known types.\n *\n * @return {Inv401KSource} the type of close or null if it's not well known.\n */\nTransferInvestmentTransaction.prototype.get401kSourceEnum = function() {\n  return Inv401KSource.fromOfx(this.get401kSource());\n};\n\n\n\n\nmodule.exports = TransferInvestmentTransaction;\n","\"use strict\";\n\nmodule.exports = {\n  BaseBuyInvestmentTransaction: require(\"./BaseBuyInvestmentTransaction\"),\n  BaseInvestmentTransaction: require(\"./BaseInvestmentTransaction\"),\n  BaseOtherInvestmentTransaction: require(\"./BaseOtherInvestmentTransaction\"),\n  BaseSellInvestmentTransaction: require(\"./BaseSellInvestmentTransaction\"),\n  BuyDebtTransaction: require(\"./BuyDebtTransaction\"),\n  BuyInvestmentTransaction: require(\"./BuyInvestmentTransaction\"),\n  BuyMutualFundTransaction: require(\"./BuyMutualFundTransaction\"),\n  BuyOptionTransaction: require(\"./BuyOptionTransaction\"),\n  BuyOtherTransaction: require(\"./BuyOtherTransaction\"),\n  BuyStockTransaction: require(\"./BuyStockTransaction\"),\n  BuyType: require(\"./BuyType\"),\n  CloseOptionAction: require(\"./CloseOptionAction\"),\n  CloseOptionTransaction: require(\"./CloseOptionTransaction\"),\n  IncomeTransaction: require(\"./IncomeTransaction\"),\n  IncomeType: require(\"./IncomeType\"),\n  InvestmentBankTransaction: require(\"./InvestmentBankTransaction\"),\n  InvestmentExpenseTransaction: require(\"./InvestmentExpenseTransaction\"),\n  InvestmentTransaction: require(\"./InvestmentTransaction\"),\n  InvestmentTransactionList: require(\"./InvestmentTransactionList\"),\n  JournalFundTransaction: require(\"./JournalFundTransaction\"),\n  JournalSecurityTransaction: require(\"./JournalSecurityTransaction\"),\n  MarginInterestTransaction: require(\"./MarginInterestTransaction\"),\n  OptionBuyType: require(\"./OptionBuyType\"),\n  OptionSellType: require(\"./OptionSellType\"),\n  OriginalCurrency: require(\"./OriginalCurrency\"),\n  ReinvestIncomeTransaction: require(\"./ReinvestIncomeTransaction\"),\n  RelatedOptionType: require(\"./RelatedOptionType\"),\n  ReturnOfCapitalTransaction: require(\"./ReturnOfCapitalTransaction\"),\n  SellDebtReason: require(\"./SellDebtReason\"),\n  SellDebtTransaction: require(\"./SellDebtTransaction\"),\n  SellInvestmentTransaction: require(\"./SellInvestmentTransaction\"),\n  SellMutualFundTransaction: require(\"./SellMutualFundTransaction\"),\n  SellOptionTransaction: require(\"./SellOptionTransaction\"),\n  SellOtherTransaction: require(\"./SellOtherTransaction\"),\n  SellStockTransaction: require(\"./SellStockTransaction\"),\n  SellType: require(\"./SellType\"),\n  SplitTransaction: require(\"./SplitTransaction\"),\n  TransactionType: require(\"./TransactionType\"),\n  TransactionWithSecurity: require(\"./TransactionWithSecurity\"),\n  TransferAction: require(\"./TransferAction\"),\n  TransferInvestmentTransaction: require(\"./TransferInvestmentTransaction\"),\n};\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\n\n/**\n * Information about a message set.\n *\n * @class\n * @see \"Section 7.2.1, OFX Spec\"\n */\nfunction AbstractMessageSetInfo () {\n\n  /**\n   * @name AbstractMessageSetInfo#versionSpecificInformationList\n   * @type List<VersionSpecificMessageSetInfo>\n   * @access private\n   */\n  this.versionSpecificInformationList = null;\n}\n\n\n\n\n\n/**\n * List of information about a message set for each version supported.\n *\n * @return {VersionSpecificMessageSetInfo[]} List of information about a message set for each version supported.\n */\nAbstractMessageSetInfo.prototype.getVersionSpecificInformationList = function() {\n  return this.versionSpecificInformationList;\n};\nChildAggregate.add({order: 0, owner: AbstractMessageSetInfo, /*type: VersionSpecificMessageSetInfo[],*/ fcn: \"getVersionSpecificInformationList\"});\n\n\n/**\n * List of information about a message set for each version supported.\n *\n * @param {VersionSpecificMessageSetInfo[]} versionSpecificInformationList List of information about a message set for each version supported.\n */\nAbstractMessageSetInfo.prototype.setVersionSpecificInformationList = function(versionSpecificInformationList) {\n  this.versionSpecificInformationList = versionSpecificInformationList;\n};\n\n\n\n\nmodule.exports = AbstractMessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * @enum\n * @see \"Section 7.2.2, OFX Spec\"\n */\nvar CharacterType = {\n\n  ALPHAONLY: 0,\n\n  NUMERICONLY: 1,\n\n  ALPHAORNUMERIC: 2,\n\n  ALPHAANDNUMERIC: 3\n};\n\n\nmodule.exports = CharacterType;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * @enum\n * @see \"Section 7.1.5, OFX Spec\"\n */\nvar ClientRoutingCapability = {\n\n  NONE: 0,\n\n  SERVICE: 1,\n\n  MESSAGE_SET: 2\n};\n\n\nmodule.exports = ClientRoutingCapability;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\n\n/**\n * Core information about a specific version of a specific message set.\n *\n * @class\n * @see \"Section 7.2.1, OFX Spec\"\n */\nfunction CoreMessageSetInfo () {\n\n  /**\n   * @name CoreMessageSetInfo#version\n   * @type String\n   * @access private\n   */\n  this.version = \"1\";\n\n  /**\n   * @name CoreMessageSetInfo#serviceProviderName\n   * @type String\n   * @access private\n   */\n  this.serviceProviderName = null;\n\n  /**\n   * @name CoreMessageSetInfo#url\n   * @type String\n   * @access private\n   */\n  this.url = null;\n\n  /**\n   * @name CoreMessageSetInfo#security\n   * @type ApplicationSecurity\n   * @access private\n   */\n  this.security = null;\n\n  /**\n   * @name CoreMessageSetInfo#sslRequired\n   * @type Boolean\n   * @access private\n   */\n  this.sslRequired = null;\n\n  /**\n   * @name CoreMessageSetInfo#realm\n   * @type String\n   * @access private\n   */\n  this.realm = null;\n\n  /**\n   * @name CoreMessageSetInfo#language\n   * @type String\n   * @access private\n   */\n  this.language = \"eng\";\n\n  /**\n   * @name CoreMessageSetInfo#syncCapability\n   * @type SynchronizationCapability\n   * @access private\n   */\n  this.syncCapability = null;\n\n  /**\n   * @name CoreMessageSetInfo#fileBasedErrorRecoverySupport\n   * @type Boolean\n   * @access private\n   */\n  this.fileBasedErrorRecoverySupport = null;\n\n  /**\n   * @name CoreMessageSetInfo#timeout\n   * @type Integer\n   * @access private\n   */\n  this.timeout = null;\n}\n\n\n\nAggregate.add(\"MSGSETCORE\", CoreMessageSetInfo);\n\n\n/**\n * Version of the message set.\n *\n * @return {String} The version of the message set.\n */\nCoreMessageSetInfo.prototype.getVersion = function() {\n  return this.version;\n};\nElement.add({name: \"VER\", required: true, order: 0, owner: CoreMessageSetInfo, /*type: String,*/ fcn: \"getVersion\"});\n\n\n/**\n * The version of the message set.\n *\n * @param {String} version The version of the message set.\n */\nCoreMessageSetInfo.prototype.setVersion = function(version) {\n  this.version = version;\n};\n\n\n/**\n * The name of the service provider (sometimes the message set processing is outsourced).\n *\n * @return {String} The name of the service provider (sometimes the message set processing is outsourced).\n */\nCoreMessageSetInfo.prototype.getServiceProviderName = function() {\n  return this.serviceProviderName;\n};\nElement.add({name: \"SPNAME\", order: 10, owner: CoreMessageSetInfo, /*type: String,*/ fcn: \"getServiceProviderName\"});\n\n\n/**\n * The name of the service provider (sometimes the message set processing is outsourced).\n *\n * @param {String} serviceProviderName The name of the service provider (sometimes the message set processing is outsourced).\n */\nCoreMessageSetInfo.prototype.setServiceProviderName = function(serviceProviderName) {\n  this.serviceProviderName = serviceProviderName;\n};\n\n\n/**\n * The URL at which the message set is processed.\n *\n * @return {String} The URL at which the message set is processed.\n */\nCoreMessageSetInfo.prototype.getUrl = function() {\n  return this.url;\n};\nElement.add({name: \"URL\", required: true, order: 20, owner: CoreMessageSetInfo, /*type: String,*/ fcn: \"getUrl\"});\n\n\n/**\n * The URL at which the message set is processed.\n *\n * @param {String} url The URL at which the message set is processed.\n */\nCoreMessageSetInfo.prototype.setUrl = function(url) {\n  this.url = url;\n};\n\n\n/**\n * The application-level security required for this message set.\n *\n * @return {ApplicationSecurity} The application-level security required for this message set.\n */\nCoreMessageSetInfo.prototype.getSecurity = function() {\n  return this.security;\n};\nElement.add({name: \"OFXSEC\", required: true, order: 30, owner: CoreMessageSetInfo, /*type: ApplicationSecurity,*/ fcn: \"getSecurity\"});\n\n\n/**\n * The application-level security required for this message set.\n *\n * @param {ApplicationSecurity} security The application-level security required for this message set.\n */\nCoreMessageSetInfo.prototype.setSecurity = function(security) {\n  this.security = security;\n};\n\n\n/**\n * Whether transport-level security is required for this message set.\n *\n * @return {Boolean} Whether transport-level security is required for this message set.\n */\nCoreMessageSetInfo.prototype.getSslRequired = function() {\n  return this.sslRequired;\n};\nElement.add({name: \"TRANSPSEC\", required: true, order: 40, owner: CoreMessageSetInfo, /*type: Boolean,*/ fcn: \"getSslRequired\"});\n\n\n/**\n * Whether transport-level security is required for this message set.\n *\n * @param {Boolean} sslRequired Whether transport-level security is required for this message set.\n */\nCoreMessageSetInfo.prototype.setSslRequired = function(sslRequired) {\n  this.sslRequired = sslRequired;\n};\n\n\n/**\n * The sign-on realm.\n *\n * @return {String} The sign-on realm.\n */\nCoreMessageSetInfo.prototype.getRealm = function() {\n  return this.realm;\n};\nElement.add({name: \"SIGNONREALM\", required: true, order: 50, owner: CoreMessageSetInfo, /*type: String,*/ fcn: \"getRealm\"});\n\n\n/**\n * The sign-on realm.\n *\n * @param {String} realm The sign-on realm.\n */\nCoreMessageSetInfo.prototype.setRealm = function(realm) {\n  this.realm = realm;\n};\n\n\n/**\n * The language.\n *\n * @return {String} The language.\n * @see java.util.Locale#getISO3Language()\n */\nCoreMessageSetInfo.prototype.getLanguage = function() {\n  return this.language;\n};\nElement.add({name: \"LANGUAGE\", required: true, order: 60, owner: CoreMessageSetInfo, /*type: String,*/ fcn: \"getLanguage\"});\n\n\n/**\n * The language.\n *\n * @param {String} language The language.\n */\nCoreMessageSetInfo.prototype.setLanguage = function(language) {\n  this.language = language;\n};\n\n\n/**\n * The synchronization capability for this message set.\n *\n * @return {SynchronizationCapability} The synchronization capability for this message set.\n */\nCoreMessageSetInfo.prototype.getSyncCapability = function() {\n  return this.syncCapability;\n};\nElement.add({name: \"SYNCMODE\", required: true, order: 70, owner: CoreMessageSetInfo, /*type: SynchronizationCapability,*/ fcn: \"getSyncCapability\"});\n\n\n/**\n * The synchronization capability for this message set.\n *\n * @param {SynchronizationCapability} syncCapability The synchronization capability for this message set.\n */\nCoreMessageSetInfo.prototype.setSyncCapability = function(syncCapability) {\n  this.syncCapability = syncCapability;\n};\n\n\n/**\n * Whether there exists support for resposne-file based error recovery.\n *\n * @return {Boolean} Whether there exists support for resposne-file based error recovery.\n */\nCoreMessageSetInfo.prototype.getFileBasedErrorRecoverySupport = function() {\n  return this.fileBasedErrorRecoverySupport;\n};\nElement.add({name: \"RESPFILEER\", required: true, order: 80, owner: CoreMessageSetInfo, /*type: Boolean,*/ fcn: \"getFileBasedErrorRecoverySupport\"});\n\n\n/**\n * Whether there exists support for resposne-file based error recovery.\n *\n * @param {Boolean} fileBasedErrorRecoverySupport Whether there exists support for resposne-file based error recovery.\n */\nCoreMessageSetInfo.prototype.setFileBasedErrorRecoverySupport = function(fileBasedErrorRecoverySupport) {\n  this.fileBasedErrorRecoverySupport = fileBasedErrorRecoverySupport;\n};\n\n\n/**\n * Gets the \"INTU.TIMEOUT\" field. There's no public documentation of this field but E*TRADE sends\n * it. It likely is some type of timeout in seconds.\n *\n * @return {Integer} the \"INTU.TIMEOUT\" property\n */\nCoreMessageSetInfo.prototype.getIntuTimeout = function() {\n  return this.timeout;\n};\nElement.add({name: \"INTU.TIMEOUT\", order: 90, owner: CoreMessageSetInfo, /*type: Integer,*/ fcn: \"getIntuTimeout\"});\n\n\n/**\n * Sets the \"INTU.TIMEOUT\" field. There's no public documentation of this field but E*TRADE sends\n * it. It likely is some type of timeout in seconds.\n *\n * @param {Integer} timeout the \"INTU.TIMEOUT\" property\n */\nCoreMessageSetInfo.prototype.setIntuTimeout = function(timeout) {\n  this.timeout = timeout;\n};\n\n\n\n\nmodule.exports = CoreMessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\n\n/**\n * @class\n * @see \"Section 7.2, OFX Spec\"\n */\nfunction MessageSetInfoList () {\n\n  /**\n   * @name MessageSetInfoList#informationList\n   * @type List<AbstractMessageSetInfo>\n   * @access private\n   */\n  this.informationList = null;\n}\n\n\n\nAggregate.add(\"MSGSETLIST\", MessageSetInfoList);\n\n\n/**\n * The list of information for each message set.\n *\n * @return {AbstractMessageSetInfo[]} The list of information for each message set.\n */\nMessageSetInfoList.prototype.getInformationList = function() {\n  return this.informationList;\n};\nChildAggregate.add({order: 0, owner: MessageSetInfoList, /*type: AbstractMessageSetInfo[],*/ fcn: \"getInformationList\"});\n\n\n/**\n * The list of information for each message set.\n *\n * @param {AbstractMessageSetInfo[]} informationList The list of information for each message set.\n */\nMessageSetInfoList.prototype.setInformationList = function(informationList) {\n  this.informationList = informationList;\n};\n\n\n\n\nmodule.exports = MessageSetInfoList;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar RequestMessage = require(\"../RequestMessage\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar ClientRoutingCapability = require(\"./ClientRoutingCapability\");\n\n/**\n * @author Ryan Heaton\n * @see \"Section 7.1.5, OFX Spec\"\n */\nfunction ProfileRequest () {\n\n  /**\n   * @name ProfileRequest#routingCapability\n   * @type ClientRoutingCapability\n   * @access private\n   */\n  this.routingCapability = ClientRoutingCapability.NONE;\n\n  /**\n   * @name ProfileRequest#profileLastUpdated\n   * @type Date\n   * @access private\n   */\n  this.profileLastUpdated = null;\n}\n\ninherit(ProfileRequest, \"extends\", RequestMessage);\n\n\nAggregate.add(\"PROFRQ\", ProfileRequest);\n\n\n/**\n * The client routing capability.\n *\n * @return {ClientRoutingCapability} The client routing capability.\n */\nProfileRequest.prototype.getRoutingCapability = function() {\n  return this.routingCapability;\n};\nElement.add({name: \"CLIENTROUTING\", order: 0, owner: ProfileRequest, /*type: ClientRoutingCapability,*/ fcn: \"getRoutingCapability\"});\n\n\n/**\n * The client routing capability.\n *\n * @param {ClientRoutingCapability} routingCapability The client routing capability.\n */\nProfileRequest.prototype.setRoutingCapability = function(routingCapability) {\n  this.routingCapability = routingCapability;\n};\n\n\n/**\n * The date the profile was last updated.\n *\n * @return {Date} The date the profile was last updated.\n */\nProfileRequest.prototype.getProfileLastUpdated = function() {\n  return this.profileLastUpdated;\n};\nElement.add({name: \"DTPROFUP\", order: 10, owner: ProfileRequest, /*type: Date,*/ fcn: \"getProfileLastUpdated\"});\n\n\n/**\n * The date the profile was last updated.\n *\n * @param {Date} profileLastUpdated The date the profile was last updated.\n */\nProfileRequest.prototype.setProfileLastUpdated = function(profileLastUpdated) {\n  this.profileLastUpdated = profileLastUpdated;\n};\n\n\n\n\nmodule.exports = ProfileRequest;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar MessageSetType = require(\"../MessageSetType\");\nvar RequestMessageSet = require(\"../RequestMessageSet\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\n\n/**\n * @class\n * @augments RequestMessageSet\n * @see \"Section 7 OFX Spec\"\n */\nfunction ProfileRequestMessageSet () {\n\n  /**\n   * @name ProfileRequestMessageSet#profileRequest\n   * @type ProfileRequestTransaction\n   * @access private\n   */\n  this.profileRequest = null;\n}\n\ninherit(ProfileRequestMessageSet, \"extends\", RequestMessageSet);\n\n\nAggregate.add(\"PROFMSGSRQV1\", ProfileRequestMessageSet);\n\n\nProfileRequestMessageSet.prototype.getType = function() {\n  return MessageSetType.profile;\n};\n\n\n/**\n * The profile request.\n *\n * @return {ProfileRequestTransaction} The profile request.\n */\nProfileRequestMessageSet.prototype.getProfileRequest = function() {\n  return this.profileRequest;\n};\nChildAggregate.add({required: true, order: 0, owner: ProfileRequestMessageSet, /*type: ProfileRequestTransaction,*/ fcn: \"getProfileRequest\"});\n\n\n/**\n * The profile request.\n *\n * @param {ProfileRequestTransaction} profileRequest The profile request.\n */\nProfileRequestMessageSet.prototype.setProfileRequest = function(profileRequest) {\n  this.profileRequest = profileRequest;\n};\n\n\n// Inherited.\nProfileRequestMessageSet.prototype.getRequestMessages = function() {\n  var requestMessages = [];\n  if (this.getProfileRequest() !== null) {\n    requestMessages.push(this.getProfileRequest());\n  }\n  return requestMessages;\n};\n\n\n\n\nmodule.exports = ProfileRequestMessageSet;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar TransactionWrappedRequestMessage = require(\"../TransactionWrappedRequestMessage\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ProfileRequest = require(\"./ProfileRequest\");\n\n/**\n * @class\n * @augments TransactionWrappedRequestMessage\n */\nfunction ProfileRequestTransaction () {\n\n  /**\n   * @name ProfileRequestTransaction#message\n   * @type ProfileRequest\n   * @access private\n   */\n  this.message = null;\n}\n\ninherit(ProfileRequestTransaction, \"extends\", new TransactionWrappedRequestMessage(ProfileRequest));\n\n\nAggregate.add(\"PROFTRNRQ\", ProfileRequestTransaction);\n\n\n/**\n * The wrapped message.\n *\n * @return {ProfileRequest} The wrapped message.\n */\nProfileRequestTransaction.prototype.getMessage = function() {\n  return this.message;\n};\nChildAggregate.add({required: true, order: 30, owner: ProfileRequestTransaction, /*type: ProfileRequest,*/ fcn: \"getMessage\"});\n\n\n/**\n * The wrapped message.\n *\n * @param {ProfileRequest} message The wrapped message.\n */\nProfileRequestTransaction.prototype.setMessage = function(message) {\n  this.message = message;\n};\n\n\n// Inherited.\nProfileRequestTransaction.prototype.setWrappedMessage = function(/*ProfileRequest*/ message) {\n  this.setMessage(message);\n};\n\n\n\n\nmodule.exports = ProfileRequestTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar ResponseMessage = require(\"../ResponseMessage\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar FinancialInstitutionProfile = require(\"../../../client/FinancialInstitutionProfile\");\n\n/**\n * @class\n * @augments ResponseMessage\n * @augments FinancialInstitutionProfile\n * @see \"Section 7.2 OFX Spec\"\n */\nfunction ProfileResponse () {\n\n  /**\n   * @name ProfileResponse#messageSetList\n   * @type MessageSetInfoList\n   * @access private\n   */\n  this.messageSetList = null;\n\n  /**\n   * @name ProfileResponse#signonInfoList\n   * @type SignonInfoList\n   * @access private\n   */\n  this.signonInfoList = null;\n\n  /**\n   * @name ProfileResponse#timestamp\n   * @type Date\n   * @access private\n   */\n  this.timestamp = null;\n\n  /**\n   * @name ProfileResponse#financialInstitutionName\n   * @type String\n   * @access private\n   */\n  this.financialInstitutionName = null;\n\n  /**\n   * @name ProfileResponse#address1\n   * @type String\n   * @access private\n   */\n  this.address1 = null;\n\n  /**\n   * @name ProfileResponse#address2\n   * @type String\n   * @access private\n   */\n  this.address2 = null;\n\n  /**\n   * @name ProfileResponse#address3\n   * @type String\n   * @access private\n   */\n  this.address3 = null;\n\n  /**\n   * @name ProfileResponse#city\n   * @type String\n   * @access private\n   */\n  this.city = null;\n\n  /**\n   * @name ProfileResponse#state\n   * @type String\n   * @access private\n   */\n  this.state = null;\n\n  /**\n   * @name ProfileResponse#zip\n   * @type String\n   * @access private\n   */\n  this.zip = null;\n\n  /**\n   * @name ProfileResponse#country\n   * @type String\n   * @access private\n   */\n  this.country = null;\n\n  /**\n   * @name ProfileResponse#customerServicePhone\n   * @type String\n   * @access private\n   */\n  this.customerServicePhone = null;\n\n  /**\n   * @name ProfileResponse#technicalSupportPhone\n   * @type String\n   * @access private\n   */\n  this.technicalSupportPhone = null;\n\n  /**\n   * @name ProfileResponse#fax\n   * @type String\n   * @access private\n   */\n  this.fax = null;\n\n  /**\n   * @name ProfileResponse#siteURL\n   * @type String\n   * @access private\n   */\n  this.siteURL = null;\n\n  /**\n   * @name ProfileResponse#email\n   * @type String\n   * @access private\n   */\n  this.email = null;\n}\n\ninherit(ProfileResponse, \"extends\", ResponseMessage);\ninherit(ProfileResponse, \"implements\", FinancialInstitutionProfile);\n\n\nAggregate.add(\"PROFRS\", ProfileResponse);\n\n\n/**\n * List of message set information.\n * @return {MessageSetInfoList} List of message set information.\n */\nProfileResponse.prototype.getMessageSetList = function() {\n  return this.messageSetList;\n};\nChildAggregate.add({order: 0, owner: ProfileResponse, /*type: MessageSetInfoList,*/ fcn: \"getMessageSetList\"});\n\n\n/**\n * List of message set information.\n *\n * @param {MessageSetInfoList} messageSetList List of message set information.\n */\nProfileResponse.prototype.setMessageSetList = function(messageSetList) {\n  this.messageSetList = messageSetList;\n};\n\n\n/**\n * List of signon information.\n *\n * @return {SignonInfoList} List of signon information.\n */\nProfileResponse.prototype.getSignonInfoList = function() {\n  return this.signonInfoList;\n};\nChildAggregate.add({order: 10, owner: ProfileResponse, /*type: SignonInfoList,*/ fcn: \"getSignonInfoList\"});\n\n\n/**\n * List of signon information.\n *\n * @param {SignonInfoList} signonInfoList List of signon information.\n */\nProfileResponse.prototype.setSignonInfoList = function(signonInfoList) {\n  this.signonInfoList = signonInfoList;\n};\n\n\n// Inherited.\nProfileResponse.prototype.getResponseMessageName = function() {\n  return \"profile\";\n};\n\n\n// Inherited.\nProfileResponse.prototype.getLastUpdated = function() {\n  return this.getTimestamp();\n};\n\n\n/**\n * The timestamp of this profile update.\n *\n * @return {Date} The timestamp of this profile update.\n */\nProfileResponse.prototype.getTimestamp = function() {\n  return this.timestamp;\n};\nElement.add({name: \"DTPROFUP\", order: 20, owner: ProfileResponse, /*type: Date,*/ fcn: \"getTimestamp\"});\n\n\n/**\n * The timestamp of this profile update.\n *\n * @param {Date} timestamp The timestamp of this profile update.\n */\nProfileResponse.prototype.setTimestamp = function(timestamp) {\n  this.timestamp = timestamp;\n};\n\n\n/**\n * The name of the financial institution.\n *\n * @return {String} The name of the financial institution.\n */\nProfileResponse.prototype.getFinancialInstitutionName = function() {\n  return this.financialInstitutionName;\n};\nElement.add({name: \"FINAME\", order: 30, owner: ProfileResponse, /*type: String,*/ fcn: \"getFinancialInstitutionName\"});\n\n\n/**\n * The name of the financial institution.\n *\n * @param {String} financialInstitutionName The name of the financial institution.\n */\nProfileResponse.prototype.setFinancialInstitutionName = function(financialInstitutionName) {\n  this.financialInstitutionName = financialInstitutionName;\n};\n\n\n/**\n * The address of the financial institution.\n *\n * @return {String} The address of the financial institution.\n */\nProfileResponse.prototype.getAddress1 = function() {\n  return this.address1;\n};\nElement.add({name: \"ADDR1\", required: true, order: 40, owner: ProfileResponse, /*type: String,*/ fcn: \"getAddress1\"});\n\n\n/**\n * The address of the financial institution.\n *\n * @param {String} address1 The address of the financial institution.\n */\nProfileResponse.prototype.setAddress1 = function(address1) {\n  this.address1 = address1;\n};\n\n\n/**\n * The address of the financial institution.\n *\n * @return {String} The address of the financial institution.\n */\nProfileResponse.prototype.getAddress2 = function() {\n  return this.address2;\n};\nElement.add({name: \"ADDR2\", order: 50, owner: ProfileResponse, /*type: String,*/ fcn: \"getAddress2\"});\n\n\n/**\n * The address of the financial institution.\n *\n * @param {String} address2 The address of the financial institution.\n */\nProfileResponse.prototype.setAddress2 = function(address2) {\n  this.address2 = address2;\n};\n\n\n/**\n * The address of the financial institution.\n *\n * @return {String} The address of the financial institution.\n */\nProfileResponse.prototype.getAddress3 = function() {\n  return this.address3;\n};\nElement.add({name: \"ADDR3\", order: 60, owner: ProfileResponse, /*type: String,*/ fcn: \"getAddress3\"});\n\n\n/**\n * The address of the financial institution.\n *\n * @param {String} address3 The address of the financial institution.\n */\nProfileResponse.prototype.setAddress3 = function(address3) {\n  this.address3 = address3;\n};\n\n\n/**\n * The city of the financial institution.\n *\n * @return {String} The city of the financial institution.\n */\nProfileResponse.prototype.getCity = function() {\n  return this.city;\n};\nElement.add({name: \"CITY\", required: true, order: 70, owner: ProfileResponse, /*type: String,*/ fcn: \"getCity\"});\n\n\n/**\n * The city of the financial institution.\n *\n * @param {String} city The city of the financial institution.\n */\nProfileResponse.prototype.setCity = function(city) {\n  this.city = city;\n};\n\n\n/**\n * The state of this financial institution.\n *\n * @return {String} The state of this financial institution.\n */\nProfileResponse.prototype.getState = function() {\n  return this.state;\n};\nElement.add({name: \"STATE\", required: true, order: 80, owner: ProfileResponse, /*type: String,*/ fcn: \"getState\"});\n\n\n/**\n * The state of this financial institution.\n *\n * @param {String} state The state of this financial institution.\n */\nProfileResponse.prototype.setState = function(state) {\n  this.state = state;\n};\n\n\n/**\n * The postal code of this financial institution.\n *\n * @return {String} The postal code of this financial institution.\n */\nProfileResponse.prototype.getZip = function() {\n  return this.zip;\n};\nElement.add({name: \"POSTALCODE\", required: true, order: 90, owner: ProfileResponse, /*type: String,*/ fcn: \"getZip\"});\n\n\n/**\n * The postal code of this financial institution.\n *\n * @param {String} zip The postal code of this financial institution.\n */\nProfileResponse.prototype.setZip = function(zip) {\n  this.zip = zip;\n};\n\n\n/**\n * The country code for this financial institution.\n *\n * @return {String} The country code for this financial institution.\n * @see java.util.Locale#getISO3Country()\n */\nProfileResponse.prototype.getCountry = function() {\n  return this.country;\n};\nElement.add({name: \"COUNTRY\", required: true, order: 100, owner: ProfileResponse, /*type: String,*/ fcn: \"getCountry\"});\n\n\n/**\n * The country code for this financial institution.\n *\n * @param {String} country The country code for this financial institution.\n */\nProfileResponse.prototype.setCountry = function(country) {\n  this.country = country;\n};\n\n\n/**\n * The phone number to customer service.\n *\n * @return {String} The phone number to customer service.\n */\nProfileResponse.prototype.getCustomerServicePhone = function() {\n  return this.customerServicePhone;\n};\nElement.add({name: \"CSPHONE\", order: 110, owner: ProfileResponse, /*type: String,*/ fcn: \"getCustomerServicePhone\"});\n\n\n/**\n * The phone number to customer service.\n *\n * @param {String} customerServicePhone The phone number to customer service.\n */\nProfileResponse.prototype.setCustomerServicePhone = function(customerServicePhone) {\n  this.customerServicePhone = customerServicePhone;\n};\n\n\n/**\n * The phone number to tech support.\n *\n * @return {String} The phone number to tech support.\n */\nProfileResponse.prototype.getTechnicalSupportPhone = function() {\n  return this.technicalSupportPhone;\n};\nElement.add({name: \"TSPHONE\", order: 120, owner: ProfileResponse, /*type: String,*/ fcn: \"getTechnicalSupportPhone\"});\n\n\n/**\n * The phone number to tech support.\n *\n * @param {String} technicalSupportPhone The phone number to tech support.\n */\nProfileResponse.prototype.setTechnicalSupportPhone = function(technicalSupportPhone) {\n  this.technicalSupportPhone = technicalSupportPhone;\n};\n\n\n/**\n * The fax number.\n *\n * @return {String} The fax number.\n */\nProfileResponse.prototype.getFax = function() {\n  return this.fax;\n};\nElement.add({name: \"FAXPHONE\", order: 130, owner: ProfileResponse, /*type: String,*/ fcn: \"getFax\"});\n\n\n/**\n * The fax number.\n *\n * @param {String} fax The fax number.\n */\nProfileResponse.prototype.setFax = function(fax) {\n  this.fax = fax;\n};\n\n\n/**\n * URL for the financial institution.\n *\n * @return {String} URL for the financial institution.\n */\nProfileResponse.prototype.getSiteURL = function() {\n  return this.siteURL;\n};\nElement.add({name: \"URL\", order: 140, owner: ProfileResponse, /*type: String,*/ fcn: \"getSiteURL\"});\n\n\n/**\n * URL for the financial institution.\n *\n * @param {String} siteURL URL for the financial institution.\n */\nProfileResponse.prototype.setSiteURL = function(siteURL) {\n  this.siteURL = siteURL;\n};\n\n\n/**\n * The email for this FI\n *\n * @return {String} The email for this FI\n */\nProfileResponse.prototype.getEmail = function() {\n  return this.email;\n};\nElement.add({name: \"EMAIL\", order: 150, owner: ProfileResponse, /*type: String,*/ fcn: \"getEmail\"});\n\n\n/**\n * The email for this FI\n *\n * @param {String} email The email for this FI\n */\nProfileResponse.prototype.setEmail = function(email) {\n  this.email = email;\n};\n\n\nProfileResponse.prototype.getMessageSetProfile = function(/*MessageSetType*/ type) {\n  var profiles = this.getProfiles(type);\n  if (profiles.length > 1) {\n    throw new Error(\"More than one profile of type \" + type);\n  }\n  else if (profiles.isEmpty()) {\n    return null;\n  }\n  else {\n    return profiles[0];\n  }\n};\n\n\n/**\n * Get all the profiles of the specified type.\n *\n * @param {MessageSetType} type The type.\n * @return {Collection<MessageSetProfile>} The profiles.\n */\nProfileResponse.prototype.getProfiles = function(type) {\n  var profiles = [];\n  if (this.getMessageSetList() !== null && this.getMessageSetList().getInformationList() !== null) {\n    for (var info in this.getMessageSetList().getInformationList()) {\n      if (info.getVersionSpecificInformationList() !== null) {\n        for (var versionSpecificInfo in info.getVersionSpecificInformationList()) {\n          if (versionSpecificInfo.getMessageSetType() == type) {\n            profiles.add(versionSpecificInfo);\n          }\n        }\n      }\n    }\n  }\n  return profiles;\n};\n\n\nProfileResponse.prototype.getMessageSetProfile = function(/*MessageSetType*/ type, /*String*/ version) {\n  for (var profile in this.getProfiles(type)) {\n    if (version === null) {\n      if (profile.getVersion() === null) {\n        return profile;\n      }\n    }\n    else if (version.equals(profile.getVersion())) {\n      return profile;\n    }\n  }\n  \n  return null;\n};\n\n\nProfileResponse.prototype.getSignonProfile = function(/*MessageSetProfile*/ messageSet) {\n  if (this.getSignonInfoList() !== null && this.getSignonInfoList().getInfoList() !== null) {\n    for (var signonInfo in this.getSignonInfoList().getInfoList()) {\n      if (messageSet.getRealm() === null) {\n        if (signonInfo.getRealm() === null) {\n          return signonInfo;\n        }\n      }\n      else if (messageSet.getRealm().equals(signonInfo.getRealm())) {\n        return signonInfo;\n      }\n    }\n  }\n  return null;\n};\n\n\n\n\nmodule.exports = ProfileResponse;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar MessageSetType = require(\"../MessageSetType\");\nvar ResponseMessageSet = require(\"../ResponseMessageSet\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\n\n/**\n * @class\n * @augments ResponseMessageSet\n * @see \"Section 7 OFX Spec\"\n */\nfunction ProfileResponseMessageSet () {\n\n  /**\n   * @name ProfileResponseMessageSet#profileResponse\n   * @type ProfileResponseTransaction\n   * @access private\n   */\n  this.profileResponse = null;\n}\n\ninherit(ProfileResponseMessageSet, \"extends\", ResponseMessageSet);\n\n\nAggregate.add(\"PROFMSGSRSV1\", ProfileResponseMessageSet);\n\n\nProfileResponseMessageSet.prototype.getType = function() {\n  return MessageSetType.profile;\n};\n\n\n/**\n * The profile response.\n *\n * @return {ProfileResponseTransaction} The profile response.\n */\nProfileResponseMessageSet.prototype.getProfileResponse = function() {\n  return this.profileResponse;\n};\nChildAggregate.add({required: true, order: 0, owner: ProfileResponseMessageSet, /*type: ProfileResponseTransaction,*/ fcn: \"getProfileResponse\"});\n\n\n/**\n * The profile response.\n *\n * @param {ProfileResponseTransaction} profileResponse The profile response.\n */\nProfileResponseMessageSet.prototype.setProfileResponse = function(profileResponse) {\n  this.profileResponse = profileResponse;\n};\n\n\n// Inherited.\nProfileResponseMessageSet.prototype.getResponseMessages = function() {\n  var messages = [];\n\n  if (this.getProfileResponse() !== null) {\n    messages.add(this.getProfileResponse());\n  }\n\n  return messages;\n};\n\n\n\n\nmodule.exports = ProfileResponseMessageSet;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar TransactionWrappedResponseMessage = require(\"../TransactionWrappedResponseMessage\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ProfileResponse = require(\"./ProfileResponse\");\n\n/**\n * @class\n * @augments TransactionWrappedResponseMessage\n */\nfunction ProfileResponseTransaction () {\n\n  /**\n   * @name ProfileResponseTransaction#message\n   * @type ProfileResponse\n   * @access private\n   */\n  this.message = null;\n}\n\ninherit(ProfileResponseTransaction, \"extends\", new TransactionWrappedResponseMessage(ProfileResponse));\n\n\nAggregate.add(\"PROFTRNRS\", ProfileResponseTransaction);\n\n\n/**\n * The message.\n *\n * @return {ProfileResponse} The message.\n */\nProfileResponseTransaction.prototype.getMessage = function() {\n  return this.message;\n};\nChildAggregate.add({required: true, order: 30, owner: ProfileResponseTransaction, /*type: ProfileResponse,*/ fcn: \"getMessage\"});\n\n\n/**\n * The message.\n *\n * @param {ProfileResponse} message The message.\n */\nProfileResponseTransaction.prototype.setMessage = function(message) {\n  this.message = message;\n};\n\n\n// Inherited.\nProfileResponseTransaction.prototype.getWrappedMessage = function() {\n  return this.getMessage();\n};\n\n\n\n\nmodule.exports = ProfileResponseTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar SignonProfile = require(\"../SignonProfile\");\n\n/**\n * Sign-on information\n *\n * @class\n * @augments SignonProfile\n * @see \"Section 7.2.2, OFX Spec\"\n */\nfunction SignonInfo () {\n\n  /**\n   * @name SignonInfo#realm\n   * @type String\n   * @access private\n   */\n  this.realm = null;\n\n  /**\n   * @name SignonInfo#minPasswordCharacters\n   * @type Integer\n   * @access private\n   */\n  this.minPasswordCharacters = null;\n\n  /**\n   * @name SignonInfo#maxPasswordCharacters\n   * @type Integer\n   * @access private\n   */\n  this.maxPasswordCharacters = null;\n\n  /**\n   * @name SignonInfo#passwordCharacterType\n   * @type CharacterType\n   * @access private\n   */\n  this.passwordCharacterType = null;\n\n  /**\n   * @name SignonInfo#passwordCaseSensitive\n   * @type Boolean\n   * @access private\n   */\n  this.passwordCaseSensitive = true;\n\n  /**\n   * @name SignonInfo#passwordSpecialCharsAllowed\n   * @type Boolean\n   * @access private\n   */\n  this.passwordSpecialCharsAllowed = true;\n\n  /**\n   * @name SignonInfo#passwordSpacesAllowed\n   * @type Boolean\n   * @access private\n   */\n  this.passwordSpacesAllowed = true;\n\n  /**\n   * @name SignonInfo#changePasswordSupported\n   * @type Boolean\n   * @access private\n   */\n  this.changePasswordSupported = null;\n\n  /**\n   * @name SignonInfo#changePasswordFirstRequired\n   * @type Boolean\n   * @access private\n   */\n  this.changePasswordFirstRequired = null;\n\n  /**\n   * @name SignonInfo#additionalCredientialsLabel1\n   * @type String\n   * @access private\n   */\n  this.additionalCredientialsLabel1 = null;\n\n  /**\n   * @name SignonInfo#additionalCredientialsLabel2\n   * @type String\n   * @access private\n   */\n  this.additionalCredientialsLabel2 = null;\n\n  /**\n   * @name SignonInfo#clientUIDRequired\n   * @type Boolean\n   * @access private\n   */\n  this.clientUIDRequired = null;\n\n  /**\n   * @name SignonInfo#authTokenRequiredForFirstSignon\n   * @type Boolean\n   * @access private\n   */\n  this.authTokenRequiredForFirstSignon = null;\n\n  /**\n   * @name SignonInfo#authTokenLabel\n   * @type String\n   * @access private\n   */\n  this.authTokenLabel = null;\n\n  /**\n   * @name SignonInfo#authTokenInfoURL\n   * @type String\n   * @access private\n   */\n  this.authTokenInfoURL = null;\n\n  /**\n   * @name SignonInfo#mfaSupported\n   * @type Boolean\n   * @access private\n   */\n  this.mfaSupported = null;\n\n  /**\n   * @name SignonInfo#mfaChallengeRequiredForFirstSignon\n   * @type Boolean\n   * @access private\n   */\n  this.mfaChallengeRequiredForFirstSignon = null;\n}\n\ninherit(SignonInfo, \"implements\", SignonProfile);\n\n\nAggregate.add(\"SIGNONINFO\", SignonInfo);\n\n\n/**\n * The name of the sign-on realm.\n *\n * @return {String} The name of the sign-on realm.\n */\nSignonInfo.prototype.getRealm = function() {\n  return this.realm;\n};\nElement.add({name: \"SIGNONREALM\", required: true, order: 0, owner: SignonInfo, /*type: String,*/ fcn: \"getRealm\"});\n\n\n/**\n * The name of the sign-on realm.\n *\n * @param {String} realm The name of the sign-on realm.\n */\nSignonInfo.prototype.setRealm = function(realm) {\n  this.realm = realm;\n};\n\n\n/**\n * The minimum number of password characters.\n *\n * @return {Integer} The minimum number of password characters.\n */\nSignonInfo.prototype.getMinPasswordCharacters = function() {\n  return this.minPasswordCharacters;\n};\nElement.add({name: \"MIN\", required: true, order: 10, owner: SignonInfo, /*type: Integer,*/ fcn: \"getMinPasswordCharacters\"});\n\n\n/**\n * The minimum number of password characters.\n *\n * @param {Integer} minPasswordCharacters The minimum number of password characters.\n */\nSignonInfo.prototype.setMinPasswordCharacters = function(minPasswordCharacters) {\n  this.minPasswordCharacters = minPasswordCharacters;\n};\n\n\n/**\n * The maximum number of password characters.\n *\n * @return {Integer} The maximum number of password characters.\n */\nSignonInfo.prototype.getMaxPasswordCharacters = function() {\n  return this.maxPasswordCharacters;\n};\nElement.add({name: \"MAX\", required: true, order: 20, owner: SignonInfo, /*type: Integer,*/ fcn: \"getMaxPasswordCharacters\"});\n\n\n/**\n * The maximum number of password characters.\n *\n * @param {Integer} maxPasswordCharacters The maximum number of password characters.\n */\nSignonInfo.prototype.setMaxPasswordCharacters = function(maxPasswordCharacters) {\n  this.maxPasswordCharacters = maxPasswordCharacters;\n};\n\n\n/**\n * The type of password characters supported.\n *\n * @return {CharacterType} The type of password characters supported.\n */\nSignonInfo.prototype.getPasswordCharacterType = function() {\n  return this.passwordCharacterType;\n};\nElement.add({name: \"CHARTYPE\", required: true, order: 30, owner: SignonInfo, /*type: CharacterType,*/ fcn: \"getPasswordCharacterType\"});\n\n\n/**\n * The type of password characters supported.\n *\n * @param {CharacterType} passwordCharacterType The type of password characters supported.\n */\nSignonInfo.prototype.setPasswordCharacterType = function(passwordCharacterType) {\n  this.passwordCharacterType = passwordCharacterType;\n};\n\n\n/**\n * Whether the password is case-sensitive.\n *\n * @return {Boolean} Whether the password is case-sensitive.\n */\nSignonInfo.prototype.getPasswordCaseSensitive = function() {\n  return this.passwordCaseSensitive;\n};\nElement.add({name: \"CASESEN\", required: true, order: 40, owner: SignonInfo, /*type: Boolean,*/ fcn: \"getPasswordCaseSensitive\"});\n\n\n/**\n * Whether the password is case-sensitive.\n *\n * @param {Boolean} passwordCaseSensitive Whether the password is case-sensitive.\n */\nSignonInfo.prototype.setPasswordCaseSensitive = function(passwordCaseSensitive) {\n  this.passwordCaseSensitive = passwordCaseSensitive;\n};\n\n\n/**\n * Whether special characters are allowed in the password.\n *\n * @return {Boolean} Whether special characters are allowed in the password.\n */\nSignonInfo.prototype.getPasswordSpecialCharsAllowed = function() {\n  return this.passwordSpecialCharsAllowed;\n};\nElement.add({name: \"SPECIAL\", required: true, order: 50, owner: SignonInfo, /*type: Boolean,*/ fcn: \"getPasswordSpecialCharsAllowed\"});\n\n\n/**\n * Whether special characters are allowed in the password.\n *\n * @param {Boolean} passwordSpecialCharsAllowed Whether special characters are allowed in the password.\n */\nSignonInfo.prototype.setPasswordSpecialCharsAllowed = function(passwordSpecialCharsAllowed) {\n  this.passwordSpecialCharsAllowed = passwordSpecialCharsAllowed;\n};\n\n\n/**\n * Whether spaces are allowed in the password.\n *\n * @return {Boolean} Whether spaces are allowed in the password.\n */\nSignonInfo.prototype.getPasswordSpacesAllowed = function() {\n  return this.passwordSpacesAllowed;\n};\nElement.add({name: \"SPACES\", required: true, order: 60, owner: SignonInfo, /*type: Boolean,*/ fcn: \"getPasswordSpacesAllowed\"});\n\n\n/**\n * Whether spaces are allowed in the password.\n *\n * @param {Boolean} passwordSpacesAllowed Whether spaces are allowed in the password.\n */\nSignonInfo.prototype.setPasswordSpacesAllowed = function(passwordSpacesAllowed) {\n  this.passwordSpacesAllowed = passwordSpacesAllowed;\n};\n\n\n/**\n * Whether the server can process a password change request for this realm.\n *\n * @return {Boolean} Whether the server can process a password change request for this realm.\n */\nSignonInfo.prototype.getChangePasswordSupported = function() {\n  return this.changePasswordSupported;\n};\nElement.add({name: \"PINCH\", required: true, order: 70, owner: SignonInfo, /*type: Boolean,*/ fcn: \"getChangePasswordSupported\"});\n\n\n/**\n * Whether the server can process a password change request for this realm.\n *\n * @param {Boolean} changePasswordSupported Whether the server can process a password change request for this realm.\n */\nSignonInfo.prototype.setChangePasswordSupported = function(changePasswordSupported) {\n  this.changePasswordSupported = changePasswordSupported;\n};\n\n\n/**\n * Whether the server requires the user to change their password as part of their first signon.\n *\n * @return {Boolean} Whether the server requires the user to change their password as part of their first signon.\n */\nSignonInfo.prototype.getChangePasswordFirstRequired = function() {\n  return this.changePasswordFirstRequired;\n};\nElement.add({name: \"CHGPINFIRST\", required: true, order: 80, owner: SignonInfo, /*type: Boolean,*/ fcn: \"getChangePasswordFirstRequired\"});\n\n\n/**\n * Whether the server requires the user to change their password as part of their first signon.\n *\n * @param {Boolean} changePasswordFirstRequired Whether the server requires the user to change their password as part of their first signon.\n */\nSignonInfo.prototype.setChangePasswordFirstRequired = function(changePasswordFirstRequired) {\n  this.changePasswordFirstRequired = changePasswordFirstRequired;\n};\n\n\n/**\n * Label for a set of additional credentials that the user must supply.\n *\n * @return {String} Label for a set of additional credentials that the user must supply.\n */\nSignonInfo.prototype.getAdditionalCredientialsLabel1 = function() {\n  return this.additionalCredientialsLabel1;\n};\nElement.add({name: \"USERCRED1LABEL\", order: 90, owner: SignonInfo, /*type: String,*/ fcn: \"getAdditionalCredientialsLabel1\"});\n\n\n/**\n * Label for a set of additional credentials that the user must supply.\n *\n * @param {String} additionalCredientialsLabel1 Label for a set of additional credentials that the user must supply.\n */\nSignonInfo.prototype.setAdditionalCredientialsLabel1 = function(additionalCredientialsLabel1) {\n  this.additionalCredientialsLabel1 = additionalCredientialsLabel1;\n};\n\n\n/**\n * Label for a set of additional credentials that the user must supply.\n *\n * @return {String} Label for a set of additional credentials that the user must supply.\n */\nSignonInfo.prototype.getAdditionalCredientialsLabel2 = function() {\n  return this.additionalCredientialsLabel2;\n};\nElement.add({name: \"USERCRED2LABEL\", order: 100, owner: SignonInfo, /*type: String,*/ fcn: \"getAdditionalCredientialsLabel2\"});\n\n\n/**\n * Label for a set of additional credentials that the user must supply.\n *\n * @param {String} additionalCredientialsLabel2 Label for a set of additional credentials that the user must supply.\n */\nSignonInfo.prototype.setAdditionalCredientialsLabel2 = function(additionalCredientialsLabel2) {\n  this.additionalCredientialsLabel2 = additionalCredientialsLabel2;\n};\n\n\n/**\n * Whether a client UID is required for teh sign-on.\n *\n * @return {Boolean} Whether a client UID is required for teh sign-on.\n */\nSignonInfo.prototype.getClientUIDRequired = function() {\n  return this.clientUIDRequired;\n};\nElement.add({name: \"CLIENTUIDREQ\", order: 110, owner: SignonInfo, /*type: Boolean,*/ fcn: \"getClientUIDRequired\"});\n\n\n/**\n * Whether a client UID is required for teh sign-on.\n *\n * @param {Boolean} clientUIDRequired Whether a client UID is required for teh sign-on.\n */\nSignonInfo.prototype.setClientUIDRequired = function(clientUIDRequired) {\n  this.clientUIDRequired = clientUIDRequired;\n};\n\n\n/**\n * Whether an auth token is required for the sign-on.\n *\n * @return {Boolean} Whether an auth token is required for the sign-on.\n */\nSignonInfo.prototype.getAuthTokenRequiredForFirstSignon = function() {\n  return this.authTokenRequiredForFirstSignon;\n};\nElement.add({name: \"AUTHTOKENFIRST\", order: 120, owner: SignonInfo, /*type: Boolean,*/ fcn: \"getAuthTokenRequiredForFirstSignon\"});\n\n\n/**\n * Whether an auth token is required for the sign-on.\n *\n * @param {Boolean} authTokenRequiredForFirstSignon\n *         Whether an auth token is required for the sign-on.\n */\nSignonInfo.prototype.setAuthTokenRequiredForFirstSignon = function(authTokenRequiredForFirstSignon) {\n  this.authTokenRequiredForFirstSignon = authTokenRequiredForFirstSignon;\n};\n\n\n/**\n * The label of the auth token.\n *\n * @return {String} The label of the auth token.\n */\nSignonInfo.prototype.getAuthTokenLabel = function() {\n  return this.authTokenLabel;\n};\nElement.add({name: \"AUTHTOKENLABEL\", order: 130, owner: SignonInfo, /*type: String,*/ fcn: \"getAuthTokenLabel\"});\n\n\n/**\n * The label of the auth token.\n *\n * @param {String} authTokenLabel The label of the auth token.\n */\nSignonInfo.prototype.setAuthTokenLabel = function(authTokenLabel) {\n  this.authTokenLabel = authTokenLabel;\n};\n\n\n/**\n * The URL for the auth token information.\n *\n * @return {String} The URL for the auth token information.\n */\nSignonInfo.prototype.getAuthTokenInfoURL = function() {\n  return this.authTokenInfoURL;\n};\nElement.add({name: \"AUTHTOKENINFOURL\", order: 140, owner: SignonInfo, /*type: String,*/ fcn: \"getAuthTokenInfoURL\"});\n\n\n/**\n * The URL for the auth token information.\n *\n * @param {String} authTokenInfoURL The URL for the auth token information.\n */\nSignonInfo.prototype.setAuthTokenInfoURL = function(authTokenInfoURL) {\n  this.authTokenInfoURL = authTokenInfoURL;\n};\n\n\n/**\n * Whether MFA is supported.\n *\n * @return {Boolean} Whether MFA is supported.\n */\nSignonInfo.prototype.getMfaSupported = function() {\n  return this.mfaSupported;\n};\nElement.add({name: \"MFACHALLENGESUPT\", order: 150, owner: SignonInfo, /*type: Boolean,*/ fcn: \"getMfaSupported\"});\n\n\n/**\n * Whether MFA is supported.\n *\n * @param {Boolean} mfaSupported Whether MFA is supported.\n */\nSignonInfo.prototype.setMfaSupported = function(mfaSupported) {\n  this.mfaSupported = mfaSupported;\n};\n\n\n/**\n * Whether an MFA challenge request is required for the first sign-on into this realm.\n *\n * @return {Boolean} Whether an MFA challenge request is required for the first sign-on into this realm.\n */\nSignonInfo.prototype.getMfaChallengeRequiredForFirstSignon = function() {\n  return this.mfaChallengeRequiredForFirstSignon;\n};\nElement.add({name: \"MFACHALLENGEFIRST\", order: 160, owner: SignonInfo, /*type: Boolean,*/ fcn: \"getMfaChallengeRequiredForFirstSignon\"});\n\n\n/**\n * Whether an MFA challenge request is required for the first sign-on into this realm.\n *\n * @param {Boolean} mfaChallengeRequiredForFirstSignon\n *         Whether an MFA challenge request is required for the first sign-on into this realm.\n */\nSignonInfo.prototype.setMfaChallengeRequiredForFirstSignon = function(mfaChallengeRequiredForFirstSignon) {\n  this.mfaChallengeRequiredForFirstSignon = mfaChallengeRequiredForFirstSignon;\n};\n\n\n\n\nmodule.exports = SignonInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\n\n//import java.util.List;\n\n/**\n * List of signon information.\n *\n * @class\n * @see \"Section 7.2.2, OFX Spec\"\n */\nfunction SignonInfoList () {\n\n  /**\n   * @name SignonInfoList#infoList\n   * @type List<SignonInfo>\n   * @access private\n   */\n  this.infoList = null;\n}\n\n\n\nAggregate.add(\"SIGNONINFOLIST\", SignonInfoList);\n\n\n/**\n * List of sign-on information.\n *\n * @return {SignonInfo[]} List of sign-on information.\n */\nSignonInfoList.prototype.getInfoList = function() {\n  return this.infoList;\n};\nChildAggregate.add({order: 0, owner: SignonInfoList, /*type: SignonInfo[],*/ fcn: \"getInfoList\"});\n\n\n/**\n * List of sign-on information.\n *\n * @param {SignonInfo[]} infoList List of sign-on information.\n */\nSignonInfoList.prototype.setInfoList = function(infoList) {\n  this.infoList = infoList;\n};\n\n\n\n\nmodule.exports = SignonInfoList;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * @enum\n * @see \"Section 7.2.1, OFX Spec\"\n */\nvar SynchronizationCapability = {\n\n  FULL: 0,\n\n  LITE: 1\n};\n\n\nmodule.exports = SynchronizationCapability;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar MessageSetProfile = require(\"../MessageSetProfile\");\n\n/**\n * Information specific to a version of a message set.\n *\n * @author Ryan Heaton\n * @see \"Section 7.2.1, OFX Spec\"\n */\nfunction VersionSpecificMessageSetInfo () {\n\n  /**\n   * @name VersionSpecificMessageSetInfo#core\n   * @type CoreMessageSetInfo\n   * @access private\n   */\n  this.core = null;\n}\n\ninherit(VersionSpecificMessageSetInfo, \"implements\", MessageSetProfile);\n\n\n\n\n/**\n * The information core.\n *\n * @return {CoreMessageSetInfo} The information core.\n */\nVersionSpecificMessageSetInfo.prototype.getCore = function() {\n  return this.core;\n};\nChildAggregate.add({order: 0, owner: VersionSpecificMessageSetInfo, /*type: CoreMessageSetInfo,*/ fcn: \"getCore\"});\n\n\n/**\n * The information core.\n *\n * @param {CoreMessageSetInfo} core The information core.\n */\nVersionSpecificMessageSetInfo.prototype.setCore = function(core) {\n  this.core = core;\n};\n\n\n/**\n * The message set type.\n *\n * @return {MessageSetType} The message set type.\n */\nVersionSpecificMessageSetInfo.prototype.getMessageSetType = function() { throw new Error(\"not implemented\"); };\n\nVersionSpecificMessageSetInfo.prototype.getVersion = function() {\n  return this.core !== null ? this.core.getVersion() : null;\n};\n\nVersionSpecificMessageSetInfo.prototype.getServiceProviderName = function() {\n  return this.core !== null ? this.core.getServiceProviderName() : null;\n};\n\nVersionSpecificMessageSetInfo.prototype.getUrl = function() {\n  return this.core !== null ? this.core.getUrl() : null;\n};\n\nVersionSpecificMessageSetInfo.prototype.getSecurity = function() {\n  return this.core !== null ? this.core.getSecurity() : null;\n};\n\nVersionSpecificMessageSetInfo.prototype.isSslRequired = function() {\n  return this.core !== null && this.core.getSslRequired() !== null ? this.core.getSslRequired() : true;\n};\n\nVersionSpecificMessageSetInfo.prototype.getRealm = function() {\n  return this.core !== null ? this.core.getRealm() : null;\n};\n\nVersionSpecificMessageSetInfo.prototype.getLanguage = function() {\n  return this.core !== null ? this.core.getLanguage() : null;\n};\n\nVersionSpecificMessageSetInfo.prototype.getSyncCapability = function() {\n  return this.core !== null ? this.core.getSyncCapability() : null;\n};\n\nVersionSpecificMessageSetInfo.prototype.hasFileBasedErrorRecoverySupport = function() {\n  return this.core !== null && this.core.getFileBasedErrorRecoverySupport() !== null ? this.core.getFileBasedErrorRecoverySupport() : false;\n};\n\n\n\n\nmodule.exports = VersionSpecificMessageSetInfo;\n","\"use strict\";\n\nmodule.exports = {\n  info: require(\"./info/index\"),\n  AbstractMessageSetInfo: require(\"./AbstractMessageSetInfo\"),\n  CharacterType: require(\"./CharacterType\"),\n  ClientRoutingCapability: require(\"./ClientRoutingCapability\"),\n  CoreMessageSetInfo: require(\"./CoreMessageSetInfo\"),\n  MessageSetInfoList: require(\"./MessageSetInfoList\"),\n  ProfileRequest: require(\"./ProfileRequest\"),\n  ProfileRequestMessageSet: require(\"./ProfileRequestMessageSet\"),\n  ProfileRequestTransaction: require(\"./ProfileRequestTransaction\"),\n  ProfileResponse: require(\"./ProfileResponse\"),\n  ProfileResponseMessageSet: require(\"./ProfileResponseMessageSet\"),\n  ProfileResponseTransaction: require(\"./ProfileResponseTransaction\"),\n  SignonInfo: require(\"./SignonInfo\"),\n  SignonInfoList: require(\"./SignonInfoList\"),\n  SynchronizationCapability: require(\"./SynchronizationCapability\"),\n  VersionSpecificMessageSetInfo: require(\"./VersionSpecificMessageSetInfo\"),\n};\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar AbstractMessageSetInfo = require(\"../../profile/AbstractMessageSetInfo\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\n\n/**\n * @class\n * @augments AbstractMessageSetInfo\n */\nfunction BankingMessageSetInfo () {\n\n  /**\n   * @name BankingMessageSetInfo#version1Info\n   * @type BankingV1MessageSetInfo\n   * @access private\n   */\n  this.version1Info = null;\n}\n\ninherit(BankingMessageSetInfo, \"extends\", AbstractMessageSetInfo);\n\n\nAggregate.add(\"BANKMSGSET\", BankingMessageSetInfo);\n\n\nBankingMessageSetInfo.prototype.getVersion1Info = function() {\n  return this.version1Info;\n};\nChildAggregate.add({order: 0, owner: BankingMessageSetInfo, /*type: BankingV1MessageSetInfo,*/ fcn: \"getVersion1Info\"});\n\n\nBankingMessageSetInfo.prototype.setVersion1Info = function(/*BankingV1MessageSetInfo*/ version1Info) {\n  this.version1Info = version1Info;\n};\n\n\n\n\nmodule.exports = BankingMessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar VersionSpecificMessageSetInfo = require(\"../VersionSpecificMessageSetInfo\");\nvar MessageSetType = require(\"../../MessageSetType\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\n\n/**\n * Banking Message Set Profile\n * @class\n * @augments VersionSpecificMessageSetInfo\n * @see \"Section 11.13.2.1 OFX Spec\"\n */\nfunction BankingV1MessageSetInfo () {\n\n  /**\n   * @name BankingV1MessageSetInfo#invalidAccountTypes\n   * @type List<AccountType>\n   * @access private\n   */\n  this.invalidAccountTypes = null;\n\n  /**\n   * @name BankingV1MessageSetInfo#closingAvail\n   * @type Boolean\n   * @access private\n   */\n  this.closingAvail = null;\n\n  /**\n   * @name BankingV1MessageSetInfo#transferProfile\n   * @type TransferProfile\n   * @access private\n   */\n  this.transferProfile = null;\n\n  /**\n   * @name BankingV1MessageSetInfo#stopCheckProfile\n   * @type StopCheckProfile\n   * @access private\n   */\n  this.stopCheckProfile = null;\n\n  /**\n   * @name BankingV1MessageSetInfo#emailProfile\n   * @type EmailProfile\n   * @access private\n   */\n  this.emailProfile = null;\n\n  /**\n   * @name BankingV1MessageSetInfo#imageProfile\n   * @type ImageProfile\n   * @access private\n   */\n  this.imageProfile = null;\n}\n\ninherit(BankingV1MessageSetInfo, \"extends\", VersionSpecificMessageSetInfo);\n\n\nAggregate.add(\"BANKMSGSETV1\", BankingV1MessageSetInfo);\n\n\nBankingV1MessageSetInfo.prototype.getMessageSetType = function() {\n  return MessageSetType.banking;\n};\n\n\n/**\n * The invalidAccountTypes list.\n *\n * @return {AccountType[]} The invalidAccountTypes list.\n */\nBankingV1MessageSetInfo.prototype.getInvalidAccountTypes = function() {\n  return this.invalidAccountTypes;\n};\nChildAggregate.add({order: 10, owner: BankingV1MessageSetInfo, /*type: AccountType[],*/ fcn: \"getInvalidAccountTypes\"});\n\n\n/**\n * The invalidAccountTypes list.\n *\n * @param {AccountType[]} invalidAccountTypes The invalidAccountTypes list.\n */\nBankingV1MessageSetInfo.prototype.setInvalidAccountTypes = function(invalidAccountTypes) {\n  this.invalidAccountTypes = invalidAccountTypes;\n};\n\n\n/**\n * Gets whether closing statement information is available\n *\n * @return {Boolean} whether closing statement information is available\n */\nBankingV1MessageSetInfo.prototype.getClosingAvail = function() {\n  return this.closingAvail;\n};\nElement.add({name: \"CLOSINGAVAIL\", required: true, order: 20, owner: BankingV1MessageSetInfo, /*type: Boolean,*/ fcn: \"getClosingAvail\"});\n\n\n/**\n * Sets whether closing statement information is available\n *\n * @param {Boolean} closingAvail whether closing statement information is available\n */\nBankingV1MessageSetInfo.prototype.setClosingAvail = function(closingAvail) {\n  this.closingAvail = closingAvail;\n};\n\n\nBankingV1MessageSetInfo.prototype.getTransferProfile = function() {\n  return this.transferProfile;\n};\nChildAggregate.add({name: \"XFERPROF\", order: 30, owner: BankingV1MessageSetInfo, /*type: TransferProfile,*/ fcn: \"getTransferProfile\"});\n\n\nBankingV1MessageSetInfo.prototype.setTransferProfile = function(/*TransferProfile*/ transferProfile) {\n  this.transferProfile = transferProfile;\n};\n\n\nBankingV1MessageSetInfo.prototype.getStopCheckProfile = function() {\n  return this.stopCheckProfile;\n};\nChildAggregate.add({name: \"STPCKPROF\", order: 40, owner: BankingV1MessageSetInfo, /*type: StopCheckProfile,*/ fcn: \"getStopCheckProfile\"});\n\n\nBankingV1MessageSetInfo.prototype.setStopCheckProfile = function(/*StopCheckProfile*/ stopCheckProfile) {\n  this.stopCheckProfile = stopCheckProfile;\n};\n\n\nBankingV1MessageSetInfo.prototype.getEmailProfile = function() {\n  return this.emailProfile;\n};\nChildAggregate.add({name: \"EMAILPROF\", required: true, order: 50, owner: BankingV1MessageSetInfo, /*type: EmailProfile,*/ fcn: \"getEmailProfile\"});\n\n\nBankingV1MessageSetInfo.prototype.setEmailProfile = function(/*EmailProfile*/ emailProfile) {\n  this.emailProfile = emailProfile;\n};\n\n\nBankingV1MessageSetInfo.prototype.getImageProfile = function() {\n  return this.imageProfile;\n};\nChildAggregate.add({name: \"IMAGEPROF\", order: 60, owner: BankingV1MessageSetInfo, /*type: ImageProfile,*/ fcn: \"getImageProfile\"});\n\n\nBankingV1MessageSetInfo.prototype.setImageProfile = function(/*ImageProfile*/ imageProfile) {\n  this.imageProfile = imageProfile;\n};\n\n\n\n\nmodule.exports = BankingV1MessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar AbstractMessageSetInfo = require(\"../../profile/AbstractMessageSetInfo\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\n\n/**\n * @class\n * @augments AbstractMessageSetInfo\n */\nfunction BillpayMessageSetInfo () {\n\n  /**\n   * @name BillpayMessageSetInfo#version1Info\n   * @type BillpayV1MessageSetInfo\n   * @access private\n   */\n  this.version1Info = null;\n}\n\ninherit(BillpayMessageSetInfo, \"extends\", AbstractMessageSetInfo);\n\n\nAggregate.add(\"BILLPAYMSGSET\", BillpayMessageSetInfo);\n\n\nBillpayMessageSetInfo.prototype.getVersion1Info = function() {\n  return this.version1Info;\n};\nChildAggregate.add({order: 0, owner: BillpayMessageSetInfo, /*type: BillpayV1MessageSetInfo,*/ fcn: \"getVersion1Info\"});\n\n\nBillpayMessageSetInfo.prototype.setVersion1Info = function(/*BillpayV1MessageSetInfo*/ version1Info) {\n  this.version1Info = version1Info;\n};\n\n\n\n\nmodule.exports = BillpayMessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar VersionSpecificMessageSetInfo = require(\"../../profile/VersionSpecificMessageSetInfo\");\nvar MessageSetType = require(\"../../MessageSetType\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\n\n/**\n * BillPay Message Set Profile\n * @class\n * @augments VersionSpecificMessageSetInfo\n * @see \"Section 12.11.2 OFX Spec\"\n */\nfunction BillpayV1MessageSetInfo () {\n\n  /**\n   * @name BillpayV1MessageSetInfo#daysWith\n   * @type Integer\n   * @access private\n   */\n  this.daysWith = null;\n\n  /**\n   * @name BillpayV1MessageSetInfo#defaultDaysToPay\n   * @type Integer\n   * @access private\n   */\n  this.defaultDaysToPay = null;\n\n  /**\n   * @name BillpayV1MessageSetInfo#transferDaysWith\n   * @type Integer\n   * @access private\n   */\n  this.transferDaysWith = null;\n\n  /**\n   * @name BillpayV1MessageSetInfo#transferDefaultDaysToPay\n   * @type Integer\n   * @access private\n   */\n  this.transferDefaultDaysToPay = null;\n\n  /**\n   * @name BillpayV1MessageSetInfo#processorDaysOff\n   * @type List<ProcessorDayOff>\n   * @access private\n   */\n  this.processorDaysOff = null;\n\n  /**\n   * @name BillpayV1MessageSetInfo#processorEndTime\n   * @type String\n   * @access private\n   */\n  this.processorEndTime = null;\n\n  /**\n   * @name BillpayV1MessageSetInfo#modelWindow\n   * @type Integer\n   * @access private\n   */\n  this.modelWindow = null;\n\n  /**\n   * @name BillpayV1MessageSetInfo#postProcessorWindow\n   * @type Integer\n   * @access private\n   */\n  this.postProcessorWindow = null;\n\n  /**\n   * @name BillpayV1MessageSetInfo#supportsStatusUpdateViaPaymentModificationResponse\n   * @type Boolean\n   * @access private\n   */\n  this.supportsStatusUpdateViaPaymentModificationResponse = null;\n\n  /**\n   * @name BillpayV1MessageSetInfo#supportsPaymentByAddress\n   * @type Boolean\n   * @access private\n   */\n  this.supportsPaymentByAddress = null;\n\n  /**\n   * @name BillpayV1MessageSetInfo#supportsPaymentByTransfer\n   * @type Boolean\n   * @access private\n   */\n  this.supportsPaymentByTransfer = null;\n\n  /**\n   * @name BillpayV1MessageSetInfo#supportsPaymentByPayeeId\n   * @type Boolean\n   * @access private\n   */\n  this.supportsPaymentByPayeeId = null;\n\n  /**\n   * @name BillpayV1MessageSetInfo#userCanAddPayee\n   * @type Boolean\n   * @access private\n   */\n  this.userCanAddPayee = null;\n\n  /**\n   * @name BillpayV1MessageSetInfo#supportsExtendedPayment\n   * @type Boolean\n   * @access private\n   */\n  this.supportsExtendedPayment = null;\n\n  /**\n   * @name BillpayV1MessageSetInfo#canModifyPayments\n   * @type Boolean\n   * @access private\n   */\n  this.canModifyPayments = null;\n\n  /**\n   * @name BillpayV1MessageSetInfo#canModifyModels\n   * @type Boolean\n   * @access private\n   */\n  this.canModifyModels = null;\n\n  /**\n   * @name BillpayV1MessageSetInfo#supportsDifferentFirstPayment\n   * @type Boolean\n   * @access private\n   */\n  this.supportsDifferentFirstPayment = null;\n\n  /**\n   * @name BillpayV1MessageSetInfo#supportsDifferentLastPayment\n   * @type Boolean\n   * @access private\n   */\n  this.supportsDifferentLastPayment = null;\n\n  /**\n   * @name BillpayV1MessageSetInfo#supportsBillPresentmentContext\n   * @type Boolean\n   * @access private\n   */\n  this.supportsBillPresentmentContext = null;\n}\n\ninherit(BillpayV1MessageSetInfo, \"extends\", VersionSpecificMessageSetInfo);\n\n\nAggregate.add(\"BILLPAYMSGSETV1\", BillpayV1MessageSetInfo);\n\n\nBillpayV1MessageSetInfo.prototype.getMessageSetType = function() {\n  return MessageSetType.payments;\n};\n\n\nBillpayV1MessageSetInfo.prototype.getDaysWith = function() {\n  return this.daysWith;\n};\nElement.add({name: \"DAYSWITH\", required: true, order: 10, owner: BillpayV1MessageSetInfo, /*type: Integer,*/ fcn: \"getDaysWith\"});\n\n\nBillpayV1MessageSetInfo.prototype.setDaysWith = function(/*Integer*/ daysWith) {\n  this.daysWith = daysWith;\n};\n\n\nBillpayV1MessageSetInfo.prototype.getDefaultDaysToPay = function() {\n  return this.defaultDaysToPay;\n};\nElement.add({name: \"DFLTDAYSTOPAY\", required: true, order: 20, owner: BillpayV1MessageSetInfo, /*type: Integer,*/ fcn: \"getDefaultDaysToPay\"});\n\n\nBillpayV1MessageSetInfo.prototype.setDefaultDaysToPay = function(/*Integer*/ defaultDaysToPay) {\n  this.defaultDaysToPay = defaultDaysToPay;\n};\n\n\nBillpayV1MessageSetInfo.prototype.getTransferDaysWith = function() {\n  return this.transferDaysWith;\n};\nElement.add({name: \"XFERDAYSWITH\", required: true, order: 30, owner: BillpayV1MessageSetInfo, /*type: Integer,*/ fcn: \"getTransferDaysWith\"});\n\n\nBillpayV1MessageSetInfo.prototype.setTransferDaysWith = function(/*Integer*/ transferDaysWith) {\n  this.transferDaysWith = transferDaysWith;\n};\n\n\nBillpayV1MessageSetInfo.prototype.getTransferDefaultDaysToPay = function() {\n  return this.transferDefaultDaysToPay;\n};\nElement.add({name: \"XFERDFLTDAYSTOPAY\", required: true, order: 40, owner: BillpayV1MessageSetInfo, /*type: Integer,*/ fcn: \"getTransferDefaultDaysToPay\"});\n\n\nBillpayV1MessageSetInfo.prototype.setTransferDefaultDaysToPay = function(/*Integer*/ transferDefaultDaysToPay) {\n  this.transferDefaultDaysToPay = transferDefaultDaysToPay;\n};\n\n\nBillpayV1MessageSetInfo.prototype.getProcessorDaysOff = function() {\n  return this.processorDaysOff;\n};\nElement.add({name: \"PROCDAYSOFF\", order: 50, owner: BillpayV1MessageSetInfo, /*type: ProcessorDayOff[],*/ fcn: \"getProcessorDaysOff\"});\n\n\nBillpayV1MessageSetInfo.prototype.setProcessorDaysOff = function(/*ProcessorDayOff[]*/ processorDaysOff) {\n  this.processorDaysOff = processorDaysOff;\n};\n\n\nBillpayV1MessageSetInfo.prototype.getProcessorEndTime = function() {\n  return this.processorEndTime;\n};\nElement.add({name: \"PROCENDTM\", required: true, order: 60, owner: BillpayV1MessageSetInfo, /*type: String,*/ fcn: \"getProcessorEndTime\"});\n\n\nBillpayV1MessageSetInfo.prototype.setProcessorEndTime = function(/*String*/ processorEndTime) {\n  this.processorEndTime = processorEndTime;\n};\n\n\nBillpayV1MessageSetInfo.prototype.getModelWindow = function() {\n  return this.modelWindow;\n};\nElement.add({name: \"MODELWND\", required: true, order: 70, owner: BillpayV1MessageSetInfo, /*type: Integer,*/ fcn: \"getModelWindow\"});\n\n\nBillpayV1MessageSetInfo.prototype.setModelWindow = function(/*Integer*/ modelWindow) {\n  this.modelWindow = modelWindow;\n};\n\n\nBillpayV1MessageSetInfo.prototype.getPostProcessorWindow = function() {\n  return this.postProcessorWindow;\n};\nElement.add({name: \"POSTPROCWND\", required: true, order: 80, owner: BillpayV1MessageSetInfo, /*type: Integer,*/ fcn: \"getPostProcessorWindow\"});\n\n\nBillpayV1MessageSetInfo.prototype.setPostProcessorWindow = function(/*Integer*/ postProcessorWindow) {\n  this.postProcessorWindow = postProcessorWindow;\n};\n\n\nBillpayV1MessageSetInfo.prototype.getSupportsStatusUpdateViaPaymentModificationResponse = function() {\n  return this.supportsStatusUpdateViaPaymentModificationResponse;\n};\nElement.add({name: \"STSVIAMODS\", required: true, order: 90, owner: BillpayV1MessageSetInfo, /*type: Boolean,*/ fcn: \"getSupportsStatusUpdateViaPaymentModificationResponse\"});\n\n\nBillpayV1MessageSetInfo.prototype.setSupportsStatusUpdateViaPaymentModificationResponse = function(/*Boolean*/ supportsStatusUpdateViaPaymentModificationResponse) {\n  this.supportsStatusUpdateViaPaymentModificationResponse = supportsStatusUpdateViaPaymentModificationResponse;\n};\n\n\nBillpayV1MessageSetInfo.prototype.getSupportsPaymentByAddress = function() {\n  return this.supportsPaymentByAddress;\n};\nElement.add({name: \"PMTBYADDR\", required: true, order: 100, owner: BillpayV1MessageSetInfo, /*type: Boolean,*/ fcn: \"getSupportsPaymentByAddress\"});\n\n\nBillpayV1MessageSetInfo.prototype.setSupportsPaymentByAddress = function(/*Boolean*/ supportsPaymentByAddress) {\n  this.supportsPaymentByAddress = supportsPaymentByAddress;\n};\n\n\nBillpayV1MessageSetInfo.prototype.getSupportsPaymentByTransfer = function() {\n  return this.supportsPaymentByTransfer;\n};\nElement.add({name: \"PMTBYXFER\", required: true, order: 110, owner: BillpayV1MessageSetInfo, /*type: Boolean,*/ fcn: \"getSupportsPaymentByTransfer\"});\n\n\nBillpayV1MessageSetInfo.prototype.setSupportsPaymentByTransfer = function(/*Boolean*/ supportsPaymentByTransfer) {\n  this.supportsPaymentByTransfer = supportsPaymentByTransfer;\n};\n\n\nBillpayV1MessageSetInfo.prototype.getSupportsPaymentByPayeeId = function() {\n  return this.supportsPaymentByPayeeId;\n};\nElement.add({name: \"PMTBYPAYEEID\", required: true, order: 120, owner: BillpayV1MessageSetInfo, /*type: Boolean,*/ fcn: \"getSupportsPaymentByPayeeId\"});\n\n\nBillpayV1MessageSetInfo.prototype.setSupportsPaymentByPayeeId = function(/*Boolean*/ supportsPaymentByPayeeId) {\n  this.supportsPaymentByPayeeId = supportsPaymentByPayeeId;\n};\n\n\nBillpayV1MessageSetInfo.prototype.getUserCanAddPayee = function() {\n  return this.userCanAddPayee;\n};\nElement.add({name: \"CANADDPAYEE\", required: true, order: 130, owner: BillpayV1MessageSetInfo, /*type: Boolean,*/ fcn: \"getUserCanAddPayee\"});\n\n\nBillpayV1MessageSetInfo.prototype.setUserCanAddPayee = function(/*Boolean*/ userCanAddPayee) {\n  this.userCanAddPayee = userCanAddPayee;\n};\n\n\nBillpayV1MessageSetInfo.prototype.getSupportsExtendedPayment = function() {\n  return this.supportsExtendedPayment;\n};\nElement.add({name: \"HASEXTDPMT\", required: true, order: 140, owner: BillpayV1MessageSetInfo, /*type: Boolean,*/ fcn: \"getSupportsExtendedPayment\"});\n\n\nBillpayV1MessageSetInfo.prototype.setSupportsExtendedPayment = function(/*Boolean*/ supportsExtendedPayment) {\n  this.supportsExtendedPayment = supportsExtendedPayment;\n};\n\n\nBillpayV1MessageSetInfo.prototype.getCanModifyPayments = function() {\n  return this.canModifyPayments;\n};\nElement.add({name: \"CANMODPMTS\", required: true, order: 150, owner: BillpayV1MessageSetInfo, /*type: Boolean,*/ fcn: \"getCanModifyPayments\"});\n\n\nBillpayV1MessageSetInfo.prototype.setCanModifyPayments = function(/*Boolean*/ canModifyPayments) {\n  this.canModifyPayments = canModifyPayments;\n};\n\n\nBillpayV1MessageSetInfo.prototype.getCanModifyModels = function() {\n  return this.canModifyModels;\n};\nElement.add({name: \"CANMODMDLS\", required: true, order: 160, owner: BillpayV1MessageSetInfo, /*type: Boolean,*/ fcn: \"getCanModifyModels\"});\n\n\nBillpayV1MessageSetInfo.prototype.setCanModifyModels = function(/*Boolean*/ canModifyModels) {\n  this.canModifyModels = canModifyModels;\n};\n\n\nBillpayV1MessageSetInfo.prototype.getSupportsDifferentFirstPayment = function() {\n  return this.supportsDifferentFirstPayment;\n};\nElement.add({name: \"DIFFFIRSTPMT\", required: true, order: 170, owner: BillpayV1MessageSetInfo, /*type: Boolean,*/ fcn: \"getSupportsDifferentFirstPayment\"});\n\n\nBillpayV1MessageSetInfo.prototype.setSupportsDifferentFirstPayment = function(/*Boolean*/ supportsDifferentFirstPayment) {\n  this.supportsDifferentFirstPayment = supportsDifferentFirstPayment;\n};\n\n\nBillpayV1MessageSetInfo.prototype.getSupportsDifferentLastPayment = function() {\n  return this.supportsDifferentLastPayment;\n};\nElement.add({name: \"DIFFLASTPMT\", required: true, order: 180, owner: BillpayV1MessageSetInfo, /*type: Boolean,*/ fcn: \"getSupportsDifferentLastPayment\"});\n\n\nBillpayV1MessageSetInfo.prototype.setSupportsDifferentLastPayment = function(/*Boolean*/ supportsDifferentLastPayment) {\n  this.supportsDifferentLastPayment = supportsDifferentLastPayment;\n};\n\n\nBillpayV1MessageSetInfo.prototype.getSupportsBillPresentmentContext = function() {\n  return this.supportsBillPresentmentContext;\n};\nElement.add({name: \"BILLPUBCONTEXT\", order: 190, owner: BillpayV1MessageSetInfo, /*type: Boolean,*/ fcn: \"getSupportsBillPresentmentContext\"});\n\n\nBillpayV1MessageSetInfo.prototype.setSupportsBillPresentmentContext = function(/*Boolean*/ supportsBillPresentmentContext) {\n  this.supportsBillPresentmentContext = supportsBillPresentmentContext;\n};\n\n\n\n\nmodule.exports = BillpayV1MessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar AbstractMessageSetInfo = require(\"../../profile/AbstractMessageSetInfo\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\n\n/**\n * @class\n * @augments AbstractMessageSetInfo\n */\nfunction CreditCardMessageSetInfo () {\n\n  /**\n   * @name CreditCardMessageSetInfo#version1Info\n   * @type CreditCardV1MessageSetInfo\n   * @access private\n   */\n  this.version1Info = null;\n}\n\ninherit(CreditCardMessageSetInfo, \"extends\", AbstractMessageSetInfo);\n\n\nAggregate.add(\"CREDITCARDMSGSET\", CreditCardMessageSetInfo);\n\n\nCreditCardMessageSetInfo.prototype.getVersion1Info = function() {\n  return this.version1Info;\n};\nChildAggregate.add({order: 0, owner: CreditCardMessageSetInfo, /*type: CreditCardV1MessageSetInfo,*/ fcn: \"getVersion1Info\"});\n\n\nCreditCardMessageSetInfo.prototype.setVersion1Info = function(/*CreditCardV1MessageSetInfo*/ version1Info) {\n  this.version1Info = version1Info;\n};\n\n\n\n\nmodule.exports = CreditCardMessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar VersionSpecificMessageSetInfo = require(\"../../profile/VersionSpecificMessageSetInfo\");\nvar MessageSetType = require(\"../../MessageSetType\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\n\n/**\n * Credit Card Message Set Profile\n * @class\n * @augments VersionSpecificMessageSetInfo\n * @see \"Section 11.13.3 OFX Spec\"\n */\nfunction CreditCardV1MessageSetInfo () {\n\n  /**\n   * @name CreditCardV1MessageSetInfo#closingAvail\n   * @type Boolean\n   * @access private\n   */\n  this.closingAvail = null;\n\n  /**\n   * @name CreditCardV1MessageSetInfo#imageProfile\n   * @type ImageProfile\n   * @access private\n   */\n  this.imageProfile = null;\n}\n\ninherit(CreditCardV1MessageSetInfo, \"extends\", VersionSpecificMessageSetInfo);\n\n\nAggregate.add(\"CREDITCARDMSGSETV1\", CreditCardV1MessageSetInfo);\n\n\nCreditCardV1MessageSetInfo.prototype.getMessageSetType = function() {\n  return MessageSetType.creditcard;\n};\n\n\n/**\n * Closing statement information available\n * @return {Boolean} Boolean\n */\nCreditCardV1MessageSetInfo.prototype.getClosingAvail = function() {\n  return this.closingAvail;\n};\nElement.add({name: \"CLOSINGAVAIL\", required: true, order: 20, owner: CreditCardV1MessageSetInfo, /*type: Boolean,*/ fcn: \"getClosingAvail\"});\n\n\nCreditCardV1MessageSetInfo.prototype.setClosingAvail = function(/*Boolean*/ closingAvail) {\n  this.closingAvail = closingAvail;\n};\n\n\n/**\n * Image profile (if supported)\n * @return {ImageProfile} ImageProfile\n */\nCreditCardV1MessageSetInfo.prototype.getImageProfile = function() {\n  return this.imageProfile;\n};\nChildAggregate.add({name: \"IMAGEPROF\", order: 10, owner: CreditCardV1MessageSetInfo, /*type: ImageProfile,*/ fcn: \"getImageProfile\"});\n\n\nCreditCardV1MessageSetInfo.prototype.setImageProfile = function(/*ImageProfile*/ imageProfile) {\n  this.imageProfile = imageProfile;\n};\n\n\n\n\nmodule.exports = CreditCardV1MessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar AbstractMessageSetInfo = require(\"../../profile/AbstractMessageSetInfo\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\n\n/**\n * @class\n * @augments AbstractMessageSetInfo\n */\nfunction EmailMessageSetInfo () {\n\n  /**\n   * @name EmailMessageSetInfo#version1Info\n   * @type EmailV1MessageSetInfo\n   * @access private\n   */\n  this.version1Info = null;\n}\n\ninherit(EmailMessageSetInfo, \"extends\", AbstractMessageSetInfo);\n\n\nAggregate.add(\"EMAILMSGSET\", EmailMessageSetInfo);\n\n\nEmailMessageSetInfo.prototype.getVersion1Info = function() {\n  return this.version1Info;\n};\nChildAggregate.add({order: 0, owner: EmailMessageSetInfo, /*type: EmailV1MessageSetInfo,*/ fcn: \"getVersion1Info\"});\n\n\nEmailMessageSetInfo.prototype.setVersion1Info = function(/*EmailV1MessageSetInfo*/ version1Info) {\n  this.version1Info = version1Info;\n};\n\n\n\n\nmodule.exports = EmailMessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar VersionSpecificMessageSetInfo = require(\"../../profile/VersionSpecificMessageSetInfo\");\nvar MessageSetType = require(\"../../MessageSetType\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\n\n/**\n * Email Message Set Profile Information\n * @class\n * @augments VersionSpecificMessageSetInfo\n * @see \"Section 9.4.2 OFX Spec\"\n */\nfunction EmailV1MessageSetInfo () {\n\n  /**\n   * @name EmailV1MessageSetInfo#supportsMail\n   * @type Boolean\n   * @access private\n   */\n  this.supportsMail = null;\n\n  /**\n   * @name EmailV1MessageSetInfo#supportsMimeType\n   * @type Boolean\n   * @access private\n   */\n  this.supportsMimeType = null;\n}\n\ninherit(EmailV1MessageSetInfo, \"extends\", VersionSpecificMessageSetInfo);\n\n\nAggregate.add(\"EMAILMSGSETV1\", EmailV1MessageSetInfo);\n\n\nEmailV1MessageSetInfo.prototype.getMessageSetType = function() {\n  return MessageSetType.email;\n};\n\n\n/**\n * Y if server supports <MAILRQ> request.\n * N if server supports only the <MAILSYNCRQ> request.\n * @return {Boolean} Boolean\n */\nEmailV1MessageSetInfo.prototype.getSupportsMail = function() {\n  return this.supportsMail;\n};\nElement.add({name: \"MAILSUP\", required: true, order: 10, owner: EmailV1MessageSetInfo, /*type: Boolean,*/ fcn: \"getSupportsMail\"});\n\n\nEmailV1MessageSetInfo.prototype.setSupportsMail = function(/*Boolean*/ supportsMail) {\n  this.supportsMail = supportsMail;\n};\n\n\n/**\n * Y if server supports get MIME message\n * @return {Boolean} Boolean\n */\nEmailV1MessageSetInfo.prototype.getSupportsMimeType = function() {\n  return this.supportsMimeType;\n};\nElement.add({name: \"GETMIMESUP\", required: true, order: 20, owner: EmailV1MessageSetInfo, /*type: Boolean,*/ fcn: \"getSupportsMimeType\"});\n\n\nEmailV1MessageSetInfo.prototype.setSupportsMimeType = function(/*Boolean*/ supportsMimeType) {\n  this.supportsMimeType = supportsMimeType;\n};\n\n\n\n\nmodule.exports = EmailV1MessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar AbstractMessageSetInfo = require(\"../../profile/AbstractMessageSetInfo\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\n\n/**\n * @class\n * @augments AbstractMessageSetInfo\n */\nfunction InterbankTransferMessageSetInfo () {\n\n  /**\n   * @name InterbankTransferMessageSetInfo#version1Info\n   * @type InterbankTransferV1MessageSetInfo\n   * @access private\n   */\n  this.version1Info = null;\n}\n\ninherit(InterbankTransferMessageSetInfo, \"extends\", AbstractMessageSetInfo);\n\n\nAggregate.add(\"INTERXFERMSGSET\", InterbankTransferMessageSetInfo);\n\n\nInterbankTransferMessageSetInfo.prototype.getVersion1Info = function() {\n  return this.version1Info;\n};\nChildAggregate.add({order: 0, owner: InterbankTransferMessageSetInfo, /*type: InterbankTransferV1MessageSetInfo,*/ fcn: \"getVersion1Info\"});\n\n\nInterbankTransferMessageSetInfo.prototype.setVersion1Info = function(/*InterbankTransferV1MessageSetInfo*/ version1Info) {\n  this.version1Info = version1Info;\n};\n\n\n\n\nmodule.exports = InterbankTransferMessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar VersionSpecificMessageSetInfo = require(\"../../profile/VersionSpecificMessageSetInfo\");\nvar MessageSetType = require(\"../../MessageSetType\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\n\n/**\n * Interbank Funds Transfer Message Set Profile\n * @class\n * @augments VersionSpecificMessageSetInfo\n * @see \"Section 11.13.4 OFX Spec\"\n */\nfunction InterbankTransferV1MessageSetInfo () {\n\n  /**\n   * @name InterbankTransferV1MessageSetInfo#transferProfile\n   * @type TransferProfile\n   * @access private\n   */\n  this.transferProfile = null;\n\n  /**\n   * @name InterbankTransferV1MessageSetInfo#supportsBillPay\n   * @type Boolean\n   * @access private\n   */\n  this.supportsBillPay = null;\n\n  /**\n   * @name InterbankTransferV1MessageSetInfo#cancelWindow\n   * @type Integer\n   * @access private\n   */\n  this.cancelWindow = null;\n\n  /**\n   * @name InterbankTransferV1MessageSetInfo#domesticInterbankTransferFee\n   * @type Double\n   * @access private\n   */\n  this.domesticInterbankTransferFee = null;\n\n  /**\n   * @name InterbankTransferV1MessageSetInfo#internationalInterbankTransferFee\n   * @type Double\n   * @access private\n   */\n  this.internationalInterbankTransferFee = null;\n}\n\ninherit(InterbankTransferV1MessageSetInfo, \"extends\", VersionSpecificMessageSetInfo);\n\n\nAggregate.add(\"INTERXFERMSGSETV1\", InterbankTransferV1MessageSetInfo);\n\n\nInterbankTransferV1MessageSetInfo.prototype.getMessageSetType = function() {\n  return MessageSetType.interbank_transfer;\n};\n\n\nInterbankTransferV1MessageSetInfo.prototype.getTransferProfile = function() {\n  return this.transferProfile;\n};\nChildAggregate.add({name: \"XFERPROF\", required: true, order: 10, owner: InterbankTransferV1MessageSetInfo, /*type: TransferProfile,*/ fcn: \"getTransferProfile\"});\n\n\nInterbankTransferV1MessageSetInfo.prototype.setTransferProfile = function(/*TransferProfile*/ transferProfile) {\n  this.transferProfile = transferProfile;\n};\n\n\nInterbankTransferV1MessageSetInfo.prototype.getSupportsBillPay = function() {\n  return this.supportsBillPay;\n};\nElement.add({name: \"CANBILLPAY\", required: true, order: 20, owner: InterbankTransferV1MessageSetInfo, /*type: Boolean,*/ fcn: \"getSupportsBillPay\"});\n\n\nInterbankTransferV1MessageSetInfo.prototype.setSupportsBillPay = function(/*Boolean*/ supportsBillPay) {\n  this.supportsBillPay = supportsBillPay;\n};\n\n\nInterbankTransferV1MessageSetInfo.prototype.getCancelWindow = function() {\n  return this.cancelWindow;\n};\nElement.add({name: \"CANCELWND\", required: true, order: 30, owner: InterbankTransferV1MessageSetInfo, /*type: Integer,*/ fcn: \"getCancelWindow\"});\n\n\nInterbankTransferV1MessageSetInfo.prototype.setCancelWindow = function(/*Integer*/ cancelWindow) {\n  this.cancelWindow = cancelWindow;\n};\n\n\nInterbankTransferV1MessageSetInfo.prototype.getDomesticInterbankTransferFee = function() {\n  return this.domesticInterbankTransferFee;\n};\nElement.add({name: \"DOMXFERFEE\", required: true, order: 40, owner: InterbankTransferV1MessageSetInfo, /*type: Double,*/ fcn: \"getDomesticInterbankTransferFee\"});\n\n\nInterbankTransferV1MessageSetInfo.prototype.setDomesticInterbankTransferFee = function(/*Double*/ domesticInterbankTransferFee) {\n  this.domesticInterbankTransferFee = domesticInterbankTransferFee;\n};\n\n\nInterbankTransferV1MessageSetInfo.prototype.getInternationalInterbankTransferFee = function() {\n  return this.internationalInterbankTransferFee;\n};\nElement.add({name: \"INTLXFERFEE\", required: true, order: 50, owner: InterbankTransferV1MessageSetInfo, /*type: Double,*/ fcn: \"getInternationalInterbankTransferFee\"});\n\n\nInterbankTransferV1MessageSetInfo.prototype.setInternationalInterbankTransferFee = function(/*Double*/ internationalInterbankTransferFee) {\n  this.internationalInterbankTransferFee = internationalInterbankTransferFee;\n};\n\n\n\n\nmodule.exports = InterbankTransferV1MessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar AbstractMessageSetInfo = require(\"../../profile/AbstractMessageSetInfo\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\n\n/**\n * @class\n * @augments AbstractMessageSetInfo\n */\nfunction InvestmentMessageSetInfo () {\n\n  /**\n   * @name InvestmentMessageSetInfo#version1Info\n   * @type InvestmentV1MessageSetInfo\n   * @access private\n   */\n  this.version1Info = null;\n}\n\ninherit(InvestmentMessageSetInfo, \"extends\", AbstractMessageSetInfo);\n\n\nAggregate.add(\"INVSTMTMSGSET\", InvestmentMessageSetInfo);\n\n\nInvestmentMessageSetInfo.prototype.getVersion1Info = function() {\n  return this.version1Info;\n};\nChildAggregate.add({order: 0, owner: InvestmentMessageSetInfo, /*type: InvestmentV1MessageSetInfo,*/ fcn: \"getVersion1Info\"});\n\n\nInvestmentMessageSetInfo.prototype.setVersion1Info = function(/*InvestmentV1MessageSetInfo*/ version1Info) {\n  this.version1Info = version1Info;\n};\n\n\n\n\nmodule.exports = InvestmentMessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar VersionSpecificMessageSetInfo = require(\"../../profile/VersionSpecificMessageSetInfo\");\nvar MessageSetType = require(\"../../MessageSetType\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\n\n/**\n * @see \"Section 13.7.1.1, OFX Spec\"\n *\n * @author Jon Perlow\n * @author Ryan Heaton\n */\nfunction InvestmentV1MessageSetInfo () {\n\n  /**\n   * @name InvestmentV1MessageSetInfo#supportsStatementsDownload\n   * @type Boolean\n   * @access private\n   */\n  this.supportsStatementsDownload = null;\n\n  /**\n   * @name InvestmentV1MessageSetInfo#supportsOpenOrdersDownload\n   * @type Boolean\n   * @access private\n   */\n  this.supportsOpenOrdersDownload = null;\n\n  /**\n   * @name InvestmentV1MessageSetInfo#supportsPositionsDownload\n   * @type Boolean\n   * @access private\n   */\n  this.supportsPositionsDownload = null;\n\n  /**\n   * @name InvestmentV1MessageSetInfo#supportsBalanceDownload\n   * @type Boolean\n   * @access private\n   */\n  this.supportsBalanceDownload = null;\n\n  /**\n   * @name InvestmentV1MessageSetInfo#supportsEmail\n   * @type Boolean\n   * @access private\n   */\n  this.supportsEmail = null;\n\n  /**\n   * @name InvestmentV1MessageSetInfo#supports401kInformation\n   * @type Boolean\n   * @access private\n   */\n  this.supports401kInformation = null;\n\n  /**\n   * @name InvestmentV1MessageSetInfo#supportsClosingStatements\n   * @type Boolean\n   * @access private\n   */\n  this.supportsClosingStatements = null;\n}\n\ninherit(InvestmentV1MessageSetInfo, \"extends\", VersionSpecificMessageSetInfo);\n\n\nAggregate.add(\"INVSTMTMSGSETV1\", InvestmentV1MessageSetInfo);\n\n\nInvestmentV1MessageSetInfo.prototype.getMessageSetType = function() {\n  return MessageSetType.investment;\n};\n\n\nInvestmentV1MessageSetInfo.prototype.getSupportsStatementsDownload = function() {\n  return this.supportsStatementsDownload;\n};\nElement.add({name: \"TRANDNLD\", required:true, order: 10, owner: InvestmentV1MessageSetInfo, /*type: Boolean,*/ fcn: \"getSupportsStatementsDownload\"});\n\n\nInvestmentV1MessageSetInfo.prototype.setSupportsStatementsDownload = function(/*Boolean*/ supportsStatementsDownload) {\n  this.supportsStatementsDownload = supportsStatementsDownload;\n};\n\n\nInvestmentV1MessageSetInfo.prototype.getSupportsOpenOrdersDownload = function() {\n  return this.supportsOpenOrdersDownload;\n};\nElement.add({name: \"OODNLD\", required:true, order: 20, owner: InvestmentV1MessageSetInfo, /*type: Boolean,*/ fcn: \"getSupportsOpenOrdersDownload\"});\n\n\nInvestmentV1MessageSetInfo.prototype.setSupportsOpenOrdersDownload = function(/*Boolean*/ supportsOpenOrdersDownload) {\n  this.supportsOpenOrdersDownload = supportsOpenOrdersDownload;\n};\n\n\nInvestmentV1MessageSetInfo.prototype.getSupportsPositionsDownload = function() {\n  return this.supportsPositionsDownload;\n};\nElement.add({name: \"POSDNLD\", required:true, order: 30, owner: InvestmentV1MessageSetInfo, /*type: Boolean,*/ fcn: \"getSupportsPositionsDownload\"});\n\n\nInvestmentV1MessageSetInfo.prototype.setSupportsPositionsDownload = function(/*Boolean*/ supportsPositionsDownload) {\n  this.supportsPositionsDownload = supportsPositionsDownload;\n};\n\n\nInvestmentV1MessageSetInfo.prototype.getSupportsBalanceDownload = function() {\n  return this.supportsBalanceDownload;\n};\nElement.add({name: \"BALDNLD\", required:true, order: 40, owner: InvestmentV1MessageSetInfo, /*type: Boolean,*/ fcn: \"getSupportsBalanceDownload\"});\n\n\nInvestmentV1MessageSetInfo.prototype.setSupportsBalanceDownload = function(/*Boolean*/ supportsBalanceDownload) {\n  this.supportsBalanceDownload = supportsBalanceDownload;\n};\n\n\nInvestmentV1MessageSetInfo.prototype.getSupportsEmail = function() {\n  return this.supportsEmail;\n};\nElement.add({name: \"CANEMAIL\", required:true, order: 50, owner: InvestmentV1MessageSetInfo, /*type: Boolean,*/ fcn: \"getSupportsEmail\"});\n\n\nInvestmentV1MessageSetInfo.prototype.setSupportsEmail = function(/*Boolean*/ supportsEmail) {\n  this.supportsEmail = supportsEmail;\n};\n\n\nInvestmentV1MessageSetInfo.prototype.getSupports401kInformation = function() {\n  return this.supports401kInformation;\n};\nElement.add({name: \"INV401KDNLD\", order: 60, owner: InvestmentV1MessageSetInfo, /*type: Boolean,*/ fcn: \"getSupports401kInformation\"});\n\n\nInvestmentV1MessageSetInfo.prototype.setSupports401kInformation = function(/*Boolean*/ supports401kInformation) {\n  this.supports401kInformation = supports401kInformation;\n};\n\n\nInvestmentV1MessageSetInfo.prototype.getSupportsClosingStatements = function() {\n  return this.supportsClosingStatements;\n};\nElement.add({name: \"CLOSINGAVAIL\", order: 70, owner: InvestmentV1MessageSetInfo, /*type: Boolean,*/ fcn: \"getSupportsClosingStatements\"});\n\n\nInvestmentV1MessageSetInfo.prototype.setSupportsClosingStatements = function(/*Boolean*/ supportsClosingStatements) {\n  this.supportsClosingStatements = supportsClosingStatements;\n};\n\n\n\n\nmodule.exports = InvestmentV1MessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar AbstractMessageSetInfo = require(\"../../profile/AbstractMessageSetInfo\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\n\n/**\n * @class\n * @augments AbstractMessageSetInfo\n */\nfunction ProfileMessageSetInfo () {\n\n  /**\n   * @name ProfileMessageSetInfo#version1Info\n   * @type ProfileV1MessageSetInfo\n   * @access private\n   */\n  this.version1Info = null;\n}\n\ninherit(ProfileMessageSetInfo, \"extends\", AbstractMessageSetInfo);\n\n\nAggregate.add(\"PROFMSGSET\", ProfileMessageSetInfo);\n\n\nProfileMessageSetInfo.prototype.getVersion1Info = function() {\n  return this.version1Info;\n};\nChildAggregate.add({order: 0, owner: ProfileMessageSetInfo, /*type: ProfileV1MessageSetInfo,*/ fcn: \"getVersion1Info\"});\n\n\nProfileMessageSetInfo.prototype.setVersion1Info = function(/*ProfileV1MessageSetInfo*/ version1Info) {\n  this.version1Info = version1Info;\n};\n\n\n\n\nmodule.exports = ProfileMessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar VersionSpecificMessageSetInfo = require(\"../../profile/VersionSpecificMessageSetInfo\");\nvar MessageSetType = require(\"../../MessageSetType\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\n\n/**\n * @class\n * @augments VersionSpecificMessageSetInfo\n */\nfunction ProfileV1MessageSetInfo () {\n}\n\ninherit(ProfileV1MessageSetInfo, \"extends\", VersionSpecificMessageSetInfo);\n\n\nAggregate.add(\"PROFMSGSETV1\", ProfileV1MessageSetInfo);\n\n\nProfileV1MessageSetInfo.prototype.getMessageSetType = function() {\n  return MessageSetType.profile;\n};\n\n\n\n\nmodule.exports = ProfileV1MessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar AbstractMessageSetInfo = require(\"../../profile/AbstractMessageSetInfo\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\n\n/**\n * @class\n * @augments AbstractMessageSetInfo\n */\nfunction SecurityListMessageSetInfo () {\n\n  /**\n   * @name SecurityListMessageSetInfo#version1Info\n   * @type SecurityListV1MessageSetInfo\n   * @access private\n   */\n  this.version1Info = null;\n}\n\ninherit(SecurityListMessageSetInfo, \"extends\", AbstractMessageSetInfo);\n\n\nAggregate.add(\"SECLISTMSGSET\", SecurityListMessageSetInfo);\n\n\nSecurityListMessageSetInfo.prototype.getVersion1Info = function() {\n  return this.version1Info;\n};\nChildAggregate.add({order: 0, owner: SecurityListMessageSetInfo, /*type: SecurityListV1MessageSetInfo,*/ fcn: \"getVersion1Info\"});\n\n\nSecurityListMessageSetInfo.prototype.setVersion1Info = function(/*SecurityListV1MessageSetInfo*/ version1Info) {\n  this.version1Info = version1Info;\n};\n\n\n\n\nmodule.exports = SecurityListMessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar VersionSpecificMessageSetInfo = require(\"../../profile/VersionSpecificMessageSetInfo\");\nvar MessageSetType = require(\"../../MessageSetType\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\n\n/**\n * @see \"Section 13.7.2.1, OFX Spec\"\n *\n * @class\n * @augments VersionSpecificMessageSetInfo\n */\nfunction SecurityListV1MessageSetInfo () {\n\n  /**\n   * @name SecurityListV1MessageSetInfo#supportsSecurityListDownload\n   * @type Boolean\n   * @access private\n   */\n  this.supportsSecurityListDownload = null;\n}\n\ninherit(SecurityListV1MessageSetInfo, \"extends\", VersionSpecificMessageSetInfo);\n\n\nAggregate.add(\"SECLISTMSGSETV1\", SecurityListV1MessageSetInfo);\n\n\nSecurityListV1MessageSetInfo.prototype.getMessageSetType = function() {\n  return MessageSetType.investment_security;\n};\n\n\nSecurityListV1MessageSetInfo.prototype.getSupportsSecurityListDownload = function() {\n  return this.supportsSecurityListDownload;\n};\nElement.add({name: \"SECLISTRQDNLD\", required:true, order: 10, owner: SecurityListV1MessageSetInfo, /*type: Boolean,*/ fcn: \"getSupportsSecurityListDownload\"});\n\n\nSecurityListV1MessageSetInfo.prototype.setSupportsSecurityListDownload = function(/*Boolean*/ supportsSecurityListDownload) {\n  this.supportsSecurityListDownload = supportsSecurityListDownload;\n};\n\n\n\n\nmodule.exports = SecurityListV1MessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar AbstractMessageSetInfo = require(\"../../profile/AbstractMessageSetInfo\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\n\n/**\n * @class\n * @augments AbstractMessageSetInfo\n */\nfunction SignOnMessageSetInfo () {\n\n  /**\n   * @name SignOnMessageSetInfo#version1Info\n   * @type SignOnV1MessageSetInfo\n   * @access private\n   */\n  this.version1Info = null;\n}\n\ninherit(SignOnMessageSetInfo, \"extends\", AbstractMessageSetInfo);\n\n\nAggregate.add(\"SIGNONMSGSET\", SignOnMessageSetInfo);\n\n\nSignOnMessageSetInfo.prototype.getVersion1Info = function() {\n  return this.version1Info;\n};\nChildAggregate.add({order: 0, owner: SignOnMessageSetInfo, /*type: SignOnV1MessageSetInfo,*/ fcn: \"getVersion1Info\"});\n\n\nSignOnMessageSetInfo.prototype.setVersion1Info = function(/*SignOnV1MessageSetInfo*/ version1Info) {\n  this.version1Info = version1Info;\n};\n\n\n\n\nmodule.exports = SignOnMessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar MessageSetType = require(\"../../MessageSetType\");\nvar VersionSpecificMessageSetInfo = require(\"../../profile/VersionSpecificMessageSetInfo\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\n\n/**\n * @class\n * @augments VersionSpecificMessageSetInfo\n */\nfunction SignOnV1MessageSetInfo () {\n}\n\ninherit(SignOnV1MessageSetInfo, \"extends\", VersionSpecificMessageSetInfo);\n\n\nAggregate.add(\"SIGNONMSGSETV1\", SignOnV1MessageSetInfo);\n\n\nSignOnV1MessageSetInfo.prototype.getMessageSetType = function() {\n  return MessageSetType.signon;\n};\n\n\n\n\nmodule.exports = SignOnV1MessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar AbstractMessageSetInfo = require(\"../../profile/AbstractMessageSetInfo\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\n\n/**\n * @class\n * @augments AbstractMessageSetInfo\n */\nfunction SignupMessageSetInfo () {\n\n  /**\n   * @name SignupMessageSetInfo#version1Info\n   * @type SignupV1MessageSetInfo\n   * @access private\n   */\n  this.version1Info = null;\n}\n\ninherit(SignupMessageSetInfo, \"extends\", AbstractMessageSetInfo);\n\n\nAggregate.add(\"SIGNUPMSGSET\", SignupMessageSetInfo);\n\n\nSignupMessageSetInfo.prototype.getVersion1Info = function() {\n  return this.version1Info;\n};\nChildAggregate.add({order: 0, owner: SignupMessageSetInfo, /*type: SignupV1MessageSetInfo,*/ fcn: \"getVersion1Info\"});\n\n\nSignupMessageSetInfo.prototype.setVersion1Info = function(/*SignupV1MessageSetInfo*/ version1Info) {\n  this.version1Info = version1Info;\n};\n\n\n\n\nmodule.exports = SignupMessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar VersionSpecificMessageSetInfo = require(\"../../profile/VersionSpecificMessageSetInfo\");\nvar MessageSetType = require(\"../../MessageSetType\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\nvar Element = require(\"../../../../meta/Element\");\n\n/**\n * Servers use the Signup Message Set Profile Information to define how enrollment should proceed.\n *\n * This aggregate should contain 1 Enrollment option among <CLIENTENROLL>, <WEBENROLL>, or <OTHERENROLL>.\n * todo: review how best to enforce this constraint\n *\n * @class\n * @augments VersionSpecificMessageSetInfo\n * @see \"Section 8.8 OFX Spec\"\n */\nfunction SignupV1MessageSetInfo () {\n\n  /**\n   * @name SignupV1MessageSetInfo#clientEnrollment\n   * @type ClientEnrollment\n   * @access private\n   */\n  this.clientEnrollment = null;\n\n  /**\n   * @name SignupV1MessageSetInfo#webEnrollment\n   * @type WebEnrollment\n   * @access private\n   */\n  this.webEnrollment = null;\n\n  /**\n   * @name SignupV1MessageSetInfo#otherEnrollment\n   * @type OtherEnrollment\n   * @access private\n   */\n  this.otherEnrollment = null;\n\n  /**\n   * @name SignupV1MessageSetInfo#supportsClientUserInfoChanges\n   * @type Boolean\n   * @access private\n   */\n  this.supportsClientUserInfoChanges = null;\n\n  /**\n   * @name SignupV1MessageSetInfo#supportsAvailableAccounts\n   * @type Boolean\n   * @access private\n   */\n  this.supportsAvailableAccounts = null;\n\n  /**\n   * @name SignupV1MessageSetInfo#supportsClientServiceActivationRequests\n   * @type Boolean\n   * @access private\n   */\n  this.supportsClientServiceActivationRequests = null;\n}\n\ninherit(SignupV1MessageSetInfo, \"extends\", VersionSpecificMessageSetInfo);\n\n\nAggregate.add(\"SIGNUPMSGSETV1\", SignupV1MessageSetInfo);\n\n\nSignupV1MessageSetInfo.prototype.getMessageSetType = function() {\n  return MessageSetType.signup;\n};\n\n\nSignupV1MessageSetInfo.prototype.getClientEnrollment = function() {\n  return this.clientEnrollment;\n};\nChildAggregate.add({name: \"CLIENTENROLL\", order: 10, owner: SignupV1MessageSetInfo, /*type: ClientEnrollment,*/ fcn: \"getClientEnrollment\"});\n\n\nSignupV1MessageSetInfo.prototype.setClientEnrollment = function(/*ClientEnrollment*/ clientEnrollment) {\n  this.clientEnrollment = clientEnrollment;\n};\n\n\nSignupV1MessageSetInfo.prototype.getWebEnrollment = function() {\n  return this.webEnrollment;\n};\nChildAggregate.add({name: \"WEBENROLL\", order: 20, owner: SignupV1MessageSetInfo, /*type: WebEnrollment,*/ fcn: \"getWebEnrollment\"});\n\n\nSignupV1MessageSetInfo.prototype.setWebEnrollment = function(/*WebEnrollment*/ webEnrollment) {\n  this.webEnrollment = webEnrollment;\n};\n\n\nSignupV1MessageSetInfo.prototype.getOtherEnrollment = function() {\n  return this.otherEnrollment;\n};\nChildAggregate.add({name: \"OTHERENROLL\", order: 30, owner: SignupV1MessageSetInfo, /*type: OtherEnrollment,*/ fcn: \"getOtherEnrollment\"});\n\n\nSignupV1MessageSetInfo.prototype.setOtherEnrollment = function(/*OtherEnrollment*/ otherEnrollment) {\n  this.otherEnrollment = otherEnrollment;\n};\n\n\n/**\n * Y if server supports client-based user information changes,\n * @return {Boolean} Boolean\n */\nSignupV1MessageSetInfo.prototype.getSupportsClientUserInfoChanges = function() {\n  return this.supportsClientUserInfoChanges;\n};\nElement.add({name: \"CHGUSERINFO\", required: true, order: 40, owner: SignupV1MessageSetInfo, /*type: Boolean,*/ fcn: \"getSupportsClientUserInfoChanges\"});\n\n\nSignupV1MessageSetInfo.prototype.setSupportsClientUserInfoChanges = function(/*Boolean*/ supportsClientUserInfoChanges) {\n  this.supportsClientUserInfoChanges = supportsClientUserInfoChanges;\n};\n\n\n/**\n * Y if server can provide information on accounts with SVCSTATUS available,\n * N means client should expect to ask user for specific account information\n * @return {Boolean} Boolean\n */\nSignupV1MessageSetInfo.prototype.getSupportsAvailableAccounts = function() {\n  return this.supportsAvailableAccounts;\n};\nElement.add({name: \"AVAILACCTS\", required: true, order: 50, owner: SignupV1MessageSetInfo, /*type: Boolean,*/ fcn: \"getSupportsAvailableAccounts\"});\n\n\nSignupV1MessageSetInfo.prototype.setSupportsAvailableAccounts = function(/*Boolean*/ supportsAvailableAccounts) {\n  this.supportsAvailableAccounts = supportsAvailableAccounts;\n};\n\n\n/**\n * Y if server allows clients to make service activation requests (<ACCTRQ>),\n * N if server will only advise clients via synchronization of service additions,\n * changes, or deletions.\n * @return {Boolean} Boolean\n */\nSignupV1MessageSetInfo.prototype.getSupportsClientServiceActivationRequests = function() {\n  return this.supportsClientServiceActivationRequests;\n};\nElement.add({name: \"CLIENTACTREQ\", required: true, order: 60, owner: SignupV1MessageSetInfo, /*type: Boolean,*/ fcn: \"getSupportsClientServiceActivationRequests\"});\n\n\nSignupV1MessageSetInfo.prototype.setSupportsClientServiceActivationRequests = function(/*Boolean*/ supportsClientServiceActivationRequests) {\n  this.supportsClientServiceActivationRequests = supportsClientServiceActivationRequests;\n};\n\n\n\n\nmodule.exports = SignupV1MessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar AbstractMessageSetInfo = require(\"../../profile/AbstractMessageSetInfo\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../../meta/ChildAggregate\");\n\n/**\n * @class\n * @augments AbstractMessageSetInfo\n */\nfunction WireTransferMessageSetInfo () {\n\n  /**\n   * @name WireTransferMessageSetInfo#version1Info\n   * @type WireTransferV1MessageSetInfo\n   * @access private\n   */\n  this.version1Info = null;\n}\n\ninherit(WireTransferMessageSetInfo, \"extends\", AbstractMessageSetInfo);\n\n\nAggregate.add(\"WIREXFERMSGSET\", WireTransferMessageSetInfo);\n\n\nWireTransferMessageSetInfo.prototype.getVersion1Info = function() {\n  return this.version1Info;\n};\nChildAggregate.add({order: 0, owner: WireTransferMessageSetInfo, /*type: WireTransferV1MessageSetInfo,*/ fcn: \"getVersion1Info\"});\n\n\nWireTransferMessageSetInfo.prototype.setVersion1Info = function(/*WireTransferV1MessageSetInfo*/ version1Info) {\n  this.version1Info = version1Info;\n};\n\n\n\n\nmodule.exports = WireTransferMessageSetInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../../util/inherit\");\n\nvar VersionSpecificMessageSetInfo = require(\"../../profile/VersionSpecificMessageSetInfo\");\nvar MessageSetType = require(\"../../MessageSetType\");\nvar Aggregate = require(\"../../../../meta/Aggregate\");\nvar Element = require(\"../../../../meta/Element\");\n\n/**\n * Wire Transfer Message Set Profile\n * @class\n * @augments VersionSpecificMessageSetInfo\n * @see \"Section 11.13.5 OFX Spec\"\n */\nfunction WireTransferV1MessageSetInfo () {\n\n  /**\n   * @name WireTransferV1MessageSetInfo#processorDaysOff\n   * @type List<ProcessorDayOff>\n   * @access private\n   */\n  this.processorDaysOff = null;\n\n  /**\n   * @name WireTransferV1MessageSetInfo#processEndTime\n   * @type String\n   * @access private\n   */\n  this.processEndTime = null;\n\n  /**\n   * @name WireTransferV1MessageSetInfo#supportsScheduledTransfers\n   * @type Boolean\n   * @access private\n   */\n  this.supportsScheduledTransfers = null;\n\n  /**\n   * @name WireTransferV1MessageSetInfo#domesticWireTransferFee\n   * @type Double\n   * @access private\n   */\n  this.domesticWireTransferFee = null;\n\n  /**\n   * @name WireTransferV1MessageSetInfo#internationalWireTransferFee\n   * @type Double\n   * @access private\n   */\n  this.internationalWireTransferFee = null;\n}\n\ninherit(WireTransferV1MessageSetInfo, \"extends\", VersionSpecificMessageSetInfo);\n\n\nAggregate.add(\"WIREXFERMSGSETV1\", WireTransferV1MessageSetInfo);\n\n\nWireTransferV1MessageSetInfo.prototype.getMessageSetType = function() {\n  return MessageSetType.wire_transfer;\n};\n\n\nWireTransferV1MessageSetInfo.prototype.getProcessorDaysOff = function() {\n  return this.processorDaysOff;\n};\nElement.add({name: \"PROCDAYSOFF\", order: 10, owner: WireTransferV1MessageSetInfo, /*type: ProcessorDayOff[],*/ fcn: \"getProcessorDaysOff\"});\n\n\nWireTransferV1MessageSetInfo.prototype.setProcessorDaysOff = function(/*ProcessorDayOff[]*/ processorDaysOff) {\n  this.processorDaysOff = processorDaysOff;\n};\n\n\nWireTransferV1MessageSetInfo.prototype.getProcessEndTime = function() {\n  return this.processEndTime;\n};\nElement.add({name: \"PROCENDTM\", required: true, order: 20, owner: WireTransferV1MessageSetInfo, /*type: String,*/ fcn: \"getProcessEndTime\"});\n\n\nWireTransferV1MessageSetInfo.prototype.setProcessEndTime = function(/*String*/ processEndTime) {\n  this.processEndTime = processEndTime;\n};\n\n\nWireTransferV1MessageSetInfo.prototype.getSupportsScheduledTransfers = function() {\n  return this.supportsScheduledTransfers;\n};\nElement.add({name: \"CANSCHED\", required: true, order: 30, owner: WireTransferV1MessageSetInfo, /*type: Boolean,*/ fcn: \"getSupportsScheduledTransfers\"});\n\n\nWireTransferV1MessageSetInfo.prototype.setSupportsScheduledTransfers = function(/*Boolean*/ supportsScheduledTransfers) {\n  this.supportsScheduledTransfers = supportsScheduledTransfers;\n};\n\n\nWireTransferV1MessageSetInfo.prototype.getDomesticWireTransferFee = function() {\n  return this.domesticWireTransferFee;\n};\nElement.add({name: \"DOMXFERFEE\", required: true, order: 40, owner: WireTransferV1MessageSetInfo, /*type: Double,*/ fcn: \"getDomesticWireTransferFee\"});\n\n\nWireTransferV1MessageSetInfo.prototype.setDomesticWireTransferFee = function(/*Double*/ domesticWireTransferFee) {\n  this.domesticWireTransferFee = domesticWireTransferFee;\n};\n\n\nWireTransferV1MessageSetInfo.prototype.getInternationalWireTransferFee = function() {\n  return this.internationalWireTransferFee;\n};\nElement.add({name: \"INTLXFERFEE\", required: true, order: 50, owner: WireTransferV1MessageSetInfo, /*type: Double,*/ fcn: \"getInternationalWireTransferFee\"});\n\n\nWireTransferV1MessageSetInfo.prototype.setInternationalWireTransferFee = function(/*Double*/ internationalWireTransferFee) {\n  this.internationalWireTransferFee = internationalWireTransferFee;\n};\n\n\n\n\nmodule.exports = WireTransferV1MessageSetInfo;\n","/*\n * Copyright 2012 TheStash\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../../../meta/Aggregate\");\nvar Element = require(\"../../../../../meta/Element\");\n\n/**\n * Email Profile\n * @class\n * @see \"Section 11.13.2.3 OFX Spec\"\n */\nfunction EmailProfile () {\n\n  /**\n   * @name EmailProfile#canEmail\n   * @type Boolean\n   * @access private\n   */\n  this.canEmail = null;\n\n  /**\n   * @name EmailProfile#canNotify\n   * @type Boolean\n   * @access private\n   */\n  this.canNotify = null;\n}\n\n\n\nAggregate.add(\"EMAILPROF\", EmailProfile);\n\n\nEmailProfile.prototype.getCanEmail = function() {\n  return this.canEmail;\n};\nElement.add({name: \"CANEMAIL\", required: true, order: 10, owner: EmailProfile, /*type: Boolean,*/ fcn: \"getCanEmail\"});\n\n\nEmailProfile.prototype.setCanEmail = function(/*Boolean*/ canEmail) {\n  this.canEmail = canEmail;\n};\n\n\nEmailProfile.prototype.getCanNotify = function() {\n  return this.canNotify;\n};\nElement.add({name: \"CANNOTIFY\", required: true, order: 20, owner: EmailProfile, /*type: Boolean,*/ fcn: \"getCanNotify\"});\n\n\nEmailProfile.prototype.setCanNotify = function(/*Boolean*/ canNotify) {\n  this.canNotify = canNotify;\n};\n\n\n\n\nmodule.exports = EmailProfile;\n","/*\n * Copyright 2012 TheStash\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../../../meta/Aggregate\");\nvar Element = require(\"../../../../../meta/Element\");\n\n/**\n * Stop Check Profile\n * @class\n * @see \"Section 11.13.2.3 OFX Spec\"\n */\nfunction StopCheckProfile () {\n\n  /**\n   * @name StopCheckProfile#processorDaysOff\n   * @type List<ProcessorDayOff>\n   * @access private\n   */\n  this.processorDaysOff = null;\n\n  /**\n   * @name StopCheckProfile#processEndTime\n   * @type String\n   * @access private\n   */\n  this.processEndTime = null;\n\n  /**\n   * @name StopCheckProfile#canUseRange\n   * @type Boolean\n   * @access private\n   */\n  this.canUseRange = null;\n\n  /**\n   * @name StopCheckProfile#canUseDescription\n   * @type Boolean\n   * @access private\n   */\n  this.canUseDescription = null;\n\n  /**\n   * @name StopCheckProfile#stopCheckFee\n   * @type Double\n   * @access private\n   */\n  this.stopCheckFee = null;\n}\n\n\n\nAggregate.add(\"STPCHKPROF\", StopCheckProfile);\n\n\n/**\n * Days of week that no processing occurs: MONDAY, TUESDAY, WEDNESDAY, THURSDAY,\n * FRIDAY, SATURDAY, or SUNDAY. 0 or more <PROCDAYSOFF> can be sent.\n * @return {ProcessorDayOff[]} List of days during the week that no processing occurs.\n */\nStopCheckProfile.prototype.getProcessorDaysOff = function() {\n  return this.processorDaysOff;\n};\nElement.add({name: \"PROCDAYSOFF\", order: 0, owner: StopCheckProfile, /*type: ProcessorDayOff[],*/ fcn: \"getProcessorDaysOff\"});\n\n\nStopCheckProfile.prototype.setProcessorDaysOff = function(/*ProcessorDayOff[]*/ processorDaysOff) {\n  this.processorDaysOff = processorDaysOff;\n};\n\n\n/**\n * Gets time of day that day's processing ends.\n *\n * Time formatted as \"HHMMSS.XXX[gmt offset[:tz name]]\",\n * the milliseconds and time zone are still optional, and default to GMT.\n * @see \"Section 3.2.8.3 OFX Spec\"\n * @return {String} Time String formatted as \"HHMMSS.XXX[gmt offset[:tz name]]\"\n */\nStopCheckProfile.prototype.getProcessEndTime = function() {\n  return this.processEndTime;\n};\nElement.add({name: \"PROCENDTM\", required: true, order: 10, owner: StopCheckProfile, /*type: String,*/ fcn: \"getProcessEndTime\"});\n\n\n/**\n * Sets the time of day that day's processing ends.\n *\n * Time formatted as \"HHMMSS.XXX[gmt offset[:tz name]]\",\n * the milliseconds and time zone are still optional, and default to GMT.\n\n * @see \"Section 3.2.8.3 OFX Spec\"\n * @param {String} processEndTime formatted as \"HHMMSS.XXX[gmt offset[:tz name]]\"\n */\nStopCheckProfile.prototype.setProcessEndTime = function(processEndTime) {\n  this.processEndTime = processEndTime;\n};\n\n\nStopCheckProfile.prototype.getCanUseRange = function() {\n  return this.canUseRange;\n};\nElement.add({name: \"CANUSERANGE\", required: true, order: 20, owner: StopCheckProfile, /*type: Boolean,*/ fcn: \"getCanUseRange\"});\n\n\nStopCheckProfile.prototype.setCanUseRange = function(/*Boolean*/ canUseRange) {\n  this.canUseRange = canUseRange;\n};\n\n\nStopCheckProfile.prototype.getCanUseDescription = function() {\n  return this.canUseDescription;\n};\nElement.add({name: \"CANUSEDESC\", required: true, order: 30, owner: StopCheckProfile, /*type: Boolean,*/ fcn: \"getCanUseDescription\"});\n\n\nStopCheckProfile.prototype.setCanUseDescription = function(/*Boolean*/ canUseDescription) {\n  this.canUseDescription = canUseDescription;\n};\n\n\nStopCheckProfile.prototype.getStopCheckFee = function() {\n  return this.stopCheckFee;\n};\nElement.add({name: \"STPCHKFEE\", required: true, order: 40, owner: StopCheckProfile, /*type: Double,*/ fcn: \"getStopCheckFee\"});\n\n\nStopCheckProfile.prototype.setStopCheckFee = function(/*Double*/ stopCheckFee) {\n  this.stopCheckFee = stopCheckFee;\n};\n\n\n\n\nmodule.exports = StopCheckProfile;\n","\"use strict\";\n\nmodule.exports = {\n  EmailProfile: require(\"./EmailProfile\"),\n  StopCheckProfile: require(\"./StopCheckProfile\"),\n};\n","/*\n * Copyright 2012 TheStash\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../../../meta/Aggregate\");\nvar Element = require(\"../../../../../meta/Element\");\n\n/**\n * Image Profile\n * @class\n * @see \"Section 3.1.6.2 OFX Spec\"\n */\nfunction ImageProfile () {\n\n  /**\n   * @name ImageProfile#closingImageAvailable\n   * @type Boolean\n   * @access private\n   */\n  this.closingImageAvailable = null;\n\n  /**\n   * @name ImageProfile#transactionImageAvailable\n   * @type Boolean\n   * @access private\n   */\n  this.transactionImageAvailable = null;\n}\n\n\n\nAggregate.add(\"IMAGEPROF\", ImageProfile);\n\n\nImageProfile.prototype.getClosingImageAvailable = function() {\n  return this.closingImageAvailable;\n};\nElement.add({name: \"CLOSINGIMGAVAIL\", required: true, order: 10, owner: ImageProfile, /*type: Boolean,*/ fcn: \"getClosingImageAvailable\"});\n\n\nImageProfile.prototype.setClosingImageAvailable = function(/*Boolean*/ closingImageAvailable) {\n  this.closingImageAvailable = closingImageAvailable;\n};\n\n\nImageProfile.prototype.getTransactionImageAvailable = function() {\n  return this.transactionImageAvailable;\n};\nElement.add({name: \"TRANIMGAVAIL\", required: true, order: 20, owner: ImageProfile, /*type: Boolean,*/ fcn: \"getTransactionImageAvailable\"});\n\n\nImageProfile.prototype.setTransactionImageAvailable = function(/*Boolean*/ transactionImageAvailable) {\n  this.transactionImageAvailable = transactionImageAvailable;\n};\n\n\n\n\nmodule.exports = ImageProfile;\n","/*\n * Copyright 2012 TheStash\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../../../meta/Aggregate\");\nvar Element = require(\"../../../../../meta/Element\");\n\n/**\n * Funds Transfer Profile\n * @author Scott Priddy\n * @see \"Section 11.13.2.2 OFX Spec\"\n */\nfunction TransferProfile () {\n\n  /**\n   * @name TransferProfile#processorDaysOff\n   * @type List<ProcessorDayOff>\n   * @access private\n   */\n  this.processorDaysOff = null;\n\n  /**\n   * @name TransferProfile#processEndTime\n   * @type String\n   * @access private\n   */\n  this.processEndTime = null;\n\n  /**\n   * @name TransferProfile#supportsScheduledTransfers\n   * @type Boolean\n   * @access private\n   */\n  this.supportsScheduledTransfers = null;\n\n  /**\n   * @name TransferProfile#supportsRecurringTransfers\n   * @type Boolean\n   * @access private\n   */\n  this.supportsRecurringTransfers = null;\n\n  /**\n   * @name TransferProfile#supportsLoanTransfers\n   * @type Boolean\n   * @access private\n   */\n  this.supportsLoanTransfers = null;\n\n  /**\n   * @name TransferProfile#supportsScheduledLoanTransfers\n   * @type Boolean\n   * @access private\n   */\n  this.supportsScheduledLoanTransfers = null;\n\n  /**\n   * @name TransferProfile#supportsRecurringLoanTransfers\n   * @type Boolean\n   * @access private\n   */\n  this.supportsRecurringLoanTransfers = null;\n\n  /**\n   * @name TransferProfile#supportsTransferModification\n   * @type Boolean\n   * @access private\n   */\n  this.supportsTransferModification = null;\n\n  /**\n   * @name TransferProfile#supportsModelModification\n   * @type Boolean\n   * @access private\n   */\n  this.supportsModelModification = null;\n\n  /**\n   * @name TransferProfile#modelWindow\n   * @type Integer\n   * @access private\n   */\n  this.modelWindow = null;\n\n  /**\n   * @name TransferProfile#withdrawnDays\n   * @type Integer\n   * @access private\n   */\n  this.withdrawnDays = null;\n\n  /**\n   * @name TransferProfile#defaultDaysToPay\n   * @type Integer\n   * @access private\n   */\n  this.defaultDaysToPay = null;\n}\n\n\n\nAggregate.add(\"XFERPROF\", TransferProfile);\n\n\n/**\n * Days of week that no processing occurs: MONDAY, TUESDAY, WEDNESDAY, THURSDAY,\n * FRIDAY, SATURDAY, or SUNDAY. 0 or more <PROCDAYSOFF> can be sent.\n * @return {ProcessorDayOff[]} List of days during the week that no processing occurs.\n */\nTransferProfile.prototype.getProcessorDaysOff = function() {\n  return this.processorDaysOff;\n};\nElement.add({name: \"PROCDAYSOFF\", order: 0, owner: TransferProfile, /*type: ProcessorDayOff[],*/ fcn: \"getProcessorDaysOff\"});\n\n\nTransferProfile.prototype.setProcessorDaysOff = function(/*ProcessorDayOff[]*/ processorDaysOff) {\n  this.processorDaysOff = processorDaysOff;\n};\n\n\n/**\n * Gets time of day that day's processing ends.\n *\n * Time formatted as \"HHMMSS.XXX[gmt offset[:tz name]]\",\n * the milliseconds and time zone are still optional, and default to GMT.\n * @see \"Section 3.2.8.3 OFX Spec\"\n * @return {String} Time String formatted as \"HHMMSS.XXX[gmt offset[:tz name]]\"\n */\nTransferProfile.prototype.getProcessEndTime = function() {\n  return this.processEndTime;\n};\nElement.add({name: \"PROCENDTM\", required: true, order: 10, owner: TransferProfile, /*type: String,*/ fcn: \"getProcessEndTime\"});\n\n\n/**\n * Sets the time of day that day's processing ends.\n *\n * Time formatted as \"HHMMSS.XXX[gmt offset[:tz name]]\",\n * the milliseconds and time zone are still optional, and default to GMT.\n\n * @see \"Section 3.2.8.3 OFX Spec\"\n * @param {String} processEndTime formatted as \"HHMMSS.XXX[gmt offset[:tz name]]\"\n */\nTransferProfile.prototype.setProcessEndTime = function(processEndTime) {\n  this.processEndTime = processEndTime;\n};\n\n\nTransferProfile.prototype.getSupportsScheduledTransfers = function() {\n  return this.supportsScheduledTransfers;\n};\nElement.add({name: \"CANSCHED\", required: true, order: 20, owner: TransferProfile, /*type: Boolean,*/ fcn: \"getSupportsScheduledTransfers\"});\n\n\nTransferProfile.prototype.setSupportsScheduledTransfers = function(/*Boolean*/ supportsScheduledTransfers) {\n  this.supportsScheduledTransfers = supportsScheduledTransfers;\n};\n\n\n/**\n * Requires <CANSCHED>\n * @return {Boolean} Boolean whether supports recurring transfers\n */\nTransferProfile.prototype.getSupportsRecurringTransfers = function() {\n  return this.supportsRecurringTransfers;\n};\nElement.add({name: \"CANRECUR\", required: true, order: 30, owner: TransferProfile, /*type: Boolean,*/ fcn: \"getSupportsRecurringTransfers\"});\n\n\nTransferProfile.prototype.setSupportsRecurringTransfers = function(/*Boolean*/ supportsRecurringTransfers) {\n  this.supportsRecurringTransfers = supportsRecurringTransfers;\n};\n\n\n/**\n * <CANLOAN>Y must be present for transfers to involve loans\n * @return {Boolean} Boolean whether supports loan transfers\n */\nTransferProfile.prototype.getSupportsLoanTransfers = function() {\n  return this.supportsLoanTransfers;\n};\nElement.add({name: \"CANLOAN\", order: 40, owner: TransferProfile, /*type: Boolean,*/ fcn: \"getSupportsLoanTransfers\"});\n\n\nTransferProfile.prototype.setSupportsLoanTransfers = function(/*Boolean*/ supportsLoanTransfers) {\n  this.supportsLoanTransfers = supportsLoanTransfers;\n};\n\n\nTransferProfile.prototype.getSupportsScheduledLoanTransfers = function() {\n  return this.supportsScheduledLoanTransfers;\n};\nElement.add({name: \"CANSCHEDLOAN\", order: 50, owner: TransferProfile, /*type: Boolean,*/ fcn: \"getSupportsScheduledLoanTransfers\"});\n\n\nTransferProfile.prototype.setSupportsScheduledLoanTransfers = function(/*Boolean*/ supportsScheduledLoanTransfers) {\n  this.supportsScheduledLoanTransfers = supportsScheduledLoanTransfers;\n};\n\n\nTransferProfile.prototype.getSupportsRecurringLoanTransfers = function() {\n  return this.supportsRecurringLoanTransfers;\n};\nElement.add({name: \"CANRECURLOAN\", order: 60, owner: TransferProfile, /*type: Boolean,*/ fcn: \"getSupportsRecurringLoanTransfers\"});\n\n\nTransferProfile.prototype.setSupportsRecurringLoanTransfers = function(/*Boolean*/ supportsRecurringLoanTransfers) {\n  this.supportsRecurringLoanTransfers = supportsRecurringLoanTransfers;\n};\n\n\nTransferProfile.prototype.getSupportsTransferModification = function() {\n  return this.supportsTransferModification;\n};\nElement.add({name: \"CANMODXFERS\", required: true, order: 70, owner: TransferProfile, /*type: Boolean,*/ fcn: \"getSupportsTransferModification\"});\n\n\nTransferProfile.prototype.setSupportsTransferModification = function(/*Boolean*/ supportsTransferModification) {\n  this.supportsTransferModification = supportsTransferModification;\n};\n\n\nTransferProfile.prototype.getSupportsModelModification = function() {\n  return this.supportsModelModification;\n};\nElement.add({name: \"CANMODMDLS\", required: true, order: 80, owner: TransferProfile, /*type: Boolean,*/ fcn: \"getSupportsModelModification\"});\n\n\nTransferProfile.prototype.setSupportsModelModification = function(/*Boolean*/ supportsModelModification) {\n  this.supportsModelModification = supportsModelModification;\n};\n\n\n/**\n * Model window\n * the number of days before a recurring transaction is scheduled to be processed that it is\n * instantiated on the system\n * @return {Integer} Integer number of days before a recurring transaction is scheduled to be processed that it is instantiated on the system\n */\nTransferProfile.prototype.getModelWindow = function() {\n  return this.modelWindow;\n};\nElement.add({name: \"MODELWND\", required: true, order: 90, owner: TransferProfile, /*type: Integer,*/ fcn: \"getModelWindow\"});\n\n\nTransferProfile.prototype.setModelWindow = function(/*Integer*/ modelWindow) {\n  this.modelWindow = modelWindow;\n};\n\n\n/**\n * Number of days before processing date that funds are withdrawn\n * @return {Integer} Integer number of days before processing date that funds are withdrawn\n */\nTransferProfile.prototype.getWithdrawnDays = function() {\n  return this.withdrawnDays;\n};\nElement.add({name: \"DAYSWITH\", required: true, order: 100, owner: TransferProfile, /*type: Integer,*/ fcn: \"getWithdrawnDays\"});\n\n\nTransferProfile.prototype.setWithdrawnDays = function(/*Integer*/ withdrawnDays) {\n  this.withdrawnDays = withdrawnDays;\n};\n\n\n/**\n * Default number of days to pay\n * @return {Integer} Integer Default number of days to pay\n */\nTransferProfile.prototype.getDefaultDaysToPay = function() {\n  return this.defaultDaysToPay;\n};\nElement.add({name: \"DFLTDAYSTOPAY\", required: true, order: 110, owner: TransferProfile, /*type: Integer,*/ fcn: \"getDefaultDaysToPay\"});\n\n\nTransferProfile.prototype.setDefaultDaysToPay = function(/*Integer*/ defaultDaysToPay) {\n  this.defaultDaysToPay = defaultDaysToPay;\n};\n\n\n\n\nmodule.exports = TransferProfile;\n","\"use strict\";\n\nmodule.exports = {\n  ImageProfile: require(\"./ImageProfile\"),\n  TransferProfile: require(\"./TransferProfile\")\n};\n","\"use strict\";\n\nmodule.exports = {\n  banking: require(\"./banking/index\"),\n  common: require(\"./common/index\"),\n  signup: require(\"./signup/index\"),\n\n  BankingMessageSetInfo: require(\"./BankingMessageSetInfo\"),\n  BankingV1MessageSetInfo: require(\"./BankingV1MessageSetInfo\"),\n  BillpayMessageSetInfo: require(\"./BillpayMessageSetInfo\"),\n  BillpayV1MessageSetInfo: require(\"./BillpayV1MessageSetInfo\"),\n  CreditCardMessageSetInfo: require(\"./CreditCardMessageSetInfo\"),\n  CreditCardV1MessageSetInfo: require(\"./CreditCardV1MessageSetInfo\"),\n  EmailMessageSetInfo: require(\"./EmailMessageSetInfo\"),\n  EmailV1MessageSetInfo: require(\"./EmailV1MessageSetInfo\"),\n  InterbankTransferMessageSetInfo: require(\"./InterbankTransferMessageSetInfo\"),\n  InterbankTransferV1MessageSetInfo: require(\"./InterbankTransferV1MessageSetInfo\"),\n  InvestmentMessageSetInfo: require(\"./InvestmentMessageSetInfo\"),\n  InvestmentV1MessageSetInfo: require(\"./InvestmentV1MessageSetInfo\"),\n  ProfileMessageSetInfo: require(\"./ProfileMessageSetInfo\"),\n  ProfileV1MessageSetInfo: require(\"./ProfileV1MessageSetInfo\"),\n  SecurityListMessageSetInfo: require(\"./SecurityListMessageSetInfo\"),\n  SecurityListV1MessageSetInfo: require(\"./SecurityListV1MessageSetInfo\"),\n  SignOnMessageSetInfo: require(\"./SignOnMessageSetInfo\"),\n  SignOnV1MessageSetInfo: require(\"./SignOnV1MessageSetInfo\"),\n  SignupMessageSetInfo: require(\"./SignupMessageSetInfo\"),\n  SignupV1MessageSetInfo: require(\"./SignupV1MessageSetInfo\"),\n  WireTransferMessageSetInfo: require(\"./WireTransferMessageSetInfo\"),\n  WireTransferV1MessageSetInfo: require(\"./WireTransferV1MessageSetInfo\"),\n};\n","/*\n * Copyright 2012 TheStash\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../../../meta/Aggregate\");\nvar Element = require(\"../../../../../meta/Element\");\n\n/**\n * Client Enrollment option, contains indicator as to whether the account number is required as part of enrollment\n * @class\n * @see \"Section 8.8 OFX Spec\"\n */\nfunction ClientEnrollment () {\n\n  /**\n   * @name ClientEnrollment#accountRequired\n   * @type Boolean\n   * @access private\n   */\n  this.accountRequired = null;\n}\n\n\n\nAggregate.add(\"CLIENTENROLL\", ClientEnrollment);\n\n\n/**\n * Y if account number is required as part of enrollment\n * @return {Boolean} Boolean\n */\nClientEnrollment.prototype.getAccountRequired = function() {\n  return this.accountRequired;\n};\nElement.add({name: \"ACCTREQUIRED\", required: true, order: 0, owner: ClientEnrollment, /*type: Boolean,*/ fcn: \"getAccountRequired\"});\n\n\nClientEnrollment.prototype.setAccountRequired = function(/*Boolean*/ accountRequired) {\n  this.accountRequired = accountRequired;\n};\n\n\n\n\nmodule.exports = ClientEnrollment;\n","/*\n * Copyright 2012 TheStash\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../../../meta/Aggregate\");\nvar Element = require(\"../../../../../meta/Element\");\n\n/**\n * Other Enrollment option containing a text message directing users to some other method (such as a phone call)\n * @class\n * @see \"Section 8.8 OFX Spec\"\n */\n\nfunction OtherEnrollment () {\n\n  /**\n   * @name OtherEnrollment#message\n   * @type String\n   * @access private\n   */\n  this.message = null;\n}\n\n\n\nAggregate.add(\"OTHERENROLL\", OtherEnrollment);\n\n\n/**\n * Message to consumer about what to do next (for example, a phone number),\n * @return {String} String\n */\nOtherEnrollment.prototype.getMessage = function() {\n  return this.message;\n};\nElement.add({name: \"MESSAGE\", required: true, order: 0, owner: OtherEnrollment, /*type: String,*/ fcn: \"getMessage\"});\n\n\nOtherEnrollment.prototype.setMessage = function(/*String*/ message) {\n  this.message = message;\n};\n\n\n\n\nmodule.exports = OtherEnrollment;\n","/*\n * Copyright 2012 TheStash\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../../../meta/Aggregate\");\nvar Element = require(\"../../../../../meta/Element\");\n\n/**\n * Web Enrollment option containing URL to direct user for web based enrollment, if supported.\n * @class\n * @see \"Section 8.8 OFX Spec\"\n */\nfunction WebEnrollment () {\n\n  /**\n   * @name WebEnrollment#url\n   * @type String\n   * @access private\n   */\n  this.url = null;\n}\n\n\n\nAggregate.add(\"WEBENROLL\", WebEnrollment);\n\n\n/**\n * URL to start enrollment process\n * @return {String} String\n */\nWebEnrollment.prototype.getUrl = function() {\n  return this.url;\n};\nElement.add({name: \"URL\", required: true, order: 0, owner: WebEnrollment, /*type: String,*/ fcn: \"getUrl\"});\n\n\nWebEnrollment.prototype.setUrl = function(/*String*/ url) {\n  this.url = url;\n};\n\n\n\n\nmodule.exports = WebEnrollment;\n","\"use strict\";\n\nmodule.exports = {\n  ClientEnrollment: require(\"./ClientEnrollment\"),\n  OtherEnrollment: require(\"./OtherEnrollment\"),\n  WebEnrollment: require(\"./WebEnrollment\"),\n};\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\n/**\n * Asset class for debt.\n * @see \"Section 13.8.5.7, OFX Spec\"\n *\n * @enum\n */\nvar AssetClass = {\n  /**\n   * Government: 0 or corporate bonds issued in the United States.\n   */\n  DOMESTIC_BOND: 1,\n\n  /**\n   * Government: 2 or corporate bonds issued in foreign countries or the United States.\n   */\n  INTL_BOND: 3,\n\n  /**\n   * Stocks: 4 for US companies with market caps of $2B or more.\n   */\n  LARGE_STOCK: 5,\n\n  /**\n   * Stocks: 6 for US companies with market caps of ~$100M to $2B.\n   */\n  SMALL_STOCK: 7,\n\n  /**\n   * Publicallt: 8 traded stocks for companies based in foreign countries.\n   */\n  INTL_STOCK: 9,\n\n  /**\n   * Stable: 10, short-term investments which provide income that rises and falls with short-term\n   * interest: 11 rates.\n   */\n  MONEY_MARKET: 12,\n\n  /**\n   * Investments: 13 which do not fit into any of the other types.\n   */\n  OTHER: 14,\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"DOMESTICBOND\".equals(ofxVal)) {\n      return AssetClass.DOMESTIC_BOND;\n    } else if (\"INTLBOND\".equals(ofxVal)) {\n      return AssetClass.INTL_BOND;\n    } else if (\"LARGESTOCK\".equals(ofxVal)) {\n      return AssetClass.LARGE_STOCK;\n    } else if (\"SMALLSTOCK\".equals(ofxVal)) {\n      return AssetClass.SMALL_STOCK;\n    } else if (\"INTLSTOCK\".equals(ofxVal)) {\n      return AssetClass.INTL_STOCK;\n    } else if (\"MONEYMARKET\".equals(ofxVal)) {\n      return AssetClass.MONEY_MARKET;\n    } else if (\"OTHER\".equals(ofxVal)) {\n      return AssetClass.OTHER;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = AssetClass;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\n\n/**\n * Base class for info about the various types of securities.\n * @see \"Section 13.8.5.1, OFX Spec\"\n * <br>\n * This class exposes a read-only view of the flattened aggregates that are\n * common to all security info as a convenience to application\n * developers who may not find the ofx aggregation model intuitive.\n *\n * @author Jon Perlow\n */\nfunction BaseSecurityInfo () {\n\n  /**\n   * @name BaseSecurityInfo#securityInfo\n   * @type SecurityInfo\n   * @access private\n   */\n  this.securityInfo = null;\n}\n\n\n\n\n\n/**\n * Gets the security info aggregate.\n *\n * @return {SecurityInfo} the security info aggregate.\n */\nBaseSecurityInfo.prototype.getSecurityInfo = function() {\n  return this.securityInfo;\n};\nChildAggregate.add({required: true, order: 10, owner: BaseSecurityInfo, /*type: SecurityInfo,*/ fcn: \"getSecurityInfo\"});\n\n\n/**\n * Sets the security info aggregate.\n *\n * @param {SecurityInfo} securityInfo the security info aggregate.\n */\nBaseSecurityInfo.prototype.setSecurityInfo = function(securityInfo) {\n  this.securityInfo = securityInfo;\n};\n\n\n/**\n * Gets the unique security id for the security. This is a required field according to the OFX\n * spec.\n *\n * @return {SecurityId} the security id\n */\nBaseSecurityInfo.prototype.getSecurityId = function() {\n  return this.getSecurityInfo().getSecurityId();\n};\n\n\n/**\n * Gets the full name of the security. This is a required field according to the OFX spec.\n *\n * @return {String} the full name of the security.\n */\nBaseSecurityInfo.prototype.getSecurityName = function() {\n  return this.getSecurityInfo().getSecurityName();\n};\n\n\n/**\n * Gets the ticker symbol for the security. This is an optional field according to the OFX spec.\n *\n * @return {String} the ticket symbol or null if there's no ticker symbol\n */\nBaseSecurityInfo.prototype.getTickerSymbol = function() {\n  return this.getSecurityInfo().getTickerSymbol();\n};\n\n\n/**\n * Gets the FI ID number for the security. This is an optional field according to the OFX spec.\n *\n * @return {String} the FI ID number for the security\n */\nBaseSecurityInfo.prototype.getFiId = function() {\n  return this.getSecurityInfo().getFiId();\n};\n\n\n/**\n * Gets the rating of the security. This is an optional field according to the OFX spec.\n *\n * @return {String} the rating\n */\nBaseSecurityInfo.prototype.getRating = function() {\n  return this.getSecurityInfo().getRating();\n};\n\n\n/**\n * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the\n * share price. For bonds, this is the percentage of par. For options, this is the per share (not\n * per contact) price. This is a noptional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the per unit price\n */\nBaseSecurityInfo.prototype.getUnitPrice = function() {\n  return this.getSecurityInfo().getUnitPrice();\n};\n\n\n/**\n * Gets the date as-of for the unit price. This is an optional field according to the OFX spec.\n *\n * @return {Date} the date as-of for the unit price\n */\nBaseSecurityInfo.prototype.getUnitPriceAsOfDate = function() {\n  return this.getSecurityInfo().getUnitPriceAsOfDate();\n};\n\n\n/**\n * Gets the overriding currency code for the security. If not set, implies the default currency.\n * This is an optional field according to the OFX spec.\n *\n * @return {String} the overriding currency code or null to mean the default currency\n */\nBaseSecurityInfo.prototype.getCurrencyCode = function() {\n  return this.getSecurityInfo().getCurrencyCode();\n};\n\n\n/**\n * Gets any memo associated with the security. This is an optional field according to the OFX\n * spec.\n *\n * @return {String} the memo\n */\nBaseSecurityInfo.prototype.getMemo = function() {\n  return this.getSecurityInfo().getMemo();\n};\n\n\n\n\nmodule.exports = BaseSecurityInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Call type for debt.\n * @see \"Section 13.8.5.2, OFX Spec\"\n *\n * @enum\n */\nvar CallType = {\n  CALL: 0,\n  PUT: 1,\n  PREFUND: 2,\n  MATURITY: 3,\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"CALL\".equals(ofxVal)) {\n      return CallType.CALL;\n    } else if (\"PUT\".equals(ofxVal)) {\n      return CallType.PUT;\n    } else if (\"PREFUND\".equals(ofxVal)) {\n      return CallType.PREFUND;\n    } else if (\"MATURITY\".equals(ofxVal)) {\n      return CallType.MATURITY;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = CallType;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Coupon freqency for debt.\n * @see \"Section 13.8.5.2, OFX Spec\"\n *\n * @enum\n */\nvar CouponFrequency = {\n  MONTHLY: 0,\n  QUARTERLY: 1,\n  SEMIANNUAL: 2,\n  ANNUAL: 3,\n  OTHER: 4,\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"MONTHLY\".equals(ofxVal)) {\n      return CouponFrequency.MONTHLY;\n    } else if (\"QUARTERLY\".equals(ofxVal)) {\n      return CouponFrequency.QUARTERLY;\n    } else if (\"SEMIANNUAL\".equals(ofxVal)) {\n      return CouponFrequency.SEMIANNUAL;\n    } else if (\"ANNUAL\".equals(ofxVal)) {\n      return CouponFrequency.ANNUAL;\n    } else if (\"OTHER\".equals(ofxVal)) {\n      return CouponFrequency.OTHER;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = CouponFrequency;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * The class of debt.\n * @see \"Section 13.8.5.2, OFX Spec\"\n *\n * @enum\n */\nvar DebtClass = {\n  TREASURY: 0,\n  MUNICIPAL: 1,\n  CORPORATE: 2,\n  OTHER: 3,\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"TREASURY\".equals(ofxVal)) {\n      return DebtClass.TREASURY;\n    } else if (\"MUNICIPAL\".equals(ofxVal)) {\n      return DebtClass.MUNICIPAL;\n    } else if (\"CORPORATE\".equals(ofxVal)) {\n      return DebtClass.CORPORATE;\n    } else if (\"OTHER\".equals(ofxVal)) {\n      return DebtClass.OTHER;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = DebtClass;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar BaseSecurityInfo = require(\"./BaseSecurityInfo\");\nvar DebtType = require(\"./DebtType\");\nvar DebtClass = require(\"./DebtClass\");\nvar CouponFrequency = require(\"./CouponFrequency\");\nvar CallType = require(\"./CallType\");\nvar AssetClass = require(\"./AssetClass\");\n\n/**\n * Info about a debt security.\n * @see \"Section 13.8.5.2, OFX Spec\"\n *\n * @class\n * @augments BaseSecurityInfo\n */\nfunction DebtSecurityInfo () {\n\n  /**\n   * @name DebtSecurityInfo#parValue\n   * @type Double\n   * @access private\n   */\n  this.parValue = null;\n\n  /**\n   * @name DebtSecurityInfo#debtType\n   * @type String\n   * @access private\n   */\n  this.debtType = null;\n\n  /**\n   * @name DebtSecurityInfo#debtClass\n   * @type String\n   * @access private\n   */\n  this.debtClass = null;\n\n  /**\n   * @name DebtSecurityInfo#couponRate\n   * @type Double\n   * @access private\n   */\n  this.couponRate = null;\n\n  /**\n   * @name DebtSecurityInfo#nextMaturityDate\n   * @type Date\n   * @access private\n   */\n  this.nextMaturityDate = null;\n\n  /**\n   * @name DebtSecurityInfo#couponFrequency\n   * @type String\n   * @access private\n   */\n  this.couponFrequency = null;\n\n  /**\n   * @name DebtSecurityInfo#callPrice\n   * @type Double\n   * @access private\n   */\n  this.callPrice = null;\n\n  /**\n   * @name DebtSecurityInfo#yieldToCall\n   * @type Double\n   * @access private\n   */\n  this.yieldToCall = null;\n\n  /**\n   * @name DebtSecurityInfo#nextCallDate\n   * @type Date\n   * @access private\n   */\n  this.nextCallDate = null;\n\n  /**\n   * @name DebtSecurityInfo#callType\n   * @type String\n   * @access private\n   */\n  this.callType = null;\n\n  /**\n   * @name DebtSecurityInfo#yieldToMaturity\n   * @type Double\n   * @access private\n   */\n  this.yieldToMaturity = null;\n\n  /**\n   * @name DebtSecurityInfo#debtMaturityDate\n   * @type Date\n   * @access private\n   */\n  this.debtMaturityDate = null;\n\n  /**\n   * @name DebtSecurityInfo#assetClass\n   * @type String\n   * @access private\n   */\n  this.assetClass = null;\n\n  /**\n   * @name DebtSecurityInfo#fiAssetClass\n   * @type String\n   * @access private\n   */\n  this.fiAssetClass = null;\n}\n\ninherit(DebtSecurityInfo, \"extends\", BaseSecurityInfo);\n\n\nAggregate.add(\"DEBTINFO\", DebtSecurityInfo);\n\n\n/**\n * Gets the par value of the debt. This is a required field according to the OFX spec.\n *\n * @return {Double} the par value of the debt\n */\nDebtSecurityInfo.prototype.getParValue = function() {\n  return this.parValue;\n};\nElement.add({name: \"PARVALUE\", required:true, order: 20, owner: DebtSecurityInfo, /*type: Double,*/ fcn: \"getParValue\"});\n\n\n/**\n * Sets the par value of the debt. This is a required field according to the OFX spec.\n *\n * @param {Double} parValue the par value of the debt\n */\nDebtSecurityInfo.prototype.setParValue = function(parValue) {\n  this.parValue = parValue;\n};\n\n\n/**\n * Gets the type of debt. One of \"COUPON\" or \"ZERO\". This is a required field according to the\n * OFX spec.\n *\n * @return {String} the type of debt\n */\nDebtSecurityInfo.prototype.getDebtType = function() {\n  return this.debtType;\n};\nElement.add({name: \"DEBTTYPE\", required:true, order: 30, owner: DebtSecurityInfo, /*type: String,*/ fcn: \"getDebtType\"});\n\n\n/**\n * Sets the type of debt. One of \"COUPON\" or \"ZERO\". This is a required field according to the\n * OFX spec.\n *\n * @param {String} debtType the type of debt\n */\nDebtSecurityInfo.prototype.setDebtType = function(debtType) {\n  this.debtType = debtType;\n};\n\n\n/**\n * Gets the type of debt as one of the well-known types.\n *\n * @return {DebtType} the type of debt or null if it's not one of the well-known types\n */\nDebtSecurityInfo.prototype.getDebtTypeEnum = function() {\n  return DebtType.fromOfx(this.getDebtType());\n};\n\n\n/**\n * Gets the class of debt. One of \"TREASURY\", \"MUNICIPAL\", \"CORPORATE\", or \"OTHER\".\n * This is an optional field according to the OFX spec.\n *\n * @return {String} the class of debt\n */\nDebtSecurityInfo.prototype.getDebtClass = function() {\n  return this.debtClass;\n};\nElement.add({name: \"DEBTCLASS\", order: 40, owner: DebtSecurityInfo, /*type: String,*/ fcn: \"getDebtClass\"});\n\n\n/**\n * Sets the class of debt. One of \"TREASURY\", \"MUNICIPAL\", \"CORPORATE\", or \"OTHER\".\n * This is an optional field according to the OFX spec.\n *\n * @param {String} debtClass the class of debt\n */\nDebtSecurityInfo.prototype.setDebtClass = function(debtClass) {\n  this.debtClass = debtClass;\n};\n\n\n/**\n * Gets the class of debt as one of the well-known types.\n *\n * @return {DebtClass} the class of debt or null if it's not one of the well-known types\n */\nDebtSecurityInfo.prototype.getDebtClassEnum = function() {\n  return DebtClass.fromOfx(this.debtClass);\n};\n\n\n/**\n * Gets the coupon rate of the debt for the next closest call date.\n * This is an optional field according to the OFX spec.\n *\n * @return {Double} the coupon rate\n */\nDebtSecurityInfo.prototype.getCouponRate = function() {\n  return this.couponRate;\n};\nElement.add({name: \"COUPONRT\", order: 50, owner: DebtSecurityInfo, /*type: Double,*/ fcn: \"getCouponRate\"});\n\n\n/**\n * Sets the coupon rate of the debt for the next closest call date.\n * This is an optional field according to the OFX spec.\n *\n * @param {Double} couponRate the coupon rate\n */\nDebtSecurityInfo.prototype.setCouponRate = function(couponRate) {\n  this.couponRate = couponRate;\n};\n\n\n/**\n * Gets the next maturity date for the next coupon.\n * This is an optional field according to the OFX spec.\n *\n * @return {Date} the maturity date for the next coupon\n */\nDebtSecurityInfo.prototype.getNextMaturityDate = function() {\n  return this.nextMaturityDate;\n};\nElement.add({name: \"DTCOUPON\", order: 60, owner: DebtSecurityInfo, /*type: Date,*/ fcn: \"getNextMaturityDate\"});\n\n\n/**\n * Sets the next maturity date for the next coupon.\n * This is an optional field according to the OFX spec.\n *\n * @param {Date} nextMaturityDate the maturity date for the next coupon.\n */\nDebtSecurityInfo.prototype.setNextMaturityDate = function(nextMaturityDate) {\n  this.nextMaturityDate = nextMaturityDate;\n};\n\n\n/**\n * Gets the coupon frequency. One of \"MONTHLY\", \"QUARTERLY\", \"SEMIANNUAL\", \"ANNUAL\", or \"OTHER\".\n * This is an optional field according to the OFX spec.\n *\n * @return {String} the coupon frequency\n */\nDebtSecurityInfo.prototype.getCouponFrequency = function() {\n  return this.couponFrequency;\n};\nElement.add({name: \"COUPONFREQ\", order: 70, owner: DebtSecurityInfo, /*type: String,*/ fcn: \"getCouponFrequency\"});\n\n\n/**\n * Sets the coupon frequency. One of \"MONTHLY\", \"QUARTERLY\", \"SEMIANNUAL\", \"ANNUAL\", or \"OTHER\".\n * This is an optional field according to the OFX spec.\n *\n * @param {String} couponFrequency the coupon frequency\n */\nDebtSecurityInfo.prototype.setCouponFrequency = function(couponFrequency) {\n  this.couponFrequency = couponFrequency;\n};\n\n\n/**\n * Gets the coupon frequency as one of the well-known types.\n *\n * @return {CouponFrequency} the coupon frequency or null if it's not one of the well-known types\n */\nDebtSecurityInfo.prototype.getCouponFrequencyEnum = function() {\n  return CouponFrequency.fromOfx(this.getCouponFrequency());\n};\n\n\n/**\n * Gets the bond price. This is an optional field according to the OFX spec.\n *\n * @return {Double} the bond price\n */\nDebtSecurityInfo.prototype.getCallPrice = function() {\n  return this.callPrice;\n};\nElement.add({name: \"CALLPRICE\", order: 80, owner: DebtSecurityInfo, /*type: Double,*/ fcn: \"getCallPrice\"});\n\n\n/**\n * Sets the bond price. This is an optional field according to the OFX spec.\n *\n * @param {Double} callPrice the bond price\n */\nDebtSecurityInfo.prototype.setCallPrice = function(callPrice) {\n  this.callPrice = callPrice;\n};\n\n\n/**\n * Gets the yield to call as a rate. This is an optional field according to the OFX spec.\n *\n * @return {Double} the yield to call rate\n */\nDebtSecurityInfo.prototype.getYieldToCall = function() {\n  return this.yieldToCall;\n};\nElement.add({name: \"YIELDTOCALL\", order: 90, owner: DebtSecurityInfo, /*type: Double,*/ fcn: \"getYieldToCall\"});\n\n\n/**\n * Sets the yield to call as a rate. This is an optional field according to the OFX spec.\n *\n * @param {Double} yieldToCall the yield to call rate\n */\nDebtSecurityInfo.prototype.setYieldToCall = function(yieldToCall) {\n  this.yieldToCall = yieldToCall;\n};\n\n\n/**\n * Gets the next call date. This is an optional field according to the OFX spec.\n *\n * @return {Date} the next call date.\n */\nDebtSecurityInfo.prototype.getNextCallDate = function() {\n  return this.nextCallDate;\n};\nElement.add({name: \"DTCALL\", order: 100, owner: DebtSecurityInfo, /*type: Date,*/ fcn: \"getNextCallDate\"});\n\n\n/**\n * Sets the next call date. This is an optional field according to the OFX spec.\n *\n * @param {Date} nextCallDate the next call date.\n */\nDebtSecurityInfo.prototype.setNextCallDate = function(nextCallDate) {\n  this.nextCallDate = nextCallDate;\n};\n\n\n/**\n * Gets the type of call.\n *\n * @return {String} the type of call\n */\nDebtSecurityInfo.prototype.getCallType = function() {\n  return this.callType;\n};\nElement.add({name: \"CALLTYPE\", order: 110, owner: DebtSecurityInfo, /*type: String,*/ fcn: \"getCallType\"});\n\n\n/**\n * Sets the type of call.\n *\n * @param {String} callType the type of call\n */\nDebtSecurityInfo.prototype.setCallType = function(callType) {\n  this.callType = callType;\n};\n\n\n/**\n * Gets the type of call as one of the well-known types.\n *\n * @return {CallType} the type of call or null if it's not one of the well-known types\n */\nDebtSecurityInfo.prototype.getCallTypeEnum = function() {\n  return CallType.fromOfx(this.getCallType());\n};\n\n\n/**\n * Gets the yield to maturity as a rate. This is an optional field according to the OFX spec.\n *\n * @return {Double} the yield to call rate\n */\nDebtSecurityInfo.prototype.getYieldToMaturity = function() {\n  return this.yieldToMaturity;\n};\nElement.add({name: \"YIELDTOMAT\", order: 120, owner: DebtSecurityInfo, /*type: Double,*/ fcn: \"getYieldToMaturity\"});\n\n\n/**\n * Sets the yield to maturity as a rate. This is an optional field according to the OFX spec.\n *\n * @param {Double} yieldToMaturity the yield to call rate\n */\nDebtSecurityInfo.prototype.setYieldToMaturity = function(yieldToMaturity) {\n  this.yieldToMaturity = yieldToMaturity;\n};\n\n\n/**\n * Gets the date when the debt matures. This is an optional field according to the OFX spec.\n *\n * @return {Date} the date when the debt matures\n */\nDebtSecurityInfo.prototype.getDebtMaturityDate = function() {\n  return this.debtMaturityDate;\n};\nElement.add({name: \"DTMAT\", order: 130, owner: DebtSecurityInfo, /*type: Date,*/ fcn: \"getDebtMaturityDate\"});\n\n\n/**\n * Sets the date when the debt matures. This is an optional field according to the OFX spec.\n *\n * @param {Date} debtMaturityDate the date when the debt matures\n */\nDebtSecurityInfo.prototype.setDebtMaturityDate = function(debtMaturityDate) {\n  this.debtMaturityDate = debtMaturityDate;\n};\n\n\n/**\n * Gets the asset class of the debt. This is an optional field according to the OFX spec.\n *\n * @return {String} the asset class of the debt\n */\nDebtSecurityInfo.prototype.getAssetClass = function() {\n  return this.assetClass;\n};\nElement.add({name: \"ASSETCLASS\", order: 140, owner: DebtSecurityInfo, /*type: String,*/ fcn: \"getAssetClass\"});\n\n\n/**\n * Sets the asset class of the debt. This is an optional field according to the OFX spec.\n *\n * @param {String} assetClass the asset class of the debt\n */\nDebtSecurityInfo.prototype.setAssetClass = function(assetClass) {\n  this.assetClass = assetClass;\n};\n\n\n/**\n * Gets the assert class as one of the well-known types.\n *\n * @return {AssetClass} the asset class or null if it's not one of the well-known types\n */\nDebtSecurityInfo.prototype.getAssetClassEnum = function() {\n  return AssetClass.fromOfx(this.getAssetClass());\n};\n\n\n/**\n * Gets the FI-defined asset class of the debt. This is an optional field according to the OFX\n * spec.\n *\n * @return {String} the FI-defined asset class of the debt\n */\nDebtSecurityInfo.prototype.getFiAssetClass = function() {\n  return this.fiAssetClass;\n};\nElement.add({name: \"FIASSETCLASS\", order: 150, owner: DebtSecurityInfo, /*type: String,*/ fcn: \"getFiAssetClass\"});\n\n\n/**\n * Sets the FI-defined asset class of the debt. This is an optional field according to the OFX\n * spec.\n *\n * @param {String} fiAssetClass the FI-defined asset class of the debt\n */\nDebtSecurityInfo.prototype.setFiAssetClass = function(fiAssetClass) {\n  this.fiAssetClass = fiAssetClass;\n};\n\n\n\n\nmodule.exports = DebtSecurityInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * The type of debt.\n * @see \"Section 13.8.5.2, OFX Spec\"\n *\n * @author Jon Perlow\n */\nvar DebtType = {\n  COUPON: 0,\n  ZERO: 1,\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"COUPON\".equals(ofxVal)) {\n      return DebtType.COUPON;\n    } else if (\"ZERO\".equals(ofxVal)) {\n      return DebtType.ZERO;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = DebtType;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar BaseSecurityInfo = require(\"./BaseSecurityInfo\");\nvar MutualFundType = require(\"./MutualFundType\");\n\n/**\n * Info about a mutual fund security.\n * @see \"Section 13.8.5.3, OFX Spec\"\n *\n * @class\n * @augments BaseSecurityInfo\n */\nfunction MutualFundSecurityInfo () {\n\n  /**\n   * @name MutualFundSecurityInfo#mfType\n   * @type String\n   * @access private\n   */\n  this.mfType = null;\n\n  /**\n   * @name MutualFundSecurityInfo#yield\n   * @type Double\n   * @access private\n   */\n  this.yield = null;\n\n  /**\n   * @name MutualFundSecurityInfo#dateYieldAsOf\n   * @type Date\n   * @access private\n   */\n  this.dateYieldAsOf = null;\n}\n\ninherit(MutualFundSecurityInfo, \"extends\", BaseSecurityInfo);\n\n\nAggregate.add(\"MFINFO\", MutualFundSecurityInfo);\n\n\n/**\n * Gets the mutual fund type. One of \"OPENEND\", \"CLOSEEND\", or \"OTHER\". This is an optional field\n * according to the OFX spec.\n *\n * @return {String} the mutual fund type\n */\nMutualFundSecurityInfo.prototype.getType = function() {\n  return this.mfType;\n};\nElement.add({name: \"MFTYPE\", order: 20, owner: MutualFundSecurityInfo, /*type: String,*/ fcn: \"getType\"});\n\n\n/**\n * Sets the mutual fund type. One of \"OPENEND\", \"CLOSEEND\", or \"OTHER\". This is an optional field\n * according to the OFX spec.\n *\n * @param {String} mfType the mutual fund type\n */\nMutualFundSecurityInfo.prototype.setType = function(mfType) {\n  this.mfType = mfType;\n};\n\n\n/**\n * Gets the mutual fund type as one of the well-known types.\n *\n * @return {MutualFundType} the mutual fund type or null if it's not one of the well-known types\n */\nMutualFundSecurityInfo.prototype.getTypeEnum = function() {\n  return MutualFundType.fromOfx(this.getType());\n};\n\n\n/**\n * Gets the yield as a rate. This is an optional field according to the OFX spec.\n *\n * @return {Double} the yield as a rate\n */\nMutualFundSecurityInfo.prototype.getYield = function() {\n  return this.yield;\n};\nElement.add({name: \"YIELD\", order: 30, owner: MutualFundSecurityInfo, /*type: Double,*/ fcn: \"getYield\"});\n\n\n/**\n * Sets the yield as a rate. This is an optional field according to the OFX spec.\n *\n * @param {Double} yield the yield as a rate\n */\nMutualFundSecurityInfo.prototype.setYield = function(yield_) {\n  this.yield = yield_;\n};\n\n\n/**\n * Gets the as-of date for the yield. This is an optional field according to the OFX spec.\n *\n * @return {Date} the as-of date for the yield\n */\nMutualFundSecurityInfo.prototype.getDateYieldAsOf = function() {\n  return this.dateYieldAsOf;\n};\nElement.add({name: \"DTYIELDASOF\", order: 40, owner: MutualFundSecurityInfo, /*type: Date,*/ fcn: \"getDateYieldAsOf\"});\n\n\n/**\n * Sets the as-of date for the yield. This is an optional field according to the OFX spec.\n *\n * @param {Date} dateYieldAsOf the as-of date for the yield\n */\nMutualFundSecurityInfo.prototype.setDateYieldAsOf = function(dateYieldAsOf) {\n  this.dateYieldAsOf = dateYieldAsOf;\n};\n\n\n\n\nmodule.exports = MutualFundSecurityInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * The type of mutual fund.\n * @see \"Section 13.8.5.2, OFX Spec\"\n *\n * @enum\n */\nvar MutualFundType = {\n  OPEN_END: 0,\n  CLOSE_END: 1,\n  OTHER: 2,\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"OPENEND\".equals(ofxVal)) {\n      return MutualFundType.OPEN_END;\n    } else if (\"CLOSEEND\".equals(ofxVal)) {\n      return MutualFundType.CLOSE_END;\n    } else if (\"OTHER\".equals(ofxVal)) {\n      return MutualFundType.OTHER;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = MutualFundType;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar BaseSecurityInfo = require(\"./BaseSecurityInfo\");\nvar OptionType = require(\"./OptionType\");\nvar AssetClass = require(\"./AssetClass\");\n\n/**\n * Info about an option security.\n * @see \"Section 13.8.5.4, OFX Spec\"\n *\n * @class\n * @augments BaseSecurityInfo\n */\nfunction OptionSecurityInfo () {\n\n  /**\n   * @name OptionSecurityInfo#optionType\n   * @type String\n   * @access private\n   */\n  this.optionType = null;\n\n  /**\n   * @name OptionSecurityInfo#strikePrice\n   * @type Double\n   * @access private\n   */\n  this.strikePrice = null;\n\n  /**\n   * @name OptionSecurityInfo#expirationDate\n   * @type Date\n   * @access private\n   */\n  this.expirationDate = null;\n\n  /**\n   * @name OptionSecurityInfo#sharesPerContact\n   * @type Integer\n   * @access private\n   */\n  this.sharesPerContact = null;\n\n  /**\n   * @name OptionSecurityInfo#underlyingSecurity\n   * @type SecurityId\n   * @access private\n   */\n  this.underlyingSecurity = null;\n\n  /**\n   * @name OptionSecurityInfo#assetClass\n   * @type String\n   * @access private\n   */\n  this.assetClass = null;\n\n  /**\n   * @name OptionSecurityInfo#fiAssetClass\n   * @type String\n   * @access private\n   */\n  this.fiAssetClass = null;\n}\n\ninherit(OptionSecurityInfo, \"extends\", BaseSecurityInfo);\n\n\nAggregate.add(\"OPTINFO\", OptionSecurityInfo);\n\n\n/**\n * Gets the type of option. One of \"PUT\" or \"CALL\". This is a required field according to the\n * OFX spec.\n *\n * @return {String} the option type\n */\nOptionSecurityInfo.prototype.getOptionType = function() {\n  return this.optionType;\n};\nElement.add({name: \"OPTTYPE\", order: 20, owner: OptionSecurityInfo, /*type: String,*/ fcn: \"getOptionType\"});\n\n\n/**\n * Sets the type of option. One of \"PUT\" or \"CALL\". This is a required field according to the\n * OFX spec.\n *\n * @param {String} optionType the option type\n */\nOptionSecurityInfo.prototype.setOptionType = function(optionType) {\n  this.optionType = optionType;\n};\n\n\n/**\n * Gets the option type as a well-known enum value.\n *\n * @return {OptionType} the option type or null if it's not one of the well-known types\n */\nOptionSecurityInfo.prototype.getOptionTypeEnum = function() {\n  return OptionType.fromOfx(this.getOptionType());\n};\n\n\n/**\n * Gets the strike price of the option. This is a required field according to the OFX spec.\n *\n * @return {Double} the option strike price\n */\nOptionSecurityInfo.prototype.getStrikePrice = function() {\n  return this.strikePrice;\n};\nElement.add({name: \"STRIKEPRICE\", order: 30, owner: OptionSecurityInfo, /*type: Double,*/ fcn: \"getStrikePrice\"});\n\n\n/**\n * Sets the strike price of the option. This is a required field according to the OFX spec.\n *\n * @param {Double} strikePrice the option strike price\n */\nOptionSecurityInfo.prototype.setStrikePrice = function(strikePrice) {\n  this.strikePrice = strikePrice;\n};\n\n\n/**\n * Gets the expiration date of the option. This is a required field according to the OFX spec.\n *\n * @return {Date} the expiration date of the option\n */\nOptionSecurityInfo.prototype.getExpirationDate = function() {\n  return this.expirationDate;\n};\nElement.add({name: \"DTEXPIRE\", order: 40, owner: OptionSecurityInfo, /*type: Date,*/ fcn: \"getExpirationDate\"});\n\n\n/**\n * Sets the expiration date of the option. This is a required field according to the OFX spec.\n *\n * @param {Date} expirationDate the expiration date of the option\n */\nOptionSecurityInfo.prototype.setExpirationDate = function(expirationDate) {\n  this.expirationDate = expirationDate;\n};\n\n\n/**\n * Gets the number of shares per option contact. This is a required field according to the OFX\n * spec.\n *\n * @return {Integer} the number of shares per option contact\n */\nOptionSecurityInfo.prototype.getSharesPerContact = function() {\n  return this.sharesPerContact;\n};\nElement.add({name: \"SHPERCTRCT\", order: 50, owner: OptionSecurityInfo, /*type: Integer,*/ fcn: \"getSharesPerContact\"});\n\n\n/**\n * Sets the number of shares per option contact. This is a required field according to the OFX\n * spec.\n *\n * @param {Integer} sharesPerContact the number of shares per option contact\n */\nOptionSecurityInfo.prototype.setSharesPerContact = function(sharesPerContact) {\n  this.sharesPerContact = sharesPerContact;\n};\n\n\n/**\n * Gets the security id of the underling security. This is an optional field according to the OFX\n * spec.\n *\n * @return {SecurityId} the security id of the underlying security\n */\nOptionSecurityInfo.prototype.getUnderlyingSecurity = function() {\n  return this.underlyingSecurity;\n};\nElement.add({name: \"SECID\", order: 60, owner: OptionSecurityInfo, /*type: SecurityId,*/ fcn: \"getUnderlyingSecurity\"});\n\n\n/**\n * Sets the security id of the underling security. This is an optional field according to the OFX\n * spec.\n *\n * @param {SecurityId} underlyingSecurity the security id of the underlying security\n */\nOptionSecurityInfo.prototype.setUnderlyingSecurity = function(underlyingSecurity) {\n  this.underlyingSecurity = underlyingSecurity;\n};\n\n\n/**\n * Gets the asset class of the option. This is an optional field according to the OFX spec.\n *\n * @return {String} the asset class of the option\n */\nOptionSecurityInfo.prototype.getAssetClass = function() {\n  return this.assetClass;\n};\nElement.add({name: \"ASSETCLASS\", order: 70, owner: OptionSecurityInfo, /*type: String,*/ fcn: \"getAssetClass\"});\n\n\n/**\n * Sets the asset class of the option. This is an optional field according to the OFX spec.\n *\n * @param {String} assetClass the asset class of the option\n */\nOptionSecurityInfo.prototype.setAssetClass = function(assetClass) {\n  this.assetClass = assetClass;\n};\n\n\n/**\n * Gets the assert class as one of the well-known types.\n *\n * @return {AssetClass} the asset class or null if it's not one of the well-known types\n */\nOptionSecurityInfo.prototype.getAssetClassEnum = function() {\n  return AssetClass.fromOfx(this.getAssetClass());\n};\n\n\n/**\n * Gets the FI-defined asset class of the option. This is an optional field according to the OFX\n * spec.\n *\n * @return {String} the FI-defined asset class of the option\n */\nOptionSecurityInfo.prototype.getFiAssetClass = function() {\n  return this.fiAssetClass;\n};\nElement.add({name: \"FIASSETCLASS\", order: 80, owner: OptionSecurityInfo, /*type: String,*/ fcn: \"getFiAssetClass\"});\n\n\n/**\n * Sets the FI-defined asset class of the option. This is an optional field according to the OFX\n * spec.\n *\n * @param {String} fiAssetClass the FI-defined asset class of the option\n */\nOptionSecurityInfo.prototype.setFiAssetClass = function(fiAssetClass) {\n  this.fiAssetClass = fiAssetClass;\n};\n\n\n\n\nmodule.exports = OptionSecurityInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * Type of option.\n * @see \"Section 13.8.5.4, OFX Spec\"\n *\n * @enum\n */\nvar OptionType = {\n  PUT: 0,\n  CALL: 1,\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"PUT\".equals(ofxVal)) {\n      return OptionType.PUT;\n    } else if (\"CALL\".equals(ofxVal)) {\n      return OptionType.CALL;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = OptionType;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar BaseSecurityInfo = require(\"./BaseSecurityInfo\");\nvar AssetClass = require(\"./AssetClass\");\n\n/**\n * Info about any other type of security.\n * @see \"Section 13.8.5.5, OFX Spec\"\n *\n * @class\n * @augments BaseSecurityInfo\n */\nfunction OtherSecurityInfo () {\n\n  /**\n   * @name OtherSecurityInfo#typeDesc\n   * @type String\n   * @access private\n   */\n  this.typeDesc = null;\n\n  /**\n   * @name OtherSecurityInfo#assetClass\n   * @type String\n   * @access private\n   */\n  this.assetClass = null;\n\n  /**\n   * @name OtherSecurityInfo#fiAssetClass\n   * @type String\n   * @access private\n   */\n  this.fiAssetClass = null;\n}\n\ninherit(OtherSecurityInfo, \"extends\", BaseSecurityInfo);\n\n\nAggregate.add(\"OTHERINFO\", OtherSecurityInfo);\n\n\n/**\n * Gets a description of the type of security. This is an optional field according to the OFX\n * spec.\n *\n * @return {String} the description of the security\n */\nOtherSecurityInfo.prototype.getTypeDesc = function() {\n  return this.typeDesc;\n};\nElement.add({name: \"TYPEDESC\", order: 20, owner: OtherSecurityInfo, /*type: String,*/ fcn: \"getTypeDesc\"});\n\n\n/**\n * Sets a description of the type of security. This is an optional field according to the OFX\n * spec.\n *\n * @param {String} typeDesc the description of the security\n */\nOtherSecurityInfo.prototype.setTypeDesc = function(typeDesc) {\n  this.typeDesc = typeDesc;\n};\n\n\n/**\n * Gets the asset class of the option. This is an optional field according to the OFX spec.\n *\n * @return {String} the asset class of the debt\n */\nOtherSecurityInfo.prototype.getAssetClass = function() {\n  return this.assetClass;\n};\nElement.add({name: \"ASSETCLASS\", order: 30, owner: OtherSecurityInfo, /*type: String,*/ fcn: \"getAssetClass\"});\n\n\n/**\n * Sets the asset class of the debt. This is an optional field according to the OFX spec.\n *\n * @param {String} assetClass the asset class of the debt\n */\nOtherSecurityInfo.prototype.setAssetClass = function(assetClass) {\n  this.assetClass = assetClass;\n};\n\n\n/**\n * Gets the assert class as one of the well-known types.\n *\n * @return {AssetClass} the asset class or null if it's not one of the well-known types\n */\nOtherSecurityInfo.prototype.getAssetClassEnum = function() {\n  return AssetClass.fromOfx(this.getAssetClass());\n};\n\n\n/**\n * Gets the FI-defined asset class of the debt. This is an optional field according to the OFX\n * spec.\n *\n * @return {String} the FI-defined asset class of the debt\n */\nOtherSecurityInfo.prototype.getFiAssetClass = function() {\n  return this.fiAssetClass;\n};\nElement.add({name: \"FIASSETCLASS\", order: 40, owner: OtherSecurityInfo, /*type: String,*/ fcn: \"getFiAssetClass\"});\n\n\n/**\n * Sets the FI-defined asset class of the debt. This is an optional field according to the OFX\n * spec.\n *\n * @param {String} fiAssetClass the FI-defined asset class of the debt\n */\nOtherSecurityInfo.prototype.setFiAssetClass = function(fiAssetClass) {\n  this.fiAssetClass = fiAssetClass;\n};\n\n\n\n\nmodule.exports = OtherSecurityInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\n\n/**\n * Identifier for a security.\n * @see \"Section 13.8.1, OFX Spec\"\n *\n * @class\n */\nfunction SecurityId () {\n\n  /**\n   * @name SecurityId#uniqueId\n   * @type String\n   * @access private\n   */\n  this.uniqueId = null;\n\n  /**\n   * @name SecurityId#uniqueIdType\n   * @type String\n   * @access private\n   */\n  this.uniqueIdType = null;\n}\n\n\n\nAggregate.add(\"SECID\", SecurityId);\n\n\n/**\n * Gets the unique id for the security. This is a required field according to the OFX spec.\n *\n * @return {String} the unique id\n */\nSecurityId.prototype.getUniqueId = function() {\n  return this.uniqueId;\n};\nElement.add({name: \"UNIQUEID\", required: true, order: 10, owner: SecurityId, /*type: String,*/ fcn: \"getUniqueId\"});\n\n\n/**\n * Sets the unique id for the security. This is a required field according to the OFX spec.\n *\n * @param {String} uniqueId the unique id\n */\nSecurityId.prototype.setUniqueId = function(uniqueId) {\n  this.uniqueId = uniqueId;\n};\n\n\n/**\n * Gets the type of unique id.\n *\n * @return {String} the type of unique id\n */\nSecurityId.prototype.getUniqueIdType = function() {\n  return this.uniqueIdType;\n};\nElement.add({name: \"UNIQUEIDTYPE\", required: true, order: 20, owner: SecurityId, /*type: String,*/ fcn: \"getUniqueIdType\"});\n\n\n/**\n * Sets the type of unique id.\n *\n * @param {String} uniqueIdType the type of unique id\n */\nSecurityId.prototype.setUniqueIdType = function(uniqueIdType) {\n  this.uniqueIdType = uniqueIdType;\n};\n\n\n\n\nmodule.exports = SecurityId;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Element = require(\"../../../meta/Element\");\n\n//import java.util.Date;\n\n/**\n * Info about a security.\n * @see \"Section 13.8.5.1, OFX Spec\"\n *\n * @class\n */\nfunction SecurityInfo () {\n\n  /**\n   * @name SecurityInfo#securityId\n   * @type SecurityId\n   * @access private\n   */\n  this.securityId = null;\n\n  /**\n   * @name SecurityInfo#securityName\n   * @type String\n   * @access private\n   */\n  this.securityName = null;\n\n  /**\n   * @name SecurityInfo#tickerSymbol\n   * @type String\n   * @access private\n   */\n  this.tickerSymbol = null;\n\n  /**\n   * @name SecurityInfo#fiId\n   * @type String\n   * @access private\n   */\n  this.fiId = null;\n\n  /**\n   * @name SecurityInfo#rating\n   * @type String\n   * @access private\n   */\n  this.rating = null;\n\n  /**\n   * @name SecurityInfo#unitPrice\n   * @type Double\n   * @access private\n   */\n  this.unitPrice = null;\n\n  /**\n   * @name SecurityInfo#marketValueDate\n   * @type Date\n   * @access private\n   */\n  this.marketValueDate = null;\n\n  /**\n   * @name SecurityInfo#currencyCode\n   * @type String\n   * @access private\n   */\n  this.currencyCode = null;\n\n  /**\n   * @name SecurityInfo#memo\n   * @type String\n   * @access private\n   */\n  this.memo = null;\n}\n\n\n\nAggregate.add(\"SECINFO\", SecurityInfo);\n\n\n/**\n * Gets the unique security id for the security. This is a required field according to the OFX\n * spec.\n *\n * @return {SecurityId} the security id\n */\nSecurityInfo.prototype.getSecurityId = function() {\n  return this.securityId;\n};\nChildAggregate.add({required: true, order: 10, owner: SecurityInfo, /*type: SecurityId,*/ fcn: \"getSecurityId\"});\n\n\n/**\n * Sets the unique security id for the security. This is a required field according to the OFX\n * spec.\n *\n * @param {SecurityId} securityId the security id\n */\nSecurityInfo.prototype.setSecurityId = function(securityId) {\n  this.securityId = securityId;\n};\n\n\n/**\n * Gets the full name of the security. This is a required field according to the OFX spec.\n *\n * @return {String} the full name of the security\n */\nSecurityInfo.prototype.getSecurityName = function() {\n  return this.securityName;\n};\nElement.add({name: \"SECNAME\", required: true, order: 20, owner: SecurityInfo, /*type: String,*/ fcn: \"getSecurityName\"});\n\n\n/**\n * Sets the full name of the security. This is a required field according to the OFX spec.\n *\n * @param {String} securityName the full name of the security\n */\nSecurityInfo.prototype.setSecurityName = function(securityName) {\n  this.securityName = securityName;\n};\n\n\n/**\n * Gets the ticker symbol for the security. This is an optional field according to the OFX spec.\n *\n * @return {String} the ticket symbol or null if there's no ticker symbol\n */\nSecurityInfo.prototype.getTickerSymbol = function() {\n  return this.tickerSymbol;\n};\nElement.add({name: \"TICKER\", order: 30, owner: SecurityInfo, /*type: String,*/ fcn: \"getTickerSymbol\"});\n\n\n/**\n * Sets the ticker symbol for the security. This is an optional field according to the OFX spec.\n *\n * @param {String} tickerSymbol the ticket symbol or null if there's no ticker symbol\n */\nSecurityInfo.prototype.setTickerSymbol = function(tickerSymbol) {\n  this.tickerSymbol = tickerSymbol;\n};\n\n\n/**\n * Gets the FI ID number for the security. This is an optional field according to the OFX spec.\n *\n * @return {String} the FI ID number for the security\n */\nSecurityInfo.prototype.getFiId = function() {\n  return this.fiId;\n};\nElement.add({name: \"FIID\", order: 40, owner: SecurityInfo, /*type: String,*/ fcn: \"getFiId\"});\n\n\n/**\n * Sets the FI ID number for the security. This is an optional field according to the OFX spec.\n *\n * @param {String} fiId the FI ID number for the security\n */\nSecurityInfo.prototype.setFiId = function(fiId) {\n  this.fiId = fiId;\n};\n\n\n/**\n * Gets the rating of the security. This is an optional field according to the OFX spec.\n *\n * @return {String} the rating\n */\nSecurityInfo.prototype.getRating = function() {\n  return this.rating;\n};\nElement.add({name: \"RATING\", order: 50, owner: SecurityInfo, /*type: String,*/ fcn: \"getRating\"});\n\n\n/**\n * Sets the rating of the security. This is an optional field according to the OFX spec.\n *\n * @param {String} rating the rating\n */\nSecurityInfo.prototype.setRating = function(rating) {\n  this.rating = rating;\n};\n\n\n/**\n * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the\n * share price. For bonds, this is the percentage of par. For options, this is the per share (not\n * per contact) price. This is a noptional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @return {Double} the per unit price\n */\nSecurityInfo.prototype.getUnitPrice = function() {\n  return this.unitPrice;\n};\nElement.add({name: \"UNITPRICE\", order: 60, owner: SecurityInfo, /*type: Double,*/ fcn: \"getUnitPrice\"});\n\n\n/**\n * Sets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the\n * share price. For bonds, this is the percentage of par. For options, this is the per share (not\n * per contact) price. This is an optional field according to the OFX spec.\n * @see \"Section 13.9.2.4.3, OFX Spec\"\n *\n * @param {Double} unitPrice the per unit price\n */\nSecurityInfo.prototype.setUnitPrice = function(unitPrice) {\n  this.unitPrice = unitPrice;\n};\n\n\n/**\n * Gets the date as-of for the unit price. This is an optional field according to the OFX spec.\n *\n * @return {Date} the date as-of for the unit price\n */\nSecurityInfo.prototype.getUnitPriceAsOfDate = function() {\n  return this.marketValueDate;\n};\nElement.add({name: \"DTASOF\", order: 70, owner: SecurityInfo, /*type: Date,*/ fcn: \"getUnitPriceAsOfDate\"});\n\n\n/**\n * Sets the date as-of for the unit price. This is an optional field according to the OFX spec.\n *\n * param marketValueDate the date as-of for the unit price\n */\nSecurityInfo.prototype.setUnitPriceAsOfDate = function(/*Date*/ marketValueDate) {\n  this.marketValueDate = marketValueDate;\n};\n\n\n/**\n * Gets the overriding currency code for the security. If not set, implies the default currency.\n * This is an optional field according to the OFX spec.\n *\n * @return {String} the overriding currency code or null to mean the default currency\n */\nSecurityInfo.prototype.getCurrencyCode = function() {\n  return this.currencyCode;\n};\nElement.add({name: \"CURRENCY\", order: 80, owner: SecurityInfo, /*type: String,*/ fcn: \"getCurrencyCode\"});\n\n\n/**\n * Sets the overriding currency code for the security. If not set, implies the default currency.\n * This is an optional field according to the OFX spec.\n *\n * @param {String} currencyCode the overriding currency code or null to mean the default currency\n */\nSecurityInfo.prototype.setCurrencyCode = function(currencyCode) {\n  this.currencyCode = currencyCode;\n};\n\n\n/**\n * Gets any memo associated with the security. This is an optional field according to the OFX\n * spec.\n *\n * @return {String} the memo\n */\nSecurityInfo.prototype.getMemo = function() {\n  return this.memo;\n};\nElement.add({name: \"MEMO\", order: 90, owner: SecurityInfo, /*type: String,*/ fcn: \"getMemo\"});\n\n\n/**\n * Sets any memo associated with the security. This is an optional field according to the OFX\n * spec.\n *\n * @param {String} memo the memo\n */\nSecurityInfo.prototype.setMemo = function(memo) {\n  this.memo = memo;\n};\n\n\n\n\nmodule.exports = SecurityInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\n\n/**\n * Aggregate for a list of securities.\n * @see \"Section 13.8.4, OFX Spec\"\n *\n * @class\n */\nfunction SecurityList () {\n\n  /**\n   * @name SecurityList#securityInfos\n   * @type List<BaseSecurityInfo>\n   * @access private\n   */\n  this.securityInfos = null;\n}\n\n\n\nAggregate.add(\"SECLIST\", SecurityList);\n\n\nSecurityList.prototype.getSecurityInfos = function() {\n  return this.securityInfos;\n};\nChildAggregate.add({order: 10, owner: SecurityList, /*type: BaseSecurityInfo[],*/ fcn: \"getSecurityInfos\"});\n\n\nSecurityList.prototype.setSecurityInfos = function(/*BaseSecurityInfo[]*/ securityInfos) {\n  this.securityInfos = securityInfos;\n};\n\n\n\n\nmodule.exports = SecurityList;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar RequestMessage = require(\"../RequestMessage\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\n\n/**\n * Request aggregate for the security list.\n * @see \"Section 13.8.2.2, OFX Spec\"\n *\n * @class\n */\nfunction SecurityListRequest () {\n\n  /**\n   * @name SecurityListRequest#securityRequests\n   * @type List<SecurityRequest>\n   * @access private\n   */\n  this.securityRequests = null;\n}\n\ninherit(SecurityListRequest, \"extends\", RequestMessage);\n\n\nAggregate.add(\"SECLISTRQ\", SecurityListRequest);\n\n\nSecurityListRequest.prototype.getSecurityRequests = function() {\n  return this.securityRequests;\n};\nChildAggregate.add({required: true, order: 10, owner: SecurityListRequest, /*type: SecurityRequest[],*/ fcn: \"getSecurityRequests\"});\n\n\nSecurityListRequest.prototype.setSecurityRequests = function(/*SecurityRequest[]*/ securityRequests) {\n  this.securityRequests = securityRequests;\n};\n\n\n\n\nmodule.exports = SecurityListRequest;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar MessageSetType = require(\"../MessageSetType\");\nvar RequestMessageSet = require(\"../RequestMessageSet\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\n\n/**\n * Security list request message set.\n * @see \"Section 13.7.2.2.1, OFX Spec\"\n *\n * @class\n * @augments RequestMessageSet\n */\nfunction SecurityListRequestMessageSet () {\n\n  /**\n   * @name SecurityListRequestMessageSet#securityListRequest\n   * @type SecurityListRequestTransaction\n   * @access private\n   */\n  this.securityListRequest = null;\n}\n\ninherit(SecurityListRequestMessageSet, \"extends\", RequestMessageSet);\n\n\nAggregate.add(\"SECLISTMSGSRQV1\", SecurityListRequestMessageSet);\n\n\nSecurityListRequestMessageSet.prototype.getType = function() {\n  return MessageSetType.investment;\n};\n\n\n/**\n * Gets the security list request.\n *\n * @return {SecurityListRequestTransaction} the request\n */\nSecurityListRequestMessageSet.prototype.getSecurityListRequest = function() {\n  return this.securityListRequest;\n};\nChildAggregate.add({order: 0, owner: SecurityListRequestMessageSet, /*type: SecurityListRequestTransaction,*/ fcn: \"getSecurityListRequest\"});\n\n\n/**\n * Sets the security list request.\n *\n * @param {SecurityListRequestTransaction} statementRequest the request\n */\nSecurityListRequestMessageSet.prototype.setSecurityListRequest = function(statementRequest) {\n  this.securityListRequest = statementRequest;\n};\n\n\n// Inherited.\nSecurityListRequestMessageSet.prototype.getRequestMessages = function() {\n  var requestMessages = [];\n  if (this.getSecurityListRequest() !== null) {\n    requestMessages.push(this.getSecurityListRequest());\n  }\n  return requestMessages;\n};\n\n\n\n\nmodule.exports = SecurityListRequestMessageSet;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar TransactionWrappedRequestMessage = require(\"../TransactionWrappedRequestMessage\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar SecurityListRequest = require(\"./SecurityListRequest\");\n\n/**\n * Security list transaction request.\n * @see \"Section 13.8.2.1, OFX Spec\"\n *\n * @class\n * @augments TransactionWrappedRequestMessage\n */\nfunction SecurityListRequestTransaction () {\n\n  /**\n   * @name SecurityListRequestTransaction#message\n   * @type SecurityListRequest\n   * @access private\n   */\n  this.message = null;\n}\n\ninherit(SecurityListRequestTransaction, \"extends\", new TransactionWrappedRequestMessage(SecurityListRequest));\n\n\nAggregate.add(\"SECLISTTRNRQ\", SecurityListRequestTransaction);\n\n\n/**\n * The message.\n *\n * @return {SecurityListRequest} The message.\n */\nSecurityListRequestTransaction.prototype.getMessage = function() {\n  return this.message;\n};\nChildAggregate.add({required: true, order: 30, owner: SecurityListRequestTransaction, /*type: SecurityListRequest,*/ fcn: \"getMessage\"});\n\n\n/**\n * The message.\n *\n * @param {SecurityListRequest} message The message.\n *\n */\nSecurityListRequestTransaction.prototype.setMessage = function(message) {\n  this.message = message;\n};\n\n\n// Inherited.\nSecurityListRequestTransaction.prototype.setWrappedMessage = function(/*SecurityListRequest*/ message) {\n  this.setMessage(message);\n};\n\n\n\n\nmodule.exports = SecurityListRequestTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar ResponseMessage = require(\"../ResponseMessage\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\n\n/**\n * Security list response. This is an empty aggregate. The actual security information is included\n * in the \"SECLIST\" aggregate.\n * @see \"Section 13.8.3, OFX Spec\"\n *\n * @class\n * @augments ResponseMessage\n */\nfunction SecurityListResponse () {\n}\n\ninherit(SecurityListResponse, \"extends\", ResponseMessage);\n\n\nAggregate.add(\"SECLISTRS\", SecurityListResponse);\n\n\nSecurityListResponse.prototype.getResponseMessageName = function() {\n  return \"security list\";\n};\n\n\n\n\nmodule.exports = SecurityListResponse;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar MessageSetType = require(\"../MessageSetType\");\nvar ResponseMessageSet = require(\"../ResponseMessageSet\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\n\n/**\n * @class\n * @augments ResponseMessageSet\n */\nfunction SecurityListResponseMessageSet () {\n\n  /**\n   * @name SecurityListResponseMessageSet#securityListResponse\n   * @type SecurityListResponseTransaction\n   * @access private\n   */\n  this.securityListResponse = null;\n\n  /**\n   * @name SecurityListResponseMessageSet#securityList\n   * @type SecurityList\n   * @access private\n   */\n  this.securityList = null;\n}\n\ninherit(SecurityListResponseMessageSet, \"extends\", ResponseMessageSet);\n\n\nAggregate.add(\"SECLISTMSGSRSV1\", SecurityListResponseMessageSet);\n\n\nSecurityListResponseMessageSet.prototype.getType = function() {\n  return MessageSetType.investment_security;\n};\n\n\n/**\n * The security list response list transaction.\n *\n * Most OFX files have a single security response.\n *\n * @return {SecurityListResponseTransaction} The security list response list.\n */\nSecurityListResponseMessageSet.prototype.getSecurityListResponse = function() {\n  return this.securityListResponse;\n};\nChildAggregate.add({order: 0, owner: SecurityListResponseMessageSet, /*type: SecurityListResponseTransaction,*/ fcn: \"getSecurityListResponse\"});\n\n\n/**\n * The security list response.\n *\n * @param {SecurityListResponseTransaction} securityListResponse The security list response.\n */\nSecurityListResponseMessageSet.prototype.setSecurityListResponse = function(securityListResponse) {\n  this.securityListResponse = securityListResponse;\n};\n\n\nSecurityListResponseMessageSet.prototype.getSecurityList = function() {\n  return this.securityList;\n};\nChildAggregate.add({order: 10, owner: SecurityListResponseMessageSet, /*type: SecurityList,*/ fcn: \"getSecurityList\"});\n\n\nSecurityListResponseMessageSet.prototype.setSecurityList = function(/*SecurityList*/ securityList) {\n  this.securityList = securityList;\n};\n\n\n// Inherited.\nSecurityListResponseMessageSet.prototype.getResponseMessages = function() {\n  var ret = [];\n  ret.push(this.securityListResponse);\n  return ret;\n};\n\n\n\n\nmodule.exports = SecurityListResponseMessageSet;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar TransactionWrappedResponseMessage = require(\"../TransactionWrappedResponseMessage\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar SecurityListResponse = require(\"./SecurityListResponse\");\n\n/**\n * Security list transaction response.\n * @see \"Section 13.8.3.1, OFX Spec\"\n *\n * @class\n * @augments TransactionWrappedResponseMessage\n */\nfunction SecurityListResponseTransaction () {\n\n  /**\n   * @name SecurityListResponseTransaction#message\n   * @type SecurityListResponse\n   * @access private\n   */\n  this.message = null;\n}\n\ninherit(SecurityListResponseTransaction, \"extends\", new TransactionWrappedResponseMessage(SecurityListResponse));\n\n\nAggregate.add(\"SECLISTTRNRS\", SecurityListResponseTransaction);\n\n\n/**\n * The message.\n *\n * @return {SecurityListResponse} The message.\n */\nSecurityListResponseTransaction.prototype.getMessage = function() {\n  return this.message;\n};\nChildAggregate.add({required: true, order: 30, owner: SecurityListResponseTransaction, /*type: SecurityListResponse,*/ fcn: \"getMessage\"});\n\n\n/**\n * The message.\n *\n * @param {SecurityListResponse} message The message.\n */\nSecurityListResponseTransaction.prototype.setMessage = function(message) {\n  this.message = message;\n};\n\n\n// Inherited.\nSecurityListResponseTransaction.prototype.getWrappedMessage = function() {\n  return this.getMessage();\n};\n\n\n\n\nmodule.exports = SecurityListResponseTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\n\n/**\n * Security request aggregate.\n * @see \"Section 13.8.2.2, OFX Spec\"\n *\n * @class\n */\nfunction SecurityRequest () {\n\n  /**\n   * @name SecurityRequest#securityId\n   * @type SecurityId\n   * @access private\n   */\n  this.securityId = null;\n\n  /**\n   * @name SecurityRequest#tickerSymbol\n   * @type String\n   * @access private\n   */\n  this.tickerSymbol = null;\n\n  /**\n   * @name SecurityRequest#fiId\n   * @type String\n   * @access private\n   */\n  this.fiId = null;\n}\n\n\n\nAggregate.add(\"SECRQ\", SecurityRequest);\n\n\nSecurityRequest.prototype.getSecurityId = function() {\n  return this.securityId;\n};\nElement.add({name: \"SECID\", order: 10, owner: SecurityRequest, /*type: SecurityId,*/ fcn: \"getSecurityId\"});\n\n\nSecurityRequest.prototype.setSecurityId = function(/*SecurityId*/ securityId) {\n  this.securityId = securityId;\n  this.tickerSymbol = null;\n  this.fiId = null;\n};\n\n\nSecurityRequest.prototype.getTickerSymbol = function() {\n  return this.tickerSymbol;\n};\nElement.add({name: \"TICKER\", order: 20, owner: SecurityRequest, /*type: String,*/ fcn: \"getTickerSymbol\"});\n\n\nSecurityRequest.prototype.setTickerSymbol = function(/*String*/ tickerSymbol) {\n  this.tickerSymbol = tickerSymbol;\n  this.securityId = null;\n  this.fiId = null;\n};\n\n\nSecurityRequest.prototype.getFiId = function() {\n  return this.fiId;\n};\nElement.add({name: \"FIID\", order: 30, owner: SecurityRequest, /*type: String,*/ fcn: \"getFiId\"});\n\n\nSecurityRequest.prototype.setFiId = function(/*String*/ fiId) {\n  this.fiId = fiId;\n  this.securityId = null;\n  this.tickerSymbol = null;\n};\n\n\n\n\nmodule.exports = SecurityRequest;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar BaseSecurityInfo = require(\"./BaseSecurityInfo\");\nvar StockType = require(\"./StockType\");\nvar AssetClass = require(\"./AssetClass\");\n\n/**\n * Info about a stock security.\n * @see \"Section 13.8.5.6, OFX Spec\"\n *\n * @class\n * @augments BaseSecurityInfo\n */\nfunction StockSecurityInfo () {\n\n  /**\n   * @name StockSecurityInfo#stockType\n   * @type String\n   * @access private\n   */\n  this.stockType = null;\n\n  /**\n   * @name StockSecurityInfo#yield\n   * @type Double\n   * @access private\n   */\n  this.yield = null;\n\n  /**\n   * @name StockSecurityInfo#dateYieldAsOf\n   * @type Date\n   * @access private\n   */\n  this.dateYieldAsOf = null;\n\n  /**\n   * @name StockSecurityInfo#assetClass\n   * @type String\n   * @access private\n   */\n  this.assetClass = null;\n\n  /**\n   * @name StockSecurityInfo#fiAssetClass\n   * @type String\n   * @access private\n   */\n  this.fiAssetClass = null;\n}\n\ninherit(StockSecurityInfo, \"extends\", BaseSecurityInfo);\n\n\nAggregate.add(\"STOCKINFO\", StockSecurityInfo);\n\n\n/**\n * Gets the type of stock. One of \"COMMON\", \"PREFERRED\", \"CONVERTIBLE\", or \"OTHER\". This is an\n * optional field according to the OFX spec.\n *\n * @return {String} the type of stock\n */\nStockSecurityInfo.prototype.getType = function() {\n  return this.stockType;\n};\nElement.add({name: \"STOCKTYPE\", order: 20, owner: StockSecurityInfo, /*type: String,*/ fcn: \"getType\"});\n\n\n/**\n * Sets the type of stock. One of \"COMMON\", \"PREFERRED\", \"CONVERTIBLE\", or \"OTHER\". This is an\n * optional field according to the OFX spec.\n *\n * @param {String} stockType the type of stock\n */\nStockSecurityInfo.prototype.setType = function(stockType) {\n  this.stockType = stockType;\n};\n\n\n/**\n * Gets the type of stock as one of the well-known types.\n *\n * @return {StockType} the type of stock or null if it's not one of the well-known types\n */\nStockSecurityInfo.prototype.getTypeEnum = function() {\n  return StockType.fromOfx(this.getType());\n};\n\n\n/**\n * Gets the current yield reported as the dividend expressed as a portion of the current stock\n * price, a rate. This is an optional field according to the OFX spec.\n *\n * @return {Double} the dividend yield\n */\nStockSecurityInfo.prototype.getYield = function() {\n  return this.yield;\n};\nElement.add({name: \"YIELD\", order: 30, owner: StockSecurityInfo, /*type: Double,*/ fcn: \"getYield\"});\n\n\n/**\n * Sets the current yield reported as the dividend expressed as a portion of the current stock\n * price, a rate. This is an optional field according to the OFX spec.\n *\n * @param {Double} yield the dividend yield\n */\nStockSecurityInfo.prototype.setYield = function(yield_) {\n  this.yield = yield_;\n};\n\n\n/**\n * Gets the as-of date for the yield. This is an optional field according to the OFX spec.\n *\n * @return {Date} the as-of date for the yield\n */\nStockSecurityInfo.prototype.getDateYieldAsOf = function() {\n  return this.dateYieldAsOf;\n};\nElement.add({name: \"DTYIELDASOF\", order: 40, owner: StockSecurityInfo, /*type: Date,*/ fcn: \"getDateYieldAsOf\"});\n\n\n/**\n * Sets the as-of date for the yield. This is an optional field according to the OFX spec.\n *\n * @param {Date} dateYieldAsOf the as-of date for the yield\n */\nStockSecurityInfo.prototype.setDateYieldAsOf = function(dateYieldAsOf) {\n  this.dateYieldAsOf = dateYieldAsOf;\n};\n\n\n/**\n * Gets the asset class of the stock. This is an optional field according to the OFX spec.\n *\n * @return {String} the asset class of the stock\n */\nStockSecurityInfo.prototype.getAssetClass = function() {\n  return this.assetClass;\n};\nElement.add({name: \"ASSETCLASS\", order: 50, owner: StockSecurityInfo, /*type: String,*/ fcn: \"getAssetClass\"});\n\n\n/**\n * Sets the asset class of the stock. This is an optional field according to the OFX spec.\n *\n * @param {String} assetClass the asset class of the stock\n */\nStockSecurityInfo.prototype.setAssetClass = function(assetClass) {\n  this.assetClass = assetClass;\n};\n\n\n/**\n * Gets the assert class as one of the well-known types.\n *\n * @return {AssetClass} the asset class or null if it's not one of the well-known types\n */\nStockSecurityInfo.prototype.getAssetClassEnum = function() {\n  return AssetClass.fromOfx(this.getAssetClass());\n};\n\n\n/**\n * Gets the FI-defined asset class of the stock. This is an optional field according to the OFX\n * spec.\n *\n * @return {String} the FI-defined asset class of the stock\n */\nStockSecurityInfo.prototype.getFiAssetClass = function() {\n  return this.fiAssetClass;\n};\nElement.add({name: \"FIASSETCLASS\", order: 60, owner: StockSecurityInfo, /*type: String,*/ fcn: \"getFiAssetClass\"});\n\n\n/**\n * Sets the FI-defined asset class of the stock. This is an optional field according to the OFX\n * spec.\n *\n * @param {String} fiAssetClass the FI-defined asset class of the stock\n */\nStockSecurityInfo.prototype.setFiAssetClass = function(fiAssetClass) {\n  this.fiAssetClass = fiAssetClass;\n};\n\n\n\n\nmodule.exports = StockSecurityInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * The type of debt.\n * @see \"Section 13.8.5.6, OFX Spec\"\n *\n * @enum\n */\nvar StockType = {\n  COMMON: 0,\n  PREFERRED: 1,\n  CONVERTIBLE: 2,\n  OTHER: 3,\n\n  fromOfx: function(/*String*/ ofxVal) {\n    if (\"COMMON\".equals(ofxVal)) {\n      return StockType.COMMON;\n    } else if (\"PREFERRED\".equals(ofxVal)) {\n      return StockType.PREFERRED;\n    } else if (\"CONVERTIBLE\".equals(ofxVal)) {\n      return StockType.CONVERTIBLE;\n    } else if (\"OTHER\".equals(ofxVal)) {\n      return StockType.OTHER;\n    } else {\n      return null;\n    }\n  }\n};\n\n\nmodule.exports = StockType;\n","\"use strict\";\n\nmodule.exports = {\n  AssetClass: require(\"./AssetClass\"),\n  BaseSecurityInfo: require(\"./BaseSecurityInfo\"),\n  CallType: require(\"./CallType\"),\n  CouponFrequency: require(\"./CouponFrequency\"),\n  DebtClass: require(\"./DebtClass\"),\n  DebtSecurityInfo: require(\"./DebtSecurityInfo\"),\n  DebtType: require(\"./DebtType\"),\n  MutualFundSecurityInfo: require(\"./MutualFundSecurityInfo\"),\n  MutualFundType: require(\"./MutualFundType\"),\n  OptionSecurityInfo: require(\"./OptionSecurityInfo\"),\n  OptionType: require(\"./OptionType\"),\n  OtherSecurityInfo: require(\"./OtherSecurityInfo\"),\n  SecurityId: require(\"./SecurityId\"),\n  SecurityInfo: require(\"./SecurityInfo\"),\n  SecurityList: require(\"./SecurityList\"),\n  SecurityListRequest: require(\"./SecurityListRequest\"),\n  SecurityListRequestMessageSet: require(\"./SecurityListRequestMessageSet\"),\n  SecurityListRequestTransaction: require(\"./SecurityListRequestTransaction\"),\n  SecurityListResponse: require(\"./SecurityListResponse\"),\n  SecurityListResponseMessageSet: require(\"./SecurityListResponseMessageSet\"),\n  SecurityListResponseTransaction: require(\"./SecurityListResponseTransaction\"),\n  SecurityRequest: require(\"./SecurityRequest\"),\n  StockSecurityInfo: require(\"./StockSecurityInfo\"),\n  StockType: require(\"./StockType\"),\n};\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\n\n/**\n * @class\n */\nfunction FinancialInstitution () {\n\n  /**\n   * @name FinancialInstitution#id\n   * @type String\n   * @access private\n   */\n  this.id = null;\n\n  /**\n   * @name FinancialInstitution#organization\n   * @type String\n   * @access private\n   */\n  this.organization = null;\n}\n\n\n\nAggregate.add(\"FI\", FinancialInstitution);\n\n\n/**\n * Financial institution id.\n *\n * @return {String} Financial institution id.\n */\nFinancialInstitution.prototype.getId = function() {\n  return this.id;\n};\nElement.add({name: \"FID\", order: 10, owner: FinancialInstitution, /*type: String,*/ fcn: \"getId\"});\n\n\n/**\n * Financial institution id.\n *\n * @param {String} id Financial institution id.\n */\nFinancialInstitution.prototype.setId = function(id) {\n  this.id = id;\n};\n\n\n/**\n * The organization.\n *\n * @return {String} The organization.\n */\nFinancialInstitution.prototype.getOrganization = function() {\n  return this.organization;\n};\nElement.add({name: \"ORG\", required: true, order: 0, owner: FinancialInstitution, /*type: String,*/ fcn: \"getOrganization\"});\n\n\n/**\n * The organization.\n *\n * @param {String} organization The organization.\n */\nFinancialInstitution.prototype.setOrganization = function(organization) {\n  this.organization = organization;\n};\n\n\n\n\nmodule.exports = FinancialInstitution;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar RequestMessage = require(\"../RequestMessage\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\n\n/**\n * Request to change a user password.\n *\n * @class\n * @see \"Section 2.5.2.1, OFX Spec.\"\n */\nfunction PasswordChangeRequest () {\n\n  /**\n   * @name PasswordChangeRequest#userId\n   * @type String\n   * @access private\n   */\n  this.userId = null;\n\n  /**\n   * @name PasswordChangeRequest#newPassword\n   * @type String\n   * @access private\n   */\n  this.newPassword = null;\n}\n\ninherit(PasswordChangeRequest, \"extends\", RequestMessage);\n\n\nAggregate.add(\"PINCHRQ\", PasswordChangeRequest);\n\n\n/**\n * The id of the user changing password.\n *\n * @return {String} The id of the user changing password.\n */\nPasswordChangeRequest.prototype.getUserId = function() {\n  return this.userId;\n};\nElement.add({name: \"USERID\", required: true, order: 0, owner: PasswordChangeRequest, /*type: String,*/ fcn: \"getUserId\"});\n\n\n/**\n * The id of the user changing password.\n *\n * @param {String} userId The id of the user changing password.\n */\nPasswordChangeRequest.prototype.setUserId = function(userId) {\n  this.userId = userId;\n};\n\n\n/**\n * The new password.\n *\n * @return {String} The new password.\n */\nPasswordChangeRequest.prototype.getNewPassword = function() {\n  return this.newPassword;\n};\nElement.add({name: \"NEWUSERPASS\", required: true, order: 10, owner: PasswordChangeRequest, /*type: String,*/ fcn: \"getNewPassword\"});\n\n\n/**\n * The new password.\n *\n * @param {String} newPassword The new password.\n */\nPasswordChangeRequest.prototype.setNewPassword = function(newPassword) {\n  this.newPassword = newPassword;\n};\n\n\n\n\nmodule.exports = PasswordChangeRequest;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar TransactionWrappedRequestMessage = require(\"../TransactionWrappedRequestMessage\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar PasswordChangeRequest = require(\"./PasswordChangeRequest\");\n\n/**\n * @class\n * @augments TransactionWrappedRequestMessage\n */\nfunction PasswordChangeRequestTransaction () {\n\n  /**\n   * @name PasswordChangeRequestTransaction#message\n   * @type PasswordChangeRequest\n   * @access private\n   */\n  this.message = null;\n}\n\ninherit(PasswordChangeRequestTransaction, \"extends\", new TransactionWrappedRequestMessage(PasswordChangeRequest));\n\n\nAggregate.add(\"PINCHTRNRQ\", PasswordChangeRequestTransaction);\n\n\n/**\n * The wrapped message.\n *\n * @return {PasswordChangeRequest} The wrapped message.\n */\nPasswordChangeRequestTransaction.prototype.getMessage = function() {\n  return this.message;\n};\nChildAggregate.add({required: true, order: 30, owner: PasswordChangeRequestTransaction, /*type: PasswordChangeRequest,*/ fcn: \"getMessage\"});\n\n\n/**\n * The wrapped message.\n *\n * @param {PasswordChangeRequest} message The wrapped message.\n */\nPasswordChangeRequestTransaction.prototype.setMessage = function(message) {\n  this.message = message;\n};\n\n\n// Inherited.\nPasswordChangeRequestTransaction.prototype.setWrappedMessage = function(/*PasswordChangeRequest*/ message) {\n  this.setMessage(message);\n};\n\n\n\n\nmodule.exports = PasswordChangeRequestTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar ResponseMessage = require(\"../ResponseMessage\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\n\n/**\n * Response to a change a user password request.\n *\n * @class\n * @augments ResponseMessage\n * @see \"Section 2.5.2.2, OFX Spec.\"\n */\nfunction PasswordChangeResponse () {\n\n  /**\n   * @name PasswordChangeResponse#userId\n   * @type String\n   * @access private\n   */\n  this.userId = null;\n\n  /**\n   * @name PasswordChangeResponse#changeTimestamp\n   * @type Date\n   * @access private\n   */\n  this.changeTimestamp = null;\n}\n\ninherit(PasswordChangeResponse, \"extends\", ResponseMessage);\n\n\nAggregate.add(\"PINCHRQ\", PasswordChangeResponse);\n\n\n/**\n * The id of the user changing password.\n *\n * @return {String} The id of the user changing password.\n */\nPasswordChangeResponse.prototype.getUserId = function() {\n  return this.userId;\n};\nElement.add({name: \"USERID\", required: true, order: 0, owner: PasswordChangeResponse, /*type: String,*/ fcn: \"getUserId\"});\n\n\n// Inherited.\nPasswordChangeResponse.prototype.getResponseMessageName = function() {\n  return \"password change\";\n};\n\n\n/**\n * The id of the user changing password.\n *\n * @param {String} userId The id of the user changing password.\n */\nPasswordChangeResponse.prototype.setUserId = function(userId) {\n  this.userId = userId;\n};\n\n\n/**\n * The timestamp of the password change.\n *\n * @return {Date} The timestamp of the password change.\n */\nPasswordChangeResponse.prototype.getChangeTimestamp = function() {\n  return this.changeTimestamp;\n};\nElement.add({name: \"DTCHANGED\", order: 10, owner: PasswordChangeResponse, /*type: Date,*/ fcn: \"getChangeTimestamp\"});\n\n\n/**\n * The timestamp of the password change.\n *\n * @param {Date} changeTimestamp The timestamp of the password change.\n */\nPasswordChangeResponse.prototype.setChangeTimestamp = function(changeTimestamp) {\n  this.changeTimestamp = changeTimestamp;\n};\n\n\n\n\nmodule.exports = PasswordChangeResponse;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar TransactionWrappedResponseMessage = require(\"../TransactionWrappedResponseMessage\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar PasswordChangeResponse = require(\"./PasswordChangeResponse\");\n\n/**\n * @class\n * @augments TransactionWrappedResponseMessage\n */\nfunction PasswordChangeResponseTransaction () {\n\n  /**\n   * @name PasswordChangeResponseTransaction#message\n   * @type PasswordChangeResponse\n   * @access private\n   */\n  this.message = null;\n}\n\ninherit(PasswordChangeResponseTransaction, \"extends\", new TransactionWrappedResponseMessage(PasswordChangeResponse));\n\n\nAggregate.add(\"PINCHTRNRS\", PasswordChangeResponseTransaction);\n\n\n/**\n * The message.\n *\n * @return {PasswordChangeResponse} The message.\n */\nPasswordChangeResponseTransaction.prototype.getMessage = function() {\n  return this.message;\n};\nChildAggregate.add({required: true, order: 30, owner: PasswordChangeResponseTransaction, /*type: PasswordChangeResponse,*/ fcn: \"getMessage\"});\n\n\n/**\n * The message.\n *\n * @param {PasswordChangeResponse} message The message.\n */\nPasswordChangeResponseTransaction.prototype.setMessage = function(message) {\n  this.message = message;\n};\n\n\n// Inherited.\nPasswordChangeResponseTransaction.prototype.getWrappedMessage = function() {\n  return this.getMessage();\n};\n\n\n\n\nmodule.exports = PasswordChangeResponseTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar RequestMessage = require(\"../RequestMessage\");\n\n/**\n * Sign-on request\n *\n * @class\n * @augments RequestMessage\n * @see \"Section 2.5.1.2, OFX Spec.\"\n */\nfunction SignonRequest () {\n\n  /**\n   * @name SignonRequest#ANONYMOUS_USER\n   * @type String\n   */\n  this.ANONYMOUS_USER = \"anonymous00000000000000000000000\";\n\n  /**\n   * @name SignonRequest#timestamp\n   * @type Date\n   * @access private\n   */\n  this.timestamp = null;\n\n  /**\n   * @name SignonRequest#userId\n   * @type String\n   * @access private\n   */\n  this.userId = null;\n\n  /**\n   * @name SignonRequest#password\n   * @type String\n   * @access private\n   */\n  this.password = null;\n\n  /**\n   * @name SignonRequest#userKey\n   * @type String\n   * @access private\n   */\n  this.userKey = null;\n\n  /**\n   * @name SignonRequest#generateUserKey\n   * @type Boolean\n   * @access private\n   */\n  this.generateUserKey = null;\n\n  /**\n   * @name SignonRequest#language\n   * @type String\n   * @access private\n   */\n  this.language = \"ENG\";\n\n  /**\n   * @name SignonRequest#financialInstitution\n   * @type FinancialInstitution\n   * @access private\n   */\n  this.financialInstitution = null;\n\n  /**\n   * @name SignonRequest#sessionId\n   * @type String\n   * @access private\n   */\n  this.sessionId = null;\n\n  /**\n   * @name SignonRequest#applicationId\n   * @type String\n   * @access private\n   */\n  this.applicationId = \"Money\";\n\n  /**\n   * @name SignonRequest#applicationVersion\n   * @type String\n   * @access private\n   */\n  this.applicationVersion = \"1600\";\n\n  /**\n   * @name SignonRequest#clientUID\n   * @type String\n   * @access private\n   */\n  this.clientUID = null;\n\n  /**\n   * @name SignonRequest#additionalCredentials1\n   * @type String\n   * @access private\n   */\n  this.additionalCredentials1 = null;\n\n  /**\n   * @name SignonRequest#additionalCredentials2\n   * @type String\n   * @access private\n   */\n  this.additionalCredentials2 = null;\n\n  /**\n   * @name SignonRequest#authToken\n   * @type String\n   * @access private\n   */\n  this.authToken = null;\n\n  /**\n   * @name SignonRequest#accessKey\n   * @type String\n   * @access private\n   */\n  this.accessKey = null;\n}\n\ninherit(SignonRequest, \"extends\", RequestMessage);\n\n\nAggregate.add(\"SONRQ\", SignonRequest);\n\n\n/**\n * The date and time of the request.\n *\n * @return {Date} The date and time of the request.\n */\nSignonRequest.prototype.getTimestamp = function() {\n  return this.timestamp;\n};\nElement.add({name: \"DTCLIENT\", required: true, order: 0, owner: SignonRequest, /*type: Date,*/ fcn: \"getTimestamp\"});\n\n\n/**\n * The date and time of the request.\n *\n * @param {Date} timestamp The date and time of the request.\n */\nSignonRequest.prototype.setTimestamp = function(timestamp) {\n  this.timestamp = timestamp;\n};\n\n\n/**\n * The user id.\n *\n * @return {String} The user id.\n */\nSignonRequest.prototype.getUserId = function() {\n  return this.userId;\n};\nElement.add({name: \"USERID\", order: 10, owner: SignonRequest, /*type: String,*/ fcn: \"getUserId\"});\n\n\n/**\n * The user id.\n *\n * @param {String} userId The user id.\n */\nSignonRequest.prototype.setUserId = function(userId) {\n  this.userId = userId;\n};\n\n\n/**\n * The password.\n *\n * @return {String} The password.\n */\nSignonRequest.prototype.getPassword = function() {\n  return this.password;\n};\nElement.add({name: \"USERPASS\", order: 20, owner: SignonRequest, /*type: String,*/ fcn: \"getPassword\"});\n\n\n/**\n * The password.\n *\n * @param {String} password The password.\n */\nSignonRequest.prototype.setPassword = function(password) {\n  this.password = password;\n};\n\n\n/**\n * The user key provided by the server so as not to require further username/password authentication.\n *\n * @return {String} The user key provided by the server so as not to require further username/password authentication.\n */\nSignonRequest.prototype.getUserKey = function() {\n  return this.userKey;\n};\nElement.add({name: \"USERKEY\", order: 30, owner: SignonRequest, /*type: String,*/ fcn: \"getUserKey\"});\n\n\n/**\n * The user key provided by the server so as not to require further username/password authentication.\n *\n * @param {String} userKey The user key provided by the server so as not to require further username/password authentication.\n */\nSignonRequest.prototype.setUserKey = function(userKey) {\n  this.userKey = userKey;\n};\n\n\n/**\n * Whether to request the server to generate a user key.\n *\n * @return {Boolean} Whether to request the server to generate a user key.\n */\nSignonRequest.prototype.getGenerateUserKey = function() {\n  return this.generateUserKey;\n};\nElement.add({name: \"GENUSERKEY\", order: 40, owner: SignonRequest, /*type: Boolean,*/ fcn: \"getGenerateUserKey\"});\n\n\n/**\n * Whether to request the server to generate a user key.\n *\n * @param {Boolean} generateUserKey Whether to request the server to generate a user key.\n */\nSignonRequest.prototype.setGenerateUserKey = function(generateUserKey) {\n  this.generateUserKey = generateUserKey;\n};\n\n\n/**\n * The three-letter langauge code.\n *\n * @return {String} The three-letter langauge code.\n * @see java.util.Locale#getISO3Language()\n */\nSignonRequest.prototype.getLanguage = function() {\n  return this.language;\n};\nElement.add({name: \"LANGUAGE\", required: true, order: 50, owner: SignonRequest, /*type: String,*/ fcn: \"getLanguage\"});\n\n\n/**\n * The three-letter langauge code.\n *\n * @param {String} language The three-letter langauge code.\n */\nSignonRequest.prototype.setLanguage = function(language) {\n  this.language = language;\n};\n\n\n/**\n * The financial institution.\n *\n * @return {FinancialInstitution} The financial institution.\n */\nSignonRequest.prototype.getFinancialInstitution = function() {\n  return this.financialInstitution;\n};\nChildAggregate.add({order: 60, owner: SignonRequest, /*type: FinancialInstitution,*/ fcn: \"getFinancialInstitution\"});\n\n\n/**\n * The financial institution.\n *\n * @param {FinancialInstitution} financialInstitution The financial institution.\n */\nSignonRequest.prototype.setFinancialInstitution = function(financialInstitution) {\n  this.financialInstitution = financialInstitution;\n};\n\n\n/**\n * The server-supplied session id.\n *\n * @return {String} The server-supplied session id.\n */\nSignonRequest.prototype.getSessionId = function() {\n  return this.sessionId;\n};\nElement.add({name: \"SESSCOOKIE\", order: 70, owner: SignonRequest, /*type: String,*/ fcn: \"getSessionId\"});\n\n\n/**\n * The server-supplied session id.\n *\n * @param {String} sessionId The server-supplied session id.\n */\nSignonRequest.prototype.setSessionId = function(sessionId) {\n  this.sessionId = sessionId;\n};\n\n\n/**\n * The application id.\n *\n * @return {String} The application id.\n */\nSignonRequest.prototype.getApplicationId = function() {\n  return this.applicationId;\n};\nElement.add({name: \"APPID\", required: true, order: 80, owner: SignonRequest, /*type: String,*/ fcn: \"getApplicationId\"});\n\n\n/**\n * The application id.\n *\n * @param {String} applicationId The application id.\n */\nSignonRequest.prototype.setApplicationId = function(applicationId) {\n  this.applicationId = applicationId;\n};\n\n\n/**\n * The application version.\n *\n * @return {String} The application version.\n */\nSignonRequest.prototype.getApplicationVersion = function() {\n  return this.applicationVersion;\n};\nElement.add({name: \"APPVER\", required: true, order: 90, owner: SignonRequest, /*type: String,*/ fcn: \"getApplicationVersion\"});\n\n\n/**\n * The application version.\n *\n * @param {String} applicationVersion The application version.\n */\nSignonRequest.prototype.setApplicationVersion = function(applicationVersion) {\n  this.applicationVersion = applicationVersion;\n};\n\n\n/**\n * The client-supplied UID.\n *\n * @return {String} The client-supplied UID.\n */\nSignonRequest.prototype.getClientUID = function() {\n  return this.clientUID;\n};\nElement.add({name: \"CLIENTUID\", order: 100, owner: SignonRequest, /*type: String,*/ fcn: \"getClientUID\"});\n\n\n/**\n * The client-supplied UID.\n *\n * @param {String} clientUID The client-supplied UID.\n */\nSignonRequest.prototype.setClientUID = function(clientUID) {\n  this.clientUID = clientUID;\n};\n\n\n/**\n * Any additional credentials.\n *\n * @return {String} Any additional credentials.\n */\nSignonRequest.prototype.getAdditionalCredentials1 = function() {\n  return this.additionalCredentials1;\n};\nElement.add({name: \"USERCRED1\", order: 110, owner: SignonRequest, /*type: String,*/ fcn: \"getAdditionalCredentials1\"});\n\n\n/**\n * Any additional credentials.\n *\n * @param {String} additionalCredentials1 Any additional credentials.\n */\nSignonRequest.prototype.setAdditionalCredentials1 = function(additionalCredentials1) {\n  this.additionalCredentials1 = additionalCredentials1;\n};\n\n\n/**\n * Any additional credentials.\n *\n * @return {String} Any additional credentials.\n */\nSignonRequest.prototype.getAdditionalCredentials2 = function() {\n  return this.additionalCredentials2;\n};\nElement.add({name: \"USERCRED2\", order: 120, owner: SignonRequest, /*type: String,*/ fcn: \"getAdditionalCredentials2\"});\n\n\n/**\n * Any additional credentials.\n *\n * @param {String} additionalCredentials2 Any additional credentials.\n */\nSignonRequest.prototype.setAdditionalCredentials2 = function(additionalCredentials2) {\n  this.additionalCredentials2 = additionalCredentials2;\n};\n\n\n/**\n * The authentication token.\n *\n * @return {String} The authentication token.\n */\nSignonRequest.prototype.getAuthToken = function() {\n  return this.authToken;\n};\nElement.add({name: \"AUTHTOKEN\", order: 130, owner: SignonRequest, /*type: String,*/ fcn: \"getAuthToken\"});\n\n\n/**\n * The authentication token.\n *\n * @param {String} authToken The authentication token.\n */\nSignonRequest.prototype.setAuthToken = function(authToken) {\n  this.authToken = authToken;\n};\n\n\n/**\n * The access key.\n *\n * @return {String} The access key.\n */\nSignonRequest.prototype.getAccessKey = function() {\n  return this.accessKey;\n};\nElement.add({name: \"ACCESSKEY\", order: 140, owner: SignonRequest, /*type: String,*/ fcn: \"getAccessKey\"});\n\n\n/**\n * The access key.\n *\n * @param {String} accessKey The access key.\n */\nSignonRequest.prototype.setAccessKey = function(accessKey) {\n  this.accessKey = accessKey;\n};\n\n\n\n\nmodule.exports = SignonRequest;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar MessageSetType = require(\"../MessageSetType\");\nvar RequestMessageSet = require(\"../RequestMessageSet\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\n\n/**\n * The sign-on request message set.\n *\n * @class\n * @augments RequestMessageSet\n * @see \"Section 2.5, OFX Spec.\"\n */\nfunction SignonRequestMessageSet () {\n\n  /**\n   * @name SignonRequestMessageSet#signonRequest\n   * @type SignonRequest\n   * @access private\n   */\n  this.signonRequest = null;\n\n  /**\n   * @name SignonRequestMessageSet#passwordChangeRequest\n   * @type PasswordChangeRequestTransaction\n   * @access private\n   */\n  this.passwordChangeRequest = null;\n}\n\ninherit(SignonRequestMessageSet, \"extends\", RequestMessageSet);\n\n\nAggregate.add(\"SIGNONMSGSRQV1\", SignonRequestMessageSet);\n\n\nSignonRequestMessageSet.prototype.getType = function() {\n  return MessageSetType.signon;\n};\n\n\n/**\n * The message for this message set.\n *\n * @return {SignonRequest} The message for this message set.\n */\nSignonRequestMessageSet.prototype.getSignonRequest = function() {\n  return this.signonRequest;\n};\nChildAggregate.add({required: true, order: 0, owner: SignonRequestMessageSet, /*type: SignonRequest,*/ fcn: \"getSignonRequest\"});\n\n\n/**\n * The message for this message set.\n *\n * @param {SignonRequest} signonRequest The message for this message set.\n */\nSignonRequestMessageSet.prototype.setSignonRequest = function(signonRequest) {\n  this.signonRequest = signonRequest;\n};\n\n\n/**\n * The password change request.\n *\n * @return {PasswordChangeRequestTransaction} The password change request.\n */\nSignonRequestMessageSet.prototype.getPasswordChangeRequest = function() {\n  return this.passwordChangeRequest;\n};\nChildAggregate.add({order: 10, owner: SignonRequestMessageSet, /*type: PasswordChangeRequestTransaction,*/ fcn: \"getPasswordChangeRequest\"});\n\n\n/**\n * The password change request.\n *\n * @param {PasswordChangeRequestTransaction} passwordChangeRequest The password change request.\n */\nSignonRequestMessageSet.prototype.setPasswordChangeRequest = function(passwordChangeRequest) {\n  this.passwordChangeRequest = passwordChangeRequest;\n};\n\n\n//todo: challenge request/response\n// Inherited.\nSignonRequestMessageSet.prototype.getRequestMessages = function() {\n  var requestMessages = [];\n\n  if (this.getSignonRequest() !== null) {\n    requestMessages.push(this.getSignonRequest());\n  }\n\n  if (this.getPasswordChangeRequest() !== null) {\n    requestMessages.this(this.getPasswordChangeRequest());\n  }\n\n  return requestMessages;\n};\n\n\n\n\nmodule.exports = SignonRequestMessageSet;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar StatusHolder = require(\"../common/StatusHolder\");\nvar ResponseMessage = require(\"../ResponseMessage\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Element = require(\"../../../meta/Element\");\n\n/**\n * The signon response message.\n *\n * @class\n * @augments ResponseMessage\n * @augments StatusHolder\n * @see \"Section 2.5.1.2, OFX Spec.\"\n */\nfunction SignonResponse () {\n\n  /**\n   * @name SignonResponse#status\n   * @type Status\n   * @access private\n   */\n  this.status = null;\n\n  /**\n   * @name SignonResponse#timestamp\n   * @type Date\n   * @access private\n   */\n  this.timestamp = null;\n\n  /**\n   * @name SignonResponse#userKey\n   * @type String\n   * @access private\n   */\n  this.userKey = null;\n\n  /**\n   * @name SignonResponse#userKeyExpiration\n   * @type Date\n   * @access private\n   */\n  this.userKeyExpiration = null;\n\n  /**\n   * @name SignonResponse#language\n   * @type String\n   * @access private\n   */\n  this.language = \"eng\";\n\n  /**\n   * @name SignonResponse#profileLastUpdated\n   * @type Date\n   * @access private\n   */\n  this.profileLastUpdated = null;\n\n  /**\n   * @name SignonResponse#accountLastUpdated\n   * @type Date\n   * @access private\n   */\n  this.accountLastUpdated = null;\n\n  /**\n   * @name SignonResponse#financialInstitution\n   * @type FinancialInstitution\n   * @access private\n   */\n  this.financialInstitution = null;\n\n  /**\n   * @name SignonResponse#sessionId\n   * @type String\n   * @access private\n   */\n  this.sessionId = null;\n\n  /**\n   * @name SignonResponse#accessKey\n   * @type String\n   * @access private\n   */\n  this.accessKey = null;\n}\n\ninherit(SignonResponse, \"extends\", ResponseMessage);\ninherit(SignonResponse, \"implements\", StatusHolder);\n\n\nAggregate.add(\"SONRS\", SignonResponse);\n\n\nSignonResponse.prototype.getResponseMessageName = function() {\n  return \"signon\";\n};\n\n\nSignonResponse.prototype.getStatusHolderName = function() {\n  return this.getResponseMessageName();\n};\n\n\n/**\n * The signon response status.\n *\n * @return {Status} The signon response status.\n */\nSignonResponse.prototype.getStatus = function() {\n  return this.status;\n};\nChildAggregate.add({required: true, order: 0, owner: SignonResponse, /*type: Status,*/ fcn: \"getStatus\"});\n\n\n/**\n * The signon response status.\n *\n * @param {Status} status The signon response status.\n */\nSignonResponse.prototype.setStatus = function(status) {\n  this.status = status;\n};\n\n\n/**\n * The timestamp of this response.\n *\n * @return {Date} The timestamp of this response.\n */\nSignonResponse.prototype.getTimestamp = function() {\n  return this.timestamp;\n};\nElement.add({name: \"DTSERVER\", required: true, order: 10, owner: SignonResponse, /*type: Date,*/ fcn: \"getTimestamp\"});\n\n\n/**\n * The timestamp of this response.\n *\n * @param {Date} timestamp The timestamp of this response.\n */\nSignonResponse.prototype.setTimestamp = function(timestamp) {\n  this.timestamp = timestamp;\n};\n\n\n/**\n * The userkey that can be used instead of the username/password.\n *\n * @return {String} The userkey that can be used instead of the username/password.\n */\nSignonResponse.prototype.getUserKey = function() {\n  return this.userKey;\n};\nElement.add({name: \"USERKEY\", order: 20, owner: SignonResponse, /*type: String,*/ fcn: \"getUserKey\"});\n\n\n/**\n * The userkey that can be used instead of the username/password.\n *\n * @param {String} userKey The userkey that can be used instead of the username/password.\n */\nSignonResponse.prototype.setUserKey = function(userKey) {\n  this.userKey = userKey;\n};\n\n\n/**\n * The date/time of the expiration of the user key.\n *\n * @return {Date} The date/time of the expiration of the user key.\n */\nSignonResponse.prototype.getUserKeyExpiration = function() {\n  return this.userKeyExpiration;\n};\nElement.add({name: \"TSKEYEXPIRE\", order: 30, owner: SignonResponse, /*type: Date,*/ fcn: \"getUserKeyExpiration\"});\n\n\n/**\n * The date/time of the expiration of the user key.\n *\n * @param {Date} userKeyExpiration The date/time of the expiration of the user key.\n */\nSignonResponse.prototype.setUserKeyExpiration = function(userKeyExpiration) {\n  this.userKeyExpiration = userKeyExpiration;\n};\n\n\n/**\n * The three-letter langauge code.\n *\n * @return {String} The three-letter langauge code.\n * @see java.util.Locale#getISO3Language()\n */\nSignonResponse.prototype.getLanguage = function() {\n  return this.language;\n};\nElement.add({name: \"LANGUAGE\", required: true, order: 40, owner: SignonResponse, /*type: String,*/ fcn: \"getLanguage\"});\n\n\n/**\n * The three-letter langauge code.\n *\n * @param {String} language The three-letter langauge code.\n */\nSignonResponse.prototype.setLanguage = function(language) {\n  this.language = language;\n};\n\n\n/**\n * The date/time that the FI profile was last updated.\n *\n * @return {Date} The date/time that the FI profile was last updated.\n */\nSignonResponse.prototype.getProfileLastUpdated = function() {\n  return this.profileLastUpdated;\n};\nElement.add({name: \"DTPROFUP\", order: 50, owner: SignonResponse, /*type: Date,*/ fcn: \"getProfileLastUpdated\"});\n\n\n/**\n * The date/time that the FI profile was last updated.\n *\n * @param {Date} profileLastUpdated The date/time that the FI profile was last updated.\n */\nSignonResponse.prototype.setProfileLastUpdated = function(profileLastUpdated) {\n  this.profileLastUpdated = profileLastUpdated;\n};\n\n\n/**\n * The date/time that the user's account information was updated.\n *\n * @return {Date} The date/time that the user's account information was updated.\n */\nSignonResponse.prototype.getAccountLastUpdated = function() {\n  return this.accountLastUpdated;\n};\nElement.add({name: \"DTACCTUP\", order: 60, owner: SignonResponse, /*type: Date,*/ fcn: \"getAccountLastUpdated\"});\n\n\n/**\n * The date/time that the user's account information was updated.\n *\n * @param {Date} accountLastUpdated The date/time that the user's account information was updated.\n */\nSignonResponse.prototype.setAccountLastUpdated = function(accountLastUpdated) {\n  this.accountLastUpdated = accountLastUpdated;\n};\n\n\n/**\n * The financial instutution identity information.\n *\n * @return {FinancialInstitution} The financial instutution identity information.\n */\nSignonResponse.prototype.getFinancialInstitution = function() {\n  return this.financialInstitution;\n};\nChildAggregate.add({order: 70, owner: SignonResponse, /*type: FinancialInstitution,*/ fcn: \"getFinancialInstitution\"});\n\n\n/**\n * The financial instutution identity information.\n *\n * @param {FinancialInstitution} financialInstitution The financial instutution identity information.\n */\nSignonResponse.prototype.setFinancialInstitution = function(financialInstitution) {\n  this.financialInstitution = financialInstitution;\n};\n\n\n/**\n * The session id for the client.\n *\n * @return {String} The session id for the client.\n */\nSignonResponse.prototype.getSessionId = function() {\n  return this.sessionId;\n};\nElement.add({name: \"SESSCOOKIE\", order: 80, owner: SignonResponse, /*type: String,*/ fcn: \"getSessionId\"});\n\n\n/**\n * The session id for the client.\n *\n * @param {String} sessionId The session id for the client.\n */\nSignonResponse.prototype.setSessionId = function(sessionId) {\n  this.sessionId = sessionId;\n};\n\n\n/**\n * The access key that the client should return in the next sign-on requuest.\n *\n * @return {String} The access key that the client should return in the next sign-on requuest.\n */\nSignonResponse.prototype.getAccessKey = function() {\n  return this.accessKey;\n};\nElement.add({name: \"ACCESSKEY\", order: 90, owner: SignonResponse, /*type: String,*/ fcn: \"getAccessKey\"});\n\n\n/**\n * The access key that the client should return in the next sign-on requuest.\n *\n * @param {String} accessKey The access key that the client should return in the next sign-on requuest.\n */\nSignonResponse.prototype.setAccessKey = function(accessKey) {\n  this.accessKey = accessKey;\n};\n\n\n\n\nmodule.exports = SignonResponse;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar MessageSetType = require(\"../MessageSetType\");\nvar ResponseMessageSet = require(\"../ResponseMessageSet\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\n\n/**\n * The sign-on response message set.\n *\n * @class\n * @augments ResponseMessageSet\n * @see \"Section 2.5, OFX Spec.\"\n */\nfunction SignonResponseMessageSet () {\n\n  /**\n   * @name SignonResponseMessageSet#signonResponse\n   * @type SignonResponse\n   * @access private\n   */\n  this.signonResponse = null;\n\n  /**\n   * @name SignonResponseMessageSet#passwordChangeResponse\n   * @type PasswordChangeResponseTransaction\n   * @access private\n   */\n  this.passwordChangeResponse = null;\n}\n\ninherit(SignonResponseMessageSet, \"extends\", ResponseMessageSet);\n\n\nAggregate.add(\"SIGNONMSGSRSV1\", SignonResponseMessageSet);\n\n\nSignonResponseMessageSet.prototype.getType = function() {\n  return MessageSetType.signon;\n};\n\n\n/**\n * The message for this message set.\n *\n * @return {SignonResponse} The message for this message set.\n */\nSignonResponseMessageSet.prototype.getSignonResponse = function() {\n  return this.signonResponse;\n};\nChildAggregate.add({order: 0, owner: SignonResponseMessageSet, /*type: SignonResponse,*/ fcn: \"getSignonResponse\"});\n\n\n/**\n * The message for this message set.\n *\n * @param {SignonResponse} signonResponse The message for this message set.\n */\nSignonResponseMessageSet.prototype.setSignonResponse = function(signonResponse) {\n  this.signonResponse = signonResponse;\n};\n\n\n/**\n * The password change response.\n *\n * @return {PasswordChangeResponseTransaction} The password change response.\n */\nSignonResponseMessageSet.prototype.getPasswordChangeResponse = function() {\n  return this.passwordChangeResponse;\n};\nChildAggregate.add({order: 10, owner: SignonResponseMessageSet, /*type: PasswordChangeResponseTransaction,*/ fcn: \"getPasswordChangeResponse\"});\n\n\n/**\n * The password change response.\n *\n * @param {PasswordChangeResponseTransaction} passwordChangeResponse The password change response.\n */\nSignonResponseMessageSet.prototype.setPasswordChangeResponse = function(passwordChangeResponse) {\n  this.passwordChangeResponse = passwordChangeResponse;\n};\n\n\n//todo: challenge request/response\n// Inherited.\nSignonResponseMessageSet.prototype.getResponseMessages = function() {\n  var messages = [];\n\n  if (this.getSignonResponse() !== null) {\n    messages.push(this.getSignonResponse());\n  }\n\n  return messages;\n};\n\n\n\n\nmodule.exports = SignonResponseMessageSet;\n","\"use strict\";\n\nmodule.exports = {\n  FinancialInstitution: require(\"./FinancialInstitution\"),\n  PasswordChangeRequest: require(\"./PasswordChangeRequest\"),\n  PasswordChangeRequestTransaction: require(\"./PasswordChangeRequestTransaction\"),\n  PasswordChangeResponse: require(\"./PasswordChangeResponse\"),\n  PasswordChangeResponseTransaction: require(\"./PasswordChangeResponseTransaction\"),\n  SignonRequest: require(\"./SignonRequest\"),\n  SignonRequestMessageSet: require(\"./SignonRequestMessageSet\"),\n  SignonResponse: require(\"./SignonResponse\"),\n  SignonResponseMessageSet: require(\"./SignonResponseMessageSet\"),\n};\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar RequestMessage = require(\"../RequestMessage\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\n\n/**\n * @class\n * @augments RequestMessage\n */\nfunction AccountInfoRequest () {\n\n  /**\n   * @name AccountInfoRequest#lastUpdated\n   * @type Date\n   * @access private\n   */\n  this.lastUpdated = new Date(0);\n}\n\ninherit(AccountInfoRequest, \"extends\", RequestMessage);\n\n\nAggregate.add(\"ACCTINFORQ\", AccountInfoRequest);\n\n\n/**\n * When the account info was last updated.\n *\n * @return {Date} When the account info was last updated.\n */\nAccountInfoRequest.prototype.getLastUpdated = function() {\n  return this.lastUpdated;\n};\nElement.add({name: \"DTACCTUP\", required: true, order: 0, owner: AccountInfoRequest, /*type: Date,*/ fcn: \"getLastUpdated\"});\n\n\n/**\n * When the account info was last updated.\n *\n * @param {Date} lastUpdated When the account info was last updated.\n */\nAccountInfoRequest.prototype.setLastUpdated = function(lastUpdated) {\n  this.lastUpdated = lastUpdated;\n};\n\n\n\n\nmodule.exports = AccountInfoRequest;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar TransactionWrappedRequestMessage = require(\"../TransactionWrappedRequestMessage\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar AccountInfoRequest = require(\"./AccountInfoRequest\");\n\n/**\n * @class\n * @augments TransactionWrappedRequestMessage\n */\nfunction AccountInfoRequestTransaction () {\n\n  /**\n   * @name AccountInfoRequestTransaction#message\n   * @type AccountInfoRequest\n   * @access private\n   */\n  this.message = null;\n}\n\ninherit(AccountInfoRequestTransaction, \"extends\", new TransactionWrappedRequestMessage(AccountInfoRequest));\n\n\nAggregate.add(\"ACCTINFOTRNRQ\", AccountInfoRequestTransaction);\n\n\n/**\n * The wrapped message.\n *\n * @return {AccountInfoRequest} The wrapped message.\n */\nAccountInfoRequestTransaction.prototype.getMessage = function() {\n  return this.message;\n};\nChildAggregate.add({required: true, order: 30, owner: AccountInfoRequestTransaction, /*type: AccountInfoRequest,*/ fcn: \"getMessage\"});\n\n\n/**\n * The wrapped message.\n *\n * @param {AccountInfoRequest} message The wrapped message.\n */\nAccountInfoRequestTransaction.prototype.setMessage = function(message) {\n  this.message = message;\n};\n\n\n// Inherited.\nAccountInfoRequestTransaction.prototype.setWrappedMessage = function(/*AccountInfoRequest*/ message) {\n  this.setMessage(message);\n};\n\n\n\n\nmodule.exports = AccountInfoRequestTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar ResponseMessage = require(\"../ResponseMessage\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\n\n/**\n * @class\n * @augments ResponseMessage\n */\nfunction AccountInfoResponse () {\n\n  /**\n   * @name AccountInfoResponse#lastUpdated\n   * @type Date\n   * @access private\n   */\n  this.lastUpdated = new Date(0);\n\n  /**\n   * @name AccountInfoResponse#accounts\n   * @type Collection<AccountProfile>\n   * @access private\n   */\n  this.accounts = null;\n}\n\ninherit(AccountInfoResponse, \"extends\", ResponseMessage);\n\n\nAggregate.add(\"ACCTINFORS\", AccountInfoResponse);\n\n\nAccountInfoResponse.prototype.getResponseMessageName = function() {\n  return \"account info\";\n};\n\n\n/**\n * When the account info was last updated.\n *\n * @return {Date} When the account info was last updated.\n */\nAccountInfoResponse.prototype.getLastUpdated = function() {\n  return this.lastUpdated;\n};\nElement.add({name: \"DTACCTUP\", required: true, order: 0, owner: AccountInfoResponse, /*type: Date,*/ fcn: \"getLastUpdated\"});\n\n\n/**\n * When the account info was last updated.\n *\n * @param {Date} lastUpdated When the account info was last updated.\n */\nAccountInfoResponse.prototype.setLastUpdated = function(lastUpdated) {\n  this.lastUpdated = lastUpdated;\n};\n\n\n/**\n * The accounts.\n *\n * @return {Collection<AccountProfile>} The accounts.\n */\nAccountInfoResponse.prototype.getAccounts = function() {\n  return this.accounts;\n};\nChildAggregate.add({order: 10, owner: AccountInfoResponse, /*type: Collection<AccountProfile>,*/ fcn: \"getAccounts\"});\n\n\n/**\n * The accounts.\n *\n * @param {Collection<AccountProfile>} accounts The accounts.\n */\nAccountInfoResponse.prototype.setAccounts = function(accounts) {\n  this.accounts = accounts;\n};\n\n\n\n\nmodule.exports = AccountInfoResponse;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar TransactionWrappedResponseMessage = require(\"../TransactionWrappedResponseMessage\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar AccountInfoResponse = require(\"./AccountInfoResponse\");\n\n/**\n * @class\n * @augments TransactionWrappedResponseMessage\n */\nfunction AccountInfoResponseTransaction () {\n\n  /**\n   * @name AccountInfoResponseTransaction#message\n   * @type AccountInfoResponse\n   * @access private\n   */\n  this.message = null;\n}\n\ninherit(AccountInfoResponseTransaction, \"extends\", new TransactionWrappedResponseMessage(AccountInfoResponse));\n\n\nAggregate.add(\"ACCTINFOTRNRS\", AccountInfoResponseTransaction);\n\n\n/**\n * The wrapped message.\n *\n * @return {AccountInfoResponse} The wrapped message.\n */\nAccountInfoResponseTransaction.prototype.getMessage = function() {\n  return this.message;\n};\nChildAggregate.add({required: true, order: 30, owner: AccountInfoResponseTransaction, /*type: AccountInfoResponse,*/ fcn: \"getMessage\"});\n\n\n/**\n * The wrapped message.\n *\n * @param {AccountInfoResponse} message The wrapped message.\n */\nAccountInfoResponseTransaction.prototype.setMessage = function(message) {\n  this.message = message;\n};\n\n\n// Inherited.\nAccountInfoResponseTransaction.prototype.getWrappedMessage = function() {\n  return this.getMessage();\n};\n\n\n\n\nmodule.exports = AccountInfoResponseTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar InvestmentAccountInfo = require(\"../investment/accounts/InvestmentAccountInfo\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar BankAccountInfo = require(\"../banking/BankAccountInfo\");\nvar CreditCardAccountInfo = require(\"../creditcard/CreditCardAccountInfo\");\n\n/**\n * @class\n */\nfunction AccountProfile () {\n\n  /**\n   * @name AccountProfile#description\n   * @type String\n   * @access private\n   */\n  this.description = null;\n\n  /**\n   * @name AccountProfile#phone\n   * @type String\n   * @access private\n   */\n  this.phone = null;\n\n  /**\n   * @name AccountProfile#bankSpecifics\n   * @type BankAccountInfo\n   * @access private\n   */\n  this.bankSpecifics = null;\n\n  /**\n   * @name AccountProfile#creditCardSpecifics\n   * @type CreditCardAccountInfo\n   * @access private\n   */\n  this.creditCardSpecifics = null;\n\n  /**\n   * @name AccountProfile#investSpecifics\n   * @type InvestmentAccountInfo\n   * @access private\n   */\n  this.investSpecifics = null;\n}\n\n\n\nAggregate.add(\"ACCTINFO\", AccountProfile);\n\n\n/**\n * Description of the account.\n *\n * @return {String} The description of the account.\n */\nAccountProfile.prototype.getDescription = function() {\n  return this.description;\n};\nElement.add({name: \"DESC\", order: 0, owner: AccountProfile, /*type: String,*/ fcn: \"getDescription\"});\n\n\n/**\n * The description of the account.\n *\n * @param {String} description The description of the account.\n */\nAccountProfile.prototype.setDescription = function(description) {\n  this.description = description;\n};\n\n\n/**\n * Phone number for the account.\n *\n * @return {String} Phone number for the account.\n */\nAccountProfile.prototype.getPhone = function() {\n  return this.phone;\n};\nElement.add({name: \"PHONE\", order: 10, owner: AccountProfile, /*type: String,*/ fcn: \"getPhone\"});\n\n\n/**\n * Phone number for the account.\n *\n * @param {String} phone Phone number for the account.\n */\nAccountProfile.prototype.setPhone = function(phone) {\n  this.phone = phone;\n};\n\n\n/**\n * Account specifics.\n *\n * @return {net.sf.ofx4j.domain.data.common.AccountInfo} Account specifics.\n */\nAccountProfile.prototype.getSpecifics = function() {\n  if (this.getBankSpecifics() !== null && this.getCreditCardSpecifics() !== null) {\n    throw new Error(\"Only one account specifics aggregate can be set at a time.\");\n  }\n  else if (this.getBankSpecifics() !== null) {\n    return this.getBankSpecifics();\n  } else if (this.getInvestmentSpecifics() !== null) {\n    return this.getInvestmentSpecifics();\n  }\n  else {\n    return this.getCreditCardSpecifics();\n  }\n};\n\n\n/**\n * Account specifics.\n *\n * @param {net.sf.ofx4j.domain.data.common.AccountInfo} specifics Account specifics.\n */\nAccountProfile.prototype.setSpecifics = function(specifics) {\n  if (specifics instanceof BankAccountInfo) {\n    this.setBankSpecifics(specifics);\n  }\n  else if (specifics instanceof CreditCardAccountInfo) {\n    this.setCreditCardSpecifics(specifics);\n  } else if (specifics instanceof InvestmentAccountInfo) {\n    this.setInvestmentSpecifics(specifics);\n  }\n  else {\n    throw new Error(\"Unknown specifics type: \" + specifics);\n  }\n};\n\n\n/**\n * Bank-specific info.\n *\n * @return {BankAccountInfo} Bank-specific info.\n */\nAccountProfile.prototype.getBankSpecifics = function() {\n  return this.bankSpecifics;\n};\nChildAggregate.add({order: 20, owner: AccountProfile, /*type: BankAccountInfo,*/ fcn: \"getBankSpecifics\"});\n\n\n/**\n * Bank-specific info.\n *\n * @param {BankAccountInfo} bankSpecifics Bank-specific info.\n */\nAccountProfile.prototype.setBankSpecifics = function(bankSpecifics) {\n  this.creditCardSpecifics = null;\n  this.investSpecifics = null;\n  this.bankSpecifics = bankSpecifics;\n};\n\n\n/**\n * Credit-card account info.\n *\n * @return {CreditCardAccountInfo} Credit-card account info.\n */\nAccountProfile.prototype.getCreditCardSpecifics = function() {\n  return this.creditCardSpecifics;\n};\nChildAggregate.add({order: 30, owner: AccountProfile, /*type: CreditCardAccountInfo,*/ fcn: \"getCreditCardSpecifics\"});\n\n\n/**\n * Credit-card account info.\n *\n * @param {CreditCardAccountInfo} creditCardSpecifics Credit-card account info.\n */\nAccountProfile.prototype.setCreditCardSpecifics = function(creditCardSpecifics) {\n  this.bankSpecifics = null;\n  this.investSpecifics = null;\n  this.creditCardSpecifics = creditCardSpecifics;\n};\n\n\n/**\n * Investment account info.\n *\n * @return {InvestmentAccountInfo} Investment account info.\n */\nAccountProfile.prototype.getInvestmentSpecifics = function() {\n  return this.investSpecifics;\n};\nChildAggregate.add({order: 40, owner: AccountProfile, /*type: InvestmentAccountInfo,*/ fcn: \"getInvestmentSpecifics\"});\n\n\n/**\n * Investment account info.\n *\n * @param {InvestmentAccountInfo} investSpecifics Investment account info.\n */\nAccountProfile.prototype.setInvestmentSpecifics = function(investSpecifics) {\n  this.bankSpecifics = null;\n  this.creditCardSpecifics = null;\n  this.investSpecifics = investSpecifics;\n};\n\n\n\n\nmodule.exports = AccountProfile;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar RequestMessageSet = require(\"../RequestMessageSet\");\nvar MessageSetType = require(\"../MessageSetType\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\n\n/**\n * @class\n * @augments RequestMessageSet\n */\nfunction SignupRequestMessageSet () {\n\n  /**\n   * @name SignupRequestMessageSet#accountInfoRequest\n   * @type AccountInfoRequestTransaction\n   * @access private\n   */\n  this.accountInfoRequest = null;\n}\n\ninherit(SignupRequestMessageSet, \"extends\", RequestMessageSet);\n\n\nAggregate.add(\"SIGNUPMSGSRQV1\", SignupRequestMessageSet);\n\n\nSignupRequestMessageSet.prototype.getType = function() {\n  return MessageSetType.signup;\n};\n\n\n/**\n * The account info request.\n *\n * @return {AccountInfoRequestTransaction} The account info request.\n */\nSignupRequestMessageSet.prototype.getAccountInfoRequest = function() {\n  return this.accountInfoRequest;\n};\nChildAggregate.add({order: 0, owner: SignupRequestMessageSet, /*type: AccountInfoRequestTransaction,*/ fcn: \"getAccountInfoRequest\"});\n\n\n/**\n * The account info request.\n *\n * @param {AccountInfoRequestTransaction} accountInfoRequest The account info request.\n */\nSignupRequestMessageSet.prototype.setAccountInfoRequest = function(accountInfoRequest) {\n  this.accountInfoRequest = accountInfoRequest;\n};\n\n\n/**\n * The request messages.\n *\n * @return {RequestMessage[]} The request messages.\n */\nSignupRequestMessageSet.prototype.getRequestMessages = function() {\n  var messages = [];\n\n  if (this.getAccountInfoRequest() !== null) {\n    messages.push(this.getAccountInfoRequest());\n  }\n  \n  return messages;\n};\n\n\n\n\nmodule.exports = SignupRequestMessageSet;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar ResponseMessageSet = require(\"../ResponseMessageSet\");\nvar MessageSetType = require(\"../MessageSetType\");\n\n/**\n * @class\n * @augments ResponseMessageSet\n */\nfunction SignupResponseMessageSet () {\n\n  /**\n   * @name SignupResponseMessageSet#accountInfoResponse\n   * @type AccountInfoResponseTransaction\n   * @access private\n   */\n  this.accountInfoResponse = null;\n}\n\ninherit(SignupResponseMessageSet, \"extends\", ResponseMessageSet);\n\n\nAggregate.add(\"SIGNUPMSGSRSV1\", SignupResponseMessageSet);\n\n\nSignupResponseMessageSet.prototype.getType = function() {\n  return MessageSetType.signup;\n};\n\n\n/**\n * The account info response.\n *\n * @return {AccountInfoResponseTransaction} The account info response.\n */\nSignupResponseMessageSet.prototype.getAccountInfoResponse = function() {\n  return this.accountInfoResponse;\n};\nChildAggregate.add({order: 0, owner: SignupResponseMessageSet, /*type: AccountInfoResponseTransaction,*/ fcn: \"getAccountInfoResponse\"});\n\n\n/**\n * The account info response.\n *\n * @param {AccountInfoResponseTransaction} accountInfoResponse The account info response.\n */\nSignupResponseMessageSet.prototype.setAccountInfoResponse = function(accountInfoResponse) {\n  this.accountInfoResponse = accountInfoResponse;\n};\n\n\n/**\n * The response messages.\n *\n * @return {ResponseMessage[]} The response messages.\n */\nSignupResponseMessageSet.prototype.getResponseMessages = function() {\n  var messages = [];\n\n  if (this.getAccountInfoResponse() !== null) {\n    messages.push(this.getAccountInfoResponse());\n  }\n\n  return messages;\n};\n\n\n\n\nmodule.exports = SignupResponseMessageSet;\n","\"use strict\";\n\nmodule.exports = {\n  AccountInfoRequest: require(\"./AccountInfoRequest\"),\n  AccountInfoRequestTransaction: require(\"./AccountInfoRequestTransaction\"),\n  AccountInfoResponse: require(\"./AccountInfoResponse\"),\n  AccountInfoResponseTransaction: require(\"./AccountInfoResponseTransaction\"),\n  AccountProfile: require(\"./AccountProfile\"),\n  SignupRequestMessageSet: require(\"./SignupRequestMessageSet\"),\n  SignupResponseMessageSet: require(\"./SignupResponseMessageSet\"),\n};\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Element = require(\"../../../meta/Element\");\n\n\n/**\n * @class\n */\nfunction ExtDBInfo () {\n\n  /**\n   * @name ExtDBInfo#procDet\n   * @type List<ProcDet>\n   * @access private\n   */\n  this.procDet = null;\n\n  /**\n   * @name ExtDBInfo#teInterest\n   * @type String\n   * @access private\n   */\n  this.teInterest = null;\n\n  /**\n   * @name ExtDBInfo#pabInterest\n   * @type String\n   * @access private\n   */\n  this.pabInterest = null;\n\n  /**\n   * @name ExtDBInfo#teIntDividend\n   * @type String\n   * @access private\n   */\n  this.teIntDividend = null;\n\n  /**\n   * @name ExtDBInfo#pabDividend\n   * @type String\n   * @access private\n   */\n  this.pabDividend = null;\n}\n\n\n\nAggregate.add(\"EXTDBINFO_V100\", ExtDBInfo);\n\n\n/**\n * @return {ProcDet[]} the procDet\n */\nExtDBInfo.prototype.getProcDet = function() {\n  return this.procDet;\n};\nChildAggregate.add({required:false, order: 0, owner: ExtDBInfo, /*type: ProcDet[],*/ fcn: \"getProcDet\"});\n\n\n/**\n * @param {ProcDet[]} procDet the procDet to set\n */\nExtDBInfo.prototype.setProcDet = function(procDet) {\n  this.procDet = procDet;\n};\n\n\n/**\n * @return {String} the teInterest\n */\nExtDBInfo.prototype.getTeInterest = function() {\n  return this.teInterest;\n};\nElement.add({name: \"TEINTEREST\",required: false , order: 1, owner: ExtDBInfo, /*type: String,*/ fcn: \"getTeInterest\"});\n\n\n/**\n * @param {String} teInterest the teInterest to set\n */\nExtDBInfo.prototype.setTeInterest = function(teInterest) {\n  this.teInterest = teInterest;\n};\n\n\n/**\n * @return {String} the pabInterest\n */\nExtDBInfo.prototype.getPabInterest = function() {\n  return this.pabInterest;\n};\nElement.add({name: \"PABINTEREST\",required: false , order: 2, owner: ExtDBInfo, /*type: String,*/ fcn: \"getPabInterest\"});\n\n\n/**\n * @param {String} pabInterest the pabInterest to set\n */\nExtDBInfo.prototype.setPabInterest = function(pabInterest) {\n  this.pabInterest = pabInterest;\n};\n\n\n/**\n * @return {String} the teIntDividend\n */\nExtDBInfo.prototype.getTeIntDividend = function() {\n  return this.teIntDividend;\n};\nElement.add({name: \"TEINTDIVIDEND\",required: false , order: 3, owner: ExtDBInfo, /*type: String,*/ fcn: \"getTeIntDividend\"});\n\n\n/**\n * @param {String} teIntDividend the teIntDividend to set\n */\nExtDBInfo.prototype.setTeIntDividend = function(teIntDividend) {\n  this.teIntDividend = teIntDividend;\n};\n\n\n/**\n * @return {String} the pabDividend\n */\nExtDBInfo.prototype.getPabDividend = function() {\n  return this.pabDividend;\n};\nElement.add({name: \"PABDIVIDEND\",required: false , order: 4, owner: ExtDBInfo, /*type: String,*/ fcn: \"getPabDividend\"});\n\n\n/**\n * @param {String} pabDividend the pabDividend to set\n */\nExtDBInfo.prototype.setPabDividend = function(pabDividend) {\n  this.pabDividend = pabDividend;\n};\n\n\n\n\nmodule.exports = ExtDBInfo;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\n\n/**\n * @class\n */\nfunction PayerAddress () {\n\n  /**\n   * @name PayerAddress#payerName1\n   * @type String\n   * @access private\n   */\n  this.payerName1 = null;\n\n  /**\n   * @name PayerAddress#payerName2\n   * @type String\n   * @access private\n   */\n  this.payerName2 = null;\n\n  /**\n   * @name PayerAddress#address1\n   * @type String\n   * @access private\n   */\n  this.address1 = null;\n\n  /**\n   * @name PayerAddress#address2\n   * @type String\n   * @access private\n   */\n  this.address2 = null;\n\n  /**\n   * @name PayerAddress#city\n   * @type String\n   * @access private\n   */\n  this.city = null;\n\n  /**\n   * @name PayerAddress#state\n   * @type String\n   * @access private\n   */\n  this.state = null;\n\n  /**\n   * @name PayerAddress#postalCode\n   * @type String\n   * @access private\n   */\n  this.postalCode = null;\n\n  /**\n   * @name PayerAddress#phone\n   * @type String\n   * @access private\n   */\n  this.phone = null;\n}\n\n\n\nAggregate.add(\"PAYERADDR\", PayerAddress);\n\n\n/**\n * @return {String} the payerName1\n */\nPayerAddress.prototype.getPayerName1 = function() {\n  return this.payerName1;\n};\nElement.add({name: \"PAYERNAME1\",required: true , order: 0, owner: PayerAddress, /*type: String,*/ fcn: \"getPayerName1\"});\n\n\n/**\n * @param {String} payerName1 the payerName1 to set\n */\nPayerAddress.prototype.setPayerName1 = function(payerName1) {\n  this.payerName1 = payerName1;\n};\n\n\n/**\n * @return {String} the payerName2\n */\nPayerAddress.prototype.getPayerName2 = function() {\n  return this.payerName2;\n};\nElement.add({name: \"PAYERNAME2\",required: false , order: 1, owner: PayerAddress, /*type: String,*/ fcn: \"getPayerName2\"});\n\n\n/**\n * @param {String} payerName2 the payerName2 to set\n */\nPayerAddress.prototype.setPayerName2 = function(payerName2) {\n  this.payerName2 = payerName2;\n};\n\n\n/**\n * @return {String} the address1\n */\nPayerAddress.prototype.getAddress1 = function() {\n  return this.address1;\n};\nElement.add({name: \"ADDR1\",required: true , order: 2, owner: PayerAddress, /*type: String,*/ fcn: \"getAddress1\"});\n\n\n/**\n * @param {String} address1 the address1 to set\n */\nPayerAddress.prototype.setAddress1 = function(address1) {\n  this.address1 = address1;\n};\n\n\n/**\n * @return {String} the address2\n */\nPayerAddress.prototype.getAddress2 = function() {\n  return this.address2;\n};\nElement.add({name: \"ADDR2\",required: true , order: 3, owner: PayerAddress, /*type: String,*/ fcn: \"getAddress2\"});\n\n\n/**\n * @param {String} address2 the address2 to set\n */\nPayerAddress.prototype.setAddress2 = function(address2) {\n  this.address2 = address2;\n};\n\n\n/**\n * @return {String} the city\n */\nPayerAddress.prototype.getCity = function() {\n  return this.city;\n};\nElement.add({name: \"CITY\",required: true , order: 4, owner: PayerAddress, /*type: String,*/ fcn: \"getCity\"});\n\n\n/**\n * @param {String} city the city to set\n */\nPayerAddress.prototype.setCity = function(city) {\n  this.city = city;\n};\n\n\n/**\n * @return {String} the state\n */\nPayerAddress.prototype.getState = function() {\n  return this.state;\n};\nElement.add({name: \"STATE\",required: true , order: 5, owner: PayerAddress, /*type: String,*/ fcn: \"getState\"});\n\n\n/**\n * @param {String} state the state to set\n */\nPayerAddress.prototype.setState = function(state) {\n  this.state = state;\n};\n\n\n/**\n * @return {String} the postalCode\n */\nPayerAddress.prototype.getPostalCode = function() {\n  return this.postalCode;\n};\nElement.add({name: \"POSTALCODE\",required: true , order: 6, owner: PayerAddress, /*type: String,*/ fcn: \"getPostalCode\"});\n\n\n/**\n * @param {String} postalCode the postalCode to set\n */\nPayerAddress.prototype.setPostalCode = function(postalCode) {\n  this.postalCode = postalCode;\n};\n\n\n/**\n * @return {String} the phone\n */\nPayerAddress.prototype.getPhone = function() {\n  return this.phone;\n};\nElement.add({name: \"PHONE\",required: false , order: 7, owner: PayerAddress, /*type: String,*/ fcn: \"getPhone\"});\n\n\n/**\n * @param {String} phone the phone to set\n */\nPayerAddress.prototype.setPhone = function(phone) {\n  this.phone = phone;\n};\n\n\n\n\nmodule.exports = PayerAddress;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\n\n/**\n * @class\n */\nfunction ProcDet () {\n\n  /**\n   * @name ProcDet#dtAqd\n   * @type String\n   * @access private\n   */\n  this.dtAqd = null;\n\n  /**\n   * @name ProcDet#dtSale\n   * @type String\n   * @access private\n   */\n  this.dtSale = null;\n\n  /**\n   * @name ProcDet#secName\n   * @type String\n   * @access private\n   */\n  this.secName = null;\n\n  /**\n   * @name ProcDet#costBasis\n   * @type String\n   * @access private\n   */\n  this.costBasis = null;\n\n  /**\n   * @name ProcDet#saleSpr\n   * @type String\n   * @access private\n   */\n  this.saleSpr = null;\n\n  /**\n   * @name ProcDet#longShort\n   * @type String\n   * @access private\n   */\n  this.longShort = null;\n\n  /**\n   * @name ProcDet#wasDisAllowed\n   * @type String\n   * @access private\n   */\n  this.wasDisAllowed = null;\n\n  /**\n   * @name ProcDet#noncoveredSec\n   * @type String\n   * @access private\n   */\n  this.noncoveredSec = null;\n\n  /**\n   * @name ProcDet#basisNotshown\n   * @type String\n   * @access private\n   */\n  this.basisNotshown = null;\n}\n\n\n\nAggregate.add(\"PROCDET_V100\", ProcDet);\n\n\n/**\n * @return {String} the dtAqd\n */\nProcDet.prototype.getDtAqd = function() {\n  return this.dtAqd;\n};\nElement.add({name: \"DTAQD\", required: false, order: 0, owner: ProcDet, /*type: String,*/ fcn: \"getDtAqd\"});\n\n\n/**\n * @param {String} dtAqd the dtAqd to set\n */\nProcDet.prototype.setDtAqd = function(dtAqd) {\n  this.dtAqd = dtAqd;\n};\n\n\n/**\n * @return {String} the dtSale\n */\nProcDet.prototype.getDtSale = function() {\n  return this.dtSale;\n};\nElement.add({name: \"DTSALE\", required: false, order: 2, owner: ProcDet, /*type: String,*/ fcn: \"getDtSale\"});\n\n\n/**\n * @param {String} dtSale the dtSale to set\n */\nProcDet.prototype.setDtSale = function(dtSale) {\n  this.dtSale = dtSale;\n};\n\n\n/**\n * @return {String} the secName\n */\nProcDet.prototype.getSecName = function() {\n  return this.secName;\n};\nElement.add({name: \"SECNAME\", required: false, order: 3, owner: ProcDet, /*type: String,*/ fcn: \"getSecName\"});\n\n\n/**\n * @param {String} secName the secName to set\n */\nProcDet.prototype.setSecName = function(secName) {\n  this.secName = secName;\n};\n\n\n/**\n * @return {String} the costBasis\n */\nProcDet.prototype.getCostBasis = function() {\n  return this.costBasis;\n};\nElement.add({name: \"COSTBASIS\", required: false, order: 4, owner: ProcDet, /*type: String,*/ fcn: \"getCostBasis\"});\n\n\n/**\n * @param {String} costBasis the costBasis to set\n */\nProcDet.prototype.setCostBasis = function(costBasis) {\n  this.costBasis = costBasis;\n};\n\n\n/**\n * @return {String} the saleSpr\n */\nProcDet.prototype.getSaleSpr = function() {\n  return this.saleSpr;\n};\nElement.add({name: \"SALESPR\", required: false, order: 5, owner: ProcDet, /*type: String,*/ fcn: \"getSaleSpr\"});\n\n\n/**\n * @param {String} saleSpr the saleSpr to set\n */\nProcDet.prototype.setSaleSpr = function(saleSpr) {\n  this.saleSpr = saleSpr;\n};\n\n\n/**\n * @return {String} the longShort\n */\nProcDet.prototype.getLongShort = function() {\n  return this.longShort;\n};\nElement.add({name: \"LONGSHORT\", required: false, order: 6, owner: ProcDet, /*type: String,*/ fcn: \"getLongShort\"});\n\n\n/**\n * @param {String} longShort the longShort to set\n */\nProcDet.prototype.setLongShort = function(longShort) {\n  this.longShort = longShort;\n};\n\n\n/**\n * @return {String} the wasDisAllowed\n */\nProcDet.prototype.getWasDisAllowed = function() {\n  return this.wasDisAllowed;\n};\nElement.add({name: \"WASHSALELOSSDISALLOWED\", required: false, order: 7, owner: ProcDet, /*type: String,*/ fcn: \"getWasDisAllowed\"});\n\n\n/**\n * @param {String} wasDisAllowed the wasDisAllowed to set\n */\nProcDet.prototype.setWasDisAllowed = function(wasDisAllowed) {\n  this.wasDisAllowed = wasDisAllowed;\n};\n\n\n/**\n * @return {String} the noncoveredSec\n */\nProcDet.prototype.getNoncoveredSec = function() {\n  return this.noncoveredSec;\n};\nElement.add({name: \"NONCOVEREDSECURITY\", required: false, order: 8, owner: ProcDet, /*type: String,*/ fcn: \"getNoncoveredSec\"});\n\n\n/**\n * @param {String} noncoveredSec the noncoveredSec to set\n */\nProcDet.prototype.setNoncoveredSec = function(noncoveredSec) {\n  this.noncoveredSec = noncoveredSec;\n};\n\n\n/**\n * @return {String} the basisNotshown\n */\nProcDet.prototype.getBasisNotshown = function() {\n  return this.basisNotshown;\n};\nElement.add({name: \"BASISNOTSHOWN\", required: false, order: 9, owner: ProcDet, /*type: String,*/ fcn: \"getBasisNotshown\"});\n\n\n/**\n * @param {String} basisNotshown the basisNotshown to set\n */\nProcDet.prototype.setBasisNotshown = function(basisNotshown) {\n  this.basisNotshown = basisNotshown;\n};\n\n\n\n\nmodule.exports = ProcDet;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\n\n/**\n * @class\n */\nfunction RecAddress () {\n\n  /**\n   * @name RecAddress#recName1\n   * @type String\n   * @access private\n   */\n  this.recName1 = null;\n\n  /**\n   * @name RecAddress#recName2\n   * @type String\n   * @access private\n   */\n  this.recName2 = null;\n\n  /**\n   * @name RecAddress#address1\n   * @type String\n   * @access private\n   */\n  this.address1 = null;\n\n  /**\n   * @name RecAddress#address2\n   * @type String\n   * @access private\n   */\n  this.address2 = null;\n\n  /**\n   * @name RecAddress#city\n   * @type String\n   * @access private\n   */\n  this.city = null;\n\n  /**\n   * @name RecAddress#state\n   * @type String\n   * @access private\n   */\n  this.state = null;\n\n  /**\n   * @name RecAddress#postalCode\n   * @type String\n   * @access private\n   */\n  this.postalCode = null;\n\n  /**\n   * @name RecAddress#phone\n   * @type String\n   * @access private\n   */\n  this.phone = null;\n}\n\n\n\nAggregate.add(\"RECADDR\", RecAddress);\n\n\n/**\n * @return {String} the recName1\n */\nRecAddress.prototype.getRecName1 = function() {\n  return this.recName1;\n};\nElement.add({name: \"RECNAME1\",required: true , order: 0, owner: RecAddress, /*type: String,*/ fcn: \"getRecName1\"});\n\n\n/**\n * @param {String} recName1 the recName1 to set\n */\nRecAddress.prototype.setRecName1 = function(recName1) {\n  this.recName1 = recName1;\n};\n\n\n/**\n * @return {String} the recName2\n */\nRecAddress.prototype.getRecName2 = function() {\n  return this.recName2;\n};\nElement.add({name: \"RECNAME2\",required: false , order: 1, owner: RecAddress, /*type: String,*/ fcn: \"getRecName2\"});\n\n\n/**\n * @param {String} recName2 the recName2 to set\n */\nRecAddress.prototype.setRecName2 = function(recName2) {\n  this.recName2 = recName2;\n};\n\n\n/**\n * @return {String} the address1\n */\nRecAddress.prototype.getAddress1 = function() {\n  return this.address1;\n};\nElement.add({name: \"ADDR1\",required: true , order: 2, owner: RecAddress, /*type: String,*/ fcn: \"getAddress1\"});\n\n\n/**\n * @param {String} address1 the address1 to set\n */\nRecAddress.prototype.setAddress1 = function(address1) {\n  this.address1 = address1;\n};\n\n\n/**\n * @return {String} the address2\n */\nRecAddress.prototype.getAddress2 = function() {\n  return this.address2;\n};\nElement.add({name: \"ADDR2\",required: true , order: 3, owner: RecAddress, /*type: String,*/ fcn: \"getAddress2\"});\n\n\n/**\n * @param {String} address2 the address2 to set\n */\nRecAddress.prototype.setAddress2 = function(address2) {\n  this.address2 = address2;\n};\n\n\n/**\n * @return {String} the city\n */\nRecAddress.prototype.getCity = function() {\n  return this.city;\n};\nElement.add({name: \"CITY\",required: true , order: 4, owner: RecAddress, /*type: String,*/ fcn: \"getCity\"});\n\n\n/**\n * @param {String} city the city to set\n */\nRecAddress.prototype.setCity = function(city) {\n  this.city = city;\n};\n\n\n/**\n * @return {String} the state\n */\nRecAddress.prototype.getState = function() {\n  return this.state;\n};\nElement.add({name: \"STATE\",required: true , order: 5, owner: RecAddress, /*type: String,*/ fcn: \"getState\"});\n\n\n/**\n * @param {String} state the state to set\n */\nRecAddress.prototype.setState = function(state) {\n  this.state = state;\n};\n\n\n/**\n * @return {String} the postalCode\n */\nRecAddress.prototype.getPostalCode = function() {\n  return this.postalCode;\n};\nElement.add({name: \"POSTALCODE\",required: true , order: 6, owner: RecAddress, /*type: String,*/ fcn: \"getPostalCode\"});\n\n\n/**\n * @param {String} postalCode the postalCode to set\n */\nRecAddress.prototype.setPostalCode = function(postalCode) {\n  this.postalCode = postalCode;\n};\n\n\n/**\n * @return {String} the phone\n */\nRecAddress.prototype.getPhone = function() {\n  return this.phone;\n};\nElement.add({name: \"PHONE\",required: false , order: 7, owner: RecAddress, /*type: String,*/ fcn: \"getPhone\"});\n\n\n/**\n * @param {String} phone the phone to set\n */\nRecAddress.prototype.setPhone = function(phone) {\n  this.phone = phone;\n};\n\n\n\n\nmodule.exports = RecAddress;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar PayerAddress = require(\"./PayerAddress\");\nvar RecAddress = require(\"./RecAddress\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\n\nvar Element = require(\"../../../meta/Element\");\n\n/**\n * @class\n */\nfunction Tax1099B () {\n\n  /**\n   * @name Tax1099B#srvrtId\n   * @type String\n   * @access private\n   */\n  this.srvrtId = null;\n\n  /**\n   * @name Tax1099B#taxYear\n   * @type String\n   * @access private\n   */\n  this.taxYear = null;\n\n  /**\n   * @name Tax1099B#extDBInfo\n   * @type ExtDBInfo\n   * @access private\n   */\n  this.extDBInfo = null;\n\n  /**\n   * @name Tax1099B#payerAddress\n   * @type PayerAddress\n   * @access private\n   */\n  this.payerAddress = null;\n\n  /**\n   * @name Tax1099B#payerId\n   * @type String\n   * @access private\n   */\n  this.payerId = null;\n\n  /**\n   * @name Tax1099B#recAddress\n   * @type RecAddress\n   * @access private\n   */\n  this.recAddress = null;\n\n  /**\n   * @name Tax1099B#recId\n   * @type String\n   * @access private\n   */\n  this.recId = null;\n\n  /**\n   * @name Tax1099B#recAcct\n   * @type String\n   * @access private\n   */\n  this.recAcct = null;\n}\n\n\n\nAggregate.add(\"TAX1099B_V100\", Tax1099B);\n\n\nTax1099B.prototype.getSrvrtId = function() {\n  return this.srvrtId;\n};\nElement.add({name: \"SRVRTID\",required: true , order: 0, owner: Tax1099B, /*type: String,*/ fcn: \"getSrvrtId\"});\n\n\nTax1099B.prototype.setSrvrtId = function(/*String*/ srvrtId) {\n  this.srvrtId = srvrtId;\n};\n\n\nTax1099B.prototype.getTaxYear = function() {\n  return this.taxYear;\n};\nElement.add({name: \"TAXYEAR\", required: true, order: 1, owner: Tax1099B, /*type: String,*/ fcn: \"getTaxYear\"});\n\n\nTax1099B.prototype.setTaxYear = function(/*String*/ taxYear) {\n  this.taxYear = taxYear;\n};\n\n\n/**\n * @return {ExtDBInfo} the extDBInfo\n */\nTax1099B.prototype.getExtDBInfo = function() {\n  return this.extDBInfo;\n};\nChildAggregate.add({required:true, order: 2, owner: Tax1099B, /*type: ExtDBInfo,*/ fcn: \"getExtDBInfo\"});\n\n\n/**\n * @param {ExtDBInfo} extDBInfo the extDBInfo to set\n */\nTax1099B.prototype.setExtDBInfo = function(extDBInfo) {\n  this.extDBInfo = extDBInfo;\n};\n\n\n/**\n * @return {PayerAddress} the payerAddress\n */\nTax1099B.prototype.getPayerAddress = function() {\n  return this.payerAddress;\n};\nChildAggregate.add({required:true, order: 3, owner: Tax1099B, /*type: PayerAddress,*/ fcn: \"getPayerAddress\"});\n\n\n/**\n * @param {PayerAddress} payerAddress the payerAddress to set\n */\nTax1099B.prototype.setPayerAddress = function(payerAddress) {\n  this.payerAddress = payerAddress;\n};\n\n\n/**\n * @return {String} the payerId\n */\nTax1099B.prototype.getPayerId = function() {\n  return this.payerId;\n};\nElement.add({name: \"PAYERID\", required: true, order: 4, owner: Tax1099B, /*type: String,*/ fcn: \"getPayerId\"});\n\n\n/**\n * @param {String} payerId the payerId to set\n */\nTax1099B.prototype.setPayerId = function(payerId) {\n  this.payerId = payerId;\n};\n\n\n/**\n * @return {RecAddress} the recAddress\n */\nTax1099B.prototype.getRecAddress = function() {\n  return this.recAddress;\n};\nChildAggregate.add({required:true, order: 5, owner: Tax1099B, /*type: RecAddress,*/ fcn: \"getRecAddress\"});\n\n\n/**\n * @param {RecAddress} recAddress the recAddress to set\n */\nTax1099B.prototype.setRecAddress = function(recAddress) {\n  this.recAddress = recAddress;\n};\n\n\n/**\n * @return {String} the recId\n */\nTax1099B.prototype.getRecId = function() {\n  return this.recId;\n};\nElement.add({name: \"RECID\", required: true, order: 6, owner: Tax1099B, /*type: String,*/ fcn: \"getRecId\"});\n\n\n/**\n * @param {String} recId the recId to set\n */\nTax1099B.prototype.setRecId = function(recId) {\n  this.recId = recId;\n};\n\n\n/**\n * @return {String} the recAcct\n */\nTax1099B.prototype.getRecAcct = function() {\n  return this.recAcct;\n};\nElement.add({name: \"RECACCT\", required: true, order: 7, owner: Tax1099B, /*type: String,*/ fcn: \"getRecAcct\"});\n\n\n/**\n * @param {String} recAcct the recAcct to set\n */\nTax1099B.prototype.setRecAcct = function(recAcct) {\n  this.recAcct = recAcct;\n};\n\n\n\n\nmodule.exports = Tax1099B;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Element = require(\"../../../meta/Element\");\n\n/**\n * @class\n */\nfunction Tax1099DIV () {\n\n  /**\n   * @name Tax1099DIV#srvrtId\n   * @type String\n   * @access private\n   */\n  this.srvrtId = null;\n\n  /**\n   * @name Tax1099DIV#taxYear\n   * @type String\n   * @access private\n   */\n  this.taxYear = null;\n\n  /**\n   * @name Tax1099DIV#ordDiv\n   * @type String\n   * @access private\n   */\n  this.ordDiv = null;\n\n  /**\n   * @name Tax1099DIV#qualifiedDiv\n   * @type String\n   * @access private\n   */\n  this.qualifiedDiv = null;\n\n  /**\n   * @name Tax1099DIV#totCapGain\n   * @type String\n   * @access private\n   */\n  this.totCapGain = null;\n\n  /**\n   * @name Tax1099DIV#p28Gain\n   * @type String\n   * @access private\n   */\n  this.p28Gain = null;\n\n  /**\n   * @name Tax1099DIV#unrecSec1250\n   * @type String\n   * @access private\n   */\n  this.unrecSec1250 = null;\n\n  /**\n   * @name Tax1099DIV#sec1202\n   * @type String\n   * @access private\n   */\n  this.sec1202 = null;\n\n  /**\n   * @name Tax1099DIV#nonTaxDist\n   * @type String\n   * @access private\n   */\n  this.nonTaxDist = null;\n\n  /**\n   * @name Tax1099DIV#fedTaxWh\n   * @type String\n   * @access private\n   */\n  this.fedTaxWh = null;\n\n  /**\n   * @name Tax1099DIV#investExp\n   * @type String\n   * @access private\n   */\n  this.investExp = null;\n\n  /**\n   * @name Tax1099DIV#forTaxPd\n   * @type String\n   * @access private\n   */\n  this.forTaxPd = null;\n\n  /**\n   * @name Tax1099DIV#cashLiq\n   * @type String\n   * @access private\n   */\n  this.cashLiq = null;\n\n  /**\n   * @name Tax1099DIV#nonCashLiq\n   * @type String\n   * @access private\n   */\n  this.nonCashLiq = null;\n\n  /**\n   * @name Tax1099DIV#payerAddress\n   * @type PayerAddress\n   * @access private\n   */\n  this.payerAddress = null;\n\n  /**\n   * @name Tax1099DIV#payerId\n   * @type String\n   * @access private\n   */\n  this.payerId = null;\n\n  /**\n   * @name Tax1099DIV#recAddress\n   * @type RecAddress\n   * @access private\n   */\n  this.recAddress = null;\n\n  /**\n   * @name Tax1099DIV#recId\n   * @type String\n   * @access private\n   */\n  this.recId = null;\n\n  /**\n   * @name Tax1099DIV#recAcct\n   * @type String\n   * @access private\n   */\n  this.recAcct = null;\n}\n\n\n\nAggregate.add(\"TAX1099DIV_V100\", Tax1099DIV);\n\n\nTax1099DIV.prototype.getSrvrtId = function() {\n  return this.srvrtId;\n};\nElement.add({name: \"SRVRTID\",required: false , order: 0, owner: Tax1099DIV, /*type: String,*/ fcn: \"getSrvrtId\"});\n\n\nTax1099DIV.prototype.setSrvrtId = function(/*String*/ srvrtId) {\n  this.srvrtId = srvrtId;\n};\n\n\nTax1099DIV.prototype.getTaxYear = function() {\n  return this.taxYear;\n};\nElement.add({name: \"TAXYEAR\", required: false, order: 1, owner: Tax1099DIV, /*type: String,*/ fcn: \"getTaxYear\"});\n\n\nTax1099DIV.prototype.setTaxYear = function(/*String*/ taxYear) {\n  this.taxYear = taxYear;\n};\n\n\n/**\n * @return {String} the ordDiv\n */\nTax1099DIV.prototype.getOrdDiv = function() {\n  return this.ordDiv;\n};\nElement.add({name: \"ORDDIV\", required: false, order: 2, owner: Tax1099DIV, /*type: String,*/ fcn: \"getOrdDiv\"});\n\n\n/**\n * @param {String} ordDiv the ordDiv to set\n */\nTax1099DIV.prototype.setOrdDiv = function(ordDiv) {\n  this.ordDiv = ordDiv;\n};\n\n\n/**\n * @return {String} the qualifiedDiv\n */\nTax1099DIV.prototype.getQualifiedDiv = function() {\n  return this.qualifiedDiv;\n};\nElement.add({name: \"QUALIFIEDDIV\", required: false, order: 3, owner: Tax1099DIV, /*type: String,*/ fcn: \"getQualifiedDiv\"});\n\n\n/**\n * @param {String} qualifiedDiv the qualifiedDiv to set\n */\nTax1099DIV.prototype.setQualifiedDiv = function(qualifiedDiv) {\n  this.qualifiedDiv = qualifiedDiv;\n};\n\n\n/**\n * @return {String} the totCapGain\n */\nTax1099DIV.prototype.getTotCapGain = function() {\n  return this.totCapGain;\n};\nElement.add({name: \"TOTCAPGAIN\", required: false, order: 4, owner: Tax1099DIV, /*type: String,*/ fcn: \"getTotCapGain\"});\n\n\n/**\n * @param {String} totCapGain the totCapGain to set\n */\nTax1099DIV.prototype.setTotCapGain = function(totCapGain) {\n  this.totCapGain = totCapGain;\n};\n\n\n/**\n * @return {String} the p28Gain\n */\nTax1099DIV.prototype.getP28Gain = function() {\n  return this.p28Gain;\n};\nElement.add({name: \"P28GAIN\", required: false, order: 5, owner: Tax1099DIV, /*type: String,*/ fcn: \"getP28Gain\"});\n\n\n/**\n * @param {String} p28Gain the p28Gain to set\n */\nTax1099DIV.prototype.setP28Gain = function(p28Gain) {\n  this.p28Gain = p28Gain;\n};\n\n\n/**\n * @return {String} the unrecSec1250\n */\nTax1099DIV.prototype.getUnrecSec1250 = function() {\n  return this.unrecSec1250;\n};\nElement.add({name: \"UNRECSEC1250\", required: false, order: 6, owner: Tax1099DIV, /*type: String,*/ fcn: \"getUnrecSec1250\"});\n\n\n/**\n * @param {String} unrecSec1250 the unrecSec1250 to set\n */\nTax1099DIV.prototype.setUnrecSec1250 = function(unrecSec1250) {\n  this.unrecSec1250 = unrecSec1250;\n};\n\n\n/**\n * @return {String} the sec1202\n */\nTax1099DIV.prototype.getSec1202 = function() {\n  return this.sec1202;\n};\nElement.add({name: \"SEC1202\", required: false, order: 7, owner: Tax1099DIV, /*type: String,*/ fcn: \"getSec1202\"});\n\n\n/**\n * @param {String} sec1202 the sec1202 to set\n */\nTax1099DIV.prototype.setSec1202 = function(sec1202) {\n  this.sec1202 = sec1202;\n};\n\n\n/**\n * @return {String} the nonTaxDist\n */\nTax1099DIV.prototype.getNonTaxDist = function() {\n  return this.nonTaxDist;\n};\nElement.add({name: \"NONTAXDIST\", required: false, order: 8, owner: Tax1099DIV, /*type: String,*/ fcn: \"getNonTaxDist\"});\n\n\n/**\n * @param {String} nonTaxDist the nonTaxDist to set\n */\nTax1099DIV.prototype.setNonTaxDist = function(nonTaxDist) {\n  this.nonTaxDist = nonTaxDist;\n};\n\n\n/**\n * @return {String} the fedTaxWh\n */\nTax1099DIV.prototype.getFedTaxWh = function() {\n  return this.fedTaxWh;\n};\nElement.add({name: \"FEDTAXWH\", required: false, order: 9, owner: Tax1099DIV, /*type: String,*/ fcn: \"getFedTaxWh\"});\n\n\n/**\n * @param {String} fedTaxWh the fedTaxWh to set\n */\nTax1099DIV.prototype.setFedTaxWh = function(fedTaxWh) {\n  this.fedTaxWh = fedTaxWh;\n};\n\n\n/**\n * @return {String} the investExp\n */\nTax1099DIV.prototype.getInvestExp = function() {\n  return this.investExp;\n};\nElement.add({name: \"INVESTEXP\", required: false, order: 10, owner: Tax1099DIV, /*type: String,*/ fcn: \"getInvestExp\"});\n\n\n/**\n * @param {String} investExp the investExp to set\n */\nTax1099DIV.prototype.setInvestExp = function(investExp) {\n  this.investExp = investExp;\n};\n\n\n/**\n * @return {String} the forTaxPd\n */\nTax1099DIV.prototype.getForTaxPd = function() {\n  return this.forTaxPd;\n};\nElement.add({name: \"FORTAXPD\", required: false, order: 11, owner: Tax1099DIV, /*type: String,*/ fcn: \"getForTaxPd\"});\n\n\n/**\n * @param {String} forTaxPd the forTaxPd to set\n */\nTax1099DIV.prototype.setForTaxPd = function(forTaxPd) {\n  this.forTaxPd = forTaxPd;\n};\n\n\n/**\n * @return {String} the cashLiq\n */\nTax1099DIV.prototype.getCashLiq = function() {\n  return this.cashLiq;\n};\nElement.add({name: \"CASHLIQ\", required: false, order: 12, owner: Tax1099DIV, /*type: String,*/ fcn: \"getCashLiq\"});\n\n\n/**\n * @param {String} cashLiq the cashLiq to set\n */\nTax1099DIV.prototype.setCashLiq = function(cashLiq) {\n  this.cashLiq = cashLiq;\n};\n\n\n/**\n * @return {String} the nonCashLiq\n */\nTax1099DIV.prototype.getNonCashLiq = function() {\n  return this.nonCashLiq;\n};\nElement.add({name: \"NONCASHLIQ\", required: false, order: 13, owner: Tax1099DIV, /*type: String,*/ fcn: \"getNonCashLiq\"});\n\n\n/**\n * @param {String} nonCashLiq the nonCashLiq to set\n */\nTax1099DIV.prototype.setNonCashLiq = function(nonCashLiq) {\n  this.nonCashLiq = nonCashLiq;\n};\n\n\n/**\n * @return {PayerAddress} the payerAddress\n */\nTax1099DIV.prototype.getPayerAddress = function() {\n  return this.payerAddress;\n};\nChildAggregate.add({required:true, order: 14, owner: Tax1099DIV, /*type: PayerAddress,*/ fcn: \"getPayerAddress\"});\n\n\n/**\n * @param {PayerAddress} payerAddress the payerAddress to set\n */\nTax1099DIV.prototype.setPayerAddress = function(payerAddress) {\n  this.payerAddress = payerAddress;\n};\n\n\n/**\n * @return {String} the payerId\n */\nTax1099DIV.prototype.getPayerId = function() {\n  return this.payerId;\n};\nElement.add({name: \"PAYERID\", required: true, order: 15, owner: Tax1099DIV, /*type: String,*/ fcn: \"getPayerId\"});\n\n\n/**\n * @param {String} payerId the payerId to set\n */\nTax1099DIV.prototype.setPayerId = function(payerId) {\n  this.payerId = payerId;\n};\n\n\n/**\n * @return {RecAddress} the recAddress\n */\nTax1099DIV.prototype.getRecAddress = function() {\n  return this.recAddress;\n};\nChildAggregate.add({required:true, order: 16, owner: Tax1099DIV, /*type: RecAddress,*/ fcn: \"getRecAddress\"});\n\n\n/**\n * @param {RecAddress} recAddress the recAddress to set\n */\nTax1099DIV.prototype.setRecAddress = function(recAddress) {\n  this.recAddress = recAddress;\n};\n\n\n/**\n * @return {String} the recId\n */\nTax1099DIV.prototype.getRecId = function() {\n  return this.recId;\n};\nElement.add({name: \"RECID\", required: true, order: 17, owner: Tax1099DIV, /*type: String,*/ fcn: \"getRecId\"});\n\n\n/**\n * @param {String} recId the recId to set\n */\nTax1099DIV.prototype.setRecId = function(recId) {\n  this.recId = recId;\n};\n\n\n/**\n * @return {String} the recAcct\n */\nTax1099DIV.prototype.getRecAcct = function() {\n  return this.recAcct;\n};\nElement.add({name: \"RECACCT\", required: true, order: 18, owner: Tax1099DIV, /*type: String,*/ fcn: \"getRecAcct\"});\n\n\n/**\n * @param {String} recAcct the recAcct to set\n */\nTax1099DIV.prototype.setRecAcct = function(recAcct) {\n  this.recAcct = recAcct;\n};\n\n\n\n\nmodule.exports = Tax1099DIV;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Element = require(\"../../../meta/Element\");\n\n/**\n * @class\n */\nfunction Tax1099INT () {\n\n  /**\n   * @name Tax1099INT#srvrtId\n   * @type String\n   * @access private\n   */\n  this.srvrtId = null;\n\n  /**\n   * @name Tax1099INT#taxYear\n   * @type String\n   * @access private\n   */\n  this.taxYear = null;\n\n  /**\n   * @name Tax1099INT#intIncome\n   * @type String\n   * @access private\n   */\n  this.intIncome = null;\n\n  /**\n   * @name Tax1099INT#erlWithPen\n   * @type String\n   * @access private\n   */\n  this.erlWithPen = null;\n\n  /**\n   * @name Tax1099INT#intUsbndtrs\n   * @type String\n   * @access private\n   */\n  this.intUsbndtrs = null;\n\n  /**\n   * @name Tax1099INT#fedTaxWh\n   * @type String\n   * @access private\n   */\n  this.fedTaxWh = null;\n\n  /**\n   * @name Tax1099INT#investExp\n   * @type String\n   * @access private\n   */\n  this.investExp = null;\n\n  /**\n   * @name Tax1099INT#forTaxPd\n   * @type String\n   * @access private\n   */\n  this.forTaxPd = null;\n\n  /**\n   * @name Tax1099INT#payerAddress\n   * @type PayerAddress\n   * @access private\n   */\n  this.payerAddress = null;\n\n  /**\n   * @name Tax1099INT#payerId\n   * @type String\n   * @access private\n   */\n  this.payerId = null;\n\n  /**\n   * @name Tax1099INT#recAddress\n   * @type RecAddress\n   * @access private\n   */\n  this.recAddress = null;\n\n  /**\n   * @name Tax1099INT#recId\n   * @type String\n   * @access private\n   */\n  this.recId = null;\n\n  /**\n   * @name Tax1099INT#recAcct\n   * @type String\n   * @access private\n   */\n  this.recAcct = null;\n\n  /**\n   * @name Tax1099INT#taxExemptInt\n   * @type String\n   * @access private\n   */\n  this.taxExemptInt = null;\n\n  /**\n   * @name Tax1099INT#specifiedPabInt\n   * @type String\n   * @access private\n   */\n  this.specifiedPabInt = null;\n}\n\n\n\nAggregate.add(\"TAX1099INT_V100\", Tax1099INT);\n\n\nTax1099INT.prototype.getSrvrtId = function() {\n  return this.srvrtId;\n};\nElement.add({name: \"SRVRTID\",required: true , order: 0, owner: Tax1099INT, /*type: String,*/ fcn: \"getSrvrtId\"});\n\n\nTax1099INT.prototype.setSrvrtId = function(/*String*/ srvrtId) {\n  this.srvrtId = srvrtId;\n};\n\n\nTax1099INT.prototype.getTaxYear = function() {\n  return this.taxYear;\n};\nElement.add({name: \"TAXYEAR\", required: true, order: 1, owner: Tax1099INT, /*type: String,*/ fcn: \"getTaxYear\"});\n\n\nTax1099INT.prototype.setTaxYear = function(/*String*/ taxYear) {\n  this.taxYear = taxYear;\n};\n\n\n/**\n * @return {String} the intIncome\n */\nTax1099INT.prototype.getIntIncome = function() {\n  return this.intIncome;\n};\nElement.add({name: \"INTINCOME\",required: false , order: 2, owner: Tax1099INT, /*type: String,*/ fcn: \"getIntIncome\"});\n\n\n/**\n * @param {String} intIncome the intIncome to set\n */\nTax1099INT.prototype.setIntIncome = function(intIncome) {\n  this.intIncome = intIncome;\n};\n\n\n/**\n * @return {String} the erlWithPen\n */\nTax1099INT.prototype.getErlWithPen = function() {\n  return this.erlWithPen;\n};\nElement.add({name: \"ERLWITHPEN\",required: false , order: 3, owner: Tax1099INT, /*type: String,*/ fcn: \"getErlWithPen\"});\n\n\n/**\n * @param {String} erlWithPen the erlWithPen to set\n */\nTax1099INT.prototype.setErlWithPen = function(erlWithPen) {\n  this.erlWithPen = erlWithPen;\n};\n\n\n/**\n * @return {String} the intUsbndtrs\n */\nTax1099INT.prototype.getIntUsbndtrs = function() {\n  return this.intUsbndtrs;\n};\nElement.add({name: \"INTUSBNDTRS\",required: false , order: 4, owner: Tax1099INT, /*type: String,*/ fcn: \"getIntUsbndtrs\"});\n\n\n/**\n * @param {String} intUsbndtrs the intUsbndtrs to set\n */\nTax1099INT.prototype.setIntUsbndtrs = function(intUsbndtrs) {\n  this.intUsbndtrs = intUsbndtrs;\n};\n\n\n/**\n * @return {String} the fedTaxWh\n */\nTax1099INT.prototype.getFedTaxWh = function() {\n  return this.fedTaxWh;\n};\nElement.add({name: \"FEDTAXWH\", required: false, order: 5, owner: Tax1099INT, /*type: String,*/ fcn: \"getFedTaxWh\"});\n\n\n/**\n * @param {String} fedTaxWh the fedTaxWh to set\n */\nTax1099INT.prototype.setFedTaxWh = function(fedTaxWh) {\n  this.fedTaxWh = fedTaxWh;\n};\n\n\n/**\n * @return {String} the investExp\n */\nTax1099INT.prototype.getInvestExp = function() {\n  return this.investExp;\n};\nElement.add({name: \"INVESTEXP\", required: false, order: 6, owner: Tax1099INT, /*type: String,*/ fcn: \"getInvestExp\"});\n\n\n/**\n * @param {String} investExp the investExp to set\n */\nTax1099INT.prototype.setInvestExp = function(investExp) {\n  this.investExp = investExp;\n};\n\n\n/**\n * @return {String} the forTaxPd\n */\nTax1099INT.prototype.getForTaxPd = function() {\n  return this.forTaxPd;\n};\nElement.add({name: \"FORTAXPD\", required: false, order: 7, owner: Tax1099INT, /*type: String,*/ fcn: \"getForTaxPd\"});\n\n\n/**\n * @param {String} forTaxPd the forTaxPd to set\n */\nTax1099INT.prototype.setForTaxPd = function(forTaxPd) {\n  this.forTaxPd = forTaxPd;\n};\n\n\n/**\n * @return {PayerAddress} the payerAddress\n */\nTax1099INT.prototype.getPayerAddress = function() {\n  return this.payerAddress;\n};\nChildAggregate.add({required:true, order: 8, owner: Tax1099INT, /*type: PayerAddress,*/ fcn: \"getPayerAddress\"});\n\n\n/**\n * @param {PayerAddress} payerAddress the payerAddress to set\n */\nTax1099INT.prototype.setPayerAddress = function(payerAddress) {\n  this.payerAddress = payerAddress;\n};\n\n\n/**\n * @return {String} the payerId\n */\nTax1099INT.prototype.getPayerId = function() {\n  return this.payerId;\n};\nElement.add({name: \"PAYERID\", required: true, order: 9, owner: Tax1099INT, /*type: String,*/ fcn: \"getPayerId\"});\n\n\n/**\n * @param {String} payerId the payerId to set\n */\nTax1099INT.prototype.setPayerId = function(payerId) {\n  this.payerId = payerId;\n};\n\n\n/**\n * @return {RecAddress} the recAddress\n */\nTax1099INT.prototype.getRecAddress = function() {\n  return this.recAddress;\n};\nChildAggregate.add({required:true, order: 10, owner: Tax1099INT, /*type: RecAddress,*/ fcn: \"getRecAddress\"});\n\n\n/**\n * @param {RecAddress} recAddress the recAddress to set\n */\nTax1099INT.prototype.setRecAddress = function(recAddress) {\n  this.recAddress = recAddress;\n};\n\n\n/**\n * @return {String} the recId\n */\nTax1099INT.prototype.getRecId = function() {\n  return this.recId;\n};\nElement.add({name: \"RECID\", required: true, order: 11, owner: Tax1099INT, /*type: String,*/ fcn: \"getRecId\"});\n\n\n/**\n * @param {String} recId the recId to set\n */\nTax1099INT.prototype.setRecId = function(recId) {\n  this.recId = recId;\n};\n\n\n/**\n * @return {String} the recAcct\n */\nTax1099INT.prototype.getRecAcct = function() {\n  return this.recAcct;\n};\nElement.add({name: \"RECACCT\", required: true, order: 12, owner: Tax1099INT, /*type: String,*/ fcn: \"getRecAcct\"});\n\n\n/**\n * @param {String} recAcct the recAcct to set\n */\nTax1099INT.prototype.setRecAcct = function(recAcct) {\n  this.recAcct = recAcct;\n};\n\n\n/**\n * @return {String} the taxExemptInt\n */\nTax1099INT.prototype.getTaxExemptInt = function() {\n  return this.taxExemptInt;\n};\nElement.add({name: \"TAXEXEMPTINT\", required: false, order: 13, owner: Tax1099INT, /*type: String,*/ fcn: \"getTaxExemptInt\"});\n\n\n/**\n * @param {String} taxExemptInt the taxExemptInt to set\n */\nTax1099INT.prototype.setTaxExemptInt = function(taxExemptInt) {\n  this.taxExemptInt = taxExemptInt;\n};\n\n\n/**\n * @return {String} the specifiedPabInt\n */\nTax1099INT.prototype.getSpecifiedPabInt = function() {\n  return this.specifiedPabInt;\n};\nElement.add({name: \"SPECIFIEDPABINT\", required: false, order: 14, owner: Tax1099INT, /*type: String,*/ fcn: \"getSpecifiedPabInt\"});\n\n\n/**\n * @param {String} specifiedPabInt the specifiedPabInt to set\n */\nTax1099INT.prototype.setSpecifiedPabInt = function(specifiedPabInt) {\n  this.specifiedPabInt = specifiedPabInt;\n};\n\n\n\n\nmodule.exports = Tax1099INT;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Element = require(\"../../../meta/Element\");\n\n/**\n * @class\n */\nfunction Tax1099MISC () {\n\n  /**\n   * @name Tax1099MISC#srvrtId\n   * @type String\n   * @access private\n   */\n  this.srvrtId = null;\n\n  /**\n   * @name Tax1099MISC#taxYear\n   * @type String\n   * @access private\n   */\n  this.taxYear = null;\n\n  /**\n   * @name Tax1099MISC#royalties\n   * @type String\n   * @access private\n   */\n  this.royalties = null;\n\n  /**\n   * @name Tax1099MISC#otherIncome\n   * @type String\n   * @access private\n   */\n  this.otherIncome = null;\n\n  /**\n   * @name Tax1099MISC#fedTaxWh\n   * @type String\n   * @access private\n   */\n  this.fedTaxWh = null;\n\n  /**\n   * @name Tax1099MISC#subPmts\n   * @type String\n   * @access private\n   */\n  this.subPmts = null;\n\n  /**\n   * @name Tax1099MISC#payerAddress\n   * @type PayerAddress\n   * @access private\n   */\n  this.payerAddress = null;\n\n  /**\n   * @name Tax1099MISC#payerId\n   * @type String\n   * @access private\n   */\n  this.payerId = null;\n\n  /**\n   * @name Tax1099MISC#recAddress\n   * @type RecAddress\n   * @access private\n   */\n  this.recAddress = null;\n\n  /**\n   * @name Tax1099MISC#recId\n   * @type String\n   * @access private\n   */\n  this.recId = null;\n\n  /**\n   * @name Tax1099MISC#recAcct\n   * @type String\n   * @access private\n   */\n  this.recAcct = null;\n}\n\n\n\nAggregate.add(\"TAX1099MISC_V100\", Tax1099MISC);\n\n\nTax1099MISC.prototype.getSrvrtId = function() {\n  return this.srvrtId;\n};\nElement.add({name: \"SRVRTID\",required: true , order: 0, owner: Tax1099MISC, /*type: String,*/ fcn: \"getSrvrtId\"});\n\n\nTax1099MISC.prototype.setSrvrtId = function(/*String*/ srvrtId) {\n  this.srvrtId = srvrtId;\n};\n\n\nTax1099MISC.prototype.getTaxYear = function() {\n  return this.taxYear;\n};\nElement.add({name: \"TAXYEAR\", required: true, order: 1, owner: Tax1099MISC, /*type: String,*/ fcn: \"getTaxYear\"});\n\n\nTax1099MISC.prototype.setTaxYear = function(/*String*/ taxYear) {\n  this.taxYear = taxYear;\n};\n\n\n/**\n * @return {String} the royalties\n */\nTax1099MISC.prototype.getRoyalties = function() {\n  return this.royalties;\n};\nElement.add({name: \"ROYALTIES\",required: false , order: 2, owner: Tax1099MISC, /*type: String,*/ fcn: \"getRoyalties\"});\n\n\n/**\n * @param {String} royalties the royalties to set\n */\nTax1099MISC.prototype.setRoyalties = function(royalties) {\n  this.royalties = royalties;\n};\n\n\n/**\n * @return {String} the otherIncome\n */\nTax1099MISC.prototype.getOtherIncome = function() {\n  return this.otherIncome;\n};\nElement.add({name: \"OTHERINCOME\",required: false , order: 3, owner: Tax1099MISC, /*type: String,*/ fcn: \"getOtherIncome\"});\n\n\n/**\n * @param {String} otherIncome the otherIncome to set\n */\nTax1099MISC.prototype.setOtherIncome = function(otherIncome) {\n  this.otherIncome = otherIncome;\n};\n\n\n/**\n * @return {String} the fedTaxWh\n */\nTax1099MISC.prototype.getFedTaxWh = function() {\n  return this.fedTaxWh;\n};\nElement.add({name: \"FEDTAXWH\",required: false , order: 4, owner: Tax1099MISC, /*type: String,*/ fcn: \"getFedTaxWh\"});\n\n\n/**\n * @param {String} fedTaxWh the fedTaxWh to set\n */\nTax1099MISC.prototype.setFedTaxWh = function(fedTaxWh) {\n  this.fedTaxWh = fedTaxWh;\n};\n\n\n/**\n * @return {String} the subPmts\n */\nTax1099MISC.prototype.getSubPmts = function() {\n  return this.subPmts;\n};\nElement.add({name: \"SUBPMTS\",required: false , order: 5, owner: Tax1099MISC, /*type: String,*/ fcn: \"getSubPmts\"});\n\n\n/**\n * @param {String} subPmts the subPmts to set\n */\nTax1099MISC.prototype.setSubPmts = function(subPmts) {\n  this.subPmts = subPmts;\n};\n\n\n/**\n * @return {PayerAddress} the payerAddress\n */\nTax1099MISC.prototype.getPayerAddress = function() {\n  return this.payerAddress;\n};\nChildAggregate.add({required:true, order: 6, owner: Tax1099MISC, /*type: PayerAddress,*/ fcn: \"getPayerAddress\"});\n\n\n/**\n * @param {PayerAddress} payerAddress the payerAddress to set\n */\nTax1099MISC.prototype.setPayerAddress = function(payerAddress) {\n  this.payerAddress = payerAddress;\n};\n\n\n/**\n * @return {String} the payerId\n */\nTax1099MISC.prototype.getPayerId = function() {\n  return this.payerId;\n};\nElement.add({name: \"PAYERID\", required: true, order: 7, owner: Tax1099MISC, /*type: String,*/ fcn: \"getPayerId\"});\n\n\n/**\n * @param {String} payerId the payerId to set\n */\nTax1099MISC.prototype.setPayerId = function(payerId) {\n  this.payerId = payerId;\n};\n\n\n/**\n * @return {RecAddress} the recAddress\n */\nTax1099MISC.prototype.getRecAddress = function() {\n  return this.recAddress;\n};\nChildAggregate.add({required:true, order: 8, owner: Tax1099MISC, /*type: RecAddress,*/ fcn: \"getRecAddress\"});\n\n\n/**\n * @param {RecAddress} recAddress the recAddress to set\n */\nTax1099MISC.prototype.setRecAddress = function(recAddress) {\n  this.recAddress = recAddress;\n};\n\n\n/**\n * @return {String} the recId\n */\nTax1099MISC.prototype.getRecId = function() {\n  return this.recId;\n};\nElement.add({name: \"RECID\", required: true, order: 9, owner: Tax1099MISC, /*type: String,*/ fcn: \"getRecId\"});\n\n\n/**\n * @param {String} recId the recId to set\n */\nTax1099MISC.prototype.setRecId = function(recId) {\n  this.recId = recId;\n};\n\n\n/**\n * @return {String} the recAcct\n */\nTax1099MISC.prototype.getRecAcct = function() {\n  return this.recAcct;\n};\nElement.add({name: \"RECACCT\", required: true, order: 10, owner: Tax1099MISC, /*type: String,*/ fcn: \"getRecAcct\"});\n\n\n/**\n * @param {String} recAcct the recAcct to set\n */\nTax1099MISC.prototype.setRecAcct = function(recAcct) {\n  this.recAcct = recAcct;\n};\n\n\n\n\nmodule.exports = Tax1099MISC;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Element = require(\"../../../meta/Element\");\n\n/**\n * @class\n */\nfunction Tax1099OID () {\n\n  /**\n   * @name Tax1099OID#srvrtId\n   * @type String\n   * @access private\n   */\n  this.srvrtId = null;\n\n  /**\n   * @name Tax1099OID#taxYear\n   * @type String\n   * @access private\n   */\n  this.taxYear = null;\n\n  /**\n   * @name Tax1099OID#originalDisc\n   * @type String\n   * @access private\n   */\n  this.originalDisc = null;\n\n  /**\n   * @name Tax1099OID#otherPerInt\n   * @type String\n   * @access private\n   */\n  this.otherPerInt = null;\n\n  /**\n   * @name Tax1099OID#erlWithPen\n   * @type String\n   * @access private\n   */\n  this.erlWithPen = null;\n\n  /**\n   * @name Tax1099OID#fedTaxWh\n   * @type String\n   * @access private\n   */\n  this.fedTaxWh = null;\n\n  /**\n   * @name Tax1099OID#desc\n   * @type String\n   * @access private\n   */\n  this.desc = null;\n\n  /**\n   * @name Tax1099OID#oidOnUstres\n   * @type String\n   * @access private\n   */\n  this.oidOnUstres = null;\n\n  /**\n   * @name Tax1099OID#investExp\n   * @type String\n   * @access private\n   */\n  this.investExp = null;\n\n  /**\n   * @name Tax1099OID#payerAddress\n   * @type PayerAddress\n   * @access private\n   */\n  this.payerAddress = null;\n\n  /**\n   * @name Tax1099OID#payerId\n   * @type String\n   * @access private\n   */\n  this.payerId = null;\n\n  /**\n   * @name Tax1099OID#recAddress\n   * @type RecAddress\n   * @access private\n   */\n  this.recAddress = null;\n\n  /**\n   * @name Tax1099OID#recId\n   * @type String\n   * @access private\n   */\n  this.recId = null;\n\n  /**\n   * @name Tax1099OID#recAcct\n   * @type String\n   * @access private\n   */\n  this.recAcct = null;\n}\n\n\n\nAggregate.add(\"TAX1099OID_V100\", Tax1099OID);\n\n\nTax1099OID.prototype.getSrvrtId = function() {\n  return this.srvrtId;\n};\nElement.add({name: \"SRVRTID\",required: true , order: 0, owner: Tax1099OID, /*type: String,*/ fcn: \"getSrvrtId\"});\n\n\nTax1099OID.prototype.setSrvrtId = function(/*String*/ srvrtId) {\n  this.srvrtId = srvrtId;\n};\n\n\nTax1099OID.prototype.getTaxYear = function() {\n  return this.taxYear;\n};\nElement.add({name: \"TAXYEAR\", required: true, order: 1, owner: Tax1099OID, /*type: String,*/ fcn: \"getTaxYear\"});\n\n\nTax1099OID.prototype.setTaxYear = function(/*String*/ taxYear) {\n  this.taxYear = taxYear;\n};\n\n\n/**\n * @return {String} the originalDisc\n */\nTax1099OID.prototype.getOriginalDisc = function() {\n  return this.originalDisc;\n};\nElement.add({name: \"ORIGISDISC\", required: false, order: 2, owner: Tax1099OID, /*type: String,*/ fcn: \"getOriginalDisc\"});\n\n\n/**\n * @param {String} originalDisc the originalDisc to set\n */\nTax1099OID.prototype.setOriginalDisc = function(originalDisc) {\n  this.originalDisc = originalDisc;\n};\n\n\n/**\n * @return {String} the otherPerInt\n */\nTax1099OID.prototype.getOtherPerInt = function() {\n  return this.otherPerInt;\n};\nElement.add({name: \"OTHERPERINT\", required: false, order: 3, owner: Tax1099OID, /*type: String,*/ fcn: \"getOtherPerInt\"});\n\n\n/**\n * @param {String} otherPerInt the otherPerInt to set\n */\nTax1099OID.prototype.setOtherPerInt = function(otherPerInt) {\n  this.otherPerInt = otherPerInt;\n};\n\n\n/**\n * @return {String} the erlWithPen\n */\nTax1099OID.prototype.getErlWithPen = function() {\n  return this.erlWithPen;\n};\nElement.add({name: \"ERLWITHPEN\", required: false, order: 4, owner: Tax1099OID, /*type: String,*/ fcn: \"getErlWithPen\"});\n\n\n/**\n * @param {String} erlWithPen the erlWithPen to set\n */\nTax1099OID.prototype.setErlWithPen = function(erlWithPen) {\n  this.erlWithPen = erlWithPen;\n};\n\n\n/**\n * @return {String} the fedTaxWh\n */\nTax1099OID.prototype.getFedTaxWh = function() {\n  return this.fedTaxWh;\n};\nElement.add({name: \"FEDTAXWH\", required: false, order: 5, owner: Tax1099OID, /*type: String,*/ fcn: \"getFedTaxWh\"});\n\n\n/**\n * @param {String} fedTaxWh the fedTaxWh to set\n */\nTax1099OID.prototype.setFedTaxWh = function(fedTaxWh) {\n  this.fedTaxWh = fedTaxWh;\n};\n\n\n/**\n * @return {String} the desc\n */\nTax1099OID.prototype.getDesc = function() {\n  return this.desc;\n};\nElement.add({name: \"DESCRIPTION\", required: true, order: 6, owner: Tax1099OID, /*type: String,*/ fcn: \"getDesc\"});\n\n\n/**\n * @param {String} desc the desc to set\n */\nTax1099OID.prototype.setDesc = function(desc) {\n  this.desc = desc;\n};\n\n\n/**\n * @return {String} the oidOnUstres\n */\nTax1099OID.prototype.getOidOnUstres = function() {\n  return this.oidOnUstres;\n};\nElement.add({name: \"OIDONUSTRES\", required: false, order: 7, owner: Tax1099OID, /*type: String,*/ fcn: \"getOidOnUstres\"});\n\n\n/**\n * @param {String} oidOnUstres the oidOnUstres to set\n */\nTax1099OID.prototype.setOidOnUstres = function(oidOnUstres) {\n  this.oidOnUstres = oidOnUstres;\n};\n\n\n/**\n * @return {String} the investExp\n */\nTax1099OID.prototype.getInvestExp = function() {\n  return this.investExp;\n};\nElement.add({name: \"INVESTEXP\", required: false, order: 8, owner: Tax1099OID, /*type: String,*/ fcn: \"getInvestExp\"});\n\n\n/**\n * @param {String} investExp the investExp to set\n */\nTax1099OID.prototype.setInvestExp = function(investExp) {\n  this.investExp = investExp;\n};\n\n\n/**\n * @return {PayerAddress} the payerAddress\n */\nTax1099OID.prototype.getPayerAddress = function() {\n  return this.payerAddress;\n};\nChildAggregate.add({required:true, order: 9, owner: Tax1099OID, /*type: PayerAddress,*/ fcn: \"getPayerAddress\"});\n\n\n/**\n * @param {PayerAddress} payerAddress the payerAddress to set\n */\nTax1099OID.prototype.setPayerAddress = function(payerAddress) {\n  this.payerAddress = payerAddress;\n};\n\n\n/**\n * @return {String} the payerId\n */\nTax1099OID.prototype.getPayerId = function() {\n  return this.payerId;\n};\nElement.add({name: \"PAYERID\", required: true, order: 10, owner: Tax1099OID, /*type: String,*/ fcn: \"getPayerId\"});\n\n\n/**\n * @param {String} payerId the payerId to set\n */\nTax1099OID.prototype.setPayerId = function(payerId) {\n  this.payerId = payerId;\n};\n\n\n/**\n * @return {RecAddress} the recAddress\n */\nTax1099OID.prototype.getRecAddress = function() {\n  return this.recAddress;\n};\nChildAggregate.add({required:true, order: 11, owner: Tax1099OID, /*type: RecAddress,*/ fcn: \"getRecAddress\"});\n\n\n/**\n * @param {RecAddress} recAddress the recAddress to set\n */\nTax1099OID.prototype.setRecAddress = function(recAddress) {\n  this.recAddress = recAddress;\n};\n\n\n/**\n * @return {String} the recId\n */\nTax1099OID.prototype.getRecId = function() {\n  return this.recId;\n};\nElement.add({name: \"RECID\", required: true, order: 12, owner: Tax1099OID, /*type: String,*/ fcn: \"getRecId\"});\n\n\n/**\n * @param {String} recId the recId to set\n */\nTax1099OID.prototype.setRecId = function(recId) {\n  this.recId = recId;\n};\n\n\n/**\n * @return {String} the recAcct\n */\nTax1099OID.prototype.getRecAcct = function() {\n  return this.recAcct;\n};\nElement.add({name: \"RECACCT\", required: true, order: 13, owner: Tax1099OID, /*type: String,*/ fcn: \"getRecAcct\"});\n\n\n/**\n * @param {String} recAcct the recAcct to set\n */\nTax1099OID.prototype.setRecAcct = function(recAcct) {\n  this.recAcct = recAcct;\n};\n\n\n\n\nmodule.exports = Tax1099OID;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\n\nvar Element = require(\"../../../meta/Element\");\n\n/**\n * @class\n */\nfunction Tax1099R () {\n\n  /**\n   * @name Tax1099R#srvrtId\n   * @type String\n   * @access private\n   */\n  this.srvrtId = null;\n\n  /**\n   * @name Tax1099R#taxYear\n   * @type String\n   * @access private\n   */\n  this.taxYear = null;\n\n  /**\n   * @name Tax1099R#grossDist\n   * @type String\n   * @access private\n   */\n  this.grossDist = null;\n\n  /**\n   * @name Tax1099R#taxAmt\n   * @type String\n   * @access private\n   */\n  this.taxAmt = null;\n\n  /**\n   * @name Tax1099R#taxAmtNd\n   * @type String\n   * @access private\n   */\n  this.taxAmtNd = null;\n\n  /**\n   * @name Tax1099R#capGain\n   * @type String\n   * @access private\n   */\n  this.capGain = null;\n\n  /**\n   * @name Tax1099R#fedTaxWh\n   * @type String\n   * @access private\n   */\n  this.fedTaxWh = null;\n\n  /**\n   * @name Tax1099R#empContins\n   * @type String\n   * @access private\n   */\n  this.empContins = null;\n\n  /**\n   * @name Tax1099R#netUnapEmp\n   * @type String\n   * @access private\n   */\n  this.netUnapEmp = null;\n\n  /**\n   * @name Tax1099R#distCode\n   * @type String\n   * @access private\n   */\n  this.distCode = null;\n\n  /**\n   * @name Tax1099R#iraSepSimp\n   * @type String\n   * @access private\n   */\n  this.iraSepSimp = null;\n\n  /**\n   * @name Tax1099R#annCtrctDist\n   * @type String\n   * @access private\n   */\n  this.annCtrctDist = null;\n\n  /**\n   * @name Tax1099R#totEmpCount\n   * @type String\n   * @access private\n   */\n  this.totEmpCount = null;\n\n  /**\n   * @name Tax1099R#payerAddress\n   * @type PayerAddress\n   * @access private\n   */\n  this.payerAddress = null;\n\n  /**\n   * @name Tax1099R#payerId\n   * @type String\n   * @access private\n   */\n  this.payerId = null;\n\n  /**\n   * @name Tax1099R#recAddress\n   * @type RecAddress\n   * @access private\n   */\n  this.recAddress = null;\n\n  /**\n   * @name Tax1099R#recId\n   * @type String\n   * @access private\n   */\n  this.recId = null;\n\n  /**\n   * @name Tax1099R#recAcct\n   * @type String\n   * @access private\n   */\n  this.recAcct = null;\n}\n\n\n\nAggregate.add(\"TAX1099R_V100\", Tax1099R);\n\n\nTax1099R.prototype.getSrvrtId = function() {\n  return this.srvrtId;\n};\nElement.add({name: \"SRVRTID\",required: true , order: 0, owner: Tax1099R, /*type: String,*/ fcn: \"getSrvrtId\"});\n\n\nTax1099R.prototype.setSrvrtId = function(/*String*/ srvrtId) {\n  this.srvrtId = srvrtId;\n};\n\n\nTax1099R.prototype.getTaxYear = function() {\n  return this.taxYear;\n};\nElement.add({name: \"TAXYEAR\", required: true, order: 1, owner: Tax1099R, /*type: String,*/ fcn: \"getTaxYear\"});\n\n\nTax1099R.prototype.setTaxYear = function(/*String*/ taxYear) {\n  this.taxYear = taxYear;\n};\n\n\n/**\n * @return {String} the grossDist\n */\nTax1099R.prototype.getGrossDist = function() {\n  return this.grossDist;\n};\nElement.add({name: \"GROSSDIST\", required: true, order: 2, owner: Tax1099R, /*type: String,*/ fcn: \"getGrossDist\"});\n\n\n/**\n * @param {String} grossDist the grossDist to set\n */\nTax1099R.prototype.setGrossDist = function(grossDist) {\n  this.grossDist = grossDist;\n};\n\n\n/**\n * @return {String} the taxAmt\n */\nTax1099R.prototype.getTaxAmt = function() {\n  return this.taxAmt;\n};\nElement.add({name: \"TAXAMT\", required: false, order: 3, owner: Tax1099R, /*type: String,*/ fcn: \"getTaxAmt\"});\n\n\n/**\n * @param {String} taxAmt the taxAmt to set\n */\nTax1099R.prototype.setTaxAmt = function(taxAmt) {\n  this.taxAmt = taxAmt;\n};\n\n\n/**\n * @return {String} the taxAmtNd\n */\nTax1099R.prototype.getTaxAmtNd = function() {\n  return this.taxAmtNd;\n};\nElement.add({name: \"TAXAMTND\", required: false, order: 4, owner: Tax1099R, /*type: String,*/ fcn: \"getTaxAmtNd\"});\n\n\n/**\n * @param {String} taxAmtNd the taxAmtNd to set\n */\nTax1099R.prototype.setTaxAmtNd = function(taxAmtNd) {\n  this.taxAmtNd = taxAmtNd;\n};\n\n\n/**\n * @return {String} the capGain\n */\nTax1099R.prototype.getCapGain = function() {\n  return this.capGain;\n};\nElement.add({name: \"CAPGAIN\", required: false, order: 5, owner: Tax1099R, /*type: String,*/ fcn: \"getCapGain\"});\n\n\n/**\n * @param {String} capGain the capGain to set\n */\nTax1099R.prototype.setCapGain = function(capGain) {\n  this.capGain = capGain;\n};\n\n\n/**\n * @return {String} the fedTaxWh\n */\nTax1099R.prototype.getFedTaxWh = function() {\n  return this.fedTaxWh;\n};\nElement.add({name: \"FEDTAXWH\", required: false, order: 6, owner: Tax1099R, /*type: String,*/ fcn: \"getFedTaxWh\"});\n\n\n/**\n * @param {String} fedTaxWh the fedTaxWh to set\n */\nTax1099R.prototype.setFedTaxWh = function(fedTaxWh) {\n  this.fedTaxWh = fedTaxWh;\n};\n\n\n/**\n * @return {String} the empContins\n */\nTax1099R.prototype.getEmpContins = function() {\n  return this.empContins;\n};\nElement.add({name: \"EMPCONTINS\", required: false, order: 7, owner: Tax1099R, /*type: String,*/ fcn: \"getEmpContins\"});\n\n\n/**\n * @param {String} empContins the empContins to set\n */\nTax1099R.prototype.setEmpContins = function(empContins) {\n  this.empContins = empContins;\n};\n\n\n/**\n * @return {String} the netUnapEmp\n */\nTax1099R.prototype.getNetUnapEmp = function() {\n  return this.netUnapEmp;\n};\nElement.add({name: \"NETUNAPEMP\", required: false, order: 8, owner: Tax1099R, /*type: String,*/ fcn: \"getNetUnapEmp\"});\n\n\n/**\n * @param {String} netUnapEmp the netUnapEmp to set\n */\nTax1099R.prototype.setNetUnapEmp = function(netUnapEmp) {\n  this.netUnapEmp = netUnapEmp;\n};\n\n\n/**\n * @return {String} the distCode\n */\nTax1099R.prototype.getDistCode = function() {\n  return this.distCode;\n};\nElement.add({name: \"DISTCODE\", required: true, order: 9, owner: Tax1099R, /*type: String,*/ fcn: \"getDistCode\"});\n\n\n/**\n * @param {String} distCode the distCode to set\n */\nTax1099R.prototype.setDistCode = function(distCode) {\n  this.distCode = distCode;\n};\n\n\n/**\n * @return {String} the iraSepSimp\n */\nTax1099R.prototype.getIraSepSimp = function() {\n  return this.iraSepSimp;\n};\nElement.add({name: \"IRASEPSIMP\", required: true, order: 10, owner: Tax1099R, /*type: String,*/ fcn: \"getIraSepSimp\"});\n\n\n/**\n * @param {String} iraSepSimp the iraSepSimp to set\n */\nTax1099R.prototype.setIraSepSimp = function(iraSepSimp) {\n  this.iraSepSimp = iraSepSimp;\n};\n\n\n/**\n * @return {String} the annCtrctDist\n */\nTax1099R.prototype.getAnnCtrctDist = function() {\n  return this.annCtrctDist;\n};\nElement.add({name: \"ANNCTRCTDIST\", required: false, order: 11, owner: Tax1099R, /*type: String,*/ fcn: \"getAnnCtrctDist\"});\n\n\n/**\n * @param {String} annCtrctDist the annCtrctDist to set\n */\nTax1099R.prototype.setAnnCtrctDist = function(annCtrctDist) {\n  this.annCtrctDist = annCtrctDist;\n};\n\n\n/**\n * @return {String} the totEmpCount\n */\nTax1099R.prototype.getTotEmpCount = function() {\n  return this.totEmpCount;\n};\nElement.add({name: \"TOTEMPCONT\", required: false, order: 12, owner: Tax1099R, /*type: String,*/ fcn: \"getTotEmpCount\"});\n\n\n/**\n * @param {String} totEmpCount the totEmpCount to set\n */\nTax1099R.prototype.setTotEmpCount = function(totEmpCount) {\n  this.totEmpCount = totEmpCount;\n};\n\n\n/**\n * @return {PayerAddress} the payerAddress\n */\nTax1099R.prototype.getPayerAddress = function() {\n  return this.payerAddress;\n};\nChildAggregate.add({required:true, order: 13, owner: Tax1099R, /*type: PayerAddress,*/ fcn: \"getPayerAddress\"});\n\n\n/**\n * @param {PayerAddress} payerAddress the payerAddress to set\n */\nTax1099R.prototype.setPayerAddress = function(payerAddress) {\n  this.payerAddress = payerAddress;\n};\n\n\n/**\n * @return {String} the payerId\n */\nTax1099R.prototype.getPayerId = function() {\n  return this.payerId;\n};\nElement.add({name: \"PAYERID\", required: true, order: 14, owner: Tax1099R, /*type: String,*/ fcn: \"getPayerId\"});\n\n\n/**\n * @param {String} payerId the payerId to set\n */\nTax1099R.prototype.setPayerId = function(payerId) {\n  this.payerId = payerId;\n};\n\n\n/**\n * @return {RecAddress} the recAddress\n */\nTax1099R.prototype.getRecAddress = function() {\n  return this.recAddress;\n};\nChildAggregate.add({required:true, order: 15, owner: Tax1099R, /*type: RecAddress,*/ fcn: \"getRecAddress\"});\n\n\n/**\n * @param {RecAddress} recAddress the recAddress to set\n */\nTax1099R.prototype.setRecAddress = function(recAddress) {\n  this.recAddress = recAddress;\n};\n\n\n/**\n * @return {String} the recId\n */\nTax1099R.prototype.getRecId = function() {\n  return this.recId;\n};\nElement.add({name: \"RECID\", required: true, order: 16, owner: Tax1099R, /*type: String,*/ fcn: \"getRecId\"});\n\n\n/**\n * @param {String} recId the recId to set\n */\nTax1099R.prototype.setRecId = function(recId) {\n  this.recId = recId;\n};\n\n\n/**\n * @return {String} the recAcct\n */\nTax1099R.prototype.getRecAcct = function() {\n  return this.recAcct;\n};\nElement.add({name: \"RECACCT\", required: true, order: 17, owner: Tax1099R, /*type: String,*/ fcn: \"getRecAcct\"});\n\n\n/**\n * @param {String} recAcct the recAcct to set\n */\nTax1099R.prototype.setRecAcct = function(recAcct) {\n  this.recAcct = recAcct;\n};\n\n\n\n\nmodule.exports = Tax1099R;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar T1099Request = require(\"../common/T1099Request\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar Element = require(\"../../../meta/Element\");\n\n/**\n * @class\n * @augments T1099Request\n */\nfunction Tax1099Request () {\n\n  /**\n   * @name Tax1099Request#taxYear\n   * @type String\n   * @access private\n   */\n  this.taxYear = null;\n}\n\ninherit(Tax1099Request, \"extends\", T1099Request);\n\n\nAggregate.add(\"TAX1099RQ\", Tax1099Request);\n\n\nTax1099Request.prototype.getTaxYear = function() {\n  return this.taxYear;\n};\nElement.add({name: \"TAXYEAR\", required: true, order: 0, owner: Tax1099Request, /*type: String,*/ fcn: \"getTaxYear\"});\n\n\nTax1099Request.prototype.setTaxYear = function(/*String*/ taxYear) {\n  this.taxYear = taxYear;\n};\n\n\n\n\nmodule.exports = Tax1099Request;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar MessageSetType = require(\"../MessageSetType\");\nvar RequestMessageSet = require(\"../RequestMessageSet\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\n\n/**\n * @class\n * @augments RequestMessageSet\n */\nfunction Tax1099RequestMessageSet () {\n\n  /**\n   * @name Tax1099RequestMessageSet#taxRequestTransaction\n   * @type Tax1099RequestTransaction\n   * @access private\n   */\n  this.taxRequestTransaction = null;\n}\n\ninherit(Tax1099RequestMessageSet, \"extends\", RequestMessageSet);\n\n\nAggregate.add(\"TAX1099MSGSRQV1\", Tax1099RequestMessageSet);\n\n\nTax1099RequestMessageSet.prototype.getType = function() {\n  return MessageSetType.tax1099;\n};\n\n\n/**\n * The statement request.\n *\n * @return {Tax1099RequestTransaction} The statement request.\n */\nTax1099RequestMessageSet.prototype.getTaxRequestTransaction = function() {\n  return this.taxRequestTransaction;\n};\nChildAggregate.add({order: 0, owner: Tax1099RequestMessageSet, /*type: Tax1099RequestTransaction,*/ fcn: \"getTaxRequestTransaction\"});\n\n\n/**\n * The statement request.\n *\n * @param {Tax1099RequestTransaction} taxRequestTransaction The statement request.\n */\nTax1099RequestMessageSet.prototype.setTaxRequestTransaction = function(taxRequestTransaction) {\n  this.taxRequestTransaction = taxRequestTransaction;\n};\n\n\n// Inherited.\nTax1099RequestMessageSet.prototype.getRequestMessages = function() {\n  var requestMessages = [];\n  if (this.getTaxRequestTransaction() !== null) {\n    requestMessages.push(this.getTaxRequestTransaction());\n  }\n  return requestMessages;\n};\n\n\n\n\nmodule.exports = Tax1099RequestMessageSet;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar TransactionWrappedRequestMessage = require(\"../TransactionWrappedRequestMessage\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Tax1099Request = require(\"./Tax1099Request\");\n\n/**\n * @class\n * @augments TransactionWrappedRequestMessage\n */\nfunction Tax1099RequestTransaction () {\n\n  /**\n   * @name Tax1099RequestTransaction#tax1099Request\n   * @type Tax1099Request\n   * @access private\n   */\n  this.tax1099Request = null;\n}\n\ninherit(Tax1099RequestTransaction, \"extends\", new TransactionWrappedRequestMessage(Tax1099Request));\n\n\nAggregate.add(\"TAX1099TRNRQ\", Tax1099RequestTransaction);\n\n\n/**\n * The tax1099Request.\n *\n * @return {Tax1099Request} The tax1099Request.\n */\nTax1099RequestTransaction.prototype.getTax1099Request = function() {\n  return this.tax1099Request;\n};\nChildAggregate.add({required: true, order: 30, owner: Tax1099RequestTransaction, /*type: Tax1099Request,*/ fcn: \"getTax1099Request\"});\n\n\n/**\n * The tax1099Request.\n *\n * @param {Tax1099Request} tax1099Request The message.\n *\n */\nTax1099RequestTransaction.prototype.setTax1099Request = function(tax1099Request) {\n  this.tax1099Request = tax1099Request;\n};\n\n\n// Inherited.\nTax1099RequestTransaction.prototype.setWrappedMessage = function(/*Tax1099Request*/ tax1099Request) {\n  this.setTax1099Request(tax1099Request);\n};\n\n\n\n\nmodule.exports = Tax1099RequestTransaction;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar T1099Response = require(\"../common/T1099Response\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\n\n/**\n * @class\n * @augments T1099Response\n */\nfunction Tax1099Response () {\n\n  /**\n   * @name Tax1099Response#tax1099div\n   * @type Tax1099DIV\n   * @access private\n   */\n  this.tax1099div = null;\n\n  /**\n   * @name Tax1099Response#lstTax1099DIV\n   * @type List<Tax1099DIV>\n   * @access private\n   */\n  this.lstTax1099DIV = null;\n\n  /**\n   * @name Tax1099Response#lstTax1099INT\n   * @type List<Tax1099INT>\n   * @access private\n   */\n  this.lstTax1099INT = null;\n\n  /**\n   * @name Tax1099Response#lstTax1099R\n   * @type List<Tax1099R>\n   * @access private\n   */\n  this.lstTax1099R = null;\n\n  /**\n   * @name Tax1099Response#lstTax1099B\n   * @type List<Tax1099B>\n   * @access private\n   */\n  this.lstTax1099B = null;\n\n  /**\n   * @name Tax1099Response#lstTax1099MISC\n   * @type List<Tax1099MISC>\n   * @access private\n   */\n  this.lstTax1099MISC = null;\n\n  /**\n   * @name Tax1099Response#lstTax1099OID\n   * @type List<Tax1099OID>\n   * @access private\n   */\n  this.lstTax1099OID = null;\n}\n\ninherit(Tax1099Response, \"extends\", T1099Response);\n\n\nAggregate.add(\"TAX1099RS\", Tax1099Response);\n\n\n/**\n * @return {Tax1099DIV[]} the lstTax1099DIV\n */\nTax1099Response.prototype.getLstTax1099DIV = function() {\n  return this.lstTax1099DIV;\n};\nChildAggregate.add({required: false, order: 0, owner: Tax1099Response, /*type: Tax1099DIV[],*/ fcn: \"getLstTax1099DIV\"});\n\n\n/**\n * @param {Tax1099DIV[]} lstTax1099DIV\n *            the lstTax1099DIV to set\n */\nTax1099Response.prototype.setLstTax1099DIV = function(lstTax1099DIV) {\n  this.lstTax1099DIV = lstTax1099DIV;\n};\n\n\nTax1099Response.prototype.getResponseMessageName = function() {\n  return \"1099 Tax details\";\n};\n\n\n/**\n * @return {Tax1099INT[]} the lstTax1099INT\n */\nTax1099Response.prototype.getLstTax1099INT = function() {\n  return this.lstTax1099INT;\n};\nChildAggregate.add({required: false, order: 1, owner: Tax1099Response, /*type: Tax1099INT[],*/ fcn: \"getLstTax1099INT\"});\n\n\n/**\n * @param {Tax1099INT[]} lstTax1099INT the lstTax1099INT to set\n */\nTax1099Response.prototype.setLstTax1099INT = function(lstTax1099INT) {\n  this.lstTax1099INT = lstTax1099INT;\n};\n\n\n/**\n * @return {Tax1099R[]} the lstTax1099R\n */\nTax1099Response.prototype.getLstTax1099R = function() {\n  return this.lstTax1099R;\n};\nChildAggregate.add({required: false, order: 2, owner: Tax1099Response, /*type: Tax1099R[],*/ fcn: \"getLstTax1099R\"});\n\n\n/**\n * @param {Tax1099R[]} lstTax1099R the lstTax1099R to set\n */\nTax1099Response.prototype.setLstTax1099R = function(lstTax1099R) {\n  this.lstTax1099R = lstTax1099R;\n};\n\n\n/**\n * @return {Tax1099B[]} the lstTax1099B\n */\nTax1099Response.prototype.getLstTax1099B = function() {\n  return this.lstTax1099B;\n};\nChildAggregate.add({required: false, order: 3, owner: Tax1099Response, /*type: Tax1099B[],*/ fcn: \"getLstTax1099B\"});\n\n\n/**\n * @param {Tax1099B[]} lstTax1099B the lstTax1099B to set\n */\nTax1099Response.prototype.setLstTax1099B = function(lstTax1099B) {\n  this.lstTax1099B = lstTax1099B;\n};\n\n\n/**\n * @return {Tax1099MISC[]} the lstTax1099MISC\n */\nTax1099Response.prototype.getLstTax1099MISC = function() {\n  return this.lstTax1099MISC;\n};\nChildAggregate.add({required: false, order: 4, owner: Tax1099Response, /*type: Tax1099MISC[],*/ fcn: \"getLstTax1099MISC\"});\n\n\n/**\n * @param {Tax1099MISC[]} lstTax1099MISC the lstTax1099MISC to set\n */\nTax1099Response.prototype.setLstTax1099MISC = function(lstTax1099MISC) {\n  this.lstTax1099MISC = lstTax1099MISC;\n};\n\n\n/**\n * @return {Tax1099OID[]} the lstTax1099OID\n */\nTax1099Response.prototype.getLstTax1099OID = function() {\n  return this.lstTax1099OID;\n};\nChildAggregate.add({required: false, order:5, owner: Tax1099Response, /*type: Tax1099OID[],*/ fcn: \"getLstTax1099OID\"});\n\n\n/**\n * @param {Tax1099OID[]} lstTax1099OID the lstTax1099OID to set\n */\nTax1099Response.prototype.setLstTax1099OID = function(lstTax1099OID) {\n  this.lstTax1099OID = lstTax1099OID;\n};\n\n\n\n\nmodule.exports = Tax1099Response;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar MessageSetType = require(\"../MessageSetType\");\nvar ResponseMessageSet = require(\"../ResponseMessageSet\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\n\n/**\n * @class\n * @augments ResponseMessageSet\n */\nfunction Tax1099ResponseMessageSet () {\n\n  /**\n   * @name Tax1099ResponseMessageSet#taxResponseTransaction\n   * @type List<Tax1099ResponseTransaction>\n   * @access private\n   */\n  this.taxResponseTransaction = null;\n}\n\ninherit(Tax1099ResponseMessageSet, \"extends\", ResponseMessageSet);\n\n\nAggregate.add(\"TAX1099MSGSRSV1\", Tax1099ResponseMessageSet);\n\n\nTax1099ResponseMessageSet.prototype.getType = function() {\n  return MessageSetType.tax1099;\n};\n\n\n/**\n * The taxResponseTransaction list.\n *\n * Most OFX files have a single statement response, except MT2OFX\n * which outputs OFX with multiple statement responses\n * in a single banking response message set.\n *\n * @return {Tax1099ResponseTransaction[]} The taxResponseTransaction list.\n */\nTax1099ResponseMessageSet.prototype.getTaxResponseTransaction = function() {\n  return this.taxResponseTransaction;\n};\nChildAggregate.add({order: 0, owner: Tax1099ResponseMessageSet, /*type: Tax1099ResponseTransaction[],*/ fcn: \"getTaxResponseTransaction\"});\n\n\n/**\n * The taxResponseTransaction.\n *\n * @param {Tax1099ResponseTransaction[]} taxResponseTransaction The statement responses.\n */\nTax1099ResponseMessageSet.prototype.setTaxResponseTransaction = function(taxResponseTransaction) {\n  this.taxResponseTransaction = taxResponseTransaction;\n};\n\n\n// Inherited.\nTax1099ResponseMessageSet.prototype.getResponseMessages = function() {\n  return this.taxResponseTransaction;\n};\n\n\n/**\n * The first statement response.\n *\n * @return {Tax1099ResponseTransaction} the first bank statement response.\n * @deprecated Use getStatementResponses() because sometimes there are multiple responses\n */\nTax1099ResponseMessageSet.prototype.getStatementResponse = function() {\n  return this.taxResponseTransaction === null || this.taxResponseTransaction.isEmpty() ? null : this.taxResponseTransaction.get(0);\n};\n\n\nTax1099ResponseMessageSet.prototype.setTaxResponseTransaction = function(/*Tax1099ResponseTransaction*/ taxResponseTransaction) {\n  this.taxResponseTransaction = taxResponseTransaction;\n};\n\n\n\n\nmodule.exports = Tax1099ResponseMessageSet;\n","/*\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nvar inherit = require(\"../../../util/inherit\");\n\nvar TransactionWrappedResponseMessage = require(\"../TransactionWrappedResponseMessage\");\nvar Aggregate = require(\"../../../meta/Aggregate\");\nvar ChildAggregate = require(\"../../../meta/ChildAggregate\");\nvar Tax1099Response = require(\"./Tax1099Response\");\n\n/**\n * @class\n * @augments TransactionWrappedResponseMessage\n */\nfunction Tax1099ResponseTransaction () {\n\n  /**\n   * @name Tax1099ResponseTransaction#tax1099Response\n   * @type Tax1099Response\n   * @access private\n   */\n  this.tax1099Response = null;\n}\n\ninherit(Tax1099ResponseTransaction, \"extends\", new TransactionWrappedResponseMessage(Tax1099Response));\n\n\nAggregate.add(\"TAX1099TRNRS\", Tax1099ResponseTransaction);\n\n\n/**\n * The tax1099Response.\n *\n * @return {Tax1099Response} The tax1099Response.\n */\nTax1099ResponseTransaction.prototype.getTax1099Response = function() {\n  return this.tax1099Response;\n};\nChildAggregate.add({required:false, order: 2, owner: Tax1099ResponseTransaction, /*type: Tax1099Response,*/ fcn: \"getTax1099Response\"});\n\n\n/**\n * The tax1099Response.\n *\n * @param {Tax1099Response} tax1099Response The message.\n */\nTax1099ResponseTransaction.prototype.setTax1099Response = function(tax1099Response) {\n  this.tax1099Response = tax1099Response;\n};\n\n\n// Inherited.\nTax1099ResponseTransaction.prototype.getWrappedMessage = function() {\n  return this.getTax1099Response();\n};\n\n\n\n\nmodule.exports = Tax1099ResponseTransaction;\n","\"use strict\";\n\nmodule.exports = {\n  ExtDBInfo: require(\"./ExtDBInfo\"),\n  PayerAddress: require(\"./PayerAddress\"),\n  ProcDet: require(\"./ProcDet\"),\n  RecAddress: require(\"./RecAddress\"),\n  Tax1099B: require(\"./Tax1099B\"),\n  Tax1099DIV: require(\"./Tax1099DIV\"),\n  Tax1099INT: require(\"./Tax1099INT\"),\n  Tax1099MISC: require(\"./Tax1099MISC\"),\n  Tax1099OID: require(\"./Tax1099OID\"),\n  Tax1099R: require(\"./Tax1099R\"),\n  Tax1099Request: require(\"./Tax1099Request\"),\n  Tax1099RequestMessageSet: require(\"./Tax1099RequestMessageSet\"),\n  Tax1099RequestTransaction: require(\"./Tax1099RequestTransaction\"),\n  Tax1099Response: require(\"./Tax1099Response\"),\n  Tax1099ResponseMessageSet: require(\"./Tax1099ResponseMessageSet\"),\n  Tax1099ResponseTransaction: require(\"./Tax1099ResponseTransaction\"),\n};\n","\"use strict\";\n\nmodule.exports = {\n  data: require(\"./data/index\"),\n};\n","/*\n * Copyright 2008 Web Cohesion\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nmodule.exports = function() {};\n\n//package net.sf.ofx4j.meta;\n//\n//import java.lang.annotation.*;\n//\n///**\n// * Annotation for a method that returns an OFX aggregate.\n// *\n// * @author Ryan Heaton\n// */\n//@Target ( ElementType.TYPE )\n//@Retention ( RetentionPolicy.RUNTIME )\n//public @interface Aggregate {\n//\n//  /**\n//   * The name of the aggregate.\n//   *\n//   * @return The name of the aggregate.\n//   */\n//  String value() default \"#NOT_SET#\";\n//}\n","/*\n * Copyright 2008 Web Cohesion\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nmodule.exports = function() {};\n\n//package net.sf.ofx4j.meta;\n//\n//import java.lang.annotation.Retention;\n//import java.lang.annotation.RetentionPolicy;\n//import java.lang.annotation.Target;\n//import java.lang.annotation.ElementType;\n//\n///**\n// * Marks a method as providing a child aggregate (or set of them to a top-level aggregate).\n// *\n// * @author Ryan Heaton\n// */\n//@Target ( ElementType.METHOD )\n//@Retention ( RetentionPolicy.RUNTIME)\n//public @interface ChildAggregate {\n//\n//  /**\n//   * Used to specify the name of the aggregate in its context as a child aggregate.\n//   *\n//   * @return Used to specify the name of the aggregate in its context as a child aggregate.\n//   */\n//  String name() default \"##not_specified##\";\n//\n//  /**\n//   * Whether this aggregate is required.\n//   *\n//   * @return Whether this aggregate is required.\n//   */\n//  boolean required() default false;\n//\n//  /**\n//   * The order this child aggregate comes in its parent aggregate.\n//   *\n//   * @return The order this child aggregate comes in its parent aggregate.\n//   */\n//  int order();\n//\n//}","/*\n * Copyright 2008 Web Cohesion\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nmodule.exports = function() {};\n\n//'use strict';\n//\n//\n///**\n// * An OFX element, applied to a javabean property.\n// *\n// * @typedef {Object} ElementParams\n// * @property {string} name - The name of the element.\n// * @property {bool} [required=false] - Whether this element is required.\n// * @property {int} order - The order this element comes in its parent aggregate.\n// */\n//function Element() {\n//  \n//}\n//public @interface Element {\n//\n//  /**\n//   * The name of the element.\n//   *\n//   * @return The name of the element.\n//   */\n//  String name();\n//\n//  /**\n//   * Whether this element is required.\n//   *\n//   * @return Whether this element is required.\n//   */\n//  boolean required() default false;\n//\n//  /**\n//   * The order this element comes in its parent aggregate.\n//   *\n//   * @return The order this element comes in its parent aggregate.\n//   */\n//  int order();\n//}\n","/*\n * Copyright 2008 Web Cohesion\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nmodule.exports = function() {};\n\n//package net.sf.ofx4j.meta;\n//\n//import java.lang.annotation.*;\n//\n///**\n// * An OFX element, applied to a javabean property.\n// *\n// * @author Ryan Heaton\n// */\n//@Target ( ElementType.METHOD )\n//@Retention ( RetentionPolicy.RUNTIME)\n//public @interface Header {\n//\n//  /**\n//   * The name of the element.\n//   *\n//   * @return The name of the element.\n//   */\n//  String name();\n//\n//}","\"use strict\";\n\nmodule.exports = {\n  Aggregate: require('./Aggregate'),\n  ChildAggregate: require('./ChildAggregate'),\n  Element: require('./Element'),\n  Header: require('./Header'),\n};\n","\"use strict\";\n\nfunction inherit(child, type, parent) {\n  switch(type) {\n    case 'extends':\n      child.prototype = Object.create(parent);\n      child.prototype.constructor = child;\n      break;\n      \n    case 'implements':\n      break;\n      \n    default:\n      throw new Error(\"unknown inheritance type\");\n  }\n}\n\nmodule.exports = inherit;\n"]}