(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./src/index.js":[function(require,module,exports){
"use strict";

module.exports = {
  client: require("./client/index"),
  domain: require("./domain/index"),
  io: require("./io/index"),
  meta: require("./meta/index"),
};

},{"./client/index":"/Users/aolson/Developer/ofx4js/src/client/index.js","./domain/index":"/Users/aolson/Developer/ofx4js/src/domain/index.js","./io/index":"/Users/aolson/Developer/ofx4js/src/io/index.js","./meta/index":"/Users/aolson/Developer/ofx4js/src/meta/index.js"}],"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/buffer/index.js":[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('is-array')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192 // not used by this implementation

var kMaxLength = 0x3fffffff
var rootParent = {}

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Note:
 *
 * - Implementation must support adding new properties to `Uint8Array` instances.
 *   Firefox 4-29 lacked support, fixed in Firefox 30+.
 *   See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *  - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *  - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *    incorrect length in some situations.
 *
 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they will
 * get the Object implementation, which is slower but will work correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = (function () {
  try {
    var buf = new ArrayBuffer(0)
    var arr = new Uint8Array(buf)
    arr.foo = function () { return 42 }
    return 42 === arr.foo() && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        new Uint8Array(1).subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
})()

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (subject, encoding, noZero) {
  if (!(this instanceof Buffer))
    return new Buffer(subject, encoding, noZero)

  var type = typeof subject

  // Find the length
  var length
  if (type === 'number')
    length = subject > 0 ? subject >>> 0 : 0
  else if (type === 'string') {
    length = Buffer.byteLength(subject, encoding)
  } else if (type === 'object' && subject !== null) { // assume object is array-like
    if (subject.type === 'Buffer' && isArray(subject.data))
      subject = subject.data
    length = +subject.length > 0 ? Math.floor(+subject.length) : 0
  } else
    throw new TypeError('must start with number, buffer, array or string')

  if (length > kMaxLength)
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
      'size: 0x' + kMaxLength.toString(16) + ' bytes')

  var buf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Preferred: Return an augmented `Uint8Array` instance for best performance
    buf = Buffer._augment(new Uint8Array(length))
  } else {
    // Fallback: Return THIS instance of Buffer (created by `new`)
    buf = this
    buf.length = length
    buf._isBuffer = true
  }

  var i
  if (Buffer.TYPED_ARRAY_SUPPORT && typeof subject.byteLength === 'number') {
    // Speed optimization -- use set if we're copying from a typed array
    buf._set(subject)
  } else if (isArrayish(subject)) {
    // Treat array-ish objects as a byte array
    if (Buffer.isBuffer(subject)) {
      for (i = 0; i < length; i++)
        buf[i] = subject.readUInt8(i)
    } else {
      for (i = 0; i < length; i++)
        buf[i] = ((subject[i] % 256) + 256) % 256
    }
  } else if (type === 'string') {
    buf.write(subject, 0, encoding)
  } else if (type === 'number' && !Buffer.TYPED_ARRAY_SUPPORT && !noZero) {
    for (i = 0; i < length; i++) {
      buf[i] = 0
    }
  }

  if (length > 0 && length <= Buffer.poolSize)
    buf.parent = rootParent

  return buf
}

function SlowBuffer(subject, encoding, noZero) {
  if (!(this instanceof SlowBuffer))
    return new SlowBuffer(subject, encoding, noZero)

  var buf = new Buffer(subject, encoding, noZero)
  delete buf.parent
  return buf
}

Buffer.isBuffer = function (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b))
    throw new TypeError('Arguments must be Buffers')

  var x = a.length
  var y = b.length
  for (var i = 0, len = Math.min(x, y); i < len && a[i] === b[i]; i++) {}
  if (i !== len) {
    x = a[i]
    y = b[i]
  }
  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function (list, totalLength) {
  if (!isArray(list)) throw new TypeError('Usage: Buffer.concat(list[, length])')

  if (list.length === 0) {
    return new Buffer(0)
  } else if (list.length === 1) {
    return list[0]
  }

  var i
  if (totalLength === undefined) {
    totalLength = 0
    for (i = 0; i < list.length; i++) {
      totalLength += list[i].length
    }
  }

  var buf = new Buffer(totalLength)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

Buffer.byteLength = function (str, encoding) {
  var ret
  str = str + ''
  switch (encoding || 'utf8') {
    case 'ascii':
    case 'binary':
    case 'raw':
      ret = str.length
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = str.length * 2
      break
    case 'hex':
      ret = str.length >>> 1
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8ToBytes(str).length
      break
    case 'base64':
      ret = base64ToBytes(str).length
      break
    default:
      ret = str.length
  }
  return ret
}

// pre-set for values that may exist in the future
Buffer.prototype.length = undefined
Buffer.prototype.parent = undefined

// toString(encoding, start=0, end=buffer.length)
Buffer.prototype.toString = function (encoding, start, end) {
  var loweredCase = false

  start = start >>> 0
  end = end === undefined || end === Infinity ? this.length : end >>> 0

  if (!encoding) encoding = 'utf8'
  if (start < 0) start = 0
  if (end > this.length) end = this.length
  if (end <= start) return ''

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'binary':
        return binarySlice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase)
          throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.equals = function (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max)
      str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  return Buffer.compare(this, b)
}

// `get` will be removed in Node 0.13+
Buffer.prototype.get = function (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` will be removed in Node 0.13+
Buffer.prototype.set = function (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var byte = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(byte)) throw new Error('Invalid hex string')
    buf[offset + i] = byte
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  var charsWritten = blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
  return charsWritten
}

function asciiWrite (buf, string, offset, length) {
  var charsWritten = blitBuffer(asciiToBytes(string), buf, offset, length)
  return charsWritten
}

function binaryWrite (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  var charsWritten = blitBuffer(base64ToBytes(string), buf, offset, length)
  return charsWritten
}

function utf16leWrite (buf, string, offset, length) {
  var charsWritten = blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length, 2)
  return charsWritten
}

Buffer.prototype.write = function (string, offset, length, encoding) {
  // Support both (string, offset, length, encoding)
  // and the legacy (string, encoding, offset, length)
  if (isFinite(offset)) {
    if (!isFinite(length)) {
      encoding = length
      length = undefined
    }
  } else {  // legacy
    var swap = encoding
    encoding = offset
    offset = length
    length = swap
  }

  offset = Number(offset) || 0

  if (length < 0 || offset < 0 || offset > this.length)
    throw new RangeError('attempt to write outside buffer bounds');

  var remaining = this.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }
  encoding = String(encoding || 'utf8').toLowerCase()

  var ret
  switch (encoding) {
    case 'hex':
      ret = hexWrite(this, string, offset, length)
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8Write(this, string, offset, length)
      break
    case 'ascii':
      ret = asciiWrite(this, string, offset, length)
      break
    case 'binary':
      ret = binaryWrite(this, string, offset, length)
      break
    case 'base64':
      ret = base64Write(this, string, offset, length)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = utf16leWrite(this, string, offset, length)
      break
    default:
      throw new TypeError('Unknown encoding: ' + encoding)
  }
  return ret
}

Buffer.prototype.toJSON = function () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  var res = ''
  var tmp = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    if (buf[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
      tmp = ''
    } else {
      tmp += '%' + buf[i].toString(16)
    }
  }

  return res + decodeUtf8Char(tmp)
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function binarySlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len;
    if (start < 0)
      start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0)
      end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start)
    end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = Buffer._augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined, true)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
  }

  if (newBuf.length)
    newBuf.parent = this.parent || this

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0)
    throw new RangeError('offset is not uint')
  if (offset + ext > length)
    throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert)
    checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100))
    val += this[offset + i] * mul

  return val
}

Buffer.prototype.readUIntBE = function (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert)
    checkOffset(offset, byteLength, this.length)

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100))
    val += this[offset + --byteLength] * mul;

  return val
}

Buffer.prototype.readUInt8 = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
      ((this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      this[offset + 3])
}

Buffer.prototype.readIntLE = function (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert)
    checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100))
    val += this[offset + i] * mul
  mul *= 0x80

  if (val >= mul)
    val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert)
    checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100))
    val += this[offset + --i] * mul
  mul *= 0x80

  if (val >= mul)
    val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80))
    return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)

  return (this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16) |
      (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
      (this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      (this[offset + 3])
}

Buffer.prototype.readFloatLE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
}

Buffer.prototype.writeUIntLE = function (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert)
    checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100))
    this[offset + i] = (value / mul) >>> 0 & 0xFF

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert)
    checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100))
    this[offset + i] = (value / mul) >>> 0 & 0xFF

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = value
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
  } else objectWriteUInt16(this, value, offset, true)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = value
  } else objectWriteUInt16(this, value, offset, false)
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = value
  } else objectWriteUInt32(this, value, offset, true)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = value
  } else objectWriteUInt32(this, value, offset, false)
  return offset + 4
}

Buffer.prototype.writeIntLE = function (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkInt(this,
             value,
             offset,
             byteLength,
             Math.pow(2, 8 * byteLength - 1) - 1,
             -Math.pow(2, 8 * byteLength - 1))
  }

  var i = 0
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100))
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkInt(this,
             value,
             offset,
             byteLength,
             Math.pow(2, 8 * byteLength - 1) - 1,
             -Math.pow(2, 8 * byteLength - 1))
  }

  var i = byteLength - 1
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100))
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = value
  return offset + 1
}

Buffer.prototype.writeInt16LE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
  } else objectWriteUInt16(this, value, offset, true)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = value
  } else objectWriteUInt16(this, value, offset, false)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else objectWriteUInt32(this, value, offset, true)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = value
  } else objectWriteUInt32(this, value, offset, false)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
  if (offset < 0) throw new RangeError('index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert)
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert)
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function (target, target_start, start, end) {
  var source = this

  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (target_start >= target.length) target_start = target.length
  if (!target_start) target_start = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || source.length === 0) return 0

  // Fatal error conditions
  if (target_start < 0)
    throw new RangeError('targetStart out of bounds')
  if (start < 0 || start >= source.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length)
    end = this.length
  if (target.length - target_start < end - start)
    end = target.length - target_start + start

  var len = end - start

  if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < len; i++) {
      target[i + target_start] = this[i + start]
    }
  } else {
    target._set(this.subarray(start, start + len), target_start)
  }

  return len
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (end < start) throw new RangeError('end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

  var i
  if (typeof value === 'number') {
    for (i = start; i < end; i++) {
      this[i] = value
    }
  } else {
    var bytes = utf8ToBytes(value.toString())
    var len = bytes.length
    for (i = start; i < end; i++) {
      this[i] = bytes[i % len]
    }
  }

  return this
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function () {
  if (typeof Uint8Array !== 'undefined') {
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1) {
        buf[i] = this[i]
      }
      return buf.buffer
    }
  } else {
    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

var BP = Buffer.prototype

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function (arr) {
  arr.constructor = Buffer
  arr._isBuffer = true

  // save reference to original Uint8Array get/set methods before overwriting
  arr._get = arr.get
  arr._set = arr.set

  // deprecated, will be removed in node 0.13+
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.equals = BP.equals
  arr.compare = BP.compare
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUIntLE = BP.readUIntLE
  arr.readUIntBE = BP.readUIntBE
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readIntLE = BP.readIntLE
  arr.readIntBE = BP.readIntBE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUIntLE = BP.writeUIntLE
  arr.writeUIntBE = BP.writeUIntBE
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeIntLE = BP.writeIntLE
  arr.writeIntBE = BP.writeIntBE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

var INVALID_BASE64_RE = /[^+\/0-9A-z\-]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // replace url-safe space and slash
  str = str.replace(/-/g, '+').replace(/_/g, '/')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function isArrayish (subject) {
  return isArray(subject) || Buffer.isBuffer(subject) ||
      subject && typeof subject === 'object' &&
      typeof subject.length === 'number'
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes(string, units) {
  var codePoint, length = string.length
  var leadSurrogate = null
  units = units || Infinity
  var bytes = []
  var i = 0

  for (; i<length; i++) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {

      // last char was a lead
      if (leadSurrogate) {

        // 2 leads in a row
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          leadSurrogate = codePoint
          continue
        }

        // valid surrogate pair
        else {
          codePoint = leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00 | 0x10000
          leadSurrogate = null
        }
      }

      // no lead yet
      else {

        // unexpected trail
        if (codePoint > 0xDBFF) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // unpaired lead
        else if (i + 1 === length) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        else {
          leadSurrogate = codePoint
          continue
        }
      }
    }

    // valid bmp char, but last char was a lead
    else if (leadSurrogate) {
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
      leadSurrogate = null
    }

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    }
    else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      );
    }
    else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      );
    }
    else if (codePoint < 0x200000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      );
    }
    else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {

    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length, unitSize) {
  if (unitSize) length -= length % unitSize;
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length))
      break
    dst[i + offset] = src[i]
  }
  return i
}

function decodeUtf8Char (str) {
  try {
    return decodeURIComponent(str)
  } catch (err) {
    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
  }
}

},{"base64-js":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/buffer/node_modules/base64-js/lib/b64.js","ieee754":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/buffer/node_modules/ieee754/index.js","is-array":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/buffer/node_modules/is-array/index.js"}],"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/buffer/node_modules/base64-js/lib/b64.js":[function(require,module,exports){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS)
			return 62 // '+'
		if (code === SLASH)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	exports.toByteArray = b64ToByteArray
	exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

},{}],"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/buffer/node_modules/ieee754/index.js":[function(require,module,exports){
exports.read = function(buffer, offset, isLE, mLen, nBytes) {
  var e, m,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      nBits = -7,
      i = isLE ? (nBytes - 1) : 0,
      d = isLE ? -1 : 1,
      s = buffer[offset + i];

  i += d;

  e = s & ((1 << (-nBits)) - 1);
  s >>= (-nBits);
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);

  m = e & ((1 << (-nBits)) - 1);
  e >>= (-nBits);
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity);
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
      i = isLE ? 0 : (nBytes - 1),
      d = isLE ? 1 : -1,
      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);

  e = (e << mLen) | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);

  buffer[offset + i - d] |= s * 128;
};

},{}],"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/buffer/node_modules/is-array/index.js":[function(require,module,exports){

/**
 * isArray
 */

var isArray = Array.isArray;

/**
 * toString
 */

var str = Object.prototype.toString;

/**
 * Whether or not the given `val`
 * is an array.
 *
 * example:
 *
 *        isArray([]);
 *        // > true
 *        isArray(arguments);
 *        // > false
 *        isArray('');
 *        // > false
 *
 * @param {mixed} val
 * @return {bool}
 */

module.exports = isArray || function (val) {
  return !! val && '[object Array]' == str.call(val);
};

},{}],"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/events/events.js":[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        len = arguments.length;
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    len = arguments.length;
    args = new Array(len - 1);
    for (i = 1; i < len; i++)
      args[i - 1] = arguments[i];

    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    var m;
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  var ret;
  if (!emitter._events || !emitter._events[type])
    ret = 0;
  else if (isFunction(emitter._events[type]))
    ret = 1;
  else
    ret = emitter._events[type].length;
  return ret;
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/inherits/inherits_browser.js":[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/isarray/index.js":[function(require,module,exports){
module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

},{}],"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/process/browser.js":[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canMutationObserver = typeof window !== 'undefined'
    && window.MutationObserver;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    var queue = [];

    if (canMutationObserver) {
        var hiddenDiv = document.createElement("div");
        var observer = new MutationObserver(function () {
            var queueList = queue.slice();
            queue.length = 0;
            queueList.forEach(function (fn) {
                fn();
            });
        });

        observer.observe(hiddenDiv, { attributes: true });

        return function nextTick(fn) {
            if (!queue.length) {
                hiddenDiv.setAttribute('yes', 'no');
            }
            queue.push(fn);
        };
    }

    if (canPost) {
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/readable-stream/duplex.js":[function(require,module,exports){
module.exports = require("./lib/_stream_duplex.js")

},{"./lib/_stream_duplex.js":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/readable-stream/lib/_stream_duplex.js"}],"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/readable-stream/lib/_stream_duplex.js":[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

module.exports = Duplex;

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}
/*</replacement>*/


/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

forEach(objectKeys(Writable.prototype), function(method) {
  if (!Duplex.prototype[method])
    Duplex.prototype[method] = Writable.prototype[method];
});

function Duplex(options) {
  if (!(this instanceof Duplex))
    return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false)
    this.readable = false;

  if (options && options.writable === false)
    this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false)
    this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended)
    return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  process.nextTick(this.end.bind(this));
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

}).call(this,require('_process'))
},{"./_stream_readable":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/readable-stream/lib/_stream_readable.js","./_stream_writable":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/readable-stream/lib/_stream_writable.js","_process":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/process/browser.js","core-util-is":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/readable-stream/node_modules/core-util-is/lib/util.js","inherits":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/readable-stream/lib/_stream_passthrough.js":[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough))
    return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function(chunk, encoding, cb) {
  cb(null, chunk);
};

},{"./_stream_transform":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/readable-stream/lib/_stream_transform.js","core-util-is":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/readable-stream/node_modules/core-util-is/lib/util.js","inherits":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/readable-stream/lib/_stream_readable.js":[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/


/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Readable.ReadableState = ReadableState;

var EE = require('events').EventEmitter;

/*<replacement>*/
if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

var Stream = require('stream');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var StringDecoder;

util.inherits(Readable, Stream);

function ReadableState(options, stream) {
  options = options || {};

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.buffer = [];
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = false;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // In streams that never have any data, and do push(null) right away,
  // the consumer can miss the 'end' event if they do some I/O before
  // consuming the stream.  So, we don't emit('end') until some reading
  // happens.
  this.calledRead = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, becuase any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;


  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder)
      StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  if (!(this instanceof Readable))
    return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
  var state = this._readableState;

  if (typeof chunk === 'string' && !state.objectMode) {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = new Buffer(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (chunk === null || chunk === undefined) {
    state.reading = false;
    if (!state.ended)
      onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var e = new Error('stream.unshift() after end event');
      stream.emit('error', e);
    } else {
      if (state.decoder && !addToFront && !encoding)
        chunk = state.decoder.write(chunk);

      // update the buffer info.
      state.length += state.objectMode ? 1 : chunk.length;
      if (addToFront) {
        state.buffer.unshift(chunk);
      } else {
        state.reading = false;
        state.buffer.push(chunk);
      }

      if (state.needReadable)
        emitReadable(stream);

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}



// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended &&
         (state.needReadable ||
          state.length < state.highWaterMark ||
          state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
  if (!StringDecoder)
    StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
};

// Don't raise the hwm > 128MB
var MAX_HWM = 0x800000;
function roundUpToNextPowerOf2(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2
    n--;
    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
    n++;
  }
  return n;
}

function howMuchToRead(n, state) {
  if (state.length === 0 && state.ended)
    return 0;

  if (state.objectMode)
    return n === 0 ? 0 : 1;

  if (n === null || isNaN(n)) {
    // only flow one buffer at a time
    if (state.flowing && state.buffer.length)
      return state.buffer[0].length;
    else
      return state.length;
  }

  if (n <= 0)
    return 0;

  // If we're asking for more than the target buffer level,
  // then raise the water mark.  Bump up to the next highest
  // power of 2, to prevent increasing it excessively in tiny
  // amounts.
  if (n > state.highWaterMark)
    state.highWaterMark = roundUpToNextPowerOf2(n);

  // don't have that much.  return null, unless we've ended.
  if (n > state.length) {
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    } else
      return state.length;
  }

  return n;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
  var state = this._readableState;
  state.calledRead = true;
  var nOrig = n;
  var ret;

  if (typeof n !== 'number' || n > 0)
    state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 &&
      state.needReadable &&
      (state.length >= state.highWaterMark || state.ended)) {
    emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    ret = null;

    // In cases where the decoder did not receive enough data
    // to produce a full chunk, then immediately received an
    // EOF, state.buffer will contain [<Buffer >, <Buffer 00 ...>].
    // howMuchToRead will see this and coerce the amount to
    // read to zero (because it's looking at the length of the
    // first <Buffer > in state.buffer), and we'll end up here.
    //
    // This can only happen via state.decoder -- no other venue
    // exists for pushing a zero-length chunk into state.buffer
    // and triggering this behavior. In this case, we return our
    // remaining data and end the stream, if appropriate.
    if (state.length > 0 && state.decoder) {
      ret = fromList(n, state);
      state.length -= ret.length;
    }

    if (state.length === 0)
      endReadable(this);

    return ret;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;

  // if we currently have less than the highWaterMark, then also read some
  if (state.length - n <= state.highWaterMark)
    doRead = true;

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading)
    doRead = false;

  if (doRead) {
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0)
      state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read called its callback synchronously, then `reading`
  // will be false, and we need to re-evaluate how much data we
  // can return to the user.
  if (doRead && !state.reading)
    n = howMuchToRead(nOrig, state);

  if (n > 0)
    ret = fromList(n, state);
  else
    ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended)
    state.needReadable = true;

  // If we happened to read() exactly the remaining amount in the
  // buffer, and the EOF has been seen at this point, then make sure
  // that we emit 'end' on the very next tick.
  if (state.ended && !state.endEmitted && state.length === 0)
    endReadable(this);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!Buffer.isBuffer(chunk) &&
      'string' !== typeof chunk &&
      chunk !== null &&
      chunk !== undefined &&
      !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}


function onEofChunk(stream, state) {
  if (state.decoder && !state.ended) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // if we've ended and we have some data left, then emit
  // 'readable' now to make sure it gets picked up.
  if (state.length > 0)
    emitReadable(stream);
  else
    endReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (state.emittedReadable)
    return;

  state.emittedReadable = true;
  if (state.sync)
    process.nextTick(function() {
      emitReadable_(stream);
    });
  else
    emitReadable_(stream);
}

function emitReadable_(stream) {
  stream.emit('readable');
}


// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(function() {
      maybeReadMore_(stream, state);
    });
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended &&
         state.length < state.highWaterMark) {
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;
    else
      len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
  this.emit('error', new Error('not implemented'));
};

Readable.prototype.pipe = function(dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;

  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
              dest !== process.stdout &&
              dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted)
    process.nextTick(endFn);
  else
    src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    if (readable !== src) return;
    cleanup();
  }

  function onend() {
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  function cleanup() {
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (!dest._writableState || dest._writableState.needDrain)
      ondrain();
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    unpipe();
    dest.removeListener('error', onerror);
    if (EE.listenerCount(dest, 'error') === 0)
      dest.emit('error', er);
  }
  // This is a brutally ugly hack to make sure that our error handler
  // is attached before any userland ones.  NEVER DO THIS.
  if (!dest._events || !dest._events.error)
    dest.on('error', onerror);
  else if (isArray(dest._events.error))
    dest._events.error.unshift(onerror);
  else
    dest._events.error = [onerror, dest._events.error];



  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    // the handler that waits for readable events after all
    // the data gets sucked out in flow.
    // This would be easier to follow with a .once() handler
    // in flow(), but that is too slow.
    this.on('readable', pipeOnReadable);

    state.flowing = true;
    process.nextTick(function() {
      flow(src);
    });
  }

  return dest;
};

function pipeOnDrain(src) {
  return function() {
    var dest = this;
    var state = src._readableState;
    state.awaitDrain--;
    if (state.awaitDrain === 0)
      flow(src);
  };
}

function flow(src) {
  var state = src._readableState;
  var chunk;
  state.awaitDrain = 0;

  function write(dest, i, list) {
    var written = dest.write(chunk);
    if (false === written) {
      state.awaitDrain++;
    }
  }

  while (state.pipesCount && null !== (chunk = src.read())) {

    if (state.pipesCount === 1)
      write(state.pipes, 0, null);
    else
      forEach(state.pipes, write);

    src.emit('data', chunk);

    // if anyone needs a drain, then we have to wait for that.
    if (state.awaitDrain > 0)
      return;
  }

  // if every destination was unpiped, either before entering this
  // function, or in the while loop, then stop flowing.
  //
  // NB: This is a pretty rare edge case.
  if (state.pipesCount === 0) {
    state.flowing = false;

    // if there were data event listeners added, then switch to old mode.
    if (EE.listenerCount(src, 'data') > 0)
      emitDataEvents(src);
    return;
  }

  // at this point, no one needed a drain, so we just ran out of data
  // on the next readable event, start it over again.
  state.ranOut = true;
}

function pipeOnReadable() {
  if (this._readableState.ranOut) {
    this._readableState.ranOut = false;
    flow(this);
  }
}


Readable.prototype.unpipe = function(dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0)
    return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes)
      return this;

    if (!dest)
      dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    this.removeListener('readable', pipeOnReadable);
    state.flowing = false;
    if (dest)
      dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    this.removeListener('readable', pipeOnReadable);
    state.flowing = false;

    for (var i = 0; i < len; i++)
      dests[i].emit('unpipe', this);
    return this;
  }

  // try to find the right one.
  var i = indexOf(state.pipes, dest);
  if (i === -1)
    return this;

  state.pipes.splice(i, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1)
    state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data' && !this._readableState.flowing)
    emitDataEvents(this);

  if (ev === 'readable' && this.readable) {
    var state = this._readableState;
    if (!state.readableListening) {
      state.readableListening = true;
      state.emittedReadable = false;
      state.needReadable = true;
      if (!state.reading) {
        this.read(0);
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
  emitDataEvents(this);
  this.read(0);
  this.emit('resume');
};

Readable.prototype.pause = function() {
  emitDataEvents(this, true);
  this.emit('pause');
};

function emitDataEvents(stream, startPaused) {
  var state = stream._readableState;

  if (state.flowing) {
    // https://github.com/isaacs/readable-stream/issues/16
    throw new Error('Cannot switch to old mode now.');
  }

  var paused = startPaused || false;
  var readable = false;

  // convert to an old-style stream.
  stream.readable = true;
  stream.pipe = Stream.prototype.pipe;
  stream.on = stream.addListener = Stream.prototype.on;

  stream.on('readable', function() {
    readable = true;

    var c;
    while (!paused && (null !== (c = stream.read())))
      stream.emit('data', c);

    if (c === null) {
      readable = false;
      stream._readableState.needReadable = true;
    }
  });

  stream.pause = function() {
    paused = true;
    this.emit('pause');
  };

  stream.resume = function() {
    paused = false;
    if (readable)
      process.nextTick(function() {
        stream.emit('readable');
      });
    else
      this.read(0);
    this.emit('resume');
  };

  // now make it start, just in case it hadn't already.
  stream.emit('readable');
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function() {
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length)
        self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function(chunk) {
    if (state.decoder)
      chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    //if (state.objectMode && util.isNullOrUndefined(chunk))
    if (state.objectMode && (chunk === null || chunk === undefined))
      return;
    else if (!state.objectMode && (!chunk || !chunk.length))
      return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (typeof stream[i] === 'function' &&
        typeof this[i] === 'undefined') {
      this[i] = function(method) { return function() {
        return stream[method].apply(stream, arguments);
      }}(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function(ev) {
    stream.on(ev, self.emit.bind(self, ev));
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function(n) {
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};



// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
function fromList(n, state) {
  var list = state.buffer;
  var length = state.length;
  var stringMode = !!state.decoder;
  var objectMode = !!state.objectMode;
  var ret;

  // nothing in the list, definitely empty.
  if (list.length === 0)
    return null;

  if (length === 0)
    ret = null;
  else if (objectMode)
    ret = list.shift();
  else if (!n || n >= length) {
    // read it all, truncate the array.
    if (stringMode)
      ret = list.join('');
    else
      ret = Buffer.concat(list, length);
    list.length = 0;
  } else {
    // read just some of it.
    if (n < list[0].length) {
      // just take a part of the first list item.
      // slice is the same for buffers and strings.
      var buf = list[0];
      ret = buf.slice(0, n);
      list[0] = buf.slice(n);
    } else if (n === list[0].length) {
      // first list is a perfect match
      ret = list.shift();
    } else {
      // complex case.
      // we have enough to cover it, but it spans past the first buffer.
      if (stringMode)
        ret = '';
      else
        ret = new Buffer(n);

      var c = 0;
      for (var i = 0, l = list.length; i < l && c < n; i++) {
        var buf = list[0];
        var cpy = Math.min(n - c, buf.length);

        if (stringMode)
          ret += buf.slice(0, cpy);
        else
          buf.copy(ret, c, 0, cpy);

        if (cpy < buf.length)
          list[0] = buf.slice(cpy);
        else
          list.shift();

        c += cpy;
      }
    }
  }

  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0)
    throw new Error('endReadable called on non-empty stream');

  if (!state.endEmitted && state.calledRead) {
    state.ended = true;
    process.nextTick(function() {
      // Check that we didn't get one last unshift.
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
      }
    });
  }
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf (xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}

}).call(this,require('_process'))
},{"_process":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/process/browser.js","buffer":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/buffer/index.js","core-util-is":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/readable-stream/node_modules/core-util-is/lib/util.js","events":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/events/events.js","inherits":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/inherits/inherits_browser.js","isarray":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/isarray/index.js","stream":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/stream-browserify/index.js","string_decoder/":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/string_decoder/index.js"}],"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/readable-stream/lib/_stream_transform.js":[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);


function TransformState(options, stream) {
  this.afterTransform = function(er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb)
    return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined)
    stream.push(data);

  if (cb)
    cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}


function Transform(options) {
  if (!(this instanceof Transform))
    return new Transform(options);

  Duplex.call(this, options);

  var ts = this._transformState = new TransformState(options, this);

  // when the writable side finishes, then flush out anything remaining.
  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  this.once('finish', function() {
    if ('function' === typeof this._flush)
      this._flush(function(er) {
        done(stream, er);
      });
    else
      done(stream);
  });
}

Transform.prototype.push = function(chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
  throw new Error('not implemented');
};

Transform.prototype._write = function(chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform ||
        rs.needReadable ||
        rs.length < rs.highWaterMark)
      this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};


function done(stream, er) {
  if (er)
    return stream.emit('error', er);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var rs = stream._readableState;
  var ts = stream._transformState;

  if (ws.length)
    throw new Error('calling transform done when ws.length != 0');

  if (ts.transforming)
    throw new Error('calling transform done when still transforming');

  return stream.push(null);
}

},{"./_stream_duplex":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/readable-stream/lib/_stream_duplex.js","core-util-is":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/readable-stream/node_modules/core-util-is/lib/util.js","inherits":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/readable-stream/lib/_stream_writable.js":[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, cb), and it'll handle all
// the drain event emission and buffering.

module.exports = Writable;

/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Writable.WritableState = WritableState;


/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Stream = require('stream');

util.inherits(Writable, Stream);

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
}

function WritableState(options, stream) {
  options = options || {};

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, becuase any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function(er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.buffer = [];

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;
}

function Writable(options) {
  var Duplex = require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, though they're not
  // instanceof Writable, they're instanceof Readable.
  if (!(this instanceof Writable) && !(this instanceof Duplex))
    return new Writable(options);

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
  this.emit('error', new Error('Cannot pipe. Not readable.'));
};


function writeAfterEnd(stream, state, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  process.nextTick(function() {
    cb(er);
  });
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  if (!Buffer.isBuffer(chunk) &&
      'string' !== typeof chunk &&
      chunk !== null &&
      chunk !== undefined &&
      !state.objectMode) {
    var er = new TypeError('Invalid non-string/buffer chunk');
    stream.emit('error', er);
    process.nextTick(function() {
      cb(er);
    });
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function(chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (Buffer.isBuffer(chunk))
    encoding = 'buffer';
  else if (!encoding)
    encoding = state.defaultEncoding;

  if (typeof cb !== 'function')
    cb = function() {};

  if (state.ended)
    writeAfterEnd(this, state, cb);
  else if (validChunk(this, state, chunk, cb))
    ret = writeOrBuffer(this, state, chunk, encoding, cb);

  return ret;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode &&
      state.decodeStrings !== false &&
      typeof chunk === 'string') {
    chunk = new Buffer(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);
  if (Buffer.isBuffer(chunk))
    encoding = 'buffer';
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret)
    state.needDrain = true;

  if (state.writing)
    state.buffer.push(new WriteReq(chunk, encoding, cb));
  else
    doWrite(stream, state, len, chunk, encoding, cb);

  return ret;
}

function doWrite(stream, state, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  if (sync)
    process.nextTick(function() {
      cb(er);
    });
  else
    cb(er);

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er)
    onwriteError(stream, state, sync, er, cb);
  else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(stream, state);

    if (!finished && !state.bufferProcessing && state.buffer.length)
      clearBuffer(stream, state);

    if (sync) {
      process.nextTick(function() {
        afterWrite(stream, state, finished, cb);
      });
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished)
    onwriteDrain(stream, state);
  cb();
  if (finished)
    finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}


// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;

  for (var c = 0; c < state.buffer.length; c++) {
    var entry = state.buffer[c];
    var chunk = entry.chunk;
    var encoding = entry.encoding;
    var cb = entry.callback;
    var len = state.objectMode ? 1 : chunk.length;

    doWrite(stream, state, len, chunk, encoding, cb);

    // if we didn't call the onwrite immediately, then
    // it means that we need to wait until it does.
    // also, that means that the chunk and cb are currently
    // being processed, so move the buffer counter past them.
    if (state.writing) {
      c++;
      break;
    }
  }

  state.bufferProcessing = false;
  if (c < state.buffer.length)
    state.buffer = state.buffer.slice(c);
  else
    state.buffer.length = 0;
}

Writable.prototype._write = function(chunk, encoding, cb) {
  cb(new Error('not implemented'));
};

Writable.prototype.end = function(chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (typeof chunk !== 'undefined' && chunk !== null)
    this.write(chunk, encoding);

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished)
    endWritable(this, state, cb);
};


function needFinish(stream, state) {
  return (state.ending &&
          state.length === 0 &&
          !state.finished &&
          !state.writing);
}

function finishMaybe(stream, state) {
  var need = needFinish(stream, state);
  if (need) {
    state.finished = true;
    stream.emit('finish');
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished)
      process.nextTick(cb);
    else
      stream.once('finish', cb);
  }
  state.ended = true;
}

}).call(this,require('_process'))
},{"./_stream_duplex":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/readable-stream/lib/_stream_duplex.js","_process":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/process/browser.js","buffer":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/buffer/index.js","core-util-is":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/readable-stream/node_modules/core-util-is/lib/util.js","inherits":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/inherits/inherits_browser.js","stream":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/stream-browserify/index.js"}],"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/readable-stream/node_modules/core-util-is/lib/util.js":[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

function isBuffer(arg) {
  return Buffer.isBuffer(arg);
}
exports.isBuffer = isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}
}).call(this,require("buffer").Buffer)
},{"buffer":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/buffer/index.js"}],"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/readable-stream/passthrough.js":[function(require,module,exports){
module.exports = require("./lib/_stream_passthrough.js")

},{"./lib/_stream_passthrough.js":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/readable-stream/lib/_stream_passthrough.js"}],"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/readable-stream/readable.js":[function(require,module,exports){
var Stream = require('stream'); // hack to fix a circular dependency issue when used with browserify
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = Stream;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/readable-stream/lib/_stream_duplex.js","./lib/_stream_passthrough.js":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/readable-stream/lib/_stream_passthrough.js","./lib/_stream_readable.js":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/readable-stream/lib/_stream_readable.js","./lib/_stream_transform.js":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/readable-stream/lib/_stream_transform.js","./lib/_stream_writable.js":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/readable-stream/lib/_stream_writable.js","stream":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/stream-browserify/index.js"}],"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/readable-stream/transform.js":[function(require,module,exports){
module.exports = require("./lib/_stream_transform.js")

},{"./lib/_stream_transform.js":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/readable-stream/lib/_stream_transform.js"}],"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/readable-stream/writable.js":[function(require,module,exports){
module.exports = require("./lib/_stream_writable.js")

},{"./lib/_stream_writable.js":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/readable-stream/lib/_stream_writable.js"}],"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/stream-browserify/index.js":[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/events/events.js","inherits":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/inherits/inherits_browser.js","readable-stream/duplex.js":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/readable-stream/duplex.js","readable-stream/passthrough.js":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/readable-stream/passthrough.js","readable-stream/readable.js":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/readable-stream/readable.js","readable-stream/transform.js":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/readable-stream/transform.js","readable-stream/writable.js":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/readable-stream/writable.js"}],"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/string_decoder/index.js":[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Buffer = require('buffer').Buffer;

var isBufferEncoding = Buffer.isEncoding
  || function(encoding) {
       switch (encoding && encoding.toLowerCase()) {
         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
         default: return false;
       }
     }


function assertEncoding(encoding) {
  if (encoding && !isBufferEncoding(encoding)) {
    throw new Error('Unknown encoding: ' + encoding);
  }
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
var StringDecoder = exports.StringDecoder = function(encoding) {
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
  assertEncoding(encoding);
  switch (this.encoding) {
    case 'utf8':
      // CESU-8 represents each of Surrogate Pair by 3-bytes
      this.surrogateSize = 3;
      break;
    case 'ucs2':
    case 'utf16le':
      // UTF-16 represents each of Surrogate Pair by 2-bytes
      this.surrogateSize = 2;
      this.detectIncompleteChar = utf16DetectIncompleteChar;
      break;
    case 'base64':
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
      this.surrogateSize = 3;
      this.detectIncompleteChar = base64DetectIncompleteChar;
      break;
    default:
      this.write = passThroughWrite;
      return;
  }

  // Enough space to store all bytes of a single character. UTF-8 needs 4
  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
  this.charBuffer = new Buffer(6);
  // Number of bytes received for the current incomplete multi-byte character.
  this.charReceived = 0;
  // Number of bytes expected for the current incomplete multi-byte character.
  this.charLength = 0;
};


// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
StringDecoder.prototype.write = function(buffer) {
  var charStr = '';
  // if our last write ended with an incomplete multibyte character
  while (this.charLength) {
    // determine how many remaining bytes this buffer has to offer for this char
    var available = (buffer.length >= this.charLength - this.charReceived) ?
        this.charLength - this.charReceived :
        buffer.length;

    // add the new bytes to the char buffer
    buffer.copy(this.charBuffer, this.charReceived, 0, available);
    this.charReceived += available;

    if (this.charReceived < this.charLength) {
      // still not enough chars in this buffer? wait for more ...
      return '';
    }

    // remove bytes belonging to the current character from the buffer
    buffer = buffer.slice(available, buffer.length);

    // get the character that was split
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    var charCode = charStr.charCodeAt(charStr.length - 1);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      this.charLength += this.surrogateSize;
      charStr = '';
      continue;
    }
    this.charReceived = this.charLength = 0;

    // if there are no more bytes in this buffer, just emit our char
    if (buffer.length === 0) {
      return charStr;
    }
    break;
  }

  // determine and set charLength / charReceived
  this.detectIncompleteChar(buffer);

  var end = buffer.length;
  if (this.charLength) {
    // buffer the incomplete character bytes we got
    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
    end -= this.charReceived;
  }

  charStr += buffer.toString(this.encoding, 0, end);

  var end = charStr.length - 1;
  var charCode = charStr.charCodeAt(end);
  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
    var size = this.surrogateSize;
    this.charLength += size;
    this.charReceived += size;
    this.charBuffer.copy(this.charBuffer, size, 0, size);
    buffer.copy(this.charBuffer, 0, 0, size);
    return charStr.substring(0, end);
  }

  // or just emit the charStr
  return charStr;
};

// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
StringDecoder.prototype.detectIncompleteChar = function(buffer) {
  // determine how many bytes we have to check at the end of this buffer
  var i = (buffer.length >= 3) ? 3 : buffer.length;

  // Figure out if one of the last i bytes of our buffer announces an
  // incomplete char.
  for (; i > 0; i--) {
    var c = buffer[buffer.length - i];

    // See http://en.wikipedia.org/wiki/UTF-8#Description

    // 110XXXXX
    if (i == 1 && c >> 5 == 0x06) {
      this.charLength = 2;
      break;
    }

    // 1110XXXX
    if (i <= 2 && c >> 4 == 0x0E) {
      this.charLength = 3;
      break;
    }

    // 11110XXX
    if (i <= 3 && c >> 3 == 0x1E) {
      this.charLength = 4;
      break;
    }
  }
  this.charReceived = i;
};

StringDecoder.prototype.end = function(buffer) {
  var res = '';
  if (buffer && buffer.length)
    res = this.write(buffer);

  if (this.charReceived) {
    var cr = this.charReceived;
    var buf = this.charBuffer;
    var enc = this.encoding;
    res += buf.slice(0, cr).toString(enc);
  }

  return res;
};

function passThroughWrite(buffer) {
  return buffer.toString(this.encoding);
}

function utf16DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 2;
  this.charLength = this.charReceived ? 2 : 0;
}

function base64DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 3;
  this.charLength = this.charReceived ? 3 : 0;
}

},{"buffer":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/buffer/index.js"}],"/Users/aolson/Developer/ofx4js/node_modules/sax/lib/sax.js":[function(require,module,exports){
(function (Buffer){
// wrapper for non-node envs
;(function (sax) {

sax.parser = function (strict, opt) { return new SAXParser(strict, opt) }
sax.SAXParser = SAXParser
sax.SAXStream = SAXStream
sax.createStream = createStream

// When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.
// When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),
// since that's the earliest that a buffer overrun could occur.  This way, checks are
// as rare as required, but as often as necessary to ensure never crossing this bound.
// Furthermore, buffers are only tested at most once per write(), so passing a very
// large string into write() might have undesirable effects, but this is manageable by
// the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme
// edge case, result in creating at most one complete copy of the string passed in.
// Set to Infinity to have unlimited buffers.
sax.MAX_BUFFER_LENGTH = 64 * 1024

var buffers = [
  "comment", "sgmlDecl", "textNode", "tagName", "doctype",
  "procInstName", "procInstBody", "entity", "attribName",
  "attribValue", "cdata", "script"
]

sax.EVENTS = // for discoverability.
  [ "text"
  , "processinginstruction"
  , "sgmldeclaration"
  , "doctype"
  , "comment"
  , "attribute"
  , "opentag"
  , "closetag"
  , "opencdata"
  , "cdata"
  , "closecdata"
  , "error"
  , "end"
  , "ready"
  , "script"
  , "opennamespace"
  , "closenamespace"
  ]

function SAXParser (strict, opt) {
  if (!(this instanceof SAXParser)) return new SAXParser(strict, opt)

  var parser = this
  clearBuffers(parser)
  parser.q = parser.c = ""
  parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH
  parser.opt = opt || {}
  parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags
  parser.looseCase = parser.opt.lowercase ? "toLowerCase" : "toUpperCase"
  parser.tags = []
  parser.closed = parser.closedRoot = parser.sawRoot = false
  parser.tag = parser.error = null
  parser.strict = !!strict
  parser.noscript = !!(strict || parser.opt.noscript)
  parser.state = S.BEGIN
  parser.ENTITIES = Object.create(sax.ENTITIES)
  parser.attribList = []

  // namespaces form a prototype chain.
  // it always points at the current tag,
  // which protos to its parent tag.
  if (parser.opt.xmlns) parser.ns = Object.create(rootNS)

  // mostly just for error reporting
  parser.trackPosition = parser.opt.position !== false
  if (parser.trackPosition) {
    parser.position = parser.line = parser.column = 0
  }
  emit(parser, "onready")
}

if (!Object.create) Object.create = function (o) {
  function f () { this.__proto__ = o }
  f.prototype = o
  return new f
}

if (!Object.getPrototypeOf) Object.getPrototypeOf = function (o) {
  return o.__proto__
}

if (!Object.keys) Object.keys = function (o) {
  var a = []
  for (var i in o) if (o.hasOwnProperty(i)) a.push(i)
  return a
}

function checkBufferLength (parser) {
  var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10)
    , maxActual = 0
  for (var i = 0, l = buffers.length; i < l; i ++) {
    var len = parser[buffers[i]].length
    if (len > maxAllowed) {
      // Text/cdata nodes can get big, and since they're buffered,
      // we can get here under normal conditions.
      // Avoid issues by emitting the text node now,
      // so at least it won't get any bigger.
      switch (buffers[i]) {
        case "textNode":
          closeText(parser)
        break

        case "cdata":
          emitNode(parser, "oncdata", parser.cdata)
          parser.cdata = ""
        break

        case "script":
          emitNode(parser, "onscript", parser.script)
          parser.script = ""
        break

        default:
          error(parser, "Max buffer length exceeded: "+buffers[i])
      }
    }
    maxActual = Math.max(maxActual, len)
  }
  // schedule the next check for the earliest possible buffer overrun.
  parser.bufferCheckPosition = (sax.MAX_BUFFER_LENGTH - maxActual)
                             + parser.position
}

function clearBuffers (parser) {
  for (var i = 0, l = buffers.length; i < l; i ++) {
    parser[buffers[i]] = ""
  }
}

function flushBuffers (parser) {
  closeText(parser)
  if (parser.cdata !== "") {
    emitNode(parser, "oncdata", parser.cdata)
    parser.cdata = ""
  }
  if (parser.script !== "") {
    emitNode(parser, "onscript", parser.script)
    parser.script = ""
  }
}

SAXParser.prototype =
  { end: function () { end(this) }
  , write: write
  , resume: function () { this.error = null; return this }
  , close: function () { return this.write(null) }
  , flush: function () { flushBuffers(this) }
  }

try {
  var Stream = require("stream").Stream
} catch (ex) {
  var Stream = function () {}
}


var streamWraps = sax.EVENTS.filter(function (ev) {
  return ev !== "error" && ev !== "end"
})

function createStream (strict, opt) {
  return new SAXStream(strict, opt)
}

function SAXStream (strict, opt) {
  if (!(this instanceof SAXStream)) return new SAXStream(strict, opt)

  Stream.apply(this)

  this._parser = new SAXParser(strict, opt)
  this.writable = true
  this.readable = true


  var me = this

  this._parser.onend = function () {
    me.emit("end")
  }

  this._parser.onerror = function (er) {
    me.emit("error", er)

    // if didn't throw, then means error was handled.
    // go ahead and clear error, so we can write again.
    me._parser.error = null
  }

  this._decoder = null;

  streamWraps.forEach(function (ev) {
    Object.defineProperty(me, "on" + ev, {
      get: function () { return me._parser["on" + ev] },
      set: function (h) {
        if (!h) {
          me.removeAllListeners(ev)
          return me._parser["on"+ev] = h
        }
        me.on(ev, h)
      },
      enumerable: true,
      configurable: false
    })
  })
}

SAXStream.prototype = Object.create(Stream.prototype,
  { constructor: { value: SAXStream } })

SAXStream.prototype.write = function (data) {
  if (typeof Buffer === 'function' &&
      typeof Buffer.isBuffer === 'function' &&
      Buffer.isBuffer(data)) {
    if (!this._decoder) {
      var SD = require('string_decoder').StringDecoder
      this._decoder = new SD('utf8')
    }
    data = this._decoder.write(data);
  }

  this._parser.write(data.toString())
  this.emit("data", data)
  return true
}

SAXStream.prototype.end = function (chunk) {
  if (chunk && chunk.length) this.write(chunk)
  this._parser.end()
  return true
}

SAXStream.prototype.on = function (ev, handler) {
  var me = this
  if (!me._parser["on"+ev] && streamWraps.indexOf(ev) !== -1) {
    me._parser["on"+ev] = function () {
      var args = arguments.length === 1 ? [arguments[0]]
               : Array.apply(null, arguments)
      args.splice(0, 0, ev)
      me.emit.apply(me, args)
    }
  }

  return Stream.prototype.on.call(me, ev, handler)
}



// character classes and tokens
var whitespace = "\r\n\t "
  // this really needs to be replaced with character classes.
  // XML allows all manner of ridiculous numbers and digits.
  , number = "0124356789"
  , letter = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
  // (Letter | "_" | ":")
  , quote = "'\""
  , entity = number+letter+"#"
  , attribEnd = whitespace + ">"
  , CDATA = "[CDATA["
  , DOCTYPE = "DOCTYPE"
  , XML_NAMESPACE = "http://www.w3.org/XML/1998/namespace"
  , XMLNS_NAMESPACE = "http://www.w3.org/2000/xmlns/"
  , rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE }

// turn all the string character sets into character class objects.
whitespace = charClass(whitespace)
number = charClass(number)
letter = charClass(letter)

// http://www.w3.org/TR/REC-xml/#NT-NameStartChar
// This implementation works on strings, a single character at a time
// as such, it cannot ever support astral-plane characters (10000-EFFFF)
// without a significant breaking change to either this  parser, or the
// JavaScript language.  Implementation of an emoji-capable xml parser
// is left as an exercise for the reader.
var nameStart = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/

var nameBody = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040\.\d-]/

quote = charClass(quote)
entity = charClass(entity)
attribEnd = charClass(attribEnd)

function charClass (str) {
  return str.split("").reduce(function (s, c) {
    s[c] = true
    return s
  }, {})
}

function isRegExp (c) {
  return Object.prototype.toString.call(c) === '[object RegExp]'
}

function is (charclass, c) {
  return isRegExp(charclass) ? !!c.match(charclass) : charclass[c]
}

function not (charclass, c) {
  return !is(charclass, c)
}

var S = 0
sax.STATE =
{ BEGIN                     : S++
, TEXT                      : S++ // general stuff
, TEXT_ENTITY               : S++ // &amp and such.
, OPEN_WAKA                 : S++ // <
, SGML_DECL                 : S++ // <!BLARG
, SGML_DECL_QUOTED          : S++ // <!BLARG foo "bar
, DOCTYPE                   : S++ // <!DOCTYPE
, DOCTYPE_QUOTED            : S++ // <!DOCTYPE "//blah
, DOCTYPE_DTD               : S++ // <!DOCTYPE "//blah" [ ...
, DOCTYPE_DTD_QUOTED        : S++ // <!DOCTYPE "//blah" [ "foo
, COMMENT_STARTING          : S++ // <!-
, COMMENT                   : S++ // <!--
, COMMENT_ENDING            : S++ // <!-- blah -
, COMMENT_ENDED             : S++ // <!-- blah --
, CDATA                     : S++ // <![CDATA[ something
, CDATA_ENDING              : S++ // ]
, CDATA_ENDING_2            : S++ // ]]
, PROC_INST                 : S++ // <?hi
, PROC_INST_BODY            : S++ // <?hi there
, PROC_INST_ENDING          : S++ // <?hi "there" ?
, OPEN_TAG                  : S++ // <strong
, OPEN_TAG_SLASH            : S++ // <strong /
, ATTRIB                    : S++ // <a
, ATTRIB_NAME               : S++ // <a foo
, ATTRIB_NAME_SAW_WHITE     : S++ // <a foo _
, ATTRIB_VALUE              : S++ // <a foo=
, ATTRIB_VALUE_QUOTED       : S++ // <a foo="bar
, ATTRIB_VALUE_CLOSED       : S++ // <a foo="bar"
, ATTRIB_VALUE_UNQUOTED     : S++ // <a foo=bar
, ATTRIB_VALUE_ENTITY_Q     : S++ // <foo bar="&quot;"
, ATTRIB_VALUE_ENTITY_U     : S++ // <foo bar=&quot;
, CLOSE_TAG                 : S++ // </a
, CLOSE_TAG_SAW_WHITE       : S++ // </a   >
, SCRIPT                    : S++ // <script> ...
, SCRIPT_ENDING             : S++ // <script> ... <
}

sax.ENTITIES =
{ "amp" : "&"
, "gt" : ">"
, "lt" : "<"
, "quot" : "\""
, "apos" : "'"
, "AElig" : 198
, "Aacute" : 193
, "Acirc" : 194
, "Agrave" : 192
, "Aring" : 197
, "Atilde" : 195
, "Auml" : 196
, "Ccedil" : 199
, "ETH" : 208
, "Eacute" : 201
, "Ecirc" : 202
, "Egrave" : 200
, "Euml" : 203
, "Iacute" : 205
, "Icirc" : 206
, "Igrave" : 204
, "Iuml" : 207
, "Ntilde" : 209
, "Oacute" : 211
, "Ocirc" : 212
, "Ograve" : 210
, "Oslash" : 216
, "Otilde" : 213
, "Ouml" : 214
, "THORN" : 222
, "Uacute" : 218
, "Ucirc" : 219
, "Ugrave" : 217
, "Uuml" : 220
, "Yacute" : 221
, "aacute" : 225
, "acirc" : 226
, "aelig" : 230
, "agrave" : 224
, "aring" : 229
, "atilde" : 227
, "auml" : 228
, "ccedil" : 231
, "eacute" : 233
, "ecirc" : 234
, "egrave" : 232
, "eth" : 240
, "euml" : 235
, "iacute" : 237
, "icirc" : 238
, "igrave" : 236
, "iuml" : 239
, "ntilde" : 241
, "oacute" : 243
, "ocirc" : 244
, "ograve" : 242
, "oslash" : 248
, "otilde" : 245
, "ouml" : 246
, "szlig" : 223
, "thorn" : 254
, "uacute" : 250
, "ucirc" : 251
, "ugrave" : 249
, "uuml" : 252
, "yacute" : 253
, "yuml" : 255
, "copy" : 169
, "reg" : 174
, "nbsp" : 160
, "iexcl" : 161
, "cent" : 162
, "pound" : 163
, "curren" : 164
, "yen" : 165
, "brvbar" : 166
, "sect" : 167
, "uml" : 168
, "ordf" : 170
, "laquo" : 171
, "not" : 172
, "shy" : 173
, "macr" : 175
, "deg" : 176
, "plusmn" : 177
, "sup1" : 185
, "sup2" : 178
, "sup3" : 179
, "acute" : 180
, "micro" : 181
, "para" : 182
, "middot" : 183
, "cedil" : 184
, "ordm" : 186
, "raquo" : 187
, "frac14" : 188
, "frac12" : 189
, "frac34" : 190
, "iquest" : 191
, "times" : 215
, "divide" : 247
, "OElig" : 338
, "oelig" : 339
, "Scaron" : 352
, "scaron" : 353
, "Yuml" : 376
, "fnof" : 402
, "circ" : 710
, "tilde" : 732
, "Alpha" : 913
, "Beta" : 914
, "Gamma" : 915
, "Delta" : 916
, "Epsilon" : 917
, "Zeta" : 918
, "Eta" : 919
, "Theta" : 920
, "Iota" : 921
, "Kappa" : 922
, "Lambda" : 923
, "Mu" : 924
, "Nu" : 925
, "Xi" : 926
, "Omicron" : 927
, "Pi" : 928
, "Rho" : 929
, "Sigma" : 931
, "Tau" : 932
, "Upsilon" : 933
, "Phi" : 934
, "Chi" : 935
, "Psi" : 936
, "Omega" : 937
, "alpha" : 945
, "beta" : 946
, "gamma" : 947
, "delta" : 948
, "epsilon" : 949
, "zeta" : 950
, "eta" : 951
, "theta" : 952
, "iota" : 953
, "kappa" : 954
, "lambda" : 955
, "mu" : 956
, "nu" : 957
, "xi" : 958
, "omicron" : 959
, "pi" : 960
, "rho" : 961
, "sigmaf" : 962
, "sigma" : 963
, "tau" : 964
, "upsilon" : 965
, "phi" : 966
, "chi" : 967
, "psi" : 968
, "omega" : 969
, "thetasym" : 977
, "upsih" : 978
, "piv" : 982
, "ensp" : 8194
, "emsp" : 8195
, "thinsp" : 8201
, "zwnj" : 8204
, "zwj" : 8205
, "lrm" : 8206
, "rlm" : 8207
, "ndash" : 8211
, "mdash" : 8212
, "lsquo" : 8216
, "rsquo" : 8217
, "sbquo" : 8218
, "ldquo" : 8220
, "rdquo" : 8221
, "bdquo" : 8222
, "dagger" : 8224
, "Dagger" : 8225
, "bull" : 8226
, "hellip" : 8230
, "permil" : 8240
, "prime" : 8242
, "Prime" : 8243
, "lsaquo" : 8249
, "rsaquo" : 8250
, "oline" : 8254
, "frasl" : 8260
, "euro" : 8364
, "image" : 8465
, "weierp" : 8472
, "real" : 8476
, "trade" : 8482
, "alefsym" : 8501
, "larr" : 8592
, "uarr" : 8593
, "rarr" : 8594
, "darr" : 8595
, "harr" : 8596
, "crarr" : 8629
, "lArr" : 8656
, "uArr" : 8657
, "rArr" : 8658
, "dArr" : 8659
, "hArr" : 8660
, "forall" : 8704
, "part" : 8706
, "exist" : 8707
, "empty" : 8709
, "nabla" : 8711
, "isin" : 8712
, "notin" : 8713
, "ni" : 8715
, "prod" : 8719
, "sum" : 8721
, "minus" : 8722
, "lowast" : 8727
, "radic" : 8730
, "prop" : 8733
, "infin" : 8734
, "ang" : 8736
, "and" : 8743
, "or" : 8744
, "cap" : 8745
, "cup" : 8746
, "int" : 8747
, "there4" : 8756
, "sim" : 8764
, "cong" : 8773
, "asymp" : 8776
, "ne" : 8800
, "equiv" : 8801
, "le" : 8804
, "ge" : 8805
, "sub" : 8834
, "sup" : 8835
, "nsub" : 8836
, "sube" : 8838
, "supe" : 8839
, "oplus" : 8853
, "otimes" : 8855
, "perp" : 8869
, "sdot" : 8901
, "lceil" : 8968
, "rceil" : 8969
, "lfloor" : 8970
, "rfloor" : 8971
, "lang" : 9001
, "rang" : 9002
, "loz" : 9674
, "spades" : 9824
, "clubs" : 9827
, "hearts" : 9829
, "diams" : 9830
}

Object.keys(sax.ENTITIES).forEach(function (key) {
    var e = sax.ENTITIES[key]
    var s = typeof e === 'number' ? String.fromCharCode(e) : e
    sax.ENTITIES[key] = s
})

for (var S in sax.STATE) sax.STATE[sax.STATE[S]] = S

// shorthand
S = sax.STATE

function emit (parser, event, data) {
  parser[event] && parser[event](data)
}

function emitNode (parser, nodeType, data) {
  if (parser.textNode) closeText(parser)
  emit(parser, nodeType, data)
}

function closeText (parser) {
  parser.textNode = textopts(parser.opt, parser.textNode)
  if (parser.textNode) emit(parser, "ontext", parser.textNode)
  parser.textNode = ""
}

function textopts (opt, text) {
  if (opt.trim) text = text.trim()
  if (opt.normalize) text = text.replace(/\s+/g, " ")
  return text
}

function error (parser, er) {
  closeText(parser)
  if (parser.trackPosition) {
    er += "\nLine: "+parser.line+
          "\nColumn: "+parser.column+
          "\nChar: "+parser.c
  }
  er = new Error(er)
  parser.error = er
  emit(parser, "onerror", er)
  return parser
}

function end (parser) {
  if (!parser.closedRoot) strictFail(parser, "Unclosed root tag")
  if ((parser.state !== S.BEGIN) && (parser.state !== S.TEXT)) error(parser, "Unexpected end")
  closeText(parser)
  parser.c = ""
  parser.closed = true
  emit(parser, "onend")
  SAXParser.call(parser, parser.strict, parser.opt)
  return parser
}

function strictFail (parser, message) {
  if (typeof parser !== 'object' || !(parser instanceof SAXParser))
    throw new Error('bad call to strictFail');
  if (parser.strict) error(parser, message)
}

function newTag (parser) {
  if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]()
  var parent = parser.tags[parser.tags.length - 1] || parser
    , tag = parser.tag = { name : parser.tagName, attributes : {} }

  // will be overridden if tag contails an xmlns="foo" or xmlns:foo="bar"
  if (parser.opt.xmlns) tag.ns = parent.ns
  parser.attribList.length = 0
}

function qname (name, attribute) {
  var i = name.indexOf(":")
    , qualName = i < 0 ? [ "", name ] : name.split(":")
    , prefix = qualName[0]
    , local = qualName[1]

  // <x "xmlns"="http://foo">
  if (attribute && name === "xmlns") {
    prefix = "xmlns"
    local = ""
  }

  return { prefix: prefix, local: local }
}

function attrib (parser) {
  if (!parser.strict) parser.attribName = parser.attribName[parser.looseCase]()

  if (parser.attribList.indexOf(parser.attribName) !== -1 ||
      parser.tag.attributes.hasOwnProperty(parser.attribName)) {
    return parser.attribName = parser.attribValue = ""
  }

  if (parser.opt.xmlns) {
    var qn = qname(parser.attribName, true)
      , prefix = qn.prefix
      , local = qn.local

    if (prefix === "xmlns") {
      // namespace binding attribute; push the binding into scope
      if (local === "xml" && parser.attribValue !== XML_NAMESPACE) {
        strictFail( parser
                  , "xml: prefix must be bound to " + XML_NAMESPACE + "\n"
                  + "Actual: " + parser.attribValue )
      } else if (local === "xmlns" && parser.attribValue !== XMLNS_NAMESPACE) {
        strictFail( parser
                  , "xmlns: prefix must be bound to " + XMLNS_NAMESPACE + "\n"
                  + "Actual: " + parser.attribValue )
      } else {
        var tag = parser.tag
          , parent = parser.tags[parser.tags.length - 1] || parser
        if (tag.ns === parent.ns) {
          tag.ns = Object.create(parent.ns)
        }
        tag.ns[local] = parser.attribValue
      }
    }

    // defer onattribute events until all attributes have been seen
    // so any new bindings can take effect; preserve attribute order
    // so deferred events can be emitted in document order
    parser.attribList.push([parser.attribName, parser.attribValue])
  } else {
    // in non-xmlns mode, we can emit the event right away
    parser.tag.attributes[parser.attribName] = parser.attribValue
    emitNode( parser
            , "onattribute"
            , { name: parser.attribName
              , value: parser.attribValue } )
  }

  parser.attribName = parser.attribValue = ""
}

function openTag (parser, selfClosing) {
  if (parser.opt.xmlns) {
    // emit namespace binding events
    var tag = parser.tag

    // add namespace info to tag
    var qn = qname(parser.tagName)
    tag.prefix = qn.prefix
    tag.local = qn.local
    tag.uri = tag.ns[qn.prefix] || ""

    if (tag.prefix && !tag.uri) {
      strictFail(parser, "Unbound namespace prefix: "
                       + JSON.stringify(parser.tagName))
      tag.uri = qn.prefix
    }

    var parent = parser.tags[parser.tags.length - 1] || parser
    if (tag.ns && parent.ns !== tag.ns) {
      Object.keys(tag.ns).forEach(function (p) {
        emitNode( parser
                , "onopennamespace"
                , { prefix: p , uri: tag.ns[p] } )
      })
    }

    // handle deferred onattribute events
    // Note: do not apply default ns to attributes:
    //   http://www.w3.org/TR/REC-xml-names/#defaulting
    for (var i = 0, l = parser.attribList.length; i < l; i ++) {
      var nv = parser.attribList[i]
      var name = nv[0]
        , value = nv[1]
        , qualName = qname(name, true)
        , prefix = qualName.prefix
        , local = qualName.local
        , uri = prefix == "" ? "" : (tag.ns[prefix] || "")
        , a = { name: name
              , value: value
              , prefix: prefix
              , local: local
              , uri: uri
              }

      // if there's any attributes with an undefined namespace,
      // then fail on them now.
      if (prefix && prefix != "xmlns" && !uri) {
        strictFail(parser, "Unbound namespace prefix: "
                         + JSON.stringify(prefix))
        a.uri = prefix
      }
      parser.tag.attributes[name] = a
      emitNode(parser, "onattribute", a)
    }
    parser.attribList.length = 0
  }

  parser.tag.isSelfClosing = !!selfClosing

  // process the tag
  parser.sawRoot = true
  parser.tags.push(parser.tag)
  emitNode(parser, "onopentag", parser.tag)
  if (!selfClosing) {
    // special case for <script> in non-strict mode.
    if (!parser.noscript && parser.tagName.toLowerCase() === "script") {
      parser.state = S.SCRIPT
    } else {
      parser.state = S.TEXT
    }
    parser.tag = null
    parser.tagName = ""
  }
  parser.attribName = parser.attribValue = ""
  parser.attribList.length = 0
}

function closeTag (parser) {
  if (!parser.tagName) {
    strictFail(parser, "Weird empty close tag.")
    parser.textNode += "</>"
    parser.state = S.TEXT
    return
  }

  if (parser.script) {
    if (parser.tagName !== "script") {
      parser.script += "</" + parser.tagName + ">"
      parser.tagName = ""
      parser.state = S.SCRIPT
      return
    }
    emitNode(parser, "onscript", parser.script)
    parser.script = ""
  }

  // first make sure that the closing tag actually exists.
  // <a><b></c></b></a> will close everything, otherwise.
  var t = parser.tags.length
  var tagName = parser.tagName
  if (!parser.strict) tagName = tagName[parser.looseCase]()
  var closeTo = tagName
  while (t --) {
    var close = parser.tags[t]
    if (close.name !== closeTo) {
      // fail the first time in strict mode
      strictFail(parser, "Unexpected close tag")
    } else break
  }

  // didn't find it.  we already failed for strict, so just abort.
  if (t < 0) {
    strictFail(parser, "Unmatched closing tag: "+parser.tagName)
    parser.textNode += "</" + parser.tagName + ">"
    parser.state = S.TEXT
    return
  }
  parser.tagName = tagName
  var s = parser.tags.length
  while (s --> t) {
    var tag = parser.tag = parser.tags.pop()
    parser.tagName = parser.tag.name
    emitNode(parser, "onclosetag", parser.tagName)

    var x = {}
    for (var i in tag.ns) x[i] = tag.ns[i]

    var parent = parser.tags[parser.tags.length - 1] || parser
    if (parser.opt.xmlns && tag.ns !== parent.ns) {
      // remove namespace bindings introduced by tag
      Object.keys(tag.ns).forEach(function (p) {
        var n = tag.ns[p]
        emitNode(parser, "onclosenamespace", { prefix: p, uri: n })
      })
    }
  }
  if (t === 0) parser.closedRoot = true
  parser.tagName = parser.attribValue = parser.attribName = ""
  parser.attribList.length = 0
  parser.state = S.TEXT
}

function parseEntity (parser) {
  var entity = parser.entity
    , entityLC = entity.toLowerCase()
    , num
    , numStr = ""
  if (parser.ENTITIES[entity])
    return parser.ENTITIES[entity]
  if (parser.ENTITIES[entityLC])
    return parser.ENTITIES[entityLC]
  entity = entityLC
  if (entity.charAt(0) === "#") {
    if (entity.charAt(1) === "x") {
      entity = entity.slice(2)
      num = parseInt(entity, 16)
      numStr = num.toString(16)
    } else {
      entity = entity.slice(1)
      num = parseInt(entity, 10)
      numStr = num.toString(10)
    }
  }
  entity = entity.replace(/^0+/, "")
  if (numStr.toLowerCase() !== entity) {
    strictFail(parser, "Invalid character entity")
    return "&"+parser.entity + ";"
  }

  return String.fromCodePoint(num)
}

function write (chunk) {
  var parser = this
  if (this.error) throw this.error
  if (parser.closed) return error(parser,
    "Cannot write after close. Assign an onready handler.")
  if (chunk === null) return end(parser)
  var i = 0, c = ""
  while (parser.c = c = chunk.charAt(i++)) {
    if (parser.trackPosition) {
      parser.position ++
      if (c === "\n") {
        parser.line ++
        parser.column = 0
      } else parser.column ++
    }
    switch (parser.state) {

      case S.BEGIN:
        if (c === "<") {
          parser.state = S.OPEN_WAKA
          parser.startTagPosition = parser.position
        } else if (not(whitespace,c)) {
          // have to process this as a text node.
          // weird, but happens.
          strictFail(parser, "Non-whitespace before first tag.")
          parser.textNode = c
          parser.state = S.TEXT
        }
      continue

      case S.TEXT:
        if (parser.sawRoot && !parser.closedRoot) {
          var starti = i-1
          while (c && c!=="<" && c!=="&") {
            c = chunk.charAt(i++)
            if (c && parser.trackPosition) {
              parser.position ++
              if (c === "\n") {
                parser.line ++
                parser.column = 0
              } else parser.column ++
            }
          }
          parser.textNode += chunk.substring(starti, i-1)
        }
        if (c === "<") {
          parser.state = S.OPEN_WAKA
          parser.startTagPosition = parser.position
        } else {
          if (not(whitespace, c) && (!parser.sawRoot || parser.closedRoot))
            strictFail(parser, "Text data outside of root node.")
          if (c === "&") parser.state = S.TEXT_ENTITY
          else parser.textNode += c
        }
      continue

      case S.SCRIPT:
        // only non-strict
        if (c === "<") {
          parser.state = S.SCRIPT_ENDING
        } else parser.script += c
      continue

      case S.SCRIPT_ENDING:
        if (c === "/") {
          parser.state = S.CLOSE_TAG
        } else {
          parser.script += "<" + c
          parser.state = S.SCRIPT
        }
      continue

      case S.OPEN_WAKA:
        // either a /, ?, !, or text is coming next.
        if (c === "!") {
          parser.state = S.SGML_DECL
          parser.sgmlDecl = ""
        } else if (is(whitespace, c)) {
          // wait for it...
        } else if (is(nameStart,c)) {
          parser.state = S.OPEN_TAG
          parser.tagName = c
        } else if (c === "/") {
          parser.state = S.CLOSE_TAG
          parser.tagName = ""
        } else if (c === "?") {
          parser.state = S.PROC_INST
          parser.procInstName = parser.procInstBody = ""
        } else {
          strictFail(parser, "Unencoded <")
          // if there was some whitespace, then add that in.
          if (parser.startTagPosition + 1 < parser.position) {
            var pad = parser.position - parser.startTagPosition
            c = new Array(pad).join(" ") + c
          }
          parser.textNode += "<" + c
          parser.state = S.TEXT
        }
      continue

      case S.SGML_DECL:
        if ((parser.sgmlDecl+c).toUpperCase() === CDATA) {
          emitNode(parser, "onopencdata")
          parser.state = S.CDATA
          parser.sgmlDecl = ""
          parser.cdata = ""
        } else if (parser.sgmlDecl+c === "--") {
          parser.state = S.COMMENT
          parser.comment = ""
          parser.sgmlDecl = ""
        } else if ((parser.sgmlDecl+c).toUpperCase() === DOCTYPE) {
          parser.state = S.DOCTYPE
          if (parser.doctype || parser.sawRoot) strictFail(parser,
            "Inappropriately located doctype declaration")
          parser.doctype = ""
          parser.sgmlDecl = ""
        } else if (c === ">") {
          emitNode(parser, "onsgmldeclaration", parser.sgmlDecl)
          parser.sgmlDecl = ""
          parser.state = S.TEXT
        } else if (is(quote, c)) {
          parser.state = S.SGML_DECL_QUOTED
          parser.sgmlDecl += c
        } else parser.sgmlDecl += c
      continue

      case S.SGML_DECL_QUOTED:
        if (c === parser.q) {
          parser.state = S.SGML_DECL
          parser.q = ""
        }
        parser.sgmlDecl += c
      continue

      case S.DOCTYPE:
        if (c === ">") {
          parser.state = S.TEXT
          emitNode(parser, "ondoctype", parser.doctype)
          parser.doctype = true // just remember that we saw it.
        } else {
          parser.doctype += c
          if (c === "[") parser.state = S.DOCTYPE_DTD
          else if (is(quote, c)) {
            parser.state = S.DOCTYPE_QUOTED
            parser.q = c
          }
        }
      continue

      case S.DOCTYPE_QUOTED:
        parser.doctype += c
        if (c === parser.q) {
          parser.q = ""
          parser.state = S.DOCTYPE
        }
      continue

      case S.DOCTYPE_DTD:
        parser.doctype += c
        if (c === "]") parser.state = S.DOCTYPE
        else if (is(quote,c)) {
          parser.state = S.DOCTYPE_DTD_QUOTED
          parser.q = c
        }
      continue

      case S.DOCTYPE_DTD_QUOTED:
        parser.doctype += c
        if (c === parser.q) {
          parser.state = S.DOCTYPE_DTD
          parser.q = ""
        }
      continue

      case S.COMMENT:
        if (c === "-") parser.state = S.COMMENT_ENDING
        else parser.comment += c
      continue

      case S.COMMENT_ENDING:
        if (c === "-") {
          parser.state = S.COMMENT_ENDED
          parser.comment = textopts(parser.opt, parser.comment)
          if (parser.comment) emitNode(parser, "oncomment", parser.comment)
          parser.comment = ""
        } else {
          parser.comment += "-" + c
          parser.state = S.COMMENT
        }
      continue

      case S.COMMENT_ENDED:
        if (c !== ">") {
          strictFail(parser, "Malformed comment")
          // allow <!-- blah -- bloo --> in non-strict mode,
          // which is a comment of " blah -- bloo "
          parser.comment += "--" + c
          parser.state = S.COMMENT
        } else parser.state = S.TEXT
      continue

      case S.CDATA:
        if (c === "]") parser.state = S.CDATA_ENDING
        else parser.cdata += c
      continue

      case S.CDATA_ENDING:
        if (c === "]") parser.state = S.CDATA_ENDING_2
        else {
          parser.cdata += "]" + c
          parser.state = S.CDATA
        }
      continue

      case S.CDATA_ENDING_2:
        if (c === ">") {
          if (parser.cdata) emitNode(parser, "oncdata", parser.cdata)
          emitNode(parser, "onclosecdata")
          parser.cdata = ""
          parser.state = S.TEXT
        } else if (c === "]") {
          parser.cdata += "]"
        } else {
          parser.cdata += "]]" + c
          parser.state = S.CDATA
        }
      continue

      case S.PROC_INST:
        if (c === "?") parser.state = S.PROC_INST_ENDING
        else if (is(whitespace, c)) parser.state = S.PROC_INST_BODY
        else parser.procInstName += c
      continue

      case S.PROC_INST_BODY:
        if (!parser.procInstBody && is(whitespace, c)) continue
        else if (c === "?") parser.state = S.PROC_INST_ENDING
        else parser.procInstBody += c
      continue

      case S.PROC_INST_ENDING:
        if (c === ">") {
          emitNode(parser, "onprocessinginstruction", {
            name : parser.procInstName,
            body : parser.procInstBody
          })
          parser.procInstName = parser.procInstBody = ""
          parser.state = S.TEXT
        } else {
          parser.procInstBody += "?" + c
          parser.state = S.PROC_INST_BODY
        }
      continue

      case S.OPEN_TAG:
        if (is(nameBody, c)) parser.tagName += c
        else {
          newTag(parser)
          if (c === ">") openTag(parser)
          else if (c === "/") parser.state = S.OPEN_TAG_SLASH
          else {
            if (not(whitespace, c)) strictFail(
              parser, "Invalid character in tag name")
            parser.state = S.ATTRIB
          }
        }
      continue

      case S.OPEN_TAG_SLASH:
        if (c === ">") {
          openTag(parser, true)
          closeTag(parser)
        } else {
          strictFail(parser, "Forward-slash in opening tag not followed by >")
          parser.state = S.ATTRIB
        }
      continue

      case S.ATTRIB:
        // haven't read the attribute name yet.
        if (is(whitespace, c)) continue
        else if (c === ">") openTag(parser)
        else if (c === "/") parser.state = S.OPEN_TAG_SLASH
        else if (is(nameStart, c)) {
          parser.attribName = c
          parser.attribValue = ""
          parser.state = S.ATTRIB_NAME
        } else strictFail(parser, "Invalid attribute name")
      continue

      case S.ATTRIB_NAME:
        if (c === "=") parser.state = S.ATTRIB_VALUE
        else if (c === ">") {
          strictFail(parser, "Attribute without value")
          parser.attribValue = parser.attribName
          attrib(parser)
          openTag(parser)
        }
        else if (is(whitespace, c)) parser.state = S.ATTRIB_NAME_SAW_WHITE
        else if (is(nameBody, c)) parser.attribName += c
        else strictFail(parser, "Invalid attribute name")
      continue

      case S.ATTRIB_NAME_SAW_WHITE:
        if (c === "=") parser.state = S.ATTRIB_VALUE
        else if (is(whitespace, c)) continue
        else {
          strictFail(parser, "Attribute without value")
          parser.tag.attributes[parser.attribName] = ""
          parser.attribValue = ""
          emitNode(parser, "onattribute",
                   { name : parser.attribName, value : "" })
          parser.attribName = ""
          if (c === ">") openTag(parser)
          else if (is(nameStart, c)) {
            parser.attribName = c
            parser.state = S.ATTRIB_NAME
          } else {
            strictFail(parser, "Invalid attribute name")
            parser.state = S.ATTRIB
          }
        }
      continue

      case S.ATTRIB_VALUE:
        if (is(whitespace, c)) continue
        else if (is(quote, c)) {
          parser.q = c
          parser.state = S.ATTRIB_VALUE_QUOTED
        } else {
          strictFail(parser, "Unquoted attribute value")
          parser.state = S.ATTRIB_VALUE_UNQUOTED
          parser.attribValue = c
        }
      continue

      case S.ATTRIB_VALUE_QUOTED:
        if (c !== parser.q) {
          if (c === "&") parser.state = S.ATTRIB_VALUE_ENTITY_Q
          else parser.attribValue += c
          continue
        }
        attrib(parser)
        parser.q = ""
        parser.state = S.ATTRIB_VALUE_CLOSED
      continue

      case S.ATTRIB_VALUE_CLOSED:
        if (is(whitespace, c)) {
          parser.state = S.ATTRIB
        } else if (c === ">") openTag(parser)
        else if (c === "/") parser.state = S.OPEN_TAG_SLASH
        else if (is(nameStart, c)) {
          strictFail(parser, "No whitespace between attributes")
          parser.attribName = c
          parser.attribValue = ""
          parser.state = S.ATTRIB_NAME
        } else strictFail(parser, "Invalid attribute name")
      continue

      case S.ATTRIB_VALUE_UNQUOTED:
        if (not(attribEnd,c)) {
          if (c === "&") parser.state = S.ATTRIB_VALUE_ENTITY_U
          else parser.attribValue += c
          continue
        }
        attrib(parser)
        if (c === ">") openTag(parser)
        else parser.state = S.ATTRIB
      continue

      case S.CLOSE_TAG:
        if (!parser.tagName) {
          if (is(whitespace, c)) continue
          else if (not(nameStart, c)) {
            if (parser.script) {
              parser.script += "</" + c
              parser.state = S.SCRIPT
            } else {
              strictFail(parser, "Invalid tagname in closing tag.")
            }
          } else parser.tagName = c
        }
        else if (c === ">") closeTag(parser)
        else if (is(nameBody, c)) parser.tagName += c
        else if (parser.script) {
          parser.script += "</" + parser.tagName
          parser.tagName = ""
          parser.state = S.SCRIPT
        } else {
          if (not(whitespace, c)) strictFail(parser,
            "Invalid tagname in closing tag")
          parser.state = S.CLOSE_TAG_SAW_WHITE
        }
      continue

      case S.CLOSE_TAG_SAW_WHITE:
        if (is(whitespace, c)) continue
        if (c === ">") closeTag(parser)
        else strictFail(parser, "Invalid characters in closing tag")
      continue

      case S.TEXT_ENTITY:
      case S.ATTRIB_VALUE_ENTITY_Q:
      case S.ATTRIB_VALUE_ENTITY_U:
        switch(parser.state) {
          case S.TEXT_ENTITY:
            var returnState = S.TEXT, buffer = "textNode"
          break

          case S.ATTRIB_VALUE_ENTITY_Q:
            var returnState = S.ATTRIB_VALUE_QUOTED, buffer = "attribValue"
          break

          case S.ATTRIB_VALUE_ENTITY_U:
            var returnState = S.ATTRIB_VALUE_UNQUOTED, buffer = "attribValue"
          break
        }
        if (c === ";") {
          parser[buffer] += parseEntity(parser)
          parser.entity = ""
          parser.state = returnState
        }
        else if (is(entity, c)) parser.entity += c
        else {
          strictFail(parser, "Invalid character entity")
          parser[buffer] += "&" + parser.entity + c
          parser.entity = ""
          parser.state = returnState
        }
      continue

      default:
        throw new Error(parser, "Unknown state: " + parser.state)
    }
  } // while
  // cdata blocks can get very big under normal conditions. emit and move on.
  // if (parser.state === S.CDATA && parser.cdata) {
  //   emitNode(parser, "oncdata", parser.cdata)
  //   parser.cdata = ""
  // }
  if (parser.position >= parser.bufferCheckPosition) checkBufferLength(parser)
  return parser
}

/*! http://mths.be/fromcodepoint v0.1.0 by @mathias */
if (!String.fromCodePoint) {
        (function() {
                var stringFromCharCode = String.fromCharCode;
                var floor = Math.floor;
                var fromCodePoint = function() {
                        var MAX_SIZE = 0x4000;
                        var codeUnits = [];
                        var highSurrogate;
                        var lowSurrogate;
                        var index = -1;
                        var length = arguments.length;
                        if (!length) {
                                return '';
                        }
                        var result = '';
                        while (++index < length) {
                                var codePoint = Number(arguments[index]);
                                if (
                                        !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
                                        codePoint < 0 || // not a valid Unicode code point
                                        codePoint > 0x10FFFF || // not a valid Unicode code point
                                        floor(codePoint) != codePoint // not an integer
                                ) {
                                        throw RangeError('Invalid code point: ' + codePoint);
                                }
                                if (codePoint <= 0xFFFF) { // BMP code point
                                        codeUnits.push(codePoint);
                                } else { // Astral code point; split in surrogate halves
                                        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
                                        codePoint -= 0x10000;
                                        highSurrogate = (codePoint >> 10) + 0xD800;
                                        lowSurrogate = (codePoint % 0x400) + 0xDC00;
                                        codeUnits.push(highSurrogate, lowSurrogate);
                                }
                                if (index + 1 == length || codeUnits.length > MAX_SIZE) {
                                        result += stringFromCharCode.apply(null, codeUnits);
                                        codeUnits.length = 0;
                                }
                        }
                        return result;
                };
                if (Object.defineProperty) {
                        Object.defineProperty(String, 'fromCodePoint', {
                                'value': fromCodePoint,
                                'configurable': true,
                                'writable': true
                        });
                } else {
                        String.fromCodePoint = fromCodePoint;
                }
        }());
}

})(typeof exports === "undefined" ? sax = {} : exports);

}).call(this,require("buffer").Buffer)
},{"buffer":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/buffer/index.js","stream":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/stream-browserify/index.js","string_decoder":"/Users/aolson/Developer/ofx4js/node_modules/browserify/node_modules/string_decoder/index.js"}],"/Users/aolson/Developer/ofx4js/node_modules/uuid/rng-browser.js":[function(require,module,exports){
(function (global){

var rng;

if (global.crypto && crypto.getRandomValues) {
  // WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto
  // Moderately fast, high quality
  var _rnds8 = new Uint8Array(16);
  rng = function whatwgRNG() {
    crypto.getRandomValues(_rnds8);
    return _rnds8;
  };
}

if (!rng) {
  // Math.random()-based (RNG)
  //
  // If all else fails, use Math.random().  It's fast, but is of unspecified
  // quality.
  var  _rnds = new Array(16);
  rng = function() {
    for (var i = 0, r; i < 16; i++) {
      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
      _rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
    }

    return _rnds;
  };
}

module.exports = rng;


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],"/Users/aolson/Developer/ofx4js/node_modules/uuid/uuid.js":[function(require,module,exports){
//     uuid.js
//
//     Copyright (c) 2010-2012 Robert Kieffer
//     MIT License - http://opensource.org/licenses/mit-license.php

// Unique ID creation requires a high quality random # generator.  We feature
// detect to determine the best RNG source, normalizing to a function that
// returns 128-bits of randomness, since that's what's usually required
var _rng = require('./rng');

// Maps for number <-> hex string conversion
var _byteToHex = [];
var _hexToByte = {};
for (var i = 0; i < 256; i++) {
  _byteToHex[i] = (i + 0x100).toString(16).substr(1);
  _hexToByte[_byteToHex[i]] = i;
}

// **`parse()` - Parse a UUID into it's component bytes**
function parse(s, buf, offset) {
  var i = (buf && offset) || 0, ii = 0;

  buf = buf || [];
  s.toLowerCase().replace(/[0-9a-f]{2}/g, function(oct) {
    if (ii < 16) { // Don't overflow!
      buf[i + ii++] = _hexToByte[oct];
    }
  });

  // Zero out remaining bytes if string was short
  while (ii < 16) {
    buf[i + ii++] = 0;
  }

  return buf;
}

// **`unparse()` - Convert UUID byte array (ala parse()) into a string**
function unparse(buf, offset) {
  var i = offset || 0, bth = _byteToHex;
  return  bth[buf[i++]] + bth[buf[i++]] +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] +
          bth[buf[i++]] + bth[buf[i++]] +
          bth[buf[i++]] + bth[buf[i++]];
}

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html

// random #'s we need to init node and clockseq
var _seedBytes = _rng();

// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
var _nodeId = [
  _seedBytes[0] | 0x01,
  _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]
];

// Per 4.2.2, randomize (14 bit) clockseq
var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;

// Previous uuid creation time
var _lastMSecs = 0, _lastNSecs = 0;

// See https://github.com/broofa/node-uuid for API details
function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || [];

  options = options || {};

  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

  // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

  // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock
  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

  // Time since last uuid creation (in msecs)
  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

  // Per 4.2.1.2, Bump clockseq on clock regression
  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  }

  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  }

  // Per 4.2.1.2 Throw error if too many uuids are requested
  if (nsecs >= 10000) {
    throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;

  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
  msecs += 12219292800000;

  // `time_low`
  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff;

  // `time_mid`
  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff;

  // `time_high_and_version`
  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
  b[i++] = tmh >>> 16 & 0xff;

  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
  b[i++] = clockseq >>> 8 | 0x80;

  // `clock_seq_low`
  b[i++] = clockseq & 0xff;

  // `node`
  var node = options.node || _nodeId;
  for (var n = 0; n < 6; n++) {
    b[i + n] = node[n];
  }

  return buf ? buf : unparse(b);
}

// **`v4()` - Generate random UUID**

// See https://github.com/broofa/node-uuid for API details
function v4(options, buf, offset) {
  // Deprecated - 'format' argument, as supported in v1.2
  var i = buf && offset || 0;

  if (typeof(options) == 'string') {
    buf = options == 'binary' ? new Array(16) : null;
    options = null;
  }
  options = options || {};

  var rnds = options.random || (options.rng || _rng)();

  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
  rnds[6] = (rnds[6] & 0x0f) | 0x40;
  rnds[8] = (rnds[8] & 0x3f) | 0x80;

  // Copy bytes to buffer, if provided
  if (buf) {
    for (var ii = 0; ii < 16; ii++) {
      buf[i + ii] = rnds[ii];
    }
  }

  return buf || unparse(rnds);
}

// Export public API
var uuid = v4;
uuid.v1 = v1;
uuid.v4 = v4;
uuid.parse = parse;
uuid.unparse = unparse;

module.exports = uuid;

},{"./rng":"/Users/aolson/Developer/ofx4js/node_modules/uuid/rng-browser.js"}],"/Users/aolson/Developer/ofx4js/src/client/AccountStatement.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * @class
 */
function AccountStatement() {
}

/**
 * The currency code.
 *
 * @return {String} The currency code.
 * @see java.util.Currency#getCurrencyCode()
 */
AccountStatement.prototype.getCurrencyCode = function() { throw new Error("not implemented"); };

/**
 * The transaction list.
 *
 * @return {TransactionList} The transaction list.
 */
AccountStatement.prototype.getTransactionList = function() { throw new Error("not implemented"); };

/**
 * The ledger balance.
 *
 * @return {BalanceInfo} The ledger balance.
 */
AccountStatement.prototype.getLedgerBalance = function() { throw new Error("not implemented"); };

/**
 * The available balance.
 *
 * @return {BalanceInfo} The available balance.
 */
AccountStatement.prototype.getAvailableBalance = function() { throw new Error("not implemented"); };


module.exports = AccountStatement;

},{}],"/Users/aolson/Developer/ofx4js/src/client/BankAccount.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * @class
 */
function BankAccount() {
}

/**
 * The details of the account.
 *
 * @return {BankAccountDetails} The details of the account.
 */
BankAccount.prototype.getDetails = function() { throw new Error("not implemented"); };


module.exports = BankAccount;

},{}],"/Users/aolson/Developer/ofx4js/src/client/CreditCardAccount.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * @class
 */
function CreditCardAccount() {
}

/**
 * The details of the credit card account.
 *
 * @return {CreditCardAccountDetails} The details of the credit card account.
 */
CreditCardAccount.prototype.getDetails = function() { throw new Error("not implemented"); };


module.exports = CreditCardAccount;

},{}],"/Users/aolson/Developer/ofx4js/src/client/FinancialInstitution.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * @class
 */
function FinancialInstitution() {
}

/**
 * The financial institution data defining this FI.
 *
 * @return {FinancialInstitutionData} The financial institution data.
 */
FinancialInstitution.prototype.getData = function() { throw new Error("not implemented"); };

/**
 * Read the specified financial institution profile. Implies a network call.
 *
 * @return {FinancialInstitutionProfile} The profile.
 * @throws OFXException if something goes awry.
 */
FinancialInstitution.prototype.readProfile = function() { throw new Error("not implemented"); };

/**
 * Read the account profiles of the specified user.
 *
 * @param {String} username The username.
 * @param {String} password The password.
 * @return {Collection<AccountProfile>} The profiles.
 */
FinancialInstitution.prototype.readAccountProfiles = function(/*username, password*/) { throw new Error("not implemented"); };

/**
 * Load a bank account.
 *
 * @param {BankAccountDetails} details The bank account details.
 * @param {String} username The username.
 * @param {String} password The password.
 * @return {BankAccount} The bank account.
 */
FinancialInstitution.prototype.loadBankAccount = function(/*details, username, password*/) { throw new Error("not implemented"); };

/**
 * Load a credit card account.
 *
 * @param {CreditCardAccountDetails} details The credit card account details.
 * @param {String} username The username.
 * @param {String} password The password.
 * @return {CreditCardAccount} The credit card account.
 */
FinancialInstitution.prototype.loadCreditCardAccount = function(/*details, username, password*/) { throw new Error("not implemented"); };

/**
 * Load an investment account.
 *
 * @param {InvestmentAccountDetails} details The investment account details.
 * @param {String} username The username.
 * @param {String} password The password.
 * @return {InvestmentAccount} The investment account.
 */
FinancialInstitution.prototype.loadInvestmentAccount = function(/*details, username, password*/) { throw new Error("not implemented"); };


module.exports = FinancialInstitution;

},{}],"/Users/aolson/Developer/ofx4js/src/client/FinancialInstitutionAccount.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * A specific account at a financial institution.
 *
 * @class
 */
function FinancialInstitutionAccount() {
}

/**
 * Read an account statement.
 *
 * @param {Date} start The start date of the statement.
 * @param {Date} end The end date of the statement.
 * @return {AccountStatement} The account statement.
 */
FinancialInstitutionAccount.prototype.readStatement = function(/*start, end*/) { throw new Error("not implemented"); };


module.exports = FinancialInstitutionAccount;

},{}],"/Users/aolson/Developer/ofx4js/src/client/FinancialInstitutionData.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * Interface for core FI data.  This is the base set of information
 * required in order to initiate a connection to an FI server.
 *
 * @author Ryan Heaton
 */
function FinancialInstitutionData() {
}

/**
 * A unique id for this FI.
 *
 * @return {String} A unique id for this FI.
 */
FinancialInstitutionData.prototype.getId = function() { throw new Error("not implemented"); };

/**
 * The id of the FI.
 *
 * @return {String} The id of the FI.
 */
FinancialInstitutionData.prototype.getFinancialInstitutionId = function() { throw new Error("not implemented"); };

/**
 * The name of the FI.
 *
 * @return {String} The name of the FI.
 */
FinancialInstitutionData.prototype.getName = function() { throw new Error("not implemented"); };

/**
 * The OFX organization name.
 *
 * @return {String} The OFX organization name.
 */
FinancialInstitutionData.prototype.getOrganization = function() { throw new Error("not implemented"); };

/**
 * The URL to the OFX server for this institution.
 *
 * @return {URL} The URL to the OFX server for this institution.
 */
FinancialInstitutionData.prototype.getOFXURL = function() { throw new Error("not implemented"); };

/**
 * The broker id.
 *
 * @return {String} The broker id.
 */
FinancialInstitutionData.prototype.getBrokerId = function() { throw new Error("not implemented"); };


module.exports = FinancialInstitutionData;

},{}],"/Users/aolson/Developer/ofx4js/src/client/FinancialInstitutionDataStore.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * @class
 */
function FinancialInstitutionDataStore() {
}

/**
 * Get the data for the financial institution of the specified id.
 *
 * @param {String} fid The id of the financial institution.
 * @return {FinancialInstitutionData} The financial institution data, or null if none exists for the specified id.
 */
FinancialInstitutionDataStore.prototype.getInstitutionData = function(/*fid*/) { throw new Error("not implemented"); };

/**
 * Get the whole list of financial institution data.
 *
 * @return {FinancialInstitutionData[]} The whole list of financial institution data.
 */
FinancialInstitutionDataStore.prototype.getInstitutionDataList = function() { throw new Error("not implemented"); };


module.exports = FinancialInstitutionDataStore;

},{}],"/Users/aolson/Developer/ofx4js/src/client/FinancialInstitutionProfile.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * @class
 */
function FinancialInstitutionProfile() {
}

/**
 * When this profile was last updated.
 *
 * @return {Date} When this profile was last updated.
 */
FinancialInstitutionProfile.prototype.getLastUpdated = function() { throw new Error("not implemented"); };

/**
 * The name of the financial institution.
 *
 * @return {String} The name of the financial institution.
 */
FinancialInstitutionProfile.prototype.getFinancialInstitutionName = function() { throw new Error("not implemented"); };

/**
 * The address of the financial institution.
 *
 * @return {String} The address of the financial institution.
 */
FinancialInstitutionProfile.prototype.getAddress1 = function() { throw new Error("not implemented"); };

/**
 * The address of the financial institution.
 *
 * @return {String} The address of the financial institution.
 */
FinancialInstitutionProfile.prototype.getAddress2 = function() { throw new Error("not implemented"); };

/**
 * The address of the financial institution.
 *
 * @return {String} The address of the financial institution.
 */
FinancialInstitutionProfile.prototype.getAddress3 = function() { throw new Error("not implemented"); };

/**
 * The city of the financial institution.
 *
 * @return {String} The city of the financial institution.
 */
FinancialInstitutionProfile.prototype.getCity = function() { throw new Error("not implemented"); };

/**
 * The state of this financial institution.
 *
 * @return {String} The state of this financial institution.
 */
FinancialInstitutionProfile.prototype.getState = function() { throw new Error("not implemented"); };

/**
 * The postal code of this financial institution.
 *
 * @return {String} The postal code of this financial institution.
 */
FinancialInstitutionProfile.prototype.getZip = function() { throw new Error("not implemented"); };

/**
 * The country code for this financial institution.
 *
 * @return {String} The country code for this financial institution.
 * @see java.util.Locale#getISO3Country()
 */
FinancialInstitutionProfile.prototype.getCountry = function() { throw new Error("not implemented"); };

/**
 * The phone number to customer service.
 *
 * @return {String} The phone number to customer service.
 */
FinancialInstitutionProfile.prototype.getCustomerServicePhone = function() { throw new Error("not implemented"); };

/**
 * The phone number to tech support.
 *
 * @return {String} The phone number to tech support.
 */
FinancialInstitutionProfile.prototype.getTechnicalSupportPhone = function() { throw new Error("not implemented"); };

/**
 * The fax number.
 *
 * @return {String} The fax number.
 */
FinancialInstitutionProfile.prototype.getFax = function() { throw new Error("not implemented"); };

/**
 * URL for the financial institution.
 *
 * @return {String} URL for the financial institution.
 */
FinancialInstitutionProfile.prototype.getSiteURL = function() { throw new Error("not implemented"); };

/**
 * The email for this FI
 *
 * @return {String} The email for this FI
 */
FinancialInstitutionProfile.prototype.getEmail = function() { throw new Error("not implemented"); };

/**
 * Get the message set profile for the specified message set.
 *
 * @param {MessageSetType} type The message set type for which to retrieve the profile.
 * @return {MessageSetProfile} The message set profile information, or null if the FI doesn't support any message sets of the specified type.
 * @throws IllegalStateException If multiple versions of the specified message set exist.
 */
FinancialInstitutionProfile.prototype.getMessageSetProfile = function(/*type*/) { throw new Error("not implemented"); };

/**
 * Get the message set profile for the specified message set and the specified version.
 *
 * @param {MessageSetType} type The message set type for which to retrieve the profile.
 * @param {String} version The version for which to retrieve the profile.
 * @return {MessageSetProfile} The message set profile information, or null if the FI doesn't support the specified message set of the specified version.
 */
FinancialInstitutionProfile.prototype.getMessageSetProfile = function(/*type, version*/) { throw new Error("not implemented"); };

/**
 * Get the signon profile for the specified message set.
 *
 * @param {MessageSetProfile} messageSet The message set.
 * @return {SignonProfile} The signon profile, or null if none was found.
 */
FinancialInstitutionProfile.prototype.getSignonProfile = function(/*messageSet*/) { throw new Error("not implemented"); };


module.exports = FinancialInstitutionProfile;

},{}],"/Users/aolson/Developer/ofx4js/src/client/FinancialInstitutionService.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * @class
 */
function FinancialInstitutionService() {
}

/**
 * Get the financial institution by the specified id.
 *
 * @param {String} fid The financial institution id.
 * @return {FinancialInstitution} The financial institution, or null if not found.
 */
FinancialInstitutionService.prototype.getFinancialInstitution = function(/*fid*/) { throw new Error("not implemented"); };

/**
 * Get the financial institution by the specified data.
 *
 * @param {FinancialInstitutionData} data The financial institution data.
 * @return {FinancialInstitution} The financial institution, or null if not found.
 */
FinancialInstitutionService.prototype.getFinancialInstitution = function(/*data*/) { throw new Error("not implemented"); };


module.exports = FinancialInstitutionService;

},{}],"/Users/aolson/Developer/ofx4js/src/client/InvestmentAccount.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * @class
 */
function InvestmentAccount() {
}

/**
 * Read an account statement.
 *
 * @param {Date} start The start date of the statement.
 * @param {Date} end The end date of the statement.
 * @throws OFXException if there's an error talking to the brokerage
 * @return {InvestmentStatementResponse} The account statement.
 */
InvestmentAccount.prototype.readStatement = function(/*start, end*/) { throw new Error("not implemented"); };

/**
 * Reads a list of securities from the brokerage
 *
 * @param {SecurityRequest[]} securities the securities to read
 * @return {SecurityList} The security response containing the security infos
 * @throws OFXException if there's an error talking to the brokerage
 */
InvestmentAccount.prototype.readSecurityList = function(/*securities*/) { throw new Error("not implemented"); };

/**
 * The details of the account.
 *
 * @return {InvestmentAccountDetails} The details of the account.
 */
InvestmentAccount.prototype.getDetails = function() { throw new Error("not implemented"); };


module.exports = InvestmentAccount;

},{}],"/Users/aolson/Developer/ofx4js/src/client/context/DefaultApplicationContext.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../util/inherit");
var OFXApplicationContext = require("./OFXApplicationContext");

/**
 * Default application context.
 * 
 * @class
 */
function DefaultApplicationContext () {

  /**
   * @name DefaultApplicationContext#appId
   * @type String
   * @access private
   */
  this.appId = null;

  /**
   * @name DefaultApplicationContext#appVersion
   * @type String
   * @access private
   */
  this.appVersion = null;
}

inherit(DefaultApplicationContext, "implements", OFXApplicationContext);




DefaultApplicationContext.prototype.DefaultApplicationContext = function(/*String*/ appId, /*String*/ appVersion) {
  this.appId = appId;
  this.appVersion = appVersion;
};


DefaultApplicationContext.prototype.getAppId = function() {
  return this.appId;
};


DefaultApplicationContext.prototype.getAppVersion = function() {
  return this.appVersion;
};




module.exports = DefaultApplicationContext;

},{"../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","./OFXApplicationContext":"/Users/aolson/Developer/ofx4js/src/client/context/OFXApplicationContext.js"}],"/Users/aolson/Developer/ofx4js/src/client/context/OFXApplicationContext.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * The application context.
 *
 * @class
 */
function OFXApplicationContext() {
}

/**
 * The current application id.
 *
 * @return {String} The current application id.
 */
OFXApplicationContext.prototype.getAppId = function() { throw new Error("not implemented"); };

/**
 * The application version.
 *
 * @return {String} The application version.
 */
OFXApplicationContext.prototype.getAppVersion = function() { throw new Error("not implemented"); };


module.exports = OFXApplicationContext;

},{}],"/Users/aolson/Developer/ofx4js/src/client/context/OFXApplicationContextHolder.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var DefaultApplicationContext = require("./DefaultApplicationContext");

/**
 * @class
 */
var OFXApplicationContextHolder = {};


/**
 * @name OFXApplicationContextHolder.CURRENT_CONTEXT
 * @type OFXApplicationContext
 */
OFXApplicationContextHolder.CURRENT_CONTEXT = new DefaultApplicationContext("Money", "1600"); //some apps fail unless you're Quicken or Money...




/**
 * Get the current (thread-safe) context.
 *
 * @return {OFXApplicationContext} The thread-safe context.
 */
OFXApplicationContextHolder.getCurrentContext = function() {
  //todo: implement a strategy (perhaps for thread-local access or something)?
  return OFXApplicationContextHolder.CURRENT_CONTEXT;
};


/**
 * Set the current context.
 *
 * @param {OFXApplicationContext} context The context.
 */
OFXApplicationContextHolder.setCurrentContext = function(context) {
  OFXApplicationContextHolder.CURRENT_CONTEXT = context;
};




module.exports = OFXApplicationContextHolder;

},{"./DefaultApplicationContext":"/Users/aolson/Developer/ofx4js/src/client/context/DefaultApplicationContext.js"}],"/Users/aolson/Developer/ofx4js/src/client/context/index.js":[function(require,module,exports){
"use strict";

module.exports = {
  DefaultApplicationContext: require("./DefaultApplicationContext"),
  OFXApplicationContext: require("./OFXApplicationContext"),
  OFXApplicationContextHolder: require("./OFXApplicationContextHolder"),
};

},{"./DefaultApplicationContext":"/Users/aolson/Developer/ofx4js/src/client/context/DefaultApplicationContext.js","./OFXApplicationContext":"/Users/aolson/Developer/ofx4js/src/client/context/OFXApplicationContext.js","./OFXApplicationContextHolder":"/Users/aolson/Developer/ofx4js/src/client/context/OFXApplicationContextHolder.js"}],"/Users/aolson/Developer/ofx4js/src/client/impl/BankingAccountImpl.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../util/inherit");

var BankAccount = require("../BankAccount");
var BaseAccountImpl = require("./BaseAccountImpl");
var MessageSetType = require("../../domain/data/MessageSetType");
var BankingRequestMessageSet = require("../../domain/data/banking/BankingRequestMessageSet");
var BankStatementRequestTransaction = require("../../domain/data/banking/BankStatementRequestTransaction");
var BankStatementRequest = require("../../domain/data/banking/BankStatementRequest");

/**
 * @class
 * @augments BaseAccountImpl
 */
function BankingAccountImpl(/*BankAccountDetails*/ details, /*String*/ username, /*String*/ password, /*FinancialInstitutionImpl*/ institution) {
  BaseAccountImpl.call(this, details, username, password, institution);
}

inherit(BankingAccountImpl, "extends", BaseAccountImpl);
inherit(BankingAccountImpl, "implements", BankAccount);



BankingAccountImpl.prototype.unwrapStatementResponse = function(/*ResponseEnvelope*/ response) {
  var bankingSet = response.getMessageSet(MessageSetType.banking);
  if (bankingSet === null) {
    throw new Error("No banking response message set.");
  }

  var statementTransactionResponse = bankingSet.getStatementResponse();
  if (statementTransactionResponse === null) {
    throw new Error("No banking statement response transaction.");
  }

  var statement = statementTransactionResponse.getMessage();
  if (statement === null) {
    throw new Error("No banking statement in the transaction.");
  }
  
  return statement;
};


BankingAccountImpl.prototype.createRequestMessageSet = function(/*TransactionWrappedRequestMessage*/ transaction) {
  var bankingRequest = new BankingRequestMessageSet();
  bankingRequest.setStatementRequest(transaction);
  return bankingRequest;
};


BankingAccountImpl.prototype.createTransaction = function() {
  return new BankStatementRequestTransaction();
};


BankingAccountImpl.prototype.createStatementRequest = function(/*BankAccountDetails*/ details, /*StatementRange*/ range) {
  var bankRequest = new BankStatementRequest();
  bankRequest.setAccount(details);
  bankRequest.setStatementRange(range);
  return bankRequest;
};




module.exports = BankingAccountImpl;

},{"../../domain/data/MessageSetType":"/Users/aolson/Developer/ofx4js/src/domain/data/MessageSetType.js","../../domain/data/banking/BankStatementRequest":"/Users/aolson/Developer/ofx4js/src/domain/data/banking/BankStatementRequest.js","../../domain/data/banking/BankStatementRequestTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/banking/BankStatementRequestTransaction.js","../../domain/data/banking/BankingRequestMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/banking/BankingRequestMessageSet.js","../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../BankAccount":"/Users/aolson/Developer/ofx4js/src/client/BankAccount.js","./BaseAccountImpl":"/Users/aolson/Developer/ofx4js/src/client/impl/BaseAccountImpl.js"}],"/Users/aolson/Developer/ofx4js/src/client/impl/BaseAccountImpl.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../util/inherit");

var FinancialInstitutionAccount = require("../FinancialInstitutionAccount");
var BankAccountDetails = require("../../domain/data/banking/BankAccountDetails");
var StatementRange = require("../../domain/data/common/StatementRange");
var CreditCardAccountDetails = require("../../domain/data/creditcard/CreditCardAccountDetails");
var InvestmentAccountDetails = require("../../domain/data/investment/accounts/InvestmentAccountDetails");
var MessageSetType = require("../../domain/data/MessageSetType");


/**
 * Base account implementation. Supports banking and credit card accounts.
 *
 * @class
 */
function BaseAccountImpl() {

  /**
   * @name BaseAccountImpl#details
   * @access private
   */
  this.details = null;

  /**
   * @name BaseAccountImpl#messageType
   * @type MessageSetType
   * @access private
   */
  this.messageType = null;

  /**
   * @name BaseAccountImpl#username
   * @type String
   * @access private
   */
  this.username = null;

  /**
   * @name BaseAccountImpl#password
   * @type String
   * @access private
   */
  this.password = null;

  /**
   * @name BaseAccountImpl#institution
   * @type FinancialInstitutionImpl
   * @access private
   */
  this.institution = null;

  /**
   * @name BaseAccountImpl#OFXException
   * @type throws
   */
  this.OFXException = null;
}

inherit(BaseAccountImpl, "implements", FinancialInstitutionAccount);




BaseAccountImpl.prototype.BaseAccountImpl = function(/*D*/ details, /*String*/ username, /*String*/ password, /*FinancialInstitutionImpl*/ institution) {
  this.details = details;
  this.username = username;
  this.password = password;
  this.institution = institution;
  this.messageType = this.getMessageSetType(details);
};


/**
 * Get the message set type of the specified details.
 *
 * @param details The details.
 * @return {MessageSetType} The message set type.
 */
BaseAccountImpl.prototype.getMessageSetType = function(details) {
  var messageType;
  if (details instanceof BankAccountDetails) {
    messageType = MessageSetType.banking;
  }
  else if (this.getDetails() instanceof CreditCardAccountDetails) {
    messageType = MessageSetType.creditcard;
  }
  else if (this.getDetails() instanceof InvestmentAccountDetails) {
    messageType = MessageSetType.investment;
  }
  else {
    throw new Error("Illegal details: " + this.details.getClass().getName());
  }
  return messageType;
};


BaseAccountImpl.prototype.readStatement = function(/*Date*/ start, /*Date*/ end) {
  var range = new StatementRange();
  range.setIncludeTransactions(true);
  range.setStart(start);
  range.setEnd(end);

  var request = this.institution.createAuthenticatedRequest(this.username, this.password);
  var requestTransaction = this.createTransaction();
  requestTransaction.setWrappedMessage(this.createStatementRequest(this.getDetails(), range));
  request.getMessageSets().add(this.createRequestMessageSet(requestTransaction));

  var response = this.institution.sendRequest(request);
  this.institution.doGeneralValidationChecks(request, response);

  return this.unwrapStatementResponse(response);
};


/**
 * Create a request message set from the specified transaction.
 *
 * @param {TransactionWrappedRequestMessage} transaction The transaction.
 * @return {RequestMessageSet} The request message set.
 */
BaseAccountImpl.prototype.createRequestMessageSet = function(/*transaction*/) { throw new Error("not implemented"); };

/**
 * Create a transaction.
 *
 * @return {TransactionWrappedRequestMessage} The transaction.
 */
BaseAccountImpl.prototype.createTransaction = function() { throw new Error("not implemented"); };

/**
 * Create a statement request.
 *
 * @param details The details.
 * @param {StatementRange} range the range.
 * @return {StatementRequest} The statement request.
 */
BaseAccountImpl.prototype.createStatementRequest = function(/*details, range*/) { throw new Error("not implemented"); };

/**
 * The details of this account.
 *
 * @return The details of this account.
 */
BaseAccountImpl.prototype.getDetails = function() {
  return this.details;
};

/**
 * The message set type.
 *
 * @return {MessageSetType} The message set type.
 */
BaseAccountImpl.prototype.getMessageType = function() {
  return this.messageType;
};




module.exports = BaseAccountImpl;

},{"../../domain/data/MessageSetType":"/Users/aolson/Developer/ofx4js/src/domain/data/MessageSetType.js","../../domain/data/banking/BankAccountDetails":"/Users/aolson/Developer/ofx4js/src/domain/data/banking/BankAccountDetails.js","../../domain/data/common/StatementRange":"/Users/aolson/Developer/ofx4js/src/domain/data/common/StatementRange.js","../../domain/data/creditcard/CreditCardAccountDetails":"/Users/aolson/Developer/ofx4js/src/domain/data/creditcard/CreditCardAccountDetails.js","../../domain/data/investment/accounts/InvestmentAccountDetails":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/accounts/InvestmentAccountDetails.js","../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../FinancialInstitutionAccount":"/Users/aolson/Developer/ofx4js/src/client/FinancialInstitutionAccount.js"}],"/Users/aolson/Developer/ofx4js/src/client/impl/BaseFinancialInstitutionData.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../util/inherit");

var FinancialInstitutionData = require("../FinancialInstitutionData");

/**
 * Base bean for FI data.
 *
 * @author Ryan Heaton
 */
function BaseFinancialInstitutionData () {

  /**
   * @name BaseFinancialInstitutionData#id
   * @type String
   * @access private
   */
  this.id = null;

  /**
   * @name BaseFinancialInstitutionData#fid
   * @type String
   * @access private
   */
  this.fid = null;

  /**
   * @name BaseFinancialInstitutionData#name
   * @type String
   * @access private
   */
  this.name = null;

  /**
   * @name BaseFinancialInstitutionData#organization
   * @type String
   * @access private
   */
  this.organization = null;

  /**
   * @name BaseFinancialInstitutionData#ofxUrl
   * @type URL
   * @access private
   */
  this.ofxUrl = null;

  /**
   * @name BaseFinancialInstitutionData#brokerId
   * @type String
   * @access private
   */
  this.brokerId = null;
}

inherit(BaseFinancialInstitutionData, "implements", FinancialInstitutionData);




BaseFinancialInstitutionData.prototype.BaseFinancialInstitutionData = function() {
};


BaseFinancialInstitutionData.prototype.BaseFinancialInstitutionData = function(/*String*/ id) {
  this.id = id;
};


BaseFinancialInstitutionData.prototype.getId = function() {
  return this.id;
};


BaseFinancialInstitutionData.prototype.setId = function(/*String*/ id) {
  this.id = id;
};


BaseFinancialInstitutionData.prototype.getFinancialInstitutionId = function() {
  return this.fid;
};


BaseFinancialInstitutionData.prototype.setFinancialInstitutionId = function(/*String*/ id) {
  this.fid = id;
};


BaseFinancialInstitutionData.prototype.getName = function() {
  return this.name;
};


BaseFinancialInstitutionData.prototype.setName = function(/*String*/ name) {
  this.name = name;
};


BaseFinancialInstitutionData.prototype.getOrganization = function() {
  return this.organization;
};


BaseFinancialInstitutionData.prototype.setOrganization = function(/*String*/ organization) {
  this.organization = organization;
};


BaseFinancialInstitutionData.prototype.getOFXURL = function() {
  return this.ofxUrl;
};


BaseFinancialInstitutionData.prototype.setOFXURL = function(/*URL*/ OFXURL) {
  this.ofxUrl = OFXURL;
};


BaseFinancialInstitutionData.prototype.getBrokerId = function() {
  return this.brokerId;
};


BaseFinancialInstitutionData.prototype.setBrokerId = function(/*String*/ brokerId) {
  this.brokerId = brokerId;
};




module.exports = BaseFinancialInstitutionData;

},{"../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../FinancialInstitutionData":"/Users/aolson/Developer/ofx4js/src/client/FinancialInstitutionData.js"}],"/Users/aolson/Developer/ofx4js/src/client/impl/CreditCardAccountImpl.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../util/inherit");

var CreditCardAccount = require("../CreditCardAccount");
var BaseAccountImpl = require("./BaseAccountImpl");
var MessageSetType = require("../../domain/data/MessageSetType");
var CreditCardRequestMessageSet = require("../../domain/data/creditcard/CreditCardRequestMessageSet");
var CreditCardStatementRequestTransaction = require("../../domain/data/creditcard/CreditCardStatementRequestTransaction");
var CreditCardStatementRequest = require("../../domain/data/creditcard/CreditCardStatementRequest");

/**
 * @class
 */
function CreditCardAccountImpl(/*CreditCardAccountDetails*/ details, /*String*/ username, /*String*/ password, /*FinancialInstitutionImpl*/ institution) {
  BaseAccountImpl.call(this, details, username, password, institution);
}

inherit(CreditCardAccountImpl, "extends", BaseAccountImpl);
inherit(CreditCardAccountImpl, "implements", CreditCardAccount);




CreditCardAccountImpl.prototype.unwrapStatementResponse = function(/*ResponseEnvelope*/ response) {
  var creditCardSet = response.getMessageSet(MessageSetType.creditcard);
  if (creditCardSet === null) {
    throw new Error("No credit card response message set.");
  }

  var statementTransactionResponse = creditCardSet.getStatementResponse();
  if (statementTransactionResponse === null) {
    throw new Error("No credit card statement response transaction.");
  }

  var statement = statementTransactionResponse.getMessage();
  if (statement === null) {
    throw new Error("No credit card statement in the transaction.");
  }

  return statement;
};


CreditCardAccountImpl.prototype.createRequestMessageSet = function(/*TransactionWrappedRequestMessage*/ transaction) {
  var creditCardRequest = new CreditCardRequestMessageSet();
  creditCardRequest.setStatementRequest(transaction);
  return creditCardRequest;
};


CreditCardAccountImpl.prototype.createTransaction = function() {
  return new CreditCardStatementRequestTransaction();
};


CreditCardAccountImpl.prototype.createStatementRequest = function(/*CreditCardAccountDetails*/ details, /*StatementRange*/ range) {
  var bankRequest = new CreditCardStatementRequest();
  bankRequest.setAccount(details);
  bankRequest.setStatementRange(range);
  return bankRequest;
};




module.exports = CreditCardAccountImpl;

},{"../../domain/data/MessageSetType":"/Users/aolson/Developer/ofx4js/src/domain/data/MessageSetType.js","../../domain/data/creditcard/CreditCardRequestMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/creditcard/CreditCardRequestMessageSet.js","../../domain/data/creditcard/CreditCardStatementRequest":"/Users/aolson/Developer/ofx4js/src/domain/data/creditcard/CreditCardStatementRequest.js","../../domain/data/creditcard/CreditCardStatementRequestTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/creditcard/CreditCardStatementRequestTransaction.js","../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../CreditCardAccount":"/Users/aolson/Developer/ofx4js/src/client/CreditCardAccount.js","./BaseAccountImpl":"/Users/aolson/Developer/ofx4js/src/client/impl/BaseAccountImpl.js"}],"/Users/aolson/Developer/ofx4js/src/client/impl/FIDataList.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * @author Ryan Heaton
 */
function FIDataList () {

  /**
   * @name FIDataList#data
   * @type BaseFinancialInstitutionData[]
   * @access private
   */
  this.data = null;
}





FIDataList.prototype.getData = function() {
  return this.data;
};


FIDataList.prototype.setData = function(/*Collection<BaseFinancialInstitutionData>*/ data) {
  this.data = data;
};




module.exports = FIDataList;

},{}],"/Users/aolson/Developer/ofx4js/src/client/impl/FinancialInstitutionImpl.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../util/inherit");

var OFXApplicationContextHolder = require("../context/OFXApplicationContextHolder");
var Status = require("../../domain/data/common/Status");
var StatusHolder = require("../../domain/data/common/StatusHolder");
var SignonRequest = require("../../domain/data/signon/SignonRequest");
var SignonRequestMessageSet = require("../../domain/data/signon/SignonRequestMessageSet");
var FinancialInstitution = require("../FinancialInstitution");
var ProfileRequestMessageSet = require("../../domain/data/profile/ProfileRequestMessageSet");
var SignupRequestMessageSet = require("../../domain/data/signup/SignupRequestMessageSet");
var BankingAccountImpl = require("./BankingAccountImpl");
var CreditCardAccountImpl = require("./CreditCardAccountImpl");
var InvestmentAccountImpl = require("./InvestmentAccountImpl");
var RequestEnvelope = require("../../domain/data/RequestEnvelope");
var MessageSetType = require("../../domain/data/MessageSetType");
var ApplicationSecurity = require("../../domain/data/ApplicationSecurity");
var TransactionWrappedRequestMessage = require("../../domain/data/TransactionWrappedRequestMessage");
var TransactionWrappedResponseMessage = require("../../domain/data/TransactionWrappedResponseMessage");
var AccountInfoRequest = require("../../domain/data/signup/AccountInfoRequest");
var AccountInfoRequestTransaction = require("../../domain/data/signup/AccountInfoRequestTransaction");
var ProfileRequestTransaction = require("../../domain/data/profile/ProfileRequestTransaction");
var ProfileRequest = require("../../domain/data/profile/ProfileRequest");

/**
 * Base implementation for the financial institution.
 *
 * @class
 */
function FinancialInstitutionImpl () {

  /**
   * @name FinancialInstitutionImpl#connection
   * @type OFXConnection
   * @access private
   */
  this.connection = null;

  /**
   * @name FinancialInstitutionImpl#data
   * @type FinancialInstitutionData
   * @access private
   */
  this.data = null;
}

inherit(FinancialInstitutionImpl, "implements", FinancialInstitution);




FinancialInstitutionImpl.prototype.FinancialInstitutionImpl = function(/*FinancialInstitutionData*/ data, /*OFXConnection*/ connection) {
  if (data === null) {
    throw new Error("Data cannot be null");
  }
  if (connection === null) {
    throw new Error("An OFX connection must be supplied");
  }

  this.data = data;
  this.connection = connection;
};


// Inherited.
FinancialInstitutionImpl.prototype.readProfile = function() {
  var request = this.createAuthenticatedRequest(SignonRequest.ANONYMOUS_USER, SignonRequest.ANONYMOUS_USER);
  var profileRequest = new ProfileRequestMessageSet();
  profileRequest.setProfileRequest(this.createProfileTransaction());
  request.getMessageSets().add(profileRequest);
  var response = this.sendRequest(request, this.getData().getOFXURL());
  this.doGeneralValidationChecks(request, response);
  return this.getProfile(response);
};


// Inherited.
FinancialInstitutionImpl.prototype.readAccountProfiles = function(/*String*/ username, /*String*/ password) {
  var request = this.createAuthenticatedRequest(username, password);
  var signupRequest = new SignupRequestMessageSet();
  signupRequest.setAccountInfoRequest(this.createAccountInfoTransaction());
  request.getMessageSets().add(signupRequest);
  var response = this.sendRequest(request, this.getData().getOFXURL());
  this.doGeneralValidationChecks(request, response);
  return this.getAccountProfiles(response);
};


// Inherited.
FinancialInstitutionImpl.prototype.loadBankAccount = function(/*BankAccountDetails*/ details, /*String*/ username, /*String*/ password) {
  return new BankingAccountImpl(details, username, password, this);
};


// Inherited.
FinancialInstitutionImpl.prototype.loadCreditCardAccount = function(/*CreditCardAccountDetails*/ details, /*String*/ username, /*String*/ password) {
  return new CreditCardAccountImpl(details, username, password, this);
};


// Inherited
FinancialInstitutionImpl.prototype.loadInvestmentAccount = function(/*InvestmentAccountDetails*/ details, /*String*/ username, /*String*/ password) {
  return new InvestmentAccountImpl(details, username, password, this);
};


/**
 * Create an authenticated request envelope.
 *
 * @param {String} username The username.
 * @param {String} password The password.
 * @return {RequestEnvelope} The request envelope.
 */
FinancialInstitutionImpl.prototype.createAuthenticatedRequest = function(username, password) {
  var request = new RequestEnvelope();
  var messageSets = {};
  var signonRequest = new SignonRequestMessageSet();
  signonRequest.setSignonRequest(this.createSignonRequest(username, password));
  messageSets[signonRequest] = signonRequest;
  request.setMessageSets(messageSets);
  return request;
};


/**
 * Send a request.
 *
 * @param {RequestEnvelope} request The request.
 * @return {ResponseEnvelope} The request.
 */
FinancialInstitutionImpl.prototype.sendRequest = function(request) {
  return this.getConnection().sendRequest(request, this.getData().getOFXURL());
};


/**
 * Send a request to a specific URL.
 *
 * @param {RequestEnvelope} request The request.
 * @param {URL} url The url.
 * @return {ResponseEnvelope} The request.
 */
FinancialInstitutionImpl.prototype.sendRequest = function(request, url) {
  return this.getConnection().sendRequest(request, url);
};


/**
 * Open the specified response envelope and look for the profile.
 *
 * @param {ResponseEnvelope} response The response envelope.
 * @return {FinancialInstitutionProfile} The profile.
 */
FinancialInstitutionImpl.prototype.getProfile = function(response) {

  var profileSet = response.getMessageSet(MessageSetType.profile);
  if (profileSet === null) {
    throw new Error("No profile response set.");
  }

  var transactionResponse = profileSet.getProfileResponse();
  if (transactionResponse === null) {
    throw new Error("No profile transaction wrapper.");
  }

  var message = transactionResponse.getMessage();
  if (message === null) {
    throw new Error("No profile message.");
  }
  return message;
};


/**
 * General validation checks on the specified response.
 *
 * @param {RequestEnvelope} request The request.
 * @param {ResponseEnvelope} response Their response.
 * @throws OFXException Upon invalid response.
 */
FinancialInstitutionImpl.prototype.doGeneralValidationChecks = function(request, response) {
  if (response.getSecurity() != ApplicationSecurity.NONE) {
    throw new Error(String.format("Unable to participate in %s security.", response.getSecurity()));
  }

  if (!request.getUID().equals(response.getUID())) {
    throw new Error(String.format("Invalid transaction ID '%s' in response.  Expected: %s", response.getUID(), request));
  }

  for (var requestSet in request.getMessageSets()) {
    var responseSet = response.getMessageSet(requestSet.getType());
    if (responseSet === null) {
      throw new Error("No response for the " + requestSet.getType() + " request.");
    }

    if (responseSet.getType() === MessageSetType.signon) {
      var signonResponse = responseSet.getSignonResponse();

      if (signonResponse === null) {
        throw new Error("No signon response.");
      }
    }

    var transactionIds = {};
    for (var requestMessage in requestSet.getRequestMessages()) {
      if (requestMessage instanceof TransactionWrappedRequestMessage) {
        transactionIds[requestMessage.getUID()] = 1;
      }
    }

    for (var responseMessage in responseSet.getResponseMessages()) {
      if (responseMessage instanceof StatusHolder) {
        this.validateStatus(responseMessage);
      }

      if (responseMessage instanceof TransactionWrappedResponseMessage) {
        var uid = responseMessage.getUID();
        if (uid === null) {
          throw new Error("Invalid response transaction: no UID.");
        }
        else if (!transactionIds.remove(uid)) {
          throw new Error("Response to an unknown transaction: " + uid + ".");
        }
      }
    }

    if (!transactionIds.isEmpty()) {
      throw new Error("No response to the following transactions: " + transactionIds);
    }
  }
};


/**
 * Validate the status of the given status holder.
 *
 * @param {StatusHolder} statusHolder The status holder.
 */
FinancialInstitutionImpl.prototype.validateStatus = function(statusHolder) {
  var status = statusHolder.getStatus();
  if (status === null) {
    throw new Error("Invalid OFX response: no status returned in the " + statusHolder.getStatusHolderName() + " response.");
  }

  if (!Status.KnownCode.SUCCESS.equals(status.getCode())) {
    var message = status.getMessage();
    if (message === null) {
      message = "No response status code.";

      if (status.getCode() !== null) {
        message = status.getCode().getMessage();
      }
    }

    throw new Error(status, "Invalid " + statusHolder.getStatusHolderName() + ": " + message);
  }
};


/**
 * Create a transaction message for a profile request.
 *
 * @return {ProfileRequestTransaction} The transaction message.
 */
FinancialInstitutionImpl.prototype.createProfileTransaction = function() {
  var profileTx = new ProfileRequestTransaction();
  profileTx.setMessage(this.createProfileRequest());
  return profileTx;
};


/**
 * Create a profile request.
 *
 * @return {ProfileRequest} The profile request.
 */
FinancialInstitutionImpl.prototype.createProfileRequest = function() {
  var profileRequest = new ProfileRequest();
  profileRequest.setProfileLastUpdated(new Date(0));
  return profileRequest;
};


/**
 * Create a sign-on request for the specified user.
 *
 * @param {String} username The username.
 * @param {String} password The password.
 * @return {SignonRequest} The signon request.
 */
FinancialInstitutionImpl.prototype.createSignonRequest = function(username, password) {
  var signonRequest = new SignonRequest();
  signonRequest.setTimestamp(new Date());
  var fi = new FinancialInstitution();
  fi.setId(this.getData().getFinancialInstitutionId());
  fi.setOrganization(this.getData().getOrganization());
  signonRequest.setFinancialInstitution(fi);
  signonRequest.setUserId(username);
  signonRequest.setPassword(password);
  signonRequest.setApplicationId(OFXApplicationContextHolder.getCurrentContext().getAppId());
  signonRequest.setApplicationVersion(OFXApplicationContextHolder.getCurrentContext().getAppVersion());
  return signonRequest;
};


/**
 * Create a transaction for an account info request.
 *
 * @return {AccountInfoRequestTransaction} The transaction.
 */
FinancialInstitutionImpl.prototype.createAccountInfoTransaction = function() {
  var transaction = new AccountInfoRequestTransaction();
  transaction.setMessage(this.createAccountInfoRequest());
  return transaction;
};


/**
 * Create an account info request.
 *
 * @return {AccountInfoRequest} The account info request.
 */
FinancialInstitutionImpl.prototype.createAccountInfoRequest = function() {
  return new AccountInfoRequest();
};


/**
 * Get the account profiles for the specified response envelope.
 *
 * @param {ResponseEnvelope} response The response envelope.
 * @return {Collection<AccountProfile>} The account profiles.
 */
FinancialInstitutionImpl.prototype.getAccountProfiles = function(response) {
  var messageSet = response.getMessageSet(MessageSetType.signup);
  if (messageSet === null) {
    throw new Error("No signup response message set.");
  }

  var transaction = messageSet.getAccountInfoResponse();
  if (transaction === null) {
    throw new Error("No account info transaction in the signup response.");
  }

  var infoResponse = transaction.getMessage();
  if (infoResponse === null) {
    throw new Error("No account info response in the transaction.");
  }

  return infoResponse.getAccounts();
};


/**
 * The connection used by this implementation.
 *
 * @return {OFXConnection} The connection used by this implementation.
 */
FinancialInstitutionImpl.prototype.getConnection = function() {
  return this.connection;
};


/**
 * The financial institution data.
 *
 * @return {FinancialInstitutionData} The financial institution data.
 */
FinancialInstitutionImpl.prototype.getData = function() {
  return this.data;
};




module.exports = FinancialInstitutionImpl;

},{"../../domain/data/ApplicationSecurity":"/Users/aolson/Developer/ofx4js/src/domain/data/ApplicationSecurity.js","../../domain/data/MessageSetType":"/Users/aolson/Developer/ofx4js/src/domain/data/MessageSetType.js","../../domain/data/RequestEnvelope":"/Users/aolson/Developer/ofx4js/src/domain/data/RequestEnvelope.js","../../domain/data/TransactionWrappedRequestMessage":"/Users/aolson/Developer/ofx4js/src/domain/data/TransactionWrappedRequestMessage.js","../../domain/data/TransactionWrappedResponseMessage":"/Users/aolson/Developer/ofx4js/src/domain/data/TransactionWrappedResponseMessage.js","../../domain/data/common/Status":"/Users/aolson/Developer/ofx4js/src/domain/data/common/Status.js","../../domain/data/common/StatusHolder":"/Users/aolson/Developer/ofx4js/src/domain/data/common/StatusHolder.js","../../domain/data/profile/ProfileRequest":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/ProfileRequest.js","../../domain/data/profile/ProfileRequestMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/ProfileRequestMessageSet.js","../../domain/data/profile/ProfileRequestTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/ProfileRequestTransaction.js","../../domain/data/signon/SignonRequest":"/Users/aolson/Developer/ofx4js/src/domain/data/signon/SignonRequest.js","../../domain/data/signon/SignonRequestMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/signon/SignonRequestMessageSet.js","../../domain/data/signup/AccountInfoRequest":"/Users/aolson/Developer/ofx4js/src/domain/data/signup/AccountInfoRequest.js","../../domain/data/signup/AccountInfoRequestTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/signup/AccountInfoRequestTransaction.js","../../domain/data/signup/SignupRequestMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/signup/SignupRequestMessageSet.js","../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../FinancialInstitution":"/Users/aolson/Developer/ofx4js/src/client/FinancialInstitution.js","../context/OFXApplicationContextHolder":"/Users/aolson/Developer/ofx4js/src/client/context/OFXApplicationContextHolder.js","./BankingAccountImpl":"/Users/aolson/Developer/ofx4js/src/client/impl/BankingAccountImpl.js","./CreditCardAccountImpl":"/Users/aolson/Developer/ofx4js/src/client/impl/CreditCardAccountImpl.js","./InvestmentAccountImpl":"/Users/aolson/Developer/ofx4js/src/client/impl/InvestmentAccountImpl.js"}],"/Users/aolson/Developer/ofx4js/src/client/impl/FinancialInstitutionServiceImpl.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../util/inherit");

var FinancialInstitutionImpl = require("./FinancialInstitutionImpl");
var FinancialInstitutionService = require("../FinancialInstitutionService");
var OFXV1Connection = require("../net/OFXV1Connection");

/**
 * @class
 */
function FinancialInstitutionServiceImpl () {

  /**
   * @name FinancialInstitutionServiceImpl#connection
   * @type OFXConnection
   * @access private
   */
  this.connection = new OFXV1Connection();

  /**
   * @name FinancialInstitutionServiceImpl#dataStore
   * @type FinancialInstitutionDataStore
   * @access private
   */
  this.dataStore = null;
}

inherit(FinancialInstitutionServiceImpl, "implements", FinancialInstitutionService);




FinancialInstitutionServiceImpl.prototype.getFinancialInstitution = function(/*String*/ fid) {
  return this.dataStore === null ? null : this.getFinancialInstitution(this.getDataStore().getInstitutionData(fid));
};


FinancialInstitutionServiceImpl.prototype.getFinancialInstitution = function(/*FinancialInstitutionData*/ data) {
  if (data === null) {
    return null;
  }

  return new FinancialInstitutionImpl(data, this.getConnection());
};


FinancialInstitutionServiceImpl.prototype.getDataStore = function() {
  return this.dataStore;
};


FinancialInstitutionServiceImpl.prototype.setDataStore = function(/*FinancialInstitutionDataStore*/ dataStore) {
  this.dataStore = dataStore;
};


FinancialInstitutionServiceImpl.prototype.getConnection = function() {
  return this.connection;
};


FinancialInstitutionServiceImpl.prototype.setConnection = function(/*OFXConnection*/ connection) {
  this.connection = connection;
};




module.exports = FinancialInstitutionServiceImpl;

},{"../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../FinancialInstitutionService":"/Users/aolson/Developer/ofx4js/src/client/FinancialInstitutionService.js","../net/OFXV1Connection":"/Users/aolson/Developer/ofx4js/src/client/net/OFXV1Connection.js","./FinancialInstitutionImpl":"/Users/aolson/Developer/ofx4js/src/client/impl/FinancialInstitutionImpl.js"}],"/Users/aolson/Developer/ofx4js/src/client/impl/InvestmentAccountImpl.js":[function(require,module,exports){
"use strict";

var inherit = require("../../util/inherit");

var InvestmentAccount = require("../InvestmentAccount");
var StatementRange = require("../../domain/data/common/StatementRange");
var IncludePosition = require("../../domain/data/investment/statements/IncludePosition");
var InvestmentStatementRequestTransaction = require("../../domain/data/investment/statements/InvestmentStatementRequestTransaction");
var SecurityListRequestTransaction = require("../../domain/data/seclist/SecurityListRequestTransaction");
var MessageSetType = require("../../domain/data/MessageSetType");
var InvestmentStatementRequestMessageSet = require("../../domain/data/investment/statements/InvestmentStatementRequestMessageSet");
var InvestmentStatementRequest = require("../../domain/data/investment/statements/InvestmentStatementRequest");
var SecurityListRequestMessageSet = require("../../domain/data/seclist/SecurityListRequestMessageSet");
var SecurityListRequest = require("../../domain/data/seclist/SecurityListRequest");

/**
 * @class
 */
function InvestmentAccountImpl () {

  /**
   * @name InvestmentAccountImpl#details
   * @type InvestmentAccountDetails
   * @access private
   */
  this.details = null;

  /**
   * @name InvestmentAccountImpl#username
   * @type String
   * @access private
   */
  this.username = null;

  /**
   * @name InvestmentAccountImpl#password
   * @type String
   * @access private
   */
  this.password = null;

  /**
   * @name InvestmentAccountImpl#institution
   * @type FinancialInstitutionImpl
   * @access private
   */
  this.institution = null;
}

inherit(InvestmentAccountImpl, "implements", InvestmentAccount);




InvestmentAccountImpl.prototype.InvestmentAccountImpl = function(/*InvestmentAccountDetails*/ details, /*String*/ username, /*String*/ password, /*FinancialInstitutionImpl*/ institution) {
  this.details = details;
  this.username = username;
  this.password = password;
  this.institution = institution;
};


InvestmentAccountImpl.prototype.readStatement = function(/*Date*/ start, /*Date*/ end) {
  var range = new StatementRange();
  range.setIncludeTransactions(true);
  range.setStart(start);
  range.setEnd(end);

  var request = this.institution.createAuthenticatedRequest(this.username, this.password);
  var requestTransaction = new InvestmentStatementRequestTransaction();
  requestTransaction.setWrappedMessage(this.createStatementRequest(this.getDetails(), range));
  request.getMessageSets().add(this.createStatementRequestMessageSet(requestTransaction));

  var response = this.institution.sendRequest(request);
  this.institution.doGeneralValidationChecks(request, response);

  return this.unwrapStatementResponse(response);
};


InvestmentAccountImpl.prototype.readSecurityList = function(/*SecurityRequest[]*/ securities) {
  var request = this.institution.createAuthenticatedRequest(this.username, this.password);
  var requestTransaction = new SecurityListRequestTransaction();
  requestTransaction.setWrappedMessage(this.createSecurityListRequest(securities));
  request.getMessageSets().add(this.createSecurityListRequestMessageSet(requestTransaction));

  var response = this.institution.sendRequest(request);
  this.institution.doGeneralValidationChecks(request, response);

  return this.unwrapSecurityList(response);
};


/**
 * The details of this account.
 *
 * @return {InvestmentAccountDetails} The details of this account.
 */
InvestmentAccountImpl.prototype.getDetails = function() {
  return this.details;
};


InvestmentAccountImpl.prototype.unwrapStatementResponse = function(/*ResponseEnvelope*/ response) {
  var investmentStatementSet = response.getMessageSet(MessageSetType.investment);
  if (investmentStatementSet === null) {
    throw new Error("No investment response message set.");
  }

  var statementTransactionResponse = investmentStatementSet.getStatementResponse();
  if (statementTransactionResponse === null) {
    throw new Error("No investment statement response transaction.");
  }

  var statement = statementTransactionResponse.getMessage();
  if (statement === null) {
    throw new Error("No investment statement in the transaction.");
  }

  // See if there's a security list -- often sent back with an account statement by servers.
  var securityListMessageSet = response.getMessageSet(MessageSetType.investment_security);
  if (securityListMessageSet !== null) {
    statement.setSecurityList(securityListMessageSet.getSecurityList());
  }

  return statement;
};


InvestmentAccountImpl.prototype.createStatementRequestMessageSet = function(/*InvestmentStatementRequestTransaction*/ transaction) {
  var investmentStatementRequest = new InvestmentStatementRequestMessageSet();
  investmentStatementRequest.setStatementRequest(transaction);
  return investmentStatementRequest;
};


InvestmentAccountImpl.prototype.createStatementRequest = function(/*InvestmentAccountDetails*/ details, /*StatementRange*/ range) {
  var investRequest = new InvestmentStatementRequest();
  investRequest.setAccount(details);
  investRequest.setStatementRange(range);
  investRequest.setIncludePosition(new IncludePosition());
  return investRequest;
};


InvestmentAccountImpl.prototype.createSecurityListRequestMessageSet = function(/*SecurityListRequestTransaction*/ transaction) {
  var securityListRequest = new SecurityListRequestMessageSet();
  securityListRequest.setSecurityListRequest(transaction);
  return securityListRequest;
};


InvestmentAccountImpl.prototype.createSecurityListRequest = function(/*SecurityRequest[]*/ securities) {
  var securityListRequest = new SecurityListRequest();
  securityListRequest.setSecurityRequests(securities);
  return securityListRequest;
};


InvestmentAccountImpl.prototype.unwrapSecurityList = function(/*ResponseEnvelope*/ response) {
  var securityListSet = response.getMessageSet(MessageSetType.investment_security);
  if (securityListSet === null) {
    throw new Error("No security list response message set.");
  }

  var securityList = securityListSet.getSecurityList();
  if (securityList === null) {
    throw new Error("No security list response transaction.");
  }

  return securityList;
};




module.exports = InvestmentAccountImpl;

},{"../../domain/data/MessageSetType":"/Users/aolson/Developer/ofx4js/src/domain/data/MessageSetType.js","../../domain/data/common/StatementRange":"/Users/aolson/Developer/ofx4js/src/domain/data/common/StatementRange.js","../../domain/data/investment/statements/IncludePosition":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/statements/IncludePosition.js","../../domain/data/investment/statements/InvestmentStatementRequest":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/statements/InvestmentStatementRequest.js","../../domain/data/investment/statements/InvestmentStatementRequestMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/statements/InvestmentStatementRequestMessageSet.js","../../domain/data/investment/statements/InvestmentStatementRequestTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/statements/InvestmentStatementRequestTransaction.js","../../domain/data/seclist/SecurityListRequest":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityListRequest.js","../../domain/data/seclist/SecurityListRequestMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityListRequestMessageSet.js","../../domain/data/seclist/SecurityListRequestTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityListRequestTransaction.js","../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../InvestmentAccount":"/Users/aolson/Developer/ofx4js/src/client/InvestmentAccount.js"}],"/Users/aolson/Developer/ofx4js/src/client/impl/LocalResourceFIDataStore.js":[function(require,module,exports){
///*
// * Licensed under the Apache License, Version 2.0 (the "License");
// * you may not use this file except in compliance with the License.
// * You may obtain a copy of the License at
// *
// *   http://www.apache.org/licenses/LICENSE-2.0
// *
// * Unless required by applicable law or agreed to in writing, software
// * distributed under the License is distributed on an "AS IS" BASIS,
// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// * See the License for the specific language governing permissions and
// * limitations under the License.
// */
//
//"use strict";
//
//var inherit = require("../inherit");
//
//var FinancialInstitutionData = require("client/FinancialInstitutionData");
//var FinancialInstitutionDataStore = require("client/FinancialInstitutionDataStore");
////import org.apache.commons.logging.Log;
////import org.apache.commons.logging.LogFactory;
//
////import javax.xml.bind.JAXBContext;
////import javax.xml.bind.JAXBException;
////import java.io.*;
////import java.util.ArrayList;
////import java.util.HashMap;
////import java.util.List;
////import java.util.Map;
//
///**
// * Implementation of a FI data store that loads its FI data from a local resource.
// *
// * @author Ryan Heaton
// */
//function LocalResourceFIDataStore () {
//
//  /**
//   * @name LocalResourceFIDataStore#LOG
//   * @type Log
//   */
//  this.LOG = LogFactory.getLog(LocalResourceFIDataStore.class);
//
//  /**
//   * @name LocalResourceFIDataStore#fiData
//   * @type FinancialInstitutionData>
//   */
//  this.fiData = null;
//}
//
//inherit(LocalResourceFIDataStore, "implements", FinancialInstitutionDataStore);
//
//
//
//
///**
// * Load the default set of institution data (found at classpath:/institutions.xml).
// *
// * @throws IOException If the resource is unreadable or malformed.
// */
//LocalResourceFIDataStore.prototype.LocalResourceFIDataStore = function() {
//  this(LocalResourceFIDataStore.class.getResourceAsStream("/META-INF/ofx4j/institutions.xml"));
//};
//
//
///**
// * Load the institution data from a file.
// *
// * @param {File} in The file to read.
// * @throws IOException If the resource is unreadable or malformed.
// */
//LocalResourceFIDataStore.prototype.LocalResourceFIDataStore = function(in) {
//  this(new FileInputStream(in));
//};
//
//
///**
// * Load the institution data from a specific stream.
// *
// * @param {InputStream} in The stream.
// * @throws IOException If the resource is unreadable or malformed.
// */
//LocalResourceFIDataStore.prototype.LocalResourceFIDataStore = function(in) {
//  Map<String, FinancialInstitutionData> fiData = new HashMap<String, FinancialInstitutionData>();
//  if (in != null) {
//    try {
//      FIDataList list = (FIDataList) JAXBContext.newInstance(FIDataList.class).createUnmarshaller().unmarshal(in);
//      if (list != null && list.getData() != null) {
//        for (BaseFinancialInstitutionData fi : list.getData()) {
//          fiData.put(fi.getId(), fi);
//        }
//      }
//    }
//    catch (JAXBException e) {
//      throw new IOException(e.getMessage());
//    }
//
//    if (LOG.isInfoEnabled()) {
//      LOG.info(fiData.size() + " institutions loaded.");
//    }
//  }
//
//  this.fiData = fiData;
//};
//
//
//// Inherited.
//LocalResourceFIDataStore.prototype.getInstitutionData = function(/*String*/ fid) {
//  return fiData.get(fid);
//};
//
//
//// Inherited.
//LocalResourceFIDataStore.prototype.getInstitutionDataList = function() {
//  return new ArrayList<FinancialInstitutionData>(fiData.values());
//};
//
//
///**
// * Add a financial institution.
// *
// * @param {BaseFinancialInstitutionData} data The data to add.
// */
//LocalResourceFIDataStore.prototype.add = function(data) {
//  this.fiData.put(data.getId(), data);
//};
//
//
///**
// * Store the data somewhere.
// *
// * @param {OutputStream} out The output stream.
// * @throws IOException If an error occurs.
// */
//LocalResourceFIDataStore.prototype.storeData = function(out) {
//  try {
//    FIDataList dataList = new FIDataList();
//    ArrayList<BaseFinancialInstitutionData> data = new ArrayList<BaseFinancialInstitutionData>();
//    for (FinancialInstitutionData datum : fiData.values()) {
//      if (datum instanceof BaseFinancialInstitutionData) {
//        data.add((BaseFinancialInstitutionData) datum);
//      }
//    }
//    dataList.setData(data);
//    JAXBContext.newInstance(FIDataList.class).createMarshaller().marshal(dataList, out);
//  }
//  catch (JAXBException e) {
//    throw new IOException(e.getMessage());
//  }
//};
//
//
//
//
//module.exports = LocalResourceFIDataStore;

},{}],"/Users/aolson/Developer/ofx4js/src/client/impl/OFXHomeFIDataStore.js":[function(require,module,exports){
///*
// * Licensed under the Apache License, Version 2.0 (the "License");
// * you may not use this file except in compliance with the License.
// * You may obtain a copy of the License at
// *
// *   http://www.apache.org/licenses/LICENSE-2.0
// *
// * Unless required by applicable law or agreed to in writing, software
// * distributed under the License is distributed on an "AS IS" BASIS,
// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// * See the License for the specific language governing permissions and
// * limitations under the License.
// */
//
//"use strict";
//
//var inherit = require("../inherit");
//
//var FinancialInstitutionData = require("client/FinancialInstitutionData");
//var FinancialInstitutionDataStore = require("client/FinancialInstitutionDataStore");
////import org.apache.commons.logging.Log;
////import org.apache.commons.logging.LogFactory;
////import org.ccil.cowan.tagsoup.Parser;
////import org.xml.sax.Attributes;
////import org.xml.sax.InputSource;
////import org.xml.sax.SAXException;
////import org.xml.sax.XMLReader;
////import org.xml.sax.helpers.DefaultHandler;
//
////import java.io.IOException;
////import java.net.MalformedURLException;
////import java.net.URL;
////import java.util.*;
////import java.util.regex.Matcher;
////import java.util.regex.Pattern;
//
///**
// * Implementation of a financial institution data store that reads its FI data from <a href="http://www.ofxhome.com">OFX Home</a>.
// *
// * @author Ryan Heaton
// */
//public class OFXHomeFIDataStore implements FinancialInstitutionDataStore {
//
//  private static final Log LOG = LogFactory.getLog(OFXHomeFIDataStore.class);
//  public static final Pattern INSTITUTION_HREF_PATTERN = Pattern.compile("http\\://www.ofxhome.com/index.php/institution/view/\\w+");
//  private String url = "http://www.ofxhome.com/index.php/home/directory/all";
//  private Map<String, FinancialInstitutionData> fiData;
//
//  public FinancialInstitutionData getInstitutionData(String fid) {
//    return getFiData().get(fid);
//  }
//
//  public List<FinancialInstitutionData> getInstitutionDataList() {
//    return new ArrayList<FinancialInstitutionData>(getFiData().values());
//  }
//
//  public synchronized Map<String, FinancialInstitutionData> getFiData() {
//    if (this.fiData == null) {
//      this.fiData = new HashMap<String, FinancialInstitutionData>();
//      try {
//        initializeFIData();
//        if (LOG.isInfoEnabled()) {
//          LOG.info(this.fiData.size() + " institutions loaded from " + getUrl());
//        }
//      }
//      catch (Exception e) {
//        fiData = Collections.emptyMap();
//      }
//    }
//
//    return fiData;
//  }
//
//  private void initializeFIData() throws IOException, SAXException {
//    URL url = new URL(getUrl());
//    XMLReader xmlReader = new Parser();
//    xmlReader.setFeature("http://xml.org/sax/features/namespaces", false);
//    xmlReader.setFeature("http://xml.org/sax/features/validation", false);
//    xmlReader.setContentHandler(new DirectoryContentHandler());
//    xmlReader.parse(new InputSource(url.openStream()));
//  }
//
//  private BaseFinancialInstitutionData loadInstitutionData(String href) throws IOException, SAXException {
//    if (LOG.isInfoEnabled()) {
//      LOG.info("Loading institution data from: " + href);
//    }
//    
//    URL url = new URL(href);
//    XMLReader xmlReader = new Parser();
//    xmlReader.setFeature("http://xml.org/sax/features/namespaces", false);
//    xmlReader.setFeature("http://xml.org/sax/features/validation", false);
//    InstitutionContentHandler institutionHandler = new InstitutionContentHandler();
//    xmlReader.setContentHandler(institutionHandler);
//    xmlReader.parse(new InputSource(url.openStream()));
//    return institutionHandler.data;
//  }
//
//  /**
//   * The URL of the OFX home directory.
//   *
//   * @return The URL of the OFX home directory.
//   */
//  public String getUrl() {
//    return url;
//  }
//
//  /**
//   * The URL of the OFX home directory.
//   *
//   * @param url The URL of the OFX home directory.
//   */
//  public void setUrl(String url) {
//    this.url = url;
//  }
//
//  private class DirectoryContentHandler extends DefaultHandler {
//
//    private Set<String> visited = new TreeSet<String>();
//
//    @Override
//    public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
//      if ("a".equalsIgnoreCase(qName) || "a".equalsIgnoreCase(localName)) {
//        for (int i = 0; i < attributes.getLength(); i++) {
//          String href = attributes.getValue("href");
//          if (href != null) {
//            Matcher matcher = INSTITUTION_HREF_PATTERN.matcher(href);
//            if (matcher.matches() && visited.add(href)) {
//              try {
//                BaseFinancialInstitutionData data = loadInstitutionData(href);
//                data.setName(attributes.getValue("title"));
//                fiData.put(data.getId(), data);
//              }
//              catch (IOException e) {
//                throw new SAXException(e);
//              }
//            }
//          }
//        }
//      }
//    }
//  }
//
//  private enum FIField {
//    ID,
//
//    ORG,
//
//    URL,
//
//    BROKERID
//  }
//
//  private class InstitutionContentHandler extends DefaultHandler {
//
//    private FIField currentField = null;
//    private StringBuilder fieldNameBuffer = null;
//    private StringBuilder fieldValueBuffer = null;
//    private BaseFinancialInstitutionData data;
//
//    @Override
//    public void startDocument() throws SAXException {
//      this.data = new BaseFinancialInstitutionData(UUID.randomUUID().toString());
//    }
//
//    @Override
//    public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
//      if ("td".equalsIgnoreCase(qName)) {
//        if (this.fieldNameBuffer == null) {
//          this.fieldNameBuffer = new StringBuilder();
//        }
//        else if (currentField != null) {
//          this.fieldValueBuffer = new StringBuilder();
//        }
//      }
//    }
//
//    @Override
//    public void endElement(String uri, String localName, String qName) throws SAXException {
//      if ("td".equalsIgnoreCase(qName)) {
//        if (currentField == null) {
//          if (fieldNameBuffer != null) {
//            String fieldName = this.fieldNameBuffer.toString().toLowerCase();
//            if (fieldName.contains("fi id")) {
//              this.currentField = FIField.ID;
//              return;
//            }
//            else if (fieldName.contains("fi org")) {
//              this.currentField = FIField.ORG;
//              return;
//            }
//            else if (fieldName.contains("fi url")) {
//              this.currentField = FIField.URL;
//              return;
//            }
//            else if (fieldName.contains("fi broker id")) {
//              this.currentField = FIField.BROKERID;
//              return;
//            }
//          }
//        }
//        else if (this.fieldValueBuffer != null) {
//          String fieldValue = this.fieldValueBuffer.toString().trim();
//          if ("".equals(fieldValue)) {
//            fieldValue = null;
//          }
//
//          switch (currentField) {
//            case ID:
//              this.data.setFinancialInstitutionId(fieldValue);
//              break;
//            case BROKERID:
//              this.data.setBrokerId(fieldValue);
//              break;
//            case ORG:
//              this.data.setOrganization(fieldValue);
//              break;
//            case URL:
//              try {
//                this.data.setOFXURL(new URL(fieldValue));
//              }
//              catch (MalformedURLException e) {
//                //fall through...
//              }
//          }
//        }
//
//        this.currentField = null;
//        this.fieldNameBuffer = null;
//        this.fieldValueBuffer = null;
//      }
//    }
//
//    @Override
//    public void characters(char ch[], int start, int length) throws SAXException {
//      if (this.currentField != null && fieldValueBuffer != null) {
//        fieldValueBuffer.append(ch, start, length);
//      }
//      else if (fieldNameBuffer != null) {
//        fieldNameBuffer.append(ch, start, length);
//      }
//    }
//  }
//
//}

},{}],"/Users/aolson/Developer/ofx4js/src/client/impl/index.js":[function(require,module,exports){
"use strict";

module.exports = {
  BankingAccountImpl: require("./BankingAccountImpl"),
  BaseAccountImpl: require("./BaseAccountImpl"),
  BaseFinancialInstitutionData: require("./BaseFinancialInstitutionData"),
  CreditCardAccountImpl: require("./CreditCardAccountImpl"),
  FIDataList: require("./FIDataList"),
  FinancialInstitutionImpl: require("./FinancialInstitutionImpl"),
  FinancialInstitutionServiceImpl: require("./FinancialInstitutionServiceImpl"),
  InvestmentAccountImpl: require("./InvestmentAccountImpl"),
  LocalResourceFIDataStore: require("./LocalResourceFIDataStore"),
  OFXHomeFIDataStore: require("./OFXHomeFIDataStore"),
};

},{"./BankingAccountImpl":"/Users/aolson/Developer/ofx4js/src/client/impl/BankingAccountImpl.js","./BaseAccountImpl":"/Users/aolson/Developer/ofx4js/src/client/impl/BaseAccountImpl.js","./BaseFinancialInstitutionData":"/Users/aolson/Developer/ofx4js/src/client/impl/BaseFinancialInstitutionData.js","./CreditCardAccountImpl":"/Users/aolson/Developer/ofx4js/src/client/impl/CreditCardAccountImpl.js","./FIDataList":"/Users/aolson/Developer/ofx4js/src/client/impl/FIDataList.js","./FinancialInstitutionImpl":"/Users/aolson/Developer/ofx4js/src/client/impl/FinancialInstitutionImpl.js","./FinancialInstitutionServiceImpl":"/Users/aolson/Developer/ofx4js/src/client/impl/FinancialInstitutionServiceImpl.js","./InvestmentAccountImpl":"/Users/aolson/Developer/ofx4js/src/client/impl/InvestmentAccountImpl.js","./LocalResourceFIDataStore":"/Users/aolson/Developer/ofx4js/src/client/impl/LocalResourceFIDataStore.js","./OFXHomeFIDataStore":"/Users/aolson/Developer/ofx4js/src/client/impl/OFXHomeFIDataStore.js"}],"/Users/aolson/Developer/ofx4js/src/client/index.js":[function(require,module,exports){
"use strict";

module.exports = {
  context: require("./context/index"),
  impl: require("./impl/index"),
  main: require("./main/index"),
  net: require("./net/index"),

  AccountStatement: require("./AccountStatement"),
  BankAccount: require("./BankAccount"),
  CreditCardAccount: require("./CreditCardAccount"),
  FinancialInstitution: require("./FinancialInstitution"),
  FinancialInstitutionAccount: require("./FinancialInstitutionAccount"),
  FinancialInstitutionData: require("./FinancialInstitutionData"),
  FinancialInstitutionDataStore: require("./FinancialInstitutionDataStore"),
  FinancialInstitutionProfile: require("./FinancialInstitutionProfile"),
  FinancialInstitutionService: require("./FinancialInstitutionService"),
  InvestmentAccount: require("./InvestmentAccount"),
};

},{"./AccountStatement":"/Users/aolson/Developer/ofx4js/src/client/AccountStatement.js","./BankAccount":"/Users/aolson/Developer/ofx4js/src/client/BankAccount.js","./CreditCardAccount":"/Users/aolson/Developer/ofx4js/src/client/CreditCardAccount.js","./FinancialInstitution":"/Users/aolson/Developer/ofx4js/src/client/FinancialInstitution.js","./FinancialInstitutionAccount":"/Users/aolson/Developer/ofx4js/src/client/FinancialInstitutionAccount.js","./FinancialInstitutionData":"/Users/aolson/Developer/ofx4js/src/client/FinancialInstitutionData.js","./FinancialInstitutionDataStore":"/Users/aolson/Developer/ofx4js/src/client/FinancialInstitutionDataStore.js","./FinancialInstitutionProfile":"/Users/aolson/Developer/ofx4js/src/client/FinancialInstitutionProfile.js","./FinancialInstitutionService":"/Users/aolson/Developer/ofx4js/src/client/FinancialInstitutionService.js","./InvestmentAccount":"/Users/aolson/Developer/ofx4js/src/client/InvestmentAccount.js","./context/index":"/Users/aolson/Developer/ofx4js/src/client/context/index.js","./impl/index":"/Users/aolson/Developer/ofx4js/src/client/impl/index.js","./main/index":"/Users/aolson/Developer/ofx4js/src/client/main/index.js","./net/index":"/Users/aolson/Developer/ofx4js/src/client/net/index.js"}],"/Users/aolson/Developer/ofx4js/src/client/main/index.js":[function(require,module,exports){
"use strict";

module.exports = {
//  DownloadAccountInfo: require("./DownloadAccountInfo"),
//  DownloadStatement: require("./DownloadStatement"),
};

},{}],"/Users/aolson/Developer/ofx4js/src/client/net/OFXConnection.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * Connection to an OFX interface.
 *
 * @author Ryan Heaton
 */
function OFXConnection() {
}

/**
 * Send a request.
 *
 * @param {RequestEnvelope} request The request to send.
 * @param {URL} url The URL to which to send the request.
 * @return {ResponseEnvelope} The response.
 */
OFXConnection.prototype.sendRequest = function(/*request, url*/) { throw new Error("not implemented"); };


module.exports = OFXConnection;

},{}],"/Users/aolson/Developer/ofx4js/src/client/net/OFXV1Connection.js":[function(require,module,exports){
///*
// * Licensed under the Apache License, Version 2.0 (the "License");
// * you may not use this file except in compliance with the License.
// * You may obtain a copy of the License at
// *
// *   http://www.apache.org/licenses/LICENSE-2.0
// *
// * Unless required by applicable law or agreed to in writing, software
// * distributed under the License is distributed on an "AS IS" BASIS,
// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// * See the License for the specific language governing permissions and
// * limitations under the License.
// */
//
//"use strict";
//
//var inherit = require("../inherit");
//
//var RequestEnvelope = require("domain/data/RequestEnvelope");
//var ResponseEnvelope = require("domain/data/ResponseEnvelope");
//var OFXParseException = require("io/OFXParseException");
//var OFXWriter = require("io/OFXWriter");
//var AggregateMarshaller = require("io/AggregateMarshaller");
//var OFXV1Writer = require("io/v1/OFXV1Writer");
//var AggregateUnmarshaller = require("io/AggregateUnmarshaller");
//
///**
// * Base implementation for an OFX connection.
// *
// * @class
// */
//function OFXV1Connection () {
//
//  /**
//   * @name OFXV1Connection#LOG
//   * @type Log
//   */
//  this.LOG = LogFactory.getLog(OFXV1Connection.class);
//
//  /**
//   * @name OFXV1Connection#marshaller
//   * @type AggregateMarshaller
//   * @access private
//   */
//  this.marshaller = new AggregateMarshaller();
//
//  /**
//   * @name OFXV1Connection#unmarshaller
//   * @type AggregateUnmarshaller<ResponseEnvelope>
//   * @access private
//   */
//  this.unmarshaller = new AggregateUnmarshaller<ResponseEnvelope>(ResponseEnvelope.class);
//}
//
//inherit(OFXV1Connection, "implements", OFXConnection);
//
//
//
//
//// Inherited.
//OFXV1Connection.prototype.sendRequest = function(/*RequestEnvelope*/ request, /*URL*/ url) {
//  try {
//    if (!url.getProtocol().toLowerCase().startsWith("http")) {
//      throw new IllegalArgumentException("Invalid URL: " + url + " only http(s) is supported.");
//    }
//
//    //marshal to memory so we can determine the size...
//    ByteArrayOutputStream outBuffer = new ByteArrayOutputStream();
//    OFXWriter ofxWriter = newOFXWriter(outBuffer);
//    getMarshaller().marshal(request, ofxWriter);
//    ofxWriter.close();
//    logRequest(outBuffer);
//    InputStream in = sendBuffer(url, outBuffer);
//    return unmarshal(in);
//  }
//  catch (IOException e) {
//    throw new OFXConnectionException(e);
//  }
//};
//
//
///**
// * Log a request buffer.
// *
// * @param {ByteArrayOutputStream} outBuffer The buffer to log.
// */
//OFXV1Connection.prototype.logRequest = function(outBuffer) {
//  if (LOG.isInfoEnabled()) {
//    LOG.info("Marshalling " + outBuffer.size() + " bytes of the OFX request.");
//    if (LOG.isDebugEnabled()) {
//      LOG.debug(outBuffer.toString("utf-8"));
//    }
//  }
//};
//
//
///**
// * Send the specified buffer to the specified URL.
// *
// * @param {URL} url The URL.
// * @param {ByteArrayOutputStream} outBuffer The buffer.
// * @return {InputStream} The response.
// */
//OFXV1Connection.prototype.sendBuffer = function(url, outBuffer) {
//  HttpURLConnection connection = openConnection(url);
//  connection.setRequestMethod("POST");
//  connection.setRequestProperty("Content-Type", "application/x-ofx");
//  connection.setRequestProperty("Content-Length", String.valueOf(outBuffer.size()));
//  connection.setRequestProperty("Accept", "*/*, application/x-ofx");
//  connection.setDoOutput(true);
//  connection.connect();
//
//  OutputStream out  = connection.getOutputStream();
//  out.write(outBuffer.toByteArray());
//
//  InputStream in;
//  int responseCode = connection.getResponseCode();
//  if (responseCode >= 200 && responseCode < 300) {
//    in = connection.getInputStream();
//  }
//  else if (responseCode >= 400 && responseCode < 500) {
//    throw new OFXServerException("Error with client request: " + connection.getResponseMessage(), responseCode);
//  }
//  else {
//    throw new OFXServerException("Invalid response code from OFX server: " + connection.getResponseMessage(), responseCode);
//  }
//
//  return in;
//};
//
//
///**
// * Unmarshal the input stream.
// *
// * @param {InputStream} in The input stream.
// * @return {ResponseEnvelope} The response envelope.
// */
//OFXV1Connection.prototype.unmarshal = function(in) {
//  try {
//    return getUnmarshaller().unmarshal(in);
//  }
//  catch (OFXParseException e) {
//    throw new OFXConnectionException("Unable to parse the OFX response.", e);
//  }
//};
//
//
///**
// * Open a connection to the specified URL.
// *
// * @param {URL} url The URL.
// * @return {HttpURLConnection} The connection.
// */
//OFXV1Connection.prototype.openConnection = function(url) {
//  return (HttpURLConnection) url.openConnection();
//};
//
//
///**
// * Create a new OFX writer.
// *
// * @param {OutputStream} out The output stream for the writer.
// * @return {OFXWriter} The OFX writer.
// */
//OFXV1Connection.prototype.newOFXWriter = function(out) {
//  return new OFXV1Writer(out);
//};
//
//
///**
// * The marshaller.
// *
// * @return {AggregateMarshaller} The marshaller.
// */
//OFXV1Connection.prototype.getMarshaller = function() {
//  return marshaller;
//};
//
//
///**
// * The marshaller.
// *
// * @param {AggregateMarshaller} marshaller The marshaller.
// */
//OFXV1Connection.prototype.setMarshaller = function(marshaller) {
//  this.marshaller = marshaller;
//};
//
//
///**
// * The unmarshaller.
// *
// * @return {AggregateUnmarshaller<ResponseEnvelope>} The unmarshaller.
// */
//OFXV1Connection.prototype.getUnmarshaller = function() {
//  return unmarshaller;
//};
//
//
///**
// * The unmarshaller.
// *
// * @param {AggregateUnmarshaller<ResponseEnvelope>} unmarshaller The unmarshaller.
// */
//OFXV1Connection.prototype.setUnmarshaller = function(unmarshaller) {
//  this.unmarshaller = unmarshaller;
//};
//
//
//
//
//module.exports = OFXV1Connection;

},{}],"/Users/aolson/Developer/ofx4js/src/client/net/OFXV2Connection.js":[function(require,module,exports){
///*
// * Licensed under the Apache License, Version 2.0 (the "License");
// * you may not use this file except in compliance with the License.
// * You may obtain a copy of the License at
// *
// *   http://www.apache.org/licenses/LICENSE-2.0
// *
// * Unless required by applicable law or agreed to in writing, software
// * distributed under the License is distributed on an "AS IS" BASIS,
// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// * See the License for the specific language governing permissions and
// * limitations under the License.
// */
//
//"use strict";
//
//var inherit = require("../inherit");
//
//var OFXWriter = require("io/OFXWriter");
//var OFXV2Writer = require("io/v2/OFXV2Writer");
//
////import java.io.OutputStream;
//
///**
// * @author Ryan Heaton
// */
//function OFXV2Connection () {
//}
//
//inherit(OFXV2Connection, "extends", OFXV1Connection);
//
//
//
//
//// @Override
//OFXV2Connection.prototype.newOFXWriter = function(/*OutputStream*/ out) {
//  return new OFXV2Writer(out);
//};
//
//
//
//
//module.exports = OFXV2Connection;

},{}],"/Users/aolson/Developer/ofx4js/src/client/net/index.js":[function(require,module,exports){
"use strict";

module.exports = {
  OFXConnection: require("./OFXConnection"),
  OFXV1Connection: require("./OFXV1Connection"),
  OFXV2Connection: require("./OFXV2Connection"),
};

},{"./OFXConnection":"/Users/aolson/Developer/ofx4js/src/client/net/OFXConnection.js","./OFXV1Connection":"/Users/aolson/Developer/ofx4js/src/client/net/OFXV1Connection.js","./OFXV2Connection":"/Users/aolson/Developer/ofx4js/src/client/net/OFXV2Connection.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/ApplicationSecurity.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * @enum
 * @see "Section 4, OFX spec"
 */
var ApplicationSecurity = {

  NONE: 0,

  TYPE1: 1
};


module.exports = ApplicationSecurity;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/MessageSetProfile.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * @class
 */
function MessageSetProfile() {
}

/**
 * Version of the message set.
 *
 * @return {String} The version of the message set.
 */
MessageSetProfile.prototype.getVersion = function() { throw new Error("not implemented"); };

/**
 * The name of the service provider (sometimes the message set processing is outsourced).
 *
 * @return {String} The name of the service provider (sometimes the message set processing is outsourced).
 */
MessageSetProfile.prototype.getServiceProviderName = function() { throw new Error("not implemented"); };

/**
 * The URL at which the message set is processed.
 *
 * @return {String} The URL at which the message set is processed.
 */
MessageSetProfile.prototype.getUrl = function() { throw new Error("not implemented"); };

/**
 * The application-level security required for this message set.
 *
 * @return {ApplicationSecurity} The application-level security required for this message set.
 */
MessageSetProfile.prototype.getSecurity = function() { throw new Error("not implemented"); };

/**
 * Whether transport-level security is required for this message set.
 *
 * @return {boolean} Whether transport-level security is required for this message set.
 */
MessageSetProfile.prototype.isSslRequired = function() { throw new Error("not implemented"); };

/**
 * The sign-on realm.
 *
 * @return {String} The sign-on realm.
 */
MessageSetProfile.prototype.getRealm = function() { throw new Error("not implemented"); };

/**
 * The language.
 *
 * @return {String} The language.
 * @see java.util.Locale#getISO3Language()
 */
MessageSetProfile.prototype.getLanguage = function() { throw new Error("not implemented"); };

/**
 * The synchronization capability for this message set.
 *
 * @return {SynchronizationCapability} The synchronization capability for this message set.
 */
MessageSetProfile.prototype.getSyncCapability = function() { throw new Error("not implemented"); };

/**
 * Whether there exists support for resposne-file based error recovery.
 *
 * @return {boolean} Whether there exists support for resposne-file based error recovery.
 */
MessageSetProfile.prototype.hasFileBasedErrorRecoverySupport = function() { throw new Error("not implemented"); };


module.exports = MessageSetProfile;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/MessageSetType.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * The message set type, used to define message set order in the envelope.
 *
 * @enum
 * @see "Section 2.4.5.2, OFX spec"
 */
var MessageSetType = {

  signon: 0,

  signup: 1,

  banking: 2,

  creditcard: 3,

  investment: 4,

  interbank_transfer: 5,

  wire_transfer: 6,

  payments: 7,

  email: 8,

  investment_security: 9,

  profile: 10,

  tax1099: 11

};


module.exports = MessageSetType;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/RequestEnvelope.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var Aggregate = require("../../meta/Aggregate");
var ChildAggregate = require("../../meta/ChildAggregate");
var Header = require("../../meta/Header");
var ApplicationSecurity = require("./ApplicationSecurity");
var RequestMessageSet = require("./RequestMessageSet");
var UUID = require("uuid");

/**
 * Envelope for enclosing an OFX request.
 *
 * @class
 * @see "Section 2.4.3, OFX Spec"
 */
function RequestEnvelope () {

  /**
   * @name RequestEnvelope#security
   * @type ApplicationSecurity
   * @access private
   */
  this.security = ApplicationSecurity.NONE;

  /**
   * @name RequestEnvelope#UID
   * @type String
   * @access private
   */
  this.UID = null;

  /**
   * @name RequestEnvelope#lastProcessedUID
   * @type String
   * @access private
   */
  this.lastProcessedUID = null;

  /**
   * @name RequestEnvelope#messageSets
   * @type RequestMessageSet[]
   * @access private
   */
  this.messageSets = null;
}



Aggregate.add("OFX", RequestEnvelope);


//headers
//content
RequestEnvelope.prototype.RequestEnvelope = function() {
  this.UID = UUID.v4();
};


RequestEnvelope.prototype.RequestEnvelope = function(/*String*/ UID) {
  this.UID = UID;
};


/**
 * The security of this envelope.
 *
 * @return {ApplicationSecurity} The security of this envelope.
 * @see "Section 2.2, OFX spec"
 */
RequestEnvelope.prototype.getSecurity = function() {
  return this.security;
};
Header.add(RequestEnvelope, {name: "SECURITY", attributeType: ApplicationSecurity, readMethod: "getSecurity", writeMethod: "setSecurity"});


/**
 * The security of this envelope.
 *
 * @param {ApplicationSecurity} security The security of this envelope.
 * @see "Section 2.2, OFX spec"
 */
RequestEnvelope.prototype.setSecurity = function(security) {
  this.security = security;
};


/**
 * The UID for the envelope.
 *
 * @return {String} The UID for the envelope.
 * @see "Section 2.2, OFX spec"
 */
RequestEnvelope.prototype.getUID = function() {
  return this.UID;
};
Header.add(RequestEnvelope, {name: "NEWFILEUID", attributeType: String, readMethod: "getUID", writeMethod: "setUID"});


/**
 * The UID for the envelope.
 *
 * @param {String} UID The UID for the envelope.
 * @see "Section 2.2, OFX spec"
 */
RequestEnvelope.prototype.setUID = function(UID) {
  this.UID = UID;
};


/**
 * The UID of the last-processed request/response (used for file-based error recovery).
 *
 * @return {String} The UID of the last-processed request/response (used for file-based error recovery).
 * @see "Section 2.2, OFX spec"
 */
RequestEnvelope.prototype.getLastProcessedUID = function() {
  return this.lastProcessedUID;
};
Header.add(RequestEnvelope, {name: "OLDFILEUID", attributeType: String, readMethod: "getLastProcessedUID", writeMethod: "setLastProcessedUID"});


/**
 * The UID of the last-processed request/response (used for file-based error recovery).
 *
 * @param {String} lastProcessedUID The UID of the last-processed request/response (used for file-based error recovery).
 * @see "Section 2.2, OFX spec"
 */
RequestEnvelope.prototype.setLastProcessedUID = function(lastProcessedUID) {
  this.lastProcessedUID = lastProcessedUID;
};


/**
 * The message sets that make up the content of this request.
 *
 * @return {RequestMessageSet[]} The message sets that make up the content of this request.
 * @see "Section 2.4.5, OFX Spec"
 */
RequestEnvelope.prototype.getMessageSets = function() {
  return this.messageSets;
};
ChildAggregate.add(RequestEnvelope, {order: 1, attributeType: Array, collectionEntryType: RequestMessageSet, readMethod: "getMessageSets", writeMethod: "setMessageSets"});


/**
 * The message sets that make up the content of this request.
 *
 * @param {RequestMessageSet[]} messageSets The message sets that make up the content of this request.
 * @see "Section 2.4.5, OFX Spec"
 */
RequestEnvelope.prototype.setMessageSets = function(messageSets) {
  this.messageSets = messageSets;
};




module.exports = RequestEnvelope;

},{"../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../meta/Header":"/Users/aolson/Developer/ofx4js/src/meta/Header.js","./ApplicationSecurity":"/Users/aolson/Developer/ofx4js/src/domain/data/ApplicationSecurity.js","./RequestMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/RequestMessageSet.js","uuid":"/Users/aolson/Developer/ofx4js/node_modules/uuid/uuid.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/RequestMessage.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * A message applicable to a request message set.
 *
 * @class
 */
function RequestMessage () {
}


module.exports = RequestMessage;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/RequestMessageSet.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * A message set enclosed in an OFX request envelope.
 *
 * @class
 */
function RequestMessageSet () {

  /**
   * @name RequestMessageSet#version
   * @type String
   * @access private
   */
  this.version = "1";
}


RequestMessageSet.prototype.getType = function() { throw new Error("not implemented"); };

/**
 * The version of this request message.
 *
 * @return {String} The version of this request message.
 */
RequestMessageSet.prototype.getVersion = function() {
  return this.version;
};

/**
 * The version of this request message.
 *
 * @param {String} version The version of this request message.
 */
RequestMessageSet.prototype.setVersion = function(version) {
  this.version = version;
};

/**
 * The request messages for this request message set.
 *
 * @return {RequestMessage[]} The request messages for this request message set.
 */
RequestMessageSet.prototype.getRequestMessages = function() { throw new Error("not implemented"); };

// Inherited.
RequestMessageSet.prototype.compareTo = function(/*RequestMessageSet*/ o) {
  return this.getType().compareTo(o.getType());
};




module.exports = RequestMessageSet;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/ResponseEnvelope.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var Aggregate = require("../../meta/Aggregate");
var ChildAggregate = require("../../meta/ChildAggregate");
var Header = require("../../meta/Header");
var ApplicationSecurity = require("./ApplicationSecurity");
var MessageSetType = require("./MessageSetType");
var ResponseMessageSet = require("./ResponseMessageSet");

/**
 * Envelope for enclosing an OFX response.
 *
 * @class
 * @see "Section 2.4.3, OFX Spec"
 */
function ResponseEnvelope () {

  /**
   * @name ResponseEnvelope#security
   * @type ApplicationSecurity
   * @access private
   */
  this.security = null;

  /**
   * @name ResponseEnvelope#UID
   * @type String
   * @access private
   */
  this.UID = null;

  /**
   * @name ResponseEnvelope#messageSets
   * @type ResponseMessageSet[]
   * @access private
   */
  this.messageSets = null;
}



Aggregate.add("OFX", ResponseEnvelope);


/**
 * The security of this envelope.
 *
 * @return {ApplicationSecurity} The security of this envelope.
 * @see "Section 2.2, OFX spec"
 */
ResponseEnvelope.prototype.getSecurity = function() {
  return this.security;
};
Header.add(ResponseEnvelope, {name: "SECURITY", attributeType: ApplicationSecurity, readMethod: "getSecurity", writeMethod: "setSecurity"});


/**
 * The security of this envelope.
 *
 * @param {ApplicationSecurity} security The security of this envelope.
 * @see "Section 2.2, OFX spec"
 */
ResponseEnvelope.prototype.setSecurity = function(security) {
  this.security = security;
};


/**
 * The UID for the envelope.
 *
 * @return {String} The UID for the envelope.
 * @see "Section 2.2, OFX spec"
 */
ResponseEnvelope.prototype.getUID = function() {
  return this.UID;
};
Header.add(ResponseEnvelope, {name: "NEWFILEUID", attributeType: String, readMethod: "getUID", writeMethod: "setUID"});


/**
 * The UID for the envelope.
 *
 * @param {String} UID The UID for the envelope.
 * @see "Section 2.2, OFX spec"
 */
ResponseEnvelope.prototype.setUID = function(UID) {
  this.UID = UID;
};


/**
 * The message sets that make up the content of this response.
 *
 * @return {ResponseMessageSet[]} The message sets that make up the content of this response.
 * @see "Section 2.4.5, OFX Spec"
 */
ResponseEnvelope.prototype.getMessageSets = function() {
  return this.messageSets;
};
ChildAggregate.add(ResponseEnvelope, {order: 1, attributeType: Array, collectionEntryType: ResponseMessageSet, readMethod: "getMessageSets", writeMethod: "setMessageSets"});


/**
 * The message sets that make up the content of this response.
 *
 * @param {ResponseMessageSet[]} messageSets The message sets that make up the content of this response.
 * @see "Section 2.4.5, OFX Spec"
 */
ResponseEnvelope.prototype.setMessageSets = function(messageSets) {
  this.messageSets = messageSets;
};


/**
 * Helper method for looking up the signon response.
 *
 * @return {SignonResponse} The signon response, or null if none found.
 */
ResponseEnvelope.prototype.getSignonResponse = function() {
  var type = MessageSetType.signon;
  var message = this.getMessageSet(type);

  if (message !== null) {
    return message.getSignonResponse();
  }
  else {
    return null;
  }
};


/**
 * Get the message set of the specified type.
 *
 * @param {MessageSetType} type The type.
 * @return {ResponseMessageSet} The message set, or null.
 */
ResponseEnvelope.prototype.getMessageSet = function(type) {
  var message = null;
  if (this.messageSets !== null) {
    for (var messageSet in this.messageSets) {
      if (messageSet.getType() == type) {
        message = messageSet;
        break;
      }
    }
  }
  return message;
};




module.exports = ResponseEnvelope;

},{"../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../meta/Header":"/Users/aolson/Developer/ofx4js/src/meta/Header.js","./ApplicationSecurity":"/Users/aolson/Developer/ofx4js/src/domain/data/ApplicationSecurity.js","./MessageSetType":"/Users/aolson/Developer/ofx4js/src/domain/data/MessageSetType.js","./ResponseMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/ResponseMessageSet.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/ResponseMessage.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * A message applicable to a response message set.
 *
 * @class
 */
function ResponseMessage () {
}





/**
 * The name of the response message.
 *
 * @return {String} The name of the response message.
 */
ResponseMessage.prototype.getResponseMessageName = function() { throw new Error("not implemented"); };




module.exports = ResponseMessage;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/ResponseMessageSet.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * A message set enclosed in a response envelope.
 *
 * @class
 */
function ResponseMessageSet () {

  /**
   * @name ResponseMessageSet#version
   * @type String
   * @access private
   */
  this.version = "1";
}


ResponseMessageSet.prototype.getType = function() { throw new Error("not implemented"); };

/**
 * The version of this message set.
 *
 * @return {String} The version of this message set.
 */
ResponseMessageSet.prototype.getVersion = function() {
  return this.version;
};

/**
 * The version of this message set.
 *
 * @param {String} version The version of this message set.
 */
ResponseMessageSet.prototype.setVersion = function(version) {
  this.version = version;
};

/**
 * The list of response messages.
 *
 * @return {ResponseMessage[]} The list of response messages.
 */
ResponseMessageSet.prototype.getResponseMessages = function() { throw new Error("not implemented"); };

// Inherited.
ResponseMessageSet.prototype.compareTo = function(/*ResponseMessageSet*/ o) {
  return this.getType().compareTo(o.getType());
};




module.exports = ResponseMessageSet;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/SignonProfile.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * @class
 */
function SignonProfile() {
}

/**
 * The name of the sign-on realm.
 *
 * @return {String} The name of the sign-on realm.
 */
SignonProfile.prototype.getRealm = function() { throw new Error("not implemented"); };

/**
 * The minimum number of password characters.
 *
 * @return {Integer} The minimum number of password characters.
 */
SignonProfile.prototype.getMinPasswordCharacters = function() { throw new Error("not implemented"); };

/**
 * The maximum number of password characters.
 *
 * @return {Integer} The maximum number of password characters.
 */
SignonProfile.prototype.getMaxPasswordCharacters = function() { throw new Error("not implemented"); };

/**
 * The type of password characters supported.
 *
 * @return {CharacterType} The type of password characters supported.
 */
SignonProfile.prototype.getPasswordCharacterType = function() { throw new Error("not implemented"); };

/**
 * Whether the password is case-sensitive.
 *
 * @return {Boolean} Whether the password is case-sensitive.
 */
SignonProfile.prototype.getPasswordCaseSensitive = function() { throw new Error("not implemented"); };

/**
 * Whether special characters are allowed in the password.
 *
 * @return {Boolean} Whether special characters are allowed in the password.
 */
SignonProfile.prototype.getPasswordSpecialCharsAllowed = function() { throw new Error("not implemented"); };

/**
 * Whether spaces are allowed in the password.
 *
 * @return {Boolean} Whether spaces are allowed in the password.
 */
SignonProfile.prototype.getPasswordSpacesAllowed = function() { throw new Error("not implemented"); };

/**
 * Whether the server can process a password change request for this realm.
 *
 * @return {Boolean} Whether the server can process a password change request for this realm.
 */
SignonProfile.prototype.getChangePasswordSupported = function() { throw new Error("not implemented"); };

/**
 * Whether the server requires the user to change their password as part of their first signon.
 *
 * @return {Boolean} Whether the server requires the user to change their password as part of their first signon.
 */
SignonProfile.prototype.getChangePasswordFirstRequired = function() { throw new Error("not implemented"); };

/**
 * Label for a set of additional credentials that the user must supply.
 *
 * @return {String} Label for a set of additional credentials that the user must supply.
 */
SignonProfile.prototype.getAdditionalCredientialsLabel1 = function() { throw new Error("not implemented"); };

/**
 * Label for a set of additional credentials that the user must supply.
 *
 * @return {String} Label for a set of additional credentials that the user must supply.
 */
SignonProfile.prototype.getAdditionalCredientialsLabel2 = function() { throw new Error("not implemented"); };

/**
 * Whether a client UID is required for teh sign-on.
 *
 * @return {Boolean} Whether a client UID is required for teh sign-on.
 */
SignonProfile.prototype.getClientUIDRequired = function() { throw new Error("not implemented"); };

/**
 * Whether an auth token is required for the sign-on.
 *
 * @return {Boolean} Whether an auth token is required for the sign-on.
 */
SignonProfile.prototype.getAuthTokenRequiredForFirstSignon = function() { throw new Error("not implemented"); };

/**
 * The label of the auth token.
 *
 * @return {String} The label of the auth token.
 */
SignonProfile.prototype.getAuthTokenLabel = function() { throw new Error("not implemented"); };

/**
 * The URL for the auth token information.
 *
 * @return {String} The URL for the auth token information.
 */
SignonProfile.prototype.getAuthTokenInfoURL = function() { throw new Error("not implemented"); };

/**
 * Whether MFA is supported.
 *
 * @return {Boolean} Whether MFA is supported.
 */
SignonProfile.prototype.getMfaSupported = function() { throw new Error("not implemented"); };

/**
 * Whether an MFA challenge request is required for the first sign-on into this realm.
 *
 * @return {Boolean} Whether an MFA challenge request is required for the first sign-on into this realm.
 */
SignonProfile.prototype.getMfaChallengeRequiredForFirstSignon = function() { throw new Error("not implemented"); };


module.exports = SignonProfile;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/TransactionWrappedRequestMessage.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../util/inherit");

var Element = require("../../meta/Element");
var UUID = require("uuid");
var RequestMessage = require("./ResponseMessage");

/**
 * A request message wrapped in a transaction.
 *
 * @class
 * @see "Section 2.4.6, OFX Spec"
 * @param {RequestMessage} M
 */
function TransactionWrappedRequestMessage(/*M*/) {

  /**
   * constructor
   */
  var c = function() {
    var UID;
    if(arguments.length === 1) {
      UID = arguments[0];
    } else {
      UID = UUID.v4();
    }

    /**
     * @type String
     */
    this.UID = UID;

    /**
     * @type String
     */
    this.clientCookie = null;

    /**
     * @type String
     */
    this.transactionAuthorizationNumber = null;
  };

  /**
   * UID of this transaction.
   *
   * @return UID of this transaction.
   */
  c.prototype.getUID = function() {
    return this.UID;
  };
  Element.add(c, {name: "TRNUID", required: true, order: 0, attributeType: String, readMethod: "getUID", writeMethod: "setUID"});


  /**
   * UID of this transaction.
   *
   * @param {String} UID UID of this transaction.
   */
  c.prototype.setUID = function(UID) {
    this.UID = UID;
  };

  /**
   * Client cookie (echoed back by the response).
   *
   * @return {String} Client cookie (echoed back by the response).
   */
  c.prototype.getClientCookie = function() {
    return this.clientCookie;
  };
  Element.add(c, {name: "CLTCOOKIE", order: 10, attributeType: String, readMethod: "getClientCookie", writeMethod: "setClientCookie"});

  /**
   * Client cookie (echoed back by the response).
   *
   * @param {String} clientCookie Client cookie (echoed back by the response).
   */
  c.prototype.setClientCookie = function(clientCookie) {
    this.clientCookie = clientCookie;
  };

  /**
   * The transaction authorization number.
   *
   * @return {String} The transaction authorization number.
   */
  c.prototype.getTransactionAuthorizationNumber = function() {
    return this.transactionAuthorizationNumber;
  };
  Element.add(c, {name: "TAN", order: 20, attributeType: String, readMethod: "getTransactionAuthorizationNumber", writeMethod: "setTransactionAuthorizationNumber"});

  /**
   * The transaction authorization number.
   *
   * @param {String} transactionAuthorizationNumber The transaction authorization number.
   */
  c.prototype.setTransactionAuthorizationNumber = function(transactionAuthorizationNumber) {
    this.transactionAuthorizationNumber = transactionAuthorizationNumber;
  };
  
  
  /**
   * Set the wrapped message.
   *
   * @param {M} message The wrapped message.
   */
  c.prototype.setWrappedMessage = function(/*message*/) { throw new Error("not implemented"); };


  inherit(c, 'extends', RequestMessage);
  return c;
}

module.exports = TransactionWrappedRequestMessage;

},{"../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","./ResponseMessage":"/Users/aolson/Developer/ofx4js/src/domain/data/ResponseMessage.js","uuid":"/Users/aolson/Developer/ofx4js/node_modules/uuid/uuid.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/TransactionWrappedResponseMessage.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../util/inherit");

var StatusHolder = require("./common/StatusHolder");
var ChildAggregate = require("../../meta/ChildAggregate");
var Element = require("../../meta/Element");
var Aggregate = require("../../meta/Aggregate");
var ResponseMessage = require("./ResponseMessage");
var Status = require("./common/Status");

/**
 * A response message wrapped in a transaction.
 *
 * @class
 * @augments ResponseMessage
 * @augments StatusHolder
 * @see "Section 2.4.6, OFX Spec"
 */
function TransactionWrappedResponseMessage(/*M*/) {
  /**
   * @type String
   */
  this.UID = null;

  /**
   * @type String
   */
  this.clientCookie = null;

  /**
   * @type Status
   */
  this.status = null;
}

inherit(TransactionWrappedResponseMessage, 'extends', ResponseMessage);
inherit(TransactionWrappedResponseMessage, 'implements', StatusHolder);


/**
 * UID of this transaction.
 *
 * @return {String} UID of this transaction.
 */
TransactionWrappedResponseMessage.prototype.getUID = function() {
  return this.UID;
};
Element.add(TransactionWrappedResponseMessage, {name: "TRNUID", required: true, order: 0, attributeType: String, readMethod: "getUID", writeMethod: "setUID"});

/**
 * UID of this transaction.
 *
 * @param {String} UID UID of this transaction.
 */
TransactionWrappedResponseMessage.prototype.setUID = function(UID) {
  this.UID = UID;
};

/**
 * Client cookie (echoed back by the response).
 *
 * @return {String} Client cookie (echoed back by the response).
 */
TransactionWrappedResponseMessage.prototype.getClientCookie = function() {
  return this.clientCookie;
};
Element.add(TransactionWrappedResponseMessage, {name: "CLTCOOKIE", order: 20, attributeType: String, readMethod: "getClientCookie", writeMethod: "setClientCookie"});

/**
 * Client cookie (echoed back by the response).
 *
 * @param {String} clientCookie Client cookie (echoed back by the response).
 */
TransactionWrappedResponseMessage.prototype.setClientCookie = function(clientCookie) {
  this.clientCookie = clientCookie;
};

// Inherited.
TransactionWrappedResponseMessage.prototype.getStatusHolderName = function() {
  return this.getResponseMessageName();
};

// Inherited.
TransactionWrappedResponseMessage.prototype.getResponseMessageName = function() {
  var name = "transaction response";
  if (this.getWrappedMessage() !== null) {
    name = this.getWrappedMessage().getResponseMessageName() + " transaction";
  }
  else if (this.getClass().isAnnotationPresent(Aggregate.class)) {
    name = this.getClass().getAnnotation(Aggregate.class).value() + " transaction";
  }

  return name;
};

/**
 * Status of the transaction.
 *
 * @return {Status} Status of the transaction.
 */
TransactionWrappedResponseMessage.prototype.getStatus = function() {
  return this.status;
};
ChildAggregate.add(TransactionWrappedResponseMessage, {required: true, order: 10, attributeType: Status, readMethod: "getStatus", writeMethod: "setStatus"});

/**
 * Status of the transaction.
 *
 * @param {Status} status Status of the transaction.
 */
TransactionWrappedResponseMessage.prototype.setStatus = function(status) {
  this.status = status;
};

/**
 * Get the wrapped message.
 *
 * @return The wrapped message.
 */
TransactionWrappedResponseMessage.prototype.getWrappedMessage = function() { throw new Error("not implemented"); };

module.exports = TransactionWrappedResponseMessage;

},{"../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","./ResponseMessage":"/Users/aolson/Developer/ofx4js/src/domain/data/ResponseMessage.js","./common/Status":"/Users/aolson/Developer/ofx4js/src/domain/data/common/Status.js","./common/StatusHolder":"/Users/aolson/Developer/ofx4js/src/domain/data/common/StatusHolder.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/banking/AccountType.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * @see "OFX Spec, Section 11.3.1.1"
 * @enum
 */
var AccountType = {

  CHECKING: 0,

  SAVINGS: 1,

  MONEYMRKT: 2,

  CREDITLINE: 3
  
};


module.exports = AccountType;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/banking/BankAccountDetails.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var Aggregate = require("../../../meta/Aggregate");
var Element = require("../../../meta/Element");
var AccountDetails = require("../common/AccountDetails");
var AccountType = require("./AccountType");

/**
 * Base bank account details.
 *
 * @class
 * @augments AccountDetails
 * @see "OFX Spec, Section 11.3.1"
 */
function BankAccountDetails () {

  /**
   * @name BankAccountDetails#bankId
   * @type String
   * @access private
   */
  this.bankId = null;

  /**
   * @name BankAccountDetails#branchId
   * @type String
   * @access private
   */
  this.branchId = null;

  /**
   * @name BankAccountDetails#accountNumber
   * @type String
   * @access private
   */
  this.accountNumber = null;

  /**
   * @name BankAccountDetails#accountType
   * @type AccountType
   * @access private
   */
  this.accountType = null;

  /**
   * @name BankAccountDetails#accountKey
   * @type String
   * @access private
   */
  this.accountKey = null;
}

inherit(BankAccountDetails, "implements", AccountDetails);


Aggregate.add("BankAccountDetails", BankAccountDetails);


/**
 * The routing and transit number.
 *
 * @return {String} The routing and transit number.
 */
BankAccountDetails.prototype.getBankId = function() {
  return this.bankId;
};
Element.add(BankAccountDetails, {name: "BANKID", required: true, order: 0, attributeType: String, readMethod: "getBankId", writeMethod: "setBankId"});


/**
 * The routing and transit number.
 *
 * @param {String} bankId The routing and transit number.
 */
BankAccountDetails.prototype.setBankId = function(bankId) {
  this.bankId = bankId;
};


/**
 * The routing and transit number.
 *
 * @return {String} The routing and transit number.
 */
BankAccountDetails.prototype.getRoutingNumber = function() {
  return this.getBankId();
};


/**
 * The routing and transit number.
 *
 * @param {String} routingNumber The routing and transit number.
 */
BankAccountDetails.prototype.setRoutingNumber = function(routingNumber) {
  this.setBankId(routingNumber);
};


/**
 * The branch id.
 *
 * @return {String} The branch id.
 */
BankAccountDetails.prototype.getBranchId = function() {
  return this.branchId;
};
Element.add(BankAccountDetails, {name: "BRANCHID", order: 10, attributeType: String, readMethod: "getBranchId", writeMethod: "setBranchId"});


/**
 * The branch id.
 *
 * @param {String} branchId The branch id.
 */
BankAccountDetails.prototype.setBranchId = function(branchId) {
  this.branchId = branchId;
};


/**
 * The account number.
 *
 * @return {String} The account number.
 */
BankAccountDetails.prototype.getAccountNumber = function() {
  return this.accountNumber;
};
Element.add(BankAccountDetails, {name: "ACCTID", required: true, order: 20, attributeType: String, readMethod: "getAccountNumber", writeMethod: "setAccountNumber"});


/**
 * The account number.
 *
 * @param {String} accountNumber The account number.
 */
BankAccountDetails.prototype.setAccountNumber = function(accountNumber) {
  this.accountNumber = accountNumber;
};


/**
 * The account type.
 *
 * @return {AccountType} The account type.
 */
BankAccountDetails.prototype.getAccountType = function() {
  return this.accountType;
};
Element.add(BankAccountDetails, {name: "ACCTTYPE", required: true, order: 30, attributeType: AccountType, readMethod: "getAccountType", writeMethod: "setAccountType"});


/**
 * The account type.
 *
 * @param {AccountType} accountType The account type.
 */
BankAccountDetails.prototype.setAccountType = function(accountType) {
  this.accountType = accountType;
};


/**
 * The account key.
 *
 * @return {String} The account key.
 */
BankAccountDetails.prototype.getAccountKey = function() {
  return this.accountKey;
};
Element.add(BankAccountDetails, {name: "ACCTKEY", order: 40, attributeType: String, readMethod: "getAccountKey", writeMethod: "setAccountKey"});


/**
 * The account key.
 *
 * @param {String} accountKey The account key.
 */
BankAccountDetails.prototype.setAccountKey = function(accountKey) {
  this.accountKey = accountKey;
};




module.exports = BankAccountDetails;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../common/AccountDetails":"/Users/aolson/Developer/ofx4js/src/domain/data/common/AccountDetails.js","./AccountType":"/Users/aolson/Developer/ofx4js/src/domain/data/banking/AccountType.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/banking/BankAccountInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var ChildAggregate = require("../../../meta/ChildAggregate");
var Element = require("../../../meta/Element");
var Aggregate = require("../../../meta/Aggregate");
var AccountInfo = require("../common/AccountInfo");
var AccountStatus = require("../common/AccountStatus");
var BankAccountDetails = require("./BankAccountDetails");

/**
 * @class
 * @augments AccountInfo
 */
function BankAccountInfo () {

  /**
   * @name BankAccountInfo#bankAccount
   * @type BankAccountDetails
   * @access private
   */
  this.bankAccount = null;

  /**
   * @name BankAccountInfo#supportsTransactionDetailOperations
   * @type Boolean
   * @access private
   */
  this.supportsTransactionDetailOperations = null;

  /**
   * @name BankAccountInfo#supportsTransferToOtherAccountOperations
   * @type Boolean
   * @access private
   */
  this.supportsTransferToOtherAccountOperations = null;

  /**
   * @name BankAccountInfo#supportsTransferFromOtherAccountOperations
   * @type Boolean
   * @access private
   */
  this.supportsTransferFromOtherAccountOperations = null;

  /**
   * @name BankAccountInfo#status
   * @type AccountStatus
   * @access private
   */
  this.status = null;
}

inherit(BankAccountInfo, "implements", AccountInfo);


Aggregate.add("BANKACCTINFO", BankAccountInfo);


/**
 * The bank account this information is referencing.
 *
 * @return {BankAccountDetails} The bank account this information is referencing.
 */
BankAccountInfo.prototype.getBankAccount = function() {
  return this.bankAccount;
};
ChildAggregate.add(BankAccountInfo, {name: "BANKACCTFROM", required: true, order: 0, attributeType: BankAccountDetails, readMethod: "getBankAccount", writeMethod: "setBankAccount"});


/**
 * The bank account this information is referencing.
 *
 * @param {BankAccountDetails} bankAccount The bank account this information is referencing.
 */
BankAccountInfo.prototype.setBankAccount = function(bankAccount) {
  this.bankAccount = bankAccount;
};


// Inherited.
BankAccountInfo.prototype.getAccountDetails = function() {
  return this.getBankAccount();
};


/**
 * Whether this account supports download of transaction details.
 *
 * @return {Boolean} Whether this account supports download of transaction details.
 */
BankAccountInfo.prototype.getSupportsTransactionDetailOperations = function() {
  return this.supportsTransactionDetailOperations;
};
Element.add(BankAccountInfo, {name: "SUPTXDL", required: true, order: 10, attributeType: Boolean, readMethod: "getSupportsTransactionDetailOperations", writeMethod: "setSupportsTransactionDetailOperations"});


/**
 * Whether this account supports download of transaction details.
 *
 * @param {Boolean} supportsTransactionDetailOperations Whether this account supports download of transaction details.
 */
BankAccountInfo.prototype.setSupportsTransactionDetailOperations = function(supportsTransactionDetailOperations) {
  this.supportsTransactionDetailOperations = supportsTransactionDetailOperations;
};


/**
 * Whether this account supports transfer operations to other accounts.
 *
 * @return {Boolean} Whether this account supports transfer operations to other accounts.
 */
BankAccountInfo.prototype.getSupportsTransferToOtherAccountOperations = function() {
  return this.supportsTransferToOtherAccountOperations;
};
Element.add(BankAccountInfo, {name: "XFERSRC", required: true, order: 20, attributeType: Boolean, readMethod: "getSupportsTransferToOtherAccountOperations", writeMethod: "setSupportsTransferToOtherAccountOperations"});


/**
 * Whether this account supports transfer operations to other accounts.
 *
 * @param {Boolean} supportsTransferToOtherAccountOperations Whether this account supports transfer operations to other accounts.
 */
BankAccountInfo.prototype.setSupportsTransferToOtherAccountOperations = function(supportsTransferToOtherAccountOperations) {
  this.supportsTransferToOtherAccountOperations = supportsTransferToOtherAccountOperations;
};


/**
 * Whether this account supports transfer operations from other accounts.
 *
 * @return {Boolean} Whether this account supports transfer operations from other accounts.
 */
BankAccountInfo.prototype.getSupportsTransferFromOtherAccountOperations = function() {
  return this.supportsTransferFromOtherAccountOperations;
};
Element.add(BankAccountInfo, {name: "XFERDEST", required: true, order: 30, attributeType: Boolean, readMethod: "getSupportsTransferFromOtherAccountOperations", writeMethod: "setSupportsTransferFromOtherAccountOperations"});


/**
 * Whether this account supports transfer operations from other accounts.
 *
 * @param {Boolean} supportsTransferFromOtherAccountOperations Whether this account supports transfer operations from other accounts.
 */
BankAccountInfo.prototype.setSupportsTransferFromOtherAccountOperations = function(supportsTransferFromOtherAccountOperations) {
  this.supportsTransferFromOtherAccountOperations = supportsTransferFromOtherAccountOperations;
};


/**
 * The account status.
 *
 * @return {AccountStatus} The account status.
 */
BankAccountInfo.prototype.getStatus = function() {
  return this.status;
};
Element.add(BankAccountInfo, {name: "SVCSTATUS", required: true, order: 40, attributeType: AccountStatus, readMethod: "getStatus", writeMethod: "setStatus"});


/**
 * The account status.
 *
 * @param {AccountStatus} status The account status.
 */
BankAccountInfo.prototype.setStatus = function(status) {
  this.status = status;
};




module.exports = BankAccountInfo;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../common/AccountInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/common/AccountInfo.js","../common/AccountStatus":"/Users/aolson/Developer/ofx4js/src/domain/data/common/AccountStatus.js","./BankAccountDetails":"/Users/aolson/Developer/ofx4js/src/domain/data/banking/BankAccountDetails.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/banking/BankStatementRequest.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var StatementRequest = require("../common/StatementRequest");
var ChildAggregate = require("../../../meta/ChildAggregate");
var Aggregate = require("../../../meta/Aggregate");
var BankAccountDetails = require("./BankAccountDetails");

/**
 * @class
 * @augments StatementRequest
 */
function BankStatementRequest () {

  /**
   * @name BankStatementRequest#account
   * @type BankAccountDetails
   * @access private
   */
  this.account = null;
}

inherit(BankStatementRequest, "extends", StatementRequest);


Aggregate.add("STMTRQ", BankStatementRequest);


/**
 * The account details.
 *
 * @return {BankAccountDetails} The account details.
 */
BankStatementRequest.prototype.getAccount = function() {
  return this.account;
};
ChildAggregate.add(BankStatementRequest, {name: "BANKACCTFROM", required: true, order: 0, attributeType: BankAccountDetails, readMethod: "getAccount", writeMethod: "setAccount"});


/**
 * The account details.
 *
 * @param {BankAccountDetails} account The account details.
 */
BankStatementRequest.prototype.setAccount = function(account) {
  this.account = account;
};




module.exports = BankStatementRequest;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../common/StatementRequest":"/Users/aolson/Developer/ofx4js/src/domain/data/common/StatementRequest.js","./BankAccountDetails":"/Users/aolson/Developer/ofx4js/src/domain/data/banking/BankAccountDetails.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/banking/BankStatementRequestTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var BankStatementRequest = require("./BankStatementRequest");
var TransactionWrappedRequestMessage = require("../TransactionWrappedRequestMessage");
var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");

/**
 * @class
 * @augments TransactionWrappedRequestMessage
 */
function BankStatementRequestTransaction () {

  /**
   * @name BankStatementRequestTransaction#message
   * @type BankStatementRequest
   * @access private
   */
  this.message = null;
}

inherit(BankStatementRequestTransaction, "extends", new TransactionWrappedRequestMessage(BankStatementRequest));


Aggregate.add("STMTTRNRQ", BankStatementRequestTransaction);


/**
 * The message.
 *
 * @return {BankStatementRequest} The message.
 */
BankStatementRequestTransaction.prototype.getMessage = function() {
  return this.message;
};
ChildAggregate.add(BankStatementRequestTransaction, {required: true, order: 30, attributeType: BankStatementRequest, readMethod: "getMessage", writeMethod: "setMessage"});


/**
 * The message.
 *
 * @param {BankStatementRequest} message The message.
 *
 */
BankStatementRequestTransaction.prototype.setMessage = function(message) {
  this.message = message;
};


// Inherited.
BankStatementRequestTransaction.prototype.setWrappedMessage = function(/*BankStatementRequest*/ message) {
  this.setMessage(message);
};




module.exports = BankStatementRequestTransaction;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../TransactionWrappedRequestMessage":"/Users/aolson/Developer/ofx4js/src/domain/data/TransactionWrappedRequestMessage.js","./BankStatementRequest":"/Users/aolson/Developer/ofx4js/src/domain/data/banking/BankStatementRequest.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/banking/BankStatementResponse.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var StatementResponse = require("../common/StatementResponse");
var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");
var BankAccountDetails = require("./BankAccountDetails");

/**
 * @class
 * @augments StatementResponse
 */
function BankStatementResponse () {

  /**
   * @name BankStatementResponse#account
   * @type BankAccountDetails
   * @access private
   */
  this.account = null;
}

inherit(BankStatementResponse, "extends", StatementResponse);


Aggregate.add("STMTRS", BankStatementResponse);


BankStatementResponse.prototype.getResponseMessageName = function() {
  return "bank statement";
};


/**
 * The account for the statement.
 *
 * @return {BankAccountDetails} The account for the statement.
 */
BankStatementResponse.prototype.getAccount = function() {
  return this.account;
};
ChildAggregate.add(BankStatementResponse, {name:"BANKACCTFROM", order: 10, attributeType: BankAccountDetails, readMethod: "getAccount", writeMethod: "setAccount"});


/**
 * The account for the statement.
 *
 * @param {BankAccountDetails} account The account for the statement.
 */
BankStatementResponse.prototype.setAccount = function(account) {
  this.account = account;
};




module.exports = BankStatementResponse;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../common/StatementResponse":"/Users/aolson/Developer/ofx4js/src/domain/data/common/StatementResponse.js","./BankAccountDetails":"/Users/aolson/Developer/ofx4js/src/domain/data/banking/BankAccountDetails.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/banking/BankStatementResponseTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var BankStatementResponse = require("./BankStatementResponse");
var TransactionWrappedResponseMessage = require("../TransactionWrappedResponseMessage");
var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");

/**
 * @class
 * @augments TransactionWrappedResponseMessage
 */
function BankStatementResponseTransaction () {

  /**
   * @name BankStatementResponseTransaction#message
   * @type BankStatementResponse
   * @access private
   */
  this.message = null;
}

inherit(BankStatementResponseTransaction, "extends", new TransactionWrappedResponseMessage(BankStatementResponse));


Aggregate.add("STMTTRNRS", BankStatementResponseTransaction);


/**
 * The message.
 *
 * @return {BankStatementResponse} The message.
 */
BankStatementResponseTransaction.prototype.getMessage = function() {
  return this.message;
};
ChildAggregate.add(BankStatementResponseTransaction, {required: true, order: 30, attributeType: BankStatementResponse, readMethod: "getMessage", writeMethod: "setMessage"});


/**
 * The message.
 *
 * @param {BankStatementResponse} message The message.
 */
BankStatementResponseTransaction.prototype.setMessage = function(message) {
  this.message = message;
};


// Inherited.
BankStatementResponseTransaction.prototype.getWrappedMessage = function() {
  return this.getMessage();
};




module.exports = BankStatementResponseTransaction;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../TransactionWrappedResponseMessage":"/Users/aolson/Developer/ofx4js/src/domain/data/TransactionWrappedResponseMessage.js","./BankStatementResponse":"/Users/aolson/Developer/ofx4js/src/domain/data/banking/BankStatementResponse.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/banking/BankingRequestMessageSet.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var MessageSetType = require("../MessageSetType");
var RequestMessageSet = require("../RequestMessageSet");
var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");
var BankStatementRequestTransaction = require("./BankStatementRequestTransaction");

/**
 * @class
 * @augments BankingRequestMessageSet
 */
function BankingRequestMessageSet () {

  /**
   * @name BankingRequestMessageSet#statementRequest
   * @type BankStatementRequestTransaction
   * @access private
   */
  this.statementRequest = null;
}

inherit(BankingRequestMessageSet, "extends", RequestMessageSet);


Aggregate.add("BANKMSGSRQV1", BankingRequestMessageSet);


BankingRequestMessageSet.prototype.getType = function() {
  return MessageSetType.banking;
};


/**
 * The statement request.
 *
 * @return {BankStatementRequestTransaction} The statement request.
 */
BankingRequestMessageSet.prototype.getStatementRequest = function() {
  return this.statementRequest;
};
ChildAggregate.add(BankingRequestMessageSet, {order: 0, attributeType: BankStatementRequestTransaction, readMethod: "getStatementRequest", writeMethod: "setStatementRequest"});


/**
 * The statement request.
 *
 * @param {BankStatementRequestTransaction} statementRequest The statement request.
 */
BankingRequestMessageSet.prototype.setStatementRequest = function(statementRequest) {
  this.statementRequest = statementRequest;
};


// Inherited.
BankingRequestMessageSet.prototype.getRequestMessages = function() {
  var requestMessages = [];
  if (this.getStatementRequest() !== null) {
    requestMessages.push(this.getStatementRequest());
  }
  return requestMessages;
};




module.exports = BankingRequestMessageSet;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../MessageSetType":"/Users/aolson/Developer/ofx4js/src/domain/data/MessageSetType.js","../RequestMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/RequestMessageSet.js","./BankStatementRequestTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/banking/BankStatementRequestTransaction.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/banking/BankingResponseMessageSet.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var MessageSetType = require("../MessageSetType");
var ResponseMessageSet = require("../ResponseMessageSet");
var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");
var BankStatementResponseTransaction = require("./BankStatementResponseTransaction");

/**
 * @class
 * @augments ResponseMessageSet
 */
function BankingResponseMessageSet () {

  /**
   * @name BankingResponseMessageSet#statementResponses
   * @type List<BankStatementResponseTransaction>
   * @access private
   */
  this.statementResponses = null;
}

inherit(BankingResponseMessageSet, "extends", ResponseMessageSet);


Aggregate.add("BANKMSGSRSV1", BankingResponseMessageSet);


BankingResponseMessageSet.prototype.getType = function() {
  return MessageSetType.banking;
};


/**
 * The statement response list.
 *
 * Most OFX files have a single statement response, except MT2OFX
 * which outputs OFX with multiple statement responses
 * in a single banking response message set.
 *
 * @return {BankStatementResponseTransaction[]} The statement response list.
 */
BankingResponseMessageSet.prototype.getStatementResponses = function() {
  return this.statementResponses;
};
ChildAggregate.add(BankingResponseMessageSet, {order: 0, attributeType: Array, collectionEntryType: BankStatementResponseTransaction, readMethod: "getStatementResponses", writeMethod: "setStatementResponses"});


/**
 * The statement response.
 *
 * @param {BankStatementResponseTransaction[]} statementResponses The statement responses.
 */
BankingResponseMessageSet.prototype.setStatementResponses = function(statementResponses) {
  this.statementResponses = statementResponses;
};


// Inherited.
BankingResponseMessageSet.prototype.getResponseMessages = function() {
  return [this.statementResponses];
};


/**
 * The first statement response.
 *
 * @return {BankStatementResponseTransaction} the first bank statement response.
 * @deprecated Use getStatementResponses() because sometimes there are multiple responses
 */
BankingResponseMessageSet.prototype.getStatementResponse = function() {
  return this.statementResponses === null || this.statementResponses.length === 0 ? null : this.statementResponses[0];
};


BankingResponseMessageSet.prototype.setStatementResponse = function(/*BankStatementResponseTransaction*/ statementResponse) {
  this.statementResponses = [statementResponse];
};




module.exports = BankingResponseMessageSet;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../MessageSetType":"/Users/aolson/Developer/ofx4js/src/domain/data/MessageSetType.js","../ResponseMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/ResponseMessageSet.js","./BankStatementResponseTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/banking/BankStatementResponseTransaction.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/banking/index.js":[function(require,module,exports){
"use strict";

module.exports = {
  AccountType: require("./AccountType"),
  BankAccountDetails: require("./BankAccountDetails"),
  BankAccountInfo: require("./BankAccountInfo"),
  BankingRequestMessageSet: require("./BankingRequestMessageSet"),
  BankingResponseMessageSet: require("./BankingResponseMessageSet"),
  BankStatementRequest: require("./BankStatementRequest"),
  BankStatementRequestTransaction: require("./BankStatementRequestTransaction"),
  BankStatementResponse: require("./BankStatementResponse"),
  BankStatementResponseTransaction: require("./BankStatementResponseTransaction"),
};

},{"./AccountType":"/Users/aolson/Developer/ofx4js/src/domain/data/banking/AccountType.js","./BankAccountDetails":"/Users/aolson/Developer/ofx4js/src/domain/data/banking/BankAccountDetails.js","./BankAccountInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/banking/BankAccountInfo.js","./BankStatementRequest":"/Users/aolson/Developer/ofx4js/src/domain/data/banking/BankStatementRequest.js","./BankStatementRequestTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/banking/BankStatementRequestTransaction.js","./BankStatementResponse":"/Users/aolson/Developer/ofx4js/src/domain/data/banking/BankStatementResponse.js","./BankStatementResponseTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/banking/BankStatementResponseTransaction.js","./BankingRequestMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/banking/BankingRequestMessageSet.js","./BankingResponseMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/banking/BankingResponseMessageSet.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/common/AccountDetails.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * Common details about an account.
 *
 * @class
 */
function AccountDetails() {
}

/**
 * The account number.
 *
 * @return {String} The account number.
 */
AccountDetails.prototype.getAccountNumber = function() { throw new Error("not implemented"); };

/**
 * The account key.
 *
 * @return {String} The account key.
 */
AccountDetails.prototype.getAccountKey = function() { throw new Error("not implemented"); };


module.exports = AccountDetails;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/common/AccountInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * Marker interface for account information.
 *
 * @class
 */
function AccountInfo() {
}

/**
 * The account details.
 *
 * @return {AccountDetails} The account details.
 */
AccountInfo.prototype.getAccountDetails = function() { throw new Error("not implemented"); };


module.exports = AccountInfo;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/common/AccountStatus.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * @enum
 */
var AccountStatus = {

  /**
   * Available: 0, but not yet requested.
   */
  AVAIL: 1,

  /**
   * Requested: 2, but not yet available.
   */
  PEND: 3,

  /**
   * Active: 4.
   */
  ACTIVE: 5

};


module.exports = AccountStatus;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/common/BalanceInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var Aggregate = require("../../../meta/Aggregate");
var Element = require("../../../meta/Element");

/**
 * @class
 */
function BalanceInfo () {

  /**
   * @name BalanceInfo#amount
   * @type double
   * @access private
   */
  this.amount = null;

  /**
   * @name BalanceInfo#asOfDate
   * @type Date
   * @access private
   */
  this.asOfDate = null;
}



Aggregate.add("BalanceInfo", BalanceInfo);


/**
 * The amount.
 *
 * @return {double} The amount.
 */
BalanceInfo.prototype.getAmount = function() {
  return this.amount;
};
Element.add(BalanceInfo, {name: "BALAMT", required: true, order: 0, attributeType: Number, readMethod: "getAmount", writeMethod: "setAmount"});


/**
 * The amount.
 *
 * @param {double} amount The amount.
 */
BalanceInfo.prototype.setAmount = function(amount) {
  this.amount = amount;
};


/**
 * The as-of date.
 *
 * @return {Date} The as-of date.
 */
BalanceInfo.prototype.getAsOfDate = function() {
  return this.asOfDate;
};
Element.add(BalanceInfo, {name: "DTASOF", required: true, order: 10, attributeType: Date, readMethod: "getAsOfDate", writeMethod: "setAsOfDate"});


/**
 * The as-of date.
 *
 * @param {Date} asOfDate The as-of date.
 */
BalanceInfo.prototype.setAsOfDate = function(asOfDate) {
  this.asOfDate = asOfDate;
};




module.exports = BalanceInfo;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/common/BalanceRecord.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");
var Element = require("../../../meta/Element");
var Currency = require("./Currency");

/**
 * @class
 * @see "Section 3.1.3, OFX Spec"
 */
function BalanceRecord () {

  /**
   * @name BalanceRecord#name
   * @type String
   * @access private
   */
  this.name = null;

  /**
   * @name BalanceRecord#description
   * @type String
   * @access private
   */
  this.description = null;

  /**
   * @name BalanceRecord#type
   * @type Type
   * @access private
   */
  this.type = null;

  /**
   * @name BalanceRecord#value
   * @type String
   * @access private
   */
  this.value = null;

  /**
   * @name BalanceRecord#timestamp
   * @type Date
   * @access private
   */
  this.timestamp = null;

  /**
   * @name BalanceRecord#currency
   * @type Currency
   * @access private
   */
  this.currency = null;
}



Aggregate.add("BAL", BalanceRecord);


/**
 * @enum
 */
var Type = BalanceRecord.Type = {

  DOLLAR: 0,

  PERCENT: 1,

  NUMBER: 2
};

/**
 * Name of the balance.
 *
 * @return {String} Name of the balance.
 */
BalanceRecord.prototype.getName = function() {
  return this.name;
};
Element.add(BalanceRecord, {name: "NAME", required: true, order: 0, attributeType: String, readMethod: "getName", writeMethod: "setName"});


/**
 * Name of the balance.
 *
 * @param {String} name Name of the balance.
 */
BalanceRecord.prototype.setName = function(name) {
  this.name = name;
};


/**
 * Description of the balance.
 *
 * @return {String} Description of the balance.
 */
BalanceRecord.prototype.getDescription = function() {
  return this.description;
};
Element.add(BalanceRecord, {name: "DESC", required: true, order: 10, attributeType: String, readMethod: "getDescription", writeMethod: "setDescription"});


/**
 * Description of the balance.
 *
 * @param {String} description Description of the balance.
 */
BalanceRecord.prototype.setDescription = function(description) {
  this.description = description;
};


/**
 * Type of the balance.
 *
 * @return {Type} Type of the balance.
 */
BalanceRecord.prototype.getType = function() {
  return this.type;
};
Element.add(BalanceRecord, {name: "BALTYPE", required: true, order: 20, attributeType: Type, readMethod: "getType", writeMethod: "setType"});


/**
 * Type of the balance.
 *
 * @param {Type} type Type of the balance.
 */
BalanceRecord.prototype.setType = function(type) {
  this.type = type;
};


/**
 * The value of the balance.
 *
 * @return {String} The value of the balance.
 */
BalanceRecord.prototype.getValue = function() {
  return this.value;
};
Element.add(BalanceRecord, {name: "VALUE", required: true, order: 30, attributeType: String, readMethod: "getValue", writeMethod: "setValue"});


/**
 * The value of the balance.
 *
 * @param {String} value The value of the balance.
 */
BalanceRecord.prototype.setValue = function(value) {
  this.value = value;
};


/**
 * Timestamp of the balance.
 *
 * @return {Date} Timestamp of the balance.
 */
BalanceRecord.prototype.getTimestamp = function() {
  return this.timestamp;
};
Element.add(BalanceRecord, {name: "DTASOF", order: 40, attributeType: Date, readMethod: "getTimestamp", writeMethod: "setTimestamp"});


/**
 * Timestamp of the balance.
 *
 * @param {Date} timestamp Timestamp of the balance.
 */
BalanceRecord.prototype.setTimestamp = function(timestamp) {
  this.timestamp = timestamp;
};


/**
 * Currency.
 *
 * @return {Currency} Currency.
 */
BalanceRecord.prototype.getCurrency = function() {
  return this.currency;
};
ChildAggregate.add(BalanceRecord, {order: 50, attributeType: Currency, readMethod: "getCurrency", writeMethod: "setCurrency"});


/**
 * Currency.
 *
 * @param {Currency} currency Currency.
 */
BalanceRecord.prototype.setCurrency = function(currency) {
  this.currency = currency;
};




module.exports = BalanceRecord;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","./Currency":"/Users/aolson/Developer/ofx4js/src/domain/data/common/Currency.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/common/CorrectionAction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * @enum
 */
var CorrectionAction = {

  REPLACE: 0,

  DELETE: 1
};


module.exports = CorrectionAction;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/common/Currency.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var Aggregate = require("../../../meta/Aggregate");
var Element = require("../../../meta/Element");

/**
 * @class
 * @see "Section 5.2, OFX Spec"
 */
function Currency () {

  /**
   * @name Currency#code
   * @type String
   * @access private
   */
  this.code = "USD";

  /**
   * @name Currency#exchangeRate
   * @type Float
   * @access private
   */
  this.exchangeRate = null;
}



Aggregate.add("CURRENCY", Currency);


/**
 * The currency code.
 *
 * @return {String} The currency code.
 * @see java.util.Currency#getCurrencyCode()
 */
Currency.prototype.getCode = function() {
  return this.code;
};
Element.add(Currency, {name: "CURSYM", required: true, order: 0, attributeType: String, readMethod: "getCode", writeMethod: "setCode"});


/**
 * The currency code
 *
 * @param {String} code The currency code
 */
Currency.prototype.setCode = function(code) {
  this.code = code;
};


/**
 * The exchange rate.
 *
 * @return {Float} The exchange rate.
 */
Currency.prototype.getExchangeRate = function() {
  return this.exchangeRate;
};
Element.add(Currency, {name: "CURRATE", required: true, order: 10, attributeType: Number, readMethod: "getExchangeRate", writeMethod: "setExchangeRate"});


/**
 * The exchange rate.
 *
 * @param {Float} exchangeRate The exchange rate.
 */
Currency.prototype.setExchangeRate = function(exchangeRate) {
  this.exchangeRate = exchangeRate;
};




module.exports = Currency;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/common/Payee.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var Aggregate = require("../../../meta/Aggregate");
var Element = require("../../../meta/Element");

/**
 * @class
 */
function Payee () {

  /**
   * @name Payee#name
   * @type String
   * @access private
   */
  this.name = null;

  /**
   * @name Payee#address1
   * @type String
   * @access private
   */
  this.address1 = null;

  /**
   * @name Payee#address2
   * @type String
   * @access private
   */
  this.address2 = null;

  /**
   * @name Payee#address3
   * @type String
   * @access private
   */
  this.address3 = null;

  /**
   * @name Payee#city
   * @type String
   * @access private
   */
  this.city = null;

  /**
   * @name Payee#state
   * @type String
   * @access private
   */
  this.state = null;

  /**
   * @name Payee#zip
   * @type String
   * @access private
   */
  this.zip = null;

  /**
   * @name Payee#country
   * @type String
   * @access private
   */
  this.country = null;

  /**
   * @name Payee#phone
   * @type String
   * @access private
   */
  this.phone = null;
}



Aggregate.add("PAYEE", Payee);


/**
 * The name of the payee.
 *
 * @return {String} The name of the payee.
 */
Payee.prototype.getName = function() {
  return this.name;
};
Element.add(Payee, {name: "NAME", order: 30, attributeType: String, readMethod: "getName", writeMethod: "setName"});


/**
 * The name of the payee.
 *
 * @param {String} name The name of the payee.
 */
Payee.prototype.setName = function(name) {
  this.name = name;
};


/**
 * The address of the payee.
 *
 * @return {String} The address of the payee.
 */
Payee.prototype.getAddress1 = function() {
  return this.address1;
};
Element.add(Payee, {name: "ADDR1", required: true, order: 40, attributeType: String, readMethod: "getAddress1", writeMethod: "setAddress1"});


/**
 * The address of the payee.
 *
 * @param {String} address1 The address of the payee.
 */
Payee.prototype.setAddress1 = function(address1) {
  this.address1 = address1;
};


/**
 * The address of the payee.
 *
 * @return {String} The address of the payee.
 */
Payee.prototype.getAddress2 = function() {
  return this.address2;
};
Element.add(Payee, {name: "ADDR2", order: 50, attributeType: String, readMethod: "getAddress2", writeMethod: "setAddress2"});


/**
 * The address of the payee.
 *
 * @param {String} address2 The address of the payee.
 */
Payee.prototype.setAddress2 = function(address2) {
  this.address2 = address2;
};


/**
 * The address of the payee.
 *
 * @return {String} The address of the payee.
 */
Payee.prototype.getAddress3 = function() {
  return this.address3;
};
Element.add(Payee, {name: "ADDR3", order: 60, attributeType: String, readMethod: "getAddress3", writeMethod: "setAddress3"});


/**
 * The address of the payee.
 *
 * @param {String} address3 The address of the payee.
 */
Payee.prototype.setAddress3 = function(address3) {
  this.address3 = address3;
};


/**
 * The city of the payee.
 *
 * @return {String} The city of the payee.
 */
Payee.prototype.getCity = function() {
  return this.city;
};
Element.add(Payee, {name: "CITY", required: true, order: 70, attributeType: String, readMethod: "getCity", writeMethod: "setCity"});


/**
 * The city of the payee.
 *
 * @param {String} city The city of the payee.
 */
Payee.prototype.setCity = function(city) {
  this.city = city;
};


/**
 * The state of this payee.
 *
 * @return {String} The state of this payee.
 */
Payee.prototype.getState = function() {
  return this.state;
};
Element.add(Payee, {name: "STATE", required: true, order: 80, attributeType: String, readMethod: "getState", writeMethod: "setState"});


/**
 * The state of this payee.
 *
 * @param {String} state The state of this payee.
 */
Payee.prototype.setState = function(state) {
  this.state = state;
};


/**
 * The postal code of this payee.
 *
 * @return {String} The postal code of this payee.
 */
Payee.prototype.getZip = function() {
  return this.zip;
};
Element.add(Payee, {name: "POSTALCODE", required: true, order: 90, attributeType: String, readMethod: "getZip", writeMethod: "setZip"});


/**
 * The postal code of this payee.
 *
 * @param {String} zip The postal code of this payee.
 */
Payee.prototype.setZip = function(zip) {
  this.zip = zip;
};


/**
 * The country code for this payee.
 *
 * @return {String} The country code for this payee.
 * @see java.util.Locale#getISO3Country()
 */
Payee.prototype.getCountry = function() {
  return this.country;
};
Element.add(Payee, {name: "COUNTRY", required: true, order: 100, attributeType: String, readMethod: "getCountry", writeMethod: "setCountry"});


/**
 * The country code for this payee.
 *
 * @param {String} country The country code for this payee.
 */
Payee.prototype.setCountry = function(country) {
  this.country = country;
};


/**
 * The phone number.
 *
 * @return {String} The phone number.
 */
Payee.prototype.getPhone = function() {
  return this.phone;
};
Element.add(Payee, {name: "PHONE", order: 110, attributeType: String, readMethod: "getPhone", writeMethod: "setPhone"});


/**
 * The phone number.
 *
 * @param {String} phone The phone number.
 */
Payee.prototype.setPhone = function(phone) {
  this.phone = phone;
};




module.exports = Payee;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/common/ProcessorDayOff.js":[function(require,module,exports){
/*
 * Copyright 2012 TheStash
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * Day of week used in "PROCDAYSOFF" lists.
 *
 * @enum
 * @see "OFX Spec, Section 13.6.2"
 */
var ProcessorDayOff = {
  MONDAY: 0,
  TUESDAY: 1,
  WEDNESDAY: 2,
  THURSDAY: 3,
  FRIDAY: 4,
  SATURDAY: 5,
  SUNDAY: 6,

  fromOfx: function(/*String*/ ofxVal) {
    if ("MONDAY".equals(ofxVal)) {
      return this.MONDAY;
    } else if ("TUESDAY".equals(ofxVal)) {
      return this.TUESDAY;
    } else if ("WEDNESDAY".equals(ofxVal)) {
      return this.WEDNESDAY;
    } else if ("THURSDAY".equals(ofxVal)) {
      return this.THURSDAY;
    } else if ("FRIDAY".equals(ofxVal)) {
      return this.FRIDAY;
    } else if ("SATURDAY".equals(ofxVal)) {
      return this.SATURDAY;
    } else if ("SUNDAY".equals(ofxVal)) {
      return this.SUNDAY;
    } else {
      return null;
    }
  }
};


module.exports = ProcessorDayOff;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/common/StatementRange.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var Aggregate = require("../../../meta/Aggregate");
var Element = require("../../../meta/Element");

/**
 * @class
 */
function StatementRange () {

  /**
   * @name StatementRange#start
   * @type Date
   * @access private
   */
  this.start = null;

  /**
   * @name StatementRange#end
   * @type Date
   * @access private
   */
  this.end = null;

  /**
   * @name StatementRange#includeTransactions
   * @type Boolean
   * @access private
   */
  this.includeTransactions = Boolean.TRUE;
}



Aggregate.add("INCTRAN", StatementRange);


/**
 * The start of the statement range.
 *
 * @return {Date} The start of the statement range.
 */
StatementRange.prototype.getStart = function() {
  return this.start;
};
Element.add(StatementRange, {name: "DTSTART", order: 0, attributeType: Date, readMethod: "getStart", writeMethod: "setStart"});


/**
 * The start of the statement range.
 *
 * @param {Date} start The start of the statement range.
 */
StatementRange.prototype.setStart = function(start) {
  this.start = start;
};


/**
 * The end of the statement range.
 *
 * @return {Date} The end of the statement range.
 */
StatementRange.prototype.getEnd = function() {
  return this.end;
};
Element.add(StatementRange, {name: "DTEND", order: 10, attributeType: Date, readMethod: "getEnd", writeMethod: "setEnd"});


/**
 * The end of the statement range.
 *
 * @param {Date} end The end of the statement range.
 */
StatementRange.prototype.setEnd = function(end) {
  this.end = end;
};


/**
 * Whether to include transactions.
 *
 * @return {Boolean} Whether to include transactions.
 */
StatementRange.prototype.getIncludeTransactions = function() {
  return this.includeTransactions;
};
Element.add(StatementRange, {name: "INCLUDE", required: true, order: 20, attributeType: Boolean, readMethod: "getIncludeTransactions", writeMethod: "setIncludeTransactions"});


/**
 * Whether to include transactions.
 *
 * @param {Boolean} includeTransactions Whether to include transactions.
 */
StatementRange.prototype.setIncludeTransactions = function(includeTransactions) {
  this.includeTransactions = includeTransactions;
};




module.exports = StatementRange;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/common/StatementRequest.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var RequestMessage = require("../RequestMessage");
var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");
var StatementRange = require("./StatementRange");

/**
 * @class
 * @augments RequestMessage
 */
function StatementRequest () {

  /**
   * @name StatementRequest#statementRange
   * @type StatementRange
   * @access private
   */
  this.statementRange = null;
}

inherit(StatementRequest, "extends", RequestMessage);


Aggregate.add("STMTRQ", StatementRequest);


/**
 * The statement range.
 *
 * @return {StatementRange} The statement range.
 */
StatementRequest.prototype.getStatementRange = function() {
  return this.statementRange;
};
ChildAggregate.add(StatementRequest, {name: "INCTRAN", required: false, order: 10, attributeType: StatementRange, readMethod: "getStatementRange", writeMethod: "setStatementRange"});


/**
 * The statement range.
 *
 * @param {StatementRange} statementRange The statement range.
 */
StatementRequest.prototype.setStatementRange = function(statementRange) {
  this.statementRange = statementRange;
};




module.exports = StatementRequest;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../RequestMessage":"/Users/aolson/Developer/ofx4js/src/domain/data/RequestMessage.js","./StatementRange":"/Users/aolson/Developer/ofx4js/src/domain/data/common/StatementRange.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/common/StatementResponse.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var ResponseMessage = require("../ResponseMessage");
var ChildAggregate = require("../../../meta/ChildAggregate");
var Element = require("../../../meta/Element");
var AccountStatement = require("../../../client/AccountStatement");
var TransactionList = require("./TransactionList");
var BalanceInfo = require("./BalanceInfo");

/**
 * @class
 * @augments ResponseMessage
 * @augments AccountStatement
 */
function StatementResponse () {

  /**
   * @name StatementResponse#currencyCode
   * @type String
   * @access private
   */
  this.currencyCode = "USD";

  /**
   * @name StatementResponse#transactionList
   * @type TransactionList
   * @access private
   */
  this.transactionList = null;

  /**
   * @name StatementResponse#ledgerBalance
   * @type BalanceInfo
   * @access private
   */
  this.ledgerBalance = null;

  /**
   * @name StatementResponse#availableBalance
   * @type BalanceInfo
   * @access private
   */
  this.availableBalance = null;

  /**
   * @name StatementResponse#marketingInfo
   * @type String
   * @access private
   */
  this.marketingInfo = null;
}

inherit(StatementResponse, "extends", ResponseMessage);
inherit(StatementResponse, "implements", AccountStatement);




/**
 * The currency code.
 *
 * @return {String} The currency code.
 * @see java.util.Currency#getCurrencyCode()
 */
StatementResponse.prototype.getCurrencyCode = function() {
  return this.currencyCode;
};
Element.add(StatementResponse, {name: "CURDEF", required: true, order: 0, attributeType: String, readMethod: "getCurrencyCode", writeMethod: "setCurrencyCode"});


/**
 * The currency code.
 *
 * @param {String} currencyCode The currency code.
 */
StatementResponse.prototype.setCurrencyCode = function(currencyCode) {
  this.currencyCode = currencyCode;
};


/**
 * The transaction list.
 *
 * @return {TransactionList} The transaction list.
 */
StatementResponse.prototype.getTransactionList = function() {
  return this.transactionList;
};
ChildAggregate.add(StatementResponse, {order: 20, attributeType: TransactionList, readMethod: "getTransactionList", writeMethod: "setTransactionList"});


/**
 * The transaction list.
 *
 * @param {TransactionList} transactionList The transaction list.
 */
StatementResponse.prototype.setTransactionList = function(transactionList) {
  this.transactionList = transactionList;
};


/**
 * The ledger balance.
 *
 * @return {BalanceInfo} The ledger balance.
 */
StatementResponse.prototype.getLedgerBalance = function() {
  return this.ledgerBalance;
};
ChildAggregate.add(StatementResponse, {name: "LEDGERBAL", order: 30, attributeType: BalanceInfo, readMethod: "getLedgerBalance", writeMethod: "setLedgerBalance"});


/**
 * The ledger balance.
 *
 * @param {BalanceInfo} ledgerBalance The ledger balance.
 */
StatementResponse.prototype.setLedgerBalance = function(ledgerBalance) {
  this.ledgerBalance = ledgerBalance;
};


/**
 * The available balance.
 *
 * @return {BalanceInfo} The available balance.
 */
StatementResponse.prototype.getAvailableBalance = function() {
  return this.availableBalance;
};
ChildAggregate.add(StatementResponse, {name: "AVAILBAL", order: 40, attributeType: BalanceInfo, readMethod: "getAvailableBalance", writeMethod: "setAvailableBalance"});


/**
 * The available balance.
 *
 * @param {BalanceInfo} availableBalance The available balance.
 */
StatementResponse.prototype.setAvailableBalance = function(availableBalance) {
  this.availableBalance = availableBalance;
};


/**
 * Marketing information. (?)
 *
 * @return {String} Marketing information.
 */
StatementResponse.prototype.getMarketingInfo = function() {
  return this.marketingInfo;
};
Element.add(StatementResponse, {name: "MKTGINFO", order: 50, attributeType: String, readMethod: "getMarketingInfo", writeMethod: "setMarketingInfo"});


/**
 * Marketing information. (?)
 *
 * @param {String} marketingInfo Marketing information.
 */
StatementResponse.prototype.setMarketingInfo = function(marketingInfo) {
  this.marketingInfo = marketingInfo;
};




module.exports = StatementResponse;

},{"../../../client/AccountStatement":"/Users/aolson/Developer/ofx4js/src/client/AccountStatement.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../ResponseMessage":"/Users/aolson/Developer/ofx4js/src/domain/data/ResponseMessage.js","./BalanceInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/common/BalanceInfo.js","./TransactionList":"/Users/aolson/Developer/ofx4js/src/domain/data/common/TransactionList.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/common/Status.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var Aggregate = require("../../../meta/Aggregate");
var Element = require("../../../meta/Element");
var StatusCode = require("./StatusCode");

/**
 * Transaction status element.
 *
 * @class
 * @see "Section 3.1.4, OFX Spec"
 */
function Status () {

  /**
   * @name Status#code
   * @type StatusCode
   * @access private
   */
  this.code = Status.KnownCode.SUCCESS;

  /**
   * @name Status#severity
   * @type Severity
   * @access private
   */
  this.severity = null;

  /**
   * @name Status#message
   * @type String
   * @access private
   */
  this.message = null;
}



Aggregate.add("STATUS", Status);


var Severity = Status.Severity = {
  INFO: 0,
  WARN: 1,
  ERROR: 2
};

Status.KnownCode = function(/*int*/ code, /*String*/ message, /*Severity*/ defaultSeverity) {

  /**
   * @name Status.KnownCode#code
   * @type int
   * @access private
   */
  this.code = code;

  /**
   * @name Status.KnownCode#message
   * @type String
   * @access private
   */
  this.message = message;

  /**
   * @name Status.KnownCode#defaultSeverity
   * @type Severity
   * @access private
   */
  this.defaultSeverity = defaultSeverity;
};

inherit(Status.KnownCode, "implements", StatusCode);


Status.KnownCode.SUCCESS = new Status.KnownCode(0, "Success", Severity.INFO);
Status.KnownCode.CLIENT_UP_TO_DATE = new Status.KnownCode(1, "Client is up-to-date", Severity.INFO);
Status.KnownCode.GENERAL_ERROR = new Status.KnownCode(2000, "General error.", Severity.ERROR);
Status.KnownCode.GENERAL_ACCOUNT_ERROR = new Status.KnownCode(2002, "General account error.", Severity.ERROR);
Status.KnownCode.ACCOUNT_NOT_FOUND = new Status.KnownCode(2003, "Account not found.", Severity.ERROR);
Status.KnownCode.ACCOUNT_CLOSED = new Status.KnownCode(2004, "Account closed.", Severity.ERROR);
Status.KnownCode.ACCOUNT_NOT_AUTHORIZED = new Status.KnownCode(2005, "Account not authorized.", Severity.ERROR);
Status.KnownCode.DATE_TOO_SOON = new Status.KnownCode(2014, "Date too soon", Severity.ERROR);
Status.KnownCode.DUPLICATE_REQUEST = new Status.KnownCode(2019, "Duplicate request.", Severity.ERROR);
Status.KnownCode.UNSUPPORTED_VERSION = new Status.KnownCode(2021, "Unsupported version", Severity.ERROR);
Status.KnownCode.INVALID_TAN = new Status.KnownCode(2022, "Invalid transaction authorization number.", Severity.ERROR);
Status.KnownCode.MFA_CHALLENGE_REQUIRED = new Status.KnownCode(3000, "Further authentication required.", Severity.ERROR);
Status.KnownCode.MFA_CHALLENGE_FAILED = new Status.KnownCode(3001, "MFA failed.", Severity.ERROR);
Status.KnownCode.PASSWORD_CHANGE_REQUIRED = new Status.KnownCode(15000, "Password change required.", Severity.INFO);
Status.KnownCode.SIGNON_INVALID = new Status.KnownCode(15500, "Invalid signon", Severity.ERROR);
Status.KnownCode.CUSTOMER_ACCOUNT_IN_USE = new Status.KnownCode(15501, "Customer account in use.", Severity.ERROR);
Status.KnownCode.PASSWORD_LOCKED = new Status.KnownCode(15502, "Password locked.", Severity.ERROR);
Status.KnownCode.INVALID_CLIENT_UID = new Status.KnownCode(15510, "Invalid client UID.", Severity.ERROR);
Status.KnownCode.CONTACT_FI = new Status.KnownCode(15511, "User must contact FI.", Severity.ERROR);
Status.KnownCode.AUTHTOKEN_REQUIRED = new Status.KnownCode(15512, "Auth token required.", Severity.ERROR);
Status.KnownCode.INVALID_AUTHTOKEN = new Status.KnownCode(15513, "Invalid auth token.", Severity.ERROR);
Status.KnownCode.NO_DATA = new Status.KnownCode(14701, "No Tax Data for Account.", Severity.ERROR);
Status.KnownCode.DB_EXCEPTION = new Status.KnownCode(14702,"Database error has occured.",Severity.ERROR);
Status.KnownCode.NO_TAXSUPPORT = new Status.KnownCode(14703,"This Tax Year is not supported.",Severity.ERROR);

/**
 * @returns int
 */
Status.KnownCode.prototype.getCode = function() {
  return this.code;
};

/**
 * @returns String
 */
Status.KnownCode.prototype.getMessage = function() {
  return this.message;
};

/**
 * @returns Severity
 */
Status.KnownCode.prototype.getDefaultSeverity = function() {
  return this.defaultSeverity;
};

/**
 * @param {int} code
 * @returns KnownCode
 */
Status.KnownCode.fromCode = function(code) {
  for (var value in Status.KnownCode) {
    if (value instanceof Status.KnownCode && value.getCode() == code) {
      return value;
    }
  }
  return null;
};

/**
 * @returns String
 */
Status.KnownCode.prototype.toString = function() {
  return this.code.toString();
};

/**
 * Status code.
 *
 * @return {StatusCode} The status code.
 */
Status.prototype.getCode = function() {
  return this.code;
};
Element.add(Status, {name: "CODE", required: true, order: 0, attributeType: StatusCode, readMethod: "getCode", writeMethod: "setCode"});


/**
 * Status code.
 *
 * @param {StatusCode} code Status code.
 */
Status.prototype.setCode = function(code) {
  this.code = code;
  if (this.severity === null) {
    this.severity = code.getDefaultSeverity();
  }
};


/**
 * The severity.
 *
 * @return {Severity} The severity.
 */
Status.prototype.getSeverity = function() {
  return this.severity;
};
Element.add(Status, {name: "SEVERITY", required: true, order: 10, attributeType: Severity, readMethod: "getSeverity", writeMethod: "setSeverity"});


/**
 * The severity.
 *
 * @param {Severity} severity The severity.
 */
Status.prototype.setSeverity = function(severity) {
  this.severity = severity;
};


/**
 * Server-supplied message.
 *
 * @return {String} Server-supplied message.
 */
Status.prototype.getMessage = function() {
  return this.message;
};
Element.add(Status, {name: "MESSAGE", order: 20, attributeType: String, readMethod: "getMessage", writeMethod: "setMessage"});


/**
 * Server-supplied message.
 *
 * @param {String} message Server-supplied message.
 */
Status.prototype.setMessage = function(message) {
  this.message = message;
};




module.exports = Status;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","./StatusCode":"/Users/aolson/Developer/ofx4js/src/domain/data/common/StatusCode.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/common/StatusCode.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * @class
 */
function StatusCode() {
}

StatusCode.prototype.getCode = function() { throw new Error("not implemented"); };

StatusCode.prototype.getMessage = function() { throw new Error("not implemented"); };

StatusCode.prototype.getDefaultSeverity = function() { throw new Error("not implemented"); };


module.exports = StatusCode;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/common/StatusHolder.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * A status holder (usually applied to a response).
 *
 * @class
 */
function StatusHolder() {
}

/**
 * The name of this status holder (for error reporting).
 *
 * @return {String} The name of this status holder (for error reporting).
 */
StatusHolder.prototype.getStatusHolderName = function() { throw new Error("not implemented"); };

/**
 * Get the status.
 *
 * @return {Status} The status.
 */
StatusHolder.prototype.getStatus = function() { throw new Error("not implemented"); };


module.exports = StatusHolder;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/common/T1099Request.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var RequestMessage = require("../RequestMessage");
var Aggregate = require("../../../meta/Aggregate");

/**
 * @class
 * @augments ResponseMessage
 */
function T1099Request () {
}

inherit(T1099Request, "extends", RequestMessage);


Aggregate.add("STMTRQ", T1099Request);




module.exports = T1099Request;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../RequestMessage":"/Users/aolson/Developer/ofx4js/src/domain/data/RequestMessage.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/common/T1099Response.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var ResponseMessage = require("../ResponseMessage");

/**
 * @class
 * @augments ResponseMessage
 */
function T1099Response () {
}

inherit(T1099Response, "extends", ResponseMessage);






module.exports = T1099Response;

},{"../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../ResponseMessage":"/Users/aolson/Developer/ofx4js/src/domain/data/ResponseMessage.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/common/Transaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var Aggregate = require("../../../meta/Aggregate");
var Element = require("../../../meta/Element");
var ChildAggregate = require("../../../meta/ChildAggregate");
var TransactionType = require("./TransactionType");
var CorrectionAction = require("./CorrectionAction");
var Payee = require("./Payee");
var BankAccountDetails = require("../banking/BankAccountDetails");
var CreditCardAccountDetails = require("../creditcard/CreditCardAccountDetails");
var Currency = require("./Currency");

/**
 * @class
 */
function Transaction () {

  /**
   * @name Transaction#transactionType
   * @type TransactionType
   * @access private
   */
  this.transactionType = null;

  /**
   * @name Transaction#datePosted
   * @type Date
   * @access private
   */
  this.datePosted = null;

  /**
   * @name Transaction#dateInitiated
   * @type Date
   * @access private
   */
  this.dateInitiated = null;

  /**
   * @name Transaction#dateAvailable
   * @type Date
   * @access private
   */
  this.dateAvailable = null;

  /**
   * @name Transaction#amount
   * @type BigDecimal
   * @access private
   */
  this.amount = null;

  /**
   * @name Transaction#id
   * @type String
   * @access private
   */
  this.id = null;

  /**
   * @name Transaction#correctionId
   * @type String
   * @access private
   */
  this.correctionId = null;

  /**
   * @name Transaction#correctionAction
   * @type CorrectionAction
   * @access private
   */
  this.correctionAction = null;

  /**
   * @name Transaction#tempId
   * @type String
   * @access private
   */
  this.tempId = null;

  /**
   * @name Transaction#checkNumber
   * @type String
   * @access private
   */
  this.checkNumber = null;

  /**
   * @name Transaction#referenceNumber
   * @type String
   * @access private
   */
  this.referenceNumber = null;

  /**
   * @name Transaction#standardIndustrialCode
   * @type String
   * @access private
   */
  this.standardIndustrialCode = null;

  /**
   * @name Transaction#payeeId
   * @type String
   * @access private
   */
  this.payeeId = null;

  /**
   * @name Transaction#name
   * @type String
   * @access private
   */
  this.name = null;

  /**
   * @name Transaction#payee
   * @type Payee
   * @access private
   */
  this.payee = null;

  /**
   * @name Transaction#bankAccountTo
   * @type BankAccountDetails
   * @access private
   */
  this.bankAccountTo = null;

  /**
   * @name Transaction#creditCardAccountTo
   * @type CreditCardAccountDetails
   * @access private
   */
  this.creditCardAccountTo = null;

  /**
   * @name Transaction#memo
   * @type String
   * @access private
   */
  this.memo = null;

  /**
   * @name Transaction#currency
   * @type Currency
   * @access private
   */
  this.currency = null;

  /**
   * @name Transaction#originalCurrency
   * @type Currency
   * @access private
   */
  this.originalCurrency = null;
}



Aggregate.add("STMTTRN", Transaction);


/**
 * The transaction type.
 *
 * @return {TransactionType} The transaction type.
 */
Transaction.prototype.getTransactionType = function() {
  return this.transactionType;
};
Element.add(Transaction, {name: "TRNTYPE", required: true, order: 0, attributeType: TransactionType, readMethod: "getTransactionType", writeMethod: "setTransactionType"});


/**
 * The transaction type.
 *
 * @param {TransactionType} transactionType The transaction type.
 */
Transaction.prototype.setTransactionType = function(transactionType) {
  this.transactionType = transactionType;
};


/**
 * The date the transaction was posted.
 *
 * @return {Date} The date the transaction was posted.
 */
Transaction.prototype.getDatePosted = function() {
  return this.datePosted;
};
Element.add(Transaction, {name: "DTPOSTED", required: true, order: 10, attributeType: Date, readMethod: "getDatePosted", writeMethod: "setDatePosted"});


/**
 * The date the transaction was posted.
 *
 * @param {Date} datePosted The date the transaction was posted.
 */
Transaction.prototype.setDatePosted = function(datePosted) {
  this.datePosted = datePosted;
};


/**
 * The date the transaction was initiated.
 *
 * @return {Date} The date the transaction was initiated.
 */
Transaction.prototype.getDateInitiated = function() {
  return this.dateInitiated;
};
Element.add(Transaction, {name: "DTUSER", order: 20, attributeType: Date, readMethod: "getDateInitiated", writeMethod: "setDateInitiated"});


/**
 * The date the transaction was initiated.
 *
 * @param {Date} dateInitiated The date the transaction was initiated.
 */
Transaction.prototype.setDateInitiated = function(dateInitiated) {
  this.dateInitiated = dateInitiated;
};


/**
 * The date the funds are available.
 *
 * @return {Date} The date the funds are available.
 */
Transaction.prototype.getDateAvailable = function() {
  return this.dateAvailable;
};
Element.add(Transaction, {name: "DTAVAIL", order: 30, attributeType: Date, readMethod: "getDateAvailable", writeMethod: "setDateAvailable"});


/**
 * The date the funds are available.
 *
 * @param {Date} dateAvailable The date the funds are available.
 */
Transaction.prototype.setDateAvailable = function(dateAvailable) {
  this.dateAvailable = dateAvailable;
};


/**
 * The transaction amount.
 *
 * @return {Double} The transaction amount.
 */
Transaction.prototype.getAmount = function() {
  return this.amount;
};


/**
 * The transaction amount.
 *
 * @param {Double} amount The transaction amount.
 */
Transaction.prototype.setAmount = function(amount) {
  this.amount = amount;
};


/**
 * The transaction amount.
 *
 * @return {BigDecimal} The transaction amount.
 */
Transaction.prototype.getBigDecimalAmount = function() {
  return this.amount;
};
Element.add(Transaction, {name: "TRNAMT", required: true, order: 40, attributeType: Number, readMethod: "getBigDecimalAmount", writeMethod: "setBigDecimalAmount"});


/**
 * The transaction amount.
 *
 * @param {BigDecimal} amount The transaction amount.
 */
Transaction.prototype.setBigDecimalAmount = function(amount) {
  this.amount = amount;
};


/**
 * The transaction id (server-assigned).
 *
 * @return {String} The transaction id (server-assigned).
 */
Transaction.prototype.getId = function() {
  return this.id;
};
Element.add(Transaction, {name: "FITID", required: true, order: 50, attributeType: String, readMethod: "getId", writeMethod: "setId"});


/**
 * The transaction id (server-assigned).
 *
 * @param {String} id The transaction id (server-assigned).
 */
Transaction.prototype.setId = function(id) {
  this.id = id;
};


/**
 * The id of the transaction that this is correcting.
 *
 * @return {String} The id of the transaction that this is correcting.
 */
Transaction.prototype.getCorrectionId = function() {
  return this.correctionId;
};
Element.add(Transaction, {name: "CORRECTFITID", order: 60, attributeType: String, readMethod: "getCorrectionId", writeMethod: "setCorrectionId"});


/**
 * The id of the transaction that this is correcting.
 *
 * @param {String} correctionId The id of the transaction that this is correcting.
 */
Transaction.prototype.setCorrectionId = function(correctionId) {
  this.correctionId = correctionId;
};


/**
 * The action to take on the {@link #getCorrectionId() corrected transaction}.
 *
 * @return {CorrectionAction} The action to take on the {@link #getCorrectionId() corrected transaction}.
 */
Transaction.prototype.getCorrectionAction = function() {
  return this.correctionAction;
};
Element.add(Transaction, {name: "CORRECTACTION", order: 70, attributeType: CorrectionAction, readMethod: "getCorrectionAction", writeMethod: "setCorrectionAction"});


/**
 * The action to take on the {@link #getCorrectionId() corrected transaction}.
 *
 * @param {CorrectionAction} correctionAction The action to take on the {@link #getCorrectionId() corrected transaction}.
 */
Transaction.prototype.setCorrectionAction = function(correctionAction) {
  this.correctionAction = correctionAction;
};


/**
 * The server-assigned temporary id for client-initiated transactions.
 *
 * @return {String} The server-assigned temporary id for client-initiated transactions.
 */
Transaction.prototype.getTempId = function() {
  return this.tempId;
};
Element.add(Transaction, {name: "SRVRTID", order: 80, attributeType: String, readMethod: "getTempId", writeMethod: "setTempId"});


/**
 * The server-assigned temporary id for client-initiated transactions.
 *
 * @param {String} tempId The server-assigned temporary id for client-initiated transactions.
 */
Transaction.prototype.setTempId = function(tempId) {
  this.tempId = tempId;
};


/**
 * The check number.
 *
 * @return {String} The check number.
 */
Transaction.prototype.getCheckNumber = function() {
  return this.checkNumber;
};
Element.add(Transaction, {name: "CHECKNUM", order: 90, attributeType: String, readMethod: "getCheckNumber", writeMethod: "setCheckNumber"});


/**
 * The check number.
 *
 * @param {String} checkNumber The check number.
 */
Transaction.prototype.setCheckNumber = function(checkNumber) {
  this.checkNumber = checkNumber;
};


/**
 * The reference number.
 *
 * @return {String} The reference number.
 */
Transaction.prototype.getReferenceNumber = function() {
  return this.referenceNumber;
};
Element.add(Transaction, {name: "REFNUM", order: 100, attributeType: String, readMethod: "getReferenceNumber", writeMethod: "setReferenceNumber"});


/**
 * The reference number.
 *
 * @param {String} referenceNumber The reference number.
 */
Transaction.prototype.setReferenceNumber = function(referenceNumber) {
  this.referenceNumber = referenceNumber;
};


/**
 * The standard industrial code.
 *
 * @return {String} The standard industrial code.
 */
Transaction.prototype.getStandardIndustrialCode = function() {
  return this.standardIndustrialCode;
};
Element.add(Transaction, {name: "SIC", order: 110, attributeType: String, readMethod: "getStandardIndustrialCode", writeMethod: "setStandardIndustrialCode"});


/**
 * The standard industrial code.
 *
 * @param {String} standardIndustrialCode The standard industrial code.
 */
Transaction.prototype.setStandardIndustrialCode = function(standardIndustrialCode) {
  this.standardIndustrialCode = standardIndustrialCode;
};


/**
 * The payee id.
 *
 * @return {String} The payee id.
 */
Transaction.prototype.getPayeeId = function() {
  return this.payeeId;
};
Element.add(Transaction, {name: "PAYEEID", order: 120, attributeType: String, readMethod: "getPayeeId", writeMethod: "setPayeeId"});


/**
 * The payee id.
 *
 * @param {String} payeeId The payee id.
 */
Transaction.prototype.setPayeeId = function(payeeId) {
  this.payeeId = payeeId;
};


/**
 * The name (description) or the transaction.
 *
 * @return {String} The name (description) or the transaction.
 */
Transaction.prototype.getName = function() {
  return this.name;
};
Element.add(Transaction, {name: "NAME", order: 130, attributeType: String, readMethod: "getName", writeMethod: "setName"});


/**
 * The name (description) or the transaction.
 *
 * @param {String} name The name (description) or the transaction.
 */
Transaction.prototype.setName = function(name) {
  this.name = name;
};


/**
 * The payee.
 *
 * @return {Payee} The payee.
 */
Transaction.prototype.getPayee = function() {
  return this.payee;
};
ChildAggregate.add(Transaction, {order: 140, attributeType: Payee, readMethod: "getPayee", writeMethod: "setPayee"});


/**
 * The payee.
 *
 * @param {Payee} payee The payee.
 */
Transaction.prototype.setPayee = function(payee) {
  this.payee = payee;
};


/**
 * The bank account the transfer was to.
 *
 * @return {BankAccountDetails} The bank account the transfer was to.
 */
Transaction.prototype.getBankAccountTo = function() {
  return this.bankAccountTo;
};
ChildAggregate.add(Transaction, {name: "BANKACCTTO", order: 150, attributeType: BankAccountDetails, readMethod: "getBankAccountTo", writeMethod: "setBankAccountTo"});


/**
 * The bank account the transfer was to.
 *
 * @param {BankAccountDetails} bankAccountTo The bank account the transfer was to.
 */
Transaction.prototype.setBankAccountTo = function(bankAccountTo) {
  this.bankAccountTo = bankAccountTo;
};


/**
 * The credit-card account the transfer was to.
 *
 * @return {CreditCardAccountDetails} The credit-card account the transfer was to.
 */
Transaction.prototype.getCreditCardAccountTo = function() {
  return this.creditCardAccountTo;
};
ChildAggregate.add(Transaction, {name: "CCACCTTO", order: 160, attributeType: CreditCardAccountDetails, readMethod: "getCreditCardAccountTo", writeMethod: "setCreditCardAccountTo"});


/**
 * The credit-card account the transfer was to.
 *
 * @param {CreditCardAccountDetails} creditCardAccountTo The credit-card account the transfer was to.
 */
Transaction.prototype.setCreditCardAccountTo = function(creditCardAccountTo) {
  this.creditCardAccountTo = creditCardAccountTo;
};


/**
 * Notes.
 *
 * @return {String} Notes.
 */
Transaction.prototype.getMemo = function() {
  return this.memo;
};
Element.add(Transaction, {name: "MEMO", order: 170, attributeType: String, readMethod: "getMemo", writeMethod: "setMemo"});


/**
 * Notes.
 *
 * @param {String} memo Notes.
 */
Transaction.prototype.setMemo = function(memo) {
  this.memo = memo;
};


/**
 * The currency.
 *
 * @return {Currency} The currency.
 */
Transaction.prototype.getCurrency = function() {
  return this.currency;
};
ChildAggregate.add(Transaction, {order: 180, attributeType: Currency, readMethod: "getCurrency", writeMethod: "setCurrency"});


/**
 * The currency.
 *
 * @param {Currency} currency The currency.
 */
Transaction.prototype.setCurrency = function(currency) {
  this.currency = currency;
};


/**
 * The original currency.
 *
 * @return {Currency} The original currency.
 */
Transaction.prototype.getOriginalCurrency = function() {
  return this.originalCurrency;
};
ChildAggregate.add(Transaction, {name: "ORIGCURRENCY", order: 190, attributeType: Currency, readMethod: "getOriginalCurrency", writeMethod: "setOriginalCurrency"});


/**
 * The original currency.
 *
 * @param {Currency} originalCurrency The original currency.
 */
Transaction.prototype.setOriginalCurrency = function(originalCurrency) {
  this.originalCurrency = originalCurrency;
};




module.exports = Transaction;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../banking/BankAccountDetails":"/Users/aolson/Developer/ofx4js/src/domain/data/banking/BankAccountDetails.js","../creditcard/CreditCardAccountDetails":"/Users/aolson/Developer/ofx4js/src/domain/data/creditcard/CreditCardAccountDetails.js","./CorrectionAction":"/Users/aolson/Developer/ofx4js/src/domain/data/common/CorrectionAction.js","./Currency":"/Users/aolson/Developer/ofx4js/src/domain/data/common/Currency.js","./Payee":"/Users/aolson/Developer/ofx4js/src/domain/data/common/Payee.js","./TransactionType":"/Users/aolson/Developer/ofx4js/src/domain/data/common/TransactionType.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/common/TransactionList.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var Aggregate = require("../../../meta/Aggregate");
var Element = require("../../../meta/Element");
var ChildAggregate = require("../../../meta/ChildAggregate");
var Transaction = require("./Transaction");

/**
 * @class
 */
function TransactionList () {

  /**
   * @name TransactionList#start
   * @type Date
   * @access private
   */
  this.start = null;

  /**
   * @name TransactionList#end
   * @type Date
   * @access private
   */
  this.end = null;

  /**
   * @name TransactionList#transactions
   * @type List<Transaction>
   * @access private
   */
  this.transactions = null;
}



Aggregate.add("BANKTRANLIST", TransactionList);


/**
 * The start date.
 *
 * @return {Date} The start date.
 */
TransactionList.prototype.getStart = function() {
  return this.start;
};
Element.add(TransactionList, {name: "DTSTART", required: true, order: 0, attributeType: Date, readMethod: "getStart", writeMethod: "setStart"});


/**
 * The start date.
 *
 * @param {Date} start The start date.
 */
TransactionList.prototype.setStart = function(start) {
  this.start = start;
};


/**
 * The end date.
 *
 * @return {Date} The end date.
 */
TransactionList.prototype.getEnd = function() {
  return this.end;
};
Element.add(TransactionList, {name: "DTEND", required: true, order: 10, attributeType: Date, readMethod: "getEnd", writeMethod: "setEnd"});


/**
 * The end date.
 *
 * @param {Date} end The end date.
 */
TransactionList.prototype.setEnd = function(end) {
  this.end = end;
};


/**
 * The transaction list.
 *
 * @return {Transaction[]} The transaction list.
 */
TransactionList.prototype.getTransactions = function() {
  return this.transactions;
};
ChildAggregate.add(TransactionList, {order: 20, attributeType: Array, collectionEntryType: Transaction, readMethod: "getTransactions", writeMethod: "setTransactions"});


/**
 * The transaction list.
 *
 * @param {Transaction[]} transactions The transaction list.
 */
TransactionList.prototype.setTransactions = function(transactions) {
  this.transactions = transactions;
};




module.exports = TransactionList;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","./Transaction":"/Users/aolson/Developer/ofx4js/src/domain/data/common/Transaction.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/common/TransactionType.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * @enum
 */
var TransactionType = {

  /**
   * generic: 0 credit.
   */
  CREDIT: 1,

  /**
   * genertic: 2 debit.
   */
  DEBIT: 3,

  /**
   * interest: 4 earned.
   */
  INT: 5,

  /**
   * dividend: 6.
   */
  DIV: 7,

  /**
   * bank: 8 fee.
   */
  FEE: 9,

  /**
   * service: 10 charge.
   */
  SRVCHG: 11,

  /**
   * deposit: 12.
   */
  DEP: 13,

  /**
   * ATM: 14 transaction.
   */
  ATM: 15,

  /**
   * point: 16 of sale
   */
  POS: 17,

  /**
   * transfer: 18
   */
  XFER: 19,

  /**
   * check: 20
   */
  CHECK: 21,

  /**
   * electronic: 22 payment
   */
  PAYMENT: 23,

  /**
   * cash: 24.
   */
  CASH: 25,

  /**
   * direct: 26 deposit.
   */
  DIRECTDEP: 27,

  /**
   * merchant: 28-initiated debit
   */
  DIRECTDEBIT: 29,

  /**
   * repeating: 30 payment.
   */
  REPEATPMT: 31,

  /**
   * other: 32
   */
  OTHER: 33
};


module.exports = TransactionType;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/common/TransferInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");
var Element = require("../../../meta/Element");
var BankAccountDetails = require("../banking/BankAccountDetails");
var CreditCardAccountDetails = require("../creditcard/CreditCardAccountDetails");

/**
 * @class
 */
function TransferInfo () {

  /**
   * @name TransferInfo#bankAccountFrom
   * @type BankAccountDetails
   * @access private
   */
  this.bankAccountFrom = null;

  /**
   * @name TransferInfo#creditCardAccountFrom
   * @type CreditCardAccountDetails
   * @access private
   */
  this.creditCardAccountFrom = null;

  /**
   * @name TransferInfo#bankAccountTo
   * @type BankAccountDetails
   * @access private
   */
  this.bankAccountTo = null;

  /**
   * @name TransferInfo#creditCardAccountTo
   * @type CreditCardAccountDetails
   * @access private
   */
  this.creditCardAccountTo = null;

  /**
   * @name TransferInfo#amount
   * @type Double
   * @access private
   */
  this.amount = null;

  /**
   * @name TransferInfo#due
   * @type Date
   * @access private
   */
  this.due = null;
}



Aggregate.add("XFERINFO", TransferInfo);


/**
 * The bank account to transfer from.
 *
 * @return {BankAccountDetails} The bank account to transfer from.
 */
TransferInfo.prototype.getBankAccountFrom = function() {
  return this.bankAccountFrom;
};
ChildAggregate.add(TransferInfo, {name: "BANKACCTFROM", order: 0, attributeType: BankAccountDetails, readMethod: "getBankAccountFrom", writeMethod: "setBankAccountFrom"});


/**
 * The bank account to transfer from.
 *
 * @param {BankAccountDetails} bankAccountFrom The bank account to transfer from.
 */
TransferInfo.prototype.setBankAccountFrom = function(bankAccountFrom) {
  this.creditCardAccountFrom = null;
  this.bankAccountFrom = bankAccountFrom;
};


/**
 * The account to transfer from.
 *
 * @param {BankAccountDetails} bankAccountFrom The account to transfer from.
 */
TransferInfo.prototype.setAccountFrom = function(bankAccountFrom) {
  this.setBankAccountFrom(bankAccountFrom);
};


/**
 * The credit card to transfer from.
 *
 * @return {CreditCardAccountDetails} The credit card to transfer from.
 */
TransferInfo.prototype.getCreditCardAccountFrom = function() {
  return this.creditCardAccountFrom;
};
ChildAggregate.add(TransferInfo, {name: "CCACCTFROM", order: 10, attributeType: CreditCardAccountDetails, readMethod: "getCreditCardAccountFrom", writeMethod: "setCreditCardAccountFrom"});


/**
 * The credit card to transfer from.
 *
 * @param {CreditCardAccountDetails} creditCardAccountFrom The credit card to transfer from.
 */
TransferInfo.prototype.setCreditCardAccountFrom = function(creditCardAccountFrom) {
  this.bankAccountFrom = null;
  this.creditCardAccountFrom = creditCardAccountFrom;
};


/**
 * The credit card to transfer from.
 *
 * @param {CreditCardAccountDetails} creditCardAccountFrom The credit card to transfer from.
 */
TransferInfo.prototype.setAccountFrom = function(creditCardAccountFrom) {
  this.setCreditCardAccountFrom(creditCardAccountFrom);
};


/**
 * The bank account to transfer to.
 *
 * @return {BankAccountDetails} The bank account to transfer to.
 */
TransferInfo.prototype.getBankAccountTo = function() {
  return this.bankAccountTo;
};
ChildAggregate.add(TransferInfo, {name: "BANKACCTTO", order: 20, attributeType: BankAccountDetails, readMethod: "getBankAccountTo", writeMethod: "setBankAccountTo"});


/**
 * The bank account to transfer to.
 *
 * @param {BankAccountDetails} bankAccountTo The bank account to transfer to.
 */
TransferInfo.prototype.setBankAccountTo = function(bankAccountTo) {
  this.creditCardAccountTo = null;
  this.bankAccountTo = bankAccountTo;
};


/**
 * The bank account to transfer to.
 *
 * @param {BankAccountDetails} bankAccountTo The bank account to transfer to.
 */
TransferInfo.prototype.setAccountTo = function(bankAccountTo) {
  this.setBankAccountTo(bankAccountTo);
};


/**
 * The credit card account to transfer to.
 *
 * @return {CreditCardAccountDetails} The credit card account to transfer to.
 */
TransferInfo.prototype.getCreditCardAccountTo = function() {
  return this.creditCardAccountTo;
};
ChildAggregate.add(TransferInfo, {name: "CCACCTTO", order: 30, attributeType: CreditCardAccountDetails, readMethod: "getCreditCardAccountTo", writeMethod: "setCreditCardAccountTo"});


/**
 * The credit card account to transfer to.
 *
 * @param {CreditCardAccountDetails} creditCardAccountTo The credit card account to transfer to.
 */
TransferInfo.prototype.setCreditCardAccountTo = function(creditCardAccountTo) {
  this.bankAccountTo = null;
  this.creditCardAccountTo = creditCardAccountTo;
};


/**
 * The credit card account to transfer to.
 *
 * @param {CreditCardAccountDetails} creditCardAccountTo The credit card account to transfer to.
 */
TransferInfo.prototype.setAccountTo = function(creditCardAccountTo) {
  this.setCreditCardAccountTo(creditCardAccountTo);
};


/**
 * The amount.
 *
 * @return {Double} The amount.
 */
TransferInfo.prototype.getAmount = function() {
  return this.amount;
};
Element.add(TransferInfo, {name: "TRNAMT", required: true, order: 40, attributeType: Number, readMethod: "getAmount", writeMethod: "setAmount"});


/**
 * The amount.
 *
 * @param {Double} amount The amount.
 */
TransferInfo.prototype.setAmount = function(amount) {
  this.amount = amount;
};


/**
 * The due date.
 *
 * @return {Date} The due date.
 */
TransferInfo.prototype.getDue = function() {
  return this.due;
};
Element.add(TransferInfo, {name: "DTDUE", order: 50, attributeType: Date, readMethod: "getDue", writeMethod: "setDue"});


/**
 * The due date.
 *
 * @param {Date} due The due date.
 */
TransferInfo.prototype.setDue = function(due) {
  this.due = due;
};




module.exports = TransferInfo;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../banking/BankAccountDetails":"/Users/aolson/Developer/ofx4js/src/domain/data/banking/BankAccountDetails.js","../creditcard/CreditCardAccountDetails":"/Users/aolson/Developer/ofx4js/src/domain/data/creditcard/CreditCardAccountDetails.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/common/TransferStatus.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var Aggregate = require("../../../meta/Aggregate");
var Element = require("../../../meta/Element");
var TransferStatusEvent = require("./TransferStatusEvent");

/**
 * @class
 */
function TransferStatus () {

  /**
   * @name TransferStatus#event
   * @type TransferStatusEvent
   * @access private
   */
  this.event = null;

  /**
   * @name TransferStatus#date
   * @type Date
   * @access private
   */
  this.date = null;
}



Aggregate.add("XFERPRCSTS", TransferStatus);


/**
 * The event.
 *
 * @return {TransferStatusEvent} The event.
 */
TransferStatus.prototype.getEvent = function() {
  return this.event;
};
Element.add(TransferStatus, {name: "XFERPRCCODE", required: true, order: 0, attributeType: TransferStatusEvent, readMethod: "getEvent", writeMethod: "setEvent"});


/**
 * The event.
 *
 * @param {TransferStatusEvent} event The event.
 */
TransferStatus.prototype.setEvent = function(event) {
  this.event = event;
};


/**
 * The date of the event.
 *
 * @return {Date} The date of the event.
 */
TransferStatus.prototype.getDate = function() {
  return this.date;
};
Element.add(TransferStatus, {name: "DTXFERPRC", required: true, order: 10, attributeType: Date, readMethod: "getDate", writeMethod: "setDate"});


/**
 * The date of the event.
 *
 * @param {Date} date The date of the event.
 */
TransferStatus.prototype.setDate = function(date) {
  this.date = date;
};




module.exports = TransferStatus;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","./TransferStatusEvent":"/Users/aolson/Developer/ofx4js/src/domain/data/common/TransferStatusEvent.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/common/TransferStatusEvent.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * @enum
 */
var TransferStatusEvent = {

  WILLPROCESSON: 0,

  POSTEDON: 1,

  NOFUNDSON: 2,

  CANCELEDON: 3,

  FAILEDON: 4
};


module.exports = TransferStatusEvent;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/common/UnknownStatusCode.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");
var StatusCode = require("./StatusCode");

/**
 * Holder for an unknown status code.
 *
 * @class
 * @augments StatusCode
 */
function UnknownStatusCode () {

  /**
   * @name UnknownStatusCode#code
   * @type int
   * @access private
   */
  this.code = null;

  /**
   * @name UnknownStatusCode#message
   * @type String
   * @access private
   */
  this.message = null;

  /**
   * @name UnknownStatusCode#defaultSeverity
   * @type Status.Severity
   * @access private
   */
  this.defaultSeverity = null;
}

inherit(UnknownStatusCode, "implements", StatusCode);




UnknownStatusCode.prototype.UnknownStatusCode = function(/*int*/ code, /*String*/ message, /*Severity*/ defaultSeverity) {
  this.code = code;
  this.message = message;
  this.defaultSeverity = defaultSeverity;
};


UnknownStatusCode.prototype.getCode = function() {
  return this.code;
};


UnknownStatusCode.prototype.getMessage = function() {
  return this.message;
};


UnknownStatusCode.prototype.getDefaultSeverity = function() {
  return this.defaultSeverity;
};


// @Override
UnknownStatusCode.prototype.toString = function() {
  return String.valueOf(this.code);
};




module.exports = UnknownStatusCode;

},{"../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","./StatusCode":"/Users/aolson/Developer/ofx4js/src/domain/data/common/StatusCode.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/common/index.js":[function(require,module,exports){
"use strict";

module.exports = {
  AccountDetails: require("./AccountDetails"),
  AccountInfo: require("./AccountInfo"),
  AccountStatus: require("./AccountStatus"),
  BalanceInfo: require("./BalanceInfo"),
  BalanceRecord: require("./BalanceRecord"),
  CorrectionAction: require("./CorrectionAction"),
  Currency: require("./Currency"),
  Payee: require("./Payee"),
  ProcessorDayOff: require("./ProcessorDayOff"),
  StatementRange: require("./StatementRange"),
  StatementRequest: require("./StatementRequest"),
  StatementResponse: require("./StatementResponse"),
  Status: require("./Status"),
  StatusCode: require("./StatusCode"),
  StatusHolder: require("./StatusHolder"),
  T1099Request: require("./T1099Request"),
  T1099Response: require("./T1099Response"),
  Transaction: require("./Transaction"),
  TransactionList: require("./TransactionList"),
  TransactionType: require("./TransactionType"),
  TransferInfo: require("./TransferInfo"),
  TransferStatus: require("./TransferStatus"),
  TransferStatusEvent: require("./TransferStatusEvent"),
  UnknownStatusCode: require("./UnknownStatusCode"),
};

},{"./AccountDetails":"/Users/aolson/Developer/ofx4js/src/domain/data/common/AccountDetails.js","./AccountInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/common/AccountInfo.js","./AccountStatus":"/Users/aolson/Developer/ofx4js/src/domain/data/common/AccountStatus.js","./BalanceInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/common/BalanceInfo.js","./BalanceRecord":"/Users/aolson/Developer/ofx4js/src/domain/data/common/BalanceRecord.js","./CorrectionAction":"/Users/aolson/Developer/ofx4js/src/domain/data/common/CorrectionAction.js","./Currency":"/Users/aolson/Developer/ofx4js/src/domain/data/common/Currency.js","./Payee":"/Users/aolson/Developer/ofx4js/src/domain/data/common/Payee.js","./ProcessorDayOff":"/Users/aolson/Developer/ofx4js/src/domain/data/common/ProcessorDayOff.js","./StatementRange":"/Users/aolson/Developer/ofx4js/src/domain/data/common/StatementRange.js","./StatementRequest":"/Users/aolson/Developer/ofx4js/src/domain/data/common/StatementRequest.js","./StatementResponse":"/Users/aolson/Developer/ofx4js/src/domain/data/common/StatementResponse.js","./Status":"/Users/aolson/Developer/ofx4js/src/domain/data/common/Status.js","./StatusCode":"/Users/aolson/Developer/ofx4js/src/domain/data/common/StatusCode.js","./StatusHolder":"/Users/aolson/Developer/ofx4js/src/domain/data/common/StatusHolder.js","./T1099Request":"/Users/aolson/Developer/ofx4js/src/domain/data/common/T1099Request.js","./T1099Response":"/Users/aolson/Developer/ofx4js/src/domain/data/common/T1099Response.js","./Transaction":"/Users/aolson/Developer/ofx4js/src/domain/data/common/Transaction.js","./TransactionList":"/Users/aolson/Developer/ofx4js/src/domain/data/common/TransactionList.js","./TransactionType":"/Users/aolson/Developer/ofx4js/src/domain/data/common/TransactionType.js","./TransferInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/common/TransferInfo.js","./TransferStatus":"/Users/aolson/Developer/ofx4js/src/domain/data/common/TransferStatus.js","./TransferStatusEvent":"/Users/aolson/Developer/ofx4js/src/domain/data/common/TransferStatusEvent.js","./UnknownStatusCode":"/Users/aolson/Developer/ofx4js/src/domain/data/common/UnknownStatusCode.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/creditcard/CreditCardAccountDetails.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var Element = require("../../../meta/Element");
var Aggregate = require("../../../meta/Aggregate");
var AccountDetails = require("../common/AccountDetails");

/**
 * @class
 * 
 * @see "OFX Spec, Section 11.3.2"
 * @augments AccountDetails
 */
function CreditCardAccountDetails () {

  /**
   * @name CreditCardAccountDetails#accountNumber
   * @type String
   * @access private
   */
  this.accountNumber = null;

  /**
   * @name CreditCardAccountDetails#accountKey
   * @type String
   * @access private
   */
  this.accountKey = null;
}

inherit(CreditCardAccountDetails, "implements", AccountDetails);


Aggregate.add("CreditCardAccountDetails", CreditCardAccountDetails);


/**
 * The account number.
 *
 * @return {String} The account number.
 */
CreditCardAccountDetails.prototype.getAccountNumber = function() {
  return this.accountNumber;
};
Element.add(CreditCardAccountDetails, {name: "ACCTID", required: true, order: 0, attributeType: String, readMethod: "getAccountNumber", writeMethod: "setAccountNumber"});


/**
 * The account number.
 *
 * @param {String} accountNumber The account number.
 */
CreditCardAccountDetails.prototype.setAccountNumber = function(accountNumber) {
  this.accountNumber = accountNumber;
};


/**
 * The account key.
 *
 * @return {String} The account key.
 */
CreditCardAccountDetails.prototype.getAccountKey = function() {
  return this.accountKey;
};
Element.add(CreditCardAccountDetails, {name: "ACCKEY", order: 10, attributeType: String, readMethod: "getAccountKey", writeMethod: "setAccountKey"});


/**
 * The account key.
 *
 * @param {String} accountKey The account key.
 */
CreditCardAccountDetails.prototype.setAccountKey = function(accountKey) {
  this.accountKey = accountKey;
};




module.exports = CreditCardAccountDetails;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../common/AccountDetails":"/Users/aolson/Developer/ofx4js/src/domain/data/common/AccountDetails.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/creditcard/CreditCardAccountInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");
var Element = require("../../../meta/Element");
var AccountInfo = require("../common/AccountInfo");
var AccountStatus = require("../common/AccountStatus");
var CreditCardAccountDetails = require("./CreditCardAccountDetails");

/**
 * @class
 * @augments AccountInfo
 */
function CreditCardAccountInfo () {

  /**
   * @name CreditCardAccountInfo#creditCardAccount
   * @type CreditCardAccountDetails
   * @access private
   */
  this.creditCardAccount = null;

  /**
   * @name CreditCardAccountInfo#supportsTransactionDetailOperations
   * @type Boolean
   * @access private
   */
  this.supportsTransactionDetailOperations = null;

  /**
   * @name CreditCardAccountInfo#supportsTransferToOtherAccountOperations
   * @type Boolean
   * @access private
   */
  this.supportsTransferToOtherAccountOperations = null;

  /**
   * @name CreditCardAccountInfo#supportsTransferFromOtherAccountOperations
   * @type Boolean
   * @access private
   */
  this.supportsTransferFromOtherAccountOperations = null;

  /**
   * @name CreditCardAccountInfo#status
   * @type AccountStatus
   * @access private
   */
  this.status = null;
}

inherit(CreditCardAccountInfo, "implements", AccountInfo);


Aggregate.add("CCACCTINFO", CreditCardAccountInfo);


/**
 * The credit card account this information is referencing.
 *
 * @return {CreditCardAccountDetails} The credit card account this information is referencing.
 */
CreditCardAccountInfo.prototype.getCreditCardAccount = function() {
  return this.creditCardAccount;
};
ChildAggregate.add(CreditCardAccountInfo, {name: "CCACCTFROM", required: true, order: 0, attributeType: CreditCardAccountDetails, readMethod: "getCreditCardAccount", writeMethod: "setCreditCardAccount"});


/**
 * The credit card account this information is referencing.
 *
 * @param {CreditCardAccountDetails} creditCardAccount The credit card account this information is referencing.
 */
CreditCardAccountInfo.prototype.setCreditCardAccount = function(creditCardAccount) {
  this.creditCardAccount = creditCardAccount;
};


// Inherited.
CreditCardAccountInfo.prototype.getAccountDetails = function() {
  return this.getCreditCardAccount();
};


/**
 * Whether this account supports download of transaction details.
 *
 * @return {Boolean} Whether this account supports download of transaction details.
 */
CreditCardAccountInfo.prototype.getSupportsTransactionDetailOperations = function() {
  return this.supportsTransactionDetailOperations;
};
Element.add(CreditCardAccountInfo, {name: "SUPTXDL", required: true, order: 10, attributeType: Boolean, readMethod: "getSupportsTransactionDetailOperations", writeMethod: "setSupportsTransactionDetailOperations"});


/**
 * Whether this account supports download of transaction details.
 *
 * @param {Boolean} supportsTransactionDetailOperations Whether this account supports download of transaction details.
 */
CreditCardAccountInfo.prototype.setSupportsTransactionDetailOperations = function(supportsTransactionDetailOperations) {
  this.supportsTransactionDetailOperations = supportsTransactionDetailOperations;
};


/**
 * Whether this account supports transfer operations to other accounts.
 *
 * @return {Boolean} Whether this account supports transfer operations to other accounts.
 */
CreditCardAccountInfo.prototype.getSupportsTransferToOtherAccountOperations = function() {
  return this.supportsTransferToOtherAccountOperations;
};
Element.add(CreditCardAccountInfo, {name: "XFERSRC", required: true, order: 20, attributeType: Boolean, readMethod: "getSupportsTransferToOtherAccountOperations", writeMethod: "setSupportsTransferToOtherAccountOperations"});


/**
 * Whether this account supports transfer operations to other accounts.
 *
 * @param {Boolean} supportsTransferToOtherAccountOperations Whether this account supports transfer operations to other accounts.
 */
CreditCardAccountInfo.prototype.setSupportsTransferToOtherAccountOperations = function(supportsTransferToOtherAccountOperations) {
  this.supportsTransferToOtherAccountOperations = supportsTransferToOtherAccountOperations;
};


/**
 * Whether this account supports transfer operations from other accounts.
 *
 * @return {Boolean} Whether this account supports transfer operations from other accounts.
 */
CreditCardAccountInfo.prototype.getSupportsTransferFromOtherAccountOperations = function() {
  return this.supportsTransferFromOtherAccountOperations;
};
Element.add(CreditCardAccountInfo, {name: "XFERDEST", required: true, order: 30, attributeType: Boolean, readMethod: "getSupportsTransferFromOtherAccountOperations", writeMethod: "setSupportsTransferFromOtherAccountOperations"});


/**
 * Whether this account supports transfer operations from other accounts.
 *
 * @param {Boolean} supportsTransferFromOtherAccountOperations Whether this account supports transfer operations from other accounts.
 */
CreditCardAccountInfo.prototype.setSupportsTransferFromOtherAccountOperations = function(supportsTransferFromOtherAccountOperations) {
  this.supportsTransferFromOtherAccountOperations = supportsTransferFromOtherAccountOperations;
};


/**
 * The account status.
 *
 * @return {AccountStatus} The account status.
 */
CreditCardAccountInfo.prototype.getStatus = function() {
  return this.status;
};
Element.add(CreditCardAccountInfo, {name: "SVCSTATUS", required: true, order: 40, attributeType: AccountStatus, readMethod: "getStatus", writeMethod: "setStatus"});


/**
 * The account status.
 *
 * @param {AccountStatus} status The account status.
 */
CreditCardAccountInfo.prototype.setStatus = function(status) {
  this.status = status;
};




module.exports = CreditCardAccountInfo;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../common/AccountInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/common/AccountInfo.js","../common/AccountStatus":"/Users/aolson/Developer/ofx4js/src/domain/data/common/AccountStatus.js","./CreditCardAccountDetails":"/Users/aolson/Developer/ofx4js/src/domain/data/creditcard/CreditCardAccountDetails.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/creditcard/CreditCardRequestMessageSet.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var MessageSetType = require("../MessageSetType");
var RequestMessageSet = require("../RequestMessageSet");
var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");
var CreditCardStatementRequestTransaction = require("./CreditCardStatementRequestTransaction");

/**
 * @class
 * @augments CreditCardRequestMessageSet
 */
function CreditCardRequestMessageSet () {

  /**
   * @name CreditCardRequestMessageSet#statementRequest
   * @type CreditCardStatementRequestTransaction
   * @access private
   */
  this.statementRequest = null;
}

inherit(CreditCardRequestMessageSet, "extends", RequestMessageSet);


Aggregate.add("CREDITCARDMSGSRQV1", CreditCardRequestMessageSet);


CreditCardRequestMessageSet.prototype.getType = function() {
  return MessageSetType.creditcard;
};


/**
 * The request.
 *
 * @return {CreditCardStatementRequestTransaction} The request.
 */
CreditCardRequestMessageSet.prototype.getStatementRequest = function() {
  return this.statementRequest;
};
ChildAggregate.add(CreditCardRequestMessageSet, {order: 0, attributeType: CreditCardStatementRequestTransaction, readMethod: "getStatementRequest", writeMethod: "setStatementRequest"});


/**
 * The request.
 *
 * @param {CreditCardStatementRequestTransaction} statementRequest The request.
 */
CreditCardRequestMessageSet.prototype.setStatementRequest = function(statementRequest) {
  this.statementRequest = statementRequest;
};


// Inherited.
CreditCardRequestMessageSet.prototype.getRequestMessages = function() {
  var requestMessages = [];
  if (this.getStatementRequest() !== null) {
    requestMessages.push(this.getStatementRequest());
  }
  return requestMessages;
};




module.exports = CreditCardRequestMessageSet;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../MessageSetType":"/Users/aolson/Developer/ofx4js/src/domain/data/MessageSetType.js","../RequestMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/RequestMessageSet.js","./CreditCardStatementRequestTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/creditcard/CreditCardStatementRequestTransaction.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/creditcard/CreditCardResponseMessageSet.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var MessageSetType = require("../MessageSetType");
var ResponseMessageSet = require("../ResponseMessageSet");
var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");
var CreditCardStatementResponseTransaction = require("./CreditCardStatementResponseTransaction");

/**
 * @class
 * @augments ResponseMessageSet
 */
function CreditCardResponseMessageSet () {

  /**
   * @name CreditCardResponseMessageSet#statementResponses
   * @type List<CreditCardStatementResponseTransaction>
   * @access private
   */
  this.statementResponses = null;
}

inherit(CreditCardResponseMessageSet, "extends", ResponseMessageSet);


Aggregate.add("CREDITCARDMSGSRSV1", CreditCardResponseMessageSet);


CreditCardResponseMessageSet.prototype.getType = function() {
  return MessageSetType.creditcard;
};


/**
 * The statement response list.
 *
 * Most OFX files have a single statement response, except MT2OFX
 * which outputs OFX with multiple statement responses
 * in a single banking response message set.
 *
 * @return {CreditCardStatementResponseTransaction[]} The statement response list.
 */
CreditCardResponseMessageSet.prototype.getStatementResponses = function() {
  return this.statementResponses;
};
ChildAggregate.add(CreditCardResponseMessageSet, {order: 0, attributeType: Array, collectionEntryType: CreditCardStatementResponseTransaction, readMethod: "getStatementResponses", writeMethod: "setStatementResponses"});


/**
 * The statement reponse list.
 *
 * @param {CreditCardStatementResponseTransaction[]} statementResponses The statement response list.
 */
CreditCardResponseMessageSet.prototype.setStatementResponses = function(statementResponses) {
  this.statementResponses = statementResponses;
};


/**
 * The first statement response.
 *
 * @return {CreditCardStatementResponseTransaction} the first bank statement response.
 * @deprecated Use getStatementResponses() because sometimes there are multiple responses
 */
CreditCardResponseMessageSet.prototype.getStatementResponse = function() {
  return this.statementResponses === null || this.statementResponses.length === 0 ? null : this.statementResponses[0];
};


/**
 * The statement response.
 *
 * @param {CreditCardStatementResponseTransaction} statementResponse The statement response.
 */
CreditCardResponseMessageSet.prototype.setStatementResponse = function(statementResponse) {
  this.statementResponses = [statementResponse];
};


// Inherited.
CreditCardResponseMessageSet.prototype.getResponseMessages = function() {
  return this.statementResponses;
};




module.exports = CreditCardResponseMessageSet;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../MessageSetType":"/Users/aolson/Developer/ofx4js/src/domain/data/MessageSetType.js","../ResponseMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/ResponseMessageSet.js","./CreditCardStatementResponseTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/creditcard/CreditCardStatementResponseTransaction.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/creditcard/CreditCardStatementRequest.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var StatementRequest = require("../common/StatementRequest");
var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");
var CreditCardAccountDetails = require("./CreditCardAccountDetails");

/**
 * @class
 * @augments StatementRequest
 */
function CreditCardStatementRequest () {

  /**
   * @name CreditCardStatementRequest#account
   * @type CreditCardAccountDetails
   * @access private
   */
  this.account = null;
}

inherit(CreditCardStatementRequest, "extends", StatementRequest);


Aggregate.add("CCSTMTRQ", CreditCardStatementRequest);


/**
 * The account details.
 *
 * @return {CreditCardAccountDetails} The account details.
 */
CreditCardStatementRequest.prototype.getAccount = function() {
  return this.account;
};
ChildAggregate.add(CreditCardStatementRequest, {name: "CCACCTFROM", required: true, order: 0, attributeType: CreditCardAccountDetails, readMethod: "getAccount", writeMethod: "setAccount"});


/**
 * The account details.
 *
 * @param {CreditCardAccountDetails} account The account details.
 */
CreditCardStatementRequest.prototype.setAccount = function(account) {
  this.account = account;
};




module.exports = CreditCardStatementRequest;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../common/StatementRequest":"/Users/aolson/Developer/ofx4js/src/domain/data/common/StatementRequest.js","./CreditCardAccountDetails":"/Users/aolson/Developer/ofx4js/src/domain/data/creditcard/CreditCardAccountDetails.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/creditcard/CreditCardStatementRequestTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var CreditCardStatementRequest = require("./CreditCardStatementRequest");
var TransactionWrappedRequestMessage = require("../TransactionWrappedRequestMessage");
var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");

/**
 * @class
 * @augments TransactionWrappedRequestMessage
 */
function CreditCardStatementRequestTransaction () {

  /**
   * @name CreditCardStatementRequestTransaction#message
   * @type CreditCardStatementRequest
   * @access private
   */
  this.message = null;
}

inherit(CreditCardStatementRequestTransaction, "extends", new TransactionWrappedRequestMessage(CreditCardStatementRequest));


Aggregate.add("CCSTMTTRNRQ", CreditCardStatementRequestTransaction);


/**
 * The message.
 *
 * @return {CreditCardStatementRequest} The message.
 */
CreditCardStatementRequestTransaction.prototype.getMessage = function() {
  return this.message;
};
ChildAggregate.add(CreditCardStatementRequestTransaction, {required: true, order: 30, attributeType: CreditCardStatementRequest, readMethod: "getMessage", writeMethod: "setMessage"});


/**
 * The message.
 *
 * @param {CreditCardStatementRequest} message The message.
 *
 */
CreditCardStatementRequestTransaction.prototype.setMessage = function(message) {
  this.message = message;
};


// Inherited.
CreditCardStatementRequestTransaction.prototype.setWrappedMessage = function(/*CreditCardStatementRequest*/ message) {
  this.setMessage(message);
};




module.exports = CreditCardStatementRequestTransaction;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../TransactionWrappedRequestMessage":"/Users/aolson/Developer/ofx4js/src/domain/data/TransactionWrappedRequestMessage.js","./CreditCardStatementRequest":"/Users/aolson/Developer/ofx4js/src/domain/data/creditcard/CreditCardStatementRequest.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/creditcard/CreditCardStatementResponse.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var StatementResponse = require("../common/StatementResponse");
var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");
var CreditCardAccountDetails = require("./CreditCardAccountDetails");

/**
 * @class
 * @augments StatementResponse
 */
function CreditCardStatementResponse () {

  /**
   * @name CreditCardStatementResponse#account
   * @type CreditCardAccountDetails
   * @access private
   */
  this.account = null;
}

inherit(CreditCardStatementResponse, "extends", StatementResponse);


Aggregate.add("CCSTMTRS", CreditCardStatementResponse);


CreditCardStatementResponse.prototype.getResponseMessageName = function() {
  return "credit card statement";
};


/**
 * The account for the statement.
 *
 * @return {CreditCardAccountDetails} The account for the statement.
 */
CreditCardStatementResponse.prototype.getAccount = function() {
  return this.account;
};
ChildAggregate.add(CreditCardStatementResponse, {name:"CCACCTFROM", order: 10, attributeType: CreditCardAccountDetails, readMethod: "getAccount", writeMethod: "setAccount"});


/**
 * The account for the statement.
 *
 * @param {CreditCardAccountDetails} account The account for the statement.
 */
CreditCardStatementResponse.prototype.setAccount = function(account) {
  this.account = account;
};




module.exports = CreditCardStatementResponse;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../common/StatementResponse":"/Users/aolson/Developer/ofx4js/src/domain/data/common/StatementResponse.js","./CreditCardAccountDetails":"/Users/aolson/Developer/ofx4js/src/domain/data/creditcard/CreditCardAccountDetails.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/creditcard/CreditCardStatementResponseTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var CreditCardStatementResponse = require("./CreditCardStatementResponse");
var TransactionWrappedResponseMessage = require("../TransactionWrappedResponseMessage");
var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");

/**
 * @class
 * @augments TransactionWrappedResponseMessage
 */
function CreditCardStatementResponseTransaction () {

  /**
   * @name CreditCardStatementResponseTransaction#message
   * @type CreditCardStatementResponse
   * @access private
   */
  this.message = null;
}

inherit(CreditCardStatementResponseTransaction, "extends", new TransactionWrappedResponseMessage(CreditCardStatementResponse));


Aggregate.add("CCSTMTTRNRS", CreditCardStatementResponseTransaction);


/**
 * The message.
 *
 * @return {CreditCardStatementResponse} The message.
 */
CreditCardStatementResponseTransaction.prototype.getMessage = function() {
  return this.message;
};
ChildAggregate.add(CreditCardStatementResponseTransaction, {required: true, order: 30, attributeType: CreditCardStatementResponse, readMethod: "getMessage", writeMethod: "setMessage"});


/**
 * The message.
 *
 * @param {CreditCardStatementResponse} message The message.
 */
CreditCardStatementResponseTransaction.prototype.setMessage = function(message) {
  this.message = message;
};


// Inherited.
CreditCardStatementResponseTransaction.prototype.getWrappedMessage = function() {
  return this.getMessage();
};




module.exports = CreditCardStatementResponseTransaction;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../TransactionWrappedResponseMessage":"/Users/aolson/Developer/ofx4js/src/domain/data/TransactionWrappedResponseMessage.js","./CreditCardStatementResponse":"/Users/aolson/Developer/ofx4js/src/domain/data/creditcard/CreditCardStatementResponse.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/creditcard/index.js":[function(require,module,exports){
"use strict";

module.exports = {
  CreditCardAccountDetails: require("./CreditCardAccountDetails"),
  CreditCardAccountInfo: require("./CreditCardAccountInfo"),
  CreditCardRequestMessageSet: require("./CreditCardRequestMessageSet"),
  CreditCardResponseMessageSet: require("./CreditCardResponseMessageSet"),
  CreditCardStatementRequest: require("./CreditCardStatementRequest"),
  CreditCardStatementRequestTransaction: require("./CreditCardStatementRequestTransaction"),
  CreditCardStatementResponse: require("./CreditCardStatementResponse"),
  CreditCardStatementResponseTransaction: require("./CreditCardStatementResponseTransaction"),
};

},{"./CreditCardAccountDetails":"/Users/aolson/Developer/ofx4js/src/domain/data/creditcard/CreditCardAccountDetails.js","./CreditCardAccountInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/creditcard/CreditCardAccountInfo.js","./CreditCardRequestMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/creditcard/CreditCardRequestMessageSet.js","./CreditCardResponseMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/creditcard/CreditCardResponseMessageSet.js","./CreditCardStatementRequest":"/Users/aolson/Developer/ofx4js/src/domain/data/creditcard/CreditCardStatementRequest.js","./CreditCardStatementRequestTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/creditcard/CreditCardStatementRequestTransaction.js","./CreditCardStatementResponse":"/Users/aolson/Developer/ofx4js/src/domain/data/creditcard/CreditCardStatementResponse.js","./CreditCardStatementResponseTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/creditcard/CreditCardStatementResponseTransaction.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/index.js":[function(require,module,exports){
"use strict";

module.exports = {
  banking: require("./banking/index"),
  common: require("./common/index"),
  creditcard: require("./creditcard/index"),
  investment: require("./investment/index"),
  profile: require("./profile/index"),
  seclist: require("./seclist/index"),
  signon: require("./signon/index"),
  signup: require("./signup/index"),
  tax1099: require("./tax1099/index"),

  ApplicationSecurity: require("./ApplicationSecurity"),
  MessageSetProfile: require("./MessageSetProfile"),
  MessageSetType: require("./MessageSetType"),
  RequestEnvelope: require("./RequestEnvelope"),
  RequestMessage: require("./RequestMessage"),
  RequestMessageSet: require("./RequestMessageSet"),
  ResponseEnvelope: require("./ResponseEnvelope"),
  ResponseMessage: require("./ResponseMessage"),
  ResponseMessageSet: require("./ResponseMessageSet"),
  SignonProfile: require("./SignonProfile"),
  TransactionWrappedRequestMessage: require("./TransactionWrappedRequestMessage"),
  TransactionWrappedResponseMessage: require("./TransactionWrappedResponseMessage")
};

},{"./ApplicationSecurity":"/Users/aolson/Developer/ofx4js/src/domain/data/ApplicationSecurity.js","./MessageSetProfile":"/Users/aolson/Developer/ofx4js/src/domain/data/MessageSetProfile.js","./MessageSetType":"/Users/aolson/Developer/ofx4js/src/domain/data/MessageSetType.js","./RequestEnvelope":"/Users/aolson/Developer/ofx4js/src/domain/data/RequestEnvelope.js","./RequestMessage":"/Users/aolson/Developer/ofx4js/src/domain/data/RequestMessage.js","./RequestMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/RequestMessageSet.js","./ResponseEnvelope":"/Users/aolson/Developer/ofx4js/src/domain/data/ResponseEnvelope.js","./ResponseMessage":"/Users/aolson/Developer/ofx4js/src/domain/data/ResponseMessage.js","./ResponseMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/ResponseMessageSet.js","./SignonProfile":"/Users/aolson/Developer/ofx4js/src/domain/data/SignonProfile.js","./TransactionWrappedRequestMessage":"/Users/aolson/Developer/ofx4js/src/domain/data/TransactionWrappedRequestMessage.js","./TransactionWrappedResponseMessage":"/Users/aolson/Developer/ofx4js/src/domain/data/TransactionWrappedResponseMessage.js","./banking/index":"/Users/aolson/Developer/ofx4js/src/domain/data/banking/index.js","./common/index":"/Users/aolson/Developer/ofx4js/src/domain/data/common/index.js","./creditcard/index":"/Users/aolson/Developer/ofx4js/src/domain/data/creditcard/index.js","./investment/index":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/index.js","./profile/index":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/index.js","./seclist/index":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/index.js","./signon/index":"/Users/aolson/Developer/ofx4js/src/domain/data/signon/index.js","./signup/index":"/Users/aolson/Developer/ofx4js/src/domain/data/signup/index.js","./tax1099/index":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/index.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/accounts/AccountType.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * Type of investment account.
 *
 * @enum
 * @see "OFX Spec, Section 13.6.2"
 */
var AccountType = {
  INDIVIDUAL: 0,
  JOINT: 1,
  TRUST: 2,
  CORPORATE: 3,

  fromOfx: function(/*String*/ ofxVal) {
    if ("INDIVIDUAL".equals(ofxVal)) {
      return AccountType.INDIVIDUAL;
    } else if ("JOINT".equals(ofxVal)) {
      return AccountType.JOINT;
    } else if ("CORPORATE".equals(ofxVal)) {
      return AccountType.CORPORATE;
    } else if ("CORPORATE".equals(ofxVal)) {
      return AccountType.CORPORATE;
    } else {
      return null;
    }
  }
};


module.exports = AccountType;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/accounts/ActivationStatus.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * Activation status of an account.
 * @see "Section 13.6.2, OFX Spec"
 *
 * @enum
 */
var ActivationStatus = {
  ACTIVE: 0,
  PENDING: 1,
  AVAILABLE: 2,

  fromOfx: function(/*String*/ ofxVal) {
    if ("ACTIVE".equals(ofxVal)) {
      return ActivationStatus.ACTIVE;
    } else if ("PEND".equals(ofxVal)) {
      return ActivationStatus.PENDING;
    } else if ("AVAIL".equals(ofxVal)) {
      return ActivationStatus.AVAILABLE;
    } else {
      return null;
    }
  }
}
;


module.exports = ActivationStatus;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/accounts/InvestmentAccountDetails.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var AccountDetails = require("../../common/AccountDetails");
var Aggregate = require("../../../../meta/Aggregate");
var Element = require("../../../../meta/Element");

/**
 * Aggregate for the details that identifity a brokerage account.
 *
 * @class
 * @augments AccountDetails
 * @see "OFX Spec, Section 13.6.1"
 */
function InvestmentAccountDetails () {

  /**
   * @name InvestmentAccountDetails#brokerId
   * @type String
   * @access private
   */
  this.brokerId = null;

  /**
   * @name InvestmentAccountDetails#accountNumber
   * @type String
   * @access private
   */
  this.accountNumber = null;

  /**
   * @name InvestmentAccountDetails#accountKey
   * @type String
   * @access private
   */
  this.accountKey = null;
}

inherit(InvestmentAccountDetails, "implements", AccountDetails);


Aggregate.add("InvestmentAccountDetails", InvestmentAccountDetails);


/**
 * Gets the broker id.
 *
 * @return {String} the id of the broker
 */
InvestmentAccountDetails.prototype.getBrokerId = function() {
  return this.brokerId;
};
Element.add(InvestmentAccountDetails, {name: "BROKERID", required: true, order: 0, attributeType: String, readMethod: "getBrokerId", writeMethod: "setBrokerId"});


/**
 * Sets the broker id.
 *
 * @param {String} brokerId the id of the broker
 */
InvestmentAccountDetails.prototype.setBrokerId = function(brokerId) {
  this.brokerId = brokerId;
};


/**
 * Gets the account number.
 *
 * @return {String} the account number
 */
InvestmentAccountDetails.prototype.getAccountNumber = function() {
  return this.accountNumber;
};
Element.add(InvestmentAccountDetails, {name: "ACCTID", required: true, order: 20, attributeType: String, readMethod: "getAccountNumber", writeMethod: "setAccountNumber"});


/**
 * Sets the account number.
 *
 * @param {String} accountNumber the account number
 */
InvestmentAccountDetails.prototype.setAccountNumber = function(accountNumber) {
  this.accountNumber = accountNumber;
};


/**
 * Gets the account key.
 *
 * @return {String} the account key
 */
InvestmentAccountDetails.prototype.getAccountKey = function() {
  return this.accountKey;
};
Element.add(InvestmentAccountDetails, {name: "ACCTKEY", order: 40, attributeType: String, readMethod: "getAccountKey", writeMethod: "setAccountKey"});


/**
 * Sets the account key.
 *
 * @param {String} accountKey the account key
 */
InvestmentAccountDetails.prototype.setAccountKey = function(accountKey) {
  this.accountKey = accountKey;
};




module.exports = InvestmentAccountDetails;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../../common/AccountDetails":"/Users/aolson/Developer/ofx4js/src/domain/data/common/AccountDetails.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/accounts/InvestmentAccountInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var AccountInfo = require("../../common/AccountInfo");
var Aggregate = require("../../../../meta/Aggregate");
var ChildAggregate = require("../../../../meta/ChildAggregate");
var Element = require("../../../../meta/Element");
var UnitedStatesAccountType = require("./UnitedStatesAccountType");
var ActivationStatus = require("./ActivationStatus");
var AccountType = require("./AccountType");
var InvestmentAccountDetails = require("./InvestmentAccountDetails");

/**
 * Aggregate for the info about a brokerage account.
 *
 * @class
 * @augments AccountInfo
 * @see "OFX Spec, Section 13.6.2"
 */
function InvestmentAccountInfo () {

  /**
   * @name InvestmentAccountInfo#investmentAccount
   * @type InvestmentAccountDetails
   * @access private
   */
  this.investmentAccount = null;

  /**
   * @name InvestmentAccountInfo#unitedStatesAccountType
   * @type String
   * @access private
   */
  this.unitedStatesAccountType = null;

  /**
   * @name InvestmentAccountInfo#supportsChecking
   * @type Boolean
   * @access private
   */
  this.supportsChecking = null;

  /**
   * @name InvestmentAccountInfo#activationStatus
   * @type String
   * @access private
   */
  this.activationStatus = null;

  /**
   * @name InvestmentAccountInfo#investmentAccountType
   * @type String
   * @access private
   */
  this.investmentAccountType = null;

  /**
   * @name InvestmentAccountInfo#optionLevel
   * @type String
   * @access private
   */
  this.optionLevel = null;
}

inherit(InvestmentAccountInfo, "implements", AccountInfo);


Aggregate.add("INVACCTINFO", InvestmentAccountInfo);


/**
 * Gets the investment account this information is referencing.
 *
 * @return {InvestmentAccountDetails} the investment account this information is referencing
 */
InvestmentAccountInfo.prototype.getInvestmentAccount = function() {
  return this.investmentAccount;
};
ChildAggregate.add(InvestmentAccountInfo, {name: "INVACCTFROM", required: true, order: 0, attributeType: InvestmentAccountDetails, readMethod: "getInvestmentAccount", writeMethod: "setInvestmentAccount"});


/**
 * Sets the investment account this information is referencing. This is a required field
 * according to the OFX spec.
 *
 * @param {InvestmentAccountDetails} investmentAccount the investment account this information is referencing
 */
InvestmentAccountInfo.prototype.setInvestmentAccount = function(investmentAccount) {
  this.investmentAccount = investmentAccount;
};


// Inherited.
InvestmentAccountInfo.prototype.getAccountDetails = function() {
  return this.getInvestmentAccount();
};


/**
 * Gets the United States account type. This is a required field according to the OFX spec.
 * @see "OFX Spec, Section 13.6.1"
 *
 * @return {String} the United States account type
 */
InvestmentAccountInfo.prototype.getUnitedStatesAccountType = function() {
  return this.unitedStatesAccountType;
};
Element.add(InvestmentAccountInfo, {name: "USPRODUCTTYPE", required: true, order: 10, attributeType: String, readMethod: "getUnitedStatesAccountType", writeMethod: "setUnitedStatesAccountType"});


/**
 * Sets United States account type. This is a required field according to the OFX spec.
 * @see "OFX Spec, Section 13.6.1"
 *
 * @param {String} unitedStatesAccountType the United States account type
 */
InvestmentAccountInfo.prototype.setUnitedStatesAccountType = function(unitedStatesAccountType) {
  this.unitedStatesAccountType = unitedStatesAccountType;
};


/**
 * Gets the United States account type as one of the well-known types.
 *
 * @return {UnitedStatesAccountType} the account type or null if it's not one of the well-known types
 */
InvestmentAccountInfo.prototype.getUnitedStatesAccountTypeEnum = function() {
  return UnitedStatesAccountType.fromOfx(this.unitedStatesAccountType);
};


/**
 * Gets whether the account supports checking. This is a required field according to the OFX spec.
 * @see "OFX Spec, Section 13.6.1"
 *
 * @return {Boolean} whether the account supports checking
 */
InvestmentAccountInfo.prototype.getSupportsChecking = function() {
  return this.supportsChecking;
};
Element.add(InvestmentAccountInfo, {name: "CHECKING", required: true, order: 20, attributeType: Boolean, readMethod: "getSupportsChecking", writeMethod: "setSupportsChecking"});


/**
 * Sets whether the account supports checking. This is a required field according to the OFX spec.
 * @see "OFX Spec, Section 13.6.1"
 *
 * @param {Boolean} supportsChecking whether the account supports checking
 */
InvestmentAccountInfo.prototype.setSupportsChecking = function(supportsChecking) {
  this.supportsChecking = supportsChecking;
};


/**
 * Gets the activation status for investment statement download. This is a required field
 * according to the OFX spec.
 *
 * @return {String} the activation status
 */
InvestmentAccountInfo.prototype.getActivationStatus = function() {
  return this.activationStatus;
};
Element.add(InvestmentAccountInfo, {name: "SVCSTATUS", required: true, order: 30, attributeType: String, readMethod: "getActivationStatus", writeMethod: "setActivationStatus"});


/**
 * Sets the activation status for investment statement download. This is a required field
 * according to the OFX spec.
 *
 * @param {String} activationStatus the activation status
 */
InvestmentAccountInfo.prototype.setActivationStatus = function(activationStatus) {
  this.activationStatus = activationStatus;
};


/**
 * Gets the activation status as one of the well-known types.
 *
 * @return {ActivationStatus} the activation status or null if it wasn't one of the well known types
 */
InvestmentAccountInfo.prototype.getActivationStatusEnum = function() {
  return ActivationStatus.fromOfx(this.getActivationStatus());
};


/**
 * Gets the type of investment account. One of "INDIVIDUAL", "JOINT", "TRUST", or "CORPORATE".
 * This is an optional field according to the OFX spec.
 *
 * @return {String} the type of account
 */
InvestmentAccountInfo.prototype.getInvestmentAccountType = function() {
  return this.investmentAccountType;
};
Element.add(InvestmentAccountInfo, {name: "INVACCTTYPE", order: 40, attributeType: String, readMethod: "getInvestmentAccountType", writeMethod: "setInvestmentAccountType"});


/**
 * Sets the type of investment account. One of "INDIVIDUAL", "JOINT", "TRUST", or "CORPORATE".
 * This is an optional field according to the OFX spec.
 *
 * @param {String} investmentAccountType the type of account
 */
InvestmentAccountInfo.prototype.setInvestmentAccountType = function(investmentAccountType) {
  this.investmentAccountType = investmentAccountType;
};


/**
 * Gets the type of investment account as one of the well-known types.
 *
 * @return {AccountType} the type of investment account or null if it's not one of the well-known types
 */
InvestmentAccountInfo.prototype.getInvestmentAccountTypeEnum = function() {
  return AccountType.fromOfx(this.getInvestmentAccountType());
};


/**
 * Gets the description of option trading privileges. * This is an optional field according to
 * the OFX spec.
 *
 * @return {String} the description of option trading privileges.
 */
InvestmentAccountInfo.prototype.getOptionLevel = function() {
  return this.optionLevel;
};
Element.add(InvestmentAccountInfo, {name: "OPTIONLEVEL", order: 50, attributeType: String, readMethod: "getOptionLevel", writeMethod: "setOptionLevel"});


/**
 * Sets the description of option trading privileges. * This is an optional field according to
 * the OFX spec.
 *
 * @param {String} optionLevel the description of option trading privileges.
 */
InvestmentAccountInfo.prototype.setOptionLevel = function(optionLevel) {
  this.optionLevel = optionLevel;
};




module.exports = InvestmentAccountInfo;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../../common/AccountInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/common/AccountInfo.js","./AccountType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/accounts/AccountType.js","./ActivationStatus":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/accounts/ActivationStatus.js","./InvestmentAccountDetails":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/accounts/InvestmentAccountDetails.js","./UnitedStatesAccountType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/accounts/UnitedStatesAccountType.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/accounts/SubAccountType.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * Types of well-known sub-accounts.
 * @see "Section 13.9.2.4.2, OFX Spec"
 *
 * @enum
 */
var SubAccountType = {
  CASH: 0,
  MARGIN: 1,
  SHORT: 2,
  OTHER: 3,

  fromOfx: function(/*String*/ ofxVal) {
    if ("CASH".equals(ofxVal)) {
      return SubAccountType.CASH;
    } else if ("MARGIN".equals(ofxVal)) {
      return SubAccountType.MARGIN;
    } else if ("SHORT".equals(ofxVal)) {
      return SubAccountType.SHORT;
    } else if ("OTHER".equals(ofxVal)) {
      return SubAccountType.OTHER;
    } else {
      return null;
    }
  }
};


module.exports = SubAccountType;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/accounts/UnitedStatesAccountType.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";


/**
 * @enum
 * @see "OFX Spec, Section 13.6.2.1"
 */
var UnitedStatesAccountType = {

  /** A: 0 401(k) retirement account */
  R401K: 1,

  /** A: 2 403(B) retirement account */
  R403B: 3,

  /** An: 4 IRA retirement account */
  IRA: 5,

  /** Keough: 6 (money purchase/profit sharing) account */
  KEOUGH: 7,

  /** Other: 8 account type */
  OTHER: 9,

  /** Salary: 10 Reduction Employer Pension Plan */
  SARSEP: 11,

  /** Savings: 12 Incentive Match Plan for Employees*/
  SIMPLE: 13,

  /** Regular: 14 investment account */
  NORMAL: 15,

  /** Tax: 16 Deferred Annuity */
  TDA: 17,

  /** Trust: 18 (including UTMA) */
  TRUST: 19,

  /** Custodial: 20 account */
  UGMA: 21,
  
  fromOfx: function(/*String*/ ofxVal) {
    if ("401K".equals(ofxVal)) {
      return UnitedStatesAccountType.R401K;
    } else if ("403B".equals(ofxVal)) {
      return UnitedStatesAccountType.R403B;
    } else if ("IRA".equals(ofxVal)) {
      return UnitedStatesAccountType.IRA;
    } else if ("KEOUGH".equals(ofxVal)) {
      return UnitedStatesAccountType.KEOUGH;
    } else if ("OTHER".equals(ofxVal)) {
      return UnitedStatesAccountType.OTHER;
    } else if ("SARSEP".equals(ofxVal)) {
      return UnitedStatesAccountType.SARSEP;
    } else if ("SIMPLE".equals(ofxVal)) {
      return UnitedStatesAccountType.SIMPLE;
    } else if ("NORMAL".equals(ofxVal)) {
      return UnitedStatesAccountType.NORMAL;
    } else if ("TDA".equals(ofxVal)) {
      return UnitedStatesAccountType.TDA;
    } else if ("TRUST".equals(ofxVal)) {
      return UnitedStatesAccountType.TRUST;
    } else if ("UGMA".equals(ofxVal)) {
      return UnitedStatesAccountType.UGMA;
    } else {
      return null;
    }
  }
};


module.exports = UnitedStatesAccountType;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/accounts/index.js":[function(require,module,exports){
"use strict";

module.exports = {
  AccountType: require("./AccountType"),
  ActivationStatus: require("./ActivationStatus"),
  InvestmentAccountDetails: require("./InvestmentAccountDetails"),
  InvestmentAccountInfo: require("./InvestmentAccountInfo"),
  SubAccountType: require("./SubAccountType"),
  UnitedStatesAccountType: require("./UnitedStatesAccountType"),
};

},{"./AccountType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/accounts/AccountType.js","./ActivationStatus":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/accounts/ActivationStatus.js","./InvestmentAccountDetails":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/accounts/InvestmentAccountDetails.js","./InvestmentAccountInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/accounts/InvestmentAccountInfo.js","./SubAccountType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/accounts/SubAccountType.js","./UnitedStatesAccountType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/accounts/UnitedStatesAccountType.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/index.js":[function(require,module,exports){
"use strict";

module.exports = {
  accounts: require("./accounts/index"),
  positions: require("./positions/index"),
  statements: require("./statements/index"),
  transactions: require("./transactions/index"),
};

},{"./accounts/index":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/accounts/index.js","./positions/index":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/index.js","./statements/index":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/statements/index.js","./transactions/index":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/index.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/BasePosition.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var SubAccountType = require("../accounts/SubAccountType");
var ChildAggregate = require("../../../../meta/ChildAggregate");
var PositionType = require("./PositionType");
var Inv401KSource = require("./Inv401KSource");
var InvestmentPosition = require("./InvestmentPosition");

/**
 * Base class for the various types of positions.
 * <br>
 * This class exposes a read-only view of the flattened aggregates that are
 * common to all positions as a convenience to application
 * developers who may not find the ofx aggregation model intuitive.
 *
 * @class
 */
function BasePosition () {

  /**
   * @name BasePosition#investmentPosition
   * @type InvestmentPosition
   * @access private
   */
  this.investmentPosition = null;
}





/**
 * Gets the investment position child aggregate.
 *
 * @return {InvestmentPosition} the investment position child aggregate
 */
BasePosition.prototype.getInvestmentPosition = function() {
  return this.investmentPosition;
};
ChildAggregate.add(BasePosition, {required: true, order: 10, attributeType: InvestmentPosition, readMethod: "getInvestmentPosition", writeMethod: "setInvestmentPosition"});


/**
 * Sets the investment position child aggregate.
 *
 * @param {InvestmentPosition} investmentPosition the investment position child aggregate
 */
BasePosition.prototype.setInvestmentPosition = function(investmentPosition) {
  this.investmentPosition = investmentPosition;
};


/**
 * Gets the security id for the position. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.6.1, OFX Spec"
 *
 * @return {SecurityId} the security id for the position
 */
BasePosition.prototype.getSecurityId = function() {
  return this.getInvestmentPosition().getSecurityId();
};


/**
 * Gets the sub-account type. One of "CASH", "MARGIN", "SHORT", "OTHER". This is a required field
 * according to the OFX spec.
 * @see "Section 13.9.2.6.1, OFX Spec"
 *
 * @return {String} the sub-account type
 */
BasePosition.prototype.getHeldInAccount = function() {
  return this.getInvestmentPosition().getHeldInAccount();
};


/**
 * Gets the sub-account type as one of the well-known types.
 * @see "Section 13.9.2.6.1, OFX Spec"
 *
 * @return {SubAccountType} the sub-account type or null if it's not one of the well-known types
 */
BasePosition.prototype.getHeldInAccountEnum = function() {
  return SubAccountType.fromOfx(this.getHeldInAccount());
};


/**
 * Gets the position type. One of SHORT or LONG. This is a required field according to the OFX
 * spec.
 * @see "Section 13.9.2.6.1, OFX Spec"
 *
 * @return {String} the position type
 */
BasePosition.prototype.getPositionType = function() {
  return this.getInvestmentPosition().getPositionType();
};


/**
 * Gets the position type as one of the well-known types.
 * @see "Section 13.9.2.6.1, OFX Spec"
 *
 * @return {PositionType} the position type or null if it's not one of the well-known types
 */
BasePosition.prototype.getPositionTypeEnum = function() {
  return PositionType.fromOfx(this.getPositionType());
};


/**
 * Gets the number of units in the position. For stocks, mutual funds, and others, this
 * is the number of shares. For bonds, this is the face value. For options, this is the number of
 * contacts. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.6.1, OFX Spec"
 *
 * @return {Double} the number of units in the position
 */
BasePosition.prototype.getUnits = function() {
  return this.getInvestmentPosition().getUnits();
};


/**
 * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
 * share price. For bonds, this is the percentage of par. For options, this is the per share (not
 * per contact) price. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.6.1, OFX Spec"
 *
 * @return {Double} the per unit price
 */
BasePosition.prototype.getUnitPrice = function() {
  return this.getInvestmentPosition().getUnitPrice();
};


/**
 * Gets the market value of this position. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.6.1, OFX Spec"
 *
 * @return {Double} the market value of the position
 */
BasePosition.prototype.getMarketValue = function() {
  return this.getInvestmentPosition().getMarketValue();
};


/**
 * Gets the date and time of the unit price and market value. This is a required field according
 * to the OFX spec.
 * @see "Section 13.9.2.6.1, OFX Spec"
 *
 * @return {Date} the market value date
 */
BasePosition.prototype.getMarketValueDate = function() {
  return this.getInvestmentPosition().getMarketValueDate();
};


/**
 * Gets the currency code of the position. This is an optional field according to the OFX spec.
 * If not present, it's the default currency of the account.
 * @see "Section 13.9.2.6.1, OFX Spec"
 *
 * @return {String} the currency code of the position or null for the default currency
 */
BasePosition.prototype.getCurrencyCode = function() {
  return this.getInvestmentPosition().getCurrencyCode();
};


/**
 * Gets the memo associated with the position. This is an optional field according to the OFX
 * spec.
 * @see "Section 13.9.2.6.1, OFX Spec"
 *
 * @return {String} the memo
 */
BasePosition.prototype.getMemo = function() {
  return this.getInvestmentPosition().getMemo();
};


/**
 * Gets the 401K source for the sale. Should be one of "PRETAX", "AFTERTAX", "MATCH",
 * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
 * according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {String} the 401k source
 */
BasePosition.prototype.get401kSource = function() {
  return this.getInvestmentPosition().get401kSource();
};


/**
 * Gets the 401k source as one of the well-known types.
 *
 * @return {Inv401KSource} the 401k source or null if it's not one of the well-known types
 */
BasePosition.prototype.get401kSourceEnum = function() {
  return Inv401KSource.fromOfx(this.get401kSource());
};




module.exports = BasePosition;

},{"../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../accounts/SubAccountType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/accounts/SubAccountType.js","./Inv401KSource":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/Inv401KSource.js","./InvestmentPosition":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/InvestmentPosition.js","./PositionType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/PositionType.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/DebtPosition.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var Aggregate = require("../../../../meta/Aggregate");
var BasePosition = require("./BasePosition");

/**
 * Represents a debt position.
 * @see "Section 13.9.2.6.1, OFX Spec"
 *
 * @class
 * @augments BasePosition
 */
function DebtPosition () {
}

inherit(DebtPosition, "extends", BasePosition);


Aggregate.add("POSDEBT", DebtPosition);




module.exports = DebtPosition;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","./BasePosition":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/BasePosition.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/Inv401KSource.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * Types of 401(k) sources.
 * @see "Section 13.9.2.4.2, OFX Spec"
 *
 * @enum
 */
var Inv401KSource = {
  PRETAX: 0,
  AFTER_TAX: 1,
  MATCH: 2,
  PROFIT_SHARING: 3,
  ROLLOVER: 4,
  OTHER_VEST: 5,
  OTHER_NONVEST: 6,
  
  fromOfx: function(/*String*/ ofxVal) {
    if ("PRETAX".equals(ofxVal)) {
      return Inv401KSource.PRETAX;
    } else if ("AFTERTAX".equals(ofxVal)) {
      return Inv401KSource.AFTER_TAX;
    } else if ("MATCH".equals(ofxVal)) {
      return Inv401KSource.MATCH;
    } else if ("PROFITSHARING".equals(ofxVal)) {
      return Inv401KSource.PROFIT_SHARING;
    } else if ("ROLLOVER".equals(ofxVal)) {
      return Inv401KSource.ROLLOVER;
    } else if ("OTHERVEST".equals(ofxVal)) {
      return Inv401KSource.OTHER_VEST;
    } else if ("OTHERNONVEST".equals(ofxVal)) {
      return Inv401KSource.OTHER_NONVEST;
    } else {
      return null;
    }
  }
};


module.exports = Inv401KSource;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/InvestmentPosition.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var SubAccountType = require("../accounts/SubAccountType");
var Aggregate = require("../../../../meta/Aggregate");
var ChildAggregate = require("../../../../meta/ChildAggregate");
var Element = require("../../../../meta/Element");
var SecurityId = require("../../seclist/SecurityId");
var PositionType = require("./PositionType");
var Inv401KSource = require("./Inv401KSource");

/**
 * Class for the investment position aggregate.
 * @see "Section 13.9.2.6.1, OFX Spec"
 *
 * @class
 * @augments BasePosition
 */
function InvestmentPosition () {

  /**
   * @name InvestmentPosition#securityId
   * @type SecurityId
   * @access private
   */
  this.securityId = null;

  /**
   * @name InvestmentPosition#heldInAccount
   * @type String
   * @access private
   */
  this.heldInAccount = null;

  /**
   * @name InvestmentPosition#positionType
   * @type String
   * @access private
   */
  this.positionType = null;

  /**
   * @name InvestmentPosition#units
   * @type Double
   * @access private
   */
  this.units = null;

  /**
   * @name InvestmentPosition#unitPrice
   * @type Double
   * @access private
   */
  this.unitPrice = null;

  /**
   * @name InvestmentPosition#marketValue
   * @type Double
   * @access private
   */
  this.marketValue = null;

  /**
   * @name InvestmentPosition#marketValueDate
   * @type Date
   * @access private
   */
  this.marketValueDate = null;

  /**
   * @name InvestmentPosition#currencyCode
   * @type String
   * @access private
   */
  this.currencyCode = null;

  /**
   * @name InvestmentPosition#memo
   * @type String
   * @access private
   */
  this.memo = null;

  /**
   * @name InvestmentPosition#inv401kSource
   * @type String
   * @access private
   */
  this.inv401kSource = null;
}



Aggregate.add("INVPOS", InvestmentPosition);


/**
 * Gets the security id for the position. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.6.1, OFX Spec"
 *
 * @return {SecurityId} the security id for the position
 */
InvestmentPosition.prototype.getSecurityId = function() {
  return this.securityId;
};
ChildAggregate.add(InvestmentPosition, {required: true, order: 10, attributeType: SecurityId, readMethod: "getSecurityId", writeMethod: "setSecurityId"});


/**
 * Sets the security id for the position. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.6.1, OFX Spec"
 *
 * @param {SecurityId} securityId the security id for the position
 */
InvestmentPosition.prototype.setSecurityId = function(securityId) {
  this.securityId = securityId;
};


/**
 * Gets the sub-account type. One of "CASH", "MARGIN", "SHORT", "OTHER". This is a required field
 * according to the OFX spec.
 * @see "Section 13.9.2.6.1, OFX Spec"
 *
 * @return {String} the sub-account type
 */
InvestmentPosition.prototype.getHeldInAccount = function() {
  return this.heldInAccount;
};
Element.add(InvestmentPosition, {name: "HELDINACCT", required: true, order: 20, attributeType: String, readMethod: "getHeldInAccount", writeMethod: "setHeldInAccount"});


/**
 * Sets the sub-account type. One of "CASH", "MARGIN", "SHORT", "OTHER". This is a required field
 * according to the OFX spec.
 * @see "Section 13.9.2.6.1, OFX Spec"
 *
 * @param {String} heldInAccount the sub-account type
 */
InvestmentPosition.prototype.setHeldInAccount = function(heldInAccount) {
  this.heldInAccount = heldInAccount;
};


/**
 * Gets the sub-account type as one of the well-known types.
 * @see "Section 13.9.2.6.1, OFX Spec"
 *
 * @return {SubAccountType} the sub-account type or null if it's not one of the well-known types
 */
InvestmentPosition.prototype.getHeldInAccountEnum = function() {
  return SubAccountType.fromOfx(this.getHeldInAccount());
};


/**
 * Gets the position type. One of SHORT or LONG. This is a required field according to the OFX
 * spec.
 * @see "Section 13.9.2.6.1, OFX Spec"
 *
 * @return {String} the position type
 */
InvestmentPosition.prototype.getPositionType = function() {
  return this.positionType;
};
Element.add(InvestmentPosition, {name: "POSTYPE", required: true, order: 30, attributeType: String, readMethod: "getPositionType", writeMethod: "setPositionType"});


/**
 * Sets the position type. One of SHORT or LONG. This is a required field according to the OFX
 * spec.
 * @see "Section 13.9.2.6.1, OFX Spec"
 *
 * @param {String} positionType the position type
 */
InvestmentPosition.prototype.setPositionType = function(positionType) {
  this.positionType = positionType;
};


/**
 * Gets the position type as one of the well-known types.
 * @see "Section 13.9.2.6.1, OFX Spec"
 *
 * @return {PositionType} the position type or null if it's not one of the well-known types
 */
InvestmentPosition.prototype.getPositionTypeEnum = function() {
  return PositionType.fromOfx(this.getPositionType());
};


/**
 * Gets the number of units in the position. For stocks, mutual funds, and others, this
 * is the number of shares. For bonds, this is the face value. For options, this is the number of
 * contacts. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.6.1, OFX Spec"
 *
 * @return {Double} the number of units in the position
 */
InvestmentPosition.prototype.getUnits = function() {
  return this.units;
};
Element.add(InvestmentPosition, {name: "UNITS", required: true, order: 40, attributeType: Number, readMethod: "getUnits", writeMethod: "setUnits"});


/**
 * Sets the number of units in the position. For stocks, mutual funds, and others, this
 * is the number of shares. For bonds, this is the face value. For options, this is the number of
 * contacts. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.6.1, OFX Spec"
 *
 * @param {Double} units the number of units in the position
 */
InvestmentPosition.prototype.setUnits = function(units) {
  this.units = units;
};


/**
 * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
 * share price. For bonds, this is the percentage of par. For options, this is the per share (not
 * per contact) price. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.6.1, OFX Spec"
 *
 * @return {Double} the per unit price
 */
InvestmentPosition.prototype.getUnitPrice = function() {
  return this.unitPrice;
};
Element.add(InvestmentPosition, {name: "UNITPRICE", required: true, order: 50, attributeType: Number, readMethod: "getUnitPrice", writeMethod: "setUnitPrice"});


/**
 * Sets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
 * share price. For bonds, this is the percentage of par. For options, this is the per share (not
 * per contact) price. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.6.1, OFX Spec"
 *
 * @param {Double} unitPrice the per unit price
 */
InvestmentPosition.prototype.setUnitPrice = function(unitPrice) {
  this.unitPrice = unitPrice;
};


/**
 * Gets the market value of this position. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.6.1, OFX Spec"
 *
 * @return {Double} the market value of the position
 */
InvestmentPosition.prototype.getMarketValue = function() {
  return this.marketValue;
};
Element.add(InvestmentPosition, {name: "MKTVAL", required: true, order: 60, attributeType: Number, readMethod: "getMarketValue", writeMethod: "setMarketValue"});


/**
 * Sets the market value of this position. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.6.1, OFX Spec"
 *
 * @param {Double} marketValue the market value of the position
 */
InvestmentPosition.prototype.setMarketValue = function(marketValue) {
  this.marketValue = marketValue;
};


/**
 * Gets the date and time of the unit price and market value. This is a required field according
 * to the OFX spec.
 * @see "Section 13.9.2.6.1, OFX Spec"
 *
 * @return {Date} the market value date
 */
InvestmentPosition.prototype.getMarketValueDate = function() {
  return this.marketValueDate;
};
Element.add(InvestmentPosition, {name: "DTPRICEASOF", required: true, order: 70, attributeType: Date, readMethod: "getMarketValueDate", writeMethod: "setMarketValueDate"});


/**
 * Sets the date and time of the unit price and market value. This is a required field according
 * to the OFX spec.
 * @see "Section 13.9.2.6.1, OFX Spec"
 *
 * @param {Date} marketValueDate the market value date
 */
InvestmentPosition.prototype.setMarketValueDate = function(marketValueDate) {
  this.marketValueDate = marketValueDate;
};


/**
 * Gets the currency code of the position. This is an optional field according to the OFX spec.
 * If not present, it's the default currency of the account.
 * @see "Section 13.9.2.6.1, OFX Spec"
 *
 * @return {String} the currency code of the position or null for the default currency
 */
InvestmentPosition.prototype.getCurrencyCode = function() {
  return this.currencyCode;
};
Element.add(InvestmentPosition, {name: "CURRENCY", order: 80, attributeType: String, readMethod: "getCurrencyCode", writeMethod: "setCurrencyCode"});


/**
 * Sets the currency code of the position. This is an optional field according to the OFX spec.
 * If not present, it's the default currency of the account.
 * @see "Section 13.9.2.6.1, OFX Spec"
 *
 * @param {String} currencyCode the currency code of the position or null for the default currency
 */
InvestmentPosition.prototype.setCurrencyCode = function(currencyCode) {
  this.currencyCode = currencyCode;
};


/**
 * Gets the memo associated with the position. This is an optional field according to the OFX
 * spec.
 * @see "Section 13.9.2.6.1, OFX Spec"
 *
 * @return {String} the memo
 */
InvestmentPosition.prototype.getMemo = function() {
  return this.memo;
};
Element.add(InvestmentPosition, {name: "MEMO", order: 90, attributeType: String, readMethod: "getMemo", writeMethod: "setMemo"});


/**
 * Sets the memo associated with the position. This is an optional field according to the OFX
 * spec.
 * @see "Section 13.9.2.6.1, OFX Spec"
 *
 * @param {String} memo the memo
 */
InvestmentPosition.prototype.setMemo = function(memo) {
  this.memo = memo;
};


/**
 * Gets the 401K source for the sale. Should be one of "PRETAX", "AFTERTAX", "MATCH",
 * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
 * according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {String} the 401k source
 */
InvestmentPosition.prototype.get401kSource = function() {
  return this.inv401kSource;
};
Element.add(InvestmentPosition, {name: "INV401KSOURCE", order: 100, attributeType: String, readMethod: "get401kSource", writeMethod: "set401kSource"});


/**
 * Sets the 401K source for the sale. Should be one of "PRETAX", "AFTERTAX", "MATCH",
 * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
 * according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {String} inv401kSource the 401k source
 */
InvestmentPosition.prototype.set401kSource = function(inv401kSource) {
  this.inv401kSource = inv401kSource;
};


/**
 * Gets the 401k source as one of the well-known types.
 *
 * @return {Inv401KSource} the 401k source or null if it's not one of the well-known types
 */
InvestmentPosition.prototype.get401kSourceEnum = function() {
  return Inv401KSource.fromOfx(this.get401kSource());
};




module.exports = InvestmentPosition;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../seclist/SecurityId":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityId.js","../accounts/SubAccountType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/accounts/SubAccountType.js","./Inv401KSource":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/Inv401KSource.js","./PositionType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/PositionType.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/InvestmentPositionList.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var Aggregate = require("../../../../meta/Aggregate");
var ChildAggregate = require("../../../../meta/ChildAggregate");
var BasePosition = require("./BasePosition");

/**
 * Aggregate for a list of invesment positions.
 * @see "Section 13.9.2.2, OFX Spec"
 *
 * @class
 */
function InvestmentPositionList () {

  /**
   * @name InvestmentPositionList#positions
   * @type List<BasePosition>
   * @access private
   */
  this.positions = null;
}



Aggregate.add("INVPOSLIST", InvestmentPositionList);


/**
 * Gets the list of positions
 *
 * @return {BasePosition[]} the list of positions
 */
InvestmentPositionList.prototype.getPositions = function() {
  return this.positions;
};
ChildAggregate.add(InvestmentPositionList, {order: 10, attributeType: Array, collectionEntryType: BasePosition, readMethod: "getPositions", writeMethod: "setPositions"});


/**
 * Sets the list of positions.
 *
 * @param {BasePosition[]} positions the list of positions
 */
InvestmentPositionList.prototype.setPositions = function(positions) {
  this.positions = positions;
};




module.exports = InvestmentPositionList;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","./BasePosition":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/BasePosition.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/MutualFundPosition.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var Aggregate = require("../../../../meta/Aggregate");
var Element = require("../../../../meta/Element");
var BasePosition = require("./BasePosition");

/**
 * Represents a mutual fund position.
 * @see "Section 13.9.2.6.1, OFX Spec"
 *
 * @class
 * @augments BasePosition
 */
function MutualFundPosition () {

  /**
   * @name MutualFundPosition#unitsStreet
   * @type Double
   * @access private
   */
  this.unitsStreet = null;

  /**
   * @name MutualFundPosition#unitsUser
   * @type Double
   * @access private
   */
  this.unitsUser = null;

  /**
   * @name MutualFundPosition#reinvestDividends
   * @type Boolean
   * @access private
   */
  this.reinvestDividends = null;

  /**
   * @name MutualFundPosition#reinvestCapitalGains
   * @type Boolean
   * @access private
   */
  this.reinvestCapitalGains = null;
}

inherit(MutualFundPosition, "extends", BasePosition);


Aggregate.add("POSMF", MutualFundPosition);


/**
 * Gets the number of units in the financial insititution's street name.
 *
 * @return {Double} the number of units in the financial insititution's street name.
 */
MutualFundPosition.prototype.getUnitsStreet = function() {
  return this.unitsStreet;
};
Element.add(MutualFundPosition, {name: "UNITSSTREET", order: 20, attributeType: Number, readMethod: "getUnitsStreet", writeMethod: "setUnitsStreet"});


/**
 * Sets the number of units in the financial insititution's street name.
 *
 * @param {Double} unitsStreet the number of units in the financial insititution's street name.
 */
MutualFundPosition.prototype.setUnitsStreet = function(unitsStreet) {
  this.unitsStreet = unitsStreet;
};


/**
 * Gets the number of units in the user's name.
 *
 * @return {Double} the number of units in the user's name.
 */
MutualFundPosition.prototype.getUnitsUser = function() {
  return this.unitsUser;
};
Element.add(MutualFundPosition, {name: "UNITSUSER", order: 30, attributeType: Number, readMethod: "getUnitsUser", writeMethod: "setUnitsUser"});


/**
 * Sets the number of units in the user's name.
 *
 * @param {Double} unitsUser the number of units in the user's name.
 */
MutualFundPosition.prototype.setUnitsUser = function(unitsUser) {
  this.unitsUser = unitsUser;
};


/**
 * Gets whether dividends are automatically reinvested.
 *
 * @return {Boolean} whether dividends are automatically reinvested
 */
MutualFundPosition.prototype.getReinvestDividends = function() {
  return this.reinvestDividends;
};
Element.add(MutualFundPosition, {name: "REINVDIV", order: 50, attributeType: Boolean, readMethod: "getReinvestDividends", writeMethod: "setReinvestDividends"});


/**
 * Sets whether dividends are automatically reinvested.
 *
 * @param {Boolean} reinvestDividends whether dividends are automatically reinvested
 */
MutualFundPosition.prototype.setReinvestDividends = function(reinvestDividends) {
  this.reinvestDividends = reinvestDividends;
};


/**
 * Gets whether capital gains are automatically reinvested.
 *
 * @return {Boolean} whether capital gains are automatically reinvested
 */
MutualFundPosition.prototype.getReinvestCapitalGains = function() {
  return this.reinvestCapitalGains;
};
Element.add(MutualFundPosition, {name: "REINVCG", order: 60, attributeType: Boolean, readMethod: "getReinvestCapitalGains", writeMethod: "setReinvestCapitalGains"});


/**
 * Sets whether capital gains are automatically reinvested.
 *
 * @param {Boolean} reinvestCapitalGains whether capital gains are automatically reinvested
 */
MutualFundPosition.prototype.setReinvestCapitalGains = function(reinvestCapitalGains) {
  this.reinvestCapitalGains = reinvestCapitalGains;
};




module.exports = MutualFundPosition;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","./BasePosition":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/BasePosition.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/OptionsPosition.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var Aggregate = require("../../../../meta/Aggregate");
var Element = require("../../../../meta/Element");
var BasePosition = require("./BasePosition");
var ShortOptionSecurity = require("./ShortOptionSecurity");

/**
 * Represents an options position.
 * @see "Section 13.9.2.6.1, OFX Spec"
 *
 * @class
 * @augments BasePosition
 */
function OptionsPosition () {

  /**
   * @name OptionsPosition#secured
   * @type String
   * @access private
   */
  this.secured = null;
}

inherit(OptionsPosition, "extends", BasePosition);


Aggregate.add("POSOPT", OptionsPosition);


/**
 * Gets how the options position is secured (for short positions).
 *
 * @return {String} how the options position is secured
 */
OptionsPosition.prototype.getSecured = function() {
  return this.secured;
};
Element.add(OptionsPosition, {name: "SECURED", order: 20, attributeType: String, readMethod: "getSecured", writeMethod: "setSecured"});


/**
 * Sets how the options position is secured (for short positions).
 *
 * @param {String} secured how the options position is secured
 */
OptionsPosition.prototype.setSecured = function(secured) {
  this.secured = secured;
};


/**
 * Gets how the options position is secured as a well-known type.
 *
 * @return {ShortOptionSecurity} how the option position is secured or null if it's not a well-known type
 */
OptionsPosition.prototype.getSecuredEnum = function() {
  return ShortOptionSecurity.fromOfx(this.getSecured());
};




module.exports = OptionsPosition;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","./BasePosition":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/BasePosition.js","./ShortOptionSecurity":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/ShortOptionSecurity.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/OtherPosition.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var Aggregate = require("../../../../meta/Aggregate");
var BasePosition = require("./BasePosition");

/**
 * Represents other types of positions.
 * @see "Section 13.9.2.6.1, OFX Spec"
 *
 * @class
 * @augments BasePosition
 */
function OtherPosition () {
}

inherit(OtherPosition, "extends", BasePosition);


Aggregate.add("POSOTHER", OtherPosition);




module.exports = OtherPosition;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","./BasePosition":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/BasePosition.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/PositionType.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * Type of position.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @enum
 */
var PositionType = {
  LONG: 0,
  SHORT: 1,

  fromOfx: function(/*String*/ ofxVal) {
    if ("LONG".equals(ofxVal)) {
      return PositionType.LONG;
    } else if ("SHORT".equals(ofxVal)) {
      return PositionType.SHORT;
    } else {
      return null;
    }
  }
};


module.exports = PositionType;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/ShortOptionSecurity.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";

/**
 * How a short option is secured.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @enum
 */
var ShortOptionSecurity = {
  NAKED: 0,
  COVERED: 1,

  fromOfx: function(/*String*/ ofxVal) {
    if ("NAKED".equals(ofxVal)) {
      return ShortOptionSecurity.NAKED;
    } else if ("COVERED".equals(ofxVal)) {
      return ShortOptionSecurity.COVERED;
    } else {
      return null;
    }
  }
};


module.exports = ShortOptionSecurity;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/StockPosition.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var BasePosition = require("./BasePosition");
var Aggregate = require("../../../../meta/Aggregate");
var Element = require("../../../../meta/Element");

/**
 * Represents a stock position.
 * @see "Section 13.9.2.6.1, OFX Spec"
 *
 * @class
 * @augments BasePosition
 */
function StockPosition () {

  /**
   * @name StockPosition#unitsStreet
   * @type Double
   * @access private
   */
  this.unitsStreet = null;

  /**
   * @name StockPosition#unitsUser
   * @type Double
   * @access private
   */
  this.unitsUser = null;

  /**
   * @name StockPosition#reinvestDividends
   * @type Boolean
   * @access private
   */
  this.reinvestDividends = null;
}

inherit(StockPosition, "extends", BasePosition);


Aggregate.add("POSSTOCK", StockPosition);


/**
 * Gets the number of units in the financial insititution's street name.
 *
 * @return {Double} the number of units in the financial insititution's street name.
 */
StockPosition.prototype.getUnitsStreet = function() {
  return this.unitsStreet;
};
Element.add(StockPosition, {name: "UNITSSTREET", order: 20, attributeType: Number, readMethod: "getUnitsStreet", writeMethod: "setUnitsStreet"});


/**
 * Sets the number of units in the financial insititution's street name.
 *
 * @param {Double} unitsStreet the number of units in the financial insititution's street name.
 */
StockPosition.prototype.setUnitsStreet = function(unitsStreet) {
  this.unitsStreet = unitsStreet;
};


/**
 * Gets the number of units in the user's name.
 *
 * @return {Double} the number of units in the user's name.
 */
StockPosition.prototype.getUnitsUser = function() {
  return this.unitsUser;
};
Element.add(StockPosition, {name: "UNITSUSER", order: 30, attributeType: Number, readMethod: "getUnitsUser", writeMethod: "setUnitsUser"});


/**
 * Sets the number of units in the user's name.
 *
 * @param {Double} unitsUser the number of units in the user's name.
 */
StockPosition.prototype.setUnitsUser = function(unitsUser) {
  this.unitsUser = unitsUser;
};


/**
 * Gets whether dividends are automatically reinvested.
 *
 * @return {Boolean} whether dividends are automatically reinvested
 */
StockPosition.prototype.getReinvestDividends = function() {
  return this.reinvestDividends;
};
Element.add(StockPosition, {name: "REINVDIV", order: 40, attributeType: Boolean, readMethod: "getReinvestDividends", writeMethod: "setReinvestDividends"});


/**
 * Sets whether dividends are automatically reinvested.
 *
 * @param {Boolean} reinvestDividends whether dividends are automatically reinvested
 */
StockPosition.prototype.setReinvestDividends = function(reinvestDividends) {
  this.reinvestDividends = reinvestDividends;
};




module.exports = StockPosition;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","./BasePosition":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/BasePosition.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/index.js":[function(require,module,exports){
"use strict";

module.exports = {
  BasePosition: require("./BasePosition"),
  DebtPosition: require("./DebtPosition"),
  Inv401KSource: require("./Inv401KSource"),
  InvestmentPosition: require("./InvestmentPosition"),
  InvestmentPositionList: require("./InvestmentPositionList"),
  MutualFundPosition: require("./MutualFundPosition"),
  OptionsPosition: require("./OptionsPosition"),
  OtherPosition: require("./OtherPosition"),
  PositionType: require("./PositionType"),
  ShortOptionSecurity: require("./ShortOptionSecurity"),
  StockPosition: require("./StockPosition")
};

},{"./BasePosition":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/BasePosition.js","./DebtPosition":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/DebtPosition.js","./Inv401KSource":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/Inv401KSource.js","./InvestmentPosition":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/InvestmentPosition.js","./InvestmentPositionList":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/InvestmentPositionList.js","./MutualFundPosition":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/MutualFundPosition.js","./OptionsPosition":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/OptionsPosition.js","./OtherPosition":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/OtherPosition.js","./PositionType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/PositionType.js","./ShortOptionSecurity":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/ShortOptionSecurity.js","./StockPosition":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/StockPosition.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/statements/BalanceList.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";

var Aggregate = require("../../../../meta/Aggregate");
var ChildAggregate = require("../../../../meta/ChildAggregate");
var BalanceRecord = require("../../common/BalanceRecord");

/**
 * Aggregate for the investment balance list.
 * @see "Section 13.9.2.7, OFX Spec"
 *
 * @class
 */
function BalanceList () {

  /**
   * @name BalanceList#balanceRecords
   * @type List<BalanceRecord>
   * @access private
   */
  this.balanceRecords = null;
}



Aggregate.add("BALLIST", BalanceList);


/**
 * Gets the list of balance records.
 *
 * @return {BalanceRecord[]} the list of balance records.
 */
BalanceList.prototype.getBalanceRecords = function() {
  return this.balanceRecords;
};
ChildAggregate.add(BalanceList, {order: 10, attributeType: Array, collectionEntryType: BalanceRecord, readMethod: "getBalanceRecords", writeMethod: "setBalanceRecords"});


/**
 * Sets the list of balance records.
 *
 * @param {BalanceRecord[]} balanceRecords the list of balance records.
 */
BalanceList.prototype.setBalanceRecords = function(balanceRecords) {
  this.balanceRecords = balanceRecords;
};




module.exports = BalanceList;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../common/BalanceRecord":"/Users/aolson/Developer/ofx4js/src/domain/data/common/BalanceRecord.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/statements/IncludePosition.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var Aggregate = require("../../../../meta/Aggregate");
var Element = require("../../../../meta/Element");


/**
 * Aggreate to indicate whether position information is requested as part of the statement
 * @see "Section 13.9.1.2, OFX Spec"
 *
 * @class
 */
function IncludePosition () {

  /**
   * @name IncludePosition#sentDownDate
   * @type Date
   * @access private
   */
  this.sentDownDate = null;

  /**
   * @name IncludePosition#includePositions
   * @type Boolean
   * @access private
   */
  this.includePositions = Boolean.TRUE;
}



Aggregate.add("INCPOS", IncludePosition);


/**
 * Gets the date that the position should be sent down for. This is an optional field according
 * to the OFX spec.
 *
 * @return {Date} the date for the position
 */
IncludePosition.prototype.getDateSentDown = function() {
  return this.sentDownDate;
};
Element.add(IncludePosition, {name: "DTASOF", order: 0, attributeType: Date, readMethod: "getDateSentDown", writeMethod: "setDateSentDown"});


/**
 * Sets the date that the position should be sent down for. This is an optional field according
 * to the OFX spec.
 *
 * @param {Date} sentDownDate the date for the position
 */
IncludePosition.prototype.setDateSentDown = function(sentDownDate) {
  this.sentDownDate = sentDownDate;
};


/**
 * Gets whether to include positions in the statement download.
 *
 * @return {Boolean} whether to include positions in the statement download
 */
IncludePosition.prototype.getIncludePositions = function() {
  return this.includePositions;
};
Element.add(IncludePosition, {name: "INCLUDE", order: 10, attributeType: Boolean, readMethod: "getIncludePositions", writeMethod: "setIncludePositions"});


/**
 * Sets whether to include positions in the statement download.
 *
 * @param {Boolean} includePositions whether to include positions in the statement download
 */
IncludePosition.prototype.setIncludePositions = function(includePositions) {
  this.includePositions = includePositions;
};




module.exports = IncludePosition;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/statements/InvestmentBalance.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var Aggregate = require("../../../../meta/Aggregate");
var ChildAggregate = require("../../../../meta/ChildAggregate");
var Element = require("../../../../meta/Element");
var BalanceList = require("./BalanceList");

/**
 * Aggregate for the investment balance.
 * @see "Section 13.9.2.7, OFX Spec"
 *
 * @class
 */
function InvestmentBalance () {

  /**
   * @name InvestmentBalance#availableCash
   * @type Double
   * @access private
   */
  this.availableCash = null;

  /**
   * @name InvestmentBalance#marginBalance
   * @type Double
   * @access private
   */
  this.marginBalance = null;

  /**
   * @name InvestmentBalance#shortBalance
   * @type Double
   * @access private
   */
  this.shortBalance = null;

  /**
   * @name InvestmentBalance#buyingPower
   * @type Double
   * @access private
   */
  this.buyingPower = null;

  /**
   * @name InvestmentBalance#balanceList
   * @type BalanceList
   * @access private
   */
  this.balanceList = null;
}



Aggregate.add("INVBAL", InvestmentBalance);


/**
 * Gets the available cash balance across all sub-accounts, including sweep funds. This is
 * required field according to the OFX spec.
 *
 * @return {Double} the available cash balance
 */
InvestmentBalance.prototype.getAvailableCash = function() {
  return this.availableCash;
};
Element.add(InvestmentBalance, {name: "AVAILCASH", required: true, order: 10, attributeType: Number, readMethod: "getAvailableCash", writeMethod: "setAvailableCash"});


/**
 * Sets the available cash balance across all sub-accounts, including sweep funds. This is
 * required field according to the OFX spec.
 *
 * @param {Double} availableCash the available cash balance
 */
InvestmentBalance.prototype.setAvailableCash = function(availableCash) {
  this.availableCash = availableCash;
};


/**
 * Gets the margin account balance. A positive balance indicates a positive cash balance, while
 * a negative balance indicates the customer borrowed funds. This is a required field according
 * to the OFX spec.
 *
 * @return {Double} the margin account balance
 */
InvestmentBalance.prototype.getMarginBalance = function() {
  return this.marginBalance;
};
Element.add(InvestmentBalance, {name: "MARGINBALANCE", required: true, order: 20, attributeType: Number, readMethod: "getMarginBalance", writeMethod: "setMarginBalance"});


/**
 * Sets the margin account balance. A positive balance indicates a positive cash balance, while
 * a negative balance indicates the customer borrowed funds. This is a required field according
 * to the OFX spec.
 *
 * @param {Double} marginBalance the margin account balance
 */
InvestmentBalance.prototype.setMarginBalance = function(marginBalance) {
  this.marginBalance = marginBalance;
};


/**
 * Gets the market value of all short positions. This is a positive balance. This is a required
 * field according to the OFX spec.
 *
 * @return {Double} the market value of all short positions
 */
InvestmentBalance.prototype.getShortBalance = function() {
  return this.shortBalance;
};
Element.add(InvestmentBalance, {name: "SHORTBALANCE", required: true, order: 30, attributeType: Number, readMethod: "getShortBalance", writeMethod: "setShortBalance"});


/**
 * Sets the market value of all short positions. This is a positive balance. This is a required
 * field according to the OFX spec.
 *
 * @param {Double} shortBalance the market value of all short positions
 */
InvestmentBalance.prototype.setShortBalance = function(shortBalance) {
  this.shortBalance = shortBalance;
};


/**
 * Gets the buying power amount. This is an optional field according to the OFX spec.
 *
 * @return {Double} the buying power
 */
InvestmentBalance.prototype.getBuyingPower = function() {
  return this.buyingPower;
};
Element.add(InvestmentBalance, {name: "BUYPOWER", order: 40, attributeType: Number, readMethod: "getBuyingPower", writeMethod: "setBuyingPower"});


/**
 * Sets the buying power amount. This is an optional field according to the OFX spec.
 *
 * @param {Double} buyingPower the buying power
 */
InvestmentBalance.prototype.setBuyingPower = function(buyingPower) {
  this.buyingPower = buyingPower;
};


/**
 * Gets the investment balance list. This is an optional field according to the OFX spec.
 *
 * @return {BalanceList} the investment balance list
 */
InvestmentBalance.prototype.getBalanceList = function() {
  return this.balanceList;
};
ChildAggregate.add(InvestmentBalance, {order: 50, attributeType: BalanceList, readMethod: "getBalanceList", writeMethod: "setBalanceList"});


/**
 * Sets the investment balance list. This is an optional field according to the OFX spec.
 *
 * @param {BalanceList} balanceList the investment balance list
 */
InvestmentBalance.prototype.setBalanceList = function(balanceList) {
  this.balanceList = balanceList;
};




module.exports = InvestmentBalance;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","./BalanceList":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/statements/BalanceList.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/statements/InvestmentStatementRequest.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var StatementRequest = require("../../common/StatementRequest");
var Aggregate = require("../../../../meta/Aggregate");
var ChildAggregate = require("../../../../meta/ChildAggregate");
var Element = require("../../../../meta/Element");
var InvestmentAccountDetails = require("../accounts/InvestmentAccountDetails");
var IncludePosition = require("./IncludePosition");

/**
 * Aggregate for the investment statement download request.
 * @see "Section 13.9.1.1, OFX Spec"
 *
 * @class
 * @augments StatementRequest
 */
function InvestmentStatementRequest () {

  /**
   * @name InvestmentStatementRequest#account
   * @type InvestmentAccountDetails
   * @access private
   */
  this.account = null;

  /**
   * @name InvestmentStatementRequest#includeOpenOrders
   * @type Boolean
   * @access private
   */
  this.includeOpenOrders = Boolean.FALSE;

  /**
   * @name InvestmentStatementRequest#includePosition
   * @type IncludePosition
   * @access private
   */
  this.includePosition = null;

  /**
   * @name InvestmentStatementRequest#includeBalance
   * @type Boolean
   * @access private
   */
  this.includeBalance = Boolean.TRUE;
}

inherit(InvestmentStatementRequest, "extends", StatementRequest);


Aggregate.add("INVSTMTRQ", InvestmentStatementRequest);


/**
 * The account details.
 *
 * @return {InvestmentAccountDetails} The account details.
 */
InvestmentStatementRequest.prototype.getAccount = function() {
  return this.account;
};
ChildAggregate.add(InvestmentStatementRequest, {name: "INVACCTFROM", required: true, order: 0, attributeType: InvestmentAccountDetails, readMethod: "getAccount", writeMethod: "setAccount"});


/**
 * The account details.
 *
 * @param {InvestmentAccountDetails} account The account details.
 */
InvestmentStatementRequest.prototype.setAccount = function(account) {
  this.account = account;
};


/**
 * Gets whether to include open orders. This is an optional field according to the OFX spec.
 * <br>
 * Note, open orders are not yet implemented.
 *
 * @return {Boolean} whether to include open orders
 */
InvestmentStatementRequest.prototype.getIncludeOpenOrders = function() {
  return this.includeOpenOrders;
};
Element.add(InvestmentStatementRequest, {name: "INCOO", order: 20, attributeType: Boolean, readMethod: "getIncludeOpenOrders", writeMethod: "setIncludeOpenOrders"});


/**
 * Sets whether to include open orders. This is an optional field according to the OFX spec.
 * <br>
 * Note, open orders are not yet implemented.
 *
 * @param {Boolean} includeOpenOrders whether to include open orders
 */
InvestmentStatementRequest.prototype.setIncludeOpenOrders = function(includeOpenOrders) {
  this.includeOpenOrders = includeOpenOrders;
};


/**
 * Gets the include position child aggregate. This is a required field according to the OFX spec.
 *
 * @return {IncludePosition} the include position child aggregate
 */
InvestmentStatementRequest.prototype.getIncludePosition = function() {
  return this.includePosition;
};
ChildAggregate.add(InvestmentStatementRequest, {name: "INCPOS", required: true, order: 30, attributeType: IncludePosition, readMethod: "getIncludePosition", writeMethod: "setIncludePosition"});


/**
 * Gets the include position child aggregate. This is a required field according to the OFX spec.
 *
 * @param {IncludePosition} includePosition the include position child aggregate
 */
InvestmentStatementRequest.prototype.setIncludePosition = function(includePosition) {
  this.includePosition = includePosition;
};


/**
 * Gets whether to include balance info in the response. This is a required field according to
 * the OFX spec.
 *
 * @return {Boolean} whether to include balance info in the response
 */
InvestmentStatementRequest.prototype.getIncludeBalance = function() {
  return this.includeBalance;
};
Element.add(InvestmentStatementRequest, {name: "INCBAL", required: true, order: 40, attributeType: Boolean, readMethod: "getIncludeBalance", writeMethod: "setIncludeBalance"});


/**
 * Sets whether to include balance info in the response. This is a required field according to
 * the OFX spec.
 *
 * @param {Boolean} includeBalance whether to include balance info in the response
 */
InvestmentStatementRequest.prototype.setIncludeBalance = function(includeBalance) {
  this.includeBalance = includeBalance;
};




module.exports = InvestmentStatementRequest;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../../common/StatementRequest":"/Users/aolson/Developer/ofx4js/src/domain/data/common/StatementRequest.js","../accounts/InvestmentAccountDetails":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/accounts/InvestmentAccountDetails.js","./IncludePosition":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/statements/IncludePosition.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/statements/InvestmentStatementRequestMessageSet.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var MessageSetType = require("../../MessageSetType");
var RequestMessageSet = require("../../RequestMessageSet");
var Aggregate = require("../../../../meta/Aggregate");
var ChildAggregate = require("../../../../meta/ChildAggregate");
var InvestmentStatementRequestTransaction = require("./InvestmentStatementRequestTransaction");

/**
 * Investment statement request message set.
 * @see "Section 13.7.1.2.1, OFX Spec"
 *
 * @class
 * @augments RequestMessageSet
 */
function InvestmentStatementRequestMessageSet () {

  /**
   * @name InvestmentStatementRequestMessageSet#statementRequest
   * @type InvestmentStatementRequestTransaction
   * @access private
   */
  this.statementRequest = null;
}

inherit(InvestmentStatementRequestMessageSet, "extends", RequestMessageSet);


Aggregate.add("INVSTMTMSGSRQV1", InvestmentStatementRequestMessageSet);


InvestmentStatementRequestMessageSet.prototype.getType = function() {
  return MessageSetType.investment;
};


/**
 * Gets the statement request.
 *
 * @return {InvestmentStatementRequestTransaction} the request
 */
InvestmentStatementRequestMessageSet.prototype.getStatementRequest = function() {
  return this.statementRequest;
};
ChildAggregate.add(InvestmentStatementRequestMessageSet, {order: 0, attributeType: InvestmentStatementRequestTransaction, readMethod: "getStatementRequest", writeMethod: "setStatementRequest"});


/**
 * Sets the statement request.
 *
 * @param {InvestmentStatementRequestTransaction} statementRequest the request
 */
InvestmentStatementRequestMessageSet.prototype.setStatementRequest = function(statementRequest) {
  this.statementRequest = statementRequest;
};


// Inherited.
InvestmentStatementRequestMessageSet.prototype.getRequestMessages = function() {
  var requestMessages = [];
  if (this.getStatementRequest() !== null) {
    requestMessages.push(this.getStatementRequest());
  }
  return requestMessages;
};




module.exports = InvestmentStatementRequestMessageSet;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../../MessageSetType":"/Users/aolson/Developer/ofx4js/src/domain/data/MessageSetType.js","../../RequestMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/RequestMessageSet.js","./InvestmentStatementRequestTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/statements/InvestmentStatementRequestTransaction.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/statements/InvestmentStatementRequestTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var InvestmentStatementRequest = require("./InvestmentStatementRequest");
var TransactionWrappedRequestMessage = require("../../TransactionWrappedRequestMessage");
var Aggregate = require("../../../../meta/Aggregate");
var ChildAggregate = require("../../../../meta/ChildAggregate");

/**
 * Investment statement transaction request.
 * @see "Section 13.9.1.1, OFX Spec"
 *
 * @class
 * @augments TransactionWrappedRequestMessage
 */
function InvestmentStatementRequestTransaction () {

  /**
   * @name InvestmentStatementRequestTransaction#message
   * @type InvestmentStatementRequest
   * @access private
   */
  this.message = null;
}

inherit(InvestmentStatementRequestTransaction, "extends", new TransactionWrappedRequestMessage(InvestmentStatementRequest));


Aggregate.add("INVSTMTTRNRQ", InvestmentStatementRequestTransaction);


/**
 * Gets the the statement request message.
 *
 * @return {InvestmentStatementRequest} the statement request message.
 */
InvestmentStatementRequestTransaction.prototype.getMessage = function() {
  return this.message;
};
ChildAggregate.add(InvestmentStatementRequestTransaction, {required: true, order: 30, attributeType: InvestmentStatementRequest, readMethod: "getMessage", writeMethod: "setMessage"});


/**
 * Sets the the statement request message.
 *
 * @param {InvestmentStatementRequest} message the statement request message.
 */
InvestmentStatementRequestTransaction.prototype.setMessage = function(message) {
  this.message = message;
};


// Inherited.
InvestmentStatementRequestTransaction.prototype.setWrappedMessage = function(/*InvestmentStatementRequest*/ message) {
  this.setMessage(message);
};




module.exports = InvestmentStatementRequestTransaction;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../../TransactionWrappedRequestMessage":"/Users/aolson/Developer/ofx4js/src/domain/data/TransactionWrappedRequestMessage.js","./InvestmentStatementRequest":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/statements/InvestmentStatementRequest.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/statements/InvestmentStatementResponse.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var StatementResponse = require("../../common/StatementResponse");
var Aggregate = require("../../../../meta/Aggregate");
var ChildAggregate = require("../../../../meta/ChildAggregate");
var Element = require("../../../../meta/Element");
var InvestmentAccountDetails = require("../accounts/InvestmentAccountDetails");
var InvestmentTransactionList = require("../transactions/InvestmentTransactionList");
var InvestmentPositionList = require("../positions/InvestmentPositionList");
var InvestmentBalance = require("./InvestmentBalance");


/**
 * Aggregate for the investment statement download response.
 * @see "Section 13.9.2.2, OFX Spec"
 *
 * @class
 * @augments StatementResponse
 */
function InvestmentStatementResponse () {

  /**
   * @name InvestmentStatementResponse#dateOfStatement
   * @type Date
   * @access private
   */
  this.dateOfStatement = null;

  /**
   * @name InvestmentStatementResponse#account
   * @type InvestmentAccountDetails
   * @access private
   */
  this.account = null;

  /**
   * @name InvestmentStatementResponse#transactionList
   * @type InvestmentTransactionList
   * @access private
   */
  this.transactionList = null;

  /**
   * @name InvestmentStatementResponse#positionList
   * @type InvestmentPositionList
   * @access private
   */
  this.positionList = null;

  /**
   * @name InvestmentStatementResponse#accountBalance
   * @type InvestmentBalance
   * @access private
   */
  this.accountBalance = null;

  /**
   * @name InvestmentStatementResponse#securityList
   * @type SecurityList
   * @access private
   */
  this.securityList = null;
}

inherit(InvestmentStatementResponse, "extends", StatementResponse);


Aggregate.add("INVSTMTRS", InvestmentStatementResponse);


/**
 * Gets the name of the response message.
 *
 * @return {String} the name of the response message
 */
// @Override
InvestmentStatementResponse.prototype.getResponseMessageName = function() {
  return "investment statement";
};


/**
 * Gets the date and time for the statement download. This is a required field according to the
 * OFX spec.
 *
 * @return {Date} the date and time for the statement download
 */
InvestmentStatementResponse.prototype.getDateOfStatement = function() {
  return this.dateOfStatement;
};
Element.add(InvestmentStatementResponse, {name: "DTASOF", required: true, order: 60, attributeType: Date, readMethod: "getDateOfStatement", writeMethod: "setDateOfStatement"});


/**
 * Sets the date and time for the statement download. This is a required field according to the
 * OFX spec.
 *
 * @param {Date} dateOfStatement the date and time for the statement download
 */
InvestmentStatementResponse.prototype.setDateOfStatement = function(dateOfStatement) {
  this.dateOfStatement = dateOfStatement;
};


/**
 * Gets the account for the statement. This is a required field according to the OFX spec.
 *
 * @return {InvestmentAccountDetails} the account for the statement
 */
InvestmentStatementResponse.prototype.getAccount = function() {
  return this.account;
};
ChildAggregate.add(InvestmentStatementResponse, {name:"INVACCTFROM", required: true, order: 10, attributeType: InvestmentAccountDetails, readMethod: "getAccount", writeMethod: "setAccount"});


/**
 * Sets the account for the statement. This is a required field according to the OFX spec.
 *
 * @param {InvestmentAccountDetails} account the account for the statement
 */
InvestmentStatementResponse.prototype.setAccount = function(account) {
  this.account = account;
};


/**
 * Gets the transaction list aggregate. This is an optional field according to the OFX spec.
 *
 * @return {InvestmentTransactionList} the transaction list aggregate
 */
InvestmentStatementResponse.prototype.getInvestmentTransactionList = function() {
  return this.transactionList;
};
ChildAggregate.add(InvestmentStatementResponse, {order: 70, attributeType: InvestmentTransactionList, readMethod: "getInvestmentTransactionList", writeMethod: "setInvestmentTransactionList"});


/**
 * Sets the transaction list aggregate. This is an optional field according to the OFX spec.
 *
 * @param {InvestmentTransactionList} transactionList the transaction list aggregate
 */
InvestmentStatementResponse.prototype.setInvestmentTransactionList = function(transactionList) {
  this.transactionList = transactionList;
};


/**
 * Gets the position list aggreate. This is an optional field according to the OFX spec.
 *
 * @return {InvestmentPositionList} the position list aggregate
 */
InvestmentStatementResponse.prototype.getPositionList = function() {
  return this.positionList;
};
ChildAggregate.add(InvestmentStatementResponse, {order: 80, attributeType: InvestmentPositionList, readMethod: "getPositionList", writeMethod: "setPositionList"});


/**
 * Sets the position list aggreate. This is an optional field according to the OFX spec.
 *
 * @param {InvestmentPositionList} positionList the position list aggregate
 */
InvestmentStatementResponse.prototype.setPositionList = function(positionList) {
  this.positionList = positionList;
};


/**
 * Gets the account balance. This is an optional field according to the OFX spec.
 *
 * @return {InvestmentBalance} the account balance
 */
InvestmentStatementResponse.prototype.getAccountBalance = function() {
  return this.accountBalance;
};
ChildAggregate.add(InvestmentStatementResponse, {order: 90, attributeType: InvestmentBalance, readMethod: "getAccountBalance", writeMethod: "setAccountBalance"});


/**
 * Sets the account balance. This is an optional field according to the OFX spec.
 *
 * @param {InvestmentBalance} accountBalance the account balance
 */
InvestmentStatementResponse.prototype.setAccountBalance = function(accountBalance) {
  this.accountBalance = accountBalance;
};


/**
 * Gets the security list aggregate.
 * <br>
 * This is not actually technically part of the investment statement responsr aggregate, but
 * according to Section 13.8.4, OFX spec, this aggregate can appear the overall response and
 * we provide it here for convenience.
 *
 * @return {SecurityList} the security list aggregate
 */
InvestmentStatementResponse.prototype.getSecurityList = function() {
  return this.securityList;
};


/**
 * Sets the security list aggregate.
 * <br>
 * This is not actually technically part of the investment statement responsr aggregate, but
 * according to Section 13.8.4, OFX spec, this aggregate can appear the overall response and
 * we provide it here for convenience.
 *
 * @param {SecurityList} securityList the security list aggregate
 */
InvestmentStatementResponse.prototype.setSecurityList = function(securityList) {
  this.securityList = securityList;
};




module.exports = InvestmentStatementResponse;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../../common/StatementResponse":"/Users/aolson/Developer/ofx4js/src/domain/data/common/StatementResponse.js","../accounts/InvestmentAccountDetails":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/accounts/InvestmentAccountDetails.js","../positions/InvestmentPositionList":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/InvestmentPositionList.js","../transactions/InvestmentTransactionList":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/InvestmentTransactionList.js","./InvestmentBalance":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/statements/InvestmentBalance.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/statements/InvestmentStatementResponseMessageSet.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var MessageSetType = require("../../MessageSetType");
var ResponseMessageSet = require("../../ResponseMessageSet");
var Aggregate = require("../../../../meta/Aggregate");
var ChildAggregate = require("../../../../meta/ChildAggregate");
var InvestmentStatementResponseTransaction = require("./InvestmentStatementResponseTransaction");

/**
 * Investment statement response message set.
 * @see "Section 13.7.1.2.2, OFX Spec"
 *
 * @class
 * @augments ResponseMessageSet
 */
function InvestmentStatementResponseMessageSet () {

  /**
   * @name InvestmentStatementResponseMessageSet#statementResponses
   * @type List<InvestmentStatementResponseTransaction>
   * @access private
   */
  this.statementResponses = null;
}

inherit(InvestmentStatementResponseMessageSet, "extends", ResponseMessageSet);


Aggregate.add("INVSTMTMSGSRSV1", InvestmentStatementResponseMessageSet);


InvestmentStatementResponseMessageSet.prototype.getType = function() {
  return MessageSetType.investment;
};


/**
 * Gets the statement response list. Most OFX files have a single statement response.
 *
 * @return {InvestmentStatementResponseTransaction[]} the statement response list
 */
InvestmentStatementResponseMessageSet.prototype.getStatementResponses = function() {
  return this.statementResponses;
};
ChildAggregate.add(InvestmentStatementResponseMessageSet, {order: 0, attributeType: Array, collectionEntryType: InvestmentStatementResponseTransaction, readMethod: "getStatementResponses", writeMethod: "setStatementResponses"});


/**
 * Sets the statement reponse list. Most OFX files have a single statement response.
 *
 * @param {InvestmentStatementResponseTransaction[]} statementResponses the statement response list
 */
InvestmentStatementResponseMessageSet.prototype.setStatementResponses = function(statementResponses) {
  this.statementResponses = statementResponses;
};


/**
 * Gets the first statement response. Use getStatementResponses() if you are expecting multiple
 * responses.
 *
 * @return {InvestmentStatementResponseTransaction} the first investment statement response.
 */
InvestmentStatementResponseMessageSet.prototype.getStatementResponse = function() {
  return this.statementResponses === null || this.statementResponses.length === 0 ? null : this.statementResponses[0];
};


/**
 * Sets the statement response if there is a single response.
 *
 * @param {InvestmentStatementResponseTransaction} statementResponse The statement response.
 */
InvestmentStatementResponseMessageSet.prototype.setStatementResponse = function(statementResponse) {
  this.statementResponses = [statementResponse];
};


// Inherited.
InvestmentStatementResponseMessageSet.prototype.getResponseMessages = function() {
  return this.statementResponses;
};




module.exports = InvestmentStatementResponseMessageSet;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../../MessageSetType":"/Users/aolson/Developer/ofx4js/src/domain/data/MessageSetType.js","../../ResponseMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/ResponseMessageSet.js","./InvestmentStatementResponseTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/statements/InvestmentStatementResponseTransaction.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/statements/InvestmentStatementResponseTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var TransactionWrappedResponseMessage = require("../../TransactionWrappedResponseMessage");
var Aggregate = require("../../../../meta/Aggregate");
var ChildAggregate = require("../../../../meta/ChildAggregate");
var InvestmentStatementResponse = require("./InvestmentStatementResponse");

/**
 * Investment statement transaction response.
 * @see "Section 13.9.2.1, OFX Spec"
 *
 * @class
 * @augments TransactionWrappedResponseMessage
 */
function InvestmentStatementResponseTransaction () {

  /**
   * @name InvestmentStatementResponseTransaction#message
   * @type InvestmentStatementResponse
   * @access private
   */
  this.message = null;
}

inherit(InvestmentStatementResponseTransaction, "extends", new TransactionWrappedResponseMessage(InvestmentStatementResponse));


Aggregate.add("INVSTMTTRNRS", InvestmentStatementResponseTransaction);


/**
 * Gets the the statement response message.
 *
 * @return {InvestmentStatementResponse} the statement response message.
 */
InvestmentStatementResponseTransaction.prototype.getMessage = function() {
  return this.message;
};
ChildAggregate.add(InvestmentStatementResponseTransaction, {required: true, order: 30, attributeType: InvestmentStatementResponse, readMethod: "getMessage", writeMethod: "setMessage"});


/**
 * Sets the the statement response message.
 *
 * @param {InvestmentStatementResponse} message the statement response message.
 */
InvestmentStatementResponseTransaction.prototype.setMessage = function(message) {
  this.message = message;
};


// Inherited.
InvestmentStatementResponseTransaction.prototype.getWrappedMessage = function() {
  return this.getMessage();
};




module.exports = InvestmentStatementResponseTransaction;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../../TransactionWrappedResponseMessage":"/Users/aolson/Developer/ofx4js/src/domain/data/TransactionWrappedResponseMessage.js","./InvestmentStatementResponse":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/statements/InvestmentStatementResponse.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/statements/index.js":[function(require,module,exports){
"use strict";

module.exports = {
  BalanceList: require("./BalanceList"),
  IncludePosition: require("./IncludePosition"),
  InvestmentBalance: require("./InvestmentBalance"),
  InvestmentStatementRequest: require("./InvestmentStatementRequest"),
  InvestmentStatementRequestMessageSet: require("./InvestmentStatementRequestMessageSet"),
  InvestmentStatementRequestTransaction: require("./InvestmentStatementRequestTransaction"),
  InvestmentStatementResponse: require("./InvestmentStatementResponse"),
  InvestmentStatementResponseMessageSet: require("./InvestmentStatementResponseMessageSet"),
  InvestmentStatementResponseTransaction: require("./InvestmentStatementResponseTransaction")
};

},{"./BalanceList":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/statements/BalanceList.js","./IncludePosition":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/statements/IncludePosition.js","./InvestmentBalance":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/statements/InvestmentBalance.js","./InvestmentStatementRequest":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/statements/InvestmentStatementRequest.js","./InvestmentStatementRequestMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/statements/InvestmentStatementRequestMessageSet.js","./InvestmentStatementRequestTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/statements/InvestmentStatementRequestTransaction.js","./InvestmentStatementResponse":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/statements/InvestmentStatementResponse.js","./InvestmentStatementResponseMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/statements/InvestmentStatementResponseMessageSet.js","./InvestmentStatementResponseTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/statements/InvestmentStatementResponseTransaction.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BaseBuyInvestmentTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var SubAccountType = require("../accounts/SubAccountType");
var ChildAggregate = require("../../../../meta/ChildAggregate");
var BaseInvestmentTransaction = require("./BaseInvestmentTransaction");
var TransactionWithSecurity = require("./TransactionWithSecurity");
var BuyInvestmentTransaction = require("./BuyInvestmentTransaction");


/**
 * Base class for all investment transactions for buying securities.
 * <br>
 * This class exposes a read-only view of the flattened aggregates that are
 * common to all buy investment transactions as a convenience to application
 * developers who may not find the ofx aggregation model intuitive.
 *
 * @class
 * @augments BaseInvestmentTransaction
 * @augments TransactionWithSecurity
 */
function BaseBuyInvestmentTransaction (/*TransactionType*/ transactionType) {
  BaseInvestmentTransaction.call(this, transactionType);

  /**
   * @name BaseBuyInvestmentTransaction#buyInvestment
   * @type BuyInvestmentTransaction
   * @access private
   */
  this.buyInvestment = null;
}

inherit(BaseBuyInvestmentTransaction, "extends", BaseInvestmentTransaction);
inherit(BaseBuyInvestmentTransaction, "implements", TransactionWithSecurity);



/**
 * Gets the buy investment transaction child aggregate.
 *
 * @return {BuyInvestmentTransaction} the buy investment transaction child aggregate
 */
BaseBuyInvestmentTransaction.prototype.getBuyInvestment = function() {
  return this.buyInvestment;
};
ChildAggregate.add(BaseBuyInvestmentTransaction, {order: 10, attributeType: BuyInvestmentTransaction, readMethod: "getBuyInvestment", writeMethod: "setBuyInvestment"});


/**
 * Sets the buy investment transaction child aggregate.
 *
 * @param {BuyInvestmentTransaction} buyInvestment the buy investment transaction child aggregate
 */
BaseBuyInvestmentTransaction.prototype.setBuyInvestment = function(buyInvestment) {
  this.buyInvestment = buyInvestment;
};


/**
 * Gets the investment transaction aggregate.
 *
 * @return {InvestmentTransaction} the investment transaction aggregate
 */
// @Overridden
BaseBuyInvestmentTransaction.prototype.getInvestmentTransaction = function() {
  return this.getBuyInvestment().getInvestmentTransaction();
};


/**
 * Gets the id of the security that was bought. This is a required field according to the OFX
 * spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {SecurityId} the security id of the security that was bought
 */
BaseBuyInvestmentTransaction.prototype.getSecurityId = function() {
  return this.getBuyInvestment().getSecurityId();
};


/**
 * Gets the number of units of the security that was bought. For security-based actions other
 * than stock splits, this is the quantity bought. For stocks, mutual funds, and others, this
 * is the number of shares. For bonds, this is the face value. For options, this is the number of
 * contacts. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the number of units purchased.
 */
BaseBuyInvestmentTransaction.prototype.getUnits = function() {
  return this.getBuyInvestment().getUnits();
};


/**
 * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
 * share price. For bonds, this is the percentage of par. For options, this is the per share (not
 * per contact) price. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the per unit price
 */
BaseBuyInvestmentTransaction.prototype.getUnitPrice = function() {
  return this.getBuyInvestment().getUnitPrice();
};


/**
 * Gets the portion of the unit price that is attributed to the dealer markup. This is an
 * optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the per unit markeup price
 */
BaseBuyInvestmentTransaction.prototype.getMarkup = function() {
  return this.getBuyInvestment().getMarkup();
};


/**
 * Gets the transaction commission for the purchase. This is an optional field according to the
 * OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the transaction commision
 */
BaseBuyInvestmentTransaction.prototype.getCommission = function() {
  return this.getBuyInvestment().getCommission();
};


/**
 * Gets the taxes for the purchase. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the transaction taxes
 */
BaseBuyInvestmentTransaction.prototype.getTaxes = function() {
  return this.getBuyInvestment().getTaxes();
};


/**
 * Gets the fees for the purchase. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the transaction fees
 */
BaseBuyInvestmentTransaction.prototype.getFees = function() {
  return this.getBuyInvestment().getFees();
};


/**
 * Gets the load for the purchase. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the load
 */
BaseBuyInvestmentTransaction.prototype.getLoad = function() {
  return this.getBuyInvestment().getLoad();
};


/**
 * Gets the total for the purchase. Should be equal to
 * (units * (unitPrice + markup)) + (commision + fees + load + taxes) according to the OFX
 * spec. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the total
 */
BaseBuyInvestmentTransaction.prototype.getTotal = function() {
  return this.getBuyInvestment().getTotal();
};


/**
 * Gets the currency code for the transaction. Only one of currency code or original currency
 * info should be set according to the OFX spec. If neither are set, means the default currency.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {String} the currency code for the transaction
 */
BaseBuyInvestmentTransaction.prototype.getCurrencyCode = function() {
  return this.getBuyInvestment().getCurrencyCode();
};


/**
 * Gets the original currency info for the transaction.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {OriginalCurrency} the original currency info for the transaction
 */
BaseBuyInvestmentTransaction.prototype.getOriginalCurrencyInfo = function() {
  return this.getBuyInvestment().getOriginalCurrencyInfo();
};


/**
 * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {String} the sub account type
 */
BaseBuyInvestmentTransaction.prototype.getSubAccountSecurity = function() {
  return this.getBuyInvestment().getSubAccountSecurity();
};


/**
 * Gets the result of getSubAccountSecurity as one of the well-known types.
 *
 * @return {SubAccountType} the type of null if it wasn't one of the well known types
 */
BaseBuyInvestmentTransaction.prototype.getSubAccountSecurityEnum = function() {
  return SubAccountType.fromOfx(this.getSubAccountSecurity());
};


/**
 * Gets the sub account type that the money came from. (e.g. CASH, MARGIN, SHORT, OTHER).
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {String} the sub account fund
 */
BaseBuyInvestmentTransaction.prototype.getSubAccountFund = function() {
  return this.getBuyInvestment().getSubAccountFund();
};


/**
 * Gets the result of getSubAccountFund as one of the well-known types.
 *
 * @return {SubAccountType} the type or null if it wasn't one of the well known types.
 */
BaseBuyInvestmentTransaction.prototype.getSubAccountFundEnum = function() {
  return SubAccountType.fromOfx(this.getSubAccountFund());
};




module.exports = BaseBuyInvestmentTransaction;

},{"../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../accounts/SubAccountType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/accounts/SubAccountType.js","./BaseInvestmentTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BaseInvestmentTransaction.js","./BuyInvestmentTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BuyInvestmentTransaction.js","./TransactionWithSecurity":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/TransactionWithSecurity.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BaseInvestmentTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * Base class for all investment transactions.
 * <br>
 * This class exposes a read-only view of the flattened aggregates that are
 * common to all investment transactions as a convenience to application
 * developers who may not find the ofx aggregation model intuitive.
 *
 * @class
 */
function BaseInvestmentTransaction (/*TransactionType*/ transactionType) {

  /**
   * @name BaseInvestmentTransaction#transactionType
   * @type TransactionType
   * @access private
   */
  this.transactionType = transactionType;
}




/**
 * Gets the type of transaction.
 *
 * @return {TransactionType} the type of transaction
 */
BaseInvestmentTransaction.prototype.getTransactionType = function() {
  return this.transactionType;
};


/**
 * Gets the {@link InvestmentTransaction} aggregate.
 *
 * @return {InvestmentTransaction} the {@link InvestmentTransaction} aggregate
 */
BaseInvestmentTransaction.prototype.getInvestmentTransaction = function() { throw new Error("Not implemented"); };

/**
 * Gets the unique financial institution assigned transaction id. This is a
 * required field according to the OFX spec.
 * @see "Section 13.9.2.4.1, OFX Spec"
 *
 * @return {String} the financial institution asssigned transaction id
 */
BaseInvestmentTransaction.prototype.getTransactionId = function() {
  return this.getInvestmentTransaction().getTransactionId();
};

/**
 * Gets the server assigned transaction id. This is an optional field
 * according to the OFX spec.
 * @see "Section 13.9.2.4.1, OFX Spec"
 *
 * @return {String} the server assigned transaction id
 */
BaseInvestmentTransaction.prototype.getServerId = function() {
  return this.getInvestmentTransaction().getServerId();
};

/**
 * Gets the trade date of the transaction. For stock splits, this is the
 * day of record. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.4.1, OFX Spec"
 *
 * @return {Date} the trade date
 */
BaseInvestmentTransaction.prototype.getTradeDate = function() {
  return this.getInvestmentTransaction().getTradeDate();
};

/**
 * Gets the settlement date of the transaction. For stock splits, this is the
 * day of of execution. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.1, OFX Spec"
 *
 * @return {Date} the trade date
 */
BaseInvestmentTransaction.prototype.getSettlementDate = function() {
  return this.getInvestmentTransaction().getSettlementDate();
};

/**
 * For a reveral transaction, gets the financial institution assigned
 * transaction id for the transaction being revesed.
 * @see "Section 13.9.2.4.1, OFX Spec"
 *
 * @return {String} the transaction id of the transaction being reversed
 */
BaseInvestmentTransaction.prototype.getReversalTransactionId = function() {
  return this.getInvestmentTransaction().getReversalTransactionId();
};

/**
 * Gets the memo associated with the transaction. This is an optional field
 * according to the OFX spec.
 * @see "Section 13.9.2.4.1, OFX Spec"
 *
 * @return {String} the memo
 */
BaseInvestmentTransaction.prototype.getMemo = function() {
  return this.getInvestmentTransaction().getMemo();
};




module.exports = BaseInvestmentTransaction;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BaseOtherInvestmentTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var ChildAggregate = require("../../../../meta/ChildAggregate");
var BaseInvestmentTransaction = require("./BaseInvestmentTransaction");
var InvestmentTransaction = require("./InvestmentTransaction");

/**
 * Base class for investment transactions that aren't buys or sales..
 * <br>
 * This class exposes a read-only view of the flattened aggregates that are
 * common to all investment transactions as a convenience to application
 * developers who may not find the ofx aggregation model intuitive.
 *
 * @class
 * @augments BaseInvestmentTransaction
 */
function BaseOtherInvestmentTransaction (/*TransactionType*/ transactionType) {
  BaseInvestmentTransaction.call(this, transactionType);

  /**
   * @name BaseOtherInvestmentTransaction#investmentTransaction
   * @type InvestmentTransaction
   * @access private
   */
  this.investmentTransaction = null;
}

inherit(BaseOtherInvestmentTransaction, "extends", BaseInvestmentTransaction);




/**
 * Gets the {@link InvestmentTransaction} aggregate.
 *
 * @return {InvestmentTransaction} the {@link InvestmentTransaction} aggregate
 */
// @Override
BaseOtherInvestmentTransaction.prototype.getInvestmentTransaction = function() {
  return this.investmentTransaction;
};
ChildAggregate.add(BaseOtherInvestmentTransaction, {order: 10, attributeType: InvestmentTransaction, readMethod: "getInvestmentTransaction", writeMethod: "setInvestmentTransaction"});


/**
 * Sets the {@link InvestmentTransaction} aggregate.
 *
 * @param {InvestmentTransaction} investmentTransaction the {@link InvestmentTransaction} aggregate
 */
BaseOtherInvestmentTransaction.prototype.setInvestmentTransaction = function(investmentTransaction) {
  this.investmentTransaction = investmentTransaction;
};




module.exports = BaseOtherInvestmentTransaction;

},{"../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","./BaseInvestmentTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BaseInvestmentTransaction.js","./InvestmentTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/InvestmentTransaction.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BaseSellInvestmentTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var Inv401KSource = require("../positions/Inv401KSource");
var SubAccountType = require("../accounts/SubAccountType");
var ChildAggregate = require("../../../../meta/ChildAggregate");
var BaseInvestmentTransaction = require("./BaseInvestmentTransaction");
var TransactionWithSecurity = require("./TransactionWithSecurity");
var SellInvestmentTransaction = require("./SellInvestmentTransaction");

/**
 * Base class for all investment transactions for selling securities.
 * <br>
 * This class exposes a read-only view of the flattened aggregates that are
 * common to all sell investment transactions as a convenience to application
 * developers who may not find the ofx aggregation model intuitive.
 *
 * @class
 * @augments BaseInvestmentTransaction
 * @augments TransactionWithSecurity
 */
function BaseSellInvestmentTransaction (/*TransactionType*/ transactionType) {
  BaseInvestmentTransaction.call(this, transactionType);

  /**
   * @name BaseSellInvestmentTransaction#sellInvestment
   * @type SellInvestmentTransaction
   * @access private
   */
  this.sellInvestment = null;
}

inherit(BaseSellInvestmentTransaction, "extends", BaseInvestmentTransaction);
inherit(BaseSellInvestmentTransaction, "implements", TransactionWithSecurity);




BaseSellInvestmentTransaction.prototype.BaseSellInvestmentTransaction = function(/*TransactionType*/ transactionType) {
  super(transactionType);
};


/**
 * Gets the sell investment transaction child aggregate.
 *
 * @return {SellInvestmentTransaction} the sell investment transaction child aggregate
 */
// @Override
BaseSellInvestmentTransaction.prototype.getSellInvestment = function() {
  return this.sellInvestment;
};
ChildAggregate.add(BaseSellInvestmentTransaction, {order: 10, attributeType: SellInvestmentTransaction, readMethod: "getSellInvestment", writeMethod: "setSellInvestment"});


/**
 * Sets the sell investment transaction child aggregate.
 *
 * @param {SellInvestmentTransaction} sellInvestment the sell investment transaction child aggregate
 */
BaseSellInvestmentTransaction.prototype.setSellInvestment = function(sellInvestment) {
  this.sellInvestment = sellInvestment;
};


/**
 * Gets the investment transaction aggregate.
 *
 * @return {InvestmentTransaction} the investment transaction aggregate
 */
// @Overridden
BaseSellInvestmentTransaction.prototype.getInvestmentTransaction = function() {
  return this.getSellInvestment().getInvestmentTransaction();
};


/**
 * Gets the id of the security that was sold. This is a required field according to the OFX
 * spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {SecurityId} the security id of the security that was bought
 */
BaseSellInvestmentTransaction.prototype.getSecurityId = function() {
  return this.getSellInvestment().getSecurityId();
};


/**
 * Gets the number of units of the security that was sold. For security-based actions other
 * than stock splits, this is the quantity sold. For stocks, mutual funds, and others, this
 * is the number of shares. For bonds, this is the face value. For options, this is the number of
 * contacts. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the number of units purchased.
 */
BaseSellInvestmentTransaction.prototype.getUnits = function() {
  return this.getSellInvestment().getUnits();
};


/**
 * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
 * share price. For bonds, this is the percentage of par. For options, this is the per share (not
 * per contact) price. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the per unit price
 */
BaseSellInvestmentTransaction.prototype.getUnitPrice = function() {
  return this.getSellInvestment().getUnitPrice();
};


/**
 * Gets the portion of the unit price that is attributed to the dealer markdown. This is an
 * optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the per unit markedown price
 */
BaseSellInvestmentTransaction.prototype.getMarkdown = function() {
  return this.getSellInvestment().getMarkdown();
};


/**
 * Gets the transaction commission for the sale. This is an optional field according to the
 * OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the transaction commision
 */
BaseSellInvestmentTransaction.prototype.getCommission = function() {
  return this.getSellInvestment().getCommission();
};


/**
 * Gets the taxes for the sale. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the transaction taxes
 */
BaseSellInvestmentTransaction.prototype.getTaxes = function() {
  return this.getSellInvestment().getTaxes();
};


/**
 * Gets the fees for the sale. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the transaction fees
 */
BaseSellInvestmentTransaction.prototype.getFees = function() {
  return this.getSellInvestment().getFees();
};


/**
 * Gets the load for the sale. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the load
 */
BaseSellInvestmentTransaction.prototype.getLoad = function() {
  return this.getSellInvestment().getLoad();
};


/**
 * Gets the withholding for the sale. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the withholding
 */
BaseSellInvestmentTransaction.prototype.getWithholding = function() {
  return this.getSellInvestment().getWithholding();
};


/**
 * Gets whether the sale was tax exempt. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Boolean} whether the transaction was tax exempt
 */
BaseSellInvestmentTransaction.prototype.getTaxExempt = function() {
  return this.getSellInvestment().getTaxExempt();
};


/**
 * Gets the total for the sale. Should be equal to
 * (units * (unitPrice + markdown)) + (commision + fees + load + taxes + penalty + withholding +
 * statewithholding) according to the OFX spec. This is a required field according to the OFX
 * spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the total
 */
BaseSellInvestmentTransaction.prototype.getTotal = function() {
  return this.getSellInvestment().getTotal();
};


/**
 * Gets the gain sale. This is aan optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the gain for the sale
 */
BaseSellInvestmentTransaction.prototype.getGain = function() {
  return this.getSellInvestment().getGain();
};


/**
 * Gets the currency code for the transaction. Only one of currency code or original currency
 * info should be set according to the OFX spec. If neither are set, means the default currency.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {String} the currency code for the transaction.
 */
BaseSellInvestmentTransaction.prototype.getCurrencyCode = function() {
  return this.getSellInvestment().getCurrencyCode();
};


/**
 * Gets the origianl currency info for the transaction.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {OriginalCurrency} the currency info for the transaction.
 */
BaseSellInvestmentTransaction.prototype.getOriginalCurrencyInfo = function() {
  return this.getSellInvestment().getOriginalCurrencyInfo();
};


/**
 * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {String} the sub account type
 */
BaseSellInvestmentTransaction.prototype.getSubAccountSecurity = function() {
  return this.getSellInvestment().getSubAccountSecurity();
};


/**
 * Gets the result of getSubAccountSecurity as one of the well-known types.
 *
 * @return {SubAccountType} the type of null if it wasn't one of the well known types.
 */
BaseSellInvestmentTransaction.prototype.getSubAccountSecurityEnum = function() {
  return SubAccountType.fromOfx(this.getSubAccountSecurity());
};


/**
 * Gets the sub account type that the money went to  (e.g. CASH, MARGIN, SHORT, OTHER).
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {String} the sub account fund
 */
BaseSellInvestmentTransaction.prototype.getSubAccountFund = function() {
  return this.getSellInvestment().getSubAccountFund();
};


/**
 * Gets the result of getSubAccountFund as one of the well-known types.
 *
 * @return {SubAccountType} the type of null if it wasn't one of the well known types.
 */
BaseSellInvestmentTransaction.prototype.getSubAccountFundEnum = function() {
  return SubAccountType.fromOfx(this.getSubAccountFund());
};


/**
 * Gets the loan id if this transaction was due to a loan or loan repayment on a 401k. This is an
 * optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {String} the loan id
 */
BaseSellInvestmentTransaction.prototype.getLoadId = function() {
  return this.getSellInvestment().getLoanId();
};


/**
 * Gets the state withholding for the sale. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the state withholding
 */
BaseSellInvestmentTransaction.prototype.getStateWithholding = function() {
  return this.getSellInvestment().getStateWithholding();
};


/**
 * Gets the penalty for the sale. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the state withholding
 */
BaseSellInvestmentTransaction.prototype.getPenalty = function() {
  return this.getSellInvestment().getPenalty();
};


/**
 * Gets the 401K source for the sale. Should be one of "PRETAX", "AFTERTAX", "MATCH",
 * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
 * according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {String} the 401k source
 */
BaseSellInvestmentTransaction.prototype.get401kSource = function() {
  return this.getSellInvestment().get401kSource();
};


/**
 * Gets the 401k source as one of the well-known types.
 *
 * @return {Inv401KSource} the 401k source or null if its not one of the well-known types
 */
BaseSellInvestmentTransaction.prototype.get401kSourceEnum = function() {
  return Inv401KSource.fromOfx(this.get401kSource());
};




module.exports = BaseSellInvestmentTransaction;

},{"../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../accounts/SubAccountType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/accounts/SubAccountType.js","../positions/Inv401KSource":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/Inv401KSource.js","./BaseInvestmentTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BaseInvestmentTransaction.js","./SellInvestmentTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/SellInvestmentTransaction.js","./TransactionWithSecurity":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/TransactionWithSecurity.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BuyDebtTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var Aggregate = require("../../../../meta/Aggregate");
var Element = require("../../../../meta/Element");
var BaseBuyInvestmentTransaction = require("./BaseBuyInvestmentTransaction");
var TransactionType = require("./TransactionType");

/**
 * Transaction for buying debt (i.e. bonds, CDs, etc.,).
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @class
 * @augments BaseBuyInvestmentTransaction
 */
function BuyDebtTransaction () {
  BaseBuyInvestmentTransaction.call(this, TransactionType.BUY_DEBT);

  /**
   * @name BuyDebtTransaction#accruedInterest
   * @type Double
   * @access private
   */
  this.accruedInterest = null;
}

inherit(BuyDebtTransaction, "extends", BaseBuyInvestmentTransaction);


Aggregate.add("BUYDEBT", BuyDebtTransaction);




/**
 * Gets the amount of accrued interest on the debt. This is an optional field according to the
 * OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @return {Double} the amount of accrued interest
 */
BuyDebtTransaction.prototype.getAccruedInterest = function() {
  return this.accruedInterest;
};
Element.add(BuyDebtTransaction, {name: "ACCRDINT", order: 20, attributeType: Number, readMethod: "getAccruedInterest", writeMethod: "setAccruedInterest"});


/**
 * Sets the amount of accrued interest on the debt. This is an optional field according to the
 * OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @param {Double} accruedInterest the amount of accrued interest
 */
BuyDebtTransaction.prototype.setAccruedInterest = function(accruedInterest) {
  this.accruedInterest = accruedInterest;
};




module.exports = BuyDebtTransaction;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","./BaseBuyInvestmentTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BaseBuyInvestmentTransaction.js","./TransactionType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/TransactionType.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BuyInvestmentTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var SubAccountType = require("../accounts/SubAccountType");
var Aggregate = require("../../../../meta/Aggregate");
var ChildAggregate = require("../../../../meta/ChildAggregate");
var Element = require("../../../../meta/Element");
var SecurityId = require("../../seclist/SecurityId");
var OriginalCurrency = require("./OriginalCurrency");
var InvestmentTransaction = require("./InvestmentTransaction");

/**
 * Buy investment transaction aggregate ("INVBUY").
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @class
 */
function BuyInvestmentTransaction () {

  /**
   * @name BuyInvestmentTransaction#investmentTransaction
   * @type InvestmentTransaction
   * @access private
   */
  this.investmentTransaction = null;

  /**
   * @name BuyInvestmentTransaction#securityId
   * @type SecurityId
   * @access private
   */
  this.securityId = null;

  /**
   * @name BuyInvestmentTransaction#units
   * @type Double
   * @access private
   */
  this.units = null;

  /**
   * @name BuyInvestmentTransaction#unitPrice
   * @type Double
   * @access private
   */
  this.unitPrice = null;

  /**
   * @name BuyInvestmentTransaction#markup
   * @type Double
   * @access private
   */
  this.markup = null;

  /**
   * @name BuyInvestmentTransaction#commission
   * @type Double
   * @access private
   */
  this.commission = null;

  /**
   * @name BuyInvestmentTransaction#taxes
   * @type Double
   * @access private
   */
  this.taxes = null;

  /**
   * @name BuyInvestmentTransaction#fees
   * @type Double
   * @access private
   */
  this.fees = null;

  /**
   * @name BuyInvestmentTransaction#load
   * @type Double
   * @access private
   */
  this.load = null;

  /**
   * @name BuyInvestmentTransaction#total
   * @type Double
   * @access private
   */
  this.total = null;

  /**
   * @name BuyInvestmentTransaction#currencyCode
   * @type String
   * @access private
   */
  this.currencyCode = null;

  /**
   * @name BuyInvestmentTransaction#originalCurrencyInfo
   * @type OriginalCurrency
   * @access private
   */
  this.originalCurrencyInfo = null;

  /**
   * @name BuyInvestmentTransaction#subAccountSecurity
   * @type String
   * @access private
   */
  this.subAccountSecurity = null;

  /**
   * @name BuyInvestmentTransaction#subAccountFund
   * @type String
   * @access private
   */
  this.subAccountFund = null;
}



Aggregate.add("INVBUY", BuyInvestmentTransaction);


/**
 * Gets the investment transaction child aggregate.
 *
 * @return {InvestmentTransaction} the investment transaction child aggregate
 */
BuyInvestmentTransaction.prototype.getInvestmentTransaction = function() {
  return this.investmentTransaction;
};
ChildAggregate.add(BuyInvestmentTransaction, {order: 10, attributeType: InvestmentTransaction, readMethod: "getInvestmentTransaction", writeMethod: "setInvestmentTransaction"});


/**
 * Sets the investment transaction child aggregate.
 *
 * @param {InvestmentTransaction} investmentTransaction the investment transaction child aggregate
 */
BuyInvestmentTransaction.prototype.setInvestmentTransaction = function(investmentTransaction) {
  this.investmentTransaction = investmentTransaction;
};


/**
 * Gets the id of the security that was bought. This is a required field according to the OFX
 * spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {SecurityId} the security id of the security that was bought
 */
BuyInvestmentTransaction.prototype.getSecurityId = function() {
  return this.securityId;
};
ChildAggregate.add(BuyInvestmentTransaction, {required: true, order: 20, attributeType: SecurityId, readMethod: "getSecurityId", writeMethod: "setSecurityId"});


/**
 * Sets the id of the security that was bought. This is a required field according to the OFX
 * spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {SecurityId} securityId the security id of the security that was bought
 */
BuyInvestmentTransaction.prototype.setSecurityId = function(securityId) {
  this.securityId = securityId;
};


/**
 * Gets the number of units of the security that was bought. For security-based actions other
 * than stock splits, this is the quantity bought. For stocks, mutual funds, and others, this
 * is the number of shares. For bonds, this is the face value. For options, this is the number of
 * contacts. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the number of units purchased.
 */
BuyInvestmentTransaction.prototype.getUnits = function() {
  return this.units;
};
Element.add(BuyInvestmentTransaction, {name: "UNITS", required: true, order: 30, attributeType: Number, readMethod: "getUnits", writeMethod: "setUnits"});


/**
 * Sets the number of units of the security that was bought. For security-based actions other
 * than stock splits, this is the quantity bought. For stocks, mutual funds, and others, this
 * is the number of shares. For bonds, this is the face value. For options, this is the number of
 * contacts. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {Double} units the number of units purchased.
 */
BuyInvestmentTransaction.prototype.setUnits = function(units) {
  this.units = units;
};


/**
 * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
 * share price. For bonds, this is the percentage of par. For options, this is the per share (not
 * per contact) price. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the per unit price
 */
BuyInvestmentTransaction.prototype.getUnitPrice = function() {
  return this.unitPrice;
};
Element.add(BuyInvestmentTransaction, {name: "UNITPRICE", required: true, order: 40, attributeType: Number, readMethod: "getUnitPrice", writeMethod: "setUnitPrice"});


/**
 * Sets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
 * share price. For bonds, this is the percentage of par. For options, this is the per share (not
 * per contact) price. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {Double} unitPrice the per unit price
 */
BuyInvestmentTransaction.prototype.setUnitPrice = function(unitPrice) {
  this.unitPrice = unitPrice;
};


/**
 * Gets the portion of the unit price that is attributed to the dealer markup. This is an
 * optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the per unit markeup price
 */
BuyInvestmentTransaction.prototype.getMarkup = function() {
  return this.markup;
};
Element.add(BuyInvestmentTransaction, {name: "MARKUP", order: 50, attributeType: Number, readMethod: "getMarkup", writeMethod: "setMarkup"});


/**
 * Sets the portion of the unit price that is attributed to the dealer markup. This is an
 * optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {Double} markup the per unit markeup price
 */
BuyInvestmentTransaction.prototype.setMarkup = function(markup) {
  this.markup = markup;
};


/**
 * Gets the transaction commission for the purchase. This is an optional field according to the
 * OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the transaction commision
 */
BuyInvestmentTransaction.prototype.getCommission = function() {
  return this.commission;
};
Element.add(BuyInvestmentTransaction, {name: "COMMISSION", order: 60, attributeType: Number, readMethod: "getCommission", writeMethod: "setCommission"});


/**
 * Sets the transaction commission for the purchase. This is an optional field according to the
 * OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {Double} commission the transaction commision
 */
BuyInvestmentTransaction.prototype.setCommission = function(commission) {
  this.commission = commission;
};


/**
 * Gets the taxes for the purchase. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the transaction taxes
 */
BuyInvestmentTransaction.prototype.getTaxes = function() {
  return this.taxes;
};
Element.add(BuyInvestmentTransaction, {name: "TAXES", order: 70, attributeType: Number, readMethod: "getTaxes", writeMethod: "setTaxes"});


/**
 * Sets the taxes for the purchase. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {Double} taxes the transaction taxes
 */
BuyInvestmentTransaction.prototype.setTaxes = function(taxes) {
  this.taxes = taxes;
};


/**
 * Gets the fees for the purchase. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the transaction fees
 */
BuyInvestmentTransaction.prototype.getFees = function() {
  return this.fees;
};
Element.add(BuyInvestmentTransaction, {name: "FEES", order: 80, attributeType: Number, readMethod: "getFees", writeMethod: "setFees"});


/**
 * Sets the fees for the purchase. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {Double} fees the transaction fees
 */
BuyInvestmentTransaction.prototype.setFees = function(fees) {
  this.fees = fees;
};


/**
 * Gets the load for the purchase. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the load
 */
BuyInvestmentTransaction.prototype.getLoad = function() {
  return this.load;
};
Element.add(BuyInvestmentTransaction, {name: "LOAD", order: 90, attributeType: Number, readMethod: "getLoad", writeMethod: "setLoad"});


/**
 * Sets the load for the purchase. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {Double} load the load
 */
BuyInvestmentTransaction.prototype.setLoad = function(load) {
  this.load = load;
};


/**
 * Gets the total for the purchase. Should be equal to
 * (units * (unitPrice + markup)) + (commision + fees + taxes) according to the OFX
 * spec. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the total
 */
BuyInvestmentTransaction.prototype.getTotal = function() {
  return this.total;
};
Element.add(BuyInvestmentTransaction, {name: "TOTAL", required: true, order: 100, attributeType: Number, readMethod: "getTotal", writeMethod: "setTotal"});


/**
 * Sets the total for the purchase. Should be equal to
 * (units * (unitPrice + markup)) + (commision + fees + taxes) according to the OFX
 * spec. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {Double} total the total
 */
BuyInvestmentTransaction.prototype.setTotal = function(total) {
  this.total = total;
};


/**
 * Gets the currency code for the transaction. Only one of currency code or original currency
 * info should be set according to the OFX spec. If neither are set, means the default currency.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {String} the currency code for the transaction.
 */
BuyInvestmentTransaction.prototype.getCurrencyCode = function() {
  return this.currencyCode;
};
Element.add(BuyInvestmentTransaction, {name: "CURRENCY", order: 110, attributeType: String, readMethod: "getCurrencyCode", writeMethod: "setCurrencyCode"});


/**
 * Sets the currency code for the transaction. Only one of currency code or original currency
 * info may be set according to the OFX spec. If neither are set, means the default currency.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {String} currencyCode the currency code for the transaction.
 */
BuyInvestmentTransaction.prototype.setCurrencyCode = function(currencyCode) {
  this.currencyCode = currencyCode;
  this.originalCurrencyInfo = null;
};


/**
 * Gets the original currency info for the transaction.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {OriginalCurrency} the original currency info for the transaction
 */
BuyInvestmentTransaction.prototype.getOriginalCurrencyInfo = function() {
  return this.originalCurrencyInfo;
};
ChildAggregate.add(BuyInvestmentTransaction, {order: 120, attributeType: OriginalCurrency, readMethod: "getOriginalCurrencyInfo", writeMethod: "setOriginalCurrencyInfo"});


/**
 * Sets the original currency info for the transaction
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {OriginalCurrency} originalCurrencyInfo the original currency info for the transaction
 */
BuyInvestmentTransaction.prototype.setOriginalCurrencyInfo = function(originalCurrencyInfo) {
  this.originalCurrencyInfo = originalCurrencyInfo;
  this.currencyCode = null;
};


 /**
 * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {String} the sub account type
 */
BuyInvestmentTransaction.prototype.getSubAccountSecurity = function() {
  return this.subAccountSecurity;
};
Element.add(BuyInvestmentTransaction, {name: "SUBACCTSEC", order: 130, attributeType: String, readMethod: "getSubAccountSecurity", writeMethod: "setSubAccountSecurity"});


/**
  * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
  * @see "Section 13.9.2.4.3, OFX Spec"
  *
  * @param {String} subAccountSecurity the sub account type
  */
BuyInvestmentTransaction.prototype.setSubAccountSecurity = function(subAccountSecurity) {
  this.subAccountSecurity = subAccountSecurity;
};


/**
 * Gets the result of getSubAccountSecurity as one of the well-known types.
 *
 * @return {SubAccountType} the type of null if it wasn't one of the well known types.
 */
BuyInvestmentTransaction.prototype.getSubAccountSecurityEnum = function() {
  return SubAccountType.fromOfx(this.getSubAccountSecurity());
};


/**
 * Gets the sub account type that the money came from. (e.g. CASH, MARGIN, SHORT, OTHER).
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {String} the sub account fund
 */
BuyInvestmentTransaction.prototype.getSubAccountFund = function() {
  return this.subAccountFund;
};
Element.add(BuyInvestmentTransaction, {name: "SUBACCTFUND", order: 140, attributeType: String, readMethod: "getSubAccountFund", writeMethod: "setSubAccountFund"});


/**
 * Sets the sub account type that the money came from. (e.g. CASH, MARGIN, SHORT, OTHER).
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {String} subAcctFund the sub account fund
 */
BuyInvestmentTransaction.prototype.setSubAccountFund = function(subAcctFund) {
  this.subAccountFund = subAcctFund;
};


/**
 * Gets the result of getSubAccountFund as one of the well-known types.
 *
 * @return {SubAccountType} the type or null if it wasn't one of the well known types.
 */
BuyInvestmentTransaction.prototype.getSubAccountFundEnum = function() {
  return SubAccountType.fromOfx(this.getSubAccountFund());
};




module.exports = BuyInvestmentTransaction;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../seclist/SecurityId":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityId.js","../accounts/SubAccountType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/accounts/SubAccountType.js","./InvestmentTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/InvestmentTransaction.js","./OriginalCurrency":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/OriginalCurrency.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BuyMutualFundTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var Aggregate = require("../../../../meta/Aggregate");
var Element = require("../../../../meta/Element");
var BaseBuyInvestmentTransaction = require("./BaseBuyInvestmentTransaction");
var TransactionType = require("./TransactionType");
var BuyType = require("./BuyType");

/**
 * Transaction for buying mutual funds.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @class
 * @augments BaseBuyInvestmentTransaction
 */
function BuyMutualFundTransaction () {
  BaseBuyInvestmentTransaction.call(this, TransactionType.BUY_MUTUAL_FUND);

  /**
   * @name BuyMutualFundTransaction#buyType
   * @type String
   * @access private
   */
  this.buyType = null;

  /**
   * @name BuyMutualFundTransaction#relatedTransactionId
   * @type String
   * @access private
   */
  this.relatedTransactionId = null;
}

inherit(BuyMutualFundTransaction, "extends", BaseBuyInvestmentTransaction);


Aggregate.add("BUYMF", BuyMutualFundTransaction);



/**
 * Gets the type of purchase (i.e. "BUY" or "BUYTOCOVER"). This is a required field according to
 * the OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @return {String} the buy type
 */
BuyMutualFundTransaction.prototype.getBuyType = function() {
  return this.buyType;
};
Element.add(BuyMutualFundTransaction, {name: "BUYTYPE", required: true, order: 20, attributeType: String, readMethod: "getBuyType", writeMethod: "setBuyType"});


/**
 * Sets the type of purchase (i.e. "BUY" or "BUYTOCOVER"). This is a required field according to
 * the OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @param {String} buyType the buy type
 */
BuyMutualFundTransaction.prototype.setBuyType = function(buyType) {
  this.buyType = buyType;
};


/**
 * Gets the buy type as one of the well-known types.
 *
 * @return {BuyType} the type of purchase or null if it's not known
 */
BuyMutualFundTransaction.prototype.getBuyTypeEnum = function() {
  return BuyType.fromOfx(this.buyType);
};


/**
 * Gets any related transaction id for a mutual fund purchase (e.g. for a mutual fund exchange).
 * This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @return {String} the related transaction id
 */
BuyMutualFundTransaction.prototype.getRelatedTransactionId = function() {
  return this.relatedTransactionId;
};
Element.add(BuyMutualFundTransaction, {name: "RELFITID", order: 30, attributeType: String, readMethod: "getRelatedTransactionId", writeMethod: "setRelatedTransactionId"});


/**
 * Sets any related transaction id for a mutual fund purchase (e.g. for a mutual fund exchange).
 * This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @param {String} relatedTransactionId the related transaction id
 */
BuyMutualFundTransaction.prototype.setRelatedTransactionId = function(relatedTransactionId) {
  this.relatedTransactionId = relatedTransactionId;
};




module.exports = BuyMutualFundTransaction;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","./BaseBuyInvestmentTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BaseBuyInvestmentTransaction.js","./BuyType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BuyType.js","./TransactionType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/TransactionType.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BuyOptionTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var Aggregate = require("../../../../meta/Aggregate");
var Element = require("../../../../meta/Element");
var TransactionType = require("./TransactionType");
var BaseBuyInvestmentTransaction = require("./BaseBuyInvestmentTransaction");
var OptionBuyType = require("./OptionBuyType");

/**
 * Transaction for buying options.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @class
 * @augments BaseBuyInvestmentTransaction
 */
function BuyOptionTransaction () {
  BaseBuyInvestmentTransaction.call(this, TransactionType.BUY_OPTION);

  /**
   * @name BuyOptionTransaction#optionBuyType
   * @type String
   * @access private
   */
  this.optionBuyType = null;

  /**
   * @name BuyOptionTransaction#sharesPerContact
   * @type Integer
   * @access private
   */
  this.sharesPerContact = null;
}

inherit(BuyOptionTransaction, "extends", BaseBuyInvestmentTransaction);


Aggregate.add("BUYOPT", BuyOptionTransaction);



/**
 * Gets the type of option purchase (i.e. "BUYTOOPEN" or "BUYTOCLOSE"). This is a required field
 * according to the OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @return {String} the option buy type
 */
BuyOptionTransaction.prototype.getOptionBuyType = function() {
  return this.optionBuyType;
};
Element.add(BuyOptionTransaction, {name: "OPTBUYTYPE", required: true, order: 20, attributeType: String, readMethod: "getOptionBuyType", writeMethod: "setOptionBuyType"});


/**
 * Sets the type of option purchase (i.e. "BUYTOOPEN" or "BUYTOCLOSE"). This is a required field
 * according to the OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @param {String} optionBuyType the option buy type
 */
BuyOptionTransaction.prototype.setOptionBuyType = function(optionBuyType) {
  this.optionBuyType = optionBuyType;
};


/**
 * Gets the option buy type as one of the well-known types.
 *
 * @return {OptionBuyType} the type of purchase or null if it's not known
 */
BuyOptionTransaction.prototype.getOptionBuyTypeEnum = function() {
  return OptionBuyType.fromOfx(this.optionBuyType);
};


/**
 * Gets the number of shares per contact. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @return {Integer} the number of shares per contact
 */
BuyOptionTransaction.prototype.getSharesPerContract = function() {
  return this.sharesPerContact;
};
Element.add(BuyOptionTransaction, {name: "SHPERCTRCT", required: true, order: 30, attributeType: Number, readMethod: "getSharesPerContract", writeMethod: "setSharesPerContract"});


/**
 * Sets the number of shares per contact. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @param {Integer} sharesPerContact the number of shares per contact
 */
BuyOptionTransaction.prototype.setSharesPerContract = function(sharesPerContact) {
  this.sharesPerContact = sharesPerContact;
};




module.exports = BuyOptionTransaction;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","./BaseBuyInvestmentTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BaseBuyInvestmentTransaction.js","./OptionBuyType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/OptionBuyType.js","./TransactionType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/TransactionType.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BuyOtherTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var Aggregate = require("../../../../meta/Aggregate");
var BaseBuyInvestmentTransaction = require("./BaseBuyInvestmentTransaction");
var TransactionType = require("./TransactionType");

/**
 * Transaction for buying other types of securities.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @class
 * @augments BaseBuyInvestmentTransaction
 */
function BuyOtherTransaction () {
  BaseBuyInvestmentTransaction.call(this, TransactionType.BUY_OTHER);
}

inherit(BuyOtherTransaction, "extends", BaseBuyInvestmentTransaction);


Aggregate.add("BUYOTHER", BuyOtherTransaction);



module.exports = BuyOtherTransaction;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","./BaseBuyInvestmentTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BaseBuyInvestmentTransaction.js","./TransactionType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/TransactionType.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BuyStockTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var Aggregate = require("../../../../meta/Aggregate");
var Element = require("../../../../meta/Element");
var TransactionType = require("./TransactionType");
var BaseBuyInvestmentTransaction = require("./BaseBuyInvestmentTransaction");
var BuyType = require("./BuyType");

/**
 * Transaction for buying stock.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @class
 * @augments BaseBuyInvestmentTransaction
 */
function BuyStockTransaction () {
  BaseBuyInvestmentTransaction.call(this, TransactionType.BUY_STOCK);

  /**
   * @name BuyStockTransaction#buyType
   * @type String
   * @access private
   */
  this.buyType = null;
}

inherit(BuyStockTransaction, "extends", BaseBuyInvestmentTransaction);


Aggregate.add("BUYSTOCK", BuyStockTransaction);



/**
 * Gets the type of stock purchase (i.e. "BUY" or "BUYTOCOVER"). This is a required field
 * according to the OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @return {String} the buy type
 */
BuyStockTransaction.prototype.getBuyType = function() {
  return this.buyType;
};
Element.add(BuyStockTransaction, {name: "BUYTYPE", required: true, order: 20, attributeType: String, readMethod: "getBuyType", writeMethod: "setBuyType"});


/**
 * Sets the type of stock purchase (i.e. "BUY" or "BUYTOCOVER"). This is a required field
 * according to the OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @param {String} buyType the buy type
 */
BuyStockTransaction.prototype.setBuyType = function(buyType) {
  this.buyType = buyType;
};


/**
 * Gets the buy type as one of the well-known types.
 *
 * @return {BuyType} the type of purchase or null if it's not well known
 */
BuyStockTransaction.prototype.getBuyTypeEnum = function() {
  return BuyType.fromOfx(this.buyType);
};




module.exports = BuyStockTransaction;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","./BaseBuyInvestmentTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BaseBuyInvestmentTransaction.js","./BuyType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BuyType.js","./TransactionType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/TransactionType.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BuyType.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * Type of purchase for stocks and mutual funds.
 * @see "Section 13.9.2.4.2, OFX Spec"
 *
 * @enum
 */
var BuyType = {
  BUY: 0,
  BUY_TO_COVER: 1,

  fromOfx: function(/*String*/ ofxVal) {
    if ("BUY".equals(ofxVal)) {
      return BuyType.BUY;
    } else if ("BUYTOCOVER".equals(ofxVal)) {
      return BuyType.BUY_TO_COVER;
    } else {
      return null;
    }
  }
};


module.exports = BuyType;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/CloseOptionAction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * Type of action for closing a stock option.
 * @see "Section 13.9.2.4.2, OFX Spec"
 *
 * @enum
 */
var CloseOptionAction = {
  EXERCISE: 0,
  ASSIGN: 1,
  EXPIRE: 2,

  fromOfx: function(/*String*/ ofxVal) {
    if ("EXERCISE".equals(ofxVal)) {
      return CloseOptionAction.EXERCISE;
    } else if ("ASSIGN".equals(ofxVal)) {
      return CloseOptionAction.ASSIGN;
    } else if ("EXPIRE".equals(ofxVal)) {
      return CloseOptionAction.EXPIRE;
    } else {
      return null;
    }
  }
};


module.exports = CloseOptionAction;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/CloseOptionTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var SubAccountType = require("../accounts/SubAccountType");
var Aggregate = require("../../../../meta/Aggregate");
var ChildAggregate = require("../../../../meta/ChildAggregate");
var Element = require("../../../../meta/Element");
var BaseOtherInvestmentTransaction = require("./BaseOtherInvestmentTransaction");
var TransactionWithSecurity = require("./TransactionWithSecurity");
var TransactionType = require("./TransactionType");
var CloseOptionAction = require("./CloseOptionAction");
var SecurityId = require("../../seclist/SecurityId");


/**
 * Transaction for closing an option position due to expiration, exercise, or assignment.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @class
 * @augments BaseOtherInvestmentTransaction
 * @augments TransactionWithSecurity
 */
function CloseOptionTransaction () {
  BaseOtherInvestmentTransaction.call(this, TransactionType.CLOSE_OPTION);
  
  /**
   * @name CloseOptionTransaction#securityId
   * @type SecurityId
   * @access private
   */
  this.securityId = null;

  /**
   * @name CloseOptionTransaction#optionAction
   * @type String
   * @access private
   */
  this.optionAction = null;

  /**
   * @name CloseOptionTransaction#units
   * @type Double
   * @access private
   */
  this.units = null;

  /**
   * @name CloseOptionTransaction#sharesPerContact
   * @type Integer
   * @access private
   */
  this.sharesPerContact = null;

  /**
   * @name CloseOptionTransaction#subAccountSecurity
   * @type String
   * @access private
   */
  this.subAccountSecurity = null;

  /**
   * @name CloseOptionTransaction#relatedTransactionId
   * @type String
   * @access private
   */
  this.relatedTransactionId = null;

  /**
   * @name CloseOptionTransaction#gain
   * @type Double
   * @access private
   */
  this.gain = null;
}

inherit(CloseOptionTransaction, "extends", BaseOtherInvestmentTransaction);
inherit(CloseOptionTransaction, "implements", TransactionWithSecurity);


Aggregate.add("CLOSUREOPT", CloseOptionTransaction);




/**
 * Gets the security id of the option.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @return {SecurityId} the security id of the option
 */
CloseOptionTransaction.prototype.getSecurityId = function() {
  return this.securityId;
};
ChildAggregate.add(CloseOptionTransaction, {order: 20, attributeType: SecurityId, readMethod: "getSecurityId", writeMethod: "setSecurityId"});


/**
 * Sets the security id of the option.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @param {SecurityId} securityId the security id of the option
 */
CloseOptionTransaction.prototype.setSecurityId = function(securityId) {
  this.securityId = securityId;
};


/**
 * Gets the action being performed (i.e. "EXERCISE", "ASSIGN", "EXPIRE" This is a required field
 * according to the OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @return {String} the option action
 */
CloseOptionTransaction.prototype.getOptionAction = function() {
  return this.optionAction;
};
Element.add(CloseOptionTransaction, {name: "OPTACTION", required: true, order: 30, attributeType: String, readMethod: "getOptionAction", writeMethod: "setOptionAction"});


/**
 * Sets the action being performed (i.e. "EXERCISE", "ASSIGN", "EXPIRE" This is a required field
 * according to the OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @param {String} optionAction the option action
 */
CloseOptionTransaction.prototype.setOptionAction = function(optionAction) {
  this.optionAction = optionAction;
};


/**
 * Gets the action as one of the well-known types.
 *
 * @return {CloseOptionAction} the type of close or null if it's not a well-known type
 */
CloseOptionTransaction.prototype.getOptionActionEnum = function() {
  return CloseOptionAction.fromOfx(this.getOptionAction());
};


/**
 * Gets the number of units of the option that were closed. This is a required field according
 * to the OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @return {Double} the number of units closed
 */
CloseOptionTransaction.prototype.getUnits = function() {
  return this.units;
};
Element.add(CloseOptionTransaction, {name: "UNITS", required: true, order: 40, attributeType: Number, readMethod: "getUnits", writeMethod: "setUnits"});


/**
 * Sets the number of units of the option that were closed. This is a required field according
 * to the OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @param {Double} units the number of units closed
 */
CloseOptionTransaction.prototype.setUnits = function(units) {
  this.units = units;
};


/**
 * Gets the number of shares per contact. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @return {Integer} the number of shares per contact
 */
CloseOptionTransaction.prototype.getSharesPerContact = function() {
  return this.sharesPerContact;
};
Element.add(CloseOptionTransaction, {name: "SHPERCTRCT", required: true, order: 50, attributeType: Number, readMethod: "getSharesPerContact", writeMethod: "setSharesPerContact"});


/**
 * Sets the number of shares per contact. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @param {Integer} sharesPerContact the number of shares per contact
 */
CloseOptionTransaction.prototype.setSharesPerContact = function(sharesPerContact) {
  this.sharesPerContact = sharesPerContact;
};


/**
 * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @return {String} the sub account type
 */
CloseOptionTransaction.prototype.getSubAccountSecurity = function() {
  return this.subAccountSecurity;
};
Element.add(CloseOptionTransaction, {name: "SUBACCTSEC", required: true, order: 60, attributeType: String, readMethod: "getSubAccountSecurity", writeMethod: "setSubAccountSecurity"});


/**
 * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @param {String} subAccountSecurity the sub account type
 */
CloseOptionTransaction.prototype.setSubAccountSecurity = function(subAccountSecurity) {
  this.subAccountSecurity = subAccountSecurity;
};


/**
 * Gets the result of getSubAccountFund as one of the well-known types.
 *
 * @return {SubAccountType} the type of null if it wasn't one of the well known types
 */
CloseOptionTransaction.prototype.getSubAccountSecurityEnum = function() {
  return SubAccountType.fromOfx(this.getSubAccountSecurity());
};


/**
 * Gets the related transaction id for the related buy or sell corresponding to the
 * EXERCISE or ASSIGN action. This is a required field according to the OFX spec if the
 * action or EXERCISE or ASSIGN.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @return {String} the related transaction id
 */
CloseOptionTransaction.prototype.getRelatedTransactionId = function() {
  return this.relatedTransactionId;
};
Element.add(CloseOptionTransaction, {name: "RELFITID", order: 70, attributeType: String, readMethod: "getRelatedTransactionId", writeMethod: "setRelatedTransactionId"});


/**
 * Sets the related transaction id for the related buy or sell corresponding to the
 * EXERCISE or ASSIGN action. This is a required field according to the OFX spec if the
 * action or EXERCISE or ASSIGN.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @param {String} relatedTransactionId the related transaction id
 */
CloseOptionTransaction.prototype.setRelatedTransactionId = function(relatedTransactionId) {
  this.relatedTransactionId = relatedTransactionId;
};


/**
 * Gets the gain related to the transaction. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @return {Double} the gain related to the transaction
 */
CloseOptionTransaction.prototype.getGain = function() {
  return this.gain;
};
Element.add(CloseOptionTransaction, {name: "GAIN", order: 80, attributeType: Number, readMethod: "getGain", writeMethod: "setGain"});


/**
 * Sets the gain related to the transaction. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @param {Double} gain the gain related to the transaction
 */
CloseOptionTransaction.prototype.setGain = function(gain) {
  this.gain = gain;
};




module.exports = CloseOptionTransaction;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../../seclist/SecurityId":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityId.js","../accounts/SubAccountType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/accounts/SubAccountType.js","./BaseOtherInvestmentTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BaseOtherInvestmentTransaction.js","./CloseOptionAction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/CloseOptionAction.js","./TransactionType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/TransactionType.js","./TransactionWithSecurity":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/TransactionWithSecurity.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/IncomeTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var SubAccountType = require("../accounts/SubAccountType");
var Inv401KSource = require("../positions/Inv401KSource");
var Aggregate = require("../../../../meta/Aggregate");
var ChildAggregate = require("../../../../meta/ChildAggregate");
var Element = require("../../../../meta/Element");
var BaseOtherInvestmentTransaction = require("./BaseOtherInvestmentTransaction");
var TransactionWithSecurity = require("./TransactionWithSecurity");
var TransactionType = require("./TransactionType");
var IncomeType = require("./IncomeType");
var SecurityId = require("../../seclist/SecurityId");
var OriginalCurrency = require("./OriginalCurrency");

/**
 * Transaction for investment income that is realized as cash into the investment account.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @class
 * @augments BaseOtherInvestmentTransaction
 * @augments TransactionWithSecurity
 */
function IncomeTransaction () {
  BaseOtherInvestmentTransaction.call(this, TransactionType.INCOME);

  /**
   * @name IncomeTransaction#securityId
   * @type SecurityId
   * @access private
   */
  this.securityId = null;

  /**
   * @name IncomeTransaction#incomeType
   * @type String
   * @access private
   */
  this.incomeType = null;

  /**
   * @name IncomeTransaction#total
   * @type Double
   * @access private
   */
  this.total = null;

  /**
   * @name IncomeTransaction#subAccountSecurity
   * @type String
   * @access private
   */
  this.subAccountSecurity = null;

  /**
   * @name IncomeTransaction#subAccountFund
   * @type String
   * @access private
   */
  this.subAccountFund = null;

  /**
   * @name IncomeTransaction#taxExempt
   * @type Boolean
   * @access private
   */
  this.taxExempt = null;

  /**
   * @name IncomeTransaction#withholding
   * @type Double
   * @access private
   */
  this.withholding = null;

  /**
   * @name IncomeTransaction#currencyCode
   * @type String
   * @access private
   */
  this.currencyCode = null;

  /**
   * @name IncomeTransaction#originalCurrencyInfo
   * @type OriginalCurrency
   * @access private
   */
  this.originalCurrencyInfo = null;

  /**
   * @name IncomeTransaction#inv401kSource
   * @type String
   * @access private
   */
  this.inv401kSource = null;
}

inherit(IncomeTransaction, "extends", BaseOtherInvestmentTransaction);
inherit(IncomeTransaction, "implements", TransactionWithSecurity);


Aggregate.add("INCOME", IncomeTransaction);



/**
 * Gets the id of the security that the income was for. This is a required field according to the
 * OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @return {SecurityId} the security id of the security that the income was for
 */
IncomeTransaction.prototype.getSecurityId = function() {
  return this.securityId;
};
ChildAggregate.add(IncomeTransaction, {required: true, order: 20, attributeType: SecurityId, readMethod: "getSecurityId", writeMethod: "setSecurityId"});


/**
 * Sets the id of the security that the income was for. This is a required field according to the
 * OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @param {SecurityId} securityId the security id of the security that the income was for
 */
IncomeTransaction.prototype.setSecurityId = function(securityId) {
  this.securityId = securityId;
};


/**
 * Gets the type of income. One of "CGLONG" (long term capital gains), "CGSHORT" (short term
 * capital gains), "DIV" (dividend), INTEREST, or MISC>
 * @see "Section 13.9.2.4.4, OFX Spec" This is a required field according to the OFX spec.
 *
 * @return {String} the type of income
 */
IncomeTransaction.prototype.getIncomeType = function() {
  return this.incomeType;
};
Element.add(IncomeTransaction, {name: "INCOMETYPE", required: true, order: 30, attributeType: String, readMethod: "getIncomeType", writeMethod: "setIncomeType"});


/**
 * Sets the type of income. One of "CGLONG" (long term capital gains), "CGSHORT" (short term
 * capital gains), "DIV" (dividend), INTEREST, or MISC>
 * @see "Section 13.9.2.4.4, OFX Spec" This is a required field according to the OFX spec.
 *
 * @param {String} incomeType the type of income
 */
IncomeTransaction.prototype.setIncomeType = function(incomeType) {
  this.incomeType = incomeType;
};


/**
 * Gets the income type as one of the well-known types.
 *
 * @return {IncomeType} the income type or null if it's not well known
 */
IncomeTransaction.prototype.getIncomeTypeEnum = function() {
  return IncomeType.fromOfx(this.getIncomeType());
};


/**
 * Gets the total income received.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @return {Double} the total
 */
IncomeTransaction.prototype.getTotal = function() {
  return this.total;
};
Element.add(IncomeTransaction, {name: "TOTAL", required: true, order: 40, attributeType: Number, readMethod: "getTotal", writeMethod: "setTotal"});


/**
 * Sets the total income received.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @param {Double} total the total
 */
IncomeTransaction.prototype.setTotal = function(total) {
  this.total = total;
};


/**
 * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {String} the sub account type
 */
IncomeTransaction.prototype.getSubAccountSecurity = function() {
  return this.subAccountSecurity;
};
Element.add(IncomeTransaction, {name: "SUBACCTSEC", order: 50, attributeType: String, readMethod: "getSubAccountSecurity", writeMethod: "setSubAccountSecurity"});


/**
 * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {String} subAcctSec the sub account type
 */
IncomeTransaction.prototype.setSubAccountSecurity = function(subAcctSec) {
  this.subAccountSecurity = subAcctSec;
};


/**
 * Gets the result of getSubAccountSecurity as one of the well-known types.
 *
 * @return {SubAccountType} the type of null if it wasn't one of the well known types.
 */
IncomeTransaction.prototype.getSubAccountSecurityEnum = function() {
  return SubAccountType.fromOfx(this.getSubAccountSecurity());
};


/**
 * Gets the sub account type that the security is from (e.g. CASH, MARGIN, SHORT, OTHER).
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {String} the sub account fund for the transaction
 */
IncomeTransaction.prototype.getSubAccountFund = function() {
  return this.subAccountFund;
};
Element.add(IncomeTransaction, {name: "SUBACCTFUND", order: 60, attributeType: String, readMethod: "getSubAccountFund", writeMethod: "setSubAccountFund"});


/**
 * Sets the sub account type that the security is from (e.g. CASH, MARGIN, SHORT, OTHER).
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {String} subAcctFund the sub account fund for the transaction
 */
IncomeTransaction.prototype.setSubAccountFund = function(subAcctFund) {
  this.subAccountFund = subAcctFund;
};


/**
 * Gets the result of getSubAccountFund as one of the well-known types.
 *
 * @return {SubAccountType} the type of null if it wasn't one of the well known types
 */
IncomeTransaction.prototype.getSubAccountFundEnum = function() {
  return SubAccountType.fromOfx(this.getSubAccountFund());
};


/**
 * Gets whether the income was tax exempt. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Boolean} whether the transaction was tax exempt
 */
IncomeTransaction.prototype.getTaxExempt = function() {
  return this.taxExempt;
};
Element.add(IncomeTransaction, {name: "TAXEXEMPT", order: 70, attributeType: Boolean, readMethod: "getTaxExempt", writeMethod: "setTaxExempt"});


/**
 * Sets whether the income was tax exempt. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {Boolean} taxExempt whether the transaction was tax exempt
 */
IncomeTransaction.prototype.setTaxExempt = function(taxExempt) {
  this.taxExempt = taxExempt;
};


/**
 * Gets the withholding for the income. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the withholding
 */
IncomeTransaction.prototype.getWithholding = function() {
  return this.withholding;
};
Element.add(IncomeTransaction, {name: "WITHHOLDING", order: 80, attributeType: Number, readMethod: "getWithholding", writeMethod: "setWithholding"});


/**
 * Sets the withholding for the income. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {Double} withholding the withholding
 */
IncomeTransaction.prototype.setWithholding = function(withholding) {
  this.withholding = withholding;
};


/**
 * Gets the currency code for the transaction. Only one of currency code or original currency
 * info should be set according to the OFX spec. If neither are set, means the default currency.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {String} the currency code for the transaction
 */
IncomeTransaction.prototype.getCurrencyCode = function() {
  return this.currencyCode;
};
Element.add(IncomeTransaction, {name: "CURRENCY", order: 90, attributeType: String, readMethod: "getCurrencyCode", writeMethod: "setCurrencyCode"});


/**
 * Sets the currency code for the transaction. Only one of currency code or original currency
 * info should be set according to the OFX spec. If neither are set, means the default currency.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {String} currencyCode the currency code for the transaction
 */
IncomeTransaction.prototype.setCurrencyCode = function(currencyCode) {
  this.currencyCode = currencyCode;
  this.originalCurrencyInfo = null;
};


/**
 * Gets the original currency info for the transaction.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {OriginalCurrency} the currency info for the transaction
 */
IncomeTransaction.prototype.getOriginalCurrencyInfo = function() {
  return this.originalCurrencyInfo;
};
ChildAggregate.add(IncomeTransaction, {order: 120, attributeType: OriginalCurrency, readMethod: "getOriginalCurrencyInfo", writeMethod: "setOriginalCurrencyInfo"});


/**
 * Sets the original currency info for the transaction.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {OriginalCurrency} originalCurrencyInfo the currency info for the transaction
 */
IncomeTransaction.prototype.setOriginalCurrencyInfo = function(originalCurrencyInfo) {
  this.originalCurrencyInfo = originalCurrencyInfo;
  this.currencyCode = null;
};


/**
 * Gets the 401K source for the sale. Should be one of "PRETAX", "AFTERTAX", "MATCH",
 * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
 * according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {String} the state withholding
 */
IncomeTransaction.prototype.get401kSource = function() {
  return this.inv401kSource;
};
Element.add(IncomeTransaction, {name: "INV401KSOURCE", order: 110, attributeType: String, readMethod: "get401kSource", writeMethod: "set401kSource"});


/**
 * Sets the 401K source for the sale. Should be one of "PRETAX", "AFTERTAX", "MATCH",
 * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
 * according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {String} inv401kSource the state withholding
 */
IncomeTransaction.prototype.set401kSource = function(inv401kSource) {
  this.inv401kSource = inv401kSource;
};


/**
 * Gets the 401(k) source as one of the well-known types.
 *
 * @return {Inv401KSource} the type of close or null if it's not well known.
 */
IncomeTransaction.prototype.get401kSourceEnum = function() {
  return Inv401KSource.fromOfx(this.get401kSource());
};




module.exports = IncomeTransaction;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../../seclist/SecurityId":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityId.js","../accounts/SubAccountType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/accounts/SubAccountType.js","../positions/Inv401KSource":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/Inv401KSource.js","./BaseOtherInvestmentTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BaseOtherInvestmentTransaction.js","./IncomeType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/IncomeType.js","./OriginalCurrency":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/OriginalCurrency.js","./TransactionType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/TransactionType.js","./TransactionWithSecurity":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/TransactionWithSecurity.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/IncomeType.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * Type of income.
 * @see "Section 13.9.2.4.2, OFX Spec"
 *
 * @enum
 */
var IncomeType = {
  LONG_TERM_CAP_GAINS: 0,
  SHORT_TERM_CAP_GAINS: 1,
  DIVIDEND: 2,
  INTEREST: 3,
  MISC: 4,

  fromOfx: function(/*String*/ ofxVal) {
    if ("CGLONG".equals(ofxVal)) {
      return IncomeType.LONG_TERM_CAP_GAINS;
    } else if ("CGSHORT".equals(ofxVal)) {
      return IncomeType.SHORT_TERM_CAP_GAINS;
    } else if ("DIV".equals(ofxVal)) {
      return IncomeType.DIVIDEND;
    } else if ("INTEREST".equals(ofxVal)) {
      return IncomeType.INTEREST;
    } else if ("MISC".equals(ofxVal)) {
      return IncomeType.MISC;
    } else {
      return null;
    }
  }
};


module.exports = IncomeType;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/InvestmentBankTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var SubAccountType = require("../accounts/SubAccountType");
var Aggregate = require("../../../../meta/Aggregate");
var ChildAggregate = require("../../../../meta/ChildAggregate");
var Element = require("../../../../meta/Element");
var Transaction = require("../../common/Transaction");

/**
 * Bank transactions that are part of an investment account statement. Wraps a {@link Transaction}.
 * @see "Section 13.9.2.3, OFX Spec"
 *
 * @class
 */
function InvestmentBankTransaction () {

  /**
   * @name InvestmentBankTransaction#transaction
   * @type Transaction
   * @access private
   */
  this.transaction = null;

  /**
   * @name InvestmentBankTransaction#subAccountFund
   * @type String
   * @access private
   */
  this.subAccountFund = null;
}



Aggregate.add("INVBANKTRAN", InvestmentBankTransaction);


/**
 * Gets the wrapped transaction aggregate.
 * @return {Transaction} the wrapped transaction
 */
InvestmentBankTransaction.prototype.getTransaction = function() {
  return this.transaction;
};
ChildAggregate.add(InvestmentBankTransaction, {order: 10, attributeType: Transaction, readMethod: "getTransaction", writeMethod: "setTransaction"});


/**
 * Sets the wrapped transaction aggregate.
 * @param {Transaction} transaction the wrapped transaction
 */
InvestmentBankTransaction.prototype.setTransaction = function(transaction) {
  this.transaction = transaction;
};


/**
 * Gets the sub account type that the security is from (e.g. CASH, MARGIN, SHORT, OTHER).
 * @see "Section 13.9.2.4.2, OFX Spec"
 *
 * @return {String} the sub account fund for the transaction
 */
InvestmentBankTransaction.prototype.getSubAccountFund = function() {
  return this.subAccountFund;
};
Element.add(InvestmentBankTransaction, {name: "SUBACCTFUND", required: true, order: 20, attributeType: String, readMethod: "getSubAccountFund", writeMethod: "setSubAccountFund"});


/**
 * Sets the sub account type that the security is from (e.g. CASH, MARGIN, SHORT, OTHER).
 * @see "Section 13.9.2.4.2, OFX Spec"
 *
 * @param {String} subAccountFund the sub account fund for the transaction
 */
InvestmentBankTransaction.prototype.setSubAccountFund = function(subAccountFund) {
  this.subAccountFund = subAccountFund;
};


/**
 * Gets the result of getSubAccountFund as one of the well-known types.
 *
 * @return {SubAccountType} the type of null if it wasn't one of the well known types
 */
InvestmentBankTransaction.prototype.getSubAccountFundEnum = function() {
  return SubAccountType.fromOfx(this.getSubAccountFund());
};




module.exports = InvestmentBankTransaction;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../common/Transaction":"/Users/aolson/Developer/ofx4js/src/domain/data/common/Transaction.js","../accounts/SubAccountType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/accounts/SubAccountType.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/InvestmentExpenseTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var SubAccountType = require("../accounts/SubAccountType");
var Inv401KSource = require("../positions/Inv401KSource");
var Aggregate = require("../../../../meta/Aggregate");
var ChildAggregate = require("../../../../meta/ChildAggregate");
var Element = require("../../../../meta/Element");
var BaseOtherInvestmentTransaction = require("./BaseOtherInvestmentTransaction");
var TransactionType = require("./TransactionType");
var SecurityId = require("../../seclist/SecurityId");
var OriginalCurrency = require("./OriginalCurrency");

/**
 * Transaction for an investment expense
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @class
 * @augments BaseOtherInvestmentTransaction
 */
function InvestmentExpenseTransaction () {
  BaseOtherInvestmentTransaction.call(this, TransactionType.INVESTMENT_EXPENSE);

  /**
   * @name InvestmentExpenseTransaction#securityId
   * @type SecurityId
   * @access private
   */
  this.securityId = null;

  /**
   * @name InvestmentExpenseTransaction#total
   * @type Double
   * @access private
   */
  this.total = null;

  /**
   * @name InvestmentExpenseTransaction#subAccountSecurity
   * @type String
   * @access private
   */
  this.subAccountSecurity = null;

  /**
   * @name InvestmentExpenseTransaction#subAccountFund
   * @type String
   * @access private
   */
  this.subAccountFund = null;

  /**
   * @name InvestmentExpenseTransaction#currencyCode
   * @type String
   * @access private
   */
  this.currencyCode = null;

  /**
   * @name InvestmentExpenseTransaction#originalCurrencyInfo
   * @type OriginalCurrency
   * @access private
   */
  this.originalCurrencyInfo = null;

  /**
   * @name InvestmentExpenseTransaction#inv401kSource
   * @type String
   * @access private
   */
  this.inv401kSource = null;
}

inherit(InvestmentExpenseTransaction, "extends", BaseOtherInvestmentTransaction);


Aggregate.add("INVEXPENSE", InvestmentExpenseTransaction);



/**
 * Gets the id of the security for the expense. This is a required field according to the OFX
 * spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {SecurityId} the security id of the security for the expsense
 */
InvestmentExpenseTransaction.prototype.getSecurityId = function() {
  return this.securityId;
};
ChildAggregate.add(InvestmentExpenseTransaction, {required: true, order: 20, attributeType: SecurityId, readMethod: "getSecurityId", writeMethod: "setSecurityId"});


/**
 * Sets the id of the security for the expense. This is a required field according to the OFX
 * spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {SecurityId} securityId the security id of the security for the expsense
 */
InvestmentExpenseTransaction.prototype.setSecurityId = function(securityId) {
  this.securityId = securityId;
};


/**
 * Gets the total for the expense.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the total
 */
InvestmentExpenseTransaction.prototype.getTotal = function() {
  return this.total;
};
Element.add(InvestmentExpenseTransaction, {name: "TOTAL", required: true, order: 30, attributeType: Number, readMethod: "getTotal", writeMethod: "setTotal"});


/**
 * Sets the total for the expense.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {Double} total the total
 */
InvestmentExpenseTransaction.prototype.setTotal = function(total) {
  this.total = total;
};


/**
 * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {String} the sub account type
 */
InvestmentExpenseTransaction.prototype.getSubAccountSecurity = function() {
  return this.subAccountSecurity;
};
Element.add(InvestmentExpenseTransaction, {name: "SUBACCTSEC", order: 40, attributeType: String, readMethod: "getSubAccountSecurity", writeMethod: "setSubAccountSecurity"});


/**
 * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {String} subAccountSecurity the sub account type
 */
InvestmentExpenseTransaction.prototype.setSubAccountSecurity = function(subAccountSecurity) {
  this.subAccountSecurity = subAccountSecurity;
};


/**
 * Gets the result of getSubAccountSecurity as one of the well-known types.
 *
 * @return {SubAccountType} the type of null if it wasn't one of the well known types.
 */
InvestmentExpenseTransaction.prototype.getSubAccountSecurityEnum = function() {
  return SubAccountType.fromOfx(this.getSubAccountSecurity());
};


/**
 * Gets the sub account type for the fund. (e.g. CASH, MARGIN, SHORT, OTHER).
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {String} the sub account fund
 */
InvestmentExpenseTransaction.prototype.getSubAccountFund = function() {
  return this.subAccountFund;
};
Element.add(InvestmentExpenseTransaction, {name: "SUBACCTFUND", order: 50, attributeType: String, readMethod: "getSubAccountFund", writeMethod: "setSubAccountFund"});


/**
 * Sets the sub account type for the fund. (e.g. CASH, MARGIN, SHORT, OTHER).
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {String} subAccountFund the sub account fund
 */
InvestmentExpenseTransaction.prototype.setSubAccountFund = function(subAccountFund) {
  this.subAccountFund = subAccountFund;
};


/**
 * Gets the result of getSubAccountFund as one of the well-known types.
 *
 * @return {SubAccountType} the type of null if it wasn't one of the well known types
 */
InvestmentExpenseTransaction.prototype.getSubAccountFundEnum = function() {
  return SubAccountType.fromOfx(this.getSubAccountFund());
};


/**
 * Gets the currency code for the transaction. Only one of currency code or original currency
 * code should be set according to the OFX spec. If neither are set, means the default currency.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {String} the currency code for the transaction
 */
InvestmentExpenseTransaction.prototype.getCurrencyCode = function() {
  return this.currencyCode;
};
Element.add(InvestmentExpenseTransaction, {name: "CURRENCY", order: 60, attributeType: String, readMethod: "getCurrencyCode", writeMethod: "setCurrencyCode"});


/**
 * sets the currency code for the transaction. Only one of currency code or original currency
 * code should be set according to the OFX spec. If neither are set, means the default currency.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {String} currencyCode the currency code for the transaction
 */
InvestmentExpenseTransaction.prototype.setCurrencyCode = function(currencyCode) {
  this.currencyCode = currencyCode;
  this.originalCurrencyInfo = null;
};


/**
 * Gets the original currency info for the transaction.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {OriginalCurrency} the original currency info for the transaction
 */
InvestmentExpenseTransaction.prototype.getOriginalCurrencyInfo = function() {
  return this.originalCurrencyInfo;
};
Element.add(InvestmentExpenseTransaction, {name: "ORIGCURRENCY", order: 70, attributeType: OriginalCurrency, readMethod: "getOriginalCurrencyInfo", writeMethod: "setOriginalCurrencyInfo"});


/**
 * Sets the original currency info for the transaction.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {OriginalCurrency} originalCurrencyInfo the original currency info for the transaction
 */
InvestmentExpenseTransaction.prototype.setOriginalCurrencyInfo = function(originalCurrencyInfo) {
  this.originalCurrencyInfo = originalCurrencyInfo;
  this.currencyCode = null;
};


/**
 * Gets the 401K source for the transaction. Should be one of "PRETAX", "AFTERTAX", "MATCH",
 * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
 * according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {String} the 401k source
 */
InvestmentExpenseTransaction.prototype.get401kSource = function() {
  return this.inv401kSource;
};
Element.add(InvestmentExpenseTransaction, {name: "INV401KSOURCE", order: 180, attributeType: String, readMethod: "get401kSource", writeMethod: "set401kSource"});


/**
 * Sets the 401K source for the transaction. Should be one of "PRETAX", "AFTERTAX", "MATCH",
 * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
 * according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {String} inv401kSource the 401k source
 */
InvestmentExpenseTransaction.prototype.set401kSource = function(inv401kSource) {
  this.inv401kSource = inv401kSource;
};


/**
 * Gets the 401k source as one of the well-known types.
 *
 * @return {Inv401KSource} the 401k source or null if its not one of the well-known types
 */
InvestmentExpenseTransaction.prototype.get401kSourceEnum = function() {
  return Inv401KSource.fromOfx(this.get401kSource());
};




module.exports = InvestmentExpenseTransaction;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../../seclist/SecurityId":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityId.js","../accounts/SubAccountType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/accounts/SubAccountType.js","../positions/Inv401KSource":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/Inv401KSource.js","./BaseOtherInvestmentTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BaseOtherInvestmentTransaction.js","./OriginalCurrency":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/OriginalCurrency.js","./TransactionType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/TransactionType.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/InvestmentTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var Aggregate = require("../../../../meta/Aggregate");
var Element = require("../../../../meta/Element");

/**
 * Investment transaction aggregate ("INVTRAN").
 * @see "Section 13.9.2.4.1, OFX Spec"
 *
 * @class
 */
function InvestmentTransaction () {

  /**
   * @name InvestmentTransaction#transactionId
   * @type String
   * @access private
   */
  this.transactionId = null;

  /**
   * @name InvestmentTransaction#serverId
   * @type String
   * @access private
   */
  this.serverId = null;

  /**
   * @name InvestmentTransaction#tradeDate
   * @type Date
   * @access private
   */
  this.tradeDate = null;

  /**
   * @name InvestmentTransaction#settlementDate
   * @type Date
   * @access private
   */
  this.settlementDate = null;

  /**
   * @name InvestmentTransaction#reversalTransactionId
   * @type String
   * @access private
   */
  this.reversalTransactionId = null;

  /**
   * @name InvestmentTransaction#memo
   * @type String
   * @access private
   */
  this.memo = null;
}



Aggregate.add("INVTRAN", InvestmentTransaction);


/**
 * Gets the unique financial institution assigned transaction id. This is a
 * required field according to the OFX spec.
 * @see "Section 13.9.2.4.1, OFX Spec"
 *
 * @return {String} the financial institution asssigned transaction id
 */
InvestmentTransaction.prototype.getTransactionId = function() {
  return this.transactionId;
};
Element.add(InvestmentTransaction, {name: "FITID", required: true, order: 0, attributeType: String, readMethod: "getTransactionId", writeMethod: "setTransactionId"});


/**
 * Sets the unique financial institution assigned transaction id. This is a
 * required field according to the OFX spec.
 * @see "Section 13.9.2.4.1, OFX Spec"
 *
 * @param {String} transactionId the financial institution asssigned transaction id
 */
InvestmentTransaction.prototype.setTransactionId = function(transactionId) {
  this.transactionId = transactionId;
};


/**
 * Gets the server assigned transaction id. This is an optional field
 * according to the OFX spec.
 * @see "Section 13.9.2.4.1, OFX Spec"
 *
 * @return {String} the server assigned transaction id
 */
InvestmentTransaction.prototype.getServerId = function() {
  return this.serverId;
};
Element.add(InvestmentTransaction, {name: "SRVRTID", order: 10, attributeType: String, readMethod: "getServerId", writeMethod: "setServerId"});


/**
 * Sets the server assigned transaction id. This is an optional field
 * according to the OFX spec.
 * @see "Section 13.9.2.4.1, OFX Spec"
 *
 * @param {String} serverId the server assigned transaction id
 */
InvestmentTransaction.prototype.setServerId = function(serverId) {
  this.serverId = serverId;
};


/**
 * Gets the trade date of the transaction. For stock splits, this is the
 * day of record. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.4.1, OFX Spec"
 *
 * @return {Date} the trade date
 */
InvestmentTransaction.prototype.getTradeDate = function() {
  return this.tradeDate;
};
Element.add(InvestmentTransaction, {name: "DTTRADE", required: true, order: 20, attributeType: Date, readMethod: "getTradeDate", writeMethod: "setTradeDate"});


/**
 * Sets the trade date of the transaction. For stock splits, this is the
 * day of record. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.4.1, OFX Spec"
 *
 * @param {Date} tradeDate the trade date
 */
InvestmentTransaction.prototype.setTradeDate = function(tradeDate) {
  this.tradeDate = tradeDate;
};


/**
 * Gets the settlement date of the transaction. For stock splits, this is the
 * day of of execution. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.1, OFX Spec"
 *
 * @return {Date} the trade date
 */
InvestmentTransaction.prototype.getSettlementDate = function() {
  return this.settlementDate;
};
Element.add(InvestmentTransaction, {name: "DTSETTLE", order: 30, attributeType: Date, readMethod: "getSettlementDate", writeMethod: "setSettlementDate"});


/**
 * Sets the settlement date of the transaction. For stock splits, this is the
 * day of of execution. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.1, OFX Spec"
 *
 * @param {Date} settlementDate the trade date
 */
InvestmentTransaction.prototype.setSettlementDate = function(settlementDate) {
  this.settlementDate = settlementDate;
};


/**
 * For a reveral transaction, gets the financial institution assigned
 * transaction id for the transaction being revesed.
 * @see "Section 13.9.2.4.1, OFX Spec"
 *
 * @return {String} the transaction id of the transaction being reversed
 */
InvestmentTransaction.prototype.getReversalTransactionId = function() {
  return this.reversalTransactionId;
};
Element.add(InvestmentTransaction, {name: "REVERSALFITID", order: 40, attributeType: String, readMethod: "getReversalTransactionId", writeMethod: "setReversalTransactionId"});


/**
 * For a reveral transaction, gets the financial institution assigned
 * transaction id for the transaction being revesed.
 * @see "Section 13.9.2.4.1, OFX Spec"
 *
 * @param {String} reversalTransactionId the transaction id of the transaction being reversed
 */
InvestmentTransaction.prototype.setReversalTransactionId = function(reversalTransactionId) {
  this.reversalTransactionId = reversalTransactionId;
};


/**
 * Gets the memo associated with the transaction. This is an optional field
 * according to the OFX spec.
 * @see "Section 13.9.2.4.1, OFX Spec"
 *
 * @return {String} the memo
 */
InvestmentTransaction.prototype.getMemo = function() {
  return this.memo;
};
Element.add(InvestmentTransaction, {name: "MEMO", order: 50, attributeType: String, readMethod: "getMemo", writeMethod: "setMemo"});


/**
 * Sets the memo associated with the transaction. This is an optional field
 * according to the OFX spec.
 * @see "Section 13.9.2.4.1, OFX Spec"
 *
 * @param {String} memo the memo
 */
InvestmentTransaction.prototype.setMemo = function(memo) {
  this.memo = memo;
};




module.exports = InvestmentTransaction;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/InvestmentTransactionList.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var Aggregate = require("../../../../meta/Aggregate");
var ChildAggregate = require("../../../../meta/ChildAggregate");
var Element = require("../../../../meta/Element");
var BaseInvestmentTransaction = require("./BaseInvestmentTransaction");
var InvestmentBankTransaction = require("./InvestmentBankTransaction");

/**
 * The transaction list aggregate.
 * @see "Section 13.9.1.2, OFX Spec"
 *
 * @class
 */
function InvestmentTransactionList () {

  /**
   * @name InvestmentTransactionList#start
   * @type Date
   * @access private
   */
  this.start = null;

  /**
   * @name InvestmentTransactionList#end
   * @type Date
   * @access private
   */
  this.end = null;

  /**
   * @name InvestmentTransactionList#transactions
   * @type List<BaseInvestmentTransaction>
   * @access private
   */
  this.transactions = null;

  /**
   * @name InvestmentTransactionList#bankTransactions
   * @type List<InvestmentBankTransaction>
   * @access private
   */
  this.bankTransactions = null;
}



Aggregate.add("INVTRANLIST", InvestmentTransactionList);


/**
 * Gets the start date. This is a required field according to the OFX spec.
 *
 * @return {Date} The start date
 */
InvestmentTransactionList.prototype.getStart = function() {
  return this.start;
};
Element.add(InvestmentTransactionList, {name: "DTSTART", required: true, order: 0, attributeType: Date, readMethod: "getStart", writeMethod: "setStart"});


/**
 * Sets the start date. This is a required field according to the OFX spec.
 *
 * @param {Date} start The start date
 */
InvestmentTransactionList.prototype.setStart = function(start) {
  this.start = start;
};


/**
 * Gets the end date. This is a required field according to the OFX spec.
 *
 * @return {Date} he end date
 */
InvestmentTransactionList.prototype.getEnd = function() {
  return this.end;
};
Element.add(InvestmentTransactionList, {name: "DTEND", required: true, order: 10, attributeType: Date, readMethod: "getEnd", writeMethod: "setEnd"});


/**
 * Sets the end date. This is a required field according to the OFX spec.
 *
 * @param {Date} end the end date
 */
InvestmentTransactionList.prototype.setEnd = function(end) {
  this.end = end;
};


/**
 * Gets the investment transaction list. This is a heterogenous list of different types of
 * transactions returned in the order the brokerage provides them.
 *
 * @return {BaseInvestmentTransaction[]} the investment transaction list
 */
InvestmentTransactionList.prototype.getInvestmentTransactions = function() {
  return this.transactions;
};
ChildAggregate.add(InvestmentTransactionList, {order: 20, attributeType: Array, collectionEntryType: BaseInvestmentTransaction, readMethod: "getInvestmentTransactions", writeMethod: "setInvestmentTransactions"});


/**
 * Sets the investment transaction list. This is a heterogenous list of different types of
 * transactions returned in the order the brokerage provides them.
 *
 * @param {BaseInvestmentTransaction[]} transactions the investment transaction list
 */
InvestmentTransactionList.prototype.setInvestmentTransactions = function(transactions) {
  this.transactions = transactions;
};


/**
 * Gets the bank transaction list.
 *
 * @return {InvestmentBankTransaction[]} the bank transaction list
 */
InvestmentTransactionList.prototype.getBankTransactions = function() {
  return this.bankTransactions;
};
ChildAggregate.add(InvestmentTransactionList, {order: 30, attributeType: Array, collectionEntryType: InvestmentBankTransaction, readMethod: "getBankTransactions", writeMethod: "setBankTransactions"});


/**
 * Sets the bank transaction list.
 *
 * @param {InvestmentBankTransaction[]} bankTransactions the bank transaction list
 */
InvestmentTransactionList.prototype.setBankTransactions = function(bankTransactions) {
  this.bankTransactions = bankTransactions;
};




module.exports = InvestmentTransactionList;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","./BaseInvestmentTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BaseInvestmentTransaction.js","./InvestmentBankTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/InvestmentBankTransaction.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/JournalFundTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var SubAccountType = require("../../../../domain/data/investment/accounts/SubAccountType");
var Aggregate = require("../../../../meta/Aggregate");
var Element = require("../../../../meta/Element");
var BaseOtherInvestmentTransaction = require("./BaseOtherInvestmentTransaction");
var TransactionType = require("./TransactionType");

/**
 * Transaction for journal fund transactions between sub-accounts within the same investment
 * account.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @class
 * @augments BaseOtherInvestmentTransaction
 */
function JournalFundTransaction () {
  BaseOtherInvestmentTransaction.call(this, TransactionType.JOURNAL_FUND);

  /**
   * @name JournalFundTransaction#subAccountFrom
   * @type String
   * @access private
   */
  this.subAccountFrom = null;

  /**
   * @name JournalFundTransaction#subAccountTo
   * @type String
   * @access private
   */
  this.subAccountTo = null;

  /**
   * @name JournalFundTransaction#total
   * @type Double
   * @access private
   */
  this.total = null;
}

inherit(JournalFundTransaction, "extends", BaseOtherInvestmentTransaction);


Aggregate.add("JRNLFUND", JournalFundTransaction);


JournalFundTransaction.prototype.JournalFundTransaction = function() {
  super(TransactionType.JOURNAL_FUND);
};


/**
 * Gets the sub account type the transer is from (e.g. CASH, MARGIN, SHORT, OTHER).
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @return {String} the sub account type
 */
JournalFundTransaction.prototype.getFromSubAccountFund = function() {
  return this.subAccountFrom;
};
Element.add(JournalFundTransaction, {name: "SUBACCTFROM", order: 20, attributeType: String, readMethod: "getFromSubAccountFund", writeMethod: "setFromSubAccountFund"});


/**
 * Sets the sub account type the transer is from (e.g. CASH, MARGIN, SHORT, OTHER).
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @param {String} subAccountFrom the sub account type
 */
JournalFundTransaction.prototype.setFromSubAccountFund = function(subAccountFrom) {
  this.subAccountFrom = subAccountFrom;
};


/**
 * Gets the result of getFromSubAccountFund as one of the well-known types.
 *
 * @return {SubAccountType} the type of null if it wasn't one of the well known types.
 */
JournalFundTransaction.prototype.getFromSubAccountFundEnum = function() {
  return SubAccountType.fromOfx(this.getFromSubAccountFund());
};


/**
 * Gets the sub account type that the transfer is to (e.g. CASH, MARGIN, SHORT, OTHER).
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @return {String} the sub account fund
 */
JournalFundTransaction.prototype.getToSubAccountFund = function() {
  return this.subAccountTo;
};
Element.add(JournalFundTransaction, {name: "SUBACCTTO", order: 30, attributeType: String, readMethod: "getToSubAccountFund", writeMethod: "setToSubAccountFund"});


/**
 * Sets the sub account type that the transfer is to (e.g. CASH, MARGIN, SHORT, OTHER).
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @param {String} subAccountTo the sub account fund
 */
JournalFundTransaction.prototype.setToSubAccountFund = function(subAccountTo) {
  this.subAccountTo = subAccountTo;
};


/**
 * Gets the result of getToSubAccountFund as one of the well-known types.
 *
 * @return {SubAccountType} the type of null if it wasn't one of the well known types.
 */
JournalFundTransaction.prototype.getToSubAccountFundEnum = function() {
  return SubAccountType.fromOfx(this.getToSubAccountFund());
};


/**
 * Gets the total for the transaction.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @return {Double} the total
 */
JournalFundTransaction.prototype.getTotal = function() {
  return this.total;
};
Element.add(JournalFundTransaction, {name: "TOTAL", order: 40, attributeType: Number, readMethod: "getTotal", writeMethod: "setTotal"});


/**
 * Sets the total for the transaction.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @param {Double} total the total
 */
JournalFundTransaction.prototype.setTotal = function(total) {
  this.total = total;
};




module.exports = JournalFundTransaction;

},{"../../../../domain/data/investment/accounts/SubAccountType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/accounts/SubAccountType.js","../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","./BaseOtherInvestmentTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BaseOtherInvestmentTransaction.js","./TransactionType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/TransactionType.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/JournalSecurityTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var SubAccountType = require("../accounts/SubAccountType");
var Aggregate = require("../../../../meta/Aggregate");
var ChildAggregate = require("../../../../meta/ChildAggregate");
var Element = require("../../../../meta/Element");
var BaseOtherInvestmentTransaction = require("./BaseOtherInvestmentTransaction");
var TransactionWithSecurity = require("./TransactionWithSecurity");
var TransactionType = require("./TransactionType");
var SecurityId = require("../../seclist/SecurityId");

/**
 * Transaction for journal security transactions between sub-accounts within the same investment
 * account.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @class
 * @augments BaseOtherInvestmentTransaction
 * @augments TransactionWithSecurity
 */
function JournalSecurityTransaction () {
  BaseOtherInvestmentTransaction.call(this, TransactionType.JOURNAL_SECURITY);

  /**
   * @name JournalSecurityTransaction#securityId
   * @type SecurityId
   * @access private
   */
  this.securityId = null;

  /**
   * @name JournalSecurityTransaction#subAccountFrom
   * @type String
   * @access private
   */
  this.subAccountFrom = null;

  /**
   * @name JournalSecurityTransaction#subAccountTo
   * @type String
   * @access private
   */
  this.subAccountTo = null;

  /**
   * @name JournalSecurityTransaction#total
   * @type Double
   * @access private
   */
  this.total = null;
}

inherit(JournalSecurityTransaction, "extends", BaseOtherInvestmentTransaction);
inherit(JournalSecurityTransaction, "implements", TransactionWithSecurity);


Aggregate.add("JRNLSEC", JournalSecurityTransaction);



/**
 * Gets the id of the security that was transferred. This is a required field according to the OFX
 * spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {SecurityId} the security id of the security that was bought
 */
JournalSecurityTransaction.prototype.getSecurityId = function() {
  return this.securityId;
};
ChildAggregate.add(JournalSecurityTransaction, {required: true, order: 20, attributeType: SecurityId, readMethod: "getSecurityId", writeMethod: "setSecurityId"});


/**
 * Sets the id of the security that was transferred. This is a required field according to the OFX
 * spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {SecurityId} securityId the security id of the security that was bought
 */
JournalSecurityTransaction.prototype.setSecurityId = function(securityId) {
  this.securityId = securityId;
};


/**
 * Gets the sub account type the transer is from (e.g. CASH, MARGIN, SHORT, OTHER).
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @return {String} the sub account type
 */
JournalSecurityTransaction.prototype.getFromSubAccountFund = function() {
  return this.subAccountFrom;
};
Element.add(JournalSecurityTransaction, {name: "SUBACCTFROM", order: 30, attributeType: String, readMethod: "getFromSubAccountFund", writeMethod: "setFromSubAccountFund"});


/**
 * Sets the sub account type the transer is from (e.g. CASH, MARGIN, SHORT, OTHER).
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @param {String} subAccountFrom the sub account type
 */
JournalSecurityTransaction.prototype.setFromSubAccountFund = function(subAccountFrom) {
  this.subAccountFrom = subAccountFrom;
};


/**
 * Gets the result of getFromSubAccountFund as one of the well-known types.
 *
 * @return {SubAccountType} the type of null if it wasn't one of the well known types.
 */
JournalSecurityTransaction.prototype.getFromSubAccountFundEnum = function() {
  return SubAccountType.fromOfx(this.getFromSubAccountFund());
};


/**
 * Gets the sub account type that the transfer is to (e.g. CASH, MARGIN, SHORT, OTHER).
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @return {String} the sub account fund
 */
JournalSecurityTransaction.prototype.getToSubAccountFund = function() {
  return this.subAccountTo;
};
Element.add(JournalSecurityTransaction, {name: "SUBACCTTO", order: 40, attributeType: String, readMethod: "getToSubAccountFund", writeMethod: "setToSubAccountFund"});


/**
 * sets the sub account type that the transfer is to (e.g. CASH, MARGIN, SHORT, OTHER).
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @param {String} subAccountTo the sub account fund
 */
JournalSecurityTransaction.prototype.setToSubAccountFund = function(subAccountTo) {
  this.subAccountTo = subAccountTo;
};


/**
 * Gets the result of getToSubAccountFund as one of the well-known types.
 *
 * @return {SubAccountType} the type of null if it wasn't one of the well known types.
 */
JournalSecurityTransaction.prototype.getToSubAccountFundEnum = function() {
  return SubAccountType.fromOfx(this.getToSubAccountFund());
};


/**
 * Gets the total for the transaction.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @return {Double} the total
 */
JournalSecurityTransaction.prototype.getTotal = function() {
  return this.total;
};
Element.add(JournalSecurityTransaction, {name: "TOTAL", order: 50, attributeType: Number, readMethod: "getTotal", writeMethod: "setTotal"});


/**
 * Sets the total for the transaction.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @param {Double} total the total
 */
JournalSecurityTransaction.prototype.setTotal = function(total) {
  this.total = total;
};




module.exports = JournalSecurityTransaction;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../../seclist/SecurityId":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityId.js","../accounts/SubAccountType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/accounts/SubAccountType.js","./BaseOtherInvestmentTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BaseOtherInvestmentTransaction.js","./TransactionType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/TransactionType.js","./TransactionWithSecurity":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/TransactionWithSecurity.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/MarginInterestTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var SubAccountType = require("../accounts/SubAccountType");
var Aggregate = require("../../../../meta/Aggregate");
var Element = require("../../../../meta/Element");
var BaseOtherInvestmentTransaction = require("./BaseOtherInvestmentTransaction");
var TransactionType = require("./TransactionType");
var OriginalCurrency = require("./OriginalCurrency");

/**
 * Transaction for journal security transactions between sub-accounts within the same investment
 * account.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @class
 * @augments BaseOtherInvestmentTransaction
 */
function MarginInterestTransaction () {
  BaseOtherInvestmentTransaction.call(this, TransactionType.MARGIN_INTEREST);

  /**
   * @name MarginInterestTransaction#total
   * @type Double
   * @access private
   */
  this.total = null;

  /**
   * @name MarginInterestTransaction#subAccountFund
   * @type String
   * @access private
   */
  this.subAccountFund = null;

  /**
   * @name MarginInterestTransaction#currencyCode
   * @type String
   * @access private
   */
  this.currencyCode = null;

  /**
   * @name MarginInterestTransaction#originalCurrencyInfo
   * @type OriginalCurrency
   * @access private
   */
  this.originalCurrencyInfo = null;
}

inherit(MarginInterestTransaction, "extends", BaseOtherInvestmentTransaction);


Aggregate.add("MARGININTEREST", MarginInterestTransaction);


/**
 * Gets the sub account type the margin interest affects (e.g. CASH, MARGIN, SHORT, OTHER).
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @return {String} the sub account type
 */
MarginInterestTransaction.prototype.getSubAccountFund = function() {
  return this.subAccountFund;
};
Element.add(MarginInterestTransaction, {name: "SUBACCTFUND", order: 30, attributeType: String, readMethod: "getSubAccountFund", writeMethod: "setSubAccountFund"});


/**
 * Sets the sub account type the margin interest affects (e.g. CASH, MARGIN, SHORT, OTHER).
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @param {String} subAccountFund the sub account type
 */
MarginInterestTransaction.prototype.setSubAccountFund = function(subAccountFund) {
  this.subAccountFund = subAccountFund;
};


/**
 * Gets the result of getSubAccountFund as one of the well-known types.
 *
 * @return {SubAccountType} the type of null if it wasn't one of the well known types.
 */
MarginInterestTransaction.prototype.getSubAccountFundEnum = function() {
  var type = this.getSubAccountFund();
  return type !== null ? SubAccountType.valueOf(type) : null;
};


/**
 * Gets the total for the transaction.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @return {Double} the total
 */
MarginInterestTransaction.prototype.getTotal = function() {
  return this.total;
};
Element.add(MarginInterestTransaction, {name: "TOTAL", order: 40, attributeType: Number, readMethod: "getTotal", writeMethod: "setTotal"});


/**
 * Sets the total for the transaction.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @param {Double} total the total
 */
MarginInterestTransaction.prototype.setTotal = function(total) {
  this.total = total;
};


/**
 * Gets the currency code for the transaction. Only one of currency code or original currency
 * info should be set according to the OFX spec. If neither are set, means the default currency.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {String} the currency code for the transaction.
 */
MarginInterestTransaction.prototype.getCurrencyCode = function() {
  return this.currencyCode;
};
Element.add(MarginInterestTransaction, {name: "CURRENCY", order: 110, attributeType: String, readMethod: "getCurrencyCode", writeMethod: "setCurrencyCode"});


/**
 * Sets the currency code for the transaction. Only one of currency code or original currency
 * info should be set according to the OFX spec. If neither are set, means the default currency.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {String} currencyCode the currency code for the transaction.
 */
MarginInterestTransaction.prototype.setCurrencyCode = function(currencyCode) {
  this.currencyCode = currencyCode;
  this.originalCurrencyInfo = null;
};


/**
 * Gets the original currency info for the transaction.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {OriginalCurrency} the original currency info for the transaction.
 */
MarginInterestTransaction.prototype.getOriginalCurrencyInfo = function() {
  return this.originalCurrencyInfo;
};
Element.add(MarginInterestTransaction, {name: "ORIGCURRENCY", order: 120, attributeType: OriginalCurrency, readMethod: "getOriginalCurrencyInfo", writeMethod: "setOriginalCurrencyInfo"});


/**
 * Sets the original currency info for the transaction.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {OriginalCurrency} originalCurrency the original currency info for the transaction.
 */
MarginInterestTransaction.prototype.SetOriginalCurrency = function(originalCurrency) {
  this.originalCurrencyInfo = originalCurrency;
  this.currencyCode = null;
};




module.exports = MarginInterestTransaction;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../accounts/SubAccountType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/accounts/SubAccountType.js","./BaseOtherInvestmentTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BaseOtherInvestmentTransaction.js","./OriginalCurrency":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/OriginalCurrency.js","./TransactionType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/TransactionType.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/OptionBuyType.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * Type of purchase for options.
 * @see "Section 13.9.2.4.2, OFX Spec"
 *
 * @enum
 */
var OptionBuyType = {
  BUY_TO_OPEN: 0,
  BUY_TO_CLOSE: 1,

  fromOfx: function(/*String*/ ofxVal) {
    if ("BUYTOOPEN".equals(ofxVal)) {
      return OptionBuyType.BUY_TO_OPEN;
    } else if ("BUYTOCLOSE".equals(ofxVal)) {
      return OptionBuyType.BUY_TO_CLOSE;
    } else {
      return null;
    }
  }
};


module.exports = OptionBuyType;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/OptionSellType.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * Type of sale for options.
 * @see "Section 13.9.2.4.2, OFX Spec"
 *
 * @enum
 */
var OptionSellType = {
  SELL_TO_CLOSE: 0,
  SELL_TO_OPEN: 1,

  fromOfx: function(/*String*/ ofxVal) {
    if ("SELLTOOPEN".equals(ofxVal)) {
      return OptionSellType.SELL_TO_OPEN;
    } else if ("SELLTOCLOSE".equals(ofxVal)) {
      return OptionSellType.SELL_TO_CLOSE;
    } else {
      return null;
    }
  }
};


module.exports = OptionSellType;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/OriginalCurrency.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var Aggregate = require("../../../../meta/Aggregate");
var Element = require("../../../../meta/Element");

/**
 * Original currency aggregate ("ORIGCURRENCY"). For investment transactions in other currencies,
 * the financial institution can report the transaction as converted into the default currency
 * and then include this child aggregate to report what the original currency was and what the
 * rate of conversion was.
 * @see "Section 5.2, OFX Spec"
 *
 * @class
 */
function OriginalCurrency () {

  /**
   * @name OriginalCurrency#currencyRate
   * @type double
   * @access private
   */
  this.currencyRate = null;

  /**
   * @name OriginalCurrency#currencyCode
   * @type String
   * @access private
   */
  this.currencyCode = null;
}



Aggregate.add("ORIGCURRENCY", OriginalCurrency);


/**
 * Gets the rate of currency conversion. This is the ratio of "CURDEF" (the default currency in
 * the transaction response) to "CURSYM" (the original currency code below).
 *
 * @return {double} the currency rate
 */
OriginalCurrency.prototype.getCurrencyRate = function() {
  return this.currencyRate;
};
Element.add(OriginalCurrency, {name: "CURRATE", required: true, order: 10, attributeType: Number, readMethod: "getCurrencyRate", writeMethod: "setCurrencyRate"});


/**
 * Sets the rate of currency conversion. This is the ratio of "CURDEF" (the default currency in
 * the transaction response) to "CURSYM" (the original currency code below).
 *
 * @param {double} currencyRate the currency rate
 */
OriginalCurrency.prototype.setCurrencyRate = function(currencyRate) {
  this.currencyRate = currencyRate;
};


/**
 * Gets the ISO-4217 3-letter currency identifier of the original currency.
 * @see java.util.Currency#getCurrencyCode()
 *
 * @return {String} the currency code
 */
OriginalCurrency.prototype.getCurrencyCode = function() {
  return this.currencyCode;
};
Element.add(OriginalCurrency, {name: "CURSYM", required: true, order: 20, attributeType: String, readMethod: "getCurrencyCode", writeMethod: "setCurrencyCode"});


/**
 * Sets the ISO-4217 3-letter currency identifier of the original currency.
 * @see java.util.Currency#getCurrencyCode()
 *
 * @param {String} currencyCode the currency code
 */
OriginalCurrency.prototype.setCurrencyCode = function(currencyCode) {
  this.currencyCode = currencyCode;
};




module.exports = OriginalCurrency;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/ReinvestIncomeTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var SubAccountType = require("../accounts/SubAccountType");
var Inv401KSource = require("../positions/Inv401KSource");
var Aggregate = require("../../../../meta/Aggregate");
var ChildAggregate = require("../../../../meta/ChildAggregate");
var Element = require("../../../../meta/Element");
var BaseOtherInvestmentTransaction = require("./BaseOtherInvestmentTransaction");
var TransactionType = require("./TransactionType");
var TransactionWithSecurity = require("./TransactionWithSecurity");
var IncomeType = require("./IncomeType");
var OriginalCurrency = require("./OriginalCurrency");
var SecurityId = require("../../seclist/SecurityId");

/**
 * Transaction for reinvestment transactions.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @class
 * @augments BaseOtherInvestmentTransaction
 * @augments TransactionWithSecurity
 */
function ReinvestIncomeTransaction () {
  BaseOtherInvestmentTransaction.call(this, TransactionType.REINVEST_INCOME);

  /**
   * @name ReinvestIncomeTransaction#securityId
   * @type SecurityId
   * @access private
   */
  this.securityId = null;

  /**
   * @name ReinvestIncomeTransaction#incomeType
   * @type String
   * @access private
   */
  this.incomeType = null;

  /**
   * @name ReinvestIncomeTransaction#total
   * @type Double
   * @access private
   */
  this.total = null;

  /**
   * @name ReinvestIncomeTransaction#subAccountSecurity
   * @type String
   * @access private
   */
  this.subAccountSecurity = null;

  /**
   * @name ReinvestIncomeTransaction#units
   * @type Double
   * @access private
   */
  this.units = null;

  /**
   * @name ReinvestIncomeTransaction#unitPrice
   * @type Double
   * @access private
   */
  this.unitPrice = null;

  /**
   * @name ReinvestIncomeTransaction#commission
   * @type Double
   * @access private
   */
  this.commission = null;

  /**
   * @name ReinvestIncomeTransaction#taxes
   * @type Double
   * @access private
   */
  this.taxes = null;

  /**
   * @name ReinvestIncomeTransaction#fees
   * @type Double
   * @access private
   */
  this.fees = null;

  /**
   * @name ReinvestIncomeTransaction#load
   * @type Double
   * @access private
   */
  this.load = null;

  /**
   * @name ReinvestIncomeTransaction#taxExempt
   * @type Boolean
   * @access private
   */
  this.taxExempt = null;

  /**
   * @name ReinvestIncomeTransaction#currencyCode
   * @type String
   * @access private
   */
  this.currencyCode = null;

  /**
   * @name ReinvestIncomeTransaction#originalCurrencyInfo
   * @type OriginalCurrency
   * @access private
   */
  this.originalCurrencyInfo = null;

  /**
   * @name ReinvestIncomeTransaction#inv401kSource
   * @type String
   * @access private
   */
  this.inv401kSource = null;
}

inherit(ReinvestIncomeTransaction, "extends", BaseOtherInvestmentTransaction);
inherit(ReinvestIncomeTransaction, "implements", TransactionWithSecurity);


Aggregate.add("REINVEST", ReinvestIncomeTransaction);


/**
 * Gets the id of the security that was reinvested in. This is a required field according to the
 * OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {SecurityId} the security id of the security that was reinvested in
 */
ReinvestIncomeTransaction.prototype.getSecurityId = function() {
  return this.securityId;
};
ChildAggregate.add(ReinvestIncomeTransaction, {required: true, order: 20, attributeType: SecurityId, readMethod: "getSecurityId", writeMethod: "setSecurityId"});


/**
 * Sets the id of the security that was reinvested in. This is a required field according to the
 * OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {SecurityId} securityId the security id of the security that was reinvested in
 */
ReinvestIncomeTransaction.prototype.setSecurityId = function(securityId) {
  this.securityId = securityId;
};


/**
 * Gets the type of income. One of "CGLONG" (long term capital gains), "CGSHORT" (short term
 * capital gains), "DIV" (dividend), INTEREST, or MISC. This is a required field according to the
 * OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec" This is a required field according to the OFX spec.
 *
 * @return {String} the type of income
 */
ReinvestIncomeTransaction.prototype.getIncomeType = function() {
  return this.incomeType;
};
Element.add(ReinvestIncomeTransaction, {name: "INCOMETYPE", required: true, order: 30, attributeType: String, readMethod: "getIncomeType", writeMethod: "setIncomeType"});


/**
 * Sets the type of income. One of "CGLONG" (long term capital gains), "CGSHORT" (short term
 * capital gains), "DIV" (dividend), INTEREST, or MISC. This is a required field according to the
 * OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec" This is a required field according to the OFX spec.
 *
 * @param {String} incomeType the type of income
 */
ReinvestIncomeTransaction.prototype.setIncomeType = function(incomeType) {
  this.incomeType = incomeType;
};


/**
 * Gets the type of income as one of the well-known types.
 *
 * @return {IncomeType} the income type or null if it's not one of the well-known types
 */
ReinvestIncomeTransaction.prototype.getIncomeTypeEnum = function() {
  return IncomeType.fromOfx(this.getIncomeType());
};


/**
 * Gets the total income received. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @return {Double} the total
 */
ReinvestIncomeTransaction.prototype.getTotal = function() {
  return this.total;
};
Element.add(ReinvestIncomeTransaction, {name: "TOTAL", required: true, order: 40, attributeType: Number, readMethod: "getTotal", writeMethod: "setTotal"});


/**
 * Sets the total income received. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @param {Double} total the total
 */
ReinvestIncomeTransaction.prototype.setTotal = function(total) {
  this.total = total;
};


/**
 * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER). This is a
 * required field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {String} the sub account type
 */
ReinvestIncomeTransaction.prototype.getSubAccountSecurity = function() {
  return this.subAccountSecurity;
};
Element.add(ReinvestIncomeTransaction, {name: "SUBACCTSEC", order: 50, attributeType: String, readMethod: "getSubAccountSecurity", writeMethod: "setSubAccountSecurity"});


/**
 * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER). This is a
 * required field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {String} subAccountSecurity the sub account type
 */
ReinvestIncomeTransaction.prototype.setSubAccountSecurity = function(subAccountSecurity) {
  this.subAccountSecurity = subAccountSecurity;
};


/**
 * Gets the result of getSubAccountSecurity as one of the well-known types.
 *
 * @return {SubAccountType} the type of null if it wasn't one of the well known types
 */
ReinvestIncomeTransaction.prototype.getSubAccountSecurityEnum = function() {
  return SubAccountType.fromOfx(this.getSubAccountSecurity());
};


/**
 * Gets the number of units of the security that was reinvested in. This is a required field
 * according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the number of units purchased
 */
ReinvestIncomeTransaction.prototype.getUnits = function() {
  return this.units;
};
Element.add(ReinvestIncomeTransaction, {name: "UNITS", required: true, order: 60, attributeType: Number, readMethod: "getUnits", writeMethod: "setUnits"});


/**
 * Sets the number of units of the security that was reinvested in. This is a required field
 * according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {Double} units the number of units purchased
 */
ReinvestIncomeTransaction.prototype.setUnits = function(units) {
  this.units = units;
};


/**
 * Gets the price per commonly-quoted unit. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the per unit price
 */
ReinvestIncomeTransaction.prototype.getUnitPrice = function() {
  return this.unitPrice;
};
Element.add(ReinvestIncomeTransaction, {name: "UNITPRICE", required: true, order: 70, attributeType: Number, readMethod: "getUnitPrice", writeMethod: "setUnitPrice"});


/**
 * Sets the price per commonly-quoted unit. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {Double} unitPrice the per unit price
 */
ReinvestIncomeTransaction.prototype.setUnitPrice = function(unitPrice) {
  this.unitPrice = unitPrice;
};


/**
 * Gets the transaction commission for the reinvestment. This is an optional field according to
 * the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the transaction commision
 */
ReinvestIncomeTransaction.prototype.getCommission = function() {
  return this.commission;
};
Element.add(ReinvestIncomeTransaction, {name: "COMMISSION", order: 80, attributeType: Number, readMethod: "getCommission", writeMethod: "setCommission"});


/**
 * Sets the transaction commission for the reinvestment. This is an optional field according to
 * the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {Double} commission the transaction commision
 */
ReinvestIncomeTransaction.prototype.setCommission = function(commission) {
  this.commission = commission;
};


/**
 * Gets the taxes for the reinvestment. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the transaction taxes
 */
ReinvestIncomeTransaction.prototype.getTaxes = function() {
  return this.taxes;
};
Element.add(ReinvestIncomeTransaction, {name: "TAXES", order: 90, attributeType: Number, readMethod: "getTaxes", writeMethod: "setTaxes"});


/**
 * Sets the taxes for the reinvestment. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {Double} taxes the transaction taxes
 */
ReinvestIncomeTransaction.prototype.setTaxes = function(taxes) {
  this.taxes = taxes;
};


/**
 * Gets the fees for the reinvestment. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the transaction fees
 */
ReinvestIncomeTransaction.prototype.getFees = function() {
  return this.fees;
};
Element.add(ReinvestIncomeTransaction, {name: "FEES", order: 100, attributeType: Number, readMethod: "getFees", writeMethod: "setFees"});


/**
 * Sets the fees for the reinvestment. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {Double} fees the transaction fees
 */
ReinvestIncomeTransaction.prototype.setFees = function(fees) {
  this.fees = fees;
};


/**
 * Gets the load for the reinvestment. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the load
 */
ReinvestIncomeTransaction.prototype.getLoad = function() {
  return this.load;
};
Element.add(ReinvestIncomeTransaction, {name: "LOAD", order: 110, attributeType: Number, readMethod: "getLoad", writeMethod: "setLoad"});


/**
 * Sets the load for the reinvestment. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {Double} load the load
 */
ReinvestIncomeTransaction.prototype.setLoad = function(load) {
  this.load = load;
};


/**
 * Gets whether the income was tax exempt. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Boolean} whether the transaction was tax exempt
 */
ReinvestIncomeTransaction.prototype.getTaxExempt = function() {
  return this.taxExempt;
};
Element.add(ReinvestIncomeTransaction, {name: "TAXEXEMPT", order: 120, attributeType: Boolean, readMethod: "getTaxExempt", writeMethod: "setTaxExempt"});


/**
 * Sets whether the income was tax exempt. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {Boolean} taxExempt whether the transaction was tax exempt
 */
ReinvestIncomeTransaction.prototype.setTaxExempt = function(taxExempt) {
  this.taxExempt = taxExempt;
};


/**
 * Gets the currency code for the transaction. Only one of currency code or original currency
 * info should be set according to the OFX spec. If neither are set, means the default currency.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {String} the currency code for the transaction
 */
ReinvestIncomeTransaction.prototype.getCurrencyCode = function() {
  return this.currencyCode;
};
Element.add(ReinvestIncomeTransaction, {name: "CURRENCY", order: 130, attributeType: String, readMethod: "getCurrencyCode", writeMethod: "setCurrencyCode"});


/**
 * Sets the currency code for the transaction. Only one of currency code or original currency
 * info should be set according to the OFX spec. If neither are set, means the default currency.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {String} currencyCode the currency code for the transaction
 */
ReinvestIncomeTransaction.prototype.setCurrencyCode = function(currencyCode) {
  this.currencyCode = currencyCode;
  this.originalCurrencyInfo = null;
};


/**
 * Gets the original currency info for the transaction.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {OriginalCurrency} the original currency info for the transaction.
 */
ReinvestIncomeTransaction.prototype.getOriginalCurrencyInfo = function() {
  return this.originalCurrencyInfo;
};
Element.add(ReinvestIncomeTransaction, {name: "ORIGCURRENCY", order: 140, attributeType: OriginalCurrency, readMethod: "getOriginalCurrencyInfo", writeMethod: "setOriginalCurrencyInfo"});


/**
 * Sets the original currency info for the transaction.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {OriginalCurrency} originalCurrencyInfo the original currency info for the transaction.
 */
ReinvestIncomeTransaction.prototype.setOriginalCurrencyInfo = function(originalCurrencyInfo) {
  this.originalCurrencyInfo = originalCurrencyInfo;
  this.currencyCode = null;
};


/**
 * Gets the 401K source for the reinvestment. Should be one of "PRETAX", "AFTERTAX", "MATCH",
 * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
 * according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {String} the state withholding
 */
ReinvestIncomeTransaction.prototype.get401kSource = function() {
  return this.inv401kSource;
};
Element.add(ReinvestIncomeTransaction, {name: "INV401KSOURCE", order: 150, attributeType: String, readMethod: "get401kSource", writeMethod: "set401kSource"});


/**
 * Sets the 401K source for the reinvestment. Should be one of "PRETAX", "AFTERTAX", "MATCH",
 * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
 * according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {String} inv401kSource the state withholding
 */
ReinvestIncomeTransaction.prototype.set401kSource = function(inv401kSource) {
  this.inv401kSource = inv401kSource;
};


/**
 * Gets the 401(k) source as one of the well-known types.
 *
 * @return {Inv401KSource} the type of close or null if it's not well known
 */
ReinvestIncomeTransaction.prototype.get401kSourceEnum = function() {
  return Inv401KSource.fromOfx(this.get401kSource());
};




module.exports = ReinvestIncomeTransaction;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../../seclist/SecurityId":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityId.js","../accounts/SubAccountType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/accounts/SubAccountType.js","../positions/Inv401KSource":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/Inv401KSource.js","./BaseOtherInvestmentTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BaseOtherInvestmentTransaction.js","./IncomeType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/IncomeType.js","./OriginalCurrency":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/OriginalCurrency.js","./TransactionType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/TransactionType.js","./TransactionWithSecurity":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/TransactionWithSecurity.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/RelatedOptionType.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";

/**
 * Related option transaction type.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @enum
 */
var RelatedOptionType = {
  SPREAD: 0,
  STRADDLE: 1,
  NONE: 2,
  OTHER: 3,

  fromOfx: function(/*String*/ ofxVal) {
    if ("SPREAD".equals(ofxVal)) {
      return RelatedOptionType.SPREAD;
    } else if ("STRADDLE".equals(ofxVal)) {
      return RelatedOptionType.STRADDLE;
    } else if ("NONE".equals(ofxVal)) {
      return RelatedOptionType.NONE;
    } else if ("OTHER".equals(ofxVal)) {
      return RelatedOptionType.OTHER;
    } else {
      return null;
    }
  }
};


module.exports = RelatedOptionType;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/ReturnOfCapitalTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var SubAccountType = require("../accounts/SubAccountType");
var Inv401KSource = require("../positions/Inv401KSource");
var Aggregate = require("../../../../meta/Aggregate");
var ChildAggregate = require("../../../../meta/ChildAggregate");
var Element = require("../../../../meta/Element");
var SecurityId = require("../../seclist/SecurityId");
var BaseOtherInvestmentTransaction = require("./BaseOtherInvestmentTransaction");
var TransactionWithSecurity = require("./TransactionWithSecurity");
var TransactionType = require("./TransactionType");
var OriginalCurrency = require("./OriginalCurrency");

/**
 * Transaction for return of capital transactions.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @class
 * @augments BaseOtherInvestmentTransaction
 * @augments TransactionWithSecurity
 */
function ReturnOfCapitalTransaction () {
  BaseOtherInvestmentTransaction.call(this, TransactionType.RETURN_OF_CAPITAL);

  /**
   * @name ReturnOfCapitalTransaction#securityId
   * @type SecurityId
   * @access private
   */
  this.securityId = null;

  /**
   * @name ReturnOfCapitalTransaction#total
   * @type Double
   * @access private
   */
  this.total = null;

  /**
   * @name ReturnOfCapitalTransaction#subAccountSecurity
   * @type String
   * @access private
   */
  this.subAccountSecurity = null;

  /**
   * @name ReturnOfCapitalTransaction#subAccountFund
   * @type String
   * @access private
   */
  this.subAccountFund = null;

  /**
   * @name ReturnOfCapitalTransaction#currencyCode
   * @type String
   * @access private
   */
  this.currencyCode = null;

  /**
   * @name ReturnOfCapitalTransaction#originalCurrencyInfo
   * @type OriginalCurrency
   * @access private
   */
  this.originalCurrencyInfo = null;

  /**
   * @name ReturnOfCapitalTransaction#inv401kSource
   * @type String
   * @access private
   */
  this.inv401kSource = null;
}

inherit(ReturnOfCapitalTransaction, "extends", BaseOtherInvestmentTransaction);
inherit(ReturnOfCapitalTransaction, "implements", TransactionWithSecurity);


Aggregate.add("RETOFCAP", ReturnOfCapitalTransaction);


/**
 * Gets the id of the security that capital was returned from. This is a required field according
 * to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {SecurityId} the security id of the security that capital was returned from
 */
ReturnOfCapitalTransaction.prototype.getSecurityId = function() {
  return this.securityId;
};
ChildAggregate.add(ReturnOfCapitalTransaction, {required: true, order: 20, attributeType: SecurityId, readMethod: "getSecurityId", writeMethod: "setSecurityId"});


/**
 * Sets the id of the security that capital was returned from. This is a required field according
 * to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {SecurityId} securityId the security id of the security that capital was returned from
 */
ReturnOfCapitalTransaction.prototype.setSecurityId = function(securityId) {
  this.securityId = securityId;
};


/**
 * Gets the total amount of capital returned. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @return {Double} the total
 */
ReturnOfCapitalTransaction.prototype.getTotal = function() {
  return this.total;
};
Element.add(ReturnOfCapitalTransaction, {name: "TOTAL", required: true, order: 40, attributeType: Number, readMethod: "getTotal", writeMethod: "setTotal"});


/**
 * Sets the total amount of capital returned. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @param {Double} total the total
 */
ReturnOfCapitalTransaction.prototype.setTotal = function(total) {
  this.total = total;
};


/**
 * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER). This is a
 * required field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {String} the sub account type
 */
ReturnOfCapitalTransaction.prototype.getSubAccountSecurity = function() {
  return this.subAccountSecurity;
};
Element.add(ReturnOfCapitalTransaction, {name: "SUBACCTSEC", order: 50, attributeType: String, readMethod: "getSubAccountSecurity", writeMethod: "setSubAccountSecurity"});


/**
 * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER). This is a
 * required field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {String} subAccountSecurity the sub account type
 */
ReturnOfCapitalTransaction.prototype.setSubAccountSecurity = function(subAccountSecurity) {
  this.subAccountSecurity = subAccountSecurity;
};


/**
 * Gets the result of getSubAccountSecurity as one of the well-known types.
 *
 * @return {SubAccountType} the type of null if it wasn't one of the well known types.
 */
ReturnOfCapitalTransaction.prototype.getSubAccountSecurityEnum = function() {
  return SubAccountType.fromOfx(this.getSubAccountSecurity());
};


/**
 * Gets the sub account type that the transaction affects.
 * (e.g. CASH, MARGIN, SHORT, OTHER). This is a required field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {String} the sub account fund
 */
ReturnOfCapitalTransaction.prototype.getSubAccountFund = function() {
  return this.subAccountFund;
};
Element.add(ReturnOfCapitalTransaction, {name: "SUBACCTFUND", order: 140, attributeType: String, readMethod: "getSubAccountFund", writeMethod: "setSubAccountFund"});


/**
 * Sets the sub account type that the transaction affects.
 * (e.g. CASH, MARGIN, SHORT, OTHER). This is a required field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {String} subAccountFund the sub account fund
 */
ReturnOfCapitalTransaction.prototype.setSubAccountFund = function(subAccountFund) {
  this.subAccountFund = subAccountFund;
};


/**
 * Gets the result of getSubAccountFund as one of the well-known types.
 *
 * @return {SubAccountType} the type of null if it wasn't one of the well known types
 */
ReturnOfCapitalTransaction.prototype.getSubAccountFundEnum = function() {
  return SubAccountType.fromOfx(this.getSubAccountFund());
};


/**
 * Gets the currency code for the transaction. Only one of currency code or original currency
 * info should be set according to the OFX spec. If neither are set, means the default currency.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {String} the currency code for the transaction
 */
ReturnOfCapitalTransaction.prototype.getCurrencyCode = function() {
  return this.currencyCode;
};
Element.add(ReturnOfCapitalTransaction, {name: "CURRENCY", order: 110, attributeType: String, readMethod: "getCurrencyCode", writeMethod: "setCurrencyCode"});


/**
 * Sets the currency code for the transaction. Only one of currency code or original currency
 * info should be set according to the OFX spec. If neither are set, means the default currency.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {String} currencyCode the currency code for the transaction
 */
ReturnOfCapitalTransaction.prototype.setCurrencyCode = function(currencyCode) {
  this.currencyCode = currencyCode;
  this.originalCurrencyInfo = null;
};


/**
 * Gets the original currency info for the transaction.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {OriginalCurrency} the currency code for the transaction.
 */
ReturnOfCapitalTransaction.prototype.getOriginalCurrencyInfo = function() {
  return this.originalCurrencyInfo;
};
Element.add(ReturnOfCapitalTransaction, {name: "ORIGCURRENCY", order: 120, attributeType: OriginalCurrency, readMethod: "getOriginalCurrencyInfo", writeMethod: "setOriginalCurrencyInfo"});


/**
 * Sets the original currency info for the transaction.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {OriginalCurrency} originalCurrencyInfo the currency code for the transaction.
 */
ReturnOfCapitalTransaction.prototype.setOriginalCurrencyInfo = function(originalCurrencyInfo) {
  this.originalCurrencyInfo = originalCurrencyInfo;
  this.currencyCode = null;
};


/**
 * Gets the 401K source for the reinvestment. Should be one of "PRETAX", "AFTERTAX", "MATCH",
 * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
 * according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {String} the state withholding
 */
ReturnOfCapitalTransaction.prototype.get401kSource = function() {
  return this.inv401kSource;
};
Element.add(ReturnOfCapitalTransaction, {name: "INV401KSOURCE", order: 180, attributeType: String, readMethod: "get401kSource", writeMethod: "set401kSource"});


/**
 * Sets the 401K source for the reinvestment. Should be one of "PRETAX", "AFTERTAX", "MATCH",
 * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
 * according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {String} inv401kSource the state withholding
 */
ReturnOfCapitalTransaction.prototype.set401kSource = function(inv401kSource) {
  this.inv401kSource = inv401kSource;
};


/**
 * Gets the 401(k) source as one of the well-known types.
 *
 * @return {Inv401KSource} the type of close or null if it's not well known.
 */
ReturnOfCapitalTransaction.prototype.get401kSourceEnum = function() {
  return Inv401KSource.fromOfx(this.get401kSource());
};




module.exports = ReturnOfCapitalTransaction;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../../seclist/SecurityId":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityId.js","../accounts/SubAccountType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/accounts/SubAccountType.js","../positions/Inv401KSource":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/Inv401KSource.js","./BaseOtherInvestmentTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BaseOtherInvestmentTransaction.js","./OriginalCurrency":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/OriginalCurrency.js","./TransactionType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/TransactionType.js","./TransactionWithSecurity":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/TransactionWithSecurity.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/SellDebtReason.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * Reason debt was sold.
 * @see "Section 13.9.2.4.2, OFX Spec"
 *
 * @enum
 */
var SellDebtReason = {
  CALL: 0,
  SELL: 1,
  MATURITY: 2,

  fromOfx: function(/*String*/ ofxVal) {
    if ("CALL".equals(ofxVal)) {
      return SellDebtReason.CALL;
    } else if ("SELL".equals(ofxVal)) {
      return SellDebtReason.SELL;
    } else if ("MATURITY".equals(ofxVal)) {
      return SellDebtReason.MATURITY;
    } else {
      return null;
    }
  }
};


module.exports = SellDebtReason;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/SellDebtTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var Aggregate = require("../../../../meta/Aggregate");
var Element = require("../../../../meta/Element");
var BaseSellInvestmentTransaction = require("./BaseSellInvestmentTransaction");
var TransactionType = require("./TransactionType");
var SellDebtReason = require("./SellDebtReason");

/**
 * Transaction for selling debt (i.e. bonds, CDs, etc.,).
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @class
 * @augments BaseSellInvestmentTransaction
 */
function SellDebtTransaction () {
  BaseSellInvestmentTransaction.call(this, TransactionType.SELL_DEBT);

  /**
   * @name SellDebtTransaction#sellReason
   * @type String
   * @access private
   */
  this.sellReason = null;

  /**
   * @name SellDebtTransaction#accruedInterest
   * @type Double
   * @access private
   */
  this.accruedInterest = null;
}

inherit(SellDebtTransaction, "extends", BaseSellInvestmentTransaction);


Aggregate.add("SELLDEBT", SellDebtTransaction);


/**
 * Gets the reason for the sale. One of "CALL" (the debt was called), "SELL" (the debt was sold),
 * "MATURITY" (the debt reached maturity).
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @return {String} The reason for the sale
 */
SellDebtTransaction.prototype.getSellReason = function() {
  return this.sellReason;
};
Element.add(SellDebtTransaction, {name: "SELLREASON", order: 30, attributeType: String, readMethod: "getSellReason", writeMethod: "setSellReason"});


/**
 * Sets the reason for the sale. One of "CALL" (the debt was called), "SELL" (the debt was sold),
 * "MATURITY" (the debt reached maturity).
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @param {String} sellReason The reason for the sale
 */
SellDebtTransaction.prototype.setSellReason = function(sellReason) {
  this.sellReason = sellReason;
};


/**
 * Gets the sell reason as one of the well-known types.
 *
 * @return {SellDebtReason} the sell reason or null if it's not well known
 */
SellDebtTransaction.prototype.getSellReasonEnum = function() {
  return SellDebtReason.fromOfx(this.getSellReason());
};


/**
 * Gets the amount of accrued interest on the debt. This is an optional field according to the
 * OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @return {Double} the amount of accrued interest
 */
SellDebtTransaction.prototype.getAccruedInterest = function() {
  return this.accruedInterest;
};
Element.add(SellDebtTransaction, {name: "ACCRDINT", order: 40, attributeType: Number, readMethod: "getAccruedInterest", writeMethod: "setAccruedInterest"});


/**
 * Sets the amount of accrued interest on the debt. This is an optional field according to the
 * OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @param {Double} accruedInterest the amount of accrued interest
 */
SellDebtTransaction.prototype.setAccruedInterest = function(accruedInterest) {
  this.accruedInterest = accruedInterest;
};




module.exports = SellDebtTransaction;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","./BaseSellInvestmentTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BaseSellInvestmentTransaction.js","./SellDebtReason":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/SellDebtReason.js","./TransactionType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/TransactionType.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/SellInvestmentTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var SubAccountType = require("../accounts/SubAccountType");
var Inv401KSource = require("../positions/Inv401KSource");
var Aggregate = require("../../../../meta/Aggregate");
var ChildAggregate = require("../../../../meta/ChildAggregate");
var Element = require("../../../../meta/Element");
var SecurityId = require("../../seclist/SecurityId");
var OriginalCurrency = require("./OriginalCurrency");
var InvestmentTransaction = require("./InvestmentTransaction");

/**
 * Sell investment transaction aggregate ("INVSELL").
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @class
 */
function SellInvestmentTransaction () {

  /**
   * @name SellInvestmentTransaction#investmentTransaction
   * @type InvestmentTransaction
   * @access private
   */
  this.investmentTransaction = null;

  /**
   * @name SellInvestmentTransaction#securityId
   * @type SecurityId
   * @access private
   */
  this.securityId = null;

  /**
   * @name SellInvestmentTransaction#units
   * @type Double
   * @access private
   */
  this.units = null;

  /**
   * @name SellInvestmentTransaction#unitPrice
   * @type Double
   * @access private
   */
  this.unitPrice = null;

  /**
   * @name SellInvestmentTransaction#markdown
   * @type Double
   * @access private
   */
  this.markdown = null;

  /**
   * @name SellInvestmentTransaction#commission
   * @type Double
   * @access private
   */
  this.commission = null;

  /**
   * @name SellInvestmentTransaction#taxes
   * @type Double
   * @access private
   */
  this.taxes = null;

  /**
   * @name SellInvestmentTransaction#fees
   * @type Double
   * @access private
   */
  this.fees = null;

  /**
   * @name SellInvestmentTransaction#load
   * @type Double
   * @access private
   */
  this.load = null;

  /**
   * @name SellInvestmentTransaction#withholding
   * @type Double
   * @access private
   */
  this.withholding = null;

  /**
   * @name SellInvestmentTransaction#taxExempt
   * @type Boolean
   * @access private
   */
  this.taxExempt = null;

  /**
   * @name SellInvestmentTransaction#total
   * @type Double
   * @access private
   */
  this.total = null;

  /**
   * @name SellInvestmentTransaction#gain
   * @type Double
   * @access private
   */
  this.gain = null;

  /**
   * @name SellInvestmentTransaction#currencyCode
   * @type String
   * @access private
   */
  this.currencyCode = null;

  /**
   * @name SellInvestmentTransaction#originalCurrencyInfo
   * @type OriginalCurrency
   * @access private
   */
  this.originalCurrencyInfo = null;

  /**
   * @name SellInvestmentTransaction#subAccountSecurity
   * @type String
   * @access private
   */
  this.subAccountSecurity = null;

  /**
   * @name SellInvestmentTransaction#subAccountFund
   * @type String
   * @access private
   */
  this.subAccountFund = null;

  /**
   * @name SellInvestmentTransaction#loanId
   * @type String
   * @access private
   */
  this.loanId = null;

  /**
   * @name SellInvestmentTransaction#stateWithholding
   * @type Double
   * @access private
   */
  this.stateWithholding = null;

  /**
   * @name SellInvestmentTransaction#penalty
   * @type Double
   * @access private
   */
  this.penalty = null;

  /**
   * @name SellInvestmentTransaction#inv401kSource
   * @type String
   * @access private
   */
  this.inv401kSource = null;
}



Aggregate.add("INVSELL", SellInvestmentTransaction);


/**
 * Gets the investment transaction child aggregate.
 *
 * @return {InvestmentTransaction} the investment transaction child aggregate
 */
SellInvestmentTransaction.prototype.getInvestmentTransaction = function() {
  return this.investmentTransaction;
};
ChildAggregate.add(SellInvestmentTransaction, {order: 10, attributeType: InvestmentTransaction, readMethod: "getInvestmentTransaction", writeMethod: "setInvestmentTransaction"});


/**
 * Sets the investment transaction child aggregate.
 *
 * @param {InvestmentTransaction} investmentTransaction the investment transaction child aggregate
 */
SellInvestmentTransaction.prototype.setInvestmentTransaction = function(investmentTransaction) {
  this.investmentTransaction = investmentTransaction;
};


/**
 * Gets the id of the security that was sold. This is a required field according to the OFX
 * spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {SecurityId} the security id of the security that was sold
 */
SellInvestmentTransaction.prototype.getSecurityId = function() {
  return this.securityId;
};
ChildAggregate.add(SellInvestmentTransaction, {required: true, order: 20, attributeType: SecurityId, readMethod: "getSecurityId", writeMethod: "setSecurityId"});


/**
 * Sets the id of the security that was sold. This is a required field according to the OFX
 * spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {SecurityId} securityId the security id of the security that was sold
 */
SellInvestmentTransaction.prototype.setSecurityId = function(securityId) {
  this.securityId = securityId;
};


/**
 * Gets the number of units of the security that was sold. For security-based actions other
 * than stock splits, this is the quantity sold. For stocks, mutual funds, and others, this
 * is the number of shares. For bonds, this is the face value. For options, this is the number of
 * contacts. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the number of units sold
 */
SellInvestmentTransaction.prototype.getUnits = function() {
  return this.units;
};
Element.add(SellInvestmentTransaction, {name: "UNITS", required: true, order: 30, attributeType: Number, readMethod: "getUnits", writeMethod: "setUnits"});


/**
 * Sets the number of units of the security that was sold. For security-based actions other
 * than stock splits, this is the quantity sold. For stocks, mutual funds, and others, this
 * is the number of shares. For bonds, this is the face value. For options, this is the number of
 * contacts. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {Double} units the number of units sold
 */
SellInvestmentTransaction.prototype.setUnits = function(units) {
  this.units = units;
};


/**
 * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
 * share price. For bonds, this is the percentage of par. For options, this is the per share (not
 * per contact) price. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the per unit price
 */
SellInvestmentTransaction.prototype.getUnitPrice = function() {
  return this.unitPrice;
};
Element.add(SellInvestmentTransaction, {name: "UNITPRICE", required: true, order: 40, attributeType: Number, readMethod: "getUnitPrice", writeMethod: "setUnitPrice"});


/**
 * Sets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
 * share price. For bonds, this is the percentage of par. For options, this is the per share (not
 * per contact) price. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {Double} unitPrice the per unit price
 */
SellInvestmentTransaction.prototype.setUnitPrice = function(unitPrice) {
  this.unitPrice = unitPrice;
};


/**
 * Gets the portion of the unit price that is attributed to the dealer markdown. This is an
 * optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the per unit markedown price
 */
SellInvestmentTransaction.prototype.getMarkdown = function() {
  return this.markdown;
};
Element.add(SellInvestmentTransaction, {name: "MARKDOWN", order: 50, attributeType: Number, readMethod: "getMarkdown", writeMethod: "setMarkdown"});


/**
 * Sets the portion of the unit price that is attributed to the dealer markdown. This is an
 * optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {Double} markdown the per unit markedown price
 */
SellInvestmentTransaction.prototype.setMarkdown = function(markdown) {
  this.markdown = markdown;
};


/**
 * Gets the transaction commission for the sale. This is an optional field according to the
 * OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the transaction commision
 */
SellInvestmentTransaction.prototype.getCommission = function() {
  return this.commission;
};
Element.add(SellInvestmentTransaction, {name: "COMMISSION", order: 60, attributeType: Number, readMethod: "getCommission", writeMethod: "setCommission"});


/**
 * Sets the transaction commission for the sale. This is an optional field according to the
 * OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {Double} commission the transaction commision
 */
SellInvestmentTransaction.prototype.setCommission = function(commission) {
  this.commission = commission;
};


/**
 * Gets the taxes for the sale. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the transaction taxes
 */
SellInvestmentTransaction.prototype.getTaxes = function() {
  return this.taxes;
};
Element.add(SellInvestmentTransaction, {name: "TAXES", order: 70, attributeType: Number, readMethod: "getTaxes", writeMethod: "setTaxes"});


/**
 * Sets the taxes for the sale. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {Double} taxes the transaction taxes
 */
SellInvestmentTransaction.prototype.setTaxes = function(taxes) {
  this.taxes = taxes;
};


/**
 * Gets the fees for the sale. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the transaction fees
 */
SellInvestmentTransaction.prototype.getFees = function() {
  return this.fees;
};
Element.add(SellInvestmentTransaction, {name: "FEES", order: 80, attributeType: Number, readMethod: "getFees", writeMethod: "setFees"});


/**
 * Sets the fees for the sale. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {Double} fees the transaction fees
 */
SellInvestmentTransaction.prototype.setFees = function(fees) {
  this.fees = fees;
};


/**
 * Gets the load for the sale. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the load
 */
SellInvestmentTransaction.prototype.getLoad = function() {
  return this.load;
};
Element.add(SellInvestmentTransaction, {name: "LOAD", order: 90, attributeType: Number, readMethod: "getLoad", writeMethod: "setLoad"});


/**
 * Sets the load for the sale. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {Double} load the load
 */
SellInvestmentTransaction.prototype.setLoad = function(load) {
  this.load = load;
};


/**
 * Gets the withholding for the sale. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the withholding
 */
SellInvestmentTransaction.prototype.getWithholding = function() {
  return this.withholding;
};
Element.add(SellInvestmentTransaction, {name: "WITHHOLDING", order: 93, attributeType: Number, readMethod: "getWithholding", writeMethod: "setWithholding"});


/**
 * Sets the withholding for the sale. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {Double} withholding the withholding
 */
SellInvestmentTransaction.prototype.setWithholding = function(withholding) {
  this.withholding = withholding;
};


/**
 * Gets whether the sale was tax exempt. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Boolean} whether the transaction was tax exempt
 */
SellInvestmentTransaction.prototype.getTaxExempt = function() {
  return this.taxExempt;
};
Element.add(SellInvestmentTransaction, {name: "TAXEXEMPT", order: 97, attributeType: Boolean, readMethod: "getTaxExempt", writeMethod: "setTaxExempt"});


/**
 * Sets whether the sale was tax exempt. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {Boolean} taxExempt whether the transaction was tax exempt
 */
SellInvestmentTransaction.prototype.setTaxExempt = function(taxExempt) {
  this.taxExempt = taxExempt;
};


/**
 * Gets the total for the sale. Should be equal to
 * (units * (unitPrice + markdown)) + (commision + fees + load + taxes + penalty + withholding +
 * statewithholding) according to the OFX spec. This is a required field according to the OFX
 * spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the total
 */
SellInvestmentTransaction.prototype.getTotal = function() {
  return this.total;
};
Element.add(SellInvestmentTransaction, {name: "TOTAL", required: true, order: 100, attributeType: Number, readMethod: "getTotal", writeMethod: "setTotal"});


/**
 * Sets the total for the sale. Should be equal to
 * (units * (unitPrice + markdown)) + (commision + fees + load + taxes + penalty + withholding +
 * statewithholding) according to the OFX spec. This is a required field according to the OFX
 * spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {Double} total the total
 */
SellInvestmentTransaction.prototype.setTotal = function(total) {
  this.total = total;
};


/**
 * Gets the gain sale. This is aan optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the gain for the sale
 */
SellInvestmentTransaction.prototype.getGain = function() {
  return this.gain;
};
Element.add(SellInvestmentTransaction, {name: "GAIN", order: 105, attributeType: Number, readMethod: "getGain", writeMethod: "setGain"});


/**
 * Sets the gain sale. This is aan optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {Double} gain the gain for the sale
 */
SellInvestmentTransaction.prototype.setGain = function(gain) {
  this.gain = gain;
};


/**
 * Gets the currency code for the transaction. Only one of currency code or original currency
 * code should be set according to the OFX spec. If neither are set, means the default currency.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {String} the currency code for the transaction
 */
SellInvestmentTransaction.prototype.getCurrencyCode = function() {
  return this.currencyCode;
};
Element.add(SellInvestmentTransaction, {name: "CURRENCY", order: 110, attributeType: String, readMethod: "getCurrencyCode", writeMethod: "setCurrencyCode"});


/**
 * sets the currency code for the transaction. Only one of currency code or original currency
 * code should be set according to the OFX spec. If neither are set, means the default currency.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {String} currencyCode the currency code for the transaction
 */
SellInvestmentTransaction.prototype.setCurrencyCode = function(currencyCode) {
  this.currencyCode = currencyCode;
  this.originalCurrencyInfo = null;
};


/**
 * Gets the original currency info for the transaction.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {OriginalCurrency} the original currency info for the transaction
 */
SellInvestmentTransaction.prototype.getOriginalCurrencyInfo = function() {
  return this.originalCurrencyInfo;
};
Element.add(SellInvestmentTransaction, {name: "ORIGCURRENCY", order: 120, attributeType: OriginalCurrency, readMethod: "getOriginalCurrencyInfo", writeMethod: "setOriginalCurrencyInfo"});


/**
 * Sets the original currency info for the transaction.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {OriginalCurrency} originalCurrencyInfo the original currency info for the transaction
 */
SellInvestmentTransaction.prototype.setOriginalCurrencyInfo = function(originalCurrencyInfo) {
  this.originalCurrencyInfo = originalCurrencyInfo;
  this.currencyCode = null;
};


/**
 * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {String} the sub account type
 */
SellInvestmentTransaction.prototype.getSubAccountSecurity = function() {
  return this.subAccountSecurity;
};
Element.add(SellInvestmentTransaction, {name: "SUBACCTSEC", order: 130, attributeType: String, readMethod: "getSubAccountSecurity", writeMethod: "setSubAccountSecurity"});


/**
 * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {String} subAccountSecurity the sub account type
 */
SellInvestmentTransaction.prototype.setSubAccountSecurity = function(subAccountSecurity) {
  this.subAccountSecurity = subAccountSecurity;
};


/**
 * Gets the result of getSubAccountSecurity as one of the well-known types.
 *
 * @return {SubAccountType} the type of null if it wasn't one of the well known types.
 */
SellInvestmentTransaction.prototype.getSubAccountSecurityEnum = function() {
  return SubAccountType.fromOfx(this.getSubAccountSecurity());
};


/**
 * Gets the sub account type that the security is being transfered from
 * (e.g. CASH, MARGIN, SHORT, OTHER).
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {String} the sub account fund
 */
SellInvestmentTransaction.prototype.getSubAccountFund = function() {
  return this.subAccountFund;
};
Element.add(SellInvestmentTransaction, {name: "SUBACCTFUND", order: 140, attributeType: String, readMethod: "getSubAccountFund", writeMethod: "setSubAccountFund"});


/**
 * Sets the sub account type that the security is being transfered from
 * (e.g. CASH, MARGIN, SHORT, OTHER).
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {String} subAccountFund the sub account fund
 */
SellInvestmentTransaction.prototype.setSubAccountFund = function(subAccountFund) {
  this.subAccountFund = subAccountFund;
};


/**
 * Gets the result of getSubAccountFund as one of the well-known types.
 *
 * @return {SubAccountType} the type of null if it wasn't one of the well known types
 */
SellInvestmentTransaction.prototype.getSubAccountFundEnum = function() {
  return SubAccountType.fromOfx(this.getSubAccountFund());
};


/**
 * Gets the loan id if this transaction was due to a loan or loan repayment on a 401k. This is an
 * optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {String} the loan id
 */
SellInvestmentTransaction.prototype.getLoanId = function() {
  return this.loanId;
};
Element.add(SellInvestmentTransaction, {name: "LOANID", order: 150, attributeType: String, readMethod: "getLoanId", writeMethod: "setLoanId"});


/**
 * Sets the loan id if this transaction was due to a loan or loan repayment on a 401k. This is an
 * optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {String} loanId the loan id
 */
SellInvestmentTransaction.prototype.setLoanId = function(loanId) {
  this.loanId = loanId;
};


/**
 * Gets the state withholding for the sale. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the state withholding
 */
SellInvestmentTransaction.prototype.getStateWithholding = function() {
  return this.stateWithholding;
};
Element.add(SellInvestmentTransaction, {name: "STATEWITHHOLDING", order: 160, attributeType: Number, readMethod: "getStateWithholding", writeMethod: "setStateWithholding"});


/**
 * Sets the state withholding for the sale. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {Double} stateWithholding the state withholding
 */
SellInvestmentTransaction.prototype.setStateWithholding = function(stateWithholding) {
  this.stateWithholding = stateWithholding;
};


/**
 * Gets the penalty for the sale. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the state withholding
 */
SellInvestmentTransaction.prototype.getPenalty = function() {
  return this.penalty;
};
Element.add(SellInvestmentTransaction, {name: "PENALTY", order: 170, attributeType: Number, readMethod: "getPenalty", writeMethod: "setPenalty"});


/**
 * Sets the penalty for the sale. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {Double} penalty the state withholding
 */
SellInvestmentTransaction.prototype.setPenalty = function(penalty) {
  this.penalty = penalty;
};


/**
 * Gets the 401K source for the sale. Should be one of "PRETAX", "AFTERTAX", "MATCH",
 * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
 * according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {String} the 401k source
 */
SellInvestmentTransaction.prototype.get401kSource = function() {
  return this.inv401kSource;
};
Element.add(SellInvestmentTransaction, {name: "INV401KSOURCE", order: 180, attributeType: String, readMethod: "get401kSource", writeMethod: "set401kSource"});


/**
 * Sets the 401K source for the sale. Should be one of "PRETAX", "AFTERTAX", "MATCH",
 * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
 * according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {String} inv401kSource the 401k source
 */
SellInvestmentTransaction.prototype.set401kSource = function(inv401kSource) {
  this.inv401kSource = inv401kSource;
};


/**
 * Gets the 401k source as one of the well-known types.
 *
 * @return {Inv401KSource} the 401k source or null if its not one of the well-known types
 */
SellInvestmentTransaction.prototype.get401kSourceEnum = function() {
  return Inv401KSource.fromOfx(this.get401kSource());
};




module.exports = SellInvestmentTransaction;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../seclist/SecurityId":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityId.js","../accounts/SubAccountType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/accounts/SubAccountType.js","../positions/Inv401KSource":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/Inv401KSource.js","./InvestmentTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/InvestmentTransaction.js","./OriginalCurrency":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/OriginalCurrency.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/SellMutualFundTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var Aggregate = require("../../../../meta/Aggregate");
var Element = require("../../../../meta/Element");
var BaseSellInvestmentTransaction = require("./BaseSellInvestmentTransaction");
var TransactionType = require("./TransactionType");
var SellType = require("./SellType");

/**
 * Transaction for selling mutual fund.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @class
 * @augments BaseSellInvestmentTransaction
 */
function SellMutualFundTransaction () {
  BaseSellInvestmentTransaction.call(this, TransactionType.SELL_MUTUAL_FUND);

  /**
   * @name SellMutualFundTransaction#sellType
   * @type String
   * @access private
   */
  this.sellType = null;

  /**
   * @name SellMutualFundTransaction#averageCostBasis
   * @type Double
   * @access private
   */
  this.averageCostBasis = null;

  /**
   * @name SellMutualFundTransaction#relatedTransactionId
   * @type String
   * @access private
   */
  this.relatedTransactionId = null;
}

inherit(SellMutualFundTransaction, "extends", BaseSellInvestmentTransaction);


Aggregate.add("SELLMF", SellMutualFundTransaction);


/**
 * Gets the type of sale. One of "SELL" or "SELLSHORT".
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @return {String} The type of sale
 */
SellMutualFundTransaction.prototype.getSellType = function() {
  return this.sellType;
};
Element.add(SellMutualFundTransaction, {name: "SELLTYPE", order: 20, attributeType: String, readMethod: "getSellType", writeMethod: "setSellType"});


/**
 * Sets the type of sale. One of "SELL" or "SELLSHORT".
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @param {String} sellType The type of sale
 */
SellMutualFundTransaction.prototype.setSellType = function(sellType) {
  this.sellType = sellType;
};


/**
 * Gets the sell type as one of the well-known types.
 *
 * @return {SellType} the type of sale or null if it's not known.
 */
SellMutualFundTransaction.prototype.getSellTypeEnum = function() {
  return SellType.fromOfx(this.sellType);
};


/**
 * Gets the average cost basis of the sale.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @return {Double} The average cost basis of the sale
 */
SellMutualFundTransaction.prototype.getAverageCostBasis = function() {
  return this.averageCostBasis;
};
Element.add(SellMutualFundTransaction, {name: "AVGCOSTBASIS", order: 30, attributeType: Number, readMethod: "getAverageCostBasis", writeMethod: "setAverageCostBasis"});


/**
 * Sets the average cost basis of the sale.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @param {Double} averageCostBasis The average cost basis of the sale
 */
SellMutualFundTransaction.prototype.setAverageCostBasis = function(averageCostBasis) {
  this.averageCostBasis = averageCostBasis;
};


/**
 * Gets any related transaction id for a mutual fund sale (e.g. for a mutual fund exchange).
 * This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @return {String} the related transaction id
 */
SellMutualFundTransaction.prototype.getRelatedTransactionId = function() {
  return this.relatedTransactionId;
};
Element.add(SellMutualFundTransaction, {name: "RELFITID", order: 40, attributeType: String, readMethod: "getRelatedTransactionId", writeMethod: "setRelatedTransactionId"});


/**
 * Sets any related transaction id for a mutual fund sale (e.g. for a mutual fund exchange).
 * This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @param {String} relatedTransactionId the related transaction id
 */
SellMutualFundTransaction.prototype.setRelatedTransactionId = function(relatedTransactionId) {
  this.relatedTransactionId = relatedTransactionId;
};




module.exports = SellMutualFundTransaction;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","./BaseSellInvestmentTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BaseSellInvestmentTransaction.js","./SellType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/SellType.js","./TransactionType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/TransactionType.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/SellOptionTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";

var inherit = require("../../../../util/inherit");

var ShortOptionSecurity = require("../positions/ShortOptionSecurity");
var Aggregate = require("../../../../meta/Aggregate");
var Element = require("../../../../meta/Element");
var BaseSellInvestmentTransaction = require("./BaseSellInvestmentTransaction");
var TransactionType = require("./TransactionType");
var OptionSellType = require("./OptionSellType");
var RelatedOptionType = require("./RelatedOptionType");

/**
 * Transaction for selling options.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @class
 * @augments BaseSellInvestmentTransaction
 */
function SellOptionTransaction () {
  BaseSellInvestmentTransaction.call(this, TransactionType.SELL_OPTION);

  /**
   * @name SellOptionTransaction#optionSellType
   * @type String
   * @access private
   */
  this.optionSellType = null;

  /**
   * @name SellOptionTransaction#sharesPerContact
   * @type Integer
   * @access private
   */
  this.sharesPerContact = null;

  /**
   * @name SellOptionTransaction#relatedTransactionId
   * @type String
   * @access private
   */
  this.relatedTransactionId = null;

  /**
   * @name SellOptionTransaction#relatedType
   * @type String
   * @access private
   */
  this.relatedType = null;

  /**
   * @name SellOptionTransaction#secured
   * @type String
   * @access private
   */
  this.secured = null;
}

inherit(SellOptionTransaction, "extends", BaseSellInvestmentTransaction);


Aggregate.add("SELLOPT", SellOptionTransaction);


/**
 * Gets the type of option sale (i.e. "SELLTOCLOSE" or "SELLTOOPEN"). This is a required field
 * according to the OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @return {String} the option sell type
 */
SellOptionTransaction.prototype.getOptionSellType = function() {
  return this.optionSellType;
};
Element.add(SellOptionTransaction, {name: "OPTSELLTYPE", required: true, order: 20, attributeType: String, readMethod: "getOptionSellType", writeMethod: "setOptionSellType"});


/**
 * Sets the type of option sale (i.e. "SELLTOCLOSE" or "SELLTOOPEN"). This is a required field
 * according to the OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @param {String} optionSellType the option sell type
 */
SellOptionTransaction.prototype.setOptionSellType = function(optionSellType) {
  this.optionSellType = optionSellType;
};


/**
 * Gets the option sell type as one of the well-known types.
 *
 * @return {OptionSellType} the type of sale or null if it's not known.
 */
SellOptionTransaction.prototype.getOptionSellTypeEnum = function() {
  return OptionSellType.fromOfx(this.optionSellType);
};


/**
 * Gets the number of shares per contact. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @return {Integer} the number of shares per contact
 */
SellOptionTransaction.prototype.getSharesPerContact = function() {
  return this.sharesPerContact;
};
Element.add(SellOptionTransaction, {name: "SHPERCTRCT", required: true, order: 30, attributeType: Number, readMethod: "getSharesPerContact", writeMethod: "setSharesPerContact"});


/**
 * Sets the number of shares per contact. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @param {Integer} sharesPerContact the number of shares per contact
 */
SellOptionTransaction.prototype.setSharesPerContact = function(sharesPerContact) {
  this.sharesPerContact = sharesPerContact;
};


/**
 * Gets a related transaction for the option sale for complex option transactions. This
 * is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @return {String} The related transaction id
 */
SellOptionTransaction.prototype.getRelatedTransactionId = function() {
  return this.relatedTransactionId;
};
Element.add(SellOptionTransaction, {name: "RELFITID", order: 40, attributeType: String, readMethod: "getRelatedTransactionId", writeMethod: "setRelatedTransactionId"});


/**
 * Sets a related transaction for the option sale for complex option transactions. This
 * is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @param {String} relatedTransactionId The related transaction id
 */
SellOptionTransaction.prototype.setRelatedTransactionId = function(relatedTransactionId) {
  this.relatedTransactionId = relatedTransactionId;
};


/**
 * Gets the type for the related transaction. One of "SPREAD", "STRADDLE", "NONE", "OTHER". This
 * is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @return {String} The related tansaction type
 */
SellOptionTransaction.prototype.getRelatedType = function() {
  return this.relatedType;
};
Element.add(SellOptionTransaction, {name: "RELTYPE", order: 50, attributeType: String, readMethod: "getRelatedType", writeMethod: "setRelatedType"});


/**
 * Sets the type for the related transaction. One of "SPREAD", "STRADDLE", "NONE", "OTHER". This
 * is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @param {String} relatedType The related tansaction type
 */
SellOptionTransaction.prototype.setRelatedType = function(relatedType) {
  this.relatedType = relatedType;
};


/**
 * Gets the related transaction as one of the well-known types.
 *
 * @return {RelatedOptionType} the related tansaction type or null if it's not well known
 */
SellOptionTransaction.prototype.getRelatedTypeEnum = function() {
  return RelatedOptionType.fromOfx(this.getRelatedType());
};


/**
 * Gets how the option sale is secured. One of "NAKED" or "COVERED". This is an optional field
 * according to the OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @return {String} how the option sale is secured
 */
SellOptionTransaction.prototype.getSecured = function() {
  return this.secured;
};
Element.add(SellOptionTransaction, {name: "SECURED", order: 60, attributeType: String, readMethod: "getSecured", writeMethod: "setSecured"});


/**
 * Sets how the option sale is secured. One of "NAKED" or "COVERED". This is an optional field
 * according to the OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @param {String} secured how the option sale is secured
 */
SellOptionTransaction.prototype.setSecured = function(secured) {
  this.secured = secured;
};


/**
 * Gets how the option sale is secured as one of the well-known types.
 *
 * @return {ShortOptionSecurity} the type indicating how the option is secured or null if it's not well known.
 */
SellOptionTransaction.prototype.getSecuredEnum = function() {
  return  ShortOptionSecurity.fromOfx(this.getSecured());
};




module.exports = SellOptionTransaction;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../positions/ShortOptionSecurity":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/ShortOptionSecurity.js","./BaseSellInvestmentTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BaseSellInvestmentTransaction.js","./OptionSellType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/OptionSellType.js","./RelatedOptionType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/RelatedOptionType.js","./TransactionType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/TransactionType.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/SellOtherTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var Aggregate = require("../../../../meta/Aggregate");
var BaseSellInvestmentTransaction = require("./BaseSellInvestmentTransaction");
var TransactionType = require("./TransactionType");

/**
 * Transaction for buying other types of securities.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @class
 * @augments BaseSellInvestmentTransaction
 */
function SellOtherTransaction () {
  BaseSellInvestmentTransaction.call(this, TransactionType.SELL_OTHER);
}

inherit(SellOtherTransaction, "extends", BaseSellInvestmentTransaction);


Aggregate.add("SELLOTHER", SellOtherTransaction);


module.exports = SellOtherTransaction;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","./BaseSellInvestmentTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BaseSellInvestmentTransaction.js","./TransactionType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/TransactionType.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/SellStockTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var Aggregate = require("../../../../meta/Aggregate");
var Element = require("../../../../meta/Element");
var BaseSellInvestmentTransaction = require("./BaseSellInvestmentTransaction");
var TransactionType = require("./TransactionType");
var SellType = require("./SellType");

/**
 * Transaction for selling stock.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @class
 * @augments BaseSellInvestmentTransaction
 */
function SellStockTransaction () {
  BaseSellInvestmentTransaction.call(this, TransactionType.SELL_STOCK);

  /**
   * @name SellStockTransaction#sellType
   * @type String
   * @access private
   */
  this.sellType = null;
}

inherit(SellStockTransaction, "extends", BaseSellInvestmentTransaction);


Aggregate.add("SELLSTOCK", SellStockTransaction);


/**
 * Gets the type of stock sale (i.e. "SELL" or "SELLSHORT"). This is a required field
 * according to the OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @return {String} the sell type
 */
SellStockTransaction.prototype.getSellType = function() {
  return this.sellType;
};
Element.add(SellStockTransaction, {name: "SELLTYPE", required: true, order: 20, attributeType: String, readMethod: "getSellType", writeMethod: "setSellType"});


/**
 * Sets the type of stock sale (i.e. "SELL" or "SELLSHORT"). This is a required field
 * according to the OFX spec.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @param {String} sellType the sell type
 */
SellStockTransaction.prototype.setSellType = function(sellType) {
  this.sellType = sellType;
};


/**
 * Gets the sell type as one of the well-known types.
 *
 * @return {SellType} the type of sale or null if it's not known
 */
SellStockTransaction.prototype.getSellTypeEnum = function() {
  return SellType.fromOfx(this.sellType);
};




module.exports = SellStockTransaction;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","./BaseSellInvestmentTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BaseSellInvestmentTransaction.js","./SellType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/SellType.js","./TransactionType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/TransactionType.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/SellType.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * Type of sale for stocks and mutual funds.
 *
 * @enum
 */
var SellType = {
  SELL: 0,
  SELL_SHORT: 1,

  fromOfx: function(/*String*/ ofxVal) {
    if ("SELL".equals(ofxVal)) {
      return SellType.SELL;
    } else if ("SELLSHORT".equals(ofxVal)) {
      return SellType.SELL_SHORT;
    } else {
      return null;
    }
  }
};


module.exports = SellType;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/SplitTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var SubAccountType = require("../accounts/SubAccountType");
var Inv401KSource = require("../positions/Inv401KSource");
var Aggregate = require("../../../../meta/Aggregate");
var ChildAggregate = require("../../../../meta/ChildAggregate");
var Element = require("../../../../meta/Element");
var BaseOtherInvestmentTransaction = require("./BaseOtherInvestmentTransaction");
var TransactionType = require("./TransactionType");
var SecurityId = require("../../seclist/SecurityId");
var OriginalCurrency = require("./OriginalCurrency");

/**
 * Transaction for a stock split.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @class
 * @augments BaseOtherInvestmentTransaction
 */
function SplitTransaction () {
  BaseOtherInvestmentTransaction.call(this, TransactionType.SPLIT);

  /**
   * @name SplitTransaction#securityId
   * @type SecurityId
   * @access private
   */
  this.securityId = null;

  /**
   * @name SplitTransaction#subAccountSecurity
   * @type String
   * @access private
   */
  this.subAccountSecurity = null;

  /**
   * @name SplitTransaction#oldUnits
   * @type Double
   * @access private
   */
  this.oldUnits = null;

  /**
   * @name SplitTransaction#newUnits
   * @type Double
   * @access private
   */
  this.newUnits = null;

  /**
   * @name SplitTransaction#numerator
   * @type Double
   * @access private
   */
  this.numerator = null;

  /**
   * @name SplitTransaction#denominator
   * @type Double
   * @access private
   */
  this.denominator = null;

  /**
   * @name SplitTransaction#currencyCode
   * @type String
   * @access private
   */
  this.currencyCode = null;

  /**
   * @name SplitTransaction#originalCurrencyInfo
   * @type OriginalCurrency
   * @access private
   */
  this.originalCurrencyInfo = null;

  /**
   * @name SplitTransaction#cashForFractionalUnits
   * @type Double
   * @access private
   */
  this.cashForFractionalUnits = null;

  /**
   * @name SplitTransaction#subAccountFund
   * @type String
   * @access private
   */
  this.subAccountFund = null;

  /**
   * @name SplitTransaction#inv401kSource
   * @type String
   * @access private
   */
  this.inv401kSource = null;
}

inherit(SplitTransaction, "extends", BaseOtherInvestmentTransaction);


Aggregate.add("SPLIT", SplitTransaction);


/**
 * Gets the id of the security for the split. This is a required field according to the OFX
 * spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {SecurityId} the security id of the security for the expsense
 */
SplitTransaction.prototype.getSecurityId = function() {
  return this.securityId;
};
ChildAggregate.add(SplitTransaction, {required: true, order: 20, attributeType: SecurityId, readMethod: "getSecurityId", writeMethod: "setSecurityId"});


/**
 * Sets the id of the security for the split. This is a required field according to the OFX
 * spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {SecurityId} securityId the security id of the security for the expsense
 */
SplitTransaction.prototype.setSecurityId = function(securityId) {
  this.securityId = securityId;
};


/**
 * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER). This is a
 * required field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {String} the sub account type
 */
SplitTransaction.prototype.getSubAccountSecurity = function() {
  return this.subAccountSecurity;
};
Element.add(SplitTransaction, {name: "SUBACCTSEC", order: 30, attributeType: String, readMethod: "getSubAccountSecurity", writeMethod: "setSubAccountSecurity"});


/**
 * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER). This is a
 * required field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {String} subAccountSecurity the sub account type
 */
SplitTransaction.prototype.setSubAccountSecurity = function(subAccountSecurity) {
  this.subAccountSecurity = subAccountSecurity;
};


/**
 * Gets the result of getSubAccountSecurity as one of the well-known types.
 *
 * @return {SubAccountType} the type of null if it wasn't one of the well known types.
 */
SplitTransaction.prototype.getSubAccountSecurityEnum = function() {
  return SubAccountType.fromOfx(this.getSubAccountSecurity());
};


/**
 * Gets the old number of units for the split. This is a required field according to the OFX
 * spec.
 *
 * @return {Double} the old number of units.
 */
SplitTransaction.prototype.getOldUnits = function() {
  return this.oldUnits;
};
Element.add(SplitTransaction, {name: "OLDUNITS", order: 40, attributeType: Number, readMethod: "getOldUnits", writeMethod: "setOldUnits"});


/**
 * Sets the old number of units for the split. This is a  equired field according to the OFX
 * spec.
 *
 * @param {Double} oldUnits the old number of units.
 */
SplitTransaction.prototype.setOldUnits = function(oldUnits) {
  this.oldUnits = oldUnits;
};


/**
 * Gets the new number of units for the split. This is a required field according to the OFX
 * spec.
 *
 * @return {Double} the new number of units.
 */
SplitTransaction.prototype.getNewUnits = function() {
  return this.newUnits;
};
Element.add(SplitTransaction, {name: "NEWUNITS", order: 50, attributeType: Number, readMethod: "getNewUnits", writeMethod: "setNewUnits"});


/**
 * Sets the new number of units for the split. This is a required field according to the OFX
 * spec.
 *
 * @param {Double} newUnits the new number of units.
 */
SplitTransaction.prototype.setNewUnits = function(newUnits) {
  this.newUnits = newUnits;
};


/**
 * Gets the numerator for the split ratio. This is a required field according to the OFX spec.
 *
 * @return {Double} the numerator for the split ratio
 */
SplitTransaction.prototype.getNumerator = function() {
  return this.numerator;
};
Element.add(SplitTransaction, {name: "NUMERATOR", order: 60, attributeType: Number, readMethod: "getNumerator", writeMethod: "setNumerator"});


/**
 * Sets the numerator for the split ratio. This is a required field according to the OFX spec.
 *
 * @param {Double} numerator the numerator for the split ratio
 */
SplitTransaction.prototype.setNumerator = function(numerator) {
  this.numerator = numerator;
};


/**
 * Gets the denominator for the split ratio. This is a required field according to the OFX spec.
 *
 * @return {Double} the numerator for the split ratio
 */
SplitTransaction.prototype.getDenominator = function() {
  return this.denominator;
};
Element.add(SplitTransaction, {name: "DENOMINATOR", order: 70, attributeType: Number, readMethod: "getDenominator", writeMethod: "setDenominator"});


/**
 * Sets the denominator for the split ratio. This is a required field according to the OFX spec.
 *
 * @param {Double} denominator the numerator for the split ratio
 */
SplitTransaction.prototype.setDenominator = function(denominator) {
  this.denominator = denominator;
};


/**
 * Gets the currency code for the transaction. Only one of currency code or original currency
 * code should be set according to the OFX spec. If neither are set, means the default currency.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {String} the currency code for the transaction
 */
SplitTransaction.prototype.getCurrencyCode = function() {
  return this.currencyCode;
};
Element.add(SplitTransaction, {name: "CURRENCY", order: 80, attributeType: String, readMethod: "getCurrencyCode", writeMethod: "setCurrencyCode"});


/**
 * sets the currency code for the transaction. Only one of currency code or original currency
 * code should be set according to the OFX spec. If neither are set, means the default currency.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {void} the currency code for the transaction
 */
SplitTransaction.prototype.setCurrencyCode = function(/*String*/ currencyCode) {
  this.currencyCode = currencyCode;
  this.originalCurrencyInfo = null;
};


/**
 * Gets the original currency info for the transaction.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {OriginalCurrency} the original currency info for the transaction
 */
SplitTransaction.prototype.getOriginalCurrencyInfo = function() {
  return this.originalCurrencyInfo;
};
Element.add(SplitTransaction, {name: "ORIGCURRENCY", order: 90, attributeType: OriginalCurrency, readMethod: "getOriginalCurrencyInfo", writeMethod: "setOriginalCurrencyInfo"});


/**
 * Sets the original currency info for the transaction.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {void} the original currency info for the transaction
 */
SplitTransaction.prototype.setOriginalCurrencyInfo = function(/*OriginalCurrency*/ originalCurrencyInfo) {
  this.originalCurrencyInfo = originalCurrencyInfo;
  this.currencyCode = null;
};


/**
 * Gets the cash for fractional units.
 *
 * @return {Double} the cash for fractional units
 */
SplitTransaction.prototype.getCashForFractionalUnits = function() {
  return this.cashForFractionalUnits;
};
Element.add(SplitTransaction, {name: "FRACCASH", order: 100, attributeType: Number, readMethod: "getCashForFractionalUnits", writeMethod: "setCashForFractionalUnits"});


/**
 * Sets the cash for fractional units.
 *
 * @param {Double} cashForFractionalUnits the cash for fractional units
 */
SplitTransaction.prototype.setCashForFractionalUnits = function(cashForFractionalUnits) {
  this.cashForFractionalUnits = cashForFractionalUnits;
};


/**
 * Gets the sub account type for the fund. (e.g. CASH, MARGIN, SHORT, OTHER).
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {String} the sub account fund
 */
SplitTransaction.prototype.getSubAccountFund = function() {
  return this.subAccountFund;
};
Element.add(SplitTransaction, {name: "SUBACCTFUND", order: 110, attributeType: String, readMethod: "getSubAccountFund", writeMethod: "setSubAccountFund"});


/**
 * Sets the sub account type for the fund. (e.g. CASH, MARGIN, SHORT, OTHER).
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {String} subAccountFund the sub account fund
 */
SplitTransaction.prototype.setSubAccountFund = function(subAccountFund) {
  this.subAccountFund = subAccountFund;
};


/**
 * Gets the result of getSubAccountFund as one of the well-known types.
 *
 * @return {SubAccountType} the type of null if it wasn't one of the well known types
 */
SplitTransaction.prototype.getSubAccountFundEnum = function() {
  return SubAccountType.fromOfx(this.getSubAccountFund());
};


/**
 * Gets the 401K source for the transaction. Should be one of "PRETAX", "AFTERTAX", "MATCH",
 * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
 * according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {String} the 401k source
 */
SplitTransaction.prototype.get401kSource = function() {
  return this.inv401kSource;
};
Element.add(SplitTransaction, {name: "INV401KSOURCE", order: 120, attributeType: String, readMethod: "get401kSource", writeMethod: "set401kSource"});


/**
 * Sets the 401K source for the transaction. Should be one of "PRETAX", "AFTERTAX", "MATCH",
 * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
 * according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {String} inv401kSource the 401k source
 */
SplitTransaction.prototype.set401kSource = function(inv401kSource) {
  this.inv401kSource = inv401kSource;
};


/**
 * Gets the 401k source as one of the well-known types.
 *
 * @return {Inv401KSource} the 401k source or null if its not one of the well-known types
 */
SplitTransaction.prototype.get401kSourceEnum = function() {
  return Inv401KSource.fromOfx(this.get401kSource());
};




module.exports = SplitTransaction;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../../seclist/SecurityId":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityId.js","../accounts/SubAccountType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/accounts/SubAccountType.js","../positions/Inv401KSource":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/Inv401KSource.js","./BaseOtherInvestmentTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BaseOtherInvestmentTransaction.js","./OriginalCurrency":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/OriginalCurrency.js","./TransactionType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/TransactionType.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/TransactionType.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * Type of investment transaction.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @enum
 */
var TransactionType = {

  BUY_DEBT: 0,
  BUY_MUTUAL_FUND: 1,
  BUY_OPTION: 2,
  BUY_OTHER: 3,
  BUY_STOCK: 4,
  CLOSE_OPTION: 5,
  INCOME: 6,
  INVESTMENT_EXPENSE: 7,
  JOURNAL_FUND: 8,
  JOURNAL_SECURITY: 9,
  MARGIN_INTEREST: 10,
  REINVEST_INCOME: 11,
  RETURN_OF_CAPITAL: 12,
  SELL_DEBT: 13,
  SELL_MUTUAL_FUND: 14,
  SELL_OPTION: 15,
  SELL_OTHER: 16,
  SELL_STOCK: 17,
  SPLIT: 18,
  TRANSFER: 19
};


module.exports = TransactionType;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/TransactionWithSecurity.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * Interface for transactions that have a security associated with them.
 *
 * @class
 */
function TransactionWithSecurity() {
}

/**
 * Gets the security for the transaction.
 *
 * @return {SecurityId} the security id for the transaction
 */
TransactionWithSecurity.prototype.getSecurityId = function() { throw new Error("not implemented"); };


module.exports = TransactionWithSecurity;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/TransferAction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * Type of transfer.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @enum
 */
var TransferAction = {
  IN: 0,
  OUT: 1,

  fromOfx: function(/*String*/ ofxVal) {
    if ("IN".equals(ofxVal)) {
      return TransferAction.IN;
    } else if ("OUT".equals(ofxVal)) {
      return TransferAction.OUT;
    } else {
      return null;
    }
  }
};


module.exports = TransferAction;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/TransferInvestmentTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var SubAccountType = require("../accounts/SubAccountType");
var Inv401KSource = require("../positions/Inv401KSource");
var PositionType = require("../positions/PositionType");
var Aggregate = require("../../../../meta/Aggregate");
var ChildAggregate = require("../../../../meta/ChildAggregate");
var Element = require("../../../../meta/Element");
var BaseOtherInvestmentTransaction = require("./BaseOtherInvestmentTransaction");
var TransactionType = require("./TransactionType");
var TransferAction = require("./TransferAction");
var SecurityId = require("../../seclist/SecurityId");

/**
 * Transaction for transfers.
 * @see "Section 13.9.2.4.4, OFX Spec"
 *
 * @class
 * @augments BaseOtherInvestmentTransaction
 */
function TransferInvestmentTransaction () {
  // TODO (jonp) -- INVACCTFROM
  BaseOtherInvestmentTransaction.call(this, TransactionType.TRANSFER);

  /**
   * @name TransferInvestmentTransaction#securityId
   * @type SecurityId
   * @access private
   */
  this.securityId = null;

  /**
   * @name TransferInvestmentTransaction#subAccountSecurity
   * @type String
   * @access private
   */
  this.subAccountSecurity = null;

  /**
   * @name TransferInvestmentTransaction#units
   * @type Double
   * @access private
   */
  this.units = null;

  /**
   * @name TransferInvestmentTransaction#transferAction
   * @type String
   * @access private
   */
  this.transferAction = null;

  /**
   * @name TransferInvestmentTransaction#positionType
   * @type String
   * @access private
   */
  this.positionType = null;

  /**
   * @name TransferInvestmentTransaction#averageCostBasis
   * @type Double
   * @access private
   */
  this.averageCostBasis = null;

  /**
   * @name TransferInvestmentTransaction#unitPrice
   * @type Double
   * @access private
   */
  this.unitPrice = null;

  /**
   * @name TransferInvestmentTransaction#purchaseDate
   * @type Date
   * @access private
   */
  this.purchaseDate = null;

  /**
   * @name TransferInvestmentTransaction#inv401kSource
   * @type String
   * @access private
   */
  this.inv401kSource = null;
}

inherit(TransferInvestmentTransaction, "extends", BaseOtherInvestmentTransaction);


Aggregate.add("TRANSFER", TransferInvestmentTransaction);


/**
 * Gets the id of the security that was transferred. This is a required field according to the OFX
 * spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {SecurityId} the security id of the security that was transferred
 */
TransferInvestmentTransaction.prototype.getSecurityId = function() {
  return this.securityId;
};
ChildAggregate.add(TransferInvestmentTransaction, {required: true, order: 20, attributeType: SecurityId, readMethod: "getSecurityId", writeMethod: "setSecurityId"});


/**
 * Sets the id of the security that was transferred. This is a required field according to the OFX
 * spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {SecurityId} securityId the security id of the security that was transferred
 */
TransferInvestmentTransaction.prototype.setSecurityId = function(securityId) {
  this.securityId = securityId;
};


/**
  * Gets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
  * @see "Section 13.9.2.4.3, OFX Spec"
  *
  * @return {String} the sub account type
  */
TransferInvestmentTransaction.prototype.getSubAccountSecurity = function() {
  return this.subAccountSecurity;
};
Element.add(TransferInvestmentTransaction, {name: "SUBACCTSEC", order: 30, attributeType: String, readMethod: "getSubAccountSecurity", writeMethod: "setSubAccountSecurity"});


/**
  * Sets the sub account type for the security (e.g. CASH, MARGIN, SHORT, OTHER).
  * @see "Section 13.9.2.4.3, OFX Spec"
  *
  * @param {String} subAccountSecurity the sub account type
  */
TransferInvestmentTransaction.prototype.setSubAccountSecurity = function(subAccountSecurity) {
   this.subAccountSecurity = subAccountSecurity;
 };


/**
 * Gets the result of getSubAccountSecurity as one of the well-known types.
 *
 * @return {SubAccountType} the type of null if it wasn't one of the well known types.
 */
TransferInvestmentTransaction.prototype.getSubAccountSecurityEnum = function() {
  return SubAccountType.fromOfx(this.getSubAccountSecurity());
};


/**
 * Gets the number of units of the security that was transferred. For security-based actions other
 * than stock splits, this is the quantity bought. For stocks, mutual funds, and others, this
 * is the number of shares. For bonds, this is the face value. For options, this is the number of
 * contacts. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the number of units transferred
 */
TransferInvestmentTransaction.prototype.getUnits = function() {
  return this.units;
};
Element.add(TransferInvestmentTransaction, {name: "UNITS", required: true, order: 40, attributeType: Number, readMethod: "getUnits", writeMethod: "setUnits"});


/**
 * Sets the number of units of the security that was transferred. For security-based actions other
 * than stock splits, this is the quantity bought. For stocks, mutual funds, and others, this
 * is the number of shares. For bonds, this is the face value. For options, this is the number of
 * contacts. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {Double} units the number of units transferred
 */
TransferInvestmentTransaction.prototype.setUnits = function(units) {
  this.units = units;
};


/**
 * Gets the type of transfer. One of "IN" or "OUT". This is a required field according to the
 * OFX spec.
 *
 * @return {String} the type of transfer
 */
TransferInvestmentTransaction.prototype.getTransferAction = function() {
  return this.transferAction;
};
Element.add(TransferInvestmentTransaction, {name: "TFERACTION", required: true, order: 50, attributeType: String, readMethod: "getTransferAction", writeMethod: "setTransferAction"});


/**
 * Sets the type of transfer. One of "IN" or "OUT". This is a required field according to the
 * OFX spec.
 *
 * @param {String} transferAction the type of transfer
 */
TransferInvestmentTransaction.prototype.setTransferAction = function(transferAction) {
  this.transferAction = transferAction;
};


/**
 * Gets the transfer action as one of the well-known types.
 *
 * @return {TransferAction} the type of transfer or null if it's not well known
 */
TransferInvestmentTransaction.prototype.getTransferActionEnum = function() {
  return TransferAction.fromOfx(this.getTransferAction());
};


/**
 * Gets the type of position. One of "LONG" or "SHORT". This is a required field according to the
 * OFX spec.
 *
 * @return {String} the position type
 */
TransferInvestmentTransaction.prototype.getPositionType = function() {
  return this.positionType;
};
Element.add(TransferInvestmentTransaction, {name: "POSTYPE", required: true, order: 60, attributeType: String, readMethod: "getPositionType", writeMethod: "setPositionType"});


/**
 * Sets the type of position. One of "LONG" or "SHORT". This is a required field according to the
 * OFX spec.
 *
 * @param {String} positionType the position type
 */
TransferInvestmentTransaction.prototype.setPositionType = function(positionType) {
  this.positionType = positionType;
};


/**
 * Gets the position type as one of the well-known types.
 *
 * @return {PositionType} the position type or null if it's not well known
 */
TransferInvestmentTransaction.prototype.getPositionTypeEnum = function() {
  return PositionType.fromOfx(this.getPositionType());
};


/**
 * Gets the average cost basis for the securities being transfered. This is an optional field
 * according to the ofx spec.
 *
 * @return {Double} the average cost basis
 */
TransferInvestmentTransaction.prototype.getAverageCostBasis = function() {
  return this.averageCostBasis;
};
Element.add(TransferInvestmentTransaction, {name: "AVGCOSTBASIS", order: 70, attributeType: Number, readMethod: "getAverageCostBasis", writeMethod: "setAverageCostBasis"});


/**
 * Sets the average cost basis for the securities being transfered. This is an optional field
 * according to the ofx spec.
 *
 * @param {Double} averageCostBasis the average cost basis
 */
TransferInvestmentTransaction.prototype.setAverageCostBasis = function(averageCostBasis) {
  this.averageCostBasis = averageCostBasis;
};


/**
 * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
 * share price. For bonds, this is the percentage of par. For options, this is the per share (not
 * per contact) price. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the per unit price
 */
TransferInvestmentTransaction.prototype.getUnitPrice = function() {
  return this.unitPrice;
};
Element.add(TransferInvestmentTransaction, {name: "UNITPRICE", required: true, order: 80, attributeType: Number, readMethod: "getUnitPrice", writeMethod: "setUnitPrice"});


/**
 * Sets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
 * share price. For bonds, this is the percentage of par. For options, this is the per share (not
 * per contact) price. This is a required field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {Double} unitPrice the per unit price
 */
TransferInvestmentTransaction.prototype.setUnitPrice = function(unitPrice) {
  this.unitPrice = unitPrice;
};


/**
 * Gets the original date of purchase for the securities. This is an optional field according to
 * the ofx spec.
 *
 * @return {Date} the original date of purchase
 */
TransferInvestmentTransaction.prototype.getPurchaseDate = function() {
  return this.purchaseDate;
};
Element.add(TransferInvestmentTransaction, {name: "DTPURCHASE", order: 90, attributeType: Date, readMethod: "getPurchaseDate", writeMethod: "setPurchaseDate"});


/**
 * Sets the original date of purchase for the securities. This is an optional field according to
 * the ofx spec.
 *
 * @param {Date} purchaseDate the original date of purchase
 */
TransferInvestmentTransaction.prototype.setPurchaseDate = function(purchaseDate) {
  this.purchaseDate = purchaseDate;
};


/**
 * Gets the 401K source for the transfer. Should be one of "PRETAX", "AFTERTAX", "MATCH",
 * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
 * according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {String} the state withholding
 */
TransferInvestmentTransaction.prototype.get401kSource = function() {
  return this.inv401kSource;
};
Element.add(TransferInvestmentTransaction, {name: "INV401KSOURCE", order: 100, attributeType: String, readMethod: "get401kSource", writeMethod: "set401kSource"});


/**
 * Sets the 401K source for the transfer. Should be one of "PRETAX", "AFTERTAX", "MATCH",
 * "PROFITSHARING", "ROLLOVER", "OTHERVEST", "OTHERNONVEST".  This is an optional field
 * according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {String} inv401kSource the state withholding
 */
TransferInvestmentTransaction.prototype.set401kSource = function(inv401kSource) {
  this.inv401kSource = inv401kSource;
};


/**
 * Gets the 401(k) source as one of the well-known types.
 *
 * @return {Inv401KSource} the type of close or null if it's not well known.
 */
TransferInvestmentTransaction.prototype.get401kSourceEnum = function() {
  return Inv401KSource.fromOfx(this.get401kSource());
};




module.exports = TransferInvestmentTransaction;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../../seclist/SecurityId":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityId.js","../accounts/SubAccountType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/accounts/SubAccountType.js","../positions/Inv401KSource":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/Inv401KSource.js","../positions/PositionType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/positions/PositionType.js","./BaseOtherInvestmentTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BaseOtherInvestmentTransaction.js","./TransactionType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/TransactionType.js","./TransferAction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/TransferAction.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/index.js":[function(require,module,exports){
"use strict";

module.exports = {
  BaseBuyInvestmentTransaction: require("./BaseBuyInvestmentTransaction"),
  BaseInvestmentTransaction: require("./BaseInvestmentTransaction"),
  BaseOtherInvestmentTransaction: require("./BaseOtherInvestmentTransaction"),
  BaseSellInvestmentTransaction: require("./BaseSellInvestmentTransaction"),
  BuyDebtTransaction: require("./BuyDebtTransaction"),
  BuyInvestmentTransaction: require("./BuyInvestmentTransaction"),
  BuyMutualFundTransaction: require("./BuyMutualFundTransaction"),
  BuyOptionTransaction: require("./BuyOptionTransaction"),
  BuyOtherTransaction: require("./BuyOtherTransaction"),
  BuyStockTransaction: require("./BuyStockTransaction"),
  BuyType: require("./BuyType"),
  CloseOptionAction: require("./CloseOptionAction"),
  CloseOptionTransaction: require("./CloseOptionTransaction"),
  IncomeTransaction: require("./IncomeTransaction"),
  IncomeType: require("./IncomeType"),
  InvestmentBankTransaction: require("./InvestmentBankTransaction"),
  InvestmentExpenseTransaction: require("./InvestmentExpenseTransaction"),
  InvestmentTransaction: require("./InvestmentTransaction"),
  InvestmentTransactionList: require("./InvestmentTransactionList"),
  JournalFundTransaction: require("./JournalFundTransaction"),
  JournalSecurityTransaction: require("./JournalSecurityTransaction"),
  MarginInterestTransaction: require("./MarginInterestTransaction"),
  OptionBuyType: require("./OptionBuyType"),
  OptionSellType: require("./OptionSellType"),
  OriginalCurrency: require("./OriginalCurrency"),
  ReinvestIncomeTransaction: require("./ReinvestIncomeTransaction"),
  RelatedOptionType: require("./RelatedOptionType"),
  ReturnOfCapitalTransaction: require("./ReturnOfCapitalTransaction"),
  SellDebtReason: require("./SellDebtReason"),
  SellDebtTransaction: require("./SellDebtTransaction"),
  SellInvestmentTransaction: require("./SellInvestmentTransaction"),
  SellMutualFundTransaction: require("./SellMutualFundTransaction"),
  SellOptionTransaction: require("./SellOptionTransaction"),
  SellOtherTransaction: require("./SellOtherTransaction"),
  SellStockTransaction: require("./SellStockTransaction"),
  SellType: require("./SellType"),
  SplitTransaction: require("./SplitTransaction"),
  TransactionType: require("./TransactionType"),
  TransactionWithSecurity: require("./TransactionWithSecurity"),
  TransferAction: require("./TransferAction"),
  TransferInvestmentTransaction: require("./TransferInvestmentTransaction"),
};

},{"./BaseBuyInvestmentTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BaseBuyInvestmentTransaction.js","./BaseInvestmentTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BaseInvestmentTransaction.js","./BaseOtherInvestmentTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BaseOtherInvestmentTransaction.js","./BaseSellInvestmentTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BaseSellInvestmentTransaction.js","./BuyDebtTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BuyDebtTransaction.js","./BuyInvestmentTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BuyInvestmentTransaction.js","./BuyMutualFundTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BuyMutualFundTransaction.js","./BuyOptionTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BuyOptionTransaction.js","./BuyOtherTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BuyOtherTransaction.js","./BuyStockTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BuyStockTransaction.js","./BuyType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/BuyType.js","./CloseOptionAction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/CloseOptionAction.js","./CloseOptionTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/CloseOptionTransaction.js","./IncomeTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/IncomeTransaction.js","./IncomeType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/IncomeType.js","./InvestmentBankTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/InvestmentBankTransaction.js","./InvestmentExpenseTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/InvestmentExpenseTransaction.js","./InvestmentTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/InvestmentTransaction.js","./InvestmentTransactionList":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/InvestmentTransactionList.js","./JournalFundTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/JournalFundTransaction.js","./JournalSecurityTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/JournalSecurityTransaction.js","./MarginInterestTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/MarginInterestTransaction.js","./OptionBuyType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/OptionBuyType.js","./OptionSellType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/OptionSellType.js","./OriginalCurrency":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/OriginalCurrency.js","./ReinvestIncomeTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/ReinvestIncomeTransaction.js","./RelatedOptionType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/RelatedOptionType.js","./ReturnOfCapitalTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/ReturnOfCapitalTransaction.js","./SellDebtReason":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/SellDebtReason.js","./SellDebtTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/SellDebtTransaction.js","./SellInvestmentTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/SellInvestmentTransaction.js","./SellMutualFundTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/SellMutualFundTransaction.js","./SellOptionTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/SellOptionTransaction.js","./SellOtherTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/SellOtherTransaction.js","./SellStockTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/SellStockTransaction.js","./SellType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/SellType.js","./SplitTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/SplitTransaction.js","./TransactionType":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/TransactionType.js","./TransactionWithSecurity":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/TransactionWithSecurity.js","./TransferAction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/TransferAction.js","./TransferInvestmentTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/transactions/TransferInvestmentTransaction.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/AbstractMessageSetInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var ChildAggregate = require("../../../meta/ChildAggregate");
var VersionSpecificMessageSetInfo = require("./VersionSpecificMessageSetInfo");

/**
 * Information about a message set.
 *
 * @class
 * @see "Section 7.2.1, OFX Spec"
 */
function AbstractMessageSetInfo () {

  /**
   * @name AbstractMessageSetInfo#versionSpecificInformationList
   * @type List<VersionSpecificMessageSetInfo>
   * @access private
   */
  this.versionSpecificInformationList = null;
}





/**
 * List of information about a message set for each version supported.
 *
 * @return {VersionSpecificMessageSetInfo[]} List of information about a message set for each version supported.
 */
AbstractMessageSetInfo.prototype.getVersionSpecificInformationList = function() {
  return this.versionSpecificInformationList;
};
ChildAggregate.add(AbstractMessageSetInfo, {order: 0, attributeType: Array, collectionEntryType: VersionSpecificMessageSetInfo, readMethod: "getVersionSpecificInformationList", writeMethod: "setVersionSpecificInformationList"});


/**
 * List of information about a message set for each version supported.
 *
 * @param {VersionSpecificMessageSetInfo[]} versionSpecificInformationList List of information about a message set for each version supported.
 */
AbstractMessageSetInfo.prototype.setVersionSpecificInformationList = function(versionSpecificInformationList) {
  this.versionSpecificInformationList = versionSpecificInformationList;
};




module.exports = AbstractMessageSetInfo;

},{"../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","./VersionSpecificMessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/VersionSpecificMessageSetInfo.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/CharacterType.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * @enum
 * @see "Section 7.2.2, OFX Spec"
 */
var CharacterType = {

  ALPHAONLY: 0,

  NUMERICONLY: 1,

  ALPHAORNUMERIC: 2,

  ALPHAANDNUMERIC: 3
};


module.exports = CharacterType;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/ClientRoutingCapability.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * @enum
 * @see "Section 7.1.5, OFX Spec"
 */
var ClientRoutingCapability = {

  NONE: 0,

  SERVICE: 1,

  MESSAGE_SET: 2
};


module.exports = ClientRoutingCapability;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/CoreMessageSetInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var Aggregate = require("../../../meta/Aggregate");
var Element = require("../../../meta/Element");
var ApplicationSecurity = require("../ApplicationSecurity");
var SynchronizationCapability = require("./SynchronizationCapability");

/**
 * Core information about a specific version of a specific message set.
 *
 * @class
 * @see "Section 7.2.1, OFX Spec"
 */
function CoreMessageSetInfo () {

  /**
   * @name CoreMessageSetInfo#version
   * @type String
   * @access private
   */
  this.version = "1";

  /**
   * @name CoreMessageSetInfo#serviceProviderName
   * @type String
   * @access private
   */
  this.serviceProviderName = null;

  /**
   * @name CoreMessageSetInfo#url
   * @type String
   * @access private
   */
  this.url = null;

  /**
   * @name CoreMessageSetInfo#security
   * @type ApplicationSecurity
   * @access private
   */
  this.security = null;

  /**
   * @name CoreMessageSetInfo#sslRequired
   * @type Boolean
   * @access private
   */
  this.sslRequired = null;

  /**
   * @name CoreMessageSetInfo#realm
   * @type String
   * @access private
   */
  this.realm = null;

  /**
   * @name CoreMessageSetInfo#language
   * @type String
   * @access private
   */
  this.language = "eng";

  /**
   * @name CoreMessageSetInfo#syncCapability
   * @type SynchronizationCapability
   * @access private
   */
  this.syncCapability = null;

  /**
   * @name CoreMessageSetInfo#fileBasedErrorRecoverySupport
   * @type Boolean
   * @access private
   */
  this.fileBasedErrorRecoverySupport = null;

  /**
   * @name CoreMessageSetInfo#timeout
   * @type Integer
   * @access private
   */
  this.timeout = null;
}



Aggregate.add("MSGSETCORE", CoreMessageSetInfo);


/**
 * Version of the message set.
 *
 * @return {String} The version of the message set.
 */
CoreMessageSetInfo.prototype.getVersion = function() {
  return this.version;
};
Element.add(CoreMessageSetInfo, {name: "VER", required: true, order: 0, attributeType: String, readMethod: "getVersion", writeMethod: "setVersion"});


/**
 * The version of the message set.
 *
 * @param {String} version The version of the message set.
 */
CoreMessageSetInfo.prototype.setVersion = function(version) {
  this.version = version;
};


/**
 * The name of the service provider (sometimes the message set processing is outsourced).
 *
 * @return {String} The name of the service provider (sometimes the message set processing is outsourced).
 */
CoreMessageSetInfo.prototype.getServiceProviderName = function() {
  return this.serviceProviderName;
};
Element.add(CoreMessageSetInfo, {name: "SPNAME", order: 10, attributeType: String, readMethod: "getServiceProviderName", writeMethod: "setServiceProviderName"});


/**
 * The name of the service provider (sometimes the message set processing is outsourced).
 *
 * @param {String} serviceProviderName The name of the service provider (sometimes the message set processing is outsourced).
 */
CoreMessageSetInfo.prototype.setServiceProviderName = function(serviceProviderName) {
  this.serviceProviderName = serviceProviderName;
};


/**
 * The URL at which the message set is processed.
 *
 * @return {String} The URL at which the message set is processed.
 */
CoreMessageSetInfo.prototype.getUrl = function() {
  return this.url;
};
Element.add(CoreMessageSetInfo, {name: "URL", required: true, order: 20, attributeType: String, readMethod: "getUrl", writeMethod: "setUrl"});


/**
 * The URL at which the message set is processed.
 *
 * @param {String} url The URL at which the message set is processed.
 */
CoreMessageSetInfo.prototype.setUrl = function(url) {
  this.url = url;
};


/**
 * The application-level security required for this message set.
 *
 * @return {ApplicationSecurity} The application-level security required for this message set.
 */
CoreMessageSetInfo.prototype.getSecurity = function() {
  return this.security;
};
Element.add(CoreMessageSetInfo, {name: "OFXSEC", required: true, order: 30, attributeType: ApplicationSecurity, readMethod: "getSecurity", writeMethod: "setSecurity"});


/**
 * The application-level security required for this message set.
 *
 * @param {ApplicationSecurity} security The application-level security required for this message set.
 */
CoreMessageSetInfo.prototype.setSecurity = function(security) {
  this.security = security;
};


/**
 * Whether transport-level security is required for this message set.
 *
 * @return {Boolean} Whether transport-level security is required for this message set.
 */
CoreMessageSetInfo.prototype.getSslRequired = function() {
  return this.sslRequired;
};
Element.add(CoreMessageSetInfo, {name: "TRANSPSEC", required: true, order: 40, attributeType: Boolean, readMethod: "getSslRequired", writeMethod: "setSslRequired"});


/**
 * Whether transport-level security is required for this message set.
 *
 * @param {Boolean} sslRequired Whether transport-level security is required for this message set.
 */
CoreMessageSetInfo.prototype.setSslRequired = function(sslRequired) {
  this.sslRequired = sslRequired;
};


/**
 * The sign-on realm.
 *
 * @return {String} The sign-on realm.
 */
CoreMessageSetInfo.prototype.getRealm = function() {
  return this.realm;
};
Element.add(CoreMessageSetInfo, {name: "SIGNONREALM", required: true, order: 50, attributeType: String, readMethod: "getRealm", writeMethod: "setRealm"});


/**
 * The sign-on realm.
 *
 * @param {String} realm The sign-on realm.
 */
CoreMessageSetInfo.prototype.setRealm = function(realm) {
  this.realm = realm;
};


/**
 * The language.
 *
 * @return {String} The language.
 * @see java.util.Locale#getISO3Language()
 */
CoreMessageSetInfo.prototype.getLanguage = function() {
  return this.language;
};
Element.add(CoreMessageSetInfo, {name: "LANGUAGE", required: true, order: 60, attributeType: String, readMethod: "getLanguage", writeMethod: "setLanguage"});


/**
 * The language.
 *
 * @param {String} language The language.
 */
CoreMessageSetInfo.prototype.setLanguage = function(language) {
  this.language = language;
};


/**
 * The synchronization capability for this message set.
 *
 * @return {SynchronizationCapability} The synchronization capability for this message set.
 */
CoreMessageSetInfo.prototype.getSyncCapability = function() {
  return this.syncCapability;
};
Element.add(CoreMessageSetInfo, {name: "SYNCMODE", required: true, order: 70, attributeType: SynchronizationCapability, readMethod: "getSyncCapability", writeMethod: "setSyncCapability"});


/**
 * The synchronization capability for this message set.
 *
 * @param {SynchronizationCapability} syncCapability The synchronization capability for this message set.
 */
CoreMessageSetInfo.prototype.setSyncCapability = function(syncCapability) {
  this.syncCapability = syncCapability;
};


/**
 * Whether there exists support for resposne-file based error recovery.
 *
 * @return {Boolean} Whether there exists support for resposne-file based error recovery.
 */
CoreMessageSetInfo.prototype.getFileBasedErrorRecoverySupport = function() {
  return this.fileBasedErrorRecoverySupport;
};
Element.add(CoreMessageSetInfo, {name: "RESPFILEER", required: true, order: 80, attributeType: Boolean, readMethod: "getFileBasedErrorRecoverySupport", writeMethod: "setFileBasedErrorRecoverySupport"});


/**
 * Whether there exists support for resposne-file based error recovery.
 *
 * @param {Boolean} fileBasedErrorRecoverySupport Whether there exists support for resposne-file based error recovery.
 */
CoreMessageSetInfo.prototype.setFileBasedErrorRecoverySupport = function(fileBasedErrorRecoverySupport) {
  this.fileBasedErrorRecoverySupport = fileBasedErrorRecoverySupport;
};


/**
 * Gets the "INTU.TIMEOUT" field. There's no public documentation of this field but E*TRADE sends
 * it. It likely is some type of timeout in seconds.
 *
 * @return {Integer} the "INTU.TIMEOUT" property
 */
CoreMessageSetInfo.prototype.getIntuTimeout = function() {
  return this.timeout;
};
Element.add(CoreMessageSetInfo, {name: "INTU.TIMEOUT", order: 90, attributeType: Number, readMethod: "getIntuTimeout", writeMethod: "setIntuTimeout"});


/**
 * Sets the "INTU.TIMEOUT" field. There's no public documentation of this field but E*TRADE sends
 * it. It likely is some type of timeout in seconds.
 *
 * @param {Integer} timeout the "INTU.TIMEOUT" property
 */
CoreMessageSetInfo.prototype.setIntuTimeout = function(timeout) {
  this.timeout = timeout;
};




module.exports = CoreMessageSetInfo;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../ApplicationSecurity":"/Users/aolson/Developer/ofx4js/src/domain/data/ApplicationSecurity.js","./SynchronizationCapability":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/SynchronizationCapability.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/MessageSetInfoList.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");
var AbstractMessageSetInfo = require("./AbstractMessageSetInfo");

/**
 * @class
 * @see "Section 7.2, OFX Spec"
 */
function MessageSetInfoList () {

  /**
   * @name MessageSetInfoList#informationList
   * @type List<AbstractMessageSetInfo>
   * @access private
   */
  this.informationList = null;
}



Aggregate.add("MSGSETLIST", MessageSetInfoList);


/**
 * The list of information for each message set.
 *
 * @return {AbstractMessageSetInfo[]} The list of information for each message set.
 */
MessageSetInfoList.prototype.getInformationList = function() {
  return this.informationList;
};
ChildAggregate.add(MessageSetInfoList, {order: 0, attributeType: Array, collectionEntryType: AbstractMessageSetInfo, readMethod: "getInformationList", writeMethod: "setInformationList"});


/**
 * The list of information for each message set.
 *
 * @param {AbstractMessageSetInfo[]} informationList The list of information for each message set.
 */
MessageSetInfoList.prototype.setInformationList = function(informationList) {
  this.informationList = informationList;
};




module.exports = MessageSetInfoList;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","./AbstractMessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/AbstractMessageSetInfo.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/ProfileRequest.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var RequestMessage = require("../RequestMessage");
var Aggregate = require("../../../meta/Aggregate");
var Element = require("../../../meta/Element");
var ClientRoutingCapability = require("./ClientRoutingCapability");

/**
 * @author Ryan Heaton
 * @see "Section 7.1.5, OFX Spec"
 */
function ProfileRequest () {

  /**
   * @name ProfileRequest#routingCapability
   * @type ClientRoutingCapability
   * @access private
   */
  this.routingCapability = ClientRoutingCapability.NONE;

  /**
   * @name ProfileRequest#profileLastUpdated
   * @type Date
   * @access private
   */
  this.profileLastUpdated = null;
}

inherit(ProfileRequest, "extends", RequestMessage);


Aggregate.add("PROFRQ", ProfileRequest);


/**
 * The client routing capability.
 *
 * @return {ClientRoutingCapability} The client routing capability.
 */
ProfileRequest.prototype.getRoutingCapability = function() {
  return this.routingCapability;
};
Element.add(ProfileRequest, {name: "CLIENTROUTING", order: 0, attributeType: ClientRoutingCapability, readMethod: "getRoutingCapability", writeMethod: "setRoutingCapability"});


/**
 * The client routing capability.
 *
 * @param {ClientRoutingCapability} routingCapability The client routing capability.
 */
ProfileRequest.prototype.setRoutingCapability = function(routingCapability) {
  this.routingCapability = routingCapability;
};


/**
 * The date the profile was last updated.
 *
 * @return {Date} The date the profile was last updated.
 */
ProfileRequest.prototype.getProfileLastUpdated = function() {
  return this.profileLastUpdated;
};
Element.add(ProfileRequest, {name: "DTPROFUP", order: 10, attributeType: Date, readMethod: "getProfileLastUpdated", writeMethod: "setProfileLastUpdated"});


/**
 * The date the profile was last updated.
 *
 * @param {Date} profileLastUpdated The date the profile was last updated.
 */
ProfileRequest.prototype.setProfileLastUpdated = function(profileLastUpdated) {
  this.profileLastUpdated = profileLastUpdated;
};




module.exports = ProfileRequest;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../RequestMessage":"/Users/aolson/Developer/ofx4js/src/domain/data/RequestMessage.js","./ClientRoutingCapability":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/ClientRoutingCapability.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/ProfileRequestMessageSet.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var MessageSetType = require("../MessageSetType");
var RequestMessageSet = require("../RequestMessageSet");
var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");
var ProfileRequestTransaction = require("./ProfileRequestTransaction");

/**
 * @class
 * @augments RequestMessageSet
 * @see "Section 7 OFX Spec"
 */
function ProfileRequestMessageSet () {

  /**
   * @name ProfileRequestMessageSet#profileRequest
   * @type ProfileRequestTransaction
   * @access private
   */
  this.profileRequest = null;
}

inherit(ProfileRequestMessageSet, "extends", RequestMessageSet);


Aggregate.add("PROFMSGSRQV1", ProfileRequestMessageSet);


ProfileRequestMessageSet.prototype.getType = function() {
  return MessageSetType.profile;
};


/**
 * The profile request.
 *
 * @return {ProfileRequestTransaction} The profile request.
 */
ProfileRequestMessageSet.prototype.getProfileRequest = function() {
  return this.profileRequest;
};
ChildAggregate.add(ProfileRequestMessageSet, {required: true, order: 0, attributeType: ProfileRequestTransaction, readMethod: "getProfileRequest", writeMethod: "setProfileRequest"});


/**
 * The profile request.
 *
 * @param {ProfileRequestTransaction} profileRequest The profile request.
 */
ProfileRequestMessageSet.prototype.setProfileRequest = function(profileRequest) {
  this.profileRequest = profileRequest;
};


// Inherited.
ProfileRequestMessageSet.prototype.getRequestMessages = function() {
  var requestMessages = [];
  if (this.getProfileRequest() !== null) {
    requestMessages.push(this.getProfileRequest());
  }
  return requestMessages;
};




module.exports = ProfileRequestMessageSet;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../MessageSetType":"/Users/aolson/Developer/ofx4js/src/domain/data/MessageSetType.js","../RequestMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/RequestMessageSet.js","./ProfileRequestTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/ProfileRequestTransaction.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/ProfileRequestTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var TransactionWrappedRequestMessage = require("../TransactionWrappedRequestMessage");
var ChildAggregate = require("../../../meta/ChildAggregate");
var Aggregate = require("../../../meta/Aggregate");
var ProfileRequest = require("./ProfileRequest");

/**
 * @class
 * @augments TransactionWrappedRequestMessage
 */
function ProfileRequestTransaction () {

  /**
   * @name ProfileRequestTransaction#message
   * @type ProfileRequest
   * @access private
   */
  this.message = null;
}

inherit(ProfileRequestTransaction, "extends", new TransactionWrappedRequestMessage(ProfileRequest));


Aggregate.add("PROFTRNRQ", ProfileRequestTransaction);


/**
 * The wrapped message.
 *
 * @return {ProfileRequest} The wrapped message.
 */
ProfileRequestTransaction.prototype.getMessage = function() {
  return this.message;
};
ChildAggregate.add(ProfileRequestTransaction, {required: true, order: 30, attributeType: ProfileRequest, readMethod: "getMessage", writeMethod: "setMessage"});


/**
 * The wrapped message.
 *
 * @param {ProfileRequest} message The wrapped message.
 */
ProfileRequestTransaction.prototype.setMessage = function(message) {
  this.message = message;
};


// Inherited.
ProfileRequestTransaction.prototype.setWrappedMessage = function(/*ProfileRequest*/ message) {
  this.setMessage(message);
};




module.exports = ProfileRequestTransaction;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../TransactionWrappedRequestMessage":"/Users/aolson/Developer/ofx4js/src/domain/data/TransactionWrappedRequestMessage.js","./ProfileRequest":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/ProfileRequest.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/ProfileResponse.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var ResponseMessage = require("../ResponseMessage");
var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");
var Element = require("../../../meta/Element");
var FinancialInstitutionProfile = require("../../../client/FinancialInstitutionProfile");
var MessageSetInfoList = require("./MessageSetInfoList");
var SignonInfoList = require("./SignonInfoList");

/**
 * @class
 * @augments ResponseMessage
 * @augments FinancialInstitutionProfile
 * @see "Section 7.2 OFX Spec"
 */
function ProfileResponse () {

  /**
   * @name ProfileResponse#messageSetList
   * @type MessageSetInfoList
   * @access private
   */
  this.messageSetList = null;

  /**
   * @name ProfileResponse#signonInfoList
   * @type SignonInfoList
   * @access private
   */
  this.signonInfoList = null;

  /**
   * @name ProfileResponse#timestamp
   * @type Date
   * @access private
   */
  this.timestamp = null;

  /**
   * @name ProfileResponse#financialInstitutionName
   * @type String
   * @access private
   */
  this.financialInstitutionName = null;

  /**
   * @name ProfileResponse#address1
   * @type String
   * @access private
   */
  this.address1 = null;

  /**
   * @name ProfileResponse#address2
   * @type String
   * @access private
   */
  this.address2 = null;

  /**
   * @name ProfileResponse#address3
   * @type String
   * @access private
   */
  this.address3 = null;

  /**
   * @name ProfileResponse#city
   * @type String
   * @access private
   */
  this.city = null;

  /**
   * @name ProfileResponse#state
   * @type String
   * @access private
   */
  this.state = null;

  /**
   * @name ProfileResponse#zip
   * @type String
   * @access private
   */
  this.zip = null;

  /**
   * @name ProfileResponse#country
   * @type String
   * @access private
   */
  this.country = null;

  /**
   * @name ProfileResponse#customerServicePhone
   * @type String
   * @access private
   */
  this.customerServicePhone = null;

  /**
   * @name ProfileResponse#technicalSupportPhone
   * @type String
   * @access private
   */
  this.technicalSupportPhone = null;

  /**
   * @name ProfileResponse#fax
   * @type String
   * @access private
   */
  this.fax = null;

  /**
   * @name ProfileResponse#siteURL
   * @type String
   * @access private
   */
  this.siteURL = null;

  /**
   * @name ProfileResponse#email
   * @type String
   * @access private
   */
  this.email = null;
}

inherit(ProfileResponse, "extends", ResponseMessage);
inherit(ProfileResponse, "implements", FinancialInstitutionProfile);


Aggregate.add("PROFRS", ProfileResponse);


/**
 * List of message set information.
 * @return {MessageSetInfoList} List of message set information.
 */
ProfileResponse.prototype.getMessageSetList = function() {
  return this.messageSetList;
};
ChildAggregate.add(ProfileResponse, {order: 0, attributeType: MessageSetInfoList, readMethod: "getMessageSetList", writeMethod: "setMessageSetList"});


/**
 * List of message set information.
 *
 * @param {MessageSetInfoList} messageSetList List of message set information.
 */
ProfileResponse.prototype.setMessageSetList = function(messageSetList) {
  this.messageSetList = messageSetList;
};


/**
 * List of signon information.
 *
 * @return {SignonInfoList} List of signon information.
 */
ProfileResponse.prototype.getSignonInfoList = function() {
  return this.signonInfoList;
};
ChildAggregate.add(ProfileResponse, {order: 10, attributeType: SignonInfoList, readMethod: "getSignonInfoList", writeMethod: "setSignonInfoList"});


/**
 * List of signon information.
 *
 * @param {SignonInfoList} signonInfoList List of signon information.
 */
ProfileResponse.prototype.setSignonInfoList = function(signonInfoList) {
  this.signonInfoList = signonInfoList;
};


// Inherited.
ProfileResponse.prototype.getResponseMessageName = function() {
  return "profile";
};


// Inherited.
ProfileResponse.prototype.getLastUpdated = function() {
  return this.getTimestamp();
};


/**
 * The timestamp of this profile update.
 *
 * @return {Date} The timestamp of this profile update.
 */
ProfileResponse.prototype.getTimestamp = function() {
  return this.timestamp;
};
Element.add(ProfileResponse, {name: "DTPROFUP", order: 20, attributeType: Date, readMethod: "getTimestamp", writeMethod: "setTimestamp"});


/**
 * The timestamp of this profile update.
 *
 * @param {Date} timestamp The timestamp of this profile update.
 */
ProfileResponse.prototype.setTimestamp = function(timestamp) {
  this.timestamp = timestamp;
};


/**
 * The name of the financial institution.
 *
 * @return {String} The name of the financial institution.
 */
ProfileResponse.prototype.getFinancialInstitutionName = function() {
  return this.financialInstitutionName;
};
Element.add(ProfileResponse, {name: "FINAME", order: 30, attributeType: String, readMethod: "getFinancialInstitutionName", writeMethod: "setFinancialInstitutionName"});


/**
 * The name of the financial institution.
 *
 * @param {String} financialInstitutionName The name of the financial institution.
 */
ProfileResponse.prototype.setFinancialInstitutionName = function(financialInstitutionName) {
  this.financialInstitutionName = financialInstitutionName;
};


/**
 * The address of the financial institution.
 *
 * @return {String} The address of the financial institution.
 */
ProfileResponse.prototype.getAddress1 = function() {
  return this.address1;
};
Element.add(ProfileResponse, {name: "ADDR1", required: true, order: 40, attributeType: String, readMethod: "getAddress1", writeMethod: "setAddress1"});


/**
 * The address of the financial institution.
 *
 * @param {String} address1 The address of the financial institution.
 */
ProfileResponse.prototype.setAddress1 = function(address1) {
  this.address1 = address1;
};


/**
 * The address of the financial institution.
 *
 * @return {String} The address of the financial institution.
 */
ProfileResponse.prototype.getAddress2 = function() {
  return this.address2;
};
Element.add(ProfileResponse, {name: "ADDR2", order: 50, attributeType: String, readMethod: "getAddress2", writeMethod: "setAddress2"});


/**
 * The address of the financial institution.
 *
 * @param {String} address2 The address of the financial institution.
 */
ProfileResponse.prototype.setAddress2 = function(address2) {
  this.address2 = address2;
};


/**
 * The address of the financial institution.
 *
 * @return {String} The address of the financial institution.
 */
ProfileResponse.prototype.getAddress3 = function() {
  return this.address3;
};
Element.add(ProfileResponse, {name: "ADDR3", order: 60, attributeType: String, readMethod: "getAddress3", writeMethod: "setAddress3"});


/**
 * The address of the financial institution.
 *
 * @param {String} address3 The address of the financial institution.
 */
ProfileResponse.prototype.setAddress3 = function(address3) {
  this.address3 = address3;
};


/**
 * The city of the financial institution.
 *
 * @return {String} The city of the financial institution.
 */
ProfileResponse.prototype.getCity = function() {
  return this.city;
};
Element.add(ProfileResponse, {name: "CITY", required: true, order: 70, attributeType: String, readMethod: "getCity", writeMethod: "setCity"});


/**
 * The city of the financial institution.
 *
 * @param {String} city The city of the financial institution.
 */
ProfileResponse.prototype.setCity = function(city) {
  this.city = city;
};


/**
 * The state of this financial institution.
 *
 * @return {String} The state of this financial institution.
 */
ProfileResponse.prototype.getState = function() {
  return this.state;
};
Element.add(ProfileResponse, {name: "STATE", required: true, order: 80, attributeType: String, readMethod: "getState", writeMethod: "setState"});


/**
 * The state of this financial institution.
 *
 * @param {String} state The state of this financial institution.
 */
ProfileResponse.prototype.setState = function(state) {
  this.state = state;
};


/**
 * The postal code of this financial institution.
 *
 * @return {String} The postal code of this financial institution.
 */
ProfileResponse.prototype.getZip = function() {
  return this.zip;
};
Element.add(ProfileResponse, {name: "POSTALCODE", required: true, order: 90, attributeType: String, readMethod: "getZip", writeMethod: "setZip"});


/**
 * The postal code of this financial institution.
 *
 * @param {String} zip The postal code of this financial institution.
 */
ProfileResponse.prototype.setZip = function(zip) {
  this.zip = zip;
};


/**
 * The country code for this financial institution.
 *
 * @return {String} The country code for this financial institution.
 * @see java.util.Locale#getISO3Country()
 */
ProfileResponse.prototype.getCountry = function() {
  return this.country;
};
Element.add(ProfileResponse, {name: "COUNTRY", required: true, order: 100, attributeType: String, readMethod: "getCountry", writeMethod: "setCountry"});


/**
 * The country code for this financial institution.
 *
 * @param {String} country The country code for this financial institution.
 */
ProfileResponse.prototype.setCountry = function(country) {
  this.country = country;
};


/**
 * The phone number to customer service.
 *
 * @return {String} The phone number to customer service.
 */
ProfileResponse.prototype.getCustomerServicePhone = function() {
  return this.customerServicePhone;
};
Element.add(ProfileResponse, {name: "CSPHONE", order: 110, attributeType: String, readMethod: "getCustomerServicePhone", writeMethod: "setCustomerServicePhone"});


/**
 * The phone number to customer service.
 *
 * @param {String} customerServicePhone The phone number to customer service.
 */
ProfileResponse.prototype.setCustomerServicePhone = function(customerServicePhone) {
  this.customerServicePhone = customerServicePhone;
};


/**
 * The phone number to tech support.
 *
 * @return {String} The phone number to tech support.
 */
ProfileResponse.prototype.getTechnicalSupportPhone = function() {
  return this.technicalSupportPhone;
};
Element.add(ProfileResponse, {name: "TSPHONE", order: 120, attributeType: String, readMethod: "getTechnicalSupportPhone", writeMethod: "setTechnicalSupportPhone"});


/**
 * The phone number to tech support.
 *
 * @param {String} technicalSupportPhone The phone number to tech support.
 */
ProfileResponse.prototype.setTechnicalSupportPhone = function(technicalSupportPhone) {
  this.technicalSupportPhone = technicalSupportPhone;
};


/**
 * The fax number.
 *
 * @return {String} The fax number.
 */
ProfileResponse.prototype.getFax = function() {
  return this.fax;
};
Element.add(ProfileResponse, {name: "FAXPHONE", order: 130, attributeType: String, readMethod: "getFax", writeMethod: "setFax"});


/**
 * The fax number.
 *
 * @param {String} fax The fax number.
 */
ProfileResponse.prototype.setFax = function(fax) {
  this.fax = fax;
};


/**
 * URL for the financial institution.
 *
 * @return {String} URL for the financial institution.
 */
ProfileResponse.prototype.getSiteURL = function() {
  return this.siteURL;
};
Element.add(ProfileResponse, {name: "URL", order: 140, attributeType: String, readMethod: "getSiteURL", writeMethod: "setSiteURL"});


/**
 * URL for the financial institution.
 *
 * @param {String} siteURL URL for the financial institution.
 */
ProfileResponse.prototype.setSiteURL = function(siteURL) {
  this.siteURL = siteURL;
};


/**
 * The email for this FI
 *
 * @return {String} The email for this FI
 */
ProfileResponse.prototype.getEmail = function() {
  return this.email;
};
Element.add(ProfileResponse, {name: "EMAIL", order: 150, attributeType: String, readMethod: "getEmail", writeMethod: "setEmail"});


/**
 * The email for this FI
 *
 * @param {String} email The email for this FI
 */
ProfileResponse.prototype.setEmail = function(email) {
  this.email = email;
};


ProfileResponse.prototype.getMessageSetProfile = function(/*MessageSetType*/ type) {
  var profiles = this.getProfiles(type);
  if (profiles.length > 1) {
    throw new Error("More than one profile of type " + type);
  }
  else if (profiles.isEmpty()) {
    return null;
  }
  else {
    return profiles[0];
  }
};


/**
 * Get all the profiles of the specified type.
 *
 * @param {MessageSetType} type The type.
 * @return {Collection<MessageSetProfile>} The profiles.
 */
ProfileResponse.prototype.getProfiles = function(type) {
  var profiles = [];
  if (this.getMessageSetList() !== null && this.getMessageSetList().getInformationList() !== null) {
    for (var info in this.getMessageSetList().getInformationList()) {
      if (info.getVersionSpecificInformationList() !== null) {
        for (var versionSpecificInfo in info.getVersionSpecificInformationList()) {
          if (versionSpecificInfo.getMessageSetType() == type) {
            profiles.add(versionSpecificInfo);
          }
        }
      }
    }
  }
  return profiles;
};


ProfileResponse.prototype.getMessageSetProfile = function(/*MessageSetType*/ type, /*String*/ version) {
  for (var profile in this.getProfiles(type)) {
    if (version === null) {
      if (profile.getVersion() === null) {
        return profile;
      }
    }
    else if (version.equals(profile.getVersion())) {
      return profile;
    }
  }
  
  return null;
};


ProfileResponse.prototype.getSignonProfile = function(/*MessageSetProfile*/ messageSet) {
  if (this.getSignonInfoList() !== null && this.getSignonInfoList().getInfoList() !== null) {
    for (var signonInfo in this.getSignonInfoList().getInfoList()) {
      if (messageSet.getRealm() === null) {
        if (signonInfo.getRealm() === null) {
          return signonInfo;
        }
      }
      else if (messageSet.getRealm().equals(signonInfo.getRealm())) {
        return signonInfo;
      }
    }
  }
  return null;
};




module.exports = ProfileResponse;

},{"../../../client/FinancialInstitutionProfile":"/Users/aolson/Developer/ofx4js/src/client/FinancialInstitutionProfile.js","../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../ResponseMessage":"/Users/aolson/Developer/ofx4js/src/domain/data/ResponseMessage.js","./MessageSetInfoList":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/MessageSetInfoList.js","./SignonInfoList":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/SignonInfoList.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/ProfileResponseMessageSet.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var MessageSetType = require("../MessageSetType");
var ResponseMessageSet = require("../ResponseMessageSet");
var ChildAggregate = require("../../../meta/ChildAggregate");
var Aggregate = require("../../../meta/Aggregate");
var ProfileResponseTransaction = require("./ProfileResponseTransaction");

/**
 * @class
 * @augments ResponseMessageSet
 * @see "Section 7 OFX Spec"
 */
function ProfileResponseMessageSet () {

  /**
   * @name ProfileResponseMessageSet#profileResponse
   * @type ProfileResponseTransaction
   * @access private
   */
  this.profileResponse = null;
}

inherit(ProfileResponseMessageSet, "extends", ResponseMessageSet);


Aggregate.add("PROFMSGSRSV1", ProfileResponseMessageSet);


ProfileResponseMessageSet.prototype.getType = function() {
  return MessageSetType.profile;
};


/**
 * The profile response.
 *
 * @return {ProfileResponseTransaction} The profile response.
 */
ProfileResponseMessageSet.prototype.getProfileResponse = function() {
  return this.profileResponse;
};
ChildAggregate.add(ProfileResponseMessageSet, {required: true, order: 0, attributeType: ProfileResponseTransaction, readMethod: "getProfileResponse", writeMethod: "setProfileResponse"});


/**
 * The profile response.
 *
 * @param {ProfileResponseTransaction} profileResponse The profile response.
 */
ProfileResponseMessageSet.prototype.setProfileResponse = function(profileResponse) {
  this.profileResponse = profileResponse;
};


// Inherited.
ProfileResponseMessageSet.prototype.getResponseMessages = function() {
  var messages = [];

  if (this.getProfileResponse() !== null) {
    messages.add(this.getProfileResponse());
  }

  return messages;
};




module.exports = ProfileResponseMessageSet;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../MessageSetType":"/Users/aolson/Developer/ofx4js/src/domain/data/MessageSetType.js","../ResponseMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/ResponseMessageSet.js","./ProfileResponseTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/ProfileResponseTransaction.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/ProfileResponseTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var TransactionWrappedResponseMessage = require("../TransactionWrappedResponseMessage");
var ChildAggregate = require("../../../meta/ChildAggregate");
var Aggregate = require("../../../meta/Aggregate");
var ProfileResponse = require("./ProfileResponse");

/**
 * @class
 * @augments TransactionWrappedResponseMessage
 */
function ProfileResponseTransaction () {

  /**
   * @name ProfileResponseTransaction#message
   * @type ProfileResponse
   * @access private
   */
  this.message = null;
}

inherit(ProfileResponseTransaction, "extends", new TransactionWrappedResponseMessage(ProfileResponse));


Aggregate.add("PROFTRNRS", ProfileResponseTransaction);


/**
 * The message.
 *
 * @return {ProfileResponse} The message.
 */
ProfileResponseTransaction.prototype.getMessage = function() {
  return this.message;
};
ChildAggregate.add(ProfileResponseTransaction, {required: true, order: 30, attributeType: ProfileResponse, readMethod: "getMessage", writeMethod: "setMessage"});


/**
 * The message.
 *
 * @param {ProfileResponse} message The message.
 */
ProfileResponseTransaction.prototype.setMessage = function(message) {
  this.message = message;
};


// Inherited.
ProfileResponseTransaction.prototype.getWrappedMessage = function() {
  return this.getMessage();
};




module.exports = ProfileResponseTransaction;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../TransactionWrappedResponseMessage":"/Users/aolson/Developer/ofx4js/src/domain/data/TransactionWrappedResponseMessage.js","./ProfileResponse":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/ProfileResponse.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/SignonInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var Aggregate = require("../../../meta/Aggregate");
var Element = require("../../../meta/Element");
var SignonProfile = require("../SignonProfile");
var CharacterType = require("./CharacterType");

/**
 * Sign-on information
 *
 * @class
 * @augments SignonProfile
 * @see "Section 7.2.2, OFX Spec"
 */
function SignonInfo () {

  /**
   * @name SignonInfo#realm
   * @type String
   * @access private
   */
  this.realm = null;

  /**
   * @name SignonInfo#minPasswordCharacters
   * @type Integer
   * @access private
   */
  this.minPasswordCharacters = null;

  /**
   * @name SignonInfo#maxPasswordCharacters
   * @type Integer
   * @access private
   */
  this.maxPasswordCharacters = null;

  /**
   * @name SignonInfo#passwordCharacterType
   * @type CharacterType
   * @access private
   */
  this.passwordCharacterType = null;

  /**
   * @name SignonInfo#passwordCaseSensitive
   * @type Boolean
   * @access private
   */
  this.passwordCaseSensitive = true;

  /**
   * @name SignonInfo#passwordSpecialCharsAllowed
   * @type Boolean
   * @access private
   */
  this.passwordSpecialCharsAllowed = true;

  /**
   * @name SignonInfo#passwordSpacesAllowed
   * @type Boolean
   * @access private
   */
  this.passwordSpacesAllowed = true;

  /**
   * @name SignonInfo#changePasswordSupported
   * @type Boolean
   * @access private
   */
  this.changePasswordSupported = null;

  /**
   * @name SignonInfo#changePasswordFirstRequired
   * @type Boolean
   * @access private
   */
  this.changePasswordFirstRequired = null;

  /**
   * @name SignonInfo#additionalCredientialsLabel1
   * @type String
   * @access private
   */
  this.additionalCredientialsLabel1 = null;

  /**
   * @name SignonInfo#additionalCredientialsLabel2
   * @type String
   * @access private
   */
  this.additionalCredientialsLabel2 = null;

  /**
   * @name SignonInfo#clientUIDRequired
   * @type Boolean
   * @access private
   */
  this.clientUIDRequired = null;

  /**
   * @name SignonInfo#authTokenRequiredForFirstSignon
   * @type Boolean
   * @access private
   */
  this.authTokenRequiredForFirstSignon = null;

  /**
   * @name SignonInfo#authTokenLabel
   * @type String
   * @access private
   */
  this.authTokenLabel = null;

  /**
   * @name SignonInfo#authTokenInfoURL
   * @type String
   * @access private
   */
  this.authTokenInfoURL = null;

  /**
   * @name SignonInfo#mfaSupported
   * @type Boolean
   * @access private
   */
  this.mfaSupported = null;

  /**
   * @name SignonInfo#mfaChallengeRequiredForFirstSignon
   * @type Boolean
   * @access private
   */
  this.mfaChallengeRequiredForFirstSignon = null;
}

inherit(SignonInfo, "implements", SignonProfile);


Aggregate.add("SIGNONINFO", SignonInfo);


/**
 * The name of the sign-on realm.
 *
 * @return {String} The name of the sign-on realm.
 */
SignonInfo.prototype.getRealm = function() {
  return this.realm;
};
Element.add(SignonInfo, {name: "SIGNONREALM", required: true, order: 0, attributeType: String, readMethod: "getRealm", writeMethod: "setRealm"});


/**
 * The name of the sign-on realm.
 *
 * @param {String} realm The name of the sign-on realm.
 */
SignonInfo.prototype.setRealm = function(realm) {
  this.realm = realm;
};


/**
 * The minimum number of password characters.
 *
 * @return {Integer} The minimum number of password characters.
 */
SignonInfo.prototype.getMinPasswordCharacters = function() {
  return this.minPasswordCharacters;
};
Element.add(SignonInfo, {name: "MIN", required: true, order: 10, attributeType: Number, readMethod: "getMinPasswordCharacters", writeMethod: "setMinPasswordCharacters"});


/**
 * The minimum number of password characters.
 *
 * @param {Integer} minPasswordCharacters The minimum number of password characters.
 */
SignonInfo.prototype.setMinPasswordCharacters = function(minPasswordCharacters) {
  this.minPasswordCharacters = minPasswordCharacters;
};


/**
 * The maximum number of password characters.
 *
 * @return {Integer} The maximum number of password characters.
 */
SignonInfo.prototype.getMaxPasswordCharacters = function() {
  return this.maxPasswordCharacters;
};
Element.add(SignonInfo, {name: "MAX", required: true, order: 20, attributeType: Number, readMethod: "getMaxPasswordCharacters", writeMethod: "setMaxPasswordCharacters"});


/**
 * The maximum number of password characters.
 *
 * @param {Integer} maxPasswordCharacters The maximum number of password characters.
 */
SignonInfo.prototype.setMaxPasswordCharacters = function(maxPasswordCharacters) {
  this.maxPasswordCharacters = maxPasswordCharacters;
};


/**
 * The type of password characters supported.
 *
 * @return {CharacterType} The type of password characters supported.
 */
SignonInfo.prototype.getPasswordCharacterType = function() {
  return this.passwordCharacterType;
};
Element.add(SignonInfo, {name: "CHARTYPE", required: true, order: 30, attributeType: CharacterType, readMethod: "getPasswordCharacterType", writeMethod: "setPasswordCharacterType"});


/**
 * The type of password characters supported.
 *
 * @param {CharacterType} passwordCharacterType The type of password characters supported.
 */
SignonInfo.prototype.setPasswordCharacterType = function(passwordCharacterType) {
  this.passwordCharacterType = passwordCharacterType;
};


/**
 * Whether the password is case-sensitive.
 *
 * @return {Boolean} Whether the password is case-sensitive.
 */
SignonInfo.prototype.getPasswordCaseSensitive = function() {
  return this.passwordCaseSensitive;
};
Element.add(SignonInfo, {name: "CASESEN", required: true, order: 40, attributeType: Boolean, readMethod: "getPasswordCaseSensitive", writeMethod: "setPasswordCaseSensitive"});


/**
 * Whether the password is case-sensitive.
 *
 * @param {Boolean} passwordCaseSensitive Whether the password is case-sensitive.
 */
SignonInfo.prototype.setPasswordCaseSensitive = function(passwordCaseSensitive) {
  this.passwordCaseSensitive = passwordCaseSensitive;
};


/**
 * Whether special characters are allowed in the password.
 *
 * @return {Boolean} Whether special characters are allowed in the password.
 */
SignonInfo.prototype.getPasswordSpecialCharsAllowed = function() {
  return this.passwordSpecialCharsAllowed;
};
Element.add(SignonInfo, {name: "SPECIAL", required: true, order: 50, attributeType: Boolean, readMethod: "getPasswordSpecialCharsAllowed", writeMethod: "setPasswordSpecialCharsAllowed"});


/**
 * Whether special characters are allowed in the password.
 *
 * @param {Boolean} passwordSpecialCharsAllowed Whether special characters are allowed in the password.
 */
SignonInfo.prototype.setPasswordSpecialCharsAllowed = function(passwordSpecialCharsAllowed) {
  this.passwordSpecialCharsAllowed = passwordSpecialCharsAllowed;
};


/**
 * Whether spaces are allowed in the password.
 *
 * @return {Boolean} Whether spaces are allowed in the password.
 */
SignonInfo.prototype.getPasswordSpacesAllowed = function() {
  return this.passwordSpacesAllowed;
};
Element.add(SignonInfo, {name: "SPACES", required: true, order: 60, attributeType: Boolean, readMethod: "getPasswordSpacesAllowed", writeMethod: "setPasswordSpacesAllowed"});


/**
 * Whether spaces are allowed in the password.
 *
 * @param {Boolean} passwordSpacesAllowed Whether spaces are allowed in the password.
 */
SignonInfo.prototype.setPasswordSpacesAllowed = function(passwordSpacesAllowed) {
  this.passwordSpacesAllowed = passwordSpacesAllowed;
};


/**
 * Whether the server can process a password change request for this realm.
 *
 * @return {Boolean} Whether the server can process a password change request for this realm.
 */
SignonInfo.prototype.getChangePasswordSupported = function() {
  return this.changePasswordSupported;
};
Element.add(SignonInfo, {name: "PINCH", required: true, order: 70, attributeType: Boolean, readMethod: "getChangePasswordSupported", writeMethod: "setChangePasswordSupported"});


/**
 * Whether the server can process a password change request for this realm.
 *
 * @param {Boolean} changePasswordSupported Whether the server can process a password change request for this realm.
 */
SignonInfo.prototype.setChangePasswordSupported = function(changePasswordSupported) {
  this.changePasswordSupported = changePasswordSupported;
};


/**
 * Whether the server requires the user to change their password as part of their first signon.
 *
 * @return {Boolean} Whether the server requires the user to change their password as part of their first signon.
 */
SignonInfo.prototype.getChangePasswordFirstRequired = function() {
  return this.changePasswordFirstRequired;
};
Element.add(SignonInfo, {name: "CHGPINFIRST", required: true, order: 80, attributeType: Boolean, readMethod: "getChangePasswordFirstRequired", writeMethod: "setChangePasswordFirstRequired"});


/**
 * Whether the server requires the user to change their password as part of their first signon.
 *
 * @param {Boolean} changePasswordFirstRequired Whether the server requires the user to change their password as part of their first signon.
 */
SignonInfo.prototype.setChangePasswordFirstRequired = function(changePasswordFirstRequired) {
  this.changePasswordFirstRequired = changePasswordFirstRequired;
};


/**
 * Label for a set of additional credentials that the user must supply.
 *
 * @return {String} Label for a set of additional credentials that the user must supply.
 */
SignonInfo.prototype.getAdditionalCredientialsLabel1 = function() {
  return this.additionalCredientialsLabel1;
};
Element.add(SignonInfo, {name: "USERCRED1LABEL", order: 90, attributeType: String, readMethod: "getAdditionalCredientialsLabel1", writeMethod: "setAdditionalCredientialsLabel1"});


/**
 * Label for a set of additional credentials that the user must supply.
 *
 * @param {String} additionalCredientialsLabel1 Label for a set of additional credentials that the user must supply.
 */
SignonInfo.prototype.setAdditionalCredientialsLabel1 = function(additionalCredientialsLabel1) {
  this.additionalCredientialsLabel1 = additionalCredientialsLabel1;
};


/**
 * Label for a set of additional credentials that the user must supply.
 *
 * @return {String} Label for a set of additional credentials that the user must supply.
 */
SignonInfo.prototype.getAdditionalCredientialsLabel2 = function() {
  return this.additionalCredientialsLabel2;
};
Element.add(SignonInfo, {name: "USERCRED2LABEL", order: 100, attributeType: String, readMethod: "getAdditionalCredientialsLabel2", writeMethod: "setAdditionalCredientialsLabel2"});


/**
 * Label for a set of additional credentials that the user must supply.
 *
 * @param {String} additionalCredientialsLabel2 Label for a set of additional credentials that the user must supply.
 */
SignonInfo.prototype.setAdditionalCredientialsLabel2 = function(additionalCredientialsLabel2) {
  this.additionalCredientialsLabel2 = additionalCredientialsLabel2;
};


/**
 * Whether a client UID is required for teh sign-on.
 *
 * @return {Boolean} Whether a client UID is required for teh sign-on.
 */
SignonInfo.prototype.getClientUIDRequired = function() {
  return this.clientUIDRequired;
};
Element.add(SignonInfo, {name: "CLIENTUIDREQ", order: 110, attributeType: Boolean, readMethod: "getClientUIDRequired", writeMethod: "setClientUIDRequired"});


/**
 * Whether a client UID is required for teh sign-on.
 *
 * @param {Boolean} clientUIDRequired Whether a client UID is required for teh sign-on.
 */
SignonInfo.prototype.setClientUIDRequired = function(clientUIDRequired) {
  this.clientUIDRequired = clientUIDRequired;
};


/**
 * Whether an auth token is required for the sign-on.
 *
 * @return {Boolean} Whether an auth token is required for the sign-on.
 */
SignonInfo.prototype.getAuthTokenRequiredForFirstSignon = function() {
  return this.authTokenRequiredForFirstSignon;
};
Element.add(SignonInfo, {name: "AUTHTOKENFIRST", order: 120, attributeType: Boolean, readMethod: "getAuthTokenRequiredForFirstSignon", writeMethod: "setAuthTokenRequiredForFirstSignon"});


/**
 * Whether an auth token is required for the sign-on.
 *
 * @param {Boolean} authTokenRequiredForFirstSignon
 *         Whether an auth token is required for the sign-on.
 */
SignonInfo.prototype.setAuthTokenRequiredForFirstSignon = function(authTokenRequiredForFirstSignon) {
  this.authTokenRequiredForFirstSignon = authTokenRequiredForFirstSignon;
};


/**
 * The label of the auth token.
 *
 * @return {String} The label of the auth token.
 */
SignonInfo.prototype.getAuthTokenLabel = function() {
  return this.authTokenLabel;
};
Element.add(SignonInfo, {name: "AUTHTOKENLABEL", order: 130, attributeType: String, readMethod: "getAuthTokenLabel", writeMethod: "setAuthTokenLabel"});


/**
 * The label of the auth token.
 *
 * @param {String} authTokenLabel The label of the auth token.
 */
SignonInfo.prototype.setAuthTokenLabel = function(authTokenLabel) {
  this.authTokenLabel = authTokenLabel;
};


/**
 * The URL for the auth token information.
 *
 * @return {String} The URL for the auth token information.
 */
SignonInfo.prototype.getAuthTokenInfoURL = function() {
  return this.authTokenInfoURL;
};
Element.add(SignonInfo, {name: "AUTHTOKENINFOURL", order: 140, attributeType: String, readMethod: "getAuthTokenInfoURL", writeMethod: "setAuthTokenInfoURL"});


/**
 * The URL for the auth token information.
 *
 * @param {String} authTokenInfoURL The URL for the auth token information.
 */
SignonInfo.prototype.setAuthTokenInfoURL = function(authTokenInfoURL) {
  this.authTokenInfoURL = authTokenInfoURL;
};


/**
 * Whether MFA is supported.
 *
 * @return {Boolean} Whether MFA is supported.
 */
SignonInfo.prototype.getMfaSupported = function() {
  return this.mfaSupported;
};
Element.add(SignonInfo, {name: "MFACHALLENGESUPT", order: 150, attributeType: Boolean, readMethod: "getMfaSupported", writeMethod: "setMfaSupported"});


/**
 * Whether MFA is supported.
 *
 * @param {Boolean} mfaSupported Whether MFA is supported.
 */
SignonInfo.prototype.setMfaSupported = function(mfaSupported) {
  this.mfaSupported = mfaSupported;
};


/**
 * Whether an MFA challenge request is required for the first sign-on into this realm.
 *
 * @return {Boolean} Whether an MFA challenge request is required for the first sign-on into this realm.
 */
SignonInfo.prototype.getMfaChallengeRequiredForFirstSignon = function() {
  return this.mfaChallengeRequiredForFirstSignon;
};
Element.add(SignonInfo, {name: "MFACHALLENGEFIRST", order: 160, attributeType: Boolean, readMethod: "getMfaChallengeRequiredForFirstSignon", writeMethod: "setMfaChallengeRequiredForFirstSignon"});


/**
 * Whether an MFA challenge request is required for the first sign-on into this realm.
 *
 * @param {Boolean} mfaChallengeRequiredForFirstSignon
 *         Whether an MFA challenge request is required for the first sign-on into this realm.
 */
SignonInfo.prototype.setMfaChallengeRequiredForFirstSignon = function(mfaChallengeRequiredForFirstSignon) {
  this.mfaChallengeRequiredForFirstSignon = mfaChallengeRequiredForFirstSignon;
};




module.exports = SignonInfo;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../SignonProfile":"/Users/aolson/Developer/ofx4js/src/domain/data/SignonProfile.js","./CharacterType":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/CharacterType.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/SignonInfoList.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");
var SignonInfo = require("./SignonInfo");

/**
 * List of signon information.
 *
 * @class
 * @see "Section 7.2.2, OFX Spec"
 */
function SignonInfoList () {

  /**
   * @name SignonInfoList#infoList
   * @type List<SignonInfo>
   * @access private
   */
  this.infoList = null;
}



Aggregate.add("SIGNONINFOLIST", SignonInfoList);


/**
 * List of sign-on information.
 *
 * @return {SignonInfo[]} List of sign-on information.
 */
SignonInfoList.prototype.getInfoList = function() {
  return this.infoList;
};
ChildAggregate.add(SignonInfoList, {order: 0, attributeType: Array, collectionEntryType: SignonInfo, readMethod: "getInfoList", writeMethod: "setInfoList"});


/**
 * List of sign-on information.
 *
 * @param {SignonInfo[]} infoList List of sign-on information.
 */
SignonInfoList.prototype.setInfoList = function(infoList) {
  this.infoList = infoList;
};




module.exports = SignonInfoList;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","./SignonInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/SignonInfo.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/SynchronizationCapability.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * @enum
 * @see "Section 7.2.1, OFX Spec"
 */
var SynchronizationCapability = {

  FULL: 0,

  LITE: 1
};


module.exports = SynchronizationCapability;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/VersionSpecificMessageSetInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var ChildAggregate = require("../../../meta/ChildAggregate");
var MessageSetProfile = require("../MessageSetProfile");
var CoreMessageSetInfo = require("./CoreMessageSetInfo");

/**
 * Information specific to a version of a message set.
 *
 * @author Ryan Heaton
 * @see "Section 7.2.1, OFX Spec"
 */
function VersionSpecificMessageSetInfo () {

  /**
   * @name VersionSpecificMessageSetInfo#core
   * @type CoreMessageSetInfo
   * @access private
   */
  this.core = null;
}

inherit(VersionSpecificMessageSetInfo, "implements", MessageSetProfile);




/**
 * The information core.
 *
 * @return {CoreMessageSetInfo} The information core.
 */
VersionSpecificMessageSetInfo.prototype.getCore = function() {
  return this.core;
};
ChildAggregate.add(VersionSpecificMessageSetInfo, {order: 0, attributeType: CoreMessageSetInfo, readMethod: "getCore", writeMethod: "setCore"});


/**
 * The information core.
 *
 * @param {CoreMessageSetInfo} core The information core.
 */
VersionSpecificMessageSetInfo.prototype.setCore = function(core) {
  this.core = core;
};


/**
 * The message set type.
 *
 * @return {MessageSetType} The message set type.
 */
VersionSpecificMessageSetInfo.prototype.getMessageSetType = function() { throw new Error("not implemented"); };

VersionSpecificMessageSetInfo.prototype.getVersion = function() {
  return this.core !== null ? this.core.getVersion() : null;
};

VersionSpecificMessageSetInfo.prototype.getServiceProviderName = function() {
  return this.core !== null ? this.core.getServiceProviderName() : null;
};

VersionSpecificMessageSetInfo.prototype.getUrl = function() {
  return this.core !== null ? this.core.getUrl() : null;
};

VersionSpecificMessageSetInfo.prototype.getSecurity = function() {
  return this.core !== null ? this.core.getSecurity() : null;
};

VersionSpecificMessageSetInfo.prototype.isSslRequired = function() {
  return this.core !== null && this.core.getSslRequired() !== null ? this.core.getSslRequired() : true;
};

VersionSpecificMessageSetInfo.prototype.getRealm = function() {
  return this.core !== null ? this.core.getRealm() : null;
};

VersionSpecificMessageSetInfo.prototype.getLanguage = function() {
  return this.core !== null ? this.core.getLanguage() : null;
};

VersionSpecificMessageSetInfo.prototype.getSyncCapability = function() {
  return this.core !== null ? this.core.getSyncCapability() : null;
};

VersionSpecificMessageSetInfo.prototype.hasFileBasedErrorRecoverySupport = function() {
  return this.core !== null && this.core.getFileBasedErrorRecoverySupport() !== null ? this.core.getFileBasedErrorRecoverySupport() : false;
};




module.exports = VersionSpecificMessageSetInfo;

},{"../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../MessageSetProfile":"/Users/aolson/Developer/ofx4js/src/domain/data/MessageSetProfile.js","./CoreMessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/CoreMessageSetInfo.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/index.js":[function(require,module,exports){
"use strict";

module.exports = {
  info: require("./info/index"),
  AbstractMessageSetInfo: require("./AbstractMessageSetInfo"),
  CharacterType: require("./CharacterType"),
  ClientRoutingCapability: require("./ClientRoutingCapability"),
  CoreMessageSetInfo: require("./CoreMessageSetInfo"),
  MessageSetInfoList: require("./MessageSetInfoList"),
  ProfileRequest: require("./ProfileRequest"),
  ProfileRequestMessageSet: require("./ProfileRequestMessageSet"),
  ProfileRequestTransaction: require("./ProfileRequestTransaction"),
  ProfileResponse: require("./ProfileResponse"),
  ProfileResponseMessageSet: require("./ProfileResponseMessageSet"),
  ProfileResponseTransaction: require("./ProfileResponseTransaction"),
  SignonInfo: require("./SignonInfo"),
  SignonInfoList: require("./SignonInfoList"),
  SynchronizationCapability: require("./SynchronizationCapability"),
  VersionSpecificMessageSetInfo: require("./VersionSpecificMessageSetInfo"),
};

},{"./AbstractMessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/AbstractMessageSetInfo.js","./CharacterType":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/CharacterType.js","./ClientRoutingCapability":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/ClientRoutingCapability.js","./CoreMessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/CoreMessageSetInfo.js","./MessageSetInfoList":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/MessageSetInfoList.js","./ProfileRequest":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/ProfileRequest.js","./ProfileRequestMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/ProfileRequestMessageSet.js","./ProfileRequestTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/ProfileRequestTransaction.js","./ProfileResponse":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/ProfileResponse.js","./ProfileResponseMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/ProfileResponseMessageSet.js","./ProfileResponseTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/ProfileResponseTransaction.js","./SignonInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/SignonInfo.js","./SignonInfoList":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/SignonInfoList.js","./SynchronizationCapability":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/SynchronizationCapability.js","./VersionSpecificMessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/VersionSpecificMessageSetInfo.js","./info/index":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/index.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/BankingMessageSetInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var AbstractMessageSetInfo = require("../../profile/AbstractMessageSetInfo");
var Aggregate = require("../../../../meta/Aggregate");
var ChildAggregate = require("../../../../meta/ChildAggregate");
var BankingV1MessageSetInfo = require("./BankingV1MessageSetInfo");

/**
 * @class
 * @augments AbstractMessageSetInfo
 */
function BankingMessageSetInfo () {

  /**
   * @name BankingMessageSetInfo#version1Info
   * @type BankingV1MessageSetInfo
   * @access private
   */
  this.version1Info = null;
}

inherit(BankingMessageSetInfo, "extends", AbstractMessageSetInfo);


Aggregate.add("BANKMSGSET", BankingMessageSetInfo);


BankingMessageSetInfo.prototype.getVersion1Info = function() {
  return this.version1Info;
};
ChildAggregate.add(BankingMessageSetInfo, {order: 0, attributeType: BankingV1MessageSetInfo, readMethod: "getVersion1Info", writeMethod: "setVersion1Info"});


BankingMessageSetInfo.prototype.setVersion1Info = function(/*BankingV1MessageSetInfo*/ version1Info) {
  this.version1Info = version1Info;
};




module.exports = BankingMessageSetInfo;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../../profile/AbstractMessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/AbstractMessageSetInfo.js","./BankingV1MessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/BankingV1MessageSetInfo.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/BankingV1MessageSetInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var VersionSpecificMessageSetInfo = require("../VersionSpecificMessageSetInfo");
var MessageSetType = require("../../MessageSetType");
var Aggregate = require("../../../../meta/Aggregate");
var ChildAggregate = require("../../../../meta/ChildAggregate");
var Element = require("../../../../meta/Element");
var AccountType = require("../../banking/AccountType");
var TransferProfile = require("./common/TransferProfile");
var StopCheckProfile = require("./banking/StopCheckProfile");
var EmailProfile = require("./banking/EmailProfile");
var ImageProfile = require("./common/ImageProfile");

/**
 * Banking Message Set Profile
 * @class
 * @augments VersionSpecificMessageSetInfo
 * @see "Section 11.13.2.1 OFX Spec"
 */
function BankingV1MessageSetInfo () {

  /**
   * @name BankingV1MessageSetInfo#invalidAccountTypes
   * @type List<AccountType>
   * @access private
   */
  this.invalidAccountTypes = null;

  /**
   * @name BankingV1MessageSetInfo#closingAvail
   * @type Boolean
   * @access private
   */
  this.closingAvail = null;

  /**
   * @name BankingV1MessageSetInfo#transferProfile
   * @type TransferProfile
   * @access private
   */
  this.transferProfile = null;

  /**
   * @name BankingV1MessageSetInfo#stopCheckProfile
   * @type StopCheckProfile
   * @access private
   */
  this.stopCheckProfile = null;

  /**
   * @name BankingV1MessageSetInfo#emailProfile
   * @type EmailProfile
   * @access private
   */
  this.emailProfile = null;

  /**
   * @name BankingV1MessageSetInfo#imageProfile
   * @type ImageProfile
   * @access private
   */
  this.imageProfile = null;
}

inherit(BankingV1MessageSetInfo, "extends", VersionSpecificMessageSetInfo);


Aggregate.add("BANKMSGSETV1", BankingV1MessageSetInfo);


BankingV1MessageSetInfo.prototype.getMessageSetType = function() {
  return MessageSetType.banking;
};


/**
 * The invalidAccountTypes list.
 *
 * @return {AccountType[]} The invalidAccountTypes list.
 */
BankingV1MessageSetInfo.prototype.getInvalidAccountTypes = function() {
  return this.invalidAccountTypes;
};
ChildAggregate.add(BankingV1MessageSetInfo, {order: 10, attributeType: Array, collectionEntryType: AccountType, readMethod: "getInvalidAccountTypes", writeMethod: "setInvalidAccountTypes"});


/**
 * The invalidAccountTypes list.
 *
 * @param {AccountType[]} invalidAccountTypes The invalidAccountTypes list.
 */
BankingV1MessageSetInfo.prototype.setInvalidAccountTypes = function(invalidAccountTypes) {
  this.invalidAccountTypes = invalidAccountTypes;
};


/**
 * Gets whether closing statement information is available
 *
 * @return {Boolean} whether closing statement information is available
 */
BankingV1MessageSetInfo.prototype.getClosingAvail = function() {
  return this.closingAvail;
};
Element.add(BankingV1MessageSetInfo, {name: "CLOSINGAVAIL", required: true, order: 20, attributeType: Boolean, readMethod: "getClosingAvail", writeMethod: "setClosingAvail"});


/**
 * Sets whether closing statement information is available
 *
 * @param {Boolean} closingAvail whether closing statement information is available
 */
BankingV1MessageSetInfo.prototype.setClosingAvail = function(closingAvail) {
  this.closingAvail = closingAvail;
};


BankingV1MessageSetInfo.prototype.getTransferProfile = function() {
  return this.transferProfile;
};
ChildAggregate.add(BankingV1MessageSetInfo, {name: "XFERPROF", order: 30, attributeType: TransferProfile, readMethod: "getTransferProfile", writeMethod: "setTransferProfile"});


BankingV1MessageSetInfo.prototype.setTransferProfile = function(/*TransferProfile*/ transferProfile) {
  this.transferProfile = transferProfile;
};


BankingV1MessageSetInfo.prototype.getStopCheckProfile = function() {
  return this.stopCheckProfile;
};
ChildAggregate.add(BankingV1MessageSetInfo, {name: "STPCKPROF", order: 40, attributeType: StopCheckProfile, readMethod: "getStopCheckProfile", writeMethod: "setStopCheckProfile"});


BankingV1MessageSetInfo.prototype.setStopCheckProfile = function(/*StopCheckProfile*/ stopCheckProfile) {
  this.stopCheckProfile = stopCheckProfile;
};


BankingV1MessageSetInfo.prototype.getEmailProfile = function() {
  return this.emailProfile;
};
ChildAggregate.add(BankingV1MessageSetInfo, {name: "EMAILPROF", required: true, order: 50, attributeType: EmailProfile, readMethod: "getEmailProfile", writeMethod: "setEmailProfile"});


BankingV1MessageSetInfo.prototype.setEmailProfile = function(/*EmailProfile*/ emailProfile) {
  this.emailProfile = emailProfile;
};


BankingV1MessageSetInfo.prototype.getImageProfile = function() {
  return this.imageProfile;
};
ChildAggregate.add(BankingV1MessageSetInfo, {name: "IMAGEPROF", order: 60, attributeType: ImageProfile, readMethod: "getImageProfile", writeMethod: "setImageProfile"});


BankingV1MessageSetInfo.prototype.setImageProfile = function(/*ImageProfile*/ imageProfile) {
  this.imageProfile = imageProfile;
};




module.exports = BankingV1MessageSetInfo;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../../MessageSetType":"/Users/aolson/Developer/ofx4js/src/domain/data/MessageSetType.js","../../banking/AccountType":"/Users/aolson/Developer/ofx4js/src/domain/data/banking/AccountType.js","../VersionSpecificMessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/VersionSpecificMessageSetInfo.js","./banking/EmailProfile":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/banking/EmailProfile.js","./banking/StopCheckProfile":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/banking/StopCheckProfile.js","./common/ImageProfile":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/common/ImageProfile.js","./common/TransferProfile":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/common/TransferProfile.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/BillpayMessageSetInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var AbstractMessageSetInfo = require("../../profile/AbstractMessageSetInfo");
var Aggregate = require("../../../../meta/Aggregate");
var ChildAggregate = require("../../../../meta/ChildAggregate");
var BillpayV1MessageSetInfo = require("./BillpayV1MessageSetInfo");

/**
 * @class
 * @augments AbstractMessageSetInfo
 */
function BillpayMessageSetInfo () {

  /**
   * @name BillpayMessageSetInfo#version1Info
   * @type BillpayV1MessageSetInfo
   * @access private
   */
  this.version1Info = null;
}

inherit(BillpayMessageSetInfo, "extends", AbstractMessageSetInfo);


Aggregate.add("BILLPAYMSGSET", BillpayMessageSetInfo);


BillpayMessageSetInfo.prototype.getVersion1Info = function() {
  return this.version1Info;
};
ChildAggregate.add(BillpayMessageSetInfo, {order: 0, attributeType: BillpayV1MessageSetInfo, readMethod: "getVersion1Info", writeMethod: "setVersion1Info"});


BillpayMessageSetInfo.prototype.setVersion1Info = function(/*BillpayV1MessageSetInfo*/ version1Info) {
  this.version1Info = version1Info;
};




module.exports = BillpayMessageSetInfo;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../../profile/AbstractMessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/AbstractMessageSetInfo.js","./BillpayV1MessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/BillpayV1MessageSetInfo.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/BillpayV1MessageSetInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var VersionSpecificMessageSetInfo = require("../../profile/VersionSpecificMessageSetInfo");
var MessageSetType = require("../../MessageSetType");
var Aggregate = require("../../../../meta/Aggregate");
var Element = require("../../../../meta/Element");
var ProcessorDayOff = require("../../common/ProcessorDayOff");

/**
 * BillPay Message Set Profile
 * @class
 * @augments VersionSpecificMessageSetInfo
 * @see "Section 12.11.2 OFX Spec"
 */
function BillpayV1MessageSetInfo () {

  /**
   * @name BillpayV1MessageSetInfo#daysWith
   * @type Integer
   * @access private
   */
  this.daysWith = null;

  /**
   * @name BillpayV1MessageSetInfo#defaultDaysToPay
   * @type Integer
   * @access private
   */
  this.defaultDaysToPay = null;

  /**
   * @name BillpayV1MessageSetInfo#transferDaysWith
   * @type Integer
   * @access private
   */
  this.transferDaysWith = null;

  /**
   * @name BillpayV1MessageSetInfo#transferDefaultDaysToPay
   * @type Integer
   * @access private
   */
  this.transferDefaultDaysToPay = null;

  /**
   * @name BillpayV1MessageSetInfo#processorDaysOff
   * @type List<ProcessorDayOff>
   * @access private
   */
  this.processorDaysOff = null;

  /**
   * @name BillpayV1MessageSetInfo#processorEndTime
   * @type String
   * @access private
   */
  this.processorEndTime = null;

  /**
   * @name BillpayV1MessageSetInfo#modelWindow
   * @type Integer
   * @access private
   */
  this.modelWindow = null;

  /**
   * @name BillpayV1MessageSetInfo#postProcessorWindow
   * @type Integer
   * @access private
   */
  this.postProcessorWindow = null;

  /**
   * @name BillpayV1MessageSetInfo#supportsStatusUpdateViaPaymentModificationResponse
   * @type Boolean
   * @access private
   */
  this.supportsStatusUpdateViaPaymentModificationResponse = null;

  /**
   * @name BillpayV1MessageSetInfo#supportsPaymentByAddress
   * @type Boolean
   * @access private
   */
  this.supportsPaymentByAddress = null;

  /**
   * @name BillpayV1MessageSetInfo#supportsPaymentByTransfer
   * @type Boolean
   * @access private
   */
  this.supportsPaymentByTransfer = null;

  /**
   * @name BillpayV1MessageSetInfo#supportsPaymentByPayeeId
   * @type Boolean
   * @access private
   */
  this.supportsPaymentByPayeeId = null;

  /**
   * @name BillpayV1MessageSetInfo#userCanAddPayee
   * @type Boolean
   * @access private
   */
  this.userCanAddPayee = null;

  /**
   * @name BillpayV1MessageSetInfo#supportsExtendedPayment
   * @type Boolean
   * @access private
   */
  this.supportsExtendedPayment = null;

  /**
   * @name BillpayV1MessageSetInfo#canModifyPayments
   * @type Boolean
   * @access private
   */
  this.canModifyPayments = null;

  /**
   * @name BillpayV1MessageSetInfo#canModifyModels
   * @type Boolean
   * @access private
   */
  this.canModifyModels = null;

  /**
   * @name BillpayV1MessageSetInfo#supportsDifferentFirstPayment
   * @type Boolean
   * @access private
   */
  this.supportsDifferentFirstPayment = null;

  /**
   * @name BillpayV1MessageSetInfo#supportsDifferentLastPayment
   * @type Boolean
   * @access private
   */
  this.supportsDifferentLastPayment = null;

  /**
   * @name BillpayV1MessageSetInfo#supportsBillPresentmentContext
   * @type Boolean
   * @access private
   */
  this.supportsBillPresentmentContext = null;
}

inherit(BillpayV1MessageSetInfo, "extends", VersionSpecificMessageSetInfo);


Aggregate.add("BILLPAYMSGSETV1", BillpayV1MessageSetInfo);


BillpayV1MessageSetInfo.prototype.getMessageSetType = function() {
  return MessageSetType.payments;
};


BillpayV1MessageSetInfo.prototype.getDaysWith = function() {
  return this.daysWith;
};
Element.add(BillpayV1MessageSetInfo, {name: "DAYSWITH", required: true, order: 10, attributeType: Number, readMethod: "getDaysWith", writeMethod: "setDaysWith"});


BillpayV1MessageSetInfo.prototype.setDaysWith = function(/*Integer*/ daysWith) {
  this.daysWith = daysWith;
};


BillpayV1MessageSetInfo.prototype.getDefaultDaysToPay = function() {
  return this.defaultDaysToPay;
};
Element.add(BillpayV1MessageSetInfo, {name: "DFLTDAYSTOPAY", required: true, order: 20, attributeType: Number, readMethod: "getDefaultDaysToPay", writeMethod: "setDefaultDaysToPay"});


BillpayV1MessageSetInfo.prototype.setDefaultDaysToPay = function(/*Integer*/ defaultDaysToPay) {
  this.defaultDaysToPay = defaultDaysToPay;
};


BillpayV1MessageSetInfo.prototype.getTransferDaysWith = function() {
  return this.transferDaysWith;
};
Element.add(BillpayV1MessageSetInfo, {name: "XFERDAYSWITH", required: true, order: 30, attributeType: Number, readMethod: "getTransferDaysWith", writeMethod: "setTransferDaysWith"});


BillpayV1MessageSetInfo.prototype.setTransferDaysWith = function(/*Integer*/ transferDaysWith) {
  this.transferDaysWith = transferDaysWith;
};


BillpayV1MessageSetInfo.prototype.getTransferDefaultDaysToPay = function() {
  return this.transferDefaultDaysToPay;
};
Element.add(BillpayV1MessageSetInfo, {name: "XFERDFLTDAYSTOPAY", required: true, order: 40, attributeType: Number, readMethod: "getTransferDefaultDaysToPay", writeMethod: "setTransferDefaultDaysToPay"});


BillpayV1MessageSetInfo.prototype.setTransferDefaultDaysToPay = function(/*Integer*/ transferDefaultDaysToPay) {
  this.transferDefaultDaysToPay = transferDefaultDaysToPay;
};


BillpayV1MessageSetInfo.prototype.getProcessorDaysOff = function() {
  return this.processorDaysOff;
};
Element.add(BillpayV1MessageSetInfo, {name: "PROCDAYSOFF", order: 50, attributeType: Array, collectionEntryType: ProcessorDayOff, readMethod: "getProcessorDaysOff", writeMethod: "setProcessorDaysOff"});


BillpayV1MessageSetInfo.prototype.setProcessorDaysOff = function(/*ProcessorDayOff[]*/ processorDaysOff) {
  this.processorDaysOff = processorDaysOff;
};


BillpayV1MessageSetInfo.prototype.getProcessorEndTime = function() {
  return this.processorEndTime;
};
Element.add(BillpayV1MessageSetInfo, {name: "PROCENDTM", required: true, order: 60, attributeType: String, readMethod: "getProcessorEndTime", writeMethod: "setProcessorEndTime"});


BillpayV1MessageSetInfo.prototype.setProcessorEndTime = function(/*String*/ processorEndTime) {
  this.processorEndTime = processorEndTime;
};


BillpayV1MessageSetInfo.prototype.getModelWindow = function() {
  return this.modelWindow;
};
Element.add(BillpayV1MessageSetInfo, {name: "MODELWND", required: true, order: 70, attributeType: Number, readMethod: "getModelWindow", writeMethod: "setModelWindow"});


BillpayV1MessageSetInfo.prototype.setModelWindow = function(/*Integer*/ modelWindow) {
  this.modelWindow = modelWindow;
};


BillpayV1MessageSetInfo.prototype.getPostProcessorWindow = function() {
  return this.postProcessorWindow;
};
Element.add(BillpayV1MessageSetInfo, {name: "POSTPROCWND", required: true, order: 80, attributeType: Number, readMethod: "getPostProcessorWindow", writeMethod: "setPostProcessorWindow"});


BillpayV1MessageSetInfo.prototype.setPostProcessorWindow = function(/*Integer*/ postProcessorWindow) {
  this.postProcessorWindow = postProcessorWindow;
};


BillpayV1MessageSetInfo.prototype.getSupportsStatusUpdateViaPaymentModificationResponse = function() {
  return this.supportsStatusUpdateViaPaymentModificationResponse;
};
Element.add(BillpayV1MessageSetInfo, {name: "STSVIAMODS", required: true, order: 90, attributeType: Boolean, readMethod: "getSupportsStatusUpdateViaPaymentModificationResponse", writeMethod: "setSupportsStatusUpdateViaPaymentModificationResponse"});


BillpayV1MessageSetInfo.prototype.setSupportsStatusUpdateViaPaymentModificationResponse = function(/*Boolean*/ supportsStatusUpdateViaPaymentModificationResponse) {
  this.supportsStatusUpdateViaPaymentModificationResponse = supportsStatusUpdateViaPaymentModificationResponse;
};


BillpayV1MessageSetInfo.prototype.getSupportsPaymentByAddress = function() {
  return this.supportsPaymentByAddress;
};
Element.add(BillpayV1MessageSetInfo, {name: "PMTBYADDR", required: true, order: 100, attributeType: Boolean, readMethod: "getSupportsPaymentByAddress", writeMethod: "setSupportsPaymentByAddress"});


BillpayV1MessageSetInfo.prototype.setSupportsPaymentByAddress = function(/*Boolean*/ supportsPaymentByAddress) {
  this.supportsPaymentByAddress = supportsPaymentByAddress;
};


BillpayV1MessageSetInfo.prototype.getSupportsPaymentByTransfer = function() {
  return this.supportsPaymentByTransfer;
};
Element.add(BillpayV1MessageSetInfo, {name: "PMTBYXFER", required: true, order: 110, attributeType: Boolean, readMethod: "getSupportsPaymentByTransfer", writeMethod: "setSupportsPaymentByTransfer"});


BillpayV1MessageSetInfo.prototype.setSupportsPaymentByTransfer = function(/*Boolean*/ supportsPaymentByTransfer) {
  this.supportsPaymentByTransfer = supportsPaymentByTransfer;
};


BillpayV1MessageSetInfo.prototype.getSupportsPaymentByPayeeId = function() {
  return this.supportsPaymentByPayeeId;
};
Element.add(BillpayV1MessageSetInfo, {name: "PMTBYPAYEEID", required: true, order: 120, attributeType: Boolean, readMethod: "getSupportsPaymentByPayeeId", writeMethod: "setSupportsPaymentByPayeeId"});


BillpayV1MessageSetInfo.prototype.setSupportsPaymentByPayeeId = function(/*Boolean*/ supportsPaymentByPayeeId) {
  this.supportsPaymentByPayeeId = supportsPaymentByPayeeId;
};


BillpayV1MessageSetInfo.prototype.getUserCanAddPayee = function() {
  return this.userCanAddPayee;
};
Element.add(BillpayV1MessageSetInfo, {name: "CANADDPAYEE", required: true, order: 130, attributeType: Boolean, readMethod: "getUserCanAddPayee", writeMethod: "setUserCanAddPayee"});


BillpayV1MessageSetInfo.prototype.setUserCanAddPayee = function(/*Boolean*/ userCanAddPayee) {
  this.userCanAddPayee = userCanAddPayee;
};


BillpayV1MessageSetInfo.prototype.getSupportsExtendedPayment = function() {
  return this.supportsExtendedPayment;
};
Element.add(BillpayV1MessageSetInfo, {name: "HASEXTDPMT", required: true, order: 140, attributeType: Boolean, readMethod: "getSupportsExtendedPayment", writeMethod: "setSupportsExtendedPayment"});


BillpayV1MessageSetInfo.prototype.setSupportsExtendedPayment = function(/*Boolean*/ supportsExtendedPayment) {
  this.supportsExtendedPayment = supportsExtendedPayment;
};


BillpayV1MessageSetInfo.prototype.getCanModifyPayments = function() {
  return this.canModifyPayments;
};
Element.add(BillpayV1MessageSetInfo, {name: "CANMODPMTS", required: true, order: 150, attributeType: Boolean, readMethod: "getCanModifyPayments", writeMethod: "setCanModifyPayments"});


BillpayV1MessageSetInfo.prototype.setCanModifyPayments = function(/*Boolean*/ canModifyPayments) {
  this.canModifyPayments = canModifyPayments;
};


BillpayV1MessageSetInfo.prototype.getCanModifyModels = function() {
  return this.canModifyModels;
};
Element.add(BillpayV1MessageSetInfo, {name: "CANMODMDLS", required: true, order: 160, attributeType: Boolean, readMethod: "getCanModifyModels", writeMethod: "setCanModifyModels"});


BillpayV1MessageSetInfo.prototype.setCanModifyModels = function(/*Boolean*/ canModifyModels) {
  this.canModifyModels = canModifyModels;
};


BillpayV1MessageSetInfo.prototype.getSupportsDifferentFirstPayment = function() {
  return this.supportsDifferentFirstPayment;
};
Element.add(BillpayV1MessageSetInfo, {name: "DIFFFIRSTPMT", required: true, order: 170, attributeType: Boolean, readMethod: "getSupportsDifferentFirstPayment", writeMethod: "setSupportsDifferentFirstPayment"});


BillpayV1MessageSetInfo.prototype.setSupportsDifferentFirstPayment = function(/*Boolean*/ supportsDifferentFirstPayment) {
  this.supportsDifferentFirstPayment = supportsDifferentFirstPayment;
};


BillpayV1MessageSetInfo.prototype.getSupportsDifferentLastPayment = function() {
  return this.supportsDifferentLastPayment;
};
Element.add(BillpayV1MessageSetInfo, {name: "DIFFLASTPMT", required: true, order: 180, attributeType: Boolean, readMethod: "getSupportsDifferentLastPayment", writeMethod: "setSupportsDifferentLastPayment"});


BillpayV1MessageSetInfo.prototype.setSupportsDifferentLastPayment = function(/*Boolean*/ supportsDifferentLastPayment) {
  this.supportsDifferentLastPayment = supportsDifferentLastPayment;
};


BillpayV1MessageSetInfo.prototype.getSupportsBillPresentmentContext = function() {
  return this.supportsBillPresentmentContext;
};
Element.add(BillpayV1MessageSetInfo, {name: "BILLPUBCONTEXT", order: 190, attributeType: Boolean, readMethod: "getSupportsBillPresentmentContext", writeMethod: "setSupportsBillPresentmentContext"});


BillpayV1MessageSetInfo.prototype.setSupportsBillPresentmentContext = function(/*Boolean*/ supportsBillPresentmentContext) {
  this.supportsBillPresentmentContext = supportsBillPresentmentContext;
};




module.exports = BillpayV1MessageSetInfo;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../../MessageSetType":"/Users/aolson/Developer/ofx4js/src/domain/data/MessageSetType.js","../../common/ProcessorDayOff":"/Users/aolson/Developer/ofx4js/src/domain/data/common/ProcessorDayOff.js","../../profile/VersionSpecificMessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/VersionSpecificMessageSetInfo.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/CreditCardMessageSetInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var AbstractMessageSetInfo = require("../../profile/AbstractMessageSetInfo");
var Aggregate = require("../../../../meta/Aggregate");
var ChildAggregate = require("../../../../meta/ChildAggregate");
var CreditCardV1MessageSetInfo = require("./CreditCardV1MessageSetInfo");

/**
 * @class
 * @augments AbstractMessageSetInfo
 */
function CreditCardMessageSetInfo () {

  /**
   * @name CreditCardMessageSetInfo#version1Info
   * @type CreditCardV1MessageSetInfo
   * @access private
   */
  this.version1Info = null;
}

inherit(CreditCardMessageSetInfo, "extends", AbstractMessageSetInfo);


Aggregate.add("CREDITCARDMSGSET", CreditCardMessageSetInfo);


CreditCardMessageSetInfo.prototype.getVersion1Info = function() {
  return this.version1Info;
};
ChildAggregate.add(CreditCardMessageSetInfo, {order: 0, attributeType: CreditCardV1MessageSetInfo, readMethod: "getVersion1Info", writeMethod: "setVersion1Info"});


CreditCardMessageSetInfo.prototype.setVersion1Info = function(/*CreditCardV1MessageSetInfo*/ version1Info) {
  this.version1Info = version1Info;
};




module.exports = CreditCardMessageSetInfo;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../../profile/AbstractMessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/AbstractMessageSetInfo.js","./CreditCardV1MessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/CreditCardV1MessageSetInfo.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/CreditCardV1MessageSetInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var VersionSpecificMessageSetInfo = require("../../profile/VersionSpecificMessageSetInfo");
var MessageSetType = require("../../MessageSetType");
var Aggregate = require("../../../../meta/Aggregate");
var ChildAggregate = require("../../../../meta/ChildAggregate");
var Element = require("../../../../meta/Element");
var ImageProfile = require("./common/ImageProfile");

/**
 * Credit Card Message Set Profile
 * @class
 * @augments VersionSpecificMessageSetInfo
 * @see "Section 11.13.3 OFX Spec"
 */
function CreditCardV1MessageSetInfo () {

  /**
   * @name CreditCardV1MessageSetInfo#closingAvail
   * @type Boolean
   * @access private
   */
  this.closingAvail = null;

  /**
   * @name CreditCardV1MessageSetInfo#imageProfile
   * @type ImageProfile
   * @access private
   */
  this.imageProfile = null;
}

inherit(CreditCardV1MessageSetInfo, "extends", VersionSpecificMessageSetInfo);


Aggregate.add("CREDITCARDMSGSETV1", CreditCardV1MessageSetInfo);


CreditCardV1MessageSetInfo.prototype.getMessageSetType = function() {
  return MessageSetType.creditcard;
};


/**
 * Closing statement information available
 * @return {Boolean} Boolean
 */
CreditCardV1MessageSetInfo.prototype.getClosingAvail = function() {
  return this.closingAvail;
};
Element.add(CreditCardV1MessageSetInfo, {name: "CLOSINGAVAIL", required: true, order: 20, attributeType: Boolean, readMethod: "getClosingAvail", writeMethod: "setClosingAvail"});


CreditCardV1MessageSetInfo.prototype.setClosingAvail = function(/*Boolean*/ closingAvail) {
  this.closingAvail = closingAvail;
};


/**
 * Image profile (if supported)
 * @return {ImageProfile} ImageProfile
 */
CreditCardV1MessageSetInfo.prototype.getImageProfile = function() {
  return this.imageProfile;
};
ChildAggregate.add(CreditCardV1MessageSetInfo, {name: "IMAGEPROF", order: 10, attributeType: ImageProfile, readMethod: "getImageProfile", writeMethod: "setImageProfile"});


CreditCardV1MessageSetInfo.prototype.setImageProfile = function(/*ImageProfile*/ imageProfile) {
  this.imageProfile = imageProfile;
};




module.exports = CreditCardV1MessageSetInfo;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../../MessageSetType":"/Users/aolson/Developer/ofx4js/src/domain/data/MessageSetType.js","../../profile/VersionSpecificMessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/VersionSpecificMessageSetInfo.js","./common/ImageProfile":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/common/ImageProfile.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/EmailMessageSetInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var AbstractMessageSetInfo = require("../../profile/AbstractMessageSetInfo");
var Aggregate = require("../../../../meta/Aggregate");
var ChildAggregate = require("../../../../meta/ChildAggregate");
var EmailV1MessageSetInfo = require("./EmailV1MessageSetInfo");

/**
 * @class
 * @augments AbstractMessageSetInfo
 */
function EmailMessageSetInfo () {

  /**
   * @name EmailMessageSetInfo#version1Info
   * @type EmailV1MessageSetInfo
   * @access private
   */
  this.version1Info = null;
}

inherit(EmailMessageSetInfo, "extends", AbstractMessageSetInfo);


Aggregate.add("EMAILMSGSET", EmailMessageSetInfo);


EmailMessageSetInfo.prototype.getVersion1Info = function() {
  return this.version1Info;
};
ChildAggregate.add(EmailMessageSetInfo, {order: 0, attributeType: EmailV1MessageSetInfo, readMethod: "getVersion1Info", writeMethod: "setVersion1Info"});


EmailMessageSetInfo.prototype.setVersion1Info = function(/*EmailV1MessageSetInfo*/ version1Info) {
  this.version1Info = version1Info;
};




module.exports = EmailMessageSetInfo;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../../profile/AbstractMessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/AbstractMessageSetInfo.js","./EmailV1MessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/EmailV1MessageSetInfo.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/EmailV1MessageSetInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var VersionSpecificMessageSetInfo = require("../../profile/VersionSpecificMessageSetInfo");
var MessageSetType = require("../../MessageSetType");
var Aggregate = require("../../../../meta/Aggregate");
var Element = require("../../../../meta/Element");

/**
 * Email Message Set Profile Information
 * @class
 * @augments VersionSpecificMessageSetInfo
 * @see "Section 9.4.2 OFX Spec"
 */
function EmailV1MessageSetInfo () {

  /**
   * @name EmailV1MessageSetInfo#supportsMail
   * @type Boolean
   * @access private
   */
  this.supportsMail = null;

  /**
   * @name EmailV1MessageSetInfo#supportsMimeType
   * @type Boolean
   * @access private
   */
  this.supportsMimeType = null;
}

inherit(EmailV1MessageSetInfo, "extends", VersionSpecificMessageSetInfo);


Aggregate.add("EMAILMSGSETV1", EmailV1MessageSetInfo);


EmailV1MessageSetInfo.prototype.getMessageSetType = function() {
  return MessageSetType.email;
};


/**
 * Y if server supports <MAILRQ> request.
 * N if server supports only the <MAILSYNCRQ> request.
 * @return {Boolean} Boolean
 */
EmailV1MessageSetInfo.prototype.getSupportsMail = function() {
  return this.supportsMail;
};
Element.add(EmailV1MessageSetInfo, {name: "MAILSUP", required: true, order: 10, attributeType: Boolean, readMethod: "getSupportsMail", writeMethod: "setSupportsMail"});


EmailV1MessageSetInfo.prototype.setSupportsMail = function(/*Boolean*/ supportsMail) {
  this.supportsMail = supportsMail;
};


/**
 * Y if server supports get MIME message
 * @return {Boolean} Boolean
 */
EmailV1MessageSetInfo.prototype.getSupportsMimeType = function() {
  return this.supportsMimeType;
};
Element.add(EmailV1MessageSetInfo, {name: "GETMIMESUP", required: true, order: 20, attributeType: Boolean, readMethod: "getSupportsMimeType", writeMethod: "setSupportsMimeType"});


EmailV1MessageSetInfo.prototype.setSupportsMimeType = function(/*Boolean*/ supportsMimeType) {
  this.supportsMimeType = supportsMimeType;
};




module.exports = EmailV1MessageSetInfo;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../../MessageSetType":"/Users/aolson/Developer/ofx4js/src/domain/data/MessageSetType.js","../../profile/VersionSpecificMessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/VersionSpecificMessageSetInfo.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/InterbankTransferMessageSetInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var AbstractMessageSetInfo = require("../../profile/AbstractMessageSetInfo");
var Aggregate = require("../../../../meta/Aggregate");
var ChildAggregate = require("../../../../meta/ChildAggregate");
var InterbankTransferV1MessageSetInfo = require("./InterbankTransferV1MessageSetInfo");

/**
 * @class
 * @augments AbstractMessageSetInfo
 */
function InterbankTransferMessageSetInfo () {

  /**
   * @name InterbankTransferMessageSetInfo#version1Info
   * @type InterbankTransferV1MessageSetInfo
   * @access private
   */
  this.version1Info = null;
}

inherit(InterbankTransferMessageSetInfo, "extends", AbstractMessageSetInfo);


Aggregate.add("INTERXFERMSGSET", InterbankTransferMessageSetInfo);


InterbankTransferMessageSetInfo.prototype.getVersion1Info = function() {
  return this.version1Info;
};
ChildAggregate.add(InterbankTransferMessageSetInfo, {order: 0, attributeType: InterbankTransferV1MessageSetInfo, readMethod: "getVersion1Info", writeMethod: "setVersion1Info"});


InterbankTransferMessageSetInfo.prototype.setVersion1Info = function(/*InterbankTransferV1MessageSetInfo*/ version1Info) {
  this.version1Info = version1Info;
};




module.exports = InterbankTransferMessageSetInfo;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../../profile/AbstractMessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/AbstractMessageSetInfo.js","./InterbankTransferV1MessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/InterbankTransferV1MessageSetInfo.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/InterbankTransferV1MessageSetInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var VersionSpecificMessageSetInfo = require("../../profile/VersionSpecificMessageSetInfo");
var MessageSetType = require("../../MessageSetType");
var Aggregate = require("../../../../meta/Aggregate");
var ChildAggregate = require("../../../../meta/ChildAggregate");
var Element = require("../../../../meta/Element");
var TransferProfile = require("./common/TransferProfile");

/**
 * Interbank Funds Transfer Message Set Profile
 * @class
 * @augments VersionSpecificMessageSetInfo
 * @see "Section 11.13.4 OFX Spec"
 */
function InterbankTransferV1MessageSetInfo () {

  /**
   * @name InterbankTransferV1MessageSetInfo#transferProfile
   * @type TransferProfile
   * @access private
   */
  this.transferProfile = null;

  /**
   * @name InterbankTransferV1MessageSetInfo#supportsBillPay
   * @type Boolean
   * @access private
   */
  this.supportsBillPay = null;

  /**
   * @name InterbankTransferV1MessageSetInfo#cancelWindow
   * @type Integer
   * @access private
   */
  this.cancelWindow = null;

  /**
   * @name InterbankTransferV1MessageSetInfo#domesticInterbankTransferFee
   * @type Double
   * @access private
   */
  this.domesticInterbankTransferFee = null;

  /**
   * @name InterbankTransferV1MessageSetInfo#internationalInterbankTransferFee
   * @type Double
   * @access private
   */
  this.internationalInterbankTransferFee = null;
}

inherit(InterbankTransferV1MessageSetInfo, "extends", VersionSpecificMessageSetInfo);


Aggregate.add("INTERXFERMSGSETV1", InterbankTransferV1MessageSetInfo);


InterbankTransferV1MessageSetInfo.prototype.getMessageSetType = function() {
  return MessageSetType.interbank_transfer;
};


InterbankTransferV1MessageSetInfo.prototype.getTransferProfile = function() {
  return this.transferProfile;
};
ChildAggregate.add(InterbankTransferV1MessageSetInfo, {name: "XFERPROF", required: true, order: 10, attributeType: TransferProfile, readMethod: "getTransferProfile", writeMethod: "setTransferProfile"});


InterbankTransferV1MessageSetInfo.prototype.setTransferProfile = function(/*TransferProfile*/ transferProfile) {
  this.transferProfile = transferProfile;
};


InterbankTransferV1MessageSetInfo.prototype.getSupportsBillPay = function() {
  return this.supportsBillPay;
};
Element.add(InterbankTransferV1MessageSetInfo, {name: "CANBILLPAY", required: true, order: 20, attributeType: Boolean, readMethod: "getSupportsBillPay", writeMethod: "setSupportsBillPay"});


InterbankTransferV1MessageSetInfo.prototype.setSupportsBillPay = function(/*Boolean*/ supportsBillPay) {
  this.supportsBillPay = supportsBillPay;
};


InterbankTransferV1MessageSetInfo.prototype.getCancelWindow = function() {
  return this.cancelWindow;
};
Element.add(InterbankTransferV1MessageSetInfo, {name: "CANCELWND", required: true, order: 30, attributeType: Number, readMethod: "getCancelWindow", writeMethod: "setCancelWindow"});


InterbankTransferV1MessageSetInfo.prototype.setCancelWindow = function(/*Integer*/ cancelWindow) {
  this.cancelWindow = cancelWindow;
};


InterbankTransferV1MessageSetInfo.prototype.getDomesticInterbankTransferFee = function() {
  return this.domesticInterbankTransferFee;
};
Element.add(InterbankTransferV1MessageSetInfo, {name: "DOMXFERFEE", required: true, order: 40, attributeType: Number, readMethod: "getDomesticInterbankTransferFee", writeMethod: "setDomesticInterbankTransferFee"});


InterbankTransferV1MessageSetInfo.prototype.setDomesticInterbankTransferFee = function(/*Double*/ domesticInterbankTransferFee) {
  this.domesticInterbankTransferFee = domesticInterbankTransferFee;
};


InterbankTransferV1MessageSetInfo.prototype.getInternationalInterbankTransferFee = function() {
  return this.internationalInterbankTransferFee;
};
Element.add(InterbankTransferV1MessageSetInfo, {name: "INTLXFERFEE", required: true, order: 50, attributeType: Number, readMethod: "getInternationalInterbankTransferFee", writeMethod: "setInternationalInterbankTransferFee"});


InterbankTransferV1MessageSetInfo.prototype.setInternationalInterbankTransferFee = function(/*Double*/ internationalInterbankTransferFee) {
  this.internationalInterbankTransferFee = internationalInterbankTransferFee;
};




module.exports = InterbankTransferV1MessageSetInfo;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../../MessageSetType":"/Users/aolson/Developer/ofx4js/src/domain/data/MessageSetType.js","../../profile/VersionSpecificMessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/VersionSpecificMessageSetInfo.js","./common/TransferProfile":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/common/TransferProfile.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/InvestmentMessageSetInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var AbstractMessageSetInfo = require("../../profile/AbstractMessageSetInfo");
var Aggregate = require("../../../../meta/Aggregate");
var ChildAggregate = require("../../../../meta/ChildAggregate");
var InvestmentV1MessageSetInfo = require("./InvestmentV1MessageSetInfo");

/**
 * @class
 * @augments AbstractMessageSetInfo
 */
function InvestmentMessageSetInfo () {

  /**
   * @name InvestmentMessageSetInfo#version1Info
   * @type InvestmentV1MessageSetInfo
   * @access private
   */
  this.version1Info = null;
}

inherit(InvestmentMessageSetInfo, "extends", AbstractMessageSetInfo);


Aggregate.add("INVSTMTMSGSET", InvestmentMessageSetInfo);


InvestmentMessageSetInfo.prototype.getVersion1Info = function() {
  return this.version1Info;
};
ChildAggregate.add(InvestmentMessageSetInfo, {order: 0, attributeType: InvestmentV1MessageSetInfo, readMethod: "getVersion1Info", writeMethod: "setVersion1Info"});


InvestmentMessageSetInfo.prototype.setVersion1Info = function(/*InvestmentV1MessageSetInfo*/ version1Info) {
  this.version1Info = version1Info;
};




module.exports = InvestmentMessageSetInfo;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../../profile/AbstractMessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/AbstractMessageSetInfo.js","./InvestmentV1MessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/InvestmentV1MessageSetInfo.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/InvestmentV1MessageSetInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var VersionSpecificMessageSetInfo = require("../../profile/VersionSpecificMessageSetInfo");
var MessageSetType = require("../../MessageSetType");
var Aggregate = require("../../../../meta/Aggregate");
var Element = require("../../../../meta/Element");

/**
 * @see "Section 13.7.1.1, OFX Spec"
 *
 * @author Jon Perlow
 * @author Ryan Heaton
 */
function InvestmentV1MessageSetInfo () {

  /**
   * @name InvestmentV1MessageSetInfo#supportsStatementsDownload
   * @type Boolean
   * @access private
   */
  this.supportsStatementsDownload = null;

  /**
   * @name InvestmentV1MessageSetInfo#supportsOpenOrdersDownload
   * @type Boolean
   * @access private
   */
  this.supportsOpenOrdersDownload = null;

  /**
   * @name InvestmentV1MessageSetInfo#supportsPositionsDownload
   * @type Boolean
   * @access private
   */
  this.supportsPositionsDownload = null;

  /**
   * @name InvestmentV1MessageSetInfo#supportsBalanceDownload
   * @type Boolean
   * @access private
   */
  this.supportsBalanceDownload = null;

  /**
   * @name InvestmentV1MessageSetInfo#supportsEmail
   * @type Boolean
   * @access private
   */
  this.supportsEmail = null;

  /**
   * @name InvestmentV1MessageSetInfo#supports401kInformation
   * @type Boolean
   * @access private
   */
  this.supports401kInformation = null;

  /**
   * @name InvestmentV1MessageSetInfo#supportsClosingStatements
   * @type Boolean
   * @access private
   */
  this.supportsClosingStatements = null;
}

inherit(InvestmentV1MessageSetInfo, "extends", VersionSpecificMessageSetInfo);


Aggregate.add("INVSTMTMSGSETV1", InvestmentV1MessageSetInfo);


InvestmentV1MessageSetInfo.prototype.getMessageSetType = function() {
  return MessageSetType.investment;
};


InvestmentV1MessageSetInfo.prototype.getSupportsStatementsDownload = function() {
  return this.supportsStatementsDownload;
};
Element.add(InvestmentV1MessageSetInfo, {name: "TRANDNLD", required:true, order: 10, attributeType: Boolean, readMethod: "getSupportsStatementsDownload", writeMethod: "setSupportsStatementsDownload"});


InvestmentV1MessageSetInfo.prototype.setSupportsStatementsDownload = function(/*Boolean*/ supportsStatementsDownload) {
  this.supportsStatementsDownload = supportsStatementsDownload;
};


InvestmentV1MessageSetInfo.prototype.getSupportsOpenOrdersDownload = function() {
  return this.supportsOpenOrdersDownload;
};
Element.add(InvestmentV1MessageSetInfo, {name: "OODNLD", required:true, order: 20, attributeType: Boolean, readMethod: "getSupportsOpenOrdersDownload", writeMethod: "setSupportsOpenOrdersDownload"});


InvestmentV1MessageSetInfo.prototype.setSupportsOpenOrdersDownload = function(/*Boolean*/ supportsOpenOrdersDownload) {
  this.supportsOpenOrdersDownload = supportsOpenOrdersDownload;
};


InvestmentV1MessageSetInfo.prototype.getSupportsPositionsDownload = function() {
  return this.supportsPositionsDownload;
};
Element.add(InvestmentV1MessageSetInfo, {name: "POSDNLD", required:true, order: 30, attributeType: Boolean, readMethod: "getSupportsPositionsDownload", writeMethod: "setSupportsPositionsDownload"});


InvestmentV1MessageSetInfo.prototype.setSupportsPositionsDownload = function(/*Boolean*/ supportsPositionsDownload) {
  this.supportsPositionsDownload = supportsPositionsDownload;
};


InvestmentV1MessageSetInfo.prototype.getSupportsBalanceDownload = function() {
  return this.supportsBalanceDownload;
};
Element.add(InvestmentV1MessageSetInfo, {name: "BALDNLD", required:true, order: 40, attributeType: Boolean, readMethod: "getSupportsBalanceDownload", writeMethod: "setSupportsBalanceDownload"});


InvestmentV1MessageSetInfo.prototype.setSupportsBalanceDownload = function(/*Boolean*/ supportsBalanceDownload) {
  this.supportsBalanceDownload = supportsBalanceDownload;
};


InvestmentV1MessageSetInfo.prototype.getSupportsEmail = function() {
  return this.supportsEmail;
};
Element.add(InvestmentV1MessageSetInfo, {name: "CANEMAIL", required:true, order: 50, attributeType: Boolean, readMethod: "getSupportsEmail", writeMethod: "setSupportsEmail"});


InvestmentV1MessageSetInfo.prototype.setSupportsEmail = function(/*Boolean*/ supportsEmail) {
  this.supportsEmail = supportsEmail;
};


InvestmentV1MessageSetInfo.prototype.getSupports401kInformation = function() {
  return this.supports401kInformation;
};
Element.add(InvestmentV1MessageSetInfo, {name: "INV401KDNLD", order: 60, attributeType: Boolean, readMethod: "getSupports401kInformation", writeMethod: "setSupports401kInformation"});


InvestmentV1MessageSetInfo.prototype.setSupports401kInformation = function(/*Boolean*/ supports401kInformation) {
  this.supports401kInformation = supports401kInformation;
};


InvestmentV1MessageSetInfo.prototype.getSupportsClosingStatements = function() {
  return this.supportsClosingStatements;
};
Element.add(InvestmentV1MessageSetInfo, {name: "CLOSINGAVAIL", order: 70, attributeType: Boolean, readMethod: "getSupportsClosingStatements", writeMethod: "setSupportsClosingStatements"});


InvestmentV1MessageSetInfo.prototype.setSupportsClosingStatements = function(/*Boolean*/ supportsClosingStatements) {
  this.supportsClosingStatements = supportsClosingStatements;
};




module.exports = InvestmentV1MessageSetInfo;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../../MessageSetType":"/Users/aolson/Developer/ofx4js/src/domain/data/MessageSetType.js","../../profile/VersionSpecificMessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/VersionSpecificMessageSetInfo.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/ProfileMessageSetInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var AbstractMessageSetInfo = require("../../profile/AbstractMessageSetInfo");
var Aggregate = require("../../../../meta/Aggregate");
var ChildAggregate = require("../../../../meta/ChildAggregate");
var ProfileV1MessageSetInfo = require("./ProfileV1MessageSetInfo");

/**
 * @class
 * @augments AbstractMessageSetInfo
 */
function ProfileMessageSetInfo () {

  /**
   * @name ProfileMessageSetInfo#version1Info
   * @type ProfileV1MessageSetInfo
   * @access private
   */
  this.version1Info = null;
}

inherit(ProfileMessageSetInfo, "extends", AbstractMessageSetInfo);


Aggregate.add("PROFMSGSET", ProfileMessageSetInfo);


ProfileMessageSetInfo.prototype.getVersion1Info = function() {
  return this.version1Info;
};
ChildAggregate.add(ProfileMessageSetInfo, {order: 0, attributeType: ProfileV1MessageSetInfo, readMethod: "getVersion1Info", writeMethod: "setVersion1Info"});


ProfileMessageSetInfo.prototype.setVersion1Info = function(/*ProfileV1MessageSetInfo*/ version1Info) {
  this.version1Info = version1Info;
};




module.exports = ProfileMessageSetInfo;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../../profile/AbstractMessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/AbstractMessageSetInfo.js","./ProfileV1MessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/ProfileV1MessageSetInfo.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/ProfileV1MessageSetInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var VersionSpecificMessageSetInfo = require("../../profile/VersionSpecificMessageSetInfo");
var MessageSetType = require("../../MessageSetType");
var Aggregate = require("../../../../meta/Aggregate");

/**
 * @class
 * @augments VersionSpecificMessageSetInfo
 */
function ProfileV1MessageSetInfo () {
}

inherit(ProfileV1MessageSetInfo, "extends", VersionSpecificMessageSetInfo);


Aggregate.add("PROFMSGSETV1", ProfileV1MessageSetInfo);


ProfileV1MessageSetInfo.prototype.getMessageSetType = function() {
  return MessageSetType.profile;
};




module.exports = ProfileV1MessageSetInfo;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../../MessageSetType":"/Users/aolson/Developer/ofx4js/src/domain/data/MessageSetType.js","../../profile/VersionSpecificMessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/VersionSpecificMessageSetInfo.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/SecurityListMessageSetInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var AbstractMessageSetInfo = require("../../profile/AbstractMessageSetInfo");
var Aggregate = require("../../../../meta/Aggregate");
var ChildAggregate = require("../../../../meta/ChildAggregate");
var SecurityListV1MessageSetInfo = require("./SecurityListV1MessageSetInfo");

/**
 * @class
 * @augments AbstractMessageSetInfo
 */
function SecurityListMessageSetInfo () {

  /**
   * @name SecurityListMessageSetInfo#version1Info
   * @type SecurityListV1MessageSetInfo
   * @access private
   */
  this.version1Info = null;
}

inherit(SecurityListMessageSetInfo, "extends", AbstractMessageSetInfo);


Aggregate.add("SECLISTMSGSET", SecurityListMessageSetInfo);


SecurityListMessageSetInfo.prototype.getVersion1Info = function() {
  return this.version1Info;
};
ChildAggregate.add(SecurityListMessageSetInfo, {order: 0, attributeType: SecurityListV1MessageSetInfo, readMethod: "getVersion1Info", writeMethod: "setVersion1Info"});


SecurityListMessageSetInfo.prototype.setVersion1Info = function(/*SecurityListV1MessageSetInfo*/ version1Info) {
  this.version1Info = version1Info;
};




module.exports = SecurityListMessageSetInfo;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../../profile/AbstractMessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/AbstractMessageSetInfo.js","./SecurityListV1MessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/SecurityListV1MessageSetInfo.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/SecurityListV1MessageSetInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var VersionSpecificMessageSetInfo = require("../../profile/VersionSpecificMessageSetInfo");
var MessageSetType = require("../../MessageSetType");
var Aggregate = require("../../../../meta/Aggregate");
var Element = require("../../../../meta/Element");

/**
 * @see "Section 13.7.2.1, OFX Spec"
 *
 * @class
 * @augments VersionSpecificMessageSetInfo
 */
function SecurityListV1MessageSetInfo () {

  /**
   * @name SecurityListV1MessageSetInfo#supportsSecurityListDownload
   * @type Boolean
   * @access private
   */
  this.supportsSecurityListDownload = null;
}

inherit(SecurityListV1MessageSetInfo, "extends", VersionSpecificMessageSetInfo);


Aggregate.add("SECLISTMSGSETV1", SecurityListV1MessageSetInfo);


SecurityListV1MessageSetInfo.prototype.getMessageSetType = function() {
  return MessageSetType.investment_security;
};


SecurityListV1MessageSetInfo.prototype.getSupportsSecurityListDownload = function() {
  return this.supportsSecurityListDownload;
};
Element.add(SecurityListV1MessageSetInfo, {name: "SECLISTRQDNLD", required:true, order: 10, attributeType: Boolean, readMethod: "getSupportsSecurityListDownload", writeMethod: "setSupportsSecurityListDownload"});


SecurityListV1MessageSetInfo.prototype.setSupportsSecurityListDownload = function(/*Boolean*/ supportsSecurityListDownload) {
  this.supportsSecurityListDownload = supportsSecurityListDownload;
};




module.exports = SecurityListV1MessageSetInfo;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../../MessageSetType":"/Users/aolson/Developer/ofx4js/src/domain/data/MessageSetType.js","../../profile/VersionSpecificMessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/VersionSpecificMessageSetInfo.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/SignOnMessageSetInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var AbstractMessageSetInfo = require("../../profile/AbstractMessageSetInfo");
var Aggregate = require("../../../../meta/Aggregate");
var ChildAggregate = require("../../../../meta/ChildAggregate");
var SignOnV1MessageSetInfo = require("./SignOnV1MessageSetInfo");

/**
 * @class
 * @augments AbstractMessageSetInfo
 */
function SignOnMessageSetInfo () {

  /**
   * @name SignOnMessageSetInfo#version1Info
   * @type SignOnV1MessageSetInfo
   * @access private
   */
  this.version1Info = null;
}

inherit(SignOnMessageSetInfo, "extends", AbstractMessageSetInfo);


Aggregate.add("SIGNONMSGSET", SignOnMessageSetInfo);


SignOnMessageSetInfo.prototype.getVersion1Info = function() {
  return this.version1Info;
};
ChildAggregate.add(SignOnMessageSetInfo, {order: 0, attributeType: SignOnV1MessageSetInfo, readMethod: "getVersion1Info", writeMethod: "setVersion1Info"});


SignOnMessageSetInfo.prototype.setVersion1Info = function(/*SignOnV1MessageSetInfo*/ version1Info) {
  this.version1Info = version1Info;
};




module.exports = SignOnMessageSetInfo;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../../profile/AbstractMessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/AbstractMessageSetInfo.js","./SignOnV1MessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/SignOnV1MessageSetInfo.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/SignOnV1MessageSetInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var MessageSetType = require("../../MessageSetType");
var VersionSpecificMessageSetInfo = require("../../profile/VersionSpecificMessageSetInfo");
var Aggregate = require("../../../../meta/Aggregate");

/**
 * @class
 * @augments VersionSpecificMessageSetInfo
 */
function SignOnV1MessageSetInfo () {
}

inherit(SignOnV1MessageSetInfo, "extends", VersionSpecificMessageSetInfo);


Aggregate.add("SIGNONMSGSETV1", SignOnV1MessageSetInfo);


SignOnV1MessageSetInfo.prototype.getMessageSetType = function() {
  return MessageSetType.signon;
};




module.exports = SignOnV1MessageSetInfo;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../../MessageSetType":"/Users/aolson/Developer/ofx4js/src/domain/data/MessageSetType.js","../../profile/VersionSpecificMessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/VersionSpecificMessageSetInfo.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/SignupMessageSetInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var AbstractMessageSetInfo = require("../../profile/AbstractMessageSetInfo");
var Aggregate = require("../../../../meta/Aggregate");
var ChildAggregate = require("../../../../meta/ChildAggregate");
var SignupV1MessageSetInfo = require("./SignupV1MessageSetInfo");

/**
 * @class
 * @augments AbstractMessageSetInfo
 */
function SignupMessageSetInfo () {

  /**
   * @name SignupMessageSetInfo#version1Info
   * @type SignupV1MessageSetInfo
   * @access private
   */
  this.version1Info = null;
}

inherit(SignupMessageSetInfo, "extends", AbstractMessageSetInfo);


Aggregate.add("SIGNUPMSGSET", SignupMessageSetInfo);


SignupMessageSetInfo.prototype.getVersion1Info = function() {
  return this.version1Info;
};
ChildAggregate.add(SignupMessageSetInfo, {order: 0, attributeType: SignupV1MessageSetInfo, readMethod: "getVersion1Info", writeMethod: "setVersion1Info"});


SignupMessageSetInfo.prototype.setVersion1Info = function(/*SignupV1MessageSetInfo*/ version1Info) {
  this.version1Info = version1Info;
};




module.exports = SignupMessageSetInfo;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../../profile/AbstractMessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/AbstractMessageSetInfo.js","./SignupV1MessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/SignupV1MessageSetInfo.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/SignupV1MessageSetInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var VersionSpecificMessageSetInfo = require("../../profile/VersionSpecificMessageSetInfo");
var MessageSetType = require("../../MessageSetType");
var Aggregate = require("../../../../meta/Aggregate");
var ChildAggregate = require("../../../../meta/ChildAggregate");
var Element = require("../../../../meta/Element");
var ClientEnrollment = require("./signup/ClientEnrollment");
var WebEnrollment = require("./signup/WebEnrollment");
var OtherEnrollment = require("./signup/OtherEnrollment");

/**
 * Servers use the Signup Message Set Profile Information to define how enrollment should proceed.
 *
 * This aggregate should contain 1 Enrollment option among <CLIENTENROLL>, <WEBENROLL>, or <OTHERENROLL>.
 * todo: review how best to enforce this constraint
 *
 * @class
 * @augments VersionSpecificMessageSetInfo
 * @see "Section 8.8 OFX Spec"
 */
function SignupV1MessageSetInfo () {

  /**
   * @name SignupV1MessageSetInfo#clientEnrollment
   * @type ClientEnrollment
   * @access private
   */
  this.clientEnrollment = null;

  /**
   * @name SignupV1MessageSetInfo#webEnrollment
   * @type WebEnrollment
   * @access private
   */
  this.webEnrollment = null;

  /**
   * @name SignupV1MessageSetInfo#otherEnrollment
   * @type OtherEnrollment
   * @access private
   */
  this.otherEnrollment = null;

  /**
   * @name SignupV1MessageSetInfo#supportsClientUserInfoChanges
   * @type Boolean
   * @access private
   */
  this.supportsClientUserInfoChanges = null;

  /**
   * @name SignupV1MessageSetInfo#supportsAvailableAccounts
   * @type Boolean
   * @access private
   */
  this.supportsAvailableAccounts = null;

  /**
   * @name SignupV1MessageSetInfo#supportsClientServiceActivationRequests
   * @type Boolean
   * @access private
   */
  this.supportsClientServiceActivationRequests = null;
}

inherit(SignupV1MessageSetInfo, "extends", VersionSpecificMessageSetInfo);


Aggregate.add("SIGNUPMSGSETV1", SignupV1MessageSetInfo);


SignupV1MessageSetInfo.prototype.getMessageSetType = function() {
  return MessageSetType.signup;
};


SignupV1MessageSetInfo.prototype.getClientEnrollment = function() {
  return this.clientEnrollment;
};
ChildAggregate.add(SignupV1MessageSetInfo, {name: "CLIENTENROLL", order: 10, attributeType: ClientEnrollment, readMethod: "getClientEnrollment", writeMethod: "setClientEnrollment"});


SignupV1MessageSetInfo.prototype.setClientEnrollment = function(/*ClientEnrollment*/ clientEnrollment) {
  this.clientEnrollment = clientEnrollment;
};


SignupV1MessageSetInfo.prototype.getWebEnrollment = function() {
  return this.webEnrollment;
};
ChildAggregate.add(SignupV1MessageSetInfo, {name: "WEBENROLL", order: 20, attributeType: WebEnrollment, readMethod: "getWebEnrollment", writeMethod: "setWebEnrollment"});


SignupV1MessageSetInfo.prototype.setWebEnrollment = function(/*WebEnrollment*/ webEnrollment) {
  this.webEnrollment = webEnrollment;
};


SignupV1MessageSetInfo.prototype.getOtherEnrollment = function() {
  return this.otherEnrollment;
};
ChildAggregate.add(SignupV1MessageSetInfo, {name: "OTHERENROLL", order: 30, attributeType: OtherEnrollment, readMethod: "getOtherEnrollment", writeMethod: "setOtherEnrollment"});


SignupV1MessageSetInfo.prototype.setOtherEnrollment = function(/*OtherEnrollment*/ otherEnrollment) {
  this.otherEnrollment = otherEnrollment;
};


/**
 * Y if server supports client-based user information changes,
 * @return {Boolean} Boolean
 */
SignupV1MessageSetInfo.prototype.getSupportsClientUserInfoChanges = function() {
  return this.supportsClientUserInfoChanges;
};
Element.add(SignupV1MessageSetInfo, {name: "CHGUSERINFO", required: true, order: 40, attributeType: Boolean, readMethod: "getSupportsClientUserInfoChanges", writeMethod: "setSupportsClientUserInfoChanges"});


SignupV1MessageSetInfo.prototype.setSupportsClientUserInfoChanges = function(/*Boolean*/ supportsClientUserInfoChanges) {
  this.supportsClientUserInfoChanges = supportsClientUserInfoChanges;
};


/**
 * Y if server can provide information on accounts with SVCSTATUS available,
 * N means client should expect to ask user for specific account information
 * @return {Boolean} Boolean
 */
SignupV1MessageSetInfo.prototype.getSupportsAvailableAccounts = function() {
  return this.supportsAvailableAccounts;
};
Element.add(SignupV1MessageSetInfo, {name: "AVAILACCTS", required: true, order: 50, attributeType: Boolean, readMethod: "getSupportsAvailableAccounts", writeMethod: "setSupportsAvailableAccounts"});


SignupV1MessageSetInfo.prototype.setSupportsAvailableAccounts = function(/*Boolean*/ supportsAvailableAccounts) {
  this.supportsAvailableAccounts = supportsAvailableAccounts;
};


/**
 * Y if server allows clients to make service activation requests (<ACCTRQ>),
 * N if server will only advise clients via synchronization of service additions,
 * changes, or deletions.
 * @return {Boolean} Boolean
 */
SignupV1MessageSetInfo.prototype.getSupportsClientServiceActivationRequests = function() {
  return this.supportsClientServiceActivationRequests;
};
Element.add(SignupV1MessageSetInfo, {name: "CLIENTACTREQ", required: true, order: 60, attributeType: Boolean, readMethod: "getSupportsClientServiceActivationRequests", writeMethod: "setSupportsClientServiceActivationRequests"});


SignupV1MessageSetInfo.prototype.setSupportsClientServiceActivationRequests = function(/*Boolean*/ supportsClientServiceActivationRequests) {
  this.supportsClientServiceActivationRequests = supportsClientServiceActivationRequests;
};




module.exports = SignupV1MessageSetInfo;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../../MessageSetType":"/Users/aolson/Developer/ofx4js/src/domain/data/MessageSetType.js","../../profile/VersionSpecificMessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/VersionSpecificMessageSetInfo.js","./signup/ClientEnrollment":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/signup/ClientEnrollment.js","./signup/OtherEnrollment":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/signup/OtherEnrollment.js","./signup/WebEnrollment":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/signup/WebEnrollment.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/WireTransferMessageSetInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var AbstractMessageSetInfo = require("../../profile/AbstractMessageSetInfo");
var Aggregate = require("../../../../meta/Aggregate");
var ChildAggregate = require("../../../../meta/ChildAggregate");
var WireTransferV1MessageSetInfo = require("./WireTransferV1MessageSetInfo");

/**
 * @class
 * @augments AbstractMessageSetInfo
 */
function WireTransferMessageSetInfo () {

  /**
   * @name WireTransferMessageSetInfo#version1Info
   * @type WireTransferV1MessageSetInfo
   * @access private
   */
  this.version1Info = null;
}

inherit(WireTransferMessageSetInfo, "extends", AbstractMessageSetInfo);


Aggregate.add("WIREXFERMSGSET", WireTransferMessageSetInfo);


WireTransferMessageSetInfo.prototype.getVersion1Info = function() {
  return this.version1Info;
};
ChildAggregate.add(WireTransferMessageSetInfo, {order: 0, attributeType: WireTransferV1MessageSetInfo, readMethod: "getVersion1Info", writeMethod: "setVersion1Info"});


WireTransferMessageSetInfo.prototype.setVersion1Info = function(/*WireTransferV1MessageSetInfo*/ version1Info) {
  this.version1Info = version1Info;
};




module.exports = WireTransferMessageSetInfo;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../../profile/AbstractMessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/AbstractMessageSetInfo.js","./WireTransferV1MessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/WireTransferV1MessageSetInfo.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/WireTransferV1MessageSetInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../../util/inherit");

var VersionSpecificMessageSetInfo = require("../../profile/VersionSpecificMessageSetInfo");
var MessageSetType = require("../../MessageSetType");
var Aggregate = require("../../../../meta/Aggregate");
var Element = require("../../../../meta/Element");
var ProcessorDayOff = require("../../common/ProcessorDayOff");

/**
 * Wire Transfer Message Set Profile
 * @class
 * @augments VersionSpecificMessageSetInfo
 * @see "Section 11.13.5 OFX Spec"
 */
function WireTransferV1MessageSetInfo () {

  /**
   * @name WireTransferV1MessageSetInfo#processorDaysOff
   * @type List<ProcessorDayOff>
   * @access private
   */
  this.processorDaysOff = null;

  /**
   * @name WireTransferV1MessageSetInfo#processEndTime
   * @type String
   * @access private
   */
  this.processEndTime = null;

  /**
   * @name WireTransferV1MessageSetInfo#supportsScheduledTransfers
   * @type Boolean
   * @access private
   */
  this.supportsScheduledTransfers = null;

  /**
   * @name WireTransferV1MessageSetInfo#domesticWireTransferFee
   * @type Double
   * @access private
   */
  this.domesticWireTransferFee = null;

  /**
   * @name WireTransferV1MessageSetInfo#internationalWireTransferFee
   * @type Double
   * @access private
   */
  this.internationalWireTransferFee = null;
}

inherit(WireTransferV1MessageSetInfo, "extends", VersionSpecificMessageSetInfo);


Aggregate.add("WIREXFERMSGSETV1", WireTransferV1MessageSetInfo);


WireTransferV1MessageSetInfo.prototype.getMessageSetType = function() {
  return MessageSetType.wire_transfer;
};


WireTransferV1MessageSetInfo.prototype.getProcessorDaysOff = function() {
  return this.processorDaysOff;
};
Element.add(WireTransferV1MessageSetInfo, {name: "PROCDAYSOFF", order: 10, attributeType: Array, collectionEntryType: ProcessorDayOff, readMethod: "getProcessorDaysOff", writeMethod: "setProcessorDaysOff"});


WireTransferV1MessageSetInfo.prototype.setProcessorDaysOff = function(/*ProcessorDayOff[]*/ processorDaysOff) {
  this.processorDaysOff = processorDaysOff;
};


WireTransferV1MessageSetInfo.prototype.getProcessEndTime = function() {
  return this.processEndTime;
};
Element.add(WireTransferV1MessageSetInfo, {name: "PROCENDTM", required: true, order: 20, attributeType: String, readMethod: "getProcessEndTime", writeMethod: "setProcessEndTime"});


WireTransferV1MessageSetInfo.prototype.setProcessEndTime = function(/*String*/ processEndTime) {
  this.processEndTime = processEndTime;
};


WireTransferV1MessageSetInfo.prototype.getSupportsScheduledTransfers = function() {
  return this.supportsScheduledTransfers;
};
Element.add(WireTransferV1MessageSetInfo, {name: "CANSCHED", required: true, order: 30, attributeType: Boolean, readMethod: "getSupportsScheduledTransfers", writeMethod: "setSupportsScheduledTransfers"});


WireTransferV1MessageSetInfo.prototype.setSupportsScheduledTransfers = function(/*Boolean*/ supportsScheduledTransfers) {
  this.supportsScheduledTransfers = supportsScheduledTransfers;
};


WireTransferV1MessageSetInfo.prototype.getDomesticWireTransferFee = function() {
  return this.domesticWireTransferFee;
};
Element.add(WireTransferV1MessageSetInfo, {name: "DOMXFERFEE", required: true, order: 40, attributeType: Number, readMethod: "getDomesticWireTransferFee", writeMethod: "setDomesticWireTransferFee"});


WireTransferV1MessageSetInfo.prototype.setDomesticWireTransferFee = function(/*Double*/ domesticWireTransferFee) {
  this.domesticWireTransferFee = domesticWireTransferFee;
};


WireTransferV1MessageSetInfo.prototype.getInternationalWireTransferFee = function() {
  return this.internationalWireTransferFee;
};
Element.add(WireTransferV1MessageSetInfo, {name: "INTLXFERFEE", required: true, order: 50, attributeType: Number, readMethod: "getInternationalWireTransferFee", writeMethod: "setInternationalWireTransferFee"});


WireTransferV1MessageSetInfo.prototype.setInternationalWireTransferFee = function(/*Double*/ internationalWireTransferFee) {
  this.internationalWireTransferFee = internationalWireTransferFee;
};




module.exports = WireTransferV1MessageSetInfo;

},{"../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../../MessageSetType":"/Users/aolson/Developer/ofx4js/src/domain/data/MessageSetType.js","../../common/ProcessorDayOff":"/Users/aolson/Developer/ofx4js/src/domain/data/common/ProcessorDayOff.js","../../profile/VersionSpecificMessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/VersionSpecificMessageSetInfo.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/banking/EmailProfile.js":[function(require,module,exports){
/*
 * Copyright 2012 TheStash
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var Aggregate = require("../../../../../meta/Aggregate");
var Element = require("../../../../../meta/Element");

/**
 * Email Profile
 * @class
 * @see "Section 11.13.2.3 OFX Spec"
 */
function EmailProfile () {

  /**
   * @name EmailProfile#canEmail
   * @type Boolean
   * @access private
   */
  this.canEmail = null;

  /**
   * @name EmailProfile#canNotify
   * @type Boolean
   * @access private
   */
  this.canNotify = null;
}



Aggregate.add("EMAILPROF", EmailProfile);


EmailProfile.prototype.getCanEmail = function() {
  return this.canEmail;
};
Element.add(EmailProfile, {name: "CANEMAIL", required: true, order: 10, attributeType: Boolean, readMethod: "getCanEmail", writeMethod: "setCanEmail"});


EmailProfile.prototype.setCanEmail = function(/*Boolean*/ canEmail) {
  this.canEmail = canEmail;
};


EmailProfile.prototype.getCanNotify = function() {
  return this.canNotify;
};
Element.add(EmailProfile, {name: "CANNOTIFY", required: true, order: 20, attributeType: Boolean, readMethod: "getCanNotify", writeMethod: "setCanNotify"});


EmailProfile.prototype.setCanNotify = function(/*Boolean*/ canNotify) {
  this.canNotify = canNotify;
};




module.exports = EmailProfile;

},{"../../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/banking/StopCheckProfile.js":[function(require,module,exports){
/*
 * Copyright 2012 TheStash
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var Aggregate = require("../../../../../meta/Aggregate");
var Element = require("../../../../../meta/Element");
var ProcessorDayOff = require("../../../common/ProcessorDayOff");

/**
 * Stop Check Profile
 * @class
 * @see "Section 11.13.2.3 OFX Spec"
 */
function StopCheckProfile () {

  /**
   * @name StopCheckProfile#processorDaysOff
   * @type List<ProcessorDayOff>
   * @access private
   */
  this.processorDaysOff = null;

  /**
   * @name StopCheckProfile#processEndTime
   * @type String
   * @access private
   */
  this.processEndTime = null;

  /**
   * @name StopCheckProfile#canUseRange
   * @type Boolean
   * @access private
   */
  this.canUseRange = null;

  /**
   * @name StopCheckProfile#canUseDescription
   * @type Boolean
   * @access private
   */
  this.canUseDescription = null;

  /**
   * @name StopCheckProfile#stopCheckFee
   * @type Double
   * @access private
   */
  this.stopCheckFee = null;
}



Aggregate.add("STPCHKPROF", StopCheckProfile);


/**
 * Days of week that no processing occurs: MONDAY, TUESDAY, WEDNESDAY, THURSDAY,
 * FRIDAY, SATURDAY, or SUNDAY. 0 or more <PROCDAYSOFF> can be sent.
 * @return {ProcessorDayOff[]} List of days during the week that no processing occurs.
 */
StopCheckProfile.prototype.getProcessorDaysOff = function() {
  return this.processorDaysOff;
};
Element.add(StopCheckProfile, {name: "PROCDAYSOFF", order: 0, attributeType: Array, collectionEntryType: ProcessorDayOff, readMethod: "getProcessorDaysOff", writeMethod: "setProcessorDaysOff"});


StopCheckProfile.prototype.setProcessorDaysOff = function(/*ProcessorDayOff[]*/ processorDaysOff) {
  this.processorDaysOff = processorDaysOff;
};


/**
 * Gets time of day that day's processing ends.
 *
 * Time formatted as "HHMMSS.XXX[gmt offset[:tz name]]",
 * the milliseconds and time zone are still optional, and default to GMT.
 * @see "Section 3.2.8.3 OFX Spec"
 * @return {String} Time String formatted as "HHMMSS.XXX[gmt offset[:tz name]]"
 */
StopCheckProfile.prototype.getProcessEndTime = function() {
  return this.processEndTime;
};
Element.add(StopCheckProfile, {name: "PROCENDTM", required: true, order: 10, attributeType: String, readMethod: "getProcessEndTime", writeMethod: "setProcessEndTime"});


/**
 * Sets the time of day that day's processing ends.
 *
 * Time formatted as "HHMMSS.XXX[gmt offset[:tz name]]",
 * the milliseconds and time zone are still optional, and default to GMT.

 * @see "Section 3.2.8.3 OFX Spec"
 * @param {String} processEndTime formatted as "HHMMSS.XXX[gmt offset[:tz name]]"
 */
StopCheckProfile.prototype.setProcessEndTime = function(processEndTime) {
  this.processEndTime = processEndTime;
};


StopCheckProfile.prototype.getCanUseRange = function() {
  return this.canUseRange;
};
Element.add(StopCheckProfile, {name: "CANUSERANGE", required: true, order: 20, attributeType: Boolean, readMethod: "getCanUseRange", writeMethod: "setCanUseRange"});


StopCheckProfile.prototype.setCanUseRange = function(/*Boolean*/ canUseRange) {
  this.canUseRange = canUseRange;
};


StopCheckProfile.prototype.getCanUseDescription = function() {
  return this.canUseDescription;
};
Element.add(StopCheckProfile, {name: "CANUSEDESC", required: true, order: 30, attributeType: Boolean, readMethod: "getCanUseDescription", writeMethod: "setCanUseDescription"});


StopCheckProfile.prototype.setCanUseDescription = function(/*Boolean*/ canUseDescription) {
  this.canUseDescription = canUseDescription;
};


StopCheckProfile.prototype.getStopCheckFee = function() {
  return this.stopCheckFee;
};
Element.add(StopCheckProfile, {name: "STPCHKFEE", required: true, order: 40, attributeType: Number, readMethod: "getStopCheckFee", writeMethod: "setStopCheckFee"});


StopCheckProfile.prototype.setStopCheckFee = function(/*Double*/ stopCheckFee) {
  this.stopCheckFee = stopCheckFee;
};




module.exports = StopCheckProfile;

},{"../../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../common/ProcessorDayOff":"/Users/aolson/Developer/ofx4js/src/domain/data/common/ProcessorDayOff.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/banking/index.js":[function(require,module,exports){
"use strict";

module.exports = {
  EmailProfile: require("./EmailProfile"),
  StopCheckProfile: require("./StopCheckProfile"),
};

},{"./EmailProfile":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/banking/EmailProfile.js","./StopCheckProfile":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/banking/StopCheckProfile.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/common/ImageProfile.js":[function(require,module,exports){
/*
 * Copyright 2012 TheStash
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var Aggregate = require("../../../../../meta/Aggregate");
var Element = require("../../../../../meta/Element");

/**
 * Image Profile
 * @class
 * @see "Section 3.1.6.2 OFX Spec"
 */
function ImageProfile () {

  /**
   * @name ImageProfile#closingImageAvailable
   * @type Boolean
   * @access private
   */
  this.closingImageAvailable = null;

  /**
   * @name ImageProfile#transactionImageAvailable
   * @type Boolean
   * @access private
   */
  this.transactionImageAvailable = null;
}



Aggregate.add("IMAGEPROF", ImageProfile);


ImageProfile.prototype.getClosingImageAvailable = function() {
  return this.closingImageAvailable;
};
Element.add(ImageProfile, {name: "CLOSINGIMGAVAIL", required: true, order: 10, attributeType: Boolean, readMethod: "getClosingImageAvailable", writeMethod: "setClosingImageAvailable"});


ImageProfile.prototype.setClosingImageAvailable = function(/*Boolean*/ closingImageAvailable) {
  this.closingImageAvailable = closingImageAvailable;
};


ImageProfile.prototype.getTransactionImageAvailable = function() {
  return this.transactionImageAvailable;
};
Element.add(ImageProfile, {name: "TRANIMGAVAIL", required: true, order: 20, attributeType: Boolean, readMethod: "getTransactionImageAvailable", writeMethod: "setTransactionImageAvailable"});


ImageProfile.prototype.setTransactionImageAvailable = function(/*Boolean*/ transactionImageAvailable) {
  this.transactionImageAvailable = transactionImageAvailable;
};




module.exports = ImageProfile;

},{"../../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/common/TransferProfile.js":[function(require,module,exports){
/*
 * Copyright 2012 TheStash
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var Aggregate = require("../../../../../meta/Aggregate");
var Element = require("../../../../../meta/Element");
var ProcessorDayOff = require("../../../common/ProcessorDayOff");

/**
 * Funds Transfer Profile
 * @author Scott Priddy
 * @see "Section 11.13.2.2 OFX Spec"
 */
function TransferProfile () {

  /**
   * @name TransferProfile#processorDaysOff
   * @type List<ProcessorDayOff>
   * @access private
   */
  this.processorDaysOff = null;

  /**
   * @name TransferProfile#processEndTime
   * @type String
   * @access private
   */
  this.processEndTime = null;

  /**
   * @name TransferProfile#supportsScheduledTransfers
   * @type Boolean
   * @access private
   */
  this.supportsScheduledTransfers = null;

  /**
   * @name TransferProfile#supportsRecurringTransfers
   * @type Boolean
   * @access private
   */
  this.supportsRecurringTransfers = null;

  /**
   * @name TransferProfile#supportsLoanTransfers
   * @type Boolean
   * @access private
   */
  this.supportsLoanTransfers = null;

  /**
   * @name TransferProfile#supportsScheduledLoanTransfers
   * @type Boolean
   * @access private
   */
  this.supportsScheduledLoanTransfers = null;

  /**
   * @name TransferProfile#supportsRecurringLoanTransfers
   * @type Boolean
   * @access private
   */
  this.supportsRecurringLoanTransfers = null;

  /**
   * @name TransferProfile#supportsTransferModification
   * @type Boolean
   * @access private
   */
  this.supportsTransferModification = null;

  /**
   * @name TransferProfile#supportsModelModification
   * @type Boolean
   * @access private
   */
  this.supportsModelModification = null;

  /**
   * @name TransferProfile#modelWindow
   * @type Integer
   * @access private
   */
  this.modelWindow = null;

  /**
   * @name TransferProfile#withdrawnDays
   * @type Integer
   * @access private
   */
  this.withdrawnDays = null;

  /**
   * @name TransferProfile#defaultDaysToPay
   * @type Integer
   * @access private
   */
  this.defaultDaysToPay = null;
}



Aggregate.add("XFERPROF", TransferProfile);


/**
 * Days of week that no processing occurs: MONDAY, TUESDAY, WEDNESDAY, THURSDAY,
 * FRIDAY, SATURDAY, or SUNDAY. 0 or more <PROCDAYSOFF> can be sent.
 * @return {ProcessorDayOff[]} List of days during the week that no processing occurs.
 */
TransferProfile.prototype.getProcessorDaysOff = function() {
  return this.processorDaysOff;
};
Element.add(TransferProfile, {name: "PROCDAYSOFF", order: 0, attributeType: Array, collectionEntryType: ProcessorDayOff, readMethod: "getProcessorDaysOff", writeMethod: "setProcessorDaysOff"});


TransferProfile.prototype.setProcessorDaysOff = function(/*ProcessorDayOff[]*/ processorDaysOff) {
  this.processorDaysOff = processorDaysOff;
};


/**
 * Gets time of day that day's processing ends.
 *
 * Time formatted as "HHMMSS.XXX[gmt offset[:tz name]]",
 * the milliseconds and time zone are still optional, and default to GMT.
 * @see "Section 3.2.8.3 OFX Spec"
 * @return {String} Time String formatted as "HHMMSS.XXX[gmt offset[:tz name]]"
 */
TransferProfile.prototype.getProcessEndTime = function() {
  return this.processEndTime;
};
Element.add(TransferProfile, {name: "PROCENDTM", required: true, order: 10, attributeType: String, readMethod: "getProcessEndTime", writeMethod: "setProcessEndTime"});


/**
 * Sets the time of day that day's processing ends.
 *
 * Time formatted as "HHMMSS.XXX[gmt offset[:tz name]]",
 * the milliseconds and time zone are still optional, and default to GMT.

 * @see "Section 3.2.8.3 OFX Spec"
 * @param {String} processEndTime formatted as "HHMMSS.XXX[gmt offset[:tz name]]"
 */
TransferProfile.prototype.setProcessEndTime = function(processEndTime) {
  this.processEndTime = processEndTime;
};


TransferProfile.prototype.getSupportsScheduledTransfers = function() {
  return this.supportsScheduledTransfers;
};
Element.add(TransferProfile, {name: "CANSCHED", required: true, order: 20, attributeType: Boolean, readMethod: "getSupportsScheduledTransfers", writeMethod: "setSupportsScheduledTransfers"});


TransferProfile.prototype.setSupportsScheduledTransfers = function(/*Boolean*/ supportsScheduledTransfers) {
  this.supportsScheduledTransfers = supportsScheduledTransfers;
};


/**
 * Requires <CANSCHED>
 * @return {Boolean} Boolean whether supports recurring transfers
 */
TransferProfile.prototype.getSupportsRecurringTransfers = function() {
  return this.supportsRecurringTransfers;
};
Element.add(TransferProfile, {name: "CANRECUR", required: true, order: 30, attributeType: Boolean, readMethod: "getSupportsRecurringTransfers", writeMethod: "setSupportsRecurringTransfers"});


TransferProfile.prototype.setSupportsRecurringTransfers = function(/*Boolean*/ supportsRecurringTransfers) {
  this.supportsRecurringTransfers = supportsRecurringTransfers;
};


/**
 * <CANLOAN>Y must be present for transfers to involve loans
 * @return {Boolean} Boolean whether supports loan transfers
 */
TransferProfile.prototype.getSupportsLoanTransfers = function() {
  return this.supportsLoanTransfers;
};
Element.add(TransferProfile, {name: "CANLOAN", order: 40, attributeType: Boolean, readMethod: "getSupportsLoanTransfers", writeMethod: "setSupportsLoanTransfers"});


TransferProfile.prototype.setSupportsLoanTransfers = function(/*Boolean*/ supportsLoanTransfers) {
  this.supportsLoanTransfers = supportsLoanTransfers;
};


TransferProfile.prototype.getSupportsScheduledLoanTransfers = function() {
  return this.supportsScheduledLoanTransfers;
};
Element.add(TransferProfile, {name: "CANSCHEDLOAN", order: 50, attributeType: Boolean, readMethod: "getSupportsScheduledLoanTransfers", writeMethod: "setSupportsScheduledLoanTransfers"});


TransferProfile.prototype.setSupportsScheduledLoanTransfers = function(/*Boolean*/ supportsScheduledLoanTransfers) {
  this.supportsScheduledLoanTransfers = supportsScheduledLoanTransfers;
};


TransferProfile.prototype.getSupportsRecurringLoanTransfers = function() {
  return this.supportsRecurringLoanTransfers;
};
Element.add(TransferProfile, {name: "CANRECURLOAN", order: 60, attributeType: Boolean, readMethod: "getSupportsRecurringLoanTransfers", writeMethod: "setSupportsRecurringLoanTransfers"});


TransferProfile.prototype.setSupportsRecurringLoanTransfers = function(/*Boolean*/ supportsRecurringLoanTransfers) {
  this.supportsRecurringLoanTransfers = supportsRecurringLoanTransfers;
};


TransferProfile.prototype.getSupportsTransferModification = function() {
  return this.supportsTransferModification;
};
Element.add(TransferProfile, {name: "CANMODXFERS", required: true, order: 70, attributeType: Boolean, readMethod: "getSupportsTransferModification", writeMethod: "setSupportsTransferModification"});


TransferProfile.prototype.setSupportsTransferModification = function(/*Boolean*/ supportsTransferModification) {
  this.supportsTransferModification = supportsTransferModification;
};


TransferProfile.prototype.getSupportsModelModification = function() {
  return this.supportsModelModification;
};
Element.add(TransferProfile, {name: "CANMODMDLS", required: true, order: 80, attributeType: Boolean, readMethod: "getSupportsModelModification", writeMethod: "setSupportsModelModification"});


TransferProfile.prototype.setSupportsModelModification = function(/*Boolean*/ supportsModelModification) {
  this.supportsModelModification = supportsModelModification;
};


/**
 * Model window
 * the number of days before a recurring transaction is scheduled to be processed that it is
 * instantiated on the system
 * @return {Integer} Integer number of days before a recurring transaction is scheduled to be processed that it is instantiated on the system
 */
TransferProfile.prototype.getModelWindow = function() {
  return this.modelWindow;
};
Element.add(TransferProfile, {name: "MODELWND", required: true, order: 90, attributeType: Number, readMethod: "getModelWindow", writeMethod: "setModelWindow"});


TransferProfile.prototype.setModelWindow = function(/*Integer*/ modelWindow) {
  this.modelWindow = modelWindow;
};


/**
 * Number of days before processing date that funds are withdrawn
 * @return {Integer} Integer number of days before processing date that funds are withdrawn
 */
TransferProfile.prototype.getWithdrawnDays = function() {
  return this.withdrawnDays;
};
Element.add(TransferProfile, {name: "DAYSWITH", required: true, order: 100, attributeType: Number, readMethod: "getWithdrawnDays", writeMethod: "setWithdrawnDays"});


TransferProfile.prototype.setWithdrawnDays = function(/*Integer*/ withdrawnDays) {
  this.withdrawnDays = withdrawnDays;
};


/**
 * Default number of days to pay
 * @return {Integer} Integer Default number of days to pay
 */
TransferProfile.prototype.getDefaultDaysToPay = function() {
  return this.defaultDaysToPay;
};
Element.add(TransferProfile, {name: "DFLTDAYSTOPAY", required: true, order: 110, attributeType: Number, readMethod: "getDefaultDaysToPay", writeMethod: "setDefaultDaysToPay"});


TransferProfile.prototype.setDefaultDaysToPay = function(/*Integer*/ defaultDaysToPay) {
  this.defaultDaysToPay = defaultDaysToPay;
};




module.exports = TransferProfile;

},{"../../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../common/ProcessorDayOff":"/Users/aolson/Developer/ofx4js/src/domain/data/common/ProcessorDayOff.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/common/index.js":[function(require,module,exports){
"use strict";

module.exports = {
  ImageProfile: require("./ImageProfile"),
  TransferProfile: require("./TransferProfile")
};

},{"./ImageProfile":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/common/ImageProfile.js","./TransferProfile":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/common/TransferProfile.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/index.js":[function(require,module,exports){
"use strict";

module.exports = {
  banking: require("./banking/index"),
  common: require("./common/index"),
  signup: require("./signup/index"),

  BankingMessageSetInfo: require("./BankingMessageSetInfo"),
  BankingV1MessageSetInfo: require("./BankingV1MessageSetInfo"),
  BillpayMessageSetInfo: require("./BillpayMessageSetInfo"),
  BillpayV1MessageSetInfo: require("./BillpayV1MessageSetInfo"),
  CreditCardMessageSetInfo: require("./CreditCardMessageSetInfo"),
  CreditCardV1MessageSetInfo: require("./CreditCardV1MessageSetInfo"),
  EmailMessageSetInfo: require("./EmailMessageSetInfo"),
  EmailV1MessageSetInfo: require("./EmailV1MessageSetInfo"),
  InterbankTransferMessageSetInfo: require("./InterbankTransferMessageSetInfo"),
  InterbankTransferV1MessageSetInfo: require("./InterbankTransferV1MessageSetInfo"),
  InvestmentMessageSetInfo: require("./InvestmentMessageSetInfo"),
  InvestmentV1MessageSetInfo: require("./InvestmentV1MessageSetInfo"),
  ProfileMessageSetInfo: require("./ProfileMessageSetInfo"),
  ProfileV1MessageSetInfo: require("./ProfileV1MessageSetInfo"),
  SecurityListMessageSetInfo: require("./SecurityListMessageSetInfo"),
  SecurityListV1MessageSetInfo: require("./SecurityListV1MessageSetInfo"),
  SignOnMessageSetInfo: require("./SignOnMessageSetInfo"),
  SignOnV1MessageSetInfo: require("./SignOnV1MessageSetInfo"),
  SignupMessageSetInfo: require("./SignupMessageSetInfo"),
  SignupV1MessageSetInfo: require("./SignupV1MessageSetInfo"),
  WireTransferMessageSetInfo: require("./WireTransferMessageSetInfo"),
  WireTransferV1MessageSetInfo: require("./WireTransferV1MessageSetInfo"),
};

},{"./BankingMessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/BankingMessageSetInfo.js","./BankingV1MessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/BankingV1MessageSetInfo.js","./BillpayMessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/BillpayMessageSetInfo.js","./BillpayV1MessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/BillpayV1MessageSetInfo.js","./CreditCardMessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/CreditCardMessageSetInfo.js","./CreditCardV1MessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/CreditCardV1MessageSetInfo.js","./EmailMessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/EmailMessageSetInfo.js","./EmailV1MessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/EmailV1MessageSetInfo.js","./InterbankTransferMessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/InterbankTransferMessageSetInfo.js","./InterbankTransferV1MessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/InterbankTransferV1MessageSetInfo.js","./InvestmentMessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/InvestmentMessageSetInfo.js","./InvestmentV1MessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/InvestmentV1MessageSetInfo.js","./ProfileMessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/ProfileMessageSetInfo.js","./ProfileV1MessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/ProfileV1MessageSetInfo.js","./SecurityListMessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/SecurityListMessageSetInfo.js","./SecurityListV1MessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/SecurityListV1MessageSetInfo.js","./SignOnMessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/SignOnMessageSetInfo.js","./SignOnV1MessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/SignOnV1MessageSetInfo.js","./SignupMessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/SignupMessageSetInfo.js","./SignupV1MessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/SignupV1MessageSetInfo.js","./WireTransferMessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/WireTransferMessageSetInfo.js","./WireTransferV1MessageSetInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/WireTransferV1MessageSetInfo.js","./banking/index":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/banking/index.js","./common/index":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/common/index.js","./signup/index":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/signup/index.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/signup/ClientEnrollment.js":[function(require,module,exports){
/*
 * Copyright 2012 TheStash
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var Aggregate = require("../../../../../meta/Aggregate");
var Element = require("../../../../../meta/Element");

/**
 * Client Enrollment option, contains indicator as to whether the account number is required as part of enrollment
 * @class
 * @see "Section 8.8 OFX Spec"
 */
function ClientEnrollment () {

  /**
   * @name ClientEnrollment#accountRequired
   * @type Boolean
   * @access private
   */
  this.accountRequired = null;
}



Aggregate.add("CLIENTENROLL", ClientEnrollment);


/**
 * Y if account number is required as part of enrollment
 * @return {Boolean} Boolean
 */
ClientEnrollment.prototype.getAccountRequired = function() {
  return this.accountRequired;
};
Element.add(ClientEnrollment, {name: "ACCTREQUIRED", required: true, order: 0, attributeType: Boolean, readMethod: "getAccountRequired", writeMethod: "setAccountRequired"});


ClientEnrollment.prototype.setAccountRequired = function(/*Boolean*/ accountRequired) {
  this.accountRequired = accountRequired;
};




module.exports = ClientEnrollment;

},{"../../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/signup/OtherEnrollment.js":[function(require,module,exports){
/*
 * Copyright 2012 TheStash
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var Aggregate = require("../../../../../meta/Aggregate");
var Element = require("../../../../../meta/Element");

/**
 * Other Enrollment option containing a text message directing users to some other method (such as a phone call)
 * @class
 * @see "Section 8.8 OFX Spec"
 */

function OtherEnrollment () {

  /**
   * @name OtherEnrollment#message
   * @type String
   * @access private
   */
  this.message = null;
}



Aggregate.add("OTHERENROLL", OtherEnrollment);


/**
 * Message to consumer about what to do next (for example, a phone number),
 * @return {String} String
 */
OtherEnrollment.prototype.getMessage = function() {
  return this.message;
};
Element.add(OtherEnrollment, {name: "MESSAGE", required: true, order: 0, attributeType: String, readMethod: "getMessage", writeMethod: "setMessage"});


OtherEnrollment.prototype.setMessage = function(/*String*/ message) {
  this.message = message;
};




module.exports = OtherEnrollment;

},{"../../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/signup/WebEnrollment.js":[function(require,module,exports){
/*
 * Copyright 2012 TheStash
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var Aggregate = require("../../../../../meta/Aggregate");
var Element = require("../../../../../meta/Element");

/**
 * Web Enrollment option containing URL to direct user for web based enrollment, if supported.
 * @class
 * @see "Section 8.8 OFX Spec"
 */
function WebEnrollment () {

  /**
   * @name WebEnrollment#url
   * @type String
   * @access private
   */
  this.url = null;
}



Aggregate.add("WEBENROLL", WebEnrollment);


/**
 * URL to start enrollment process
 * @return {String} String
 */
WebEnrollment.prototype.getUrl = function() {
  return this.url;
};
Element.add(WebEnrollment, {name: "URL", required: true, order: 0, attributeType: String, readMethod: "getUrl", writeMethod: "setUrl"});


WebEnrollment.prototype.setUrl = function(/*String*/ url) {
  this.url = url;
};




module.exports = WebEnrollment;

},{"../../../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/signup/index.js":[function(require,module,exports){
"use strict";

module.exports = {
  ClientEnrollment: require("./ClientEnrollment"),
  OtherEnrollment: require("./OtherEnrollment"),
  WebEnrollment: require("./WebEnrollment"),
};

},{"./ClientEnrollment":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/signup/ClientEnrollment.js","./OtherEnrollment":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/signup/OtherEnrollment.js","./WebEnrollment":"/Users/aolson/Developer/ofx4js/src/domain/data/profile/info/signup/WebEnrollment.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/AssetClass.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";

/**
 * Asset class for debt.
 * @see "Section 13.8.5.7, OFX Spec"
 *
 * @enum
 */
var AssetClass = {
  /**
   * Government: 0 or corporate bonds issued in the United States.
   */
  DOMESTIC_BOND: 1,

  /**
   * Government: 2 or corporate bonds issued in foreign countries or the United States.
   */
  INTL_BOND: 3,

  /**
   * Stocks: 4 for US companies with market caps of $2B or more.
   */
  LARGE_STOCK: 5,

  /**
   * Stocks: 6 for US companies with market caps of ~$100M to $2B.
   */
  SMALL_STOCK: 7,

  /**
   * Publicallt: 8 traded stocks for companies based in foreign countries.
   */
  INTL_STOCK: 9,

  /**
   * Stable: 10, short-term investments which provide income that rises and falls with short-term
   * interest: 11 rates.
   */
  MONEY_MARKET: 12,

  /**
   * Investments: 13 which do not fit into any of the other types.
   */
  OTHER: 14,

  fromOfx: function(/*String*/ ofxVal) {
    if ("DOMESTICBOND".equals(ofxVal)) {
      return AssetClass.DOMESTIC_BOND;
    } else if ("INTLBOND".equals(ofxVal)) {
      return AssetClass.INTL_BOND;
    } else if ("LARGESTOCK".equals(ofxVal)) {
      return AssetClass.LARGE_STOCK;
    } else if ("SMALLSTOCK".equals(ofxVal)) {
      return AssetClass.SMALL_STOCK;
    } else if ("INTLSTOCK".equals(ofxVal)) {
      return AssetClass.INTL_STOCK;
    } else if ("MONEYMARKET".equals(ofxVal)) {
      return AssetClass.MONEY_MARKET;
    } else if ("OTHER".equals(ofxVal)) {
      return AssetClass.OTHER;
    } else {
      return null;
    }
  }
};


module.exports = AssetClass;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/BaseSecurityInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var ChildAggregate = require("../../../meta/ChildAggregate");
var SecurityInfo = require("./SecurityInfo");

/**
 * Base class for info about the various types of securities.
 * @see "Section 13.8.5.1, OFX Spec"
 * <br>
 * This class exposes a read-only view of the flattened aggregates that are
 * common to all security info as a convenience to application
 * developers who may not find the ofx aggregation model intuitive.
 *
 * @author Jon Perlow
 */
function BaseSecurityInfo () {

  /**
   * @name BaseSecurityInfo#securityInfo
   * @type SecurityInfo
   * @access private
   */
  this.securityInfo = null;
}





/**
 * Gets the security info aggregate.
 *
 * @return {SecurityInfo} the security info aggregate.
 */
BaseSecurityInfo.prototype.getSecurityInfo = function() {
  return this.securityInfo;
};
ChildAggregate.add(BaseSecurityInfo, {required: true, order: 10, attributeType: SecurityInfo, readMethod: "getSecurityInfo", writeMethod: "setSecurityInfo"});


/**
 * Sets the security info aggregate.
 *
 * @param {SecurityInfo} securityInfo the security info aggregate.
 */
BaseSecurityInfo.prototype.setSecurityInfo = function(securityInfo) {
  this.securityInfo = securityInfo;
};


/**
 * Gets the unique security id for the security. This is a required field according to the OFX
 * spec.
 *
 * @return {SecurityId} the security id
 */
BaseSecurityInfo.prototype.getSecurityId = function() {
  return this.getSecurityInfo().getSecurityId();
};


/**
 * Gets the full name of the security. This is a required field according to the OFX spec.
 *
 * @return {String} the full name of the security.
 */
BaseSecurityInfo.prototype.getSecurityName = function() {
  return this.getSecurityInfo().getSecurityName();
};


/**
 * Gets the ticker symbol for the security. This is an optional field according to the OFX spec.
 *
 * @return {String} the ticket symbol or null if there's no ticker symbol
 */
BaseSecurityInfo.prototype.getTickerSymbol = function() {
  return this.getSecurityInfo().getTickerSymbol();
};


/**
 * Gets the FI ID number for the security. This is an optional field according to the OFX spec.
 *
 * @return {String} the FI ID number for the security
 */
BaseSecurityInfo.prototype.getFiId = function() {
  return this.getSecurityInfo().getFiId();
};


/**
 * Gets the rating of the security. This is an optional field according to the OFX spec.
 *
 * @return {String} the rating
 */
BaseSecurityInfo.prototype.getRating = function() {
  return this.getSecurityInfo().getRating();
};


/**
 * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
 * share price. For bonds, this is the percentage of par. For options, this is the per share (not
 * per contact) price. This is a noptional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the per unit price
 */
BaseSecurityInfo.prototype.getUnitPrice = function() {
  return this.getSecurityInfo().getUnitPrice();
};


/**
 * Gets the date as-of for the unit price. This is an optional field according to the OFX spec.
 *
 * @return {Date} the date as-of for the unit price
 */
BaseSecurityInfo.prototype.getUnitPriceAsOfDate = function() {
  return this.getSecurityInfo().getUnitPriceAsOfDate();
};


/**
 * Gets the overriding currency code for the security. If not set, implies the default currency.
 * This is an optional field according to the OFX spec.
 *
 * @return {String} the overriding currency code or null to mean the default currency
 */
BaseSecurityInfo.prototype.getCurrencyCode = function() {
  return this.getSecurityInfo().getCurrencyCode();
};


/**
 * Gets any memo associated with the security. This is an optional field according to the OFX
 * spec.
 *
 * @return {String} the memo
 */
BaseSecurityInfo.prototype.getMemo = function() {
  return this.getSecurityInfo().getMemo();
};




module.exports = BaseSecurityInfo;

},{"../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","./SecurityInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityInfo.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/CallType.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * Call type for debt.
 * @see "Section 13.8.5.2, OFX Spec"
 *
 * @enum
 */
var CallType = {
  CALL: 0,
  PUT: 1,
  PREFUND: 2,
  MATURITY: 3,

  fromOfx: function(/*String*/ ofxVal) {
    if ("CALL".equals(ofxVal)) {
      return CallType.CALL;
    } else if ("PUT".equals(ofxVal)) {
      return CallType.PUT;
    } else if ("PREFUND".equals(ofxVal)) {
      return CallType.PREFUND;
    } else if ("MATURITY".equals(ofxVal)) {
      return CallType.MATURITY;
    } else {
      return null;
    }
  }
};


module.exports = CallType;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/CouponFrequency.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * Coupon freqency for debt.
 * @see "Section 13.8.5.2, OFX Spec"
 *
 * @enum
 */
var CouponFrequency = {
  MONTHLY: 0,
  QUARTERLY: 1,
  SEMIANNUAL: 2,
  ANNUAL: 3,
  OTHER: 4,

  fromOfx: function(/*String*/ ofxVal) {
    if ("MONTHLY".equals(ofxVal)) {
      return CouponFrequency.MONTHLY;
    } else if ("QUARTERLY".equals(ofxVal)) {
      return CouponFrequency.QUARTERLY;
    } else if ("SEMIANNUAL".equals(ofxVal)) {
      return CouponFrequency.SEMIANNUAL;
    } else if ("ANNUAL".equals(ofxVal)) {
      return CouponFrequency.ANNUAL;
    } else if ("OTHER".equals(ofxVal)) {
      return CouponFrequency.OTHER;
    } else {
      return null;
    }
  }
};


module.exports = CouponFrequency;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/DebtClass.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * The class of debt.
 * @see "Section 13.8.5.2, OFX Spec"
 *
 * @enum
 */
var DebtClass = {
  TREASURY: 0,
  MUNICIPAL: 1,
  CORPORATE: 2,
  OTHER: 3,

  fromOfx: function(/*String*/ ofxVal) {
    if ("TREASURY".equals(ofxVal)) {
      return DebtClass.TREASURY;
    } else if ("MUNICIPAL".equals(ofxVal)) {
      return DebtClass.MUNICIPAL;
    } else if ("CORPORATE".equals(ofxVal)) {
      return DebtClass.CORPORATE;
    } else if ("OTHER".equals(ofxVal)) {
      return DebtClass.OTHER;
    } else {
      return null;
    }
  }
};


module.exports = DebtClass;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/DebtSecurityInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var Aggregate = require("../../../meta/Aggregate");
var Element = require("../../../meta/Element");
var BaseSecurityInfo = require("./BaseSecurityInfo");
var DebtType = require("./DebtType");
var DebtClass = require("./DebtClass");
var CouponFrequency = require("./CouponFrequency");
var CallType = require("./CallType");
var AssetClass = require("./AssetClass");

/**
 * Info about a debt security.
 * @see "Section 13.8.5.2, OFX Spec"
 *
 * @class
 * @augments BaseSecurityInfo
 */
function DebtSecurityInfo () {

  /**
   * @name DebtSecurityInfo#parValue
   * @type Double
   * @access private
   */
  this.parValue = null;

  /**
   * @name DebtSecurityInfo#debtType
   * @type String
   * @access private
   */
  this.debtType = null;

  /**
   * @name DebtSecurityInfo#debtClass
   * @type String
   * @access private
   */
  this.debtClass = null;

  /**
   * @name DebtSecurityInfo#couponRate
   * @type Double
   * @access private
   */
  this.couponRate = null;

  /**
   * @name DebtSecurityInfo#nextMaturityDate
   * @type Date
   * @access private
   */
  this.nextMaturityDate = null;

  /**
   * @name DebtSecurityInfo#couponFrequency
   * @type String
   * @access private
   */
  this.couponFrequency = null;

  /**
   * @name DebtSecurityInfo#callPrice
   * @type Double
   * @access private
   */
  this.callPrice = null;

  /**
   * @name DebtSecurityInfo#yieldToCall
   * @type Double
   * @access private
   */
  this.yieldToCall = null;

  /**
   * @name DebtSecurityInfo#nextCallDate
   * @type Date
   * @access private
   */
  this.nextCallDate = null;

  /**
   * @name DebtSecurityInfo#callType
   * @type String
   * @access private
   */
  this.callType = null;

  /**
   * @name DebtSecurityInfo#yieldToMaturity
   * @type Double
   * @access private
   */
  this.yieldToMaturity = null;

  /**
   * @name DebtSecurityInfo#debtMaturityDate
   * @type Date
   * @access private
   */
  this.debtMaturityDate = null;

  /**
   * @name DebtSecurityInfo#assetClass
   * @type String
   * @access private
   */
  this.assetClass = null;

  /**
   * @name DebtSecurityInfo#fiAssetClass
   * @type String
   * @access private
   */
  this.fiAssetClass = null;
}

inherit(DebtSecurityInfo, "extends", BaseSecurityInfo);


Aggregate.add("DEBTINFO", DebtSecurityInfo);


/**
 * Gets the par value of the debt. This is a required field according to the OFX spec.
 *
 * @return {Double} the par value of the debt
 */
DebtSecurityInfo.prototype.getParValue = function() {
  return this.parValue;
};
Element.add(DebtSecurityInfo, {name: "PARVALUE", required:true, order: 20, attributeType: Number, readMethod: "getParValue", writeMethod: "setParValue"});


/**
 * Sets the par value of the debt. This is a required field according to the OFX spec.
 *
 * @param {Double} parValue the par value of the debt
 */
DebtSecurityInfo.prototype.setParValue = function(parValue) {
  this.parValue = parValue;
};


/**
 * Gets the type of debt. One of "COUPON" or "ZERO". This is a required field according to the
 * OFX spec.
 *
 * @return {String} the type of debt
 */
DebtSecurityInfo.prototype.getDebtType = function() {
  return this.debtType;
};
Element.add(DebtSecurityInfo, {name: "DEBTTYPE", required:true, order: 30, attributeType: String, readMethod: "getDebtType", writeMethod: "setDebtType"});


/**
 * Sets the type of debt. One of "COUPON" or "ZERO". This is a required field according to the
 * OFX spec.
 *
 * @param {String} debtType the type of debt
 */
DebtSecurityInfo.prototype.setDebtType = function(debtType) {
  this.debtType = debtType;
};


/**
 * Gets the type of debt as one of the well-known types.
 *
 * @return {DebtType} the type of debt or null if it's not one of the well-known types
 */
DebtSecurityInfo.prototype.getDebtTypeEnum = function() {
  return DebtType.fromOfx(this.getDebtType());
};


/**
 * Gets the class of debt. One of "TREASURY", "MUNICIPAL", "CORPORATE", or "OTHER".
 * This is an optional field according to the OFX spec.
 *
 * @return {String} the class of debt
 */
DebtSecurityInfo.prototype.getDebtClass = function() {
  return this.debtClass;
};
Element.add(DebtSecurityInfo, {name: "DEBTCLASS", order: 40, attributeType: String, readMethod: "getDebtClass", writeMethod: "setDebtClass"});


/**
 * Sets the class of debt. One of "TREASURY", "MUNICIPAL", "CORPORATE", or "OTHER".
 * This is an optional field according to the OFX spec.
 *
 * @param {String} debtClass the class of debt
 */
DebtSecurityInfo.prototype.setDebtClass = function(debtClass) {
  this.debtClass = debtClass;
};


/**
 * Gets the class of debt as one of the well-known types.
 *
 * @return {DebtClass} the class of debt or null if it's not one of the well-known types
 */
DebtSecurityInfo.prototype.getDebtClassEnum = function() {
  return DebtClass.fromOfx(this.debtClass);
};


/**
 * Gets the coupon rate of the debt for the next closest call date.
 * This is an optional field according to the OFX spec.
 *
 * @return {Double} the coupon rate
 */
DebtSecurityInfo.prototype.getCouponRate = function() {
  return this.couponRate;
};
Element.add(DebtSecurityInfo, {name: "COUPONRT", order: 50, attributeType: Number, readMethod: "getCouponRate", writeMethod: "setCouponRate"});


/**
 * Sets the coupon rate of the debt for the next closest call date.
 * This is an optional field according to the OFX spec.
 *
 * @param {Double} couponRate the coupon rate
 */
DebtSecurityInfo.prototype.setCouponRate = function(couponRate) {
  this.couponRate = couponRate;
};


/**
 * Gets the next maturity date for the next coupon.
 * This is an optional field according to the OFX spec.
 *
 * @return {Date} the maturity date for the next coupon
 */
DebtSecurityInfo.prototype.getNextMaturityDate = function() {
  return this.nextMaturityDate;
};
Element.add(DebtSecurityInfo, {name: "DTCOUPON", order: 60, attributeType: Date, readMethod: "getNextMaturityDate", writeMethod: "setNextMaturityDate"});


/**
 * Sets the next maturity date for the next coupon.
 * This is an optional field according to the OFX spec.
 *
 * @param {Date} nextMaturityDate the maturity date for the next coupon.
 */
DebtSecurityInfo.prototype.setNextMaturityDate = function(nextMaturityDate) {
  this.nextMaturityDate = nextMaturityDate;
};


/**
 * Gets the coupon frequency. One of "MONTHLY", "QUARTERLY", "SEMIANNUAL", "ANNUAL", or "OTHER".
 * This is an optional field according to the OFX spec.
 *
 * @return {String} the coupon frequency
 */
DebtSecurityInfo.prototype.getCouponFrequency = function() {
  return this.couponFrequency;
};
Element.add(DebtSecurityInfo, {name: "COUPONFREQ", order: 70, attributeType: String, readMethod: "getCouponFrequency", writeMethod: "setCouponFrequency"});


/**
 * Sets the coupon frequency. One of "MONTHLY", "QUARTERLY", "SEMIANNUAL", "ANNUAL", or "OTHER".
 * This is an optional field according to the OFX spec.
 *
 * @param {String} couponFrequency the coupon frequency
 */
DebtSecurityInfo.prototype.setCouponFrequency = function(couponFrequency) {
  this.couponFrequency = couponFrequency;
};


/**
 * Gets the coupon frequency as one of the well-known types.
 *
 * @return {CouponFrequency} the coupon frequency or null if it's not one of the well-known types
 */
DebtSecurityInfo.prototype.getCouponFrequencyEnum = function() {
  return CouponFrequency.fromOfx(this.getCouponFrequency());
};


/**
 * Gets the bond price. This is an optional field according to the OFX spec.
 *
 * @return {Double} the bond price
 */
DebtSecurityInfo.prototype.getCallPrice = function() {
  return this.callPrice;
};
Element.add(DebtSecurityInfo, {name: "CALLPRICE", order: 80, attributeType: Number, readMethod: "getCallPrice", writeMethod: "setCallPrice"});


/**
 * Sets the bond price. This is an optional field according to the OFX spec.
 *
 * @param {Double} callPrice the bond price
 */
DebtSecurityInfo.prototype.setCallPrice = function(callPrice) {
  this.callPrice = callPrice;
};


/**
 * Gets the yield to call as a rate. This is an optional field according to the OFX spec.
 *
 * @return {Double} the yield to call rate
 */
DebtSecurityInfo.prototype.getYieldToCall = function() {
  return this.yieldToCall;
};
Element.add(DebtSecurityInfo, {name: "YIELDTOCALL", order: 90, attributeType: Number, readMethod: "getYieldToCall", writeMethod: "setYieldToCall"});


/**
 * Sets the yield to call as a rate. This is an optional field according to the OFX spec.
 *
 * @param {Double} yieldToCall the yield to call rate
 */
DebtSecurityInfo.prototype.setYieldToCall = function(yieldToCall) {
  this.yieldToCall = yieldToCall;
};


/**
 * Gets the next call date. This is an optional field according to the OFX spec.
 *
 * @return {Date} the next call date.
 */
DebtSecurityInfo.prototype.getNextCallDate = function() {
  return this.nextCallDate;
};
Element.add(DebtSecurityInfo, {name: "DTCALL", order: 100, attributeType: Date, readMethod: "getNextCallDate", writeMethod: "setNextCallDate"});


/**
 * Sets the next call date. This is an optional field according to the OFX spec.
 *
 * @param {Date} nextCallDate the next call date.
 */
DebtSecurityInfo.prototype.setNextCallDate = function(nextCallDate) {
  this.nextCallDate = nextCallDate;
};


/**
 * Gets the type of call.
 *
 * @return {String} the type of call
 */
DebtSecurityInfo.prototype.getCallType = function() {
  return this.callType;
};
Element.add(DebtSecurityInfo, {name: "CALLTYPE", order: 110, attributeType: String, readMethod: "getCallType", writeMethod: "setCallType"});


/**
 * Sets the type of call.
 *
 * @param {String} callType the type of call
 */
DebtSecurityInfo.prototype.setCallType = function(callType) {
  this.callType = callType;
};


/**
 * Gets the type of call as one of the well-known types.
 *
 * @return {CallType} the type of call or null if it's not one of the well-known types
 */
DebtSecurityInfo.prototype.getCallTypeEnum = function() {
  return CallType.fromOfx(this.getCallType());
};


/**
 * Gets the yield to maturity as a rate. This is an optional field according to the OFX spec.
 *
 * @return {Double} the yield to call rate
 */
DebtSecurityInfo.prototype.getYieldToMaturity = function() {
  return this.yieldToMaturity;
};
Element.add(DebtSecurityInfo, {name: "YIELDTOMAT", order: 120, attributeType: Number, readMethod: "getYieldToMaturity", writeMethod: "setYieldToMaturity"});


/**
 * Sets the yield to maturity as a rate. This is an optional field according to the OFX spec.
 *
 * @param {Double} yieldToMaturity the yield to call rate
 */
DebtSecurityInfo.prototype.setYieldToMaturity = function(yieldToMaturity) {
  this.yieldToMaturity = yieldToMaturity;
};


/**
 * Gets the date when the debt matures. This is an optional field according to the OFX spec.
 *
 * @return {Date} the date when the debt matures
 */
DebtSecurityInfo.prototype.getDebtMaturityDate = function() {
  return this.debtMaturityDate;
};
Element.add(DebtSecurityInfo, {name: "DTMAT", order: 130, attributeType: Date, readMethod: "getDebtMaturityDate", writeMethod: "setDebtMaturityDate"});


/**
 * Sets the date when the debt matures. This is an optional field according to the OFX spec.
 *
 * @param {Date} debtMaturityDate the date when the debt matures
 */
DebtSecurityInfo.prototype.setDebtMaturityDate = function(debtMaturityDate) {
  this.debtMaturityDate = debtMaturityDate;
};


/**
 * Gets the asset class of the debt. This is an optional field according to the OFX spec.
 *
 * @return {String} the asset class of the debt
 */
DebtSecurityInfo.prototype.getAssetClass = function() {
  return this.assetClass;
};
Element.add(DebtSecurityInfo, {name: "ASSETCLASS", order: 140, attributeType: String, readMethod: "getAssetClass", writeMethod: "setAssetClass"});


/**
 * Sets the asset class of the debt. This is an optional field according to the OFX spec.
 *
 * @param {String} assetClass the asset class of the debt
 */
DebtSecurityInfo.prototype.setAssetClass = function(assetClass) {
  this.assetClass = assetClass;
};


/**
 * Gets the assert class as one of the well-known types.
 *
 * @return {AssetClass} the asset class or null if it's not one of the well-known types
 */
DebtSecurityInfo.prototype.getAssetClassEnum = function() {
  return AssetClass.fromOfx(this.getAssetClass());
};


/**
 * Gets the FI-defined asset class of the debt. This is an optional field according to the OFX
 * spec.
 *
 * @return {String} the FI-defined asset class of the debt
 */
DebtSecurityInfo.prototype.getFiAssetClass = function() {
  return this.fiAssetClass;
};
Element.add(DebtSecurityInfo, {name: "FIASSETCLASS", order: 150, attributeType: String, readMethod: "getFiAssetClass", writeMethod: "setFiAssetClass"});


/**
 * Sets the FI-defined asset class of the debt. This is an optional field according to the OFX
 * spec.
 *
 * @param {String} fiAssetClass the FI-defined asset class of the debt
 */
DebtSecurityInfo.prototype.setFiAssetClass = function(fiAssetClass) {
  this.fiAssetClass = fiAssetClass;
};




module.exports = DebtSecurityInfo;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","./AssetClass":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/AssetClass.js","./BaseSecurityInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/BaseSecurityInfo.js","./CallType":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/CallType.js","./CouponFrequency":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/CouponFrequency.js","./DebtClass":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/DebtClass.js","./DebtType":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/DebtType.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/DebtType.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * The type of debt.
 * @see "Section 13.8.5.2, OFX Spec"
 *
 * @author Jon Perlow
 */
var DebtType = {
  COUPON: 0,
  ZERO: 1,

  fromOfx: function(/*String*/ ofxVal) {
    if ("COUPON".equals(ofxVal)) {
      return DebtType.COUPON;
    } else if ("ZERO".equals(ofxVal)) {
      return DebtType.ZERO;
    } else {
      return null;
    }
  }
};


module.exports = DebtType;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/MutualFundSecurityInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var Aggregate = require("../../../meta/Aggregate");
var Element = require("../../../meta/Element");
var BaseSecurityInfo = require("./BaseSecurityInfo");
var MutualFundType = require("./MutualFundType");

/**
 * Info about a mutual fund security.
 * @see "Section 13.8.5.3, OFX Spec"
 *
 * @class
 * @augments BaseSecurityInfo
 */
function MutualFundSecurityInfo () {

  /**
   * @name MutualFundSecurityInfo#mfType
   * @type String
   * @access private
   */
  this.mfType = null;

  /**
   * @name MutualFundSecurityInfo#yield
   * @type Double
   * @access private
   */
  this.yield = null;

  /**
   * @name MutualFundSecurityInfo#dateYieldAsOf
   * @type Date
   * @access private
   */
  this.dateYieldAsOf = null;
}

inherit(MutualFundSecurityInfo, "extends", BaseSecurityInfo);


Aggregate.add("MFINFO", MutualFundSecurityInfo);


/**
 * Gets the mutual fund type. One of "OPENEND", "CLOSEEND", or "OTHER". This is an optional field
 * according to the OFX spec.
 *
 * @return {String} the mutual fund type
 */
MutualFundSecurityInfo.prototype.getType = function() {
  return this.mfType;
};
Element.add(MutualFundSecurityInfo, {name: "MFTYPE", order: 20, attributeType: String, readMethod: "getType", writeMethod: "setType"});


/**
 * Sets the mutual fund type. One of "OPENEND", "CLOSEEND", or "OTHER". This is an optional field
 * according to the OFX spec.
 *
 * @param {String} mfType the mutual fund type
 */
MutualFundSecurityInfo.prototype.setType = function(mfType) {
  this.mfType = mfType;
};


/**
 * Gets the mutual fund type as one of the well-known types.
 *
 * @return {MutualFundType} the mutual fund type or null if it's not one of the well-known types
 */
MutualFundSecurityInfo.prototype.getTypeEnum = function() {
  return MutualFundType.fromOfx(this.getType());
};


/**
 * Gets the yield as a rate. This is an optional field according to the OFX spec.
 *
 * @return {Double} the yield as a rate
 */
MutualFundSecurityInfo.prototype.getYield = function() {
  return this.yield;
};
Element.add(MutualFundSecurityInfo, {name: "YIELD", order: 30, attributeType: Number, readMethod: "getYield", writeMethod: "setYield"});


/**
 * Sets the yield as a rate. This is an optional field according to the OFX spec.
 *
 * @param {Double} yield the yield as a rate
 */
MutualFundSecurityInfo.prototype.setYield = function(yield_) {
  this.yield = yield_;
};


/**
 * Gets the as-of date for the yield. This is an optional field according to the OFX spec.
 *
 * @return {Date} the as-of date for the yield
 */
MutualFundSecurityInfo.prototype.getDateYieldAsOf = function() {
  return this.dateYieldAsOf;
};
Element.add(MutualFundSecurityInfo, {name: "DTYIELDASOF", order: 40, attributeType: Date, readMethod: "getDateYieldAsOf", writeMethod: "setDateYieldAsOf"});


/**
 * Sets the as-of date for the yield. This is an optional field according to the OFX spec.
 *
 * @param {Date} dateYieldAsOf the as-of date for the yield
 */
MutualFundSecurityInfo.prototype.setDateYieldAsOf = function(dateYieldAsOf) {
  this.dateYieldAsOf = dateYieldAsOf;
};




module.exports = MutualFundSecurityInfo;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","./BaseSecurityInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/BaseSecurityInfo.js","./MutualFundType":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/MutualFundType.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/MutualFundType.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * The type of mutual fund.
 * @see "Section 13.8.5.2, OFX Spec"
 *
 * @enum
 */
var MutualFundType = {
  OPEN_END: 0,
  CLOSE_END: 1,
  OTHER: 2,

  fromOfx: function(/*String*/ ofxVal) {
    if ("OPENEND".equals(ofxVal)) {
      return MutualFundType.OPEN_END;
    } else if ("CLOSEEND".equals(ofxVal)) {
      return MutualFundType.CLOSE_END;
    } else if ("OTHER".equals(ofxVal)) {
      return MutualFundType.OTHER;
    } else {
      return null;
    }
  }
};


module.exports = MutualFundType;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/OptionSecurityInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var Aggregate = require("../../../meta/Aggregate");
var Element = require("../../../meta/Element");
var SecurityId = require("./SecurityId");
var BaseSecurityInfo = require("./BaseSecurityInfo");
var OptionType = require("./OptionType");
var AssetClass = require("./AssetClass");

/**
 * Info about an option security.
 * @see "Section 13.8.5.4, OFX Spec"
 *
 * @class
 * @augments BaseSecurityInfo
 */
function OptionSecurityInfo () {

  /**
   * @name OptionSecurityInfo#optionType
   * @type String
   * @access private
   */
  this.optionType = null;

  /**
   * @name OptionSecurityInfo#strikePrice
   * @type Double
   * @access private
   */
  this.strikePrice = null;

  /**
   * @name OptionSecurityInfo#expirationDate
   * @type Date
   * @access private
   */
  this.expirationDate = null;

  /**
   * @name OptionSecurityInfo#sharesPerContact
   * @type Integer
   * @access private
   */
  this.sharesPerContact = null;

  /**
   * @name OptionSecurityInfo#underlyingSecurity
   * @type SecurityId
   * @access private
   */
  this.underlyingSecurity = null;

  /**
   * @name OptionSecurityInfo#assetClass
   * @type String
   * @access private
   */
  this.assetClass = null;

  /**
   * @name OptionSecurityInfo#fiAssetClass
   * @type String
   * @access private
   */
  this.fiAssetClass = null;
}

inherit(OptionSecurityInfo, "extends", BaseSecurityInfo);


Aggregate.add("OPTINFO", OptionSecurityInfo);


/**
 * Gets the type of option. One of "PUT" or "CALL". This is a required field according to the
 * OFX spec.
 *
 * @return {String} the option type
 */
OptionSecurityInfo.prototype.getOptionType = function() {
  return this.optionType;
};
Element.add(OptionSecurityInfo, {name: "OPTTYPE", order: 20, attributeType: String, readMethod: "getOptionType", writeMethod: "setOptionType"});


/**
 * Sets the type of option. One of "PUT" or "CALL". This is a required field according to the
 * OFX spec.
 *
 * @param {String} optionType the option type
 */
OptionSecurityInfo.prototype.setOptionType = function(optionType) {
  this.optionType = optionType;
};


/**
 * Gets the option type as a well-known enum value.
 *
 * @return {OptionType} the option type or null if it's not one of the well-known types
 */
OptionSecurityInfo.prototype.getOptionTypeEnum = function() {
  return OptionType.fromOfx(this.getOptionType());
};


/**
 * Gets the strike price of the option. This is a required field according to the OFX spec.
 *
 * @return {Double} the option strike price
 */
OptionSecurityInfo.prototype.getStrikePrice = function() {
  return this.strikePrice;
};
Element.add(OptionSecurityInfo, {name: "STRIKEPRICE", order: 30, attributeType: Number, readMethod: "getStrikePrice", writeMethod: "setStrikePrice"});


/**
 * Sets the strike price of the option. This is a required field according to the OFX spec.
 *
 * @param {Double} strikePrice the option strike price
 */
OptionSecurityInfo.prototype.setStrikePrice = function(strikePrice) {
  this.strikePrice = strikePrice;
};


/**
 * Gets the expiration date of the option. This is a required field according to the OFX spec.
 *
 * @return {Date} the expiration date of the option
 */
OptionSecurityInfo.prototype.getExpirationDate = function() {
  return this.expirationDate;
};
Element.add(OptionSecurityInfo, {name: "DTEXPIRE", order: 40, attributeType: Date, readMethod: "getExpirationDate", writeMethod: "setExpirationDate"});


/**
 * Sets the expiration date of the option. This is a required field according to the OFX spec.
 *
 * @param {Date} expirationDate the expiration date of the option
 */
OptionSecurityInfo.prototype.setExpirationDate = function(expirationDate) {
  this.expirationDate = expirationDate;
};


/**
 * Gets the number of shares per option contact. This is a required field according to the OFX
 * spec.
 *
 * @return {Integer} the number of shares per option contact
 */
OptionSecurityInfo.prototype.getSharesPerContact = function() {
  return this.sharesPerContact;
};
Element.add(OptionSecurityInfo, {name: "SHPERCTRCT", order: 50, attributeType: Number, readMethod: "getSharesPerContact", writeMethod: "setSharesPerContact"});


/**
 * Sets the number of shares per option contact. This is a required field according to the OFX
 * spec.
 *
 * @param {Integer} sharesPerContact the number of shares per option contact
 */
OptionSecurityInfo.prototype.setSharesPerContact = function(sharesPerContact) {
  this.sharesPerContact = sharesPerContact;
};


/**
 * Gets the security id of the underling security. This is an optional field according to the OFX
 * spec.
 *
 * @return {SecurityId} the security id of the underlying security
 */
OptionSecurityInfo.prototype.getUnderlyingSecurity = function() {
  return this.underlyingSecurity;
};
Element.add(OptionSecurityInfo, {name: "SECID", order: 60, attributeType: SecurityId, readMethod: "getUnderlyingSecurity", writeMethod: "setUnderlyingSecurity"});


/**
 * Sets the security id of the underling security. This is an optional field according to the OFX
 * spec.
 *
 * @param {SecurityId} underlyingSecurity the security id of the underlying security
 */
OptionSecurityInfo.prototype.setUnderlyingSecurity = function(underlyingSecurity) {
  this.underlyingSecurity = underlyingSecurity;
};


/**
 * Gets the asset class of the option. This is an optional field according to the OFX spec.
 *
 * @return {String} the asset class of the option
 */
OptionSecurityInfo.prototype.getAssetClass = function() {
  return this.assetClass;
};
Element.add(OptionSecurityInfo, {name: "ASSETCLASS", order: 70, attributeType: String, readMethod: "getAssetClass", writeMethod: "setAssetClass"});


/**
 * Sets the asset class of the option. This is an optional field according to the OFX spec.
 *
 * @param {String} assetClass the asset class of the option
 */
OptionSecurityInfo.prototype.setAssetClass = function(assetClass) {
  this.assetClass = assetClass;
};


/**
 * Gets the assert class as one of the well-known types.
 *
 * @return {AssetClass} the asset class or null if it's not one of the well-known types
 */
OptionSecurityInfo.prototype.getAssetClassEnum = function() {
  return AssetClass.fromOfx(this.getAssetClass());
};


/**
 * Gets the FI-defined asset class of the option. This is an optional field according to the OFX
 * spec.
 *
 * @return {String} the FI-defined asset class of the option
 */
OptionSecurityInfo.prototype.getFiAssetClass = function() {
  return this.fiAssetClass;
};
Element.add(OptionSecurityInfo, {name: "FIASSETCLASS", order: 80, attributeType: String, readMethod: "getFiAssetClass", writeMethod: "setFiAssetClass"});


/**
 * Sets the FI-defined asset class of the option. This is an optional field according to the OFX
 * spec.
 *
 * @param {String} fiAssetClass the FI-defined asset class of the option
 */
OptionSecurityInfo.prototype.setFiAssetClass = function(fiAssetClass) {
  this.fiAssetClass = fiAssetClass;
};




module.exports = OptionSecurityInfo;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","./AssetClass":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/AssetClass.js","./BaseSecurityInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/BaseSecurityInfo.js","./OptionType":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/OptionType.js","./SecurityId":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityId.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/OptionType.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * Type of option.
 * @see "Section 13.8.5.4, OFX Spec"
 *
 * @enum
 */
var OptionType = {
  PUT: 0,
  CALL: 1,

  fromOfx: function(/*String*/ ofxVal) {
    if ("PUT".equals(ofxVal)) {
      return OptionType.PUT;
    } else if ("CALL".equals(ofxVal)) {
      return OptionType.CALL;
    } else {
      return null;
    }
  }
};


module.exports = OptionType;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/OtherSecurityInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var Aggregate = require("../../../meta/Aggregate");
var Element = require("../../../meta/Element");
var BaseSecurityInfo = require("./BaseSecurityInfo");
var AssetClass = require("./AssetClass");

/**
 * Info about any other type of security.
 * @see "Section 13.8.5.5, OFX Spec"
 *
 * @class
 * @augments BaseSecurityInfo
 */
function OtherSecurityInfo () {

  /**
   * @name OtherSecurityInfo#typeDesc
   * @type String
   * @access private
   */
  this.typeDesc = null;

  /**
   * @name OtherSecurityInfo#assetClass
   * @type String
   * @access private
   */
  this.assetClass = null;

  /**
   * @name OtherSecurityInfo#fiAssetClass
   * @type String
   * @access private
   */
  this.fiAssetClass = null;
}

inherit(OtherSecurityInfo, "extends", BaseSecurityInfo);


Aggregate.add("OTHERINFO", OtherSecurityInfo);


/**
 * Gets a description of the type of security. This is an optional field according to the OFX
 * spec.
 *
 * @return {String} the description of the security
 */
OtherSecurityInfo.prototype.getTypeDesc = function() {
  return this.typeDesc;
};
Element.add(OtherSecurityInfo, {name: "TYPEDESC", order: 20, attributeType: String, readMethod: "getTypeDesc", writeMethod: "setTypeDesc"});


/**
 * Sets a description of the type of security. This is an optional field according to the OFX
 * spec.
 *
 * @param {String} typeDesc the description of the security
 */
OtherSecurityInfo.prototype.setTypeDesc = function(typeDesc) {
  this.typeDesc = typeDesc;
};


/**
 * Gets the asset class of the option. This is an optional field according to the OFX spec.
 *
 * @return {String} the asset class of the debt
 */
OtherSecurityInfo.prototype.getAssetClass = function() {
  return this.assetClass;
};
Element.add(OtherSecurityInfo, {name: "ASSETCLASS", order: 30, attributeType: String, readMethod: "getAssetClass", writeMethod: "setAssetClass"});


/**
 * Sets the asset class of the debt. This is an optional field according to the OFX spec.
 *
 * @param {String} assetClass the asset class of the debt
 */
OtherSecurityInfo.prototype.setAssetClass = function(assetClass) {
  this.assetClass = assetClass;
};


/**
 * Gets the assert class as one of the well-known types.
 *
 * @return {AssetClass} the asset class or null if it's not one of the well-known types
 */
OtherSecurityInfo.prototype.getAssetClassEnum = function() {
  return AssetClass.fromOfx(this.getAssetClass());
};


/**
 * Gets the FI-defined asset class of the debt. This is an optional field according to the OFX
 * spec.
 *
 * @return {String} the FI-defined asset class of the debt
 */
OtherSecurityInfo.prototype.getFiAssetClass = function() {
  return this.fiAssetClass;
};
Element.add(OtherSecurityInfo, {name: "FIASSETCLASS", order: 40, attributeType: String, readMethod: "getFiAssetClass", writeMethod: "setFiAssetClass"});


/**
 * Sets the FI-defined asset class of the debt. This is an optional field according to the OFX
 * spec.
 *
 * @param {String} fiAssetClass the FI-defined asset class of the debt
 */
OtherSecurityInfo.prototype.setFiAssetClass = function(fiAssetClass) {
  this.fiAssetClass = fiAssetClass;
};




module.exports = OtherSecurityInfo;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","./AssetClass":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/AssetClass.js","./BaseSecurityInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/BaseSecurityInfo.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityId.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var Aggregate = require("../../../meta/Aggregate");
var Element = require("../../../meta/Element");

/**
 * Identifier for a security.
 * @see "Section 13.8.1, OFX Spec"
 *
 * @class
 */
function SecurityId () {

  /**
   * @name SecurityId#uniqueId
   * @type String
   * @access private
   */
  this.uniqueId = null;

  /**
   * @name SecurityId#uniqueIdType
   * @type String
   * @access private
   */
  this.uniqueIdType = null;
}



Aggregate.add("SECID", SecurityId);


/**
 * Gets the unique id for the security. This is a required field according to the OFX spec.
 *
 * @return {String} the unique id
 */
SecurityId.prototype.getUniqueId = function() {
  return this.uniqueId;
};
Element.add(SecurityId, {name: "UNIQUEID", required: true, order: 10, attributeType: String, readMethod: "getUniqueId", writeMethod: "setUniqueId"});


/**
 * Sets the unique id for the security. This is a required field according to the OFX spec.
 *
 * @param {String} uniqueId the unique id
 */
SecurityId.prototype.setUniqueId = function(uniqueId) {
  this.uniqueId = uniqueId;
};


/**
 * Gets the type of unique id.
 *
 * @return {String} the type of unique id
 */
SecurityId.prototype.getUniqueIdType = function() {
  return this.uniqueIdType;
};
Element.add(SecurityId, {name: "UNIQUEIDTYPE", required: true, order: 20, attributeType: String, readMethod: "getUniqueIdType", writeMethod: "setUniqueIdType"});


/**
 * Sets the type of unique id.
 *
 * @param {String} uniqueIdType the type of unique id
 */
SecurityId.prototype.setUniqueIdType = function(uniqueIdType) {
  this.uniqueIdType = uniqueIdType;
};




module.exports = SecurityId;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");
var Element = require("../../../meta/Element");
var SecurityId = require("./SecurityId");

//import java.util.Date;

/**
 * Info about a security.
 * @see "Section 13.8.5.1, OFX Spec"
 *
 * @class
 */
function SecurityInfo () {

  /**
   * @name SecurityInfo#securityId
   * @type SecurityId
   * @access private
   */
  this.securityId = null;

  /**
   * @name SecurityInfo#securityName
   * @type String
   * @access private
   */
  this.securityName = null;

  /**
   * @name SecurityInfo#tickerSymbol
   * @type String
   * @access private
   */
  this.tickerSymbol = null;

  /**
   * @name SecurityInfo#fiId
   * @type String
   * @access private
   */
  this.fiId = null;

  /**
   * @name SecurityInfo#rating
   * @type String
   * @access private
   */
  this.rating = null;

  /**
   * @name SecurityInfo#unitPrice
   * @type Double
   * @access private
   */
  this.unitPrice = null;

  /**
   * @name SecurityInfo#marketValueDate
   * @type Date
   * @access private
   */
  this.marketValueDate = null;

  /**
   * @name SecurityInfo#currencyCode
   * @type String
   * @access private
   */
  this.currencyCode = null;

  /**
   * @name SecurityInfo#memo
   * @type String
   * @access private
   */
  this.memo = null;
}



Aggregate.add("SECINFO", SecurityInfo);


/**
 * Gets the unique security id for the security. This is a required field according to the OFX
 * spec.
 *
 * @return {SecurityId} the security id
 */
SecurityInfo.prototype.getSecurityId = function() {
  return this.securityId;
};
ChildAggregate.add(SecurityInfo, {required: true, order: 10, attributeType: SecurityId, readMethod: "getSecurityId", writeMethod: "setSecurityId"});


/**
 * Sets the unique security id for the security. This is a required field according to the OFX
 * spec.
 *
 * @param {SecurityId} securityId the security id
 */
SecurityInfo.prototype.setSecurityId = function(securityId) {
  this.securityId = securityId;
};


/**
 * Gets the full name of the security. This is a required field according to the OFX spec.
 *
 * @return {String} the full name of the security
 */
SecurityInfo.prototype.getSecurityName = function() {
  return this.securityName;
};
Element.add(SecurityInfo, {name: "SECNAME", required: true, order: 20, attributeType: String, readMethod: "getSecurityName", writeMethod: "setSecurityName"});


/**
 * Sets the full name of the security. This is a required field according to the OFX spec.
 *
 * @param {String} securityName the full name of the security
 */
SecurityInfo.prototype.setSecurityName = function(securityName) {
  this.securityName = securityName;
};


/**
 * Gets the ticker symbol for the security. This is an optional field according to the OFX spec.
 *
 * @return {String} the ticket symbol or null if there's no ticker symbol
 */
SecurityInfo.prototype.getTickerSymbol = function() {
  return this.tickerSymbol;
};
Element.add(SecurityInfo, {name: "TICKER", order: 30, attributeType: String, readMethod: "getTickerSymbol", writeMethod: "setTickerSymbol"});


/**
 * Sets the ticker symbol for the security. This is an optional field according to the OFX spec.
 *
 * @param {String} tickerSymbol the ticket symbol or null if there's no ticker symbol
 */
SecurityInfo.prototype.setTickerSymbol = function(tickerSymbol) {
  this.tickerSymbol = tickerSymbol;
};


/**
 * Gets the FI ID number for the security. This is an optional field according to the OFX spec.
 *
 * @return {String} the FI ID number for the security
 */
SecurityInfo.prototype.getFiId = function() {
  return this.fiId;
};
Element.add(SecurityInfo, {name: "FIID", order: 40, attributeType: String, readMethod: "getFiId", writeMethod: "setFiId"});


/**
 * Sets the FI ID number for the security. This is an optional field according to the OFX spec.
 *
 * @param {String} fiId the FI ID number for the security
 */
SecurityInfo.prototype.setFiId = function(fiId) {
  this.fiId = fiId;
};


/**
 * Gets the rating of the security. This is an optional field according to the OFX spec.
 *
 * @return {String} the rating
 */
SecurityInfo.prototype.getRating = function() {
  return this.rating;
};
Element.add(SecurityInfo, {name: "RATING", order: 50, attributeType: String, readMethod: "getRating", writeMethod: "setRating"});


/**
 * Sets the rating of the security. This is an optional field according to the OFX spec.
 *
 * @param {String} rating the rating
 */
SecurityInfo.prototype.setRating = function(rating) {
  this.rating = rating;
};


/**
 * Gets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
 * share price. For bonds, this is the percentage of par. For options, this is the per share (not
 * per contact) price. This is a noptional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @return {Double} the per unit price
 */
SecurityInfo.prototype.getUnitPrice = function() {
  return this.unitPrice;
};
Element.add(SecurityInfo, {name: "UNITPRICE", order: 60, attributeType: Number, readMethod: "getUnitPrice", writeMethod: "setUnitPrice"});


/**
 * Sets the price per commonly-quoted unit. For stocks, mutual funds, and others, this is the
 * share price. For bonds, this is the percentage of par. For options, this is the per share (not
 * per contact) price. This is an optional field according to the OFX spec.
 * @see "Section 13.9.2.4.3, OFX Spec"
 *
 * @param {Double} unitPrice the per unit price
 */
SecurityInfo.prototype.setUnitPrice = function(unitPrice) {
  this.unitPrice = unitPrice;
};


/**
 * Gets the date as-of for the unit price. This is an optional field according to the OFX spec.
 *
 * @return {Date} the date as-of for the unit price
 */
SecurityInfo.prototype.getUnitPriceAsOfDate = function() {
  return this.marketValueDate;
};
Element.add(SecurityInfo, {name: "DTASOF", order: 70, attributeType: Date, readMethod: "getUnitPriceAsOfDate", writeMethod: "setUnitPriceAsOfDate"});


/**
 * Sets the date as-of for the unit price. This is an optional field according to the OFX spec.
 *
 * param marketValueDate the date as-of for the unit price
 */
SecurityInfo.prototype.setUnitPriceAsOfDate = function(/*Date*/ marketValueDate) {
  this.marketValueDate = marketValueDate;
};


/**
 * Gets the overriding currency code for the security. If not set, implies the default currency.
 * This is an optional field according to the OFX spec.
 *
 * @return {String} the overriding currency code or null to mean the default currency
 */
SecurityInfo.prototype.getCurrencyCode = function() {
  return this.currencyCode;
};
Element.add(SecurityInfo, {name: "CURRENCY", order: 80, attributeType: String, readMethod: "getCurrencyCode", writeMethod: "setCurrencyCode"});


/**
 * Sets the overriding currency code for the security. If not set, implies the default currency.
 * This is an optional field according to the OFX spec.
 *
 * @param {String} currencyCode the overriding currency code or null to mean the default currency
 */
SecurityInfo.prototype.setCurrencyCode = function(currencyCode) {
  this.currencyCode = currencyCode;
};


/**
 * Gets any memo associated with the security. This is an optional field according to the OFX
 * spec.
 *
 * @return {String} the memo
 */
SecurityInfo.prototype.getMemo = function() {
  return this.memo;
};
Element.add(SecurityInfo, {name: "MEMO", order: 90, attributeType: String, readMethod: "getMemo", writeMethod: "setMemo"});


/**
 * Sets any memo associated with the security. This is an optional field according to the OFX
 * spec.
 *
 * @param {String} memo the memo
 */
SecurityInfo.prototype.setMemo = function(memo) {
  this.memo = memo;
};




module.exports = SecurityInfo;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","./SecurityId":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityId.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityList.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");
var BaseSecurityInfo = require("./BaseSecurityInfo");

/**
 * Aggregate for a list of securities.
 * @see "Section 13.8.4, OFX Spec"
 *
 * @class
 */
function SecurityList () {

  /**
   * @name SecurityList#securityInfos
   * @type List<BaseSecurityInfo>
   * @access private
   */
  this.securityInfos = null;
}



Aggregate.add("SECLIST", SecurityList);


SecurityList.prototype.getSecurityInfos = function() {
  return this.securityInfos;
};
ChildAggregate.add(SecurityList, {order: 10, attributeType: Array, collectionEntryType: BaseSecurityInfo, readMethod: "getSecurityInfos", writeMethod: "setSecurityInfos"});


SecurityList.prototype.setSecurityInfos = function(/*BaseSecurityInfo[]*/ securityInfos) {
  this.securityInfos = securityInfos;
};




module.exports = SecurityList;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","./BaseSecurityInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/BaseSecurityInfo.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityListRequest.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var RequestMessage = require("../RequestMessage");
var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");
var SecurityRequest = require("./SecurityRequest");

/**
 * Request aggregate for the security list.
 * @see "Section 13.8.2.2, OFX Spec"
 *
 * @class
 */
function SecurityListRequest () {

  /**
   * @name SecurityListRequest#securityRequests
   * @type List<SecurityRequest>
   * @access private
   */
  this.securityRequests = null;
}

inherit(SecurityListRequest, "extends", RequestMessage);


Aggregate.add("SECLISTRQ", SecurityListRequest);


SecurityListRequest.prototype.getSecurityRequests = function() {
  return this.securityRequests;
};
ChildAggregate.add(SecurityListRequest, {required: true, order: 10, attributeType: Array, collectionEntryType: SecurityRequest, readMethod: "getSecurityRequests", writeMethod: "setSecurityRequests"});


SecurityListRequest.prototype.setSecurityRequests = function(/*SecurityRequest[]*/ securityRequests) {
  this.securityRequests = securityRequests;
};




module.exports = SecurityListRequest;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../RequestMessage":"/Users/aolson/Developer/ofx4js/src/domain/data/RequestMessage.js","./SecurityRequest":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityRequest.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityListRequestMessageSet.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


"use strict";

var inherit = require("../../../util/inherit");

var MessageSetType = require("../MessageSetType");
var RequestMessageSet = require("../RequestMessageSet");
var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");
var SecurityListRequestTransaction = require("./SecurityListRequestTransaction");

/**
 * Security list request message set.
 * @see "Section 13.7.2.2.1, OFX Spec"
 *
 * @class
 * @augments RequestMessageSet
 */
function SecurityListRequestMessageSet () {

  /**
   * @name SecurityListRequestMessageSet#securityListRequest
   * @type SecurityListRequestTransaction
   * @access private
   */
  this.securityListRequest = null;
}

inherit(SecurityListRequestMessageSet, "extends", RequestMessageSet);


Aggregate.add("SECLISTMSGSRQV1", SecurityListRequestMessageSet);


SecurityListRequestMessageSet.prototype.getType = function() {
  return MessageSetType.investment;
};


/**
 * Gets the security list request.
 *
 * @return {SecurityListRequestTransaction} the request
 */
SecurityListRequestMessageSet.prototype.getSecurityListRequest = function() {
  return this.securityListRequest;
};
ChildAggregate.add(SecurityListRequestMessageSet, {order: 0, attributeType: SecurityListRequestTransaction, readMethod: "getSecurityListRequest", writeMethod: "setSecurityListRequest"});


/**
 * Sets the security list request.
 *
 * @param {SecurityListRequestTransaction} statementRequest the request
 */
SecurityListRequestMessageSet.prototype.setSecurityListRequest = function(statementRequest) {
  this.securityListRequest = statementRequest;
};


// Inherited.
SecurityListRequestMessageSet.prototype.getRequestMessages = function() {
  var requestMessages = [];
  if (this.getSecurityListRequest() !== null) {
    requestMessages.push(this.getSecurityListRequest());
  }
  return requestMessages;
};




module.exports = SecurityListRequestMessageSet;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../MessageSetType":"/Users/aolson/Developer/ofx4js/src/domain/data/MessageSetType.js","../RequestMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/RequestMessageSet.js","./SecurityListRequestTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityListRequestTransaction.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityListRequestTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var TransactionWrappedRequestMessage = require("../TransactionWrappedRequestMessage");
var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");
var SecurityListRequest = require("./SecurityListRequest");

/**
 * Security list transaction request.
 * @see "Section 13.8.2.1, OFX Spec"
 *
 * @class
 * @augments TransactionWrappedRequestMessage
 */
function SecurityListRequestTransaction () {

  /**
   * @name SecurityListRequestTransaction#message
   * @type SecurityListRequest
   * @access private
   */
  this.message = null;
}

inherit(SecurityListRequestTransaction, "extends", new TransactionWrappedRequestMessage(SecurityListRequest));


Aggregate.add("SECLISTTRNRQ", SecurityListRequestTransaction);


/**
 * The message.
 *
 * @return {SecurityListRequest} The message.
 */
SecurityListRequestTransaction.prototype.getMessage = function() {
  return this.message;
};
ChildAggregate.add(SecurityListRequestTransaction, {required: true, order: 30, attributeType: SecurityListRequest, readMethod: "getMessage", writeMethod: "setMessage"});


/**
 * The message.
 *
 * @param {SecurityListRequest} message The message.
 *
 */
SecurityListRequestTransaction.prototype.setMessage = function(message) {
  this.message = message;
};


// Inherited.
SecurityListRequestTransaction.prototype.setWrappedMessage = function(/*SecurityListRequest*/ message) {
  this.setMessage(message);
};




module.exports = SecurityListRequestTransaction;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../TransactionWrappedRequestMessage":"/Users/aolson/Developer/ofx4js/src/domain/data/TransactionWrappedRequestMessage.js","./SecurityListRequest":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityListRequest.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityListResponse.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var ResponseMessage = require("../ResponseMessage");
var Aggregate = require("../../../meta/Aggregate");

/**
 * Security list response. This is an empty aggregate. The actual security information is included
 * in the "SECLIST" aggregate.
 * @see "Section 13.8.3, OFX Spec"
 *
 * @class
 * @augments ResponseMessage
 */
function SecurityListResponse () {
}

inherit(SecurityListResponse, "extends", ResponseMessage);


Aggregate.add("SECLISTRS", SecurityListResponse);


SecurityListResponse.prototype.getResponseMessageName = function() {
  return "security list";
};




module.exports = SecurityListResponse;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../ResponseMessage":"/Users/aolson/Developer/ofx4js/src/domain/data/ResponseMessage.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityListResponseMessageSet.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var MessageSetType = require("../MessageSetType");
var ResponseMessageSet = require("../ResponseMessageSet");
var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");
var SecurityListResponseTransaction = require("./SecurityListResponseTransaction");
var SecurityList = require("./SecurityList");

/**
 * @class
 * @augments ResponseMessageSet
 */
function SecurityListResponseMessageSet () {

  /**
   * @name SecurityListResponseMessageSet#securityListResponse
   * @type SecurityListResponseTransaction
   * @access private
   */
  this.securityListResponse = null;

  /**
   * @name SecurityListResponseMessageSet#securityList
   * @type SecurityList
   * @access private
   */
  this.securityList = null;
}

inherit(SecurityListResponseMessageSet, "extends", ResponseMessageSet);


Aggregate.add("SECLISTMSGSRSV1", SecurityListResponseMessageSet);


SecurityListResponseMessageSet.prototype.getType = function() {
  return MessageSetType.investment_security;
};


/**
 * The security list response list transaction.
 *
 * Most OFX files have a single security response.
 *
 * @return {SecurityListResponseTransaction} The security list response list.
 */
SecurityListResponseMessageSet.prototype.getSecurityListResponse = function() {
  return this.securityListResponse;
};
ChildAggregate.add(SecurityListResponseMessageSet, {order: 0, attributeType: SecurityListResponseTransaction, readMethod: "getSecurityListResponse", writeMethod: "setSecurityListResponse"});


/**
 * The security list response.
 *
 * @param {SecurityListResponseTransaction} securityListResponse The security list response.
 */
SecurityListResponseMessageSet.prototype.setSecurityListResponse = function(securityListResponse) {
  this.securityListResponse = securityListResponse;
};


SecurityListResponseMessageSet.prototype.getSecurityList = function() {
  return this.securityList;
};
ChildAggregate.add(SecurityListResponseMessageSet, {order: 10, attributeType: SecurityList, readMethod: "getSecurityList", writeMethod: "setSecurityList"});


SecurityListResponseMessageSet.prototype.setSecurityList = function(/*SecurityList*/ securityList) {
  this.securityList = securityList;
};


// Inherited.
SecurityListResponseMessageSet.prototype.getResponseMessages = function() {
  var ret = [];
  ret.push(this.securityListResponse);
  return ret;
};




module.exports = SecurityListResponseMessageSet;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../MessageSetType":"/Users/aolson/Developer/ofx4js/src/domain/data/MessageSetType.js","../ResponseMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/ResponseMessageSet.js","./SecurityList":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityList.js","./SecurityListResponseTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityListResponseTransaction.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityListResponseTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";

var inherit = require("../../../util/inherit");

var TransactionWrappedResponseMessage = require("../TransactionWrappedResponseMessage");
var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");
var SecurityListResponse = require("./SecurityListResponse");

/**
 * Security list transaction response.
 * @see "Section 13.8.3.1, OFX Spec"
 *
 * @class
 * @augments TransactionWrappedResponseMessage
 */
function SecurityListResponseTransaction () {

  /**
   * @name SecurityListResponseTransaction#message
   * @type SecurityListResponse
   * @access private
   */
  this.message = null;
}

inherit(SecurityListResponseTransaction, "extends", new TransactionWrappedResponseMessage(SecurityListResponse));


Aggregate.add("SECLISTTRNRS", SecurityListResponseTransaction);


/**
 * The message.
 *
 * @return {SecurityListResponse} The message.
 */
SecurityListResponseTransaction.prototype.getMessage = function() {
  return this.message;
};
ChildAggregate.add(SecurityListResponseTransaction, {required: true, order: 30, attributeType: SecurityListResponse, readMethod: "getMessage", writeMethod: "setMessage"});


/**
 * The message.
 *
 * @param {SecurityListResponse} message The message.
 */
SecurityListResponseTransaction.prototype.setMessage = function(message) {
  this.message = message;
};


// Inherited.
SecurityListResponseTransaction.prototype.getWrappedMessage = function() {
  return this.getMessage();
};




module.exports = SecurityListResponseTransaction;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../TransactionWrappedResponseMessage":"/Users/aolson/Developer/ofx4js/src/domain/data/TransactionWrappedResponseMessage.js","./SecurityListResponse":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityListResponse.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityRequest.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var Aggregate = require("../../../meta/Aggregate");
var Element = require("../../../meta/Element");
var SecurityId = require("./SecurityId");

/**
 * Security request aggregate.
 * @see "Section 13.8.2.2, OFX Spec"
 *
 * @class
 */
function SecurityRequest () {

  /**
   * @name SecurityRequest#securityId
   * @type SecurityId
   * @access private
   */
  this.securityId = null;

  /**
   * @name SecurityRequest#tickerSymbol
   * @type String
   * @access private
   */
  this.tickerSymbol = null;

  /**
   * @name SecurityRequest#fiId
   * @type String
   * @access private
   */
  this.fiId = null;
}



Aggregate.add("SECRQ", SecurityRequest);


SecurityRequest.prototype.getSecurityId = function() {
  return this.securityId;
};
Element.add(SecurityRequest, {name: "SECID", order: 10, attributeType: SecurityId, readMethod: "getSecurityId", writeMethod: "setSecurityId"});


SecurityRequest.prototype.setSecurityId = function(/*SecurityId*/ securityId) {
  this.securityId = securityId;
  this.tickerSymbol = null;
  this.fiId = null;
};


SecurityRequest.prototype.getTickerSymbol = function() {
  return this.tickerSymbol;
};
Element.add(SecurityRequest, {name: "TICKER", order: 20, attributeType: String, readMethod: "getTickerSymbol", writeMethod: "setTickerSymbol"});


SecurityRequest.prototype.setTickerSymbol = function(/*String*/ tickerSymbol) {
  this.tickerSymbol = tickerSymbol;
  this.securityId = null;
  this.fiId = null;
};


SecurityRequest.prototype.getFiId = function() {
  return this.fiId;
};
Element.add(SecurityRequest, {name: "FIID", order: 30, attributeType: String, readMethod: "getFiId", writeMethod: "setFiId"});


SecurityRequest.prototype.setFiId = function(/*String*/ fiId) {
  this.fiId = fiId;
  this.securityId = null;
  this.tickerSymbol = null;
};




module.exports = SecurityRequest;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","./SecurityId":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityId.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/StockSecurityInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var Aggregate = require("../../../meta/Aggregate");
var Element = require("../../../meta/Element");
var BaseSecurityInfo = require("./BaseSecurityInfo");
var StockType = require("./StockType");
var AssetClass = require("./AssetClass");

/**
 * Info about a stock security.
 * @see "Section 13.8.5.6, OFX Spec"
 *
 * @class
 * @augments BaseSecurityInfo
 */
function StockSecurityInfo () {

  /**
   * @name StockSecurityInfo#stockType
   * @type String
   * @access private
   */
  this.stockType = null;

  /**
   * @name StockSecurityInfo#yield
   * @type Double
   * @access private
   */
  this.yield = null;

  /**
   * @name StockSecurityInfo#dateYieldAsOf
   * @type Date
   * @access private
   */
  this.dateYieldAsOf = null;

  /**
   * @name StockSecurityInfo#assetClass
   * @type String
   * @access private
   */
  this.assetClass = null;

  /**
   * @name StockSecurityInfo#fiAssetClass
   * @type String
   * @access private
   */
  this.fiAssetClass = null;
}

inherit(StockSecurityInfo, "extends", BaseSecurityInfo);


Aggregate.add("STOCKINFO", StockSecurityInfo);


/**
 * Gets the type of stock. One of "COMMON", "PREFERRED", "CONVERTIBLE", or "OTHER". This is an
 * optional field according to the OFX spec.
 *
 * @return {String} the type of stock
 */
StockSecurityInfo.prototype.getType = function() {
  return this.stockType;
};
Element.add(StockSecurityInfo, {name: "STOCKTYPE", order: 20, attributeType: String, readMethod: "getType", writeMethod: "setType"});


/**
 * Sets the type of stock. One of "COMMON", "PREFERRED", "CONVERTIBLE", or "OTHER". This is an
 * optional field according to the OFX spec.
 *
 * @param {String} stockType the type of stock
 */
StockSecurityInfo.prototype.setType = function(stockType) {
  this.stockType = stockType;
};


/**
 * Gets the type of stock as one of the well-known types.
 *
 * @return {StockType} the type of stock or null if it's not one of the well-known types
 */
StockSecurityInfo.prototype.getTypeEnum = function() {
  return StockType.fromOfx(this.getType());
};


/**
 * Gets the current yield reported as the dividend expressed as a portion of the current stock
 * price, a rate. This is an optional field according to the OFX spec.
 *
 * @return {Double} the dividend yield
 */
StockSecurityInfo.prototype.getYield = function() {
  return this.yield;
};
Element.add(StockSecurityInfo, {name: "YIELD", order: 30, attributeType: Number, readMethod: "getYield", writeMethod: "setYield"});


/**
 * Sets the current yield reported as the dividend expressed as a portion of the current stock
 * price, a rate. This is an optional field according to the OFX spec.
 *
 * @param {Double} yield the dividend yield
 */
StockSecurityInfo.prototype.setYield = function(yield_) {
  this.yield = yield_;
};


/**
 * Gets the as-of date for the yield. This is an optional field according to the OFX spec.
 *
 * @return {Date} the as-of date for the yield
 */
StockSecurityInfo.prototype.getDateYieldAsOf = function() {
  return this.dateYieldAsOf;
};
Element.add(StockSecurityInfo, {name: "DTYIELDASOF", order: 40, attributeType: Date, readMethod: "getDateYieldAsOf", writeMethod: "setDateYieldAsOf"});


/**
 * Sets the as-of date for the yield. This is an optional field according to the OFX spec.
 *
 * @param {Date} dateYieldAsOf the as-of date for the yield
 */
StockSecurityInfo.prototype.setDateYieldAsOf = function(dateYieldAsOf) {
  this.dateYieldAsOf = dateYieldAsOf;
};


/**
 * Gets the asset class of the stock. This is an optional field according to the OFX spec.
 *
 * @return {String} the asset class of the stock
 */
StockSecurityInfo.prototype.getAssetClass = function() {
  return this.assetClass;
};
Element.add(StockSecurityInfo, {name: "ASSETCLASS", order: 50, attributeType: String, readMethod: "getAssetClass", writeMethod: "setAssetClass"});


/**
 * Sets the asset class of the stock. This is an optional field according to the OFX spec.
 *
 * @param {String} assetClass the asset class of the stock
 */
StockSecurityInfo.prototype.setAssetClass = function(assetClass) {
  this.assetClass = assetClass;
};


/**
 * Gets the assert class as one of the well-known types.
 *
 * @return {AssetClass} the asset class or null if it's not one of the well-known types
 */
StockSecurityInfo.prototype.getAssetClassEnum = function() {
  return AssetClass.fromOfx(this.getAssetClass());
};


/**
 * Gets the FI-defined asset class of the stock. This is an optional field according to the OFX
 * spec.
 *
 * @return {String} the FI-defined asset class of the stock
 */
StockSecurityInfo.prototype.getFiAssetClass = function() {
  return this.fiAssetClass;
};
Element.add(StockSecurityInfo, {name: "FIASSETCLASS", order: 60, attributeType: String, readMethod: "getFiAssetClass", writeMethod: "setFiAssetClass"});


/**
 * Sets the FI-defined asset class of the stock. This is an optional field according to the OFX
 * spec.
 *
 * @param {String} fiAssetClass the FI-defined asset class of the stock
 */
StockSecurityInfo.prototype.setFiAssetClass = function(fiAssetClass) {
  this.fiAssetClass = fiAssetClass;
};




module.exports = StockSecurityInfo;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","./AssetClass":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/AssetClass.js","./BaseSecurityInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/BaseSecurityInfo.js","./StockType":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/StockType.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/StockType.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * The type of debt.
 * @see "Section 13.8.5.6, OFX Spec"
 *
 * @enum
 */
var StockType = {
  COMMON: 0,
  PREFERRED: 1,
  CONVERTIBLE: 2,
  OTHER: 3,

  fromOfx: function(/*String*/ ofxVal) {
    if ("COMMON".equals(ofxVal)) {
      return StockType.COMMON;
    } else if ("PREFERRED".equals(ofxVal)) {
      return StockType.PREFERRED;
    } else if ("CONVERTIBLE".equals(ofxVal)) {
      return StockType.CONVERTIBLE;
    } else if ("OTHER".equals(ofxVal)) {
      return StockType.OTHER;
    } else {
      return null;
    }
  }
};


module.exports = StockType;

},{}],"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/index.js":[function(require,module,exports){
"use strict";

module.exports = {
  AssetClass: require("./AssetClass"),
  BaseSecurityInfo: require("./BaseSecurityInfo"),
  CallType: require("./CallType"),
  CouponFrequency: require("./CouponFrequency"),
  DebtClass: require("./DebtClass"),
  DebtSecurityInfo: require("./DebtSecurityInfo"),
  DebtType: require("./DebtType"),
  MutualFundSecurityInfo: require("./MutualFundSecurityInfo"),
  MutualFundType: require("./MutualFundType"),
  OptionSecurityInfo: require("./OptionSecurityInfo"),
  OptionType: require("./OptionType"),
  OtherSecurityInfo: require("./OtherSecurityInfo"),
  SecurityId: require("./SecurityId"),
  SecurityInfo: require("./SecurityInfo"),
  SecurityList: require("./SecurityList"),
  SecurityListRequest: require("./SecurityListRequest"),
  SecurityListRequestMessageSet: require("./SecurityListRequestMessageSet"),
  SecurityListRequestTransaction: require("./SecurityListRequestTransaction"),
  SecurityListResponse: require("./SecurityListResponse"),
  SecurityListResponseMessageSet: require("./SecurityListResponseMessageSet"),
  SecurityListResponseTransaction: require("./SecurityListResponseTransaction"),
  SecurityRequest: require("./SecurityRequest"),
  StockSecurityInfo: require("./StockSecurityInfo"),
  StockType: require("./StockType"),
};

},{"./AssetClass":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/AssetClass.js","./BaseSecurityInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/BaseSecurityInfo.js","./CallType":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/CallType.js","./CouponFrequency":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/CouponFrequency.js","./DebtClass":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/DebtClass.js","./DebtSecurityInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/DebtSecurityInfo.js","./DebtType":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/DebtType.js","./MutualFundSecurityInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/MutualFundSecurityInfo.js","./MutualFundType":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/MutualFundType.js","./OptionSecurityInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/OptionSecurityInfo.js","./OptionType":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/OptionType.js","./OtherSecurityInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/OtherSecurityInfo.js","./SecurityId":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityId.js","./SecurityInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityInfo.js","./SecurityList":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityList.js","./SecurityListRequest":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityListRequest.js","./SecurityListRequestMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityListRequestMessageSet.js","./SecurityListRequestTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityListRequestTransaction.js","./SecurityListResponse":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityListResponse.js","./SecurityListResponseMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityListResponseMessageSet.js","./SecurityListResponseTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityListResponseTransaction.js","./SecurityRequest":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/SecurityRequest.js","./StockSecurityInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/StockSecurityInfo.js","./StockType":"/Users/aolson/Developer/ofx4js/src/domain/data/seclist/StockType.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/signon/FinancialInstitution.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var Aggregate = require("../../../meta/Aggregate");
var Element = require("../../../meta/Element");

/**
 * @class
 */
function FinancialInstitution () {

  /**
   * @name FinancialInstitution#id
   * @type String
   * @access private
   */
  this.id = null;

  /**
   * @name FinancialInstitution#organization
   * @type String
   * @access private
   */
  this.organization = null;
}



Aggregate.add("FI", FinancialInstitution);


/**
 * Financial institution id.
 *
 * @return {String} Financial institution id.
 */
FinancialInstitution.prototype.getId = function() {
  return this.id;
};
Element.add(FinancialInstitution, {name: "FID", order: 10, attributeType: String, readMethod: "getId", writeMethod: "setId"});


/**
 * Financial institution id.
 *
 * @param {String} id Financial institution id.
 */
FinancialInstitution.prototype.setId = function(id) {
  this.id = id;
};


/**
 * The organization.
 *
 * @return {String} The organization.
 */
FinancialInstitution.prototype.getOrganization = function() {
  return this.organization;
};
Element.add(FinancialInstitution, {name: "ORG", required: true, order: 0, attributeType: String, readMethod: "getOrganization", writeMethod: "setOrganization"});


/**
 * The organization.
 *
 * @param {String} organization The organization.
 */
FinancialInstitution.prototype.setOrganization = function(organization) {
  this.organization = organization;
};




module.exports = FinancialInstitution;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/signon/PasswordChangeRequest.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var RequestMessage = require("../RequestMessage");
var Aggregate = require("../../../meta/Aggregate");
var Element = require("../../../meta/Element");

/**
 * Request to change a user password.
 *
 * @class
 * @see "Section 2.5.2.1, OFX Spec."
 */
function PasswordChangeRequest () {

  /**
   * @name PasswordChangeRequest#userId
   * @type String
   * @access private
   */
  this.userId = null;

  /**
   * @name PasswordChangeRequest#newPassword
   * @type String
   * @access private
   */
  this.newPassword = null;
}

inherit(PasswordChangeRequest, "extends", RequestMessage);


Aggregate.add("PINCHRQ", PasswordChangeRequest);


/**
 * The id of the user changing password.
 *
 * @return {String} The id of the user changing password.
 */
PasswordChangeRequest.prototype.getUserId = function() {
  return this.userId;
};
Element.add(PasswordChangeRequest, {name: "USERID", required: true, order: 0, attributeType: String, readMethod: "getUserId", writeMethod: "setUserId"});


/**
 * The id of the user changing password.
 *
 * @param {String} userId The id of the user changing password.
 */
PasswordChangeRequest.prototype.setUserId = function(userId) {
  this.userId = userId;
};


/**
 * The new password.
 *
 * @return {String} The new password.
 */
PasswordChangeRequest.prototype.getNewPassword = function() {
  return this.newPassword;
};
Element.add(PasswordChangeRequest, {name: "NEWUSERPASS", required: true, order: 10, attributeType: String, readMethod: "getNewPassword", writeMethod: "setNewPassword"});


/**
 * The new password.
 *
 * @param {String} newPassword The new password.
 */
PasswordChangeRequest.prototype.setNewPassword = function(newPassword) {
  this.newPassword = newPassword;
};




module.exports = PasswordChangeRequest;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../RequestMessage":"/Users/aolson/Developer/ofx4js/src/domain/data/RequestMessage.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/signon/PasswordChangeRequestTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var TransactionWrappedRequestMessage = require("../TransactionWrappedRequestMessage");
var ChildAggregate = require("../../../meta/ChildAggregate");
var Aggregate = require("../../../meta/Aggregate");
var PasswordChangeRequest = require("./PasswordChangeRequest");

/**
 * @class
 * @augments TransactionWrappedRequestMessage
 */
function PasswordChangeRequestTransaction () {

  /**
   * @name PasswordChangeRequestTransaction#message
   * @type PasswordChangeRequest
   * @access private
   */
  this.message = null;
}

inherit(PasswordChangeRequestTransaction, "extends", new TransactionWrappedRequestMessage(PasswordChangeRequest));


Aggregate.add("PINCHTRNRQ", PasswordChangeRequestTransaction);


/**
 * The wrapped message.
 *
 * @return {PasswordChangeRequest} The wrapped message.
 */
PasswordChangeRequestTransaction.prototype.getMessage = function() {
  return this.message;
};
ChildAggregate.add(PasswordChangeRequestTransaction, {required: true, order: 30, attributeType: PasswordChangeRequest, readMethod: "getMessage", writeMethod: "setMessage"});


/**
 * The wrapped message.
 *
 * @param {PasswordChangeRequest} message The wrapped message.
 */
PasswordChangeRequestTransaction.prototype.setMessage = function(message) {
  this.message = message;
};


// Inherited.
PasswordChangeRequestTransaction.prototype.setWrappedMessage = function(/*PasswordChangeRequest*/ message) {
  this.setMessage(message);
};




module.exports = PasswordChangeRequestTransaction;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../TransactionWrappedRequestMessage":"/Users/aolson/Developer/ofx4js/src/domain/data/TransactionWrappedRequestMessage.js","./PasswordChangeRequest":"/Users/aolson/Developer/ofx4js/src/domain/data/signon/PasswordChangeRequest.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/signon/PasswordChangeResponse.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var ResponseMessage = require("../ResponseMessage");
var Aggregate = require("../../../meta/Aggregate");
var Element = require("../../../meta/Element");

/**
 * Response to a change a user password request.
 *
 * @class
 * @augments ResponseMessage
 * @see "Section 2.5.2.2, OFX Spec."
 */
function PasswordChangeResponse () {

  /**
   * @name PasswordChangeResponse#userId
   * @type String
   * @access private
   */
  this.userId = null;

  /**
   * @name PasswordChangeResponse#changeTimestamp
   * @type Date
   * @access private
   */
  this.changeTimestamp = null;
}

inherit(PasswordChangeResponse, "extends", ResponseMessage);


Aggregate.add("PINCHRQ", PasswordChangeResponse);


/**
 * The id of the user changing password.
 *
 * @return {String} The id of the user changing password.
 */
PasswordChangeResponse.prototype.getUserId = function() {
  return this.userId;
};
Element.add(PasswordChangeResponse, {name: "USERID", required: true, order: 0, attributeType: String, readMethod: "getUserId", writeMethod: "setUserId"});


// Inherited.
PasswordChangeResponse.prototype.getResponseMessageName = function() {
  return "password change";
};


/**
 * The id of the user changing password.
 *
 * @param {String} userId The id of the user changing password.
 */
PasswordChangeResponse.prototype.setUserId = function(userId) {
  this.userId = userId;
};


/**
 * The timestamp of the password change.
 *
 * @return {Date} The timestamp of the password change.
 */
PasswordChangeResponse.prototype.getChangeTimestamp = function() {
  return this.changeTimestamp;
};
Element.add(PasswordChangeResponse, {name: "DTCHANGED", order: 10, attributeType: Date, readMethod: "getChangeTimestamp", writeMethod: "setChangeTimestamp"});


/**
 * The timestamp of the password change.
 *
 * @param {Date} changeTimestamp The timestamp of the password change.
 */
PasswordChangeResponse.prototype.setChangeTimestamp = function(changeTimestamp) {
  this.changeTimestamp = changeTimestamp;
};




module.exports = PasswordChangeResponse;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../ResponseMessage":"/Users/aolson/Developer/ofx4js/src/domain/data/ResponseMessage.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/signon/PasswordChangeResponseTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var TransactionWrappedResponseMessage = require("../TransactionWrappedResponseMessage");
var ChildAggregate = require("../../../meta/ChildAggregate");
var Aggregate = require("../../../meta/Aggregate");
var PasswordChangeResponse = require("./PasswordChangeResponse");

/**
 * @class
 * @augments TransactionWrappedResponseMessage
 */
function PasswordChangeResponseTransaction () {

  /**
   * @name PasswordChangeResponseTransaction#message
   * @type PasswordChangeResponse
   * @access private
   */
  this.message = null;
}

inherit(PasswordChangeResponseTransaction, "extends", new TransactionWrappedResponseMessage(PasswordChangeResponse));


Aggregate.add("PINCHTRNRS", PasswordChangeResponseTransaction);


/**
 * The message.
 *
 * @return {PasswordChangeResponse} The message.
 */
PasswordChangeResponseTransaction.prototype.getMessage = function() {
  return this.message;
};
ChildAggregate.add(PasswordChangeResponseTransaction, {required: true, order: 30, attributeType: PasswordChangeResponse, readMethod: "getMessage", writeMethod: "setMessage"});


/**
 * The message.
 *
 * @param {PasswordChangeResponse} message The message.
 */
PasswordChangeResponseTransaction.prototype.setMessage = function(message) {
  this.message = message;
};


// Inherited.
PasswordChangeResponseTransaction.prototype.getWrappedMessage = function() {
  return this.getMessage();
};




module.exports = PasswordChangeResponseTransaction;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../TransactionWrappedResponseMessage":"/Users/aolson/Developer/ofx4js/src/domain/data/TransactionWrappedResponseMessage.js","./PasswordChangeResponse":"/Users/aolson/Developer/ofx4js/src/domain/data/signon/PasswordChangeResponse.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/signon/SignonRequest.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");
var Element = require("../../../meta/Element");
var RequestMessage = require("../RequestMessage");
var FinancialInstitution = require("../../../client/FinancialInstitution");

/**
 * Sign-on request
 *
 * @class
 * @augments RequestMessage
 * @see "Section 2.5.1.2, OFX Spec."
 */
function SignonRequest () {

  /**
   * @name SignonRequest#ANONYMOUS_USER
   * @type String
   */
  this.ANONYMOUS_USER = "anonymous00000000000000000000000";

  /**
   * @name SignonRequest#timestamp
   * @type Date
   * @access private
   */
  this.timestamp = null;

  /**
   * @name SignonRequest#userId
   * @type String
   * @access private
   */
  this.userId = null;

  /**
   * @name SignonRequest#password
   * @type String
   * @access private
   */
  this.password = null;

  /**
   * @name SignonRequest#userKey
   * @type String
   * @access private
   */
  this.userKey = null;

  /**
   * @name SignonRequest#generateUserKey
   * @type Boolean
   * @access private
   */
  this.generateUserKey = null;

  /**
   * @name SignonRequest#language
   * @type String
   * @access private
   */
  this.language = "ENG";

  /**
   * @name SignonRequest#financialInstitution
   * @type FinancialInstitution
   * @access private
   */
  this.financialInstitution = null;

  /**
   * @name SignonRequest#sessionId
   * @type String
   * @access private
   */
  this.sessionId = null;

  /**
   * @name SignonRequest#applicationId
   * @type String
   * @access private
   */
  this.applicationId = "Money";

  /**
   * @name SignonRequest#applicationVersion
   * @type String
   * @access private
   */
  this.applicationVersion = "1600";

  /**
   * @name SignonRequest#clientUID
   * @type String
   * @access private
   */
  this.clientUID = null;

  /**
   * @name SignonRequest#additionalCredentials1
   * @type String
   * @access private
   */
  this.additionalCredentials1 = null;

  /**
   * @name SignonRequest#additionalCredentials2
   * @type String
   * @access private
   */
  this.additionalCredentials2 = null;

  /**
   * @name SignonRequest#authToken
   * @type String
   * @access private
   */
  this.authToken = null;

  /**
   * @name SignonRequest#accessKey
   * @type String
   * @access private
   */
  this.accessKey = null;
}

inherit(SignonRequest, "extends", RequestMessage);


Aggregate.add("SONRQ", SignonRequest);


/**
 * The date and time of the request.
 *
 * @return {Date} The date and time of the request.
 */
SignonRequest.prototype.getTimestamp = function() {
  return this.timestamp;
};
Element.add(SignonRequest, {name: "DTCLIENT", required: true, order: 0, attributeType: Date, readMethod: "getTimestamp", writeMethod: "setTimestamp"});


/**
 * The date and time of the request.
 *
 * @param {Date} timestamp The date and time of the request.
 */
SignonRequest.prototype.setTimestamp = function(timestamp) {
  this.timestamp = timestamp;
};


/**
 * The user id.
 *
 * @return {String} The user id.
 */
SignonRequest.prototype.getUserId = function() {
  return this.userId;
};
Element.add(SignonRequest, {name: "USERID", order: 10, attributeType: String, readMethod: "getUserId", writeMethod: "setUserId"});


/**
 * The user id.
 *
 * @param {String} userId The user id.
 */
SignonRequest.prototype.setUserId = function(userId) {
  this.userId = userId;
};


/**
 * The password.
 *
 * @return {String} The password.
 */
SignonRequest.prototype.getPassword = function() {
  return this.password;
};
Element.add(SignonRequest, {name: "USERPASS", order: 20, attributeType: String, readMethod: "getPassword", writeMethod: "setPassword"});


/**
 * The password.
 *
 * @param {String} password The password.
 */
SignonRequest.prototype.setPassword = function(password) {
  this.password = password;
};


/**
 * The user key provided by the server so as not to require further username/password authentication.
 *
 * @return {String} The user key provided by the server so as not to require further username/password authentication.
 */
SignonRequest.prototype.getUserKey = function() {
  return this.userKey;
};
Element.add(SignonRequest, {name: "USERKEY", order: 30, attributeType: String, readMethod: "getUserKey", writeMethod: "setUserKey"});


/**
 * The user key provided by the server so as not to require further username/password authentication.
 *
 * @param {String} userKey The user key provided by the server so as not to require further username/password authentication.
 */
SignonRequest.prototype.setUserKey = function(userKey) {
  this.userKey = userKey;
};


/**
 * Whether to request the server to generate a user key.
 *
 * @return {Boolean} Whether to request the server to generate a user key.
 */
SignonRequest.prototype.getGenerateUserKey = function() {
  return this.generateUserKey;
};
Element.add(SignonRequest, {name: "GENUSERKEY", order: 40, attributeType: Boolean, readMethod: "getGenerateUserKey", writeMethod: "setGenerateUserKey"});


/**
 * Whether to request the server to generate a user key.
 *
 * @param {Boolean} generateUserKey Whether to request the server to generate a user key.
 */
SignonRequest.prototype.setGenerateUserKey = function(generateUserKey) {
  this.generateUserKey = generateUserKey;
};


/**
 * The three-letter langauge code.
 *
 * @return {String} The three-letter langauge code.
 * @see java.util.Locale#getISO3Language()
 */
SignonRequest.prototype.getLanguage = function() {
  return this.language;
};
Element.add(SignonRequest, {name: "LANGUAGE", required: true, order: 50, attributeType: String, readMethod: "getLanguage", writeMethod: "setLanguage"});


/**
 * The three-letter langauge code.
 *
 * @param {String} language The three-letter langauge code.
 */
SignonRequest.prototype.setLanguage = function(language) {
  this.language = language;
};


/**
 * The financial institution.
 *
 * @return {FinancialInstitution} The financial institution.
 */
SignonRequest.prototype.getFinancialInstitution = function() {
  return this.financialInstitution;
};
ChildAggregate.add(SignonRequest, {order: 60, attributeType: FinancialInstitution, readMethod: "getFinancialInstitution", writeMethod: "setFinancialInstitution"});


/**
 * The financial institution.
 *
 * @param {FinancialInstitution} financialInstitution The financial institution.
 */
SignonRequest.prototype.setFinancialInstitution = function(financialInstitution) {
  this.financialInstitution = financialInstitution;
};


/**
 * The server-supplied session id.
 *
 * @return {String} The server-supplied session id.
 */
SignonRequest.prototype.getSessionId = function() {
  return this.sessionId;
};
Element.add(SignonRequest, {name: "SESSCOOKIE", order: 70, attributeType: String, readMethod: "getSessionId", writeMethod: "setSessionId"});


/**
 * The server-supplied session id.
 *
 * @param {String} sessionId The server-supplied session id.
 */
SignonRequest.prototype.setSessionId = function(sessionId) {
  this.sessionId = sessionId;
};


/**
 * The application id.
 *
 * @return {String} The application id.
 */
SignonRequest.prototype.getApplicationId = function() {
  return this.applicationId;
};
Element.add(SignonRequest, {name: "APPID", required: true, order: 80, attributeType: String, readMethod: "getApplicationId", writeMethod: "setApplicationId"});


/**
 * The application id.
 *
 * @param {String} applicationId The application id.
 */
SignonRequest.prototype.setApplicationId = function(applicationId) {
  this.applicationId = applicationId;
};


/**
 * The application version.
 *
 * @return {String} The application version.
 */
SignonRequest.prototype.getApplicationVersion = function() {
  return this.applicationVersion;
};
Element.add(SignonRequest, {name: "APPVER", required: true, order: 90, attributeType: String, readMethod: "getApplicationVersion", writeMethod: "setApplicationVersion"});


/**
 * The application version.
 *
 * @param {String} applicationVersion The application version.
 */
SignonRequest.prototype.setApplicationVersion = function(applicationVersion) {
  this.applicationVersion = applicationVersion;
};


/**
 * The client-supplied UID.
 *
 * @return {String} The client-supplied UID.
 */
SignonRequest.prototype.getClientUID = function() {
  return this.clientUID;
};
Element.add(SignonRequest, {name: "CLIENTUID", order: 100, attributeType: String, readMethod: "getClientUID", writeMethod: "setClientUID"});


/**
 * The client-supplied UID.
 *
 * @param {String} clientUID The client-supplied UID.
 */
SignonRequest.prototype.setClientUID = function(clientUID) {
  this.clientUID = clientUID;
};


/**
 * Any additional credentials.
 *
 * @return {String} Any additional credentials.
 */
SignonRequest.prototype.getAdditionalCredentials1 = function() {
  return this.additionalCredentials1;
};
Element.add(SignonRequest, {name: "USERCRED1", order: 110, attributeType: String, readMethod: "getAdditionalCredentials1", writeMethod: "setAdditionalCredentials1"});


/**
 * Any additional credentials.
 *
 * @param {String} additionalCredentials1 Any additional credentials.
 */
SignonRequest.prototype.setAdditionalCredentials1 = function(additionalCredentials1) {
  this.additionalCredentials1 = additionalCredentials1;
};


/**
 * Any additional credentials.
 *
 * @return {String} Any additional credentials.
 */
SignonRequest.prototype.getAdditionalCredentials2 = function() {
  return this.additionalCredentials2;
};
Element.add(SignonRequest, {name: "USERCRED2", order: 120, attributeType: String, readMethod: "getAdditionalCredentials2", writeMethod: "setAdditionalCredentials2"});


/**
 * Any additional credentials.
 *
 * @param {String} additionalCredentials2 Any additional credentials.
 */
SignonRequest.prototype.setAdditionalCredentials2 = function(additionalCredentials2) {
  this.additionalCredentials2 = additionalCredentials2;
};


/**
 * The authentication token.
 *
 * @return {String} The authentication token.
 */
SignonRequest.prototype.getAuthToken = function() {
  return this.authToken;
};
Element.add(SignonRequest, {name: "AUTHTOKEN", order: 130, attributeType: String, readMethod: "getAuthToken", writeMethod: "setAuthToken"});


/**
 * The authentication token.
 *
 * @param {String} authToken The authentication token.
 */
SignonRequest.prototype.setAuthToken = function(authToken) {
  this.authToken = authToken;
};


/**
 * The access key.
 *
 * @return {String} The access key.
 */
SignonRequest.prototype.getAccessKey = function() {
  return this.accessKey;
};
Element.add(SignonRequest, {name: "ACCESSKEY", order: 140, attributeType: String, readMethod: "getAccessKey", writeMethod: "setAccessKey"});


/**
 * The access key.
 *
 * @param {String} accessKey The access key.
 */
SignonRequest.prototype.setAccessKey = function(accessKey) {
  this.accessKey = accessKey;
};




module.exports = SignonRequest;

},{"../../../client/FinancialInstitution":"/Users/aolson/Developer/ofx4js/src/client/FinancialInstitution.js","../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../RequestMessage":"/Users/aolson/Developer/ofx4js/src/domain/data/RequestMessage.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/signon/SignonRequestMessageSet.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var MessageSetType = require("../MessageSetType");
var RequestMessageSet = require("../RequestMessageSet");
var ChildAggregate = require("../../../meta/ChildAggregate");
var Aggregate = require("../../../meta/Aggregate");
var SignonRequest = require("./SignonRequest");
var PasswordChangeRequestTransaction = require("./PasswordChangeRequestTransaction");

/**
 * The sign-on request message set.
 *
 * @class
 * @augments RequestMessageSet
 * @see "Section 2.5, OFX Spec."
 */
function SignonRequestMessageSet () {

  /**
   * @name SignonRequestMessageSet#signonRequest
   * @type SignonRequest
   * @access private
   */
  this.signonRequest = null;

  /**
   * @name SignonRequestMessageSet#passwordChangeRequest
   * @type PasswordChangeRequestTransaction
   * @access private
   */
  this.passwordChangeRequest = null;
}

inherit(SignonRequestMessageSet, "extends", RequestMessageSet);


Aggregate.add("SIGNONMSGSRQV1", SignonRequestMessageSet);


SignonRequestMessageSet.prototype.getType = function() {
  return MessageSetType.signon;
};


/**
 * The message for this message set.
 *
 * @return {SignonRequest} The message for this message set.
 */
SignonRequestMessageSet.prototype.getSignonRequest = function() {
  return this.signonRequest;
};
ChildAggregate.add(SignonRequestMessageSet, {required: true, order: 0, attributeType: SignonRequest, readMethod: "getSignonRequest", writeMethod: "setSignonRequest"});


/**
 * The message for this message set.
 *
 * @param {SignonRequest} signonRequest The message for this message set.
 */
SignonRequestMessageSet.prototype.setSignonRequest = function(signonRequest) {
  this.signonRequest = signonRequest;
};


/**
 * The password change request.
 *
 * @return {PasswordChangeRequestTransaction} The password change request.
 */
SignonRequestMessageSet.prototype.getPasswordChangeRequest = function() {
  return this.passwordChangeRequest;
};
ChildAggregate.add(SignonRequestMessageSet, {order: 10, attributeType: PasswordChangeRequestTransaction, readMethod: "getPasswordChangeRequest", writeMethod: "setPasswordChangeRequest"});


/**
 * The password change request.
 *
 * @param {PasswordChangeRequestTransaction} passwordChangeRequest The password change request.
 */
SignonRequestMessageSet.prototype.setPasswordChangeRequest = function(passwordChangeRequest) {
  this.passwordChangeRequest = passwordChangeRequest;
};


//todo: challenge request/response
// Inherited.
SignonRequestMessageSet.prototype.getRequestMessages = function() {
  var requestMessages = [];

  if (this.getSignonRequest() !== null) {
    requestMessages.push(this.getSignonRequest());
  }

  if (this.getPasswordChangeRequest() !== null) {
    requestMessages.this(this.getPasswordChangeRequest());
  }

  return requestMessages;
};




module.exports = SignonRequestMessageSet;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../MessageSetType":"/Users/aolson/Developer/ofx4js/src/domain/data/MessageSetType.js","../RequestMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/RequestMessageSet.js","./PasswordChangeRequestTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/signon/PasswordChangeRequestTransaction.js","./SignonRequest":"/Users/aolson/Developer/ofx4js/src/domain/data/signon/SignonRequest.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/signon/SignonResponse.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var StatusHolder = require("../common/StatusHolder");
var ResponseMessage = require("../ResponseMessage");
var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");
var Element = require("../../../meta/Element");
var Status = require("../common/Status");
var FinancialInstitution = require("./FinancialInstitution");

/**
 * The signon response message.
 *
 * @class
 * @augments ResponseMessage
 * @augments StatusHolder
 * @see "Section 2.5.1.2, OFX Spec."
 */
function SignonResponse () {

  /**
   * @name SignonResponse#status
   * @type Status
   * @access private
   */
  this.status = null;

  /**
   * @name SignonResponse#timestamp
   * @type Date
   * @access private
   */
  this.timestamp = null;

  /**
   * @name SignonResponse#userKey
   * @type String
   * @access private
   */
  this.userKey = null;

  /**
   * @name SignonResponse#userKeyExpiration
   * @type Date
   * @access private
   */
  this.userKeyExpiration = null;

  /**
   * @name SignonResponse#language
   * @type String
   * @access private
   */
  this.language = "eng";

  /**
   * @name SignonResponse#profileLastUpdated
   * @type Date
   * @access private
   */
  this.profileLastUpdated = null;

  /**
   * @name SignonResponse#accountLastUpdated
   * @type Date
   * @access private
   */
  this.accountLastUpdated = null;

  /**
   * @name SignonResponse#financialInstitution
   * @type FinancialInstitution
   * @access private
   */
  this.financialInstitution = null;

  /**
   * @name SignonResponse#sessionId
   * @type String
   * @access private
   */
  this.sessionId = null;

  /**
   * @name SignonResponse#accessKey
   * @type String
   * @access private
   */
  this.accessKey = null;
}

inherit(SignonResponse, "extends", ResponseMessage);
inherit(SignonResponse, "implements", StatusHolder);


Aggregate.add("SONRS", SignonResponse);


SignonResponse.prototype.getResponseMessageName = function() {
  return "signon";
};


SignonResponse.prototype.getStatusHolderName = function() {
  return this.getResponseMessageName();
};


/**
 * The signon response status.
 *
 * @return {Status} The signon response status.
 */
SignonResponse.prototype.getStatus = function() {
  return this.status;
};
ChildAggregate.add(SignonResponse, {required: true, order: 0, attributeType: Status, readMethod: "getStatus", writeMethod: "setStatus"});


/**
 * The signon response status.
 *
 * @param {Status} status The signon response status.
 */
SignonResponse.prototype.setStatus = function(status) {
  this.status = status;
};


/**
 * The timestamp of this response.
 *
 * @return {Date} The timestamp of this response.
 */
SignonResponse.prototype.getTimestamp = function() {
  return this.timestamp;
};
Element.add(SignonResponse, {name: "DTSERVER", required: true, order: 10, attributeType: Date, readMethod: "getTimestamp", writeMethod: "setTimestamp"});


/**
 * The timestamp of this response.
 *
 * @param {Date} timestamp The timestamp of this response.
 */
SignonResponse.prototype.setTimestamp = function(timestamp) {
  this.timestamp = timestamp;
};


/**
 * The userkey that can be used instead of the username/password.
 *
 * @return {String} The userkey that can be used instead of the username/password.
 */
SignonResponse.prototype.getUserKey = function() {
  return this.userKey;
};
Element.add(SignonResponse, {name: "USERKEY", order: 20, attributeType: String, readMethod: "getUserKey", writeMethod: "setUserKey"});


/**
 * The userkey that can be used instead of the username/password.
 *
 * @param {String} userKey The userkey that can be used instead of the username/password.
 */
SignonResponse.prototype.setUserKey = function(userKey) {
  this.userKey = userKey;
};


/**
 * The date/time of the expiration of the user key.
 *
 * @return {Date} The date/time of the expiration of the user key.
 */
SignonResponse.prototype.getUserKeyExpiration = function() {
  return this.userKeyExpiration;
};
Element.add(SignonResponse, {name: "TSKEYEXPIRE", order: 30, attributeType: Date, readMethod: "getUserKeyExpiration", writeMethod: "setUserKeyExpiration"});


/**
 * The date/time of the expiration of the user key.
 *
 * @param {Date} userKeyExpiration The date/time of the expiration of the user key.
 */
SignonResponse.prototype.setUserKeyExpiration = function(userKeyExpiration) {
  this.userKeyExpiration = userKeyExpiration;
};


/**
 * The three-letter langauge code.
 *
 * @return {String} The three-letter langauge code.
 * @see java.util.Locale#getISO3Language()
 */
SignonResponse.prototype.getLanguage = function() {
  return this.language;
};
Element.add(SignonResponse, {name: "LANGUAGE", required: true, order: 40, attributeType: String, readMethod: "getLanguage", writeMethod: "setLanguage"});


/**
 * The three-letter langauge code.
 *
 * @param {String} language The three-letter langauge code.
 */
SignonResponse.prototype.setLanguage = function(language) {
  this.language = language;
};


/**
 * The date/time that the FI profile was last updated.
 *
 * @return {Date} The date/time that the FI profile was last updated.
 */
SignonResponse.prototype.getProfileLastUpdated = function() {
  return this.profileLastUpdated;
};
Element.add(SignonResponse, {name: "DTPROFUP", order: 50, attributeType: Date, readMethod: "getProfileLastUpdated", writeMethod: "setProfileLastUpdated"});


/**
 * The date/time that the FI profile was last updated.
 *
 * @param {Date} profileLastUpdated The date/time that the FI profile was last updated.
 */
SignonResponse.prototype.setProfileLastUpdated = function(profileLastUpdated) {
  this.profileLastUpdated = profileLastUpdated;
};


/**
 * The date/time that the user's account information was updated.
 *
 * @return {Date} The date/time that the user's account information was updated.
 */
SignonResponse.prototype.getAccountLastUpdated = function() {
  return this.accountLastUpdated;
};
Element.add(SignonResponse, {name: "DTACCTUP", order: 60, attributeType: Date, readMethod: "getAccountLastUpdated", writeMethod: "setAccountLastUpdated"});


/**
 * The date/time that the user's account information was updated.
 *
 * @param {Date} accountLastUpdated The date/time that the user's account information was updated.
 */
SignonResponse.prototype.setAccountLastUpdated = function(accountLastUpdated) {
  this.accountLastUpdated = accountLastUpdated;
};


/**
 * The financial instutution identity information.
 *
 * @return {FinancialInstitution} The financial instutution identity information.
 */
SignonResponse.prototype.getFinancialInstitution = function() {
  return this.financialInstitution;
};
ChildAggregate.add(SignonResponse, {order: 70, attributeType: FinancialInstitution, readMethod: "getFinancialInstitution", writeMethod: "setFinancialInstitution"});


/**
 * The financial instutution identity information.
 *
 * @param {FinancialInstitution} financialInstitution The financial instutution identity information.
 */
SignonResponse.prototype.setFinancialInstitution = function(financialInstitution) {
  this.financialInstitution = financialInstitution;
};


/**
 * The session id for the client.
 *
 * @return {String} The session id for the client.
 */
SignonResponse.prototype.getSessionId = function() {
  return this.sessionId;
};
Element.add(SignonResponse, {name: "SESSCOOKIE", order: 80, attributeType: String, readMethod: "getSessionId", writeMethod: "setSessionId"});


/**
 * The session id for the client.
 *
 * @param {String} sessionId The session id for the client.
 */
SignonResponse.prototype.setSessionId = function(sessionId) {
  this.sessionId = sessionId;
};


/**
 * The access key that the client should return in the next sign-on requuest.
 *
 * @return {String} The access key that the client should return in the next sign-on requuest.
 */
SignonResponse.prototype.getAccessKey = function() {
  return this.accessKey;
};
Element.add(SignonResponse, {name: "ACCESSKEY", order: 90, attributeType: String, readMethod: "getAccessKey", writeMethod: "setAccessKey"});


/**
 * The access key that the client should return in the next sign-on requuest.
 *
 * @param {String} accessKey The access key that the client should return in the next sign-on requuest.
 */
SignonResponse.prototype.setAccessKey = function(accessKey) {
  this.accessKey = accessKey;
};




module.exports = SignonResponse;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../ResponseMessage":"/Users/aolson/Developer/ofx4js/src/domain/data/ResponseMessage.js","../common/Status":"/Users/aolson/Developer/ofx4js/src/domain/data/common/Status.js","../common/StatusHolder":"/Users/aolson/Developer/ofx4js/src/domain/data/common/StatusHolder.js","./FinancialInstitution":"/Users/aolson/Developer/ofx4js/src/domain/data/signon/FinancialInstitution.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/signon/SignonResponseMessageSet.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var MessageSetType = require("../MessageSetType");
var ResponseMessageSet = require("../ResponseMessageSet");
var ChildAggregate = require("../../../meta/ChildAggregate");
var Aggregate = require("../../../meta/Aggregate");
var SignonResponse = require("./SignonResponse");
var PasswordChangeResponseTransaction = require("./PasswordChangeResponseTransaction");

/**
 * The sign-on response message set.
 *
 * @class
 * @augments ResponseMessageSet
 * @see "Section 2.5, OFX Spec."
 */
function SignonResponseMessageSet () {

  /**
   * @name SignonResponseMessageSet#signonResponse
   * @type SignonResponse
   * @access private
   */
  this.signonResponse = null;

  /**
   * @name SignonResponseMessageSet#passwordChangeResponse
   * @type PasswordChangeResponseTransaction
   * @access private
   */
  this.passwordChangeResponse = null;
}

inherit(SignonResponseMessageSet, "extends", ResponseMessageSet);


Aggregate.add("SIGNONMSGSRSV1", SignonResponseMessageSet);


SignonResponseMessageSet.prototype.getType = function() {
  return MessageSetType.signon;
};


/**
 * The message for this message set.
 *
 * @return {SignonResponse} The message for this message set.
 */
SignonResponseMessageSet.prototype.getSignonResponse = function() {
  return this.signonResponse;
};
ChildAggregate.add(SignonResponseMessageSet, {order: 0, attributeType: SignonResponse, readMethod: "getSignonResponse", writeMethod: "setSignonResponse"});


/**
 * The message for this message set.
 *
 * @param {SignonResponse} signonResponse The message for this message set.
 */
SignonResponseMessageSet.prototype.setSignonResponse = function(signonResponse) {
  this.signonResponse = signonResponse;
};


/**
 * The password change response.
 *
 * @return {PasswordChangeResponseTransaction} The password change response.
 */
SignonResponseMessageSet.prototype.getPasswordChangeResponse = function() {
  return this.passwordChangeResponse;
};
ChildAggregate.add(SignonResponseMessageSet, {order: 10, attributeType: PasswordChangeResponseTransaction, readMethod: "getPasswordChangeResponse", writeMethod: "setPasswordChangeResponse"});


/**
 * The password change response.
 *
 * @param {PasswordChangeResponseTransaction} passwordChangeResponse The password change response.
 */
SignonResponseMessageSet.prototype.setPasswordChangeResponse = function(passwordChangeResponse) {
  this.passwordChangeResponse = passwordChangeResponse;
};


//todo: challenge request/response
// Inherited.
SignonResponseMessageSet.prototype.getResponseMessages = function() {
  var messages = [];

  if (this.getSignonResponse() !== null) {
    messages.push(this.getSignonResponse());
  }

  return messages;
};




module.exports = SignonResponseMessageSet;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../MessageSetType":"/Users/aolson/Developer/ofx4js/src/domain/data/MessageSetType.js","../ResponseMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/ResponseMessageSet.js","./PasswordChangeResponseTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/signon/PasswordChangeResponseTransaction.js","./SignonResponse":"/Users/aolson/Developer/ofx4js/src/domain/data/signon/SignonResponse.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/signon/index.js":[function(require,module,exports){
"use strict";

module.exports = {
  FinancialInstitution: require("./FinancialInstitution"),
  PasswordChangeRequest: require("./PasswordChangeRequest"),
  PasswordChangeRequestTransaction: require("./PasswordChangeRequestTransaction"),
  PasswordChangeResponse: require("./PasswordChangeResponse"),
  PasswordChangeResponseTransaction: require("./PasswordChangeResponseTransaction"),
  SignonRequest: require("./SignonRequest"),
  SignonRequestMessageSet: require("./SignonRequestMessageSet"),
  SignonResponse: require("./SignonResponse"),
  SignonResponseMessageSet: require("./SignonResponseMessageSet"),
};

},{"./FinancialInstitution":"/Users/aolson/Developer/ofx4js/src/domain/data/signon/FinancialInstitution.js","./PasswordChangeRequest":"/Users/aolson/Developer/ofx4js/src/domain/data/signon/PasswordChangeRequest.js","./PasswordChangeRequestTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/signon/PasswordChangeRequestTransaction.js","./PasswordChangeResponse":"/Users/aolson/Developer/ofx4js/src/domain/data/signon/PasswordChangeResponse.js","./PasswordChangeResponseTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/signon/PasswordChangeResponseTransaction.js","./SignonRequest":"/Users/aolson/Developer/ofx4js/src/domain/data/signon/SignonRequest.js","./SignonRequestMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/signon/SignonRequestMessageSet.js","./SignonResponse":"/Users/aolson/Developer/ofx4js/src/domain/data/signon/SignonResponse.js","./SignonResponseMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/signon/SignonResponseMessageSet.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/signup/AccountInfoRequest.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var RequestMessage = require("../RequestMessage");
var Aggregate = require("../../../meta/Aggregate");
var Element = require("../../../meta/Element");

/**
 * @class
 * @augments RequestMessage
 */
function AccountInfoRequest () {

  /**
   * @name AccountInfoRequest#lastUpdated
   * @type Date
   * @access private
   */
  this.lastUpdated = new Date(0);
}

inherit(AccountInfoRequest, "extends", RequestMessage);


Aggregate.add("ACCTINFORQ", AccountInfoRequest);


/**
 * When the account info was last updated.
 *
 * @return {Date} When the account info was last updated.
 */
AccountInfoRequest.prototype.getLastUpdated = function() {
  return this.lastUpdated;
};
Element.add(AccountInfoRequest, {name: "DTACCTUP", required: true, order: 0, attributeType: Date, readMethod: "getLastUpdated", writeMethod: "setLastUpdated"});


/**
 * When the account info was last updated.
 *
 * @param {Date} lastUpdated When the account info was last updated.
 */
AccountInfoRequest.prototype.setLastUpdated = function(lastUpdated) {
  this.lastUpdated = lastUpdated;
};




module.exports = AccountInfoRequest;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../RequestMessage":"/Users/aolson/Developer/ofx4js/src/domain/data/RequestMessage.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/signup/AccountInfoRequestTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var TransactionWrappedRequestMessage = require("../TransactionWrappedRequestMessage");
var ChildAggregate = require("../../../meta/ChildAggregate");
var Aggregate = require("../../../meta/Aggregate");
var AccountInfoRequest = require("./AccountInfoRequest");

/**
 * @class
 * @augments TransactionWrappedRequestMessage
 */
function AccountInfoRequestTransaction () {

  /**
   * @name AccountInfoRequestTransaction#message
   * @type AccountInfoRequest
   * @access private
   */
  this.message = null;
}

inherit(AccountInfoRequestTransaction, "extends", new TransactionWrappedRequestMessage(AccountInfoRequest));


Aggregate.add("ACCTINFOTRNRQ", AccountInfoRequestTransaction);


/**
 * The wrapped message.
 *
 * @return {AccountInfoRequest} The wrapped message.
 */
AccountInfoRequestTransaction.prototype.getMessage = function() {
  return this.message;
};
ChildAggregate.add(AccountInfoRequestTransaction, {required: true, order: 30, attributeType: AccountInfoRequest, readMethod: "getMessage", writeMethod: "setMessage"});


/**
 * The wrapped message.
 *
 * @param {AccountInfoRequest} message The wrapped message.
 */
AccountInfoRequestTransaction.prototype.setMessage = function(message) {
  this.message = message;
};


// Inherited.
AccountInfoRequestTransaction.prototype.setWrappedMessage = function(/*AccountInfoRequest*/ message) {
  this.setMessage(message);
};




module.exports = AccountInfoRequestTransaction;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../TransactionWrappedRequestMessage":"/Users/aolson/Developer/ofx4js/src/domain/data/TransactionWrappedRequestMessage.js","./AccountInfoRequest":"/Users/aolson/Developer/ofx4js/src/domain/data/signup/AccountInfoRequest.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/signup/AccountInfoResponse.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");
var AccountProfile = require("./AccountProfile");
var ResponseMessage = require("../ResponseMessage");
var Aggregate = require("../../../meta/Aggregate");
var Element = require("../../../meta/Element");
var ChildAggregate = require("../../../meta/ChildAggregate");

/**
 * @class
 * @augments ResponseMessage
 */
function AccountInfoResponse () {

  /**
   * @name AccountInfoResponse#lastUpdated
   * @type Date
   * @access private
   */
  this.lastUpdated = new Date(0);

  /**
   * @name AccountInfoResponse#accounts
   * @type Collection<AccountProfile>
   * @access private
   */
  this.accounts = null;
}

inherit(AccountInfoResponse, "extends", ResponseMessage);


Aggregate.add("ACCTINFORS", AccountInfoResponse);


AccountInfoResponse.prototype.getResponseMessageName = function() {
  return "account info";
};


/**
 * When the account info was last updated.
 *
 * @return {Date} When the account info was last updated.
 */
AccountInfoResponse.prototype.getLastUpdated = function() {
  return this.lastUpdated;
};
Element.add(AccountInfoResponse, {name: "DTACCTUP", required: true, order: 0, attributeType: Date, readMethod: "getLastUpdated", writeMethod: "setLastUpdated"});


/**
 * When the account info was last updated.
 *
 * @param {Date} lastUpdated When the account info was last updated.
 */
AccountInfoResponse.prototype.setLastUpdated = function(lastUpdated) {
  this.lastUpdated = lastUpdated;
};


/**
 * The accounts.
 *
 * @return {Collection<AccountProfile>} The accounts.
 */
AccountInfoResponse.prototype.getAccounts = function() {
  return this.accounts;
};
ChildAggregate.add(AccountInfoResponse, {order: 10, attributeType: Array, collectionEntryType: AccountProfile, readMethod: "getAccounts", writeMethod: "setAccounts"});


/**
 * The accounts.
 *
 * @param {Collection<AccountProfile>} accounts The accounts.
 */
AccountInfoResponse.prototype.setAccounts = function(accounts) {
  this.accounts = accounts;
};




module.exports = AccountInfoResponse;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../ResponseMessage":"/Users/aolson/Developer/ofx4js/src/domain/data/ResponseMessage.js","./AccountProfile":"/Users/aolson/Developer/ofx4js/src/domain/data/signup/AccountProfile.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/signup/AccountInfoResponseTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var TransactionWrappedResponseMessage = require("../TransactionWrappedResponseMessage");
var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");
var AccountInfoResponse = require("./AccountInfoResponse");

/**
 * @class
 * @augments TransactionWrappedResponseMessage
 */
function AccountInfoResponseTransaction () {

  /**
   * @name AccountInfoResponseTransaction#message
   * @type AccountInfoResponse
   * @access private
   */
  this.message = null;
}

inherit(AccountInfoResponseTransaction, "extends", new TransactionWrappedResponseMessage(AccountInfoResponse));


Aggregate.add("ACCTINFOTRNRS", AccountInfoResponseTransaction);


/**
 * The wrapped message.
 *
 * @return {AccountInfoResponse} The wrapped message.
 */
AccountInfoResponseTransaction.prototype.getMessage = function() {
  return this.message;
};
ChildAggregate.add(AccountInfoResponseTransaction, {required: true, order: 30, attributeType: AccountInfoResponse, readMethod: "getMessage", writeMethod: "setMessage"});


/**
 * The wrapped message.
 *
 * @param {AccountInfoResponse} message The wrapped message.
 */
AccountInfoResponseTransaction.prototype.setMessage = function(message) {
  this.message = message;
};


// Inherited.
AccountInfoResponseTransaction.prototype.getWrappedMessage = function() {
  return this.getMessage();
};




module.exports = AccountInfoResponseTransaction;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../TransactionWrappedResponseMessage":"/Users/aolson/Developer/ofx4js/src/domain/data/TransactionWrappedResponseMessage.js","./AccountInfoResponse":"/Users/aolson/Developer/ofx4js/src/domain/data/signup/AccountInfoResponse.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/signup/AccountProfile.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var InvestmentAccountInfo = require("../investment/accounts/InvestmentAccountInfo");
var Aggregate = require("../../../meta/Aggregate");
var Element = require("../../../meta/Element");
var ChildAggregate = require("../../../meta/ChildAggregate");
var BankAccountInfo = require("../banking/BankAccountInfo");
var CreditCardAccountInfo = require("../creditcard/CreditCardAccountInfo");

/**
 * @class
 */
function AccountProfile () {

  /**
   * @name AccountProfile#description
   * @type String
   * @access private
   */
  this.description = null;

  /**
   * @name AccountProfile#phone
   * @type String
   * @access private
   */
  this.phone = null;

  /**
   * @name AccountProfile#bankSpecifics
   * @type BankAccountInfo
   * @access private
   */
  this.bankSpecifics = null;

  /**
   * @name AccountProfile#creditCardSpecifics
   * @type CreditCardAccountInfo
   * @access private
   */
  this.creditCardSpecifics = null;

  /**
   * @name AccountProfile#investSpecifics
   * @type InvestmentAccountInfo
   * @access private
   */
  this.investSpecifics = null;
}



Aggregate.add("ACCTINFO", AccountProfile);


/**
 * Description of the account.
 *
 * @return {String} The description of the account.
 */
AccountProfile.prototype.getDescription = function() {
  return this.description;
};
Element.add(AccountProfile, {name: "DESC", order: 0, attributeType: String, readMethod: "getDescription", writeMethod: "setDescription"});


/**
 * The description of the account.
 *
 * @param {String} description The description of the account.
 */
AccountProfile.prototype.setDescription = function(description) {
  this.description = description;
};


/**
 * Phone number for the account.
 *
 * @return {String} Phone number for the account.
 */
AccountProfile.prototype.getPhone = function() {
  return this.phone;
};
Element.add(AccountProfile, {name: "PHONE", order: 10, attributeType: String, readMethod: "getPhone", writeMethod: "setPhone"});


/**
 * Phone number for the account.
 *
 * @param {String} phone Phone number for the account.
 */
AccountProfile.prototype.setPhone = function(phone) {
  this.phone = phone;
};


/**
 * Account specifics.
 *
 * @return {net.sf.ofx4j.domain.data.common.AccountInfo} Account specifics.
 */
AccountProfile.prototype.getSpecifics = function() {
  if (this.getBankSpecifics() !== null && this.getCreditCardSpecifics() !== null) {
    throw new Error("Only one account specifics aggregate can be set at a time.");
  }
  else if (this.getBankSpecifics() !== null) {
    return this.getBankSpecifics();
  } else if (this.getInvestmentSpecifics() !== null) {
    return this.getInvestmentSpecifics();
  }
  else {
    return this.getCreditCardSpecifics();
  }
};


/**
 * Account specifics.
 *
 * @param {net.sf.ofx4j.domain.data.common.AccountInfo} specifics Account specifics.
 */
AccountProfile.prototype.setSpecifics = function(specifics) {
  if (specifics instanceof BankAccountInfo) {
    this.setBankSpecifics(specifics);
  }
  else if (specifics instanceof CreditCardAccountInfo) {
    this.setCreditCardSpecifics(specifics);
  } else if (specifics instanceof InvestmentAccountInfo) {
    this.setInvestmentSpecifics(specifics);
  }
  else {
    throw new Error("Unknown specifics type: " + specifics);
  }
};


/**
 * Bank-specific info.
 *
 * @return {BankAccountInfo} Bank-specific info.
 */
AccountProfile.prototype.getBankSpecifics = function() {
  return this.bankSpecifics;
};
ChildAggregate.add(AccountProfile, {order: 20, attributeType: BankAccountInfo, readMethod: "getBankSpecifics", writeMethod: "setBankSpecifics"});


/**
 * Bank-specific info.
 *
 * @param {BankAccountInfo} bankSpecifics Bank-specific info.
 */
AccountProfile.prototype.setBankSpecifics = function(bankSpecifics) {
  this.creditCardSpecifics = null;
  this.investSpecifics = null;
  this.bankSpecifics = bankSpecifics;
};


/**
 * Credit-card account info.
 *
 * @return {CreditCardAccountInfo} Credit-card account info.
 */
AccountProfile.prototype.getCreditCardSpecifics = function() {
  return this.creditCardSpecifics;
};
ChildAggregate.add(AccountProfile, {order: 30, attributeType: CreditCardAccountInfo, readMethod: "getCreditCardSpecifics", writeMethod: "setCreditCardSpecifics"});


/**
 * Credit-card account info.
 *
 * @param {CreditCardAccountInfo} creditCardSpecifics Credit-card account info.
 */
AccountProfile.prototype.setCreditCardSpecifics = function(creditCardSpecifics) {
  this.bankSpecifics = null;
  this.investSpecifics = null;
  this.creditCardSpecifics = creditCardSpecifics;
};


/**
 * Investment account info.
 *
 * @return {InvestmentAccountInfo} Investment account info.
 */
AccountProfile.prototype.getInvestmentSpecifics = function() {
  return this.investSpecifics;
};
ChildAggregate.add(AccountProfile, {order: 40, attributeType: InvestmentAccountInfo, readMethod: "getInvestmentSpecifics", writeMethod: "setInvestmentSpecifics"});


/**
 * Investment account info.
 *
 * @param {InvestmentAccountInfo} investSpecifics Investment account info.
 */
AccountProfile.prototype.setInvestmentSpecifics = function(investSpecifics) {
  this.bankSpecifics = null;
  this.creditCardSpecifics = null;
  this.investSpecifics = investSpecifics;
};




module.exports = AccountProfile;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../banking/BankAccountInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/banking/BankAccountInfo.js","../creditcard/CreditCardAccountInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/creditcard/CreditCardAccountInfo.js","../investment/accounts/InvestmentAccountInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/investment/accounts/InvestmentAccountInfo.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/signup/SignupRequestMessageSet.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var RequestMessageSet = require("../RequestMessageSet");
var MessageSetType = require("../MessageSetType");
var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");
var AccountInfoRequestTransaction = require("./AccountInfoRequestTransaction");

/**
 * @class
 * @augments RequestMessageSet
 */
function SignupRequestMessageSet () {

  /**
   * @name SignupRequestMessageSet#accountInfoRequest
   * @type AccountInfoRequestTransaction
   * @access private
   */
  this.accountInfoRequest = null;
}

inherit(SignupRequestMessageSet, "extends", RequestMessageSet);


Aggregate.add("SIGNUPMSGSRQV1", SignupRequestMessageSet);


SignupRequestMessageSet.prototype.getType = function() {
  return MessageSetType.signup;
};


/**
 * The account info request.
 *
 * @return {AccountInfoRequestTransaction} The account info request.
 */
SignupRequestMessageSet.prototype.getAccountInfoRequest = function() {
  return this.accountInfoRequest;
};
ChildAggregate.add(SignupRequestMessageSet, {order: 0, attributeType: AccountInfoRequestTransaction, readMethod: "getAccountInfoRequest", writeMethod: "setAccountInfoRequest"});


/**
 * The account info request.
 *
 * @param {AccountInfoRequestTransaction} accountInfoRequest The account info request.
 */
SignupRequestMessageSet.prototype.setAccountInfoRequest = function(accountInfoRequest) {
  this.accountInfoRequest = accountInfoRequest;
};


/**
 * The request messages.
 *
 * @return {RequestMessage[]} The request messages.
 */
SignupRequestMessageSet.prototype.getRequestMessages = function() {
  var messages = [];

  if (this.getAccountInfoRequest() !== null) {
    messages.push(this.getAccountInfoRequest());
  }
  
  return messages;
};




module.exports = SignupRequestMessageSet;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../MessageSetType":"/Users/aolson/Developer/ofx4js/src/domain/data/MessageSetType.js","../RequestMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/RequestMessageSet.js","./AccountInfoRequestTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/signup/AccountInfoRequestTransaction.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/signup/SignupResponseMessageSet.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../../util/inherit");

var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");
var ResponseMessageSet = require("../ResponseMessageSet");
var MessageSetType = require("../MessageSetType");
var AccountInfoResponseTransaction = require("./AccountInfoResponseTransaction");

/**
 * @class
 * @augments ResponseMessageSet
 */
function SignupResponseMessageSet () {

  /**
   * @name SignupResponseMessageSet#accountInfoResponse
   * @type AccountInfoResponseTransaction
   * @access private
   */
  this.accountInfoResponse = null;
}

inherit(SignupResponseMessageSet, "extends", ResponseMessageSet);


Aggregate.add("SIGNUPMSGSRSV1", SignupResponseMessageSet);


SignupResponseMessageSet.prototype.getType = function() {
  return MessageSetType.signup;
};


/**
 * The account info response.
 *
 * @return {AccountInfoResponseTransaction} The account info response.
 */
SignupResponseMessageSet.prototype.getAccountInfoResponse = function() {
  return this.accountInfoResponse;
};
ChildAggregate.add(SignupResponseMessageSet, {order: 0, attributeType: AccountInfoResponseTransaction, readMethod: "getAccountInfoResponse", writeMethod: "setAccountInfoResponse"});


/**
 * The account info response.
 *
 * @param {AccountInfoResponseTransaction} accountInfoResponse The account info response.
 */
SignupResponseMessageSet.prototype.setAccountInfoResponse = function(accountInfoResponse) {
  this.accountInfoResponse = accountInfoResponse;
};


/**
 * The response messages.
 *
 * @return {ResponseMessage[]} The response messages.
 */
SignupResponseMessageSet.prototype.getResponseMessages = function() {
  var messages = [];

  if (this.getAccountInfoResponse() !== null) {
    messages.push(this.getAccountInfoResponse());
  }

  return messages;
};




module.exports = SignupResponseMessageSet;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../MessageSetType":"/Users/aolson/Developer/ofx4js/src/domain/data/MessageSetType.js","../ResponseMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/ResponseMessageSet.js","./AccountInfoResponseTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/signup/AccountInfoResponseTransaction.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/signup/index.js":[function(require,module,exports){
"use strict";

module.exports = {
  AccountInfoRequest: require("./AccountInfoRequest"),
  AccountInfoRequestTransaction: require("./AccountInfoRequestTransaction"),
  AccountInfoResponse: require("./AccountInfoResponse"),
  AccountInfoResponseTransaction: require("./AccountInfoResponseTransaction"),
  AccountProfile: require("./AccountProfile"),
  SignupRequestMessageSet: require("./SignupRequestMessageSet"),
  SignupResponseMessageSet: require("./SignupResponseMessageSet"),
};

},{"./AccountInfoRequest":"/Users/aolson/Developer/ofx4js/src/domain/data/signup/AccountInfoRequest.js","./AccountInfoRequestTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/signup/AccountInfoRequestTransaction.js","./AccountInfoResponse":"/Users/aolson/Developer/ofx4js/src/domain/data/signup/AccountInfoResponse.js","./AccountInfoResponseTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/signup/AccountInfoResponseTransaction.js","./AccountProfile":"/Users/aolson/Developer/ofx4js/src/domain/data/signup/AccountProfile.js","./SignupRequestMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/signup/SignupRequestMessageSet.js","./SignupResponseMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/signup/SignupResponseMessageSet.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/ExtDBInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";

var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");
var Element = require("../../../meta/Element");
var ProcDet = require("./ProcDet");

/**
 * @class
 */
function ExtDBInfo () {

  /**
   * @name ExtDBInfo#procDet
   * @type List<ProcDet>
   * @access private
   */
  this.procDet = null;

  /**
   * @name ExtDBInfo#teInterest
   * @type String
   * @access private
   */
  this.teInterest = null;

  /**
   * @name ExtDBInfo#pabInterest
   * @type String
   * @access private
   */
  this.pabInterest = null;

  /**
   * @name ExtDBInfo#teIntDividend
   * @type String
   * @access private
   */
  this.teIntDividend = null;

  /**
   * @name ExtDBInfo#pabDividend
   * @type String
   * @access private
   */
  this.pabDividend = null;
}



Aggregate.add("EXTDBINFO_V100", ExtDBInfo);


/**
 * @return {ProcDet[]} the procDet
 */
ExtDBInfo.prototype.getProcDet = function() {
  return this.procDet;
};
ChildAggregate.add(ExtDBInfo, {required:false, order: 0, attributeType: Array, collectionEntryType: ProcDet, readMethod: "getProcDet", writeMethod: "setProcDet"});


/**
 * @param {ProcDet[]} procDet the procDet to set
 */
ExtDBInfo.prototype.setProcDet = function(procDet) {
  this.procDet = procDet;
};


/**
 * @return {String} the teInterest
 */
ExtDBInfo.prototype.getTeInterest = function() {
  return this.teInterest;
};
Element.add(ExtDBInfo, {name: "TEINTEREST",required: false , order: 1, attributeType: String, readMethod: "getTeInterest", writeMethod: "setTeInterest"});


/**
 * @param {String} teInterest the teInterest to set
 */
ExtDBInfo.prototype.setTeInterest = function(teInterest) {
  this.teInterest = teInterest;
};


/**
 * @return {String} the pabInterest
 */
ExtDBInfo.prototype.getPabInterest = function() {
  return this.pabInterest;
};
Element.add(ExtDBInfo, {name: "PABINTEREST",required: false , order: 2, attributeType: String, readMethod: "getPabInterest", writeMethod: "setPabInterest"});


/**
 * @param {String} pabInterest the pabInterest to set
 */
ExtDBInfo.prototype.setPabInterest = function(pabInterest) {
  this.pabInterest = pabInterest;
};


/**
 * @return {String} the teIntDividend
 */
ExtDBInfo.prototype.getTeIntDividend = function() {
  return this.teIntDividend;
};
Element.add(ExtDBInfo, {name: "TEINTDIVIDEND",required: false , order: 3, attributeType: String, readMethod: "getTeIntDividend", writeMethod: "setTeIntDividend"});


/**
 * @param {String} teIntDividend the teIntDividend to set
 */
ExtDBInfo.prototype.setTeIntDividend = function(teIntDividend) {
  this.teIntDividend = teIntDividend;
};


/**
 * @return {String} the pabDividend
 */
ExtDBInfo.prototype.getPabDividend = function() {
  return this.pabDividend;
};
Element.add(ExtDBInfo, {name: "PABDIVIDEND",required: false , order: 4, attributeType: String, readMethod: "getPabDividend", writeMethod: "setPabDividend"});


/**
 * @param {String} pabDividend the pabDividend to set
 */
ExtDBInfo.prototype.setPabDividend = function(pabDividend) {
  this.pabDividend = pabDividend;
};




module.exports = ExtDBInfo;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","./ProcDet":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/ProcDet.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/PayerAddress.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";

var Aggregate = require("../../../meta/Aggregate");
var Element = require("../../../meta/Element");

/**
 * @class
 */
function PayerAddress () {

  /**
   * @name PayerAddress#payerName1
   * @type String
   * @access private
   */
  this.payerName1 = null;

  /**
   * @name PayerAddress#payerName2
   * @type String
   * @access private
   */
  this.payerName2 = null;

  /**
   * @name PayerAddress#address1
   * @type String
   * @access private
   */
  this.address1 = null;

  /**
   * @name PayerAddress#address2
   * @type String
   * @access private
   */
  this.address2 = null;

  /**
   * @name PayerAddress#city
   * @type String
   * @access private
   */
  this.city = null;

  /**
   * @name PayerAddress#state
   * @type String
   * @access private
   */
  this.state = null;

  /**
   * @name PayerAddress#postalCode
   * @type String
   * @access private
   */
  this.postalCode = null;

  /**
   * @name PayerAddress#phone
   * @type String
   * @access private
   */
  this.phone = null;
}



Aggregate.add("PAYERADDR", PayerAddress);


/**
 * @return {String} the payerName1
 */
PayerAddress.prototype.getPayerName1 = function() {
  return this.payerName1;
};
Element.add(PayerAddress, {name: "PAYERNAME1",required: true , order: 0, attributeType: String, readMethod: "getPayerName1", writeMethod: "setPayerName1"});


/**
 * @param {String} payerName1 the payerName1 to set
 */
PayerAddress.prototype.setPayerName1 = function(payerName1) {
  this.payerName1 = payerName1;
};


/**
 * @return {String} the payerName2
 */
PayerAddress.prototype.getPayerName2 = function() {
  return this.payerName2;
};
Element.add(PayerAddress, {name: "PAYERNAME2",required: false , order: 1, attributeType: String, readMethod: "getPayerName2", writeMethod: "setPayerName2"});


/**
 * @param {String} payerName2 the payerName2 to set
 */
PayerAddress.prototype.setPayerName2 = function(payerName2) {
  this.payerName2 = payerName2;
};


/**
 * @return {String} the address1
 */
PayerAddress.prototype.getAddress1 = function() {
  return this.address1;
};
Element.add(PayerAddress, {name: "ADDR1",required: true , order: 2, attributeType: String, readMethod: "getAddress1", writeMethod: "setAddress1"});


/**
 * @param {String} address1 the address1 to set
 */
PayerAddress.prototype.setAddress1 = function(address1) {
  this.address1 = address1;
};


/**
 * @return {String} the address2
 */
PayerAddress.prototype.getAddress2 = function() {
  return this.address2;
};
Element.add(PayerAddress, {name: "ADDR2",required: true , order: 3, attributeType: String, readMethod: "getAddress2", writeMethod: "setAddress2"});


/**
 * @param {String} address2 the address2 to set
 */
PayerAddress.prototype.setAddress2 = function(address2) {
  this.address2 = address2;
};


/**
 * @return {String} the city
 */
PayerAddress.prototype.getCity = function() {
  return this.city;
};
Element.add(PayerAddress, {name: "CITY",required: true , order: 4, attributeType: String, readMethod: "getCity", writeMethod: "setCity"});


/**
 * @param {String} city the city to set
 */
PayerAddress.prototype.setCity = function(city) {
  this.city = city;
};


/**
 * @return {String} the state
 */
PayerAddress.prototype.getState = function() {
  return this.state;
};
Element.add(PayerAddress, {name: "STATE",required: true , order: 5, attributeType: String, readMethod: "getState", writeMethod: "setState"});


/**
 * @param {String} state the state to set
 */
PayerAddress.prototype.setState = function(state) {
  this.state = state;
};


/**
 * @return {String} the postalCode
 */
PayerAddress.prototype.getPostalCode = function() {
  return this.postalCode;
};
Element.add(PayerAddress, {name: "POSTALCODE",required: true , order: 6, attributeType: String, readMethod: "getPostalCode", writeMethod: "setPostalCode"});


/**
 * @param {String} postalCode the postalCode to set
 */
PayerAddress.prototype.setPostalCode = function(postalCode) {
  this.postalCode = postalCode;
};


/**
 * @return {String} the phone
 */
PayerAddress.prototype.getPhone = function() {
  return this.phone;
};
Element.add(PayerAddress, {name: "PHONE",required: false , order: 7, attributeType: String, readMethod: "getPhone", writeMethod: "setPhone"});


/**
 * @param {String} phone the phone to set
 */
PayerAddress.prototype.setPhone = function(phone) {
  this.phone = phone;
};




module.exports = PayerAddress;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/ProcDet.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";

var Aggregate = require("../../../meta/Aggregate");
var Element = require("../../../meta/Element");

/**
 * @class
 */
function ProcDet () {

  /**
   * @name ProcDet#dtAqd
   * @type String
   * @access private
   */
  this.dtAqd = null;

  /**
   * @name ProcDet#dtSale
   * @type String
   * @access private
   */
  this.dtSale = null;

  /**
   * @name ProcDet#secName
   * @type String
   * @access private
   */
  this.secName = null;

  /**
   * @name ProcDet#costBasis
   * @type String
   * @access private
   */
  this.costBasis = null;

  /**
   * @name ProcDet#saleSpr
   * @type String
   * @access private
   */
  this.saleSpr = null;

  /**
   * @name ProcDet#longShort
   * @type String
   * @access private
   */
  this.longShort = null;

  /**
   * @name ProcDet#wasDisAllowed
   * @type String
   * @access private
   */
  this.wasDisAllowed = null;

  /**
   * @name ProcDet#noncoveredSec
   * @type String
   * @access private
   */
  this.noncoveredSec = null;

  /**
   * @name ProcDet#basisNotshown
   * @type String
   * @access private
   */
  this.basisNotshown = null;
}



Aggregate.add("PROCDET_V100", ProcDet);


/**
 * @return {String} the dtAqd
 */
ProcDet.prototype.getDtAqd = function() {
  return this.dtAqd;
};
Element.add(ProcDet, {name: "DTAQD", required: false, order: 0, attributeType: String, readMethod: "getDtAqd", writeMethod: "setDtAqd"});


/**
 * @param {String} dtAqd the dtAqd to set
 */
ProcDet.prototype.setDtAqd = function(dtAqd) {
  this.dtAqd = dtAqd;
};


/**
 * @return {String} the dtSale
 */
ProcDet.prototype.getDtSale = function() {
  return this.dtSale;
};
Element.add(ProcDet, {name: "DTSALE", required: false, order: 2, attributeType: String, readMethod: "getDtSale", writeMethod: "setDtSale"});


/**
 * @param {String} dtSale the dtSale to set
 */
ProcDet.prototype.setDtSale = function(dtSale) {
  this.dtSale = dtSale;
};


/**
 * @return {String} the secName
 */
ProcDet.prototype.getSecName = function() {
  return this.secName;
};
Element.add(ProcDet, {name: "SECNAME", required: false, order: 3, attributeType: String, readMethod: "getSecName", writeMethod: "setSecName"});


/**
 * @param {String} secName the secName to set
 */
ProcDet.prototype.setSecName = function(secName) {
  this.secName = secName;
};


/**
 * @return {String} the costBasis
 */
ProcDet.prototype.getCostBasis = function() {
  return this.costBasis;
};
Element.add(ProcDet, {name: "COSTBASIS", required: false, order: 4, attributeType: String, readMethod: "getCostBasis", writeMethod: "setCostBasis"});


/**
 * @param {String} costBasis the costBasis to set
 */
ProcDet.prototype.setCostBasis = function(costBasis) {
  this.costBasis = costBasis;
};


/**
 * @return {String} the saleSpr
 */
ProcDet.prototype.getSaleSpr = function() {
  return this.saleSpr;
};
Element.add(ProcDet, {name: "SALESPR", required: false, order: 5, attributeType: String, readMethod: "getSaleSpr", writeMethod: "setSaleSpr"});


/**
 * @param {String} saleSpr the saleSpr to set
 */
ProcDet.prototype.setSaleSpr = function(saleSpr) {
  this.saleSpr = saleSpr;
};


/**
 * @return {String} the longShort
 */
ProcDet.prototype.getLongShort = function() {
  return this.longShort;
};
Element.add(ProcDet, {name: "LONGSHORT", required: false, order: 6, attributeType: String, readMethod: "getLongShort", writeMethod: "setLongShort"});


/**
 * @param {String} longShort the longShort to set
 */
ProcDet.prototype.setLongShort = function(longShort) {
  this.longShort = longShort;
};


/**
 * @return {String} the wasDisAllowed
 */
ProcDet.prototype.getWasDisAllowed = function() {
  return this.wasDisAllowed;
};
Element.add(ProcDet, {name: "WASHSALELOSSDISALLOWED", required: false, order: 7, attributeType: String, readMethod: "getWasDisAllowed", writeMethod: "setWasDisAllowed"});


/**
 * @param {String} wasDisAllowed the wasDisAllowed to set
 */
ProcDet.prototype.setWasDisAllowed = function(wasDisAllowed) {
  this.wasDisAllowed = wasDisAllowed;
};


/**
 * @return {String} the noncoveredSec
 */
ProcDet.prototype.getNoncoveredSec = function() {
  return this.noncoveredSec;
};
Element.add(ProcDet, {name: "NONCOVEREDSECURITY", required: false, order: 8, attributeType: String, readMethod: "getNoncoveredSec", writeMethod: "setNoncoveredSec"});


/**
 * @param {String} noncoveredSec the noncoveredSec to set
 */
ProcDet.prototype.setNoncoveredSec = function(noncoveredSec) {
  this.noncoveredSec = noncoveredSec;
};


/**
 * @return {String} the basisNotshown
 */
ProcDet.prototype.getBasisNotshown = function() {
  return this.basisNotshown;
};
Element.add(ProcDet, {name: "BASISNOTSHOWN", required: false, order: 9, attributeType: String, readMethod: "getBasisNotshown", writeMethod: "setBasisNotshown"});


/**
 * @param {String} basisNotshown the basisNotshown to set
 */
ProcDet.prototype.setBasisNotshown = function(basisNotshown) {
  this.basisNotshown = basisNotshown;
};




module.exports = ProcDet;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/RecAddress.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";

var Aggregate = require("../../../meta/Aggregate");
var Element = require("../../../meta/Element");

/**
 * @class
 */
function RecAddress () {

  /**
   * @name RecAddress#recName1
   * @type String
   * @access private
   */
  this.recName1 = null;

  /**
   * @name RecAddress#recName2
   * @type String
   * @access private
   */
  this.recName2 = null;

  /**
   * @name RecAddress#address1
   * @type String
   * @access private
   */
  this.address1 = null;

  /**
   * @name RecAddress#address2
   * @type String
   * @access private
   */
  this.address2 = null;

  /**
   * @name RecAddress#city
   * @type String
   * @access private
   */
  this.city = null;

  /**
   * @name RecAddress#state
   * @type String
   * @access private
   */
  this.state = null;

  /**
   * @name RecAddress#postalCode
   * @type String
   * @access private
   */
  this.postalCode = null;

  /**
   * @name RecAddress#phone
   * @type String
   * @access private
   */
  this.phone = null;
}



Aggregate.add("RECADDR", RecAddress);


/**
 * @return {String} the recName1
 */
RecAddress.prototype.getRecName1 = function() {
  return this.recName1;
};
Element.add(RecAddress, {name: "RECNAME1",required: true , order: 0, attributeType: String, readMethod: "getRecName1", writeMethod: "setRecName1"});


/**
 * @param {String} recName1 the recName1 to set
 */
RecAddress.prototype.setRecName1 = function(recName1) {
  this.recName1 = recName1;
};


/**
 * @return {String} the recName2
 */
RecAddress.prototype.getRecName2 = function() {
  return this.recName2;
};
Element.add(RecAddress, {name: "RECNAME2",required: false , order: 1, attributeType: String, readMethod: "getRecName2", writeMethod: "setRecName2"});


/**
 * @param {String} recName2 the recName2 to set
 */
RecAddress.prototype.setRecName2 = function(recName2) {
  this.recName2 = recName2;
};


/**
 * @return {String} the address1
 */
RecAddress.prototype.getAddress1 = function() {
  return this.address1;
};
Element.add(RecAddress, {name: "ADDR1",required: true , order: 2, attributeType: String, readMethod: "getAddress1", writeMethod: "setAddress1"});


/**
 * @param {String} address1 the address1 to set
 */
RecAddress.prototype.setAddress1 = function(address1) {
  this.address1 = address1;
};


/**
 * @return {String} the address2
 */
RecAddress.prototype.getAddress2 = function() {
  return this.address2;
};
Element.add(RecAddress, {name: "ADDR2",required: true , order: 3, attributeType: String, readMethod: "getAddress2", writeMethod: "setAddress2"});


/**
 * @param {String} address2 the address2 to set
 */
RecAddress.prototype.setAddress2 = function(address2) {
  this.address2 = address2;
};


/**
 * @return {String} the city
 */
RecAddress.prototype.getCity = function() {
  return this.city;
};
Element.add(RecAddress, {name: "CITY",required: true , order: 4, attributeType: String, readMethod: "getCity", writeMethod: "setCity"});


/**
 * @param {String} city the city to set
 */
RecAddress.prototype.setCity = function(city) {
  this.city = city;
};


/**
 * @return {String} the state
 */
RecAddress.prototype.getState = function() {
  return this.state;
};
Element.add(RecAddress, {name: "STATE",required: true , order: 5, attributeType: String, readMethod: "getState", writeMethod: "setState"});


/**
 * @param {String} state the state to set
 */
RecAddress.prototype.setState = function(state) {
  this.state = state;
};


/**
 * @return {String} the postalCode
 */
RecAddress.prototype.getPostalCode = function() {
  return this.postalCode;
};
Element.add(RecAddress, {name: "POSTALCODE",required: true , order: 6, attributeType: String, readMethod: "getPostalCode", writeMethod: "setPostalCode"});


/**
 * @param {String} postalCode the postalCode to set
 */
RecAddress.prototype.setPostalCode = function(postalCode) {
  this.postalCode = postalCode;
};


/**
 * @return {String} the phone
 */
RecAddress.prototype.getPhone = function() {
  return this.phone;
};
Element.add(RecAddress, {name: "PHONE",required: false , order: 7, attributeType: String, readMethod: "getPhone", writeMethod: "setPhone"});


/**
 * @param {String} phone the phone to set
 */
RecAddress.prototype.setPhone = function(phone) {
  this.phone = phone;
};




module.exports = RecAddress;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/Tax1099B.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";

var PayerAddress = require("./PayerAddress");
var RecAddress = require("./RecAddress");
var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");
var Element = require("../../../meta/Element");
var ExtDBInfo = require("./ExtDBInfo");

/**
 * @class
 */
function Tax1099B () {

  /**
   * @name Tax1099B#srvrtId
   * @type String
   * @access private
   */
  this.srvrtId = null;

  /**
   * @name Tax1099B#taxYear
   * @type String
   * @access private
   */
  this.taxYear = null;

  /**
   * @name Tax1099B#extDBInfo
   * @type ExtDBInfo
   * @access private
   */
  this.extDBInfo = null;

  /**
   * @name Tax1099B#payerAddress
   * @type PayerAddress
   * @access private
   */
  this.payerAddress = null;

  /**
   * @name Tax1099B#payerId
   * @type String
   * @access private
   */
  this.payerId = null;

  /**
   * @name Tax1099B#recAddress
   * @type RecAddress
   * @access private
   */
  this.recAddress = null;

  /**
   * @name Tax1099B#recId
   * @type String
   * @access private
   */
  this.recId = null;

  /**
   * @name Tax1099B#recAcct
   * @type String
   * @access private
   */
  this.recAcct = null;
}



Aggregate.add("TAX1099B_V100", Tax1099B);


Tax1099B.prototype.getSrvrtId = function() {
  return this.srvrtId;
};
Element.add(Tax1099B, {name: "SRVRTID",required: true , order: 0, attributeType: String, readMethod: "getSrvrtId", writeMethod: "setSrvrtId"});


Tax1099B.prototype.setSrvrtId = function(/*String*/ srvrtId) {
  this.srvrtId = srvrtId;
};


Tax1099B.prototype.getTaxYear = function() {
  return this.taxYear;
};
Element.add(Tax1099B, {name: "TAXYEAR", required: true, order: 1, attributeType: String, readMethod: "getTaxYear", writeMethod: "setTaxYear"});


Tax1099B.prototype.setTaxYear = function(/*String*/ taxYear) {
  this.taxYear = taxYear;
};


/**
 * @return {ExtDBInfo} the extDBInfo
 */
Tax1099B.prototype.getExtDBInfo = function() {
  return this.extDBInfo;
};
ChildAggregate.add(Tax1099B, {required:true, order: 2, attributeType: ExtDBInfo, readMethod: "getExtDBInfo", writeMethod: "setExtDBInfo"});


/**
 * @param {ExtDBInfo} extDBInfo the extDBInfo to set
 */
Tax1099B.prototype.setExtDBInfo = function(extDBInfo) {
  this.extDBInfo = extDBInfo;
};


/**
 * @return {PayerAddress} the payerAddress
 */
Tax1099B.prototype.getPayerAddress = function() {
  return this.payerAddress;
};
ChildAggregate.add(Tax1099B, {required:true, order: 3, attributeType: PayerAddress, readMethod: "getPayerAddress", writeMethod: "setPayerAddress"});


/**
 * @param {PayerAddress} payerAddress the payerAddress to set
 */
Tax1099B.prototype.setPayerAddress = function(payerAddress) {
  this.payerAddress = payerAddress;
};


/**
 * @return {String} the payerId
 */
Tax1099B.prototype.getPayerId = function() {
  return this.payerId;
};
Element.add(Tax1099B, {name: "PAYERID", required: true, order: 4, attributeType: String, readMethod: "getPayerId", writeMethod: "setPayerId"});


/**
 * @param {String} payerId the payerId to set
 */
Tax1099B.prototype.setPayerId = function(payerId) {
  this.payerId = payerId;
};


/**
 * @return {RecAddress} the recAddress
 */
Tax1099B.prototype.getRecAddress = function() {
  return this.recAddress;
};
ChildAggregate.add(Tax1099B, {required:true, order: 5, attributeType: RecAddress, readMethod: "getRecAddress", writeMethod: "setRecAddress"});


/**
 * @param {RecAddress} recAddress the recAddress to set
 */
Tax1099B.prototype.setRecAddress = function(recAddress) {
  this.recAddress = recAddress;
};


/**
 * @return {String} the recId
 */
Tax1099B.prototype.getRecId = function() {
  return this.recId;
};
Element.add(Tax1099B, {name: "RECID", required: true, order: 6, attributeType: String, readMethod: "getRecId", writeMethod: "setRecId"});


/**
 * @param {String} recId the recId to set
 */
Tax1099B.prototype.setRecId = function(recId) {
  this.recId = recId;
};


/**
 * @return {String} the recAcct
 */
Tax1099B.prototype.getRecAcct = function() {
  return this.recAcct;
};
Element.add(Tax1099B, {name: "RECACCT", required: true, order: 7, attributeType: String, readMethod: "getRecAcct", writeMethod: "setRecAcct"});


/**
 * @param {String} recAcct the recAcct to set
 */
Tax1099B.prototype.setRecAcct = function(recAcct) {
  this.recAcct = recAcct;
};




module.exports = Tax1099B;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","./ExtDBInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/ExtDBInfo.js","./PayerAddress":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/PayerAddress.js","./RecAddress":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/RecAddress.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/Tax1099DIV.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";

var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");
var Element = require("../../../meta/Element");
var PayerAddress = require("./PayerAddress");
var RecAddress = require("./RecAddress");

/**
 * @class
 */
function Tax1099DIV () {

  /**
   * @name Tax1099DIV#srvrtId
   * @type String
   * @access private
   */
  this.srvrtId = null;

  /**
   * @name Tax1099DIV#taxYear
   * @type String
   * @access private
   */
  this.taxYear = null;

  /**
   * @name Tax1099DIV#ordDiv
   * @type String
   * @access private
   */
  this.ordDiv = null;

  /**
   * @name Tax1099DIV#qualifiedDiv
   * @type String
   * @access private
   */
  this.qualifiedDiv = null;

  /**
   * @name Tax1099DIV#totCapGain
   * @type String
   * @access private
   */
  this.totCapGain = null;

  /**
   * @name Tax1099DIV#p28Gain
   * @type String
   * @access private
   */
  this.p28Gain = null;

  /**
   * @name Tax1099DIV#unrecSec1250
   * @type String
   * @access private
   */
  this.unrecSec1250 = null;

  /**
   * @name Tax1099DIV#sec1202
   * @type String
   * @access private
   */
  this.sec1202 = null;

  /**
   * @name Tax1099DIV#nonTaxDist
   * @type String
   * @access private
   */
  this.nonTaxDist = null;

  /**
   * @name Tax1099DIV#fedTaxWh
   * @type String
   * @access private
   */
  this.fedTaxWh = null;

  /**
   * @name Tax1099DIV#investExp
   * @type String
   * @access private
   */
  this.investExp = null;

  /**
   * @name Tax1099DIV#forTaxPd
   * @type String
   * @access private
   */
  this.forTaxPd = null;

  /**
   * @name Tax1099DIV#cashLiq
   * @type String
   * @access private
   */
  this.cashLiq = null;

  /**
   * @name Tax1099DIV#nonCashLiq
   * @type String
   * @access private
   */
  this.nonCashLiq = null;

  /**
   * @name Tax1099DIV#payerAddress
   * @type PayerAddress
   * @access private
   */
  this.payerAddress = null;

  /**
   * @name Tax1099DIV#payerId
   * @type String
   * @access private
   */
  this.payerId = null;

  /**
   * @name Tax1099DIV#recAddress
   * @type RecAddress
   * @access private
   */
  this.recAddress = null;

  /**
   * @name Tax1099DIV#recId
   * @type String
   * @access private
   */
  this.recId = null;

  /**
   * @name Tax1099DIV#recAcct
   * @type String
   * @access private
   */
  this.recAcct = null;
}



Aggregate.add("TAX1099DIV_V100", Tax1099DIV);


Tax1099DIV.prototype.getSrvrtId = function() {
  return this.srvrtId;
};
Element.add(Tax1099DIV, {name: "SRVRTID",required: false , order: 0, attributeType: String, readMethod: "getSrvrtId", writeMethod: "setSrvrtId"});


Tax1099DIV.prototype.setSrvrtId = function(/*String*/ srvrtId) {
  this.srvrtId = srvrtId;
};


Tax1099DIV.prototype.getTaxYear = function() {
  return this.taxYear;
};
Element.add(Tax1099DIV, {name: "TAXYEAR", required: false, order: 1, attributeType: String, readMethod: "getTaxYear", writeMethod: "setTaxYear"});


Tax1099DIV.prototype.setTaxYear = function(/*String*/ taxYear) {
  this.taxYear = taxYear;
};


/**
 * @return {String} the ordDiv
 */
Tax1099DIV.prototype.getOrdDiv = function() {
  return this.ordDiv;
};
Element.add(Tax1099DIV, {name: "ORDDIV", required: false, order: 2, attributeType: String, readMethod: "getOrdDiv", writeMethod: "setOrdDiv"});


/**
 * @param {String} ordDiv the ordDiv to set
 */
Tax1099DIV.prototype.setOrdDiv = function(ordDiv) {
  this.ordDiv = ordDiv;
};


/**
 * @return {String} the qualifiedDiv
 */
Tax1099DIV.prototype.getQualifiedDiv = function() {
  return this.qualifiedDiv;
};
Element.add(Tax1099DIV, {name: "QUALIFIEDDIV", required: false, order: 3, attributeType: String, readMethod: "getQualifiedDiv", writeMethod: "setQualifiedDiv"});


/**
 * @param {String} qualifiedDiv the qualifiedDiv to set
 */
Tax1099DIV.prototype.setQualifiedDiv = function(qualifiedDiv) {
  this.qualifiedDiv = qualifiedDiv;
};


/**
 * @return {String} the totCapGain
 */
Tax1099DIV.prototype.getTotCapGain = function() {
  return this.totCapGain;
};
Element.add(Tax1099DIV, {name: "TOTCAPGAIN", required: false, order: 4, attributeType: String, readMethod: "getTotCapGain", writeMethod: "setTotCapGain"});


/**
 * @param {String} totCapGain the totCapGain to set
 */
Tax1099DIV.prototype.setTotCapGain = function(totCapGain) {
  this.totCapGain = totCapGain;
};


/**
 * @return {String} the p28Gain
 */
Tax1099DIV.prototype.getP28Gain = function() {
  return this.p28Gain;
};
Element.add(Tax1099DIV, {name: "P28GAIN", required: false, order: 5, attributeType: String, readMethod: "getP28Gain", writeMethod: "setP28Gain"});


/**
 * @param {String} p28Gain the p28Gain to set
 */
Tax1099DIV.prototype.setP28Gain = function(p28Gain) {
  this.p28Gain = p28Gain;
};


/**
 * @return {String} the unrecSec1250
 */
Tax1099DIV.prototype.getUnrecSec1250 = function() {
  return this.unrecSec1250;
};
Element.add(Tax1099DIV, {name: "UNRECSEC1250", required: false, order: 6, attributeType: String, readMethod: "getUnrecSec1250", writeMethod: "setUnrecSec1250"});


/**
 * @param {String} unrecSec1250 the unrecSec1250 to set
 */
Tax1099DIV.prototype.setUnrecSec1250 = function(unrecSec1250) {
  this.unrecSec1250 = unrecSec1250;
};


/**
 * @return {String} the sec1202
 */
Tax1099DIV.prototype.getSec1202 = function() {
  return this.sec1202;
};
Element.add(Tax1099DIV, {name: "SEC1202", required: false, order: 7, attributeType: String, readMethod: "getSec1202", writeMethod: "setSec1202"});


/**
 * @param {String} sec1202 the sec1202 to set
 */
Tax1099DIV.prototype.setSec1202 = function(sec1202) {
  this.sec1202 = sec1202;
};


/**
 * @return {String} the nonTaxDist
 */
Tax1099DIV.prototype.getNonTaxDist = function() {
  return this.nonTaxDist;
};
Element.add(Tax1099DIV, {name: "NONTAXDIST", required: false, order: 8, attributeType: String, readMethod: "getNonTaxDist", writeMethod: "setNonTaxDist"});


/**
 * @param {String} nonTaxDist the nonTaxDist to set
 */
Tax1099DIV.prototype.setNonTaxDist = function(nonTaxDist) {
  this.nonTaxDist = nonTaxDist;
};


/**
 * @return {String} the fedTaxWh
 */
Tax1099DIV.prototype.getFedTaxWh = function() {
  return this.fedTaxWh;
};
Element.add(Tax1099DIV, {name: "FEDTAXWH", required: false, order: 9, attributeType: String, readMethod: "getFedTaxWh", writeMethod: "setFedTaxWh"});


/**
 * @param {String} fedTaxWh the fedTaxWh to set
 */
Tax1099DIV.prototype.setFedTaxWh = function(fedTaxWh) {
  this.fedTaxWh = fedTaxWh;
};


/**
 * @return {String} the investExp
 */
Tax1099DIV.prototype.getInvestExp = function() {
  return this.investExp;
};
Element.add(Tax1099DIV, {name: "INVESTEXP", required: false, order: 10, attributeType: String, readMethod: "getInvestExp", writeMethod: "setInvestExp"});


/**
 * @param {String} investExp the investExp to set
 */
Tax1099DIV.prototype.setInvestExp = function(investExp) {
  this.investExp = investExp;
};


/**
 * @return {String} the forTaxPd
 */
Tax1099DIV.prototype.getForTaxPd = function() {
  return this.forTaxPd;
};
Element.add(Tax1099DIV, {name: "FORTAXPD", required: false, order: 11, attributeType: String, readMethod: "getForTaxPd", writeMethod: "setForTaxPd"});


/**
 * @param {String} forTaxPd the forTaxPd to set
 */
Tax1099DIV.prototype.setForTaxPd = function(forTaxPd) {
  this.forTaxPd = forTaxPd;
};


/**
 * @return {String} the cashLiq
 */
Tax1099DIV.prototype.getCashLiq = function() {
  return this.cashLiq;
};
Element.add(Tax1099DIV, {name: "CASHLIQ", required: false, order: 12, attributeType: String, readMethod: "getCashLiq", writeMethod: "setCashLiq"});


/**
 * @param {String} cashLiq the cashLiq to set
 */
Tax1099DIV.prototype.setCashLiq = function(cashLiq) {
  this.cashLiq = cashLiq;
};


/**
 * @return {String} the nonCashLiq
 */
Tax1099DIV.prototype.getNonCashLiq = function() {
  return this.nonCashLiq;
};
Element.add(Tax1099DIV, {name: "NONCASHLIQ", required: false, order: 13, attributeType: String, readMethod: "getNonCashLiq", writeMethod: "setNonCashLiq"});


/**
 * @param {String} nonCashLiq the nonCashLiq to set
 */
Tax1099DIV.prototype.setNonCashLiq = function(nonCashLiq) {
  this.nonCashLiq = nonCashLiq;
};


/**
 * @return {PayerAddress} the payerAddress
 */
Tax1099DIV.prototype.getPayerAddress = function() {
  return this.payerAddress;
};
ChildAggregate.add(Tax1099DIV, {required:true, order: 14, attributeType: PayerAddress, readMethod: "getPayerAddress", writeMethod: "setPayerAddress"});


/**
 * @param {PayerAddress} payerAddress the payerAddress to set
 */
Tax1099DIV.prototype.setPayerAddress = function(payerAddress) {
  this.payerAddress = payerAddress;
};


/**
 * @return {String} the payerId
 */
Tax1099DIV.prototype.getPayerId = function() {
  return this.payerId;
};
Element.add(Tax1099DIV, {name: "PAYERID", required: true, order: 15, attributeType: String, readMethod: "getPayerId", writeMethod: "setPayerId"});


/**
 * @param {String} payerId the payerId to set
 */
Tax1099DIV.prototype.setPayerId = function(payerId) {
  this.payerId = payerId;
};


/**
 * @return {RecAddress} the recAddress
 */
Tax1099DIV.prototype.getRecAddress = function() {
  return this.recAddress;
};
ChildAggregate.add(Tax1099DIV, {required:true, order: 16, attributeType: RecAddress, readMethod: "getRecAddress", writeMethod: "setRecAddress"});


/**
 * @param {RecAddress} recAddress the recAddress to set
 */
Tax1099DIV.prototype.setRecAddress = function(recAddress) {
  this.recAddress = recAddress;
};


/**
 * @return {String} the recId
 */
Tax1099DIV.prototype.getRecId = function() {
  return this.recId;
};
Element.add(Tax1099DIV, {name: "RECID", required: true, order: 17, attributeType: String, readMethod: "getRecId", writeMethod: "setRecId"});


/**
 * @param {String} recId the recId to set
 */
Tax1099DIV.prototype.setRecId = function(recId) {
  this.recId = recId;
};


/**
 * @return {String} the recAcct
 */
Tax1099DIV.prototype.getRecAcct = function() {
  return this.recAcct;
};
Element.add(Tax1099DIV, {name: "RECACCT", required: true, order: 18, attributeType: String, readMethod: "getRecAcct", writeMethod: "setRecAcct"});


/**
 * @param {String} recAcct the recAcct to set
 */
Tax1099DIV.prototype.setRecAcct = function(recAcct) {
  this.recAcct = recAcct;
};




module.exports = Tax1099DIV;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","./PayerAddress":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/PayerAddress.js","./RecAddress":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/RecAddress.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/Tax1099INT.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";

var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");
var Element = require("../../../meta/Element");
var PayerAddress = require("./PayerAddress");
var RecAddress = require("./RecAddress");

/**
 * @class
 */
function Tax1099INT () {

  /**
   * @name Tax1099INT#srvrtId
   * @type String
   * @access private
   */
  this.srvrtId = null;

  /**
   * @name Tax1099INT#taxYear
   * @type String
   * @access private
   */
  this.taxYear = null;

  /**
   * @name Tax1099INT#intIncome
   * @type String
   * @access private
   */
  this.intIncome = null;

  /**
   * @name Tax1099INT#erlWithPen
   * @type String
   * @access private
   */
  this.erlWithPen = null;

  /**
   * @name Tax1099INT#intUsbndtrs
   * @type String
   * @access private
   */
  this.intUsbndtrs = null;

  /**
   * @name Tax1099INT#fedTaxWh
   * @type String
   * @access private
   */
  this.fedTaxWh = null;

  /**
   * @name Tax1099INT#investExp
   * @type String
   * @access private
   */
  this.investExp = null;

  /**
   * @name Tax1099INT#forTaxPd
   * @type String
   * @access private
   */
  this.forTaxPd = null;

  /**
   * @name Tax1099INT#payerAddress
   * @type PayerAddress
   * @access private
   */
  this.payerAddress = null;

  /**
   * @name Tax1099INT#payerId
   * @type String
   * @access private
   */
  this.payerId = null;

  /**
   * @name Tax1099INT#recAddress
   * @type RecAddress
   * @access private
   */
  this.recAddress = null;

  /**
   * @name Tax1099INT#recId
   * @type String
   * @access private
   */
  this.recId = null;

  /**
   * @name Tax1099INT#recAcct
   * @type String
   * @access private
   */
  this.recAcct = null;

  /**
   * @name Tax1099INT#taxExemptInt
   * @type String
   * @access private
   */
  this.taxExemptInt = null;

  /**
   * @name Tax1099INT#specifiedPabInt
   * @type String
   * @access private
   */
  this.specifiedPabInt = null;
}



Aggregate.add("TAX1099INT_V100", Tax1099INT);


Tax1099INT.prototype.getSrvrtId = function() {
  return this.srvrtId;
};
Element.add(Tax1099INT, {name: "SRVRTID",required: true , order: 0, attributeType: String, readMethod: "getSrvrtId", writeMethod: "setSrvrtId"});


Tax1099INT.prototype.setSrvrtId = function(/*String*/ srvrtId) {
  this.srvrtId = srvrtId;
};


Tax1099INT.prototype.getTaxYear = function() {
  return this.taxYear;
};
Element.add(Tax1099INT, {name: "TAXYEAR", required: true, order: 1, attributeType: String, readMethod: "getTaxYear", writeMethod: "setTaxYear"});


Tax1099INT.prototype.setTaxYear = function(/*String*/ taxYear) {
  this.taxYear = taxYear;
};


/**
 * @return {String} the intIncome
 */
Tax1099INT.prototype.getIntIncome = function() {
  return this.intIncome;
};
Element.add(Tax1099INT, {name: "INTINCOME",required: false , order: 2, attributeType: String, readMethod: "getIntIncome", writeMethod: "setIntIncome"});


/**
 * @param {String} intIncome the intIncome to set
 */
Tax1099INT.prototype.setIntIncome = function(intIncome) {
  this.intIncome = intIncome;
};


/**
 * @return {String} the erlWithPen
 */
Tax1099INT.prototype.getErlWithPen = function() {
  return this.erlWithPen;
};
Element.add(Tax1099INT, {name: "ERLWITHPEN",required: false , order: 3, attributeType: String, readMethod: "getErlWithPen", writeMethod: "setErlWithPen"});


/**
 * @param {String} erlWithPen the erlWithPen to set
 */
Tax1099INT.prototype.setErlWithPen = function(erlWithPen) {
  this.erlWithPen = erlWithPen;
};


/**
 * @return {String} the intUsbndtrs
 */
Tax1099INT.prototype.getIntUsbndtrs = function() {
  return this.intUsbndtrs;
};
Element.add(Tax1099INT, {name: "INTUSBNDTRS",required: false , order: 4, attributeType: String, readMethod: "getIntUsbndtrs", writeMethod: "setIntUsbndtrs"});


/**
 * @param {String} intUsbndtrs the intUsbndtrs to set
 */
Tax1099INT.prototype.setIntUsbndtrs = function(intUsbndtrs) {
  this.intUsbndtrs = intUsbndtrs;
};


/**
 * @return {String} the fedTaxWh
 */
Tax1099INT.prototype.getFedTaxWh = function() {
  return this.fedTaxWh;
};
Element.add(Tax1099INT, {name: "FEDTAXWH", required: false, order: 5, attributeType: String, readMethod: "getFedTaxWh", writeMethod: "setFedTaxWh"});


/**
 * @param {String} fedTaxWh the fedTaxWh to set
 */
Tax1099INT.prototype.setFedTaxWh = function(fedTaxWh) {
  this.fedTaxWh = fedTaxWh;
};


/**
 * @return {String} the investExp
 */
Tax1099INT.prototype.getInvestExp = function() {
  return this.investExp;
};
Element.add(Tax1099INT, {name: "INVESTEXP", required: false, order: 6, attributeType: String, readMethod: "getInvestExp", writeMethod: "setInvestExp"});


/**
 * @param {String} investExp the investExp to set
 */
Tax1099INT.prototype.setInvestExp = function(investExp) {
  this.investExp = investExp;
};


/**
 * @return {String} the forTaxPd
 */
Tax1099INT.prototype.getForTaxPd = function() {
  return this.forTaxPd;
};
Element.add(Tax1099INT, {name: "FORTAXPD", required: false, order: 7, attributeType: String, readMethod: "getForTaxPd", writeMethod: "setForTaxPd"});


/**
 * @param {String} forTaxPd the forTaxPd to set
 */
Tax1099INT.prototype.setForTaxPd = function(forTaxPd) {
  this.forTaxPd = forTaxPd;
};


/**
 * @return {PayerAddress} the payerAddress
 */
Tax1099INT.prototype.getPayerAddress = function() {
  return this.payerAddress;
};
ChildAggregate.add(Tax1099INT, {required:true, order: 8, attributeType: PayerAddress, readMethod: "getPayerAddress", writeMethod: "setPayerAddress"});


/**
 * @param {PayerAddress} payerAddress the payerAddress to set
 */
Tax1099INT.prototype.setPayerAddress = function(payerAddress) {
  this.payerAddress = payerAddress;
};


/**
 * @return {String} the payerId
 */
Tax1099INT.prototype.getPayerId = function() {
  return this.payerId;
};
Element.add(Tax1099INT, {name: "PAYERID", required: true, order: 9, attributeType: String, readMethod: "getPayerId", writeMethod: "setPayerId"});


/**
 * @param {String} payerId the payerId to set
 */
Tax1099INT.prototype.setPayerId = function(payerId) {
  this.payerId = payerId;
};


/**
 * @return {RecAddress} the recAddress
 */
Tax1099INT.prototype.getRecAddress = function() {
  return this.recAddress;
};
ChildAggregate.add(Tax1099INT, {required:true, order: 10, attributeType: RecAddress, readMethod: "getRecAddress", writeMethod: "setRecAddress"});


/**
 * @param {RecAddress} recAddress the recAddress to set
 */
Tax1099INT.prototype.setRecAddress = function(recAddress) {
  this.recAddress = recAddress;
};


/**
 * @return {String} the recId
 */
Tax1099INT.prototype.getRecId = function() {
  return this.recId;
};
Element.add(Tax1099INT, {name: "RECID", required: true, order: 11, attributeType: String, readMethod: "getRecId", writeMethod: "setRecId"});


/**
 * @param {String} recId the recId to set
 */
Tax1099INT.prototype.setRecId = function(recId) {
  this.recId = recId;
};


/**
 * @return {String} the recAcct
 */
Tax1099INT.prototype.getRecAcct = function() {
  return this.recAcct;
};
Element.add(Tax1099INT, {name: "RECACCT", required: true, order: 12, attributeType: String, readMethod: "getRecAcct", writeMethod: "setRecAcct"});


/**
 * @param {String} recAcct the recAcct to set
 */
Tax1099INT.prototype.setRecAcct = function(recAcct) {
  this.recAcct = recAcct;
};


/**
 * @return {String} the taxExemptInt
 */
Tax1099INT.prototype.getTaxExemptInt = function() {
  return this.taxExemptInt;
};
Element.add(Tax1099INT, {name: "TAXEXEMPTINT", required: false, order: 13, attributeType: String, readMethod: "getTaxExemptInt", writeMethod: "setTaxExemptInt"});


/**
 * @param {String} taxExemptInt the taxExemptInt to set
 */
Tax1099INT.prototype.setTaxExemptInt = function(taxExemptInt) {
  this.taxExemptInt = taxExemptInt;
};


/**
 * @return {String} the specifiedPabInt
 */
Tax1099INT.prototype.getSpecifiedPabInt = function() {
  return this.specifiedPabInt;
};
Element.add(Tax1099INT, {name: "SPECIFIEDPABINT", required: false, order: 14, attributeType: String, readMethod: "getSpecifiedPabInt", writeMethod: "setSpecifiedPabInt"});


/**
 * @param {String} specifiedPabInt the specifiedPabInt to set
 */
Tax1099INT.prototype.setSpecifiedPabInt = function(specifiedPabInt) {
  this.specifiedPabInt = specifiedPabInt;
};




module.exports = Tax1099INT;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","./PayerAddress":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/PayerAddress.js","./RecAddress":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/RecAddress.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/Tax1099MISC.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";

var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");
var Element = require("../../../meta/Element");
var PayerAddress = require("./PayerAddress");
var RecAddress = require("./RecAddress");

/**
 * @class
 */
function Tax1099MISC () {

  /**
   * @name Tax1099MISC#srvrtId
   * @type String
   * @access private
   */
  this.srvrtId = null;

  /**
   * @name Tax1099MISC#taxYear
   * @type String
   * @access private
   */
  this.taxYear = null;

  /**
   * @name Tax1099MISC#royalties
   * @type String
   * @access private
   */
  this.royalties = null;

  /**
   * @name Tax1099MISC#otherIncome
   * @type String
   * @access private
   */
  this.otherIncome = null;

  /**
   * @name Tax1099MISC#fedTaxWh
   * @type String
   * @access private
   */
  this.fedTaxWh = null;

  /**
   * @name Tax1099MISC#subPmts
   * @type String
   * @access private
   */
  this.subPmts = null;

  /**
   * @name Tax1099MISC#payerAddress
   * @type PayerAddress
   * @access private
   */
  this.payerAddress = null;

  /**
   * @name Tax1099MISC#payerId
   * @type String
   * @access private
   */
  this.payerId = null;

  /**
   * @name Tax1099MISC#recAddress
   * @type RecAddress
   * @access private
   */
  this.recAddress = null;

  /**
   * @name Tax1099MISC#recId
   * @type String
   * @access private
   */
  this.recId = null;

  /**
   * @name Tax1099MISC#recAcct
   * @type String
   * @access private
   */
  this.recAcct = null;
}



Aggregate.add("TAX1099MISC_V100", Tax1099MISC);


Tax1099MISC.prototype.getSrvrtId = function() {
  return this.srvrtId;
};
Element.add(Tax1099MISC, {name: "SRVRTID",required: true , order: 0, attributeType: String, readMethod: "getSrvrtId", writeMethod: "setSrvrtId"});


Tax1099MISC.prototype.setSrvrtId = function(/*String*/ srvrtId) {
  this.srvrtId = srvrtId;
};


Tax1099MISC.prototype.getTaxYear = function() {
  return this.taxYear;
};
Element.add(Tax1099MISC, {name: "TAXYEAR", required: true, order: 1, attributeType: String, readMethod: "getTaxYear", writeMethod: "setTaxYear"});


Tax1099MISC.prototype.setTaxYear = function(/*String*/ taxYear) {
  this.taxYear = taxYear;
};


/**
 * @return {String} the royalties
 */
Tax1099MISC.prototype.getRoyalties = function() {
  return this.royalties;
};
Element.add(Tax1099MISC, {name: "ROYALTIES",required: false , order: 2, attributeType: String, readMethod: "getRoyalties", writeMethod: "setRoyalties"});


/**
 * @param {String} royalties the royalties to set
 */
Tax1099MISC.prototype.setRoyalties = function(royalties) {
  this.royalties = royalties;
};


/**
 * @return {String} the otherIncome
 */
Tax1099MISC.prototype.getOtherIncome = function() {
  return this.otherIncome;
};
Element.add(Tax1099MISC, {name: "OTHERINCOME",required: false , order: 3, attributeType: String, readMethod: "getOtherIncome", writeMethod: "setOtherIncome"});


/**
 * @param {String} otherIncome the otherIncome to set
 */
Tax1099MISC.prototype.setOtherIncome = function(otherIncome) {
  this.otherIncome = otherIncome;
};


/**
 * @return {String} the fedTaxWh
 */
Tax1099MISC.prototype.getFedTaxWh = function() {
  return this.fedTaxWh;
};
Element.add(Tax1099MISC, {name: "FEDTAXWH",required: false , order: 4, attributeType: String, readMethod: "getFedTaxWh", writeMethod: "setFedTaxWh"});


/**
 * @param {String} fedTaxWh the fedTaxWh to set
 */
Tax1099MISC.prototype.setFedTaxWh = function(fedTaxWh) {
  this.fedTaxWh = fedTaxWh;
};


/**
 * @return {String} the subPmts
 */
Tax1099MISC.prototype.getSubPmts = function() {
  return this.subPmts;
};
Element.add(Tax1099MISC, {name: "SUBPMTS",required: false , order: 5, attributeType: String, readMethod: "getSubPmts", writeMethod: "setSubPmts"});


/**
 * @param {String} subPmts the subPmts to set
 */
Tax1099MISC.prototype.setSubPmts = function(subPmts) {
  this.subPmts = subPmts;
};


/**
 * @return {PayerAddress} the payerAddress
 */
Tax1099MISC.prototype.getPayerAddress = function() {
  return this.payerAddress;
};
ChildAggregate.add(Tax1099MISC, {required:true, order: 6, attributeType: PayerAddress, readMethod: "getPayerAddress", writeMethod: "setPayerAddress"});


/**
 * @param {PayerAddress} payerAddress the payerAddress to set
 */
Tax1099MISC.prototype.setPayerAddress = function(payerAddress) {
  this.payerAddress = payerAddress;
};


/**
 * @return {String} the payerId
 */
Tax1099MISC.prototype.getPayerId = function() {
  return this.payerId;
};
Element.add(Tax1099MISC, {name: "PAYERID", required: true, order: 7, attributeType: String, readMethod: "getPayerId", writeMethod: "setPayerId"});


/**
 * @param {String} payerId the payerId to set
 */
Tax1099MISC.prototype.setPayerId = function(payerId) {
  this.payerId = payerId;
};


/**
 * @return {RecAddress} the recAddress
 */
Tax1099MISC.prototype.getRecAddress = function() {
  return this.recAddress;
};
ChildAggregate.add(Tax1099MISC, {required:true, order: 8, attributeType: RecAddress, readMethod: "getRecAddress", writeMethod: "setRecAddress"});


/**
 * @param {RecAddress} recAddress the recAddress to set
 */
Tax1099MISC.prototype.setRecAddress = function(recAddress) {
  this.recAddress = recAddress;
};


/**
 * @return {String} the recId
 */
Tax1099MISC.prototype.getRecId = function() {
  return this.recId;
};
Element.add(Tax1099MISC, {name: "RECID", required: true, order: 9, attributeType: String, readMethod: "getRecId", writeMethod: "setRecId"});


/**
 * @param {String} recId the recId to set
 */
Tax1099MISC.prototype.setRecId = function(recId) {
  this.recId = recId;
};


/**
 * @return {String} the recAcct
 */
Tax1099MISC.prototype.getRecAcct = function() {
  return this.recAcct;
};
Element.add(Tax1099MISC, {name: "RECACCT", required: true, order: 10, attributeType: String, readMethod: "getRecAcct", writeMethod: "setRecAcct"});


/**
 * @param {String} recAcct the recAcct to set
 */
Tax1099MISC.prototype.setRecAcct = function(recAcct) {
  this.recAcct = recAcct;
};




module.exports = Tax1099MISC;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","./PayerAddress":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/PayerAddress.js","./RecAddress":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/RecAddress.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/Tax1099OID.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";

var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");
var Element = require("../../../meta/Element");
var PayerAddress = require("./PayerAddress");
var RecAddress = require("./RecAddress");

/**
 * @class
 */
function Tax1099OID () {

  /**
   * @name Tax1099OID#srvrtId
   * @type String
   * @access private
   */
  this.srvrtId = null;

  /**
   * @name Tax1099OID#taxYear
   * @type String
   * @access private
   */
  this.taxYear = null;

  /**
   * @name Tax1099OID#originalDisc
   * @type String
   * @access private
   */
  this.originalDisc = null;

  /**
   * @name Tax1099OID#otherPerInt
   * @type String
   * @access private
   */
  this.otherPerInt = null;

  /**
   * @name Tax1099OID#erlWithPen
   * @type String
   * @access private
   */
  this.erlWithPen = null;

  /**
   * @name Tax1099OID#fedTaxWh
   * @type String
   * @access private
   */
  this.fedTaxWh = null;

  /**
   * @name Tax1099OID#desc
   * @type String
   * @access private
   */
  this.desc = null;

  /**
   * @name Tax1099OID#oidOnUstres
   * @type String
   * @access private
   */
  this.oidOnUstres = null;

  /**
   * @name Tax1099OID#investExp
   * @type String
   * @access private
   */
  this.investExp = null;

  /**
   * @name Tax1099OID#payerAddress
   * @type PayerAddress
   * @access private
   */
  this.payerAddress = null;

  /**
   * @name Tax1099OID#payerId
   * @type String
   * @access private
   */
  this.payerId = null;

  /**
   * @name Tax1099OID#recAddress
   * @type RecAddress
   * @access private
   */
  this.recAddress = null;

  /**
   * @name Tax1099OID#recId
   * @type String
   * @access private
   */
  this.recId = null;

  /**
   * @name Tax1099OID#recAcct
   * @type String
   * @access private
   */
  this.recAcct = null;
}



Aggregate.add("TAX1099OID_V100", Tax1099OID);


Tax1099OID.prototype.getSrvrtId = function() {
  return this.srvrtId;
};
Element.add(Tax1099OID, {name: "SRVRTID",required: true , order: 0, attributeType: String, readMethod: "getSrvrtId", writeMethod: "setSrvrtId"});


Tax1099OID.prototype.setSrvrtId = function(/*String*/ srvrtId) {
  this.srvrtId = srvrtId;
};


Tax1099OID.prototype.getTaxYear = function() {
  return this.taxYear;
};
Element.add(Tax1099OID, {name: "TAXYEAR", required: true, order: 1, attributeType: String, readMethod: "getTaxYear", writeMethod: "setTaxYear"});


Tax1099OID.prototype.setTaxYear = function(/*String*/ taxYear) {
  this.taxYear = taxYear;
};


/**
 * @return {String} the originalDisc
 */
Tax1099OID.prototype.getOriginalDisc = function() {
  return this.originalDisc;
};
Element.add(Tax1099OID, {name: "ORIGISDISC", required: false, order: 2, attributeType: String, readMethod: "getOriginalDisc", writeMethod: "setOriginalDisc"});


/**
 * @param {String} originalDisc the originalDisc to set
 */
Tax1099OID.prototype.setOriginalDisc = function(originalDisc) {
  this.originalDisc = originalDisc;
};


/**
 * @return {String} the otherPerInt
 */
Tax1099OID.prototype.getOtherPerInt = function() {
  return this.otherPerInt;
};
Element.add(Tax1099OID, {name: "OTHERPERINT", required: false, order: 3, attributeType: String, readMethod: "getOtherPerInt", writeMethod: "setOtherPerInt"});


/**
 * @param {String} otherPerInt the otherPerInt to set
 */
Tax1099OID.prototype.setOtherPerInt = function(otherPerInt) {
  this.otherPerInt = otherPerInt;
};


/**
 * @return {String} the erlWithPen
 */
Tax1099OID.prototype.getErlWithPen = function() {
  return this.erlWithPen;
};
Element.add(Tax1099OID, {name: "ERLWITHPEN", required: false, order: 4, attributeType: String, readMethod: "getErlWithPen", writeMethod: "setErlWithPen"});


/**
 * @param {String} erlWithPen the erlWithPen to set
 */
Tax1099OID.prototype.setErlWithPen = function(erlWithPen) {
  this.erlWithPen = erlWithPen;
};


/**
 * @return {String} the fedTaxWh
 */
Tax1099OID.prototype.getFedTaxWh = function() {
  return this.fedTaxWh;
};
Element.add(Tax1099OID, {name: "FEDTAXWH", required: false, order: 5, attributeType: String, readMethod: "getFedTaxWh", writeMethod: "setFedTaxWh"});


/**
 * @param {String} fedTaxWh the fedTaxWh to set
 */
Tax1099OID.prototype.setFedTaxWh = function(fedTaxWh) {
  this.fedTaxWh = fedTaxWh;
};


/**
 * @return {String} the desc
 */
Tax1099OID.prototype.getDesc = function() {
  return this.desc;
};
Element.add(Tax1099OID, {name: "DESCRIPTION", required: true, order: 6, attributeType: String, readMethod: "getDesc", writeMethod: "setDesc"});


/**
 * @param {String} desc the desc to set
 */
Tax1099OID.prototype.setDesc = function(desc) {
  this.desc = desc;
};


/**
 * @return {String} the oidOnUstres
 */
Tax1099OID.prototype.getOidOnUstres = function() {
  return this.oidOnUstres;
};
Element.add(Tax1099OID, {name: "OIDONUSTRES", required: false, order: 7, attributeType: String, readMethod: "getOidOnUstres", writeMethod: "setOidOnUstres"});


/**
 * @param {String} oidOnUstres the oidOnUstres to set
 */
Tax1099OID.prototype.setOidOnUstres = function(oidOnUstres) {
  this.oidOnUstres = oidOnUstres;
};


/**
 * @return {String} the investExp
 */
Tax1099OID.prototype.getInvestExp = function() {
  return this.investExp;
};
Element.add(Tax1099OID, {name: "INVESTEXP", required: false, order: 8, attributeType: String, readMethod: "getInvestExp", writeMethod: "setInvestExp"});


/**
 * @param {String} investExp the investExp to set
 */
Tax1099OID.prototype.setInvestExp = function(investExp) {
  this.investExp = investExp;
};


/**
 * @return {PayerAddress} the payerAddress
 */
Tax1099OID.prototype.getPayerAddress = function() {
  return this.payerAddress;
};
ChildAggregate.add(Tax1099OID, {required:true, order: 9, attributeType: PayerAddress, readMethod: "getPayerAddress", writeMethod: "setPayerAddress"});


/**
 * @param {PayerAddress} payerAddress the payerAddress to set
 */
Tax1099OID.prototype.setPayerAddress = function(payerAddress) {
  this.payerAddress = payerAddress;
};


/**
 * @return {String} the payerId
 */
Tax1099OID.prototype.getPayerId = function() {
  return this.payerId;
};
Element.add(Tax1099OID, {name: "PAYERID", required: true, order: 10, attributeType: String, readMethod: "getPayerId", writeMethod: "setPayerId"});


/**
 * @param {String} payerId the payerId to set
 */
Tax1099OID.prototype.setPayerId = function(payerId) {
  this.payerId = payerId;
};


/**
 * @return {RecAddress} the recAddress
 */
Tax1099OID.prototype.getRecAddress = function() {
  return this.recAddress;
};
ChildAggregate.add(Tax1099OID, {required:true, order: 11, attributeType: RecAddress, readMethod: "getRecAddress", writeMethod: "setRecAddress"});


/**
 * @param {RecAddress} recAddress the recAddress to set
 */
Tax1099OID.prototype.setRecAddress = function(recAddress) {
  this.recAddress = recAddress;
};


/**
 * @return {String} the recId
 */
Tax1099OID.prototype.getRecId = function() {
  return this.recId;
};
Element.add(Tax1099OID, {name: "RECID", required: true, order: 12, attributeType: String, readMethod: "getRecId", writeMethod: "setRecId"});


/**
 * @param {String} recId the recId to set
 */
Tax1099OID.prototype.setRecId = function(recId) {
  this.recId = recId;
};


/**
 * @return {String} the recAcct
 */
Tax1099OID.prototype.getRecAcct = function() {
  return this.recAcct;
};
Element.add(Tax1099OID, {name: "RECACCT", required: true, order: 13, attributeType: String, readMethod: "getRecAcct", writeMethod: "setRecAcct"});


/**
 * @param {String} recAcct the recAcct to set
 */
Tax1099OID.prototype.setRecAcct = function(recAcct) {
  this.recAcct = recAcct;
};




module.exports = Tax1099OID;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","./PayerAddress":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/PayerAddress.js","./RecAddress":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/RecAddress.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/Tax1099R.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";

var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");
var Element = require("../../../meta/Element");
var PayerAddress = require("./PayerAddress");
var RecAddress = require("./RecAddress");

/**
 * @class
 */
function Tax1099R () {

  /**
   * @name Tax1099R#srvrtId
   * @type String
   * @access private
   */
  this.srvrtId = null;

  /**
   * @name Tax1099R#taxYear
   * @type String
   * @access private
   */
  this.taxYear = null;

  /**
   * @name Tax1099R#grossDist
   * @type String
   * @access private
   */
  this.grossDist = null;

  /**
   * @name Tax1099R#taxAmt
   * @type String
   * @access private
   */
  this.taxAmt = null;

  /**
   * @name Tax1099R#taxAmtNd
   * @type String
   * @access private
   */
  this.taxAmtNd = null;

  /**
   * @name Tax1099R#capGain
   * @type String
   * @access private
   */
  this.capGain = null;

  /**
   * @name Tax1099R#fedTaxWh
   * @type String
   * @access private
   */
  this.fedTaxWh = null;

  /**
   * @name Tax1099R#empContins
   * @type String
   * @access private
   */
  this.empContins = null;

  /**
   * @name Tax1099R#netUnapEmp
   * @type String
   * @access private
   */
  this.netUnapEmp = null;

  /**
   * @name Tax1099R#distCode
   * @type String
   * @access private
   */
  this.distCode = null;

  /**
   * @name Tax1099R#iraSepSimp
   * @type String
   * @access private
   */
  this.iraSepSimp = null;

  /**
   * @name Tax1099R#annCtrctDist
   * @type String
   * @access private
   */
  this.annCtrctDist = null;

  /**
   * @name Tax1099R#totEmpCount
   * @type String
   * @access private
   */
  this.totEmpCount = null;

  /**
   * @name Tax1099R#payerAddress
   * @type PayerAddress
   * @access private
   */
  this.payerAddress = null;

  /**
   * @name Tax1099R#payerId
   * @type String
   * @access private
   */
  this.payerId = null;

  /**
   * @name Tax1099R#recAddress
   * @type RecAddress
   * @access private
   */
  this.recAddress = null;

  /**
   * @name Tax1099R#recId
   * @type String
   * @access private
   */
  this.recId = null;

  /**
   * @name Tax1099R#recAcct
   * @type String
   * @access private
   */
  this.recAcct = null;
}



Aggregate.add("TAX1099R_V100", Tax1099R);


Tax1099R.prototype.getSrvrtId = function() {
  return this.srvrtId;
};
Element.add(Tax1099R, {name: "SRVRTID",required: true , order: 0, attributeType: String, readMethod: "getSrvrtId", writeMethod: "setSrvrtId"});


Tax1099R.prototype.setSrvrtId = function(/*String*/ srvrtId) {
  this.srvrtId = srvrtId;
};


Tax1099R.prototype.getTaxYear = function() {
  return this.taxYear;
};
Element.add(Tax1099R, {name: "TAXYEAR", required: true, order: 1, attributeType: String, readMethod: "getTaxYear", writeMethod: "setTaxYear"});


Tax1099R.prototype.setTaxYear = function(/*String*/ taxYear) {
  this.taxYear = taxYear;
};


/**
 * @return {String} the grossDist
 */
Tax1099R.prototype.getGrossDist = function() {
  return this.grossDist;
};
Element.add(Tax1099R, {name: "GROSSDIST", required: true, order: 2, attributeType: String, readMethod: "getGrossDist", writeMethod: "setGrossDist"});


/**
 * @param {String} grossDist the grossDist to set
 */
Tax1099R.prototype.setGrossDist = function(grossDist) {
  this.grossDist = grossDist;
};


/**
 * @return {String} the taxAmt
 */
Tax1099R.prototype.getTaxAmt = function() {
  return this.taxAmt;
};
Element.add(Tax1099R, {name: "TAXAMT", required: false, order: 3, attributeType: String, readMethod: "getTaxAmt", writeMethod: "setTaxAmt"});


/**
 * @param {String} taxAmt the taxAmt to set
 */
Tax1099R.prototype.setTaxAmt = function(taxAmt) {
  this.taxAmt = taxAmt;
};


/**
 * @return {String} the taxAmtNd
 */
Tax1099R.prototype.getTaxAmtNd = function() {
  return this.taxAmtNd;
};
Element.add(Tax1099R, {name: "TAXAMTND", required: false, order: 4, attributeType: String, readMethod: "getTaxAmtNd", writeMethod: "setTaxAmtNd"});


/**
 * @param {String} taxAmtNd the taxAmtNd to set
 */
Tax1099R.prototype.setTaxAmtNd = function(taxAmtNd) {
  this.taxAmtNd = taxAmtNd;
};


/**
 * @return {String} the capGain
 */
Tax1099R.prototype.getCapGain = function() {
  return this.capGain;
};
Element.add(Tax1099R, {name: "CAPGAIN", required: false, order: 5, attributeType: String, readMethod: "getCapGain", writeMethod: "setCapGain"});


/**
 * @param {String} capGain the capGain to set
 */
Tax1099R.prototype.setCapGain = function(capGain) {
  this.capGain = capGain;
};


/**
 * @return {String} the fedTaxWh
 */
Tax1099R.prototype.getFedTaxWh = function() {
  return this.fedTaxWh;
};
Element.add(Tax1099R, {name: "FEDTAXWH", required: false, order: 6, attributeType: String, readMethod: "getFedTaxWh", writeMethod: "setFedTaxWh"});


/**
 * @param {String} fedTaxWh the fedTaxWh to set
 */
Tax1099R.prototype.setFedTaxWh = function(fedTaxWh) {
  this.fedTaxWh = fedTaxWh;
};


/**
 * @return {String} the empContins
 */
Tax1099R.prototype.getEmpContins = function() {
  return this.empContins;
};
Element.add(Tax1099R, {name: "EMPCONTINS", required: false, order: 7, attributeType: String, readMethod: "getEmpContins", writeMethod: "setEmpContins"});


/**
 * @param {String} empContins the empContins to set
 */
Tax1099R.prototype.setEmpContins = function(empContins) {
  this.empContins = empContins;
};


/**
 * @return {String} the netUnapEmp
 */
Tax1099R.prototype.getNetUnapEmp = function() {
  return this.netUnapEmp;
};
Element.add(Tax1099R, {name: "NETUNAPEMP", required: false, order: 8, attributeType: String, readMethod: "getNetUnapEmp", writeMethod: "setNetUnapEmp"});


/**
 * @param {String} netUnapEmp the netUnapEmp to set
 */
Tax1099R.prototype.setNetUnapEmp = function(netUnapEmp) {
  this.netUnapEmp = netUnapEmp;
};


/**
 * @return {String} the distCode
 */
Tax1099R.prototype.getDistCode = function() {
  return this.distCode;
};
Element.add(Tax1099R, {name: "DISTCODE", required: true, order: 9, attributeType: String, readMethod: "getDistCode", writeMethod: "setDistCode"});


/**
 * @param {String} distCode the distCode to set
 */
Tax1099R.prototype.setDistCode = function(distCode) {
  this.distCode = distCode;
};


/**
 * @return {String} the iraSepSimp
 */
Tax1099R.prototype.getIraSepSimp = function() {
  return this.iraSepSimp;
};
Element.add(Tax1099R, {name: "IRASEPSIMP", required: true, order: 10, attributeType: String, readMethod: "getIraSepSimp", writeMethod: "setIraSepSimp"});


/**
 * @param {String} iraSepSimp the iraSepSimp to set
 */
Tax1099R.prototype.setIraSepSimp = function(iraSepSimp) {
  this.iraSepSimp = iraSepSimp;
};


/**
 * @return {String} the annCtrctDist
 */
Tax1099R.prototype.getAnnCtrctDist = function() {
  return this.annCtrctDist;
};
Element.add(Tax1099R, {name: "ANNCTRCTDIST", required: false, order: 11, attributeType: String, readMethod: "getAnnCtrctDist", writeMethod: "setAnnCtrctDist"});


/**
 * @param {String} annCtrctDist the annCtrctDist to set
 */
Tax1099R.prototype.setAnnCtrctDist = function(annCtrctDist) {
  this.annCtrctDist = annCtrctDist;
};


/**
 * @return {String} the totEmpCount
 */
Tax1099R.prototype.getTotEmpCount = function() {
  return this.totEmpCount;
};
Element.add(Tax1099R, {name: "TOTEMPCONT", required: false, order: 12, attributeType: String, readMethod: "getTotEmpCount", writeMethod: "setTotEmpCount"});


/**
 * @param {String} totEmpCount the totEmpCount to set
 */
Tax1099R.prototype.setTotEmpCount = function(totEmpCount) {
  this.totEmpCount = totEmpCount;
};


/**
 * @return {PayerAddress} the payerAddress
 */
Tax1099R.prototype.getPayerAddress = function() {
  return this.payerAddress;
};
ChildAggregate.add(Tax1099R, {required:true, order: 13, attributeType: PayerAddress, readMethod: "getPayerAddress", writeMethod: "setPayerAddress"});


/**
 * @param {PayerAddress} payerAddress the payerAddress to set
 */
Tax1099R.prototype.setPayerAddress = function(payerAddress) {
  this.payerAddress = payerAddress;
};


/**
 * @return {String} the payerId
 */
Tax1099R.prototype.getPayerId = function() {
  return this.payerId;
};
Element.add(Tax1099R, {name: "PAYERID", required: true, order: 14, attributeType: String, readMethod: "getPayerId", writeMethod: "setPayerId"});


/**
 * @param {String} payerId the payerId to set
 */
Tax1099R.prototype.setPayerId = function(payerId) {
  this.payerId = payerId;
};


/**
 * @return {RecAddress} the recAddress
 */
Tax1099R.prototype.getRecAddress = function() {
  return this.recAddress;
};
ChildAggregate.add(Tax1099R, {required:true, order: 15, attributeType: RecAddress, readMethod: "getRecAddress", writeMethod: "setRecAddress"});


/**
 * @param {RecAddress} recAddress the recAddress to set
 */
Tax1099R.prototype.setRecAddress = function(recAddress) {
  this.recAddress = recAddress;
};


/**
 * @return {String} the recId
 */
Tax1099R.prototype.getRecId = function() {
  return this.recId;
};
Element.add(Tax1099R, {name: "RECID", required: true, order: 16, attributeType: String, readMethod: "getRecId", writeMethod: "setRecId"});


/**
 * @param {String} recId the recId to set
 */
Tax1099R.prototype.setRecId = function(recId) {
  this.recId = recId;
};


/**
 * @return {String} the recAcct
 */
Tax1099R.prototype.getRecAcct = function() {
  return this.recAcct;
};
Element.add(Tax1099R, {name: "RECACCT", required: true, order: 17, attributeType: String, readMethod: "getRecAcct", writeMethod: "setRecAcct"});


/**
 * @param {String} recAcct the recAcct to set
 */
Tax1099R.prototype.setRecAcct = function(recAcct) {
  this.recAcct = recAcct;
};




module.exports = Tax1099R;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","./PayerAddress":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/PayerAddress.js","./RecAddress":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/RecAddress.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/Tax1099Request.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";

var inherit = require("../../../util/inherit");

var T1099Request = require("../common/T1099Request");
var Aggregate = require("../../../meta/Aggregate");
var Element = require("../../../meta/Element");

/**
 * @class
 * @augments T1099Request
 */
function Tax1099Request () {

  /**
   * @name Tax1099Request#taxYear
   * @type String
   * @access private
   */
  this.taxYear = null;
}

inherit(Tax1099Request, "extends", T1099Request);


Aggregate.add("TAX1099RQ", Tax1099Request);


Tax1099Request.prototype.getTaxYear = function() {
  return this.taxYear;
};
Element.add(Tax1099Request, {name: "TAXYEAR", required: true, order: 0, attributeType: String, readMethod: "getTaxYear", writeMethod: "setTaxYear"});


Tax1099Request.prototype.setTaxYear = function(/*String*/ taxYear) {
  this.taxYear = taxYear;
};




module.exports = Tax1099Request;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../common/T1099Request":"/Users/aolson/Developer/ofx4js/src/domain/data/common/T1099Request.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/Tax1099RequestMessageSet.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";

var inherit = require("../../../util/inherit");

var MessageSetType = require("../MessageSetType");
var RequestMessageSet = require("../RequestMessageSet");
var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");
var Tax1099RequestTransaction = require("./Tax1099RequestTransaction");

/**
 * @class
 * @augments RequestMessageSet
 */
function Tax1099RequestMessageSet () {

  /**
   * @name Tax1099RequestMessageSet#taxRequestTransaction
   * @type Tax1099RequestTransaction
   * @access private
   */
  this.taxRequestTransaction = null;
}

inherit(Tax1099RequestMessageSet, "extends", RequestMessageSet);


Aggregate.add("TAX1099MSGSRQV1", Tax1099RequestMessageSet);


Tax1099RequestMessageSet.prototype.getType = function() {
  return MessageSetType.tax1099;
};


/**
 * The statement request.
 *
 * @return {Tax1099RequestTransaction} The statement request.
 */
Tax1099RequestMessageSet.prototype.getTaxRequestTransaction = function() {
  return this.taxRequestTransaction;
};
ChildAggregate.add(Tax1099RequestMessageSet, {order: 0, attributeType: Tax1099RequestTransaction, readMethod: "getTaxRequestTransaction", writeMethod: "setTaxRequestTransaction"});


/**
 * The statement request.
 *
 * @param {Tax1099RequestTransaction} taxRequestTransaction The statement request.
 */
Tax1099RequestMessageSet.prototype.setTaxRequestTransaction = function(taxRequestTransaction) {
  this.taxRequestTransaction = taxRequestTransaction;
};


// Inherited.
Tax1099RequestMessageSet.prototype.getRequestMessages = function() {
  var requestMessages = [];
  if (this.getTaxRequestTransaction() !== null) {
    requestMessages.push(this.getTaxRequestTransaction());
  }
  return requestMessages;
};




module.exports = Tax1099RequestMessageSet;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../MessageSetType":"/Users/aolson/Developer/ofx4js/src/domain/data/MessageSetType.js","../RequestMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/RequestMessageSet.js","./Tax1099RequestTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/Tax1099RequestTransaction.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/Tax1099RequestTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";

var inherit = require("../../../util/inherit");

var TransactionWrappedRequestMessage = require("../TransactionWrappedRequestMessage");
var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");
var Tax1099Request = require("./Tax1099Request");

/**
 * @class
 * @augments TransactionWrappedRequestMessage
 */
function Tax1099RequestTransaction () {

  /**
   * @name Tax1099RequestTransaction#tax1099Request
   * @type Tax1099Request
   * @access private
   */
  this.tax1099Request = null;
}

inherit(Tax1099RequestTransaction, "extends", new TransactionWrappedRequestMessage(Tax1099Request));


Aggregate.add("TAX1099TRNRQ", Tax1099RequestTransaction);


/**
 * The tax1099Request.
 *
 * @return {Tax1099Request} The tax1099Request.
 */
Tax1099RequestTransaction.prototype.getTax1099Request = function() {
  return this.tax1099Request;
};
ChildAggregate.add(Tax1099RequestTransaction, {required: true, order: 30, attributeType: Tax1099Request, readMethod: "getTax1099Request", writeMethod: "setTax1099Request"});


/**
 * The tax1099Request.
 *
 * @param {Tax1099Request} tax1099Request The message.
 *
 */
Tax1099RequestTransaction.prototype.setTax1099Request = function(tax1099Request) {
  this.tax1099Request = tax1099Request;
};


// Inherited.
Tax1099RequestTransaction.prototype.setWrappedMessage = function(/*Tax1099Request*/ tax1099Request) {
  this.setTax1099Request(tax1099Request);
};




module.exports = Tax1099RequestTransaction;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../TransactionWrappedRequestMessage":"/Users/aolson/Developer/ofx4js/src/domain/data/TransactionWrappedRequestMessage.js","./Tax1099Request":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/Tax1099Request.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/Tax1099Response.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";

var inherit = require("../../../util/inherit");

var T1099Response = require("../common/T1099Response");
var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");
var Tax1099DIV = require("./Tax1099DIV");
var Tax1099INT = require("./Tax1099INT");
var Tax1099R = require("./Tax1099R");
var Tax1099B = require("./Tax1099B");
var Tax1099MISC = require("./Tax1099MISC");
var Tax1099OID = require("./Tax1099OID");

/**
 * @class
 * @augments T1099Response
 */
function Tax1099Response () {

  /**
   * @name Tax1099Response#tax1099div
   * @type Tax1099DIV
   * @access private
   */
  this.tax1099div = null;

  /**
   * @name Tax1099Response#lstTax1099DIV
   * @type List<Tax1099DIV>
   * @access private
   */
  this.lstTax1099DIV = null;

  /**
   * @name Tax1099Response#lstTax1099INT
   * @type List<Tax1099INT>
   * @access private
   */
  this.lstTax1099INT = null;

  /**
   * @name Tax1099Response#lstTax1099R
   * @type List<Tax1099R>
   * @access private
   */
  this.lstTax1099R = null;

  /**
   * @name Tax1099Response#lstTax1099B
   * @type List<Tax1099B>
   * @access private
   */
  this.lstTax1099B = null;

  /**
   * @name Tax1099Response#lstTax1099MISC
   * @type List<Tax1099MISC>
   * @access private
   */
  this.lstTax1099MISC = null;

  /**
   * @name Tax1099Response#lstTax1099OID
   * @type List<Tax1099OID>
   * @access private
   */
  this.lstTax1099OID = null;
}

inherit(Tax1099Response, "extends", T1099Response);


Aggregate.add("TAX1099RS", Tax1099Response);


/**
 * @return {Tax1099DIV[]} the lstTax1099DIV
 */
Tax1099Response.prototype.getLstTax1099DIV = function() {
  return this.lstTax1099DIV;
};
ChildAggregate.add(Tax1099Response, {required: false, order: 0, attributeType: Array, collectionEntryType: Tax1099DIV, readMethod: "getLstTax1099DIV", writeMethod: "setLstTax1099DIV"});


/**
 * @param {Tax1099DIV[]} lstTax1099DIV
 *            the lstTax1099DIV to set
 */
Tax1099Response.prototype.setLstTax1099DIV = function(lstTax1099DIV) {
  this.lstTax1099DIV = lstTax1099DIV;
};


Tax1099Response.prototype.getResponseMessageName = function() {
  return "1099 Tax details";
};


/**
 * @return {Tax1099INT[]} the lstTax1099INT
 */
Tax1099Response.prototype.getLstTax1099INT = function() {
  return this.lstTax1099INT;
};
ChildAggregate.add(Tax1099Response, {required: false, order: 1, attributeType: Array, collectionEntryType: Tax1099INT, readMethod: "getLstTax1099INT", writeMethod: "setLstTax1099INT"});


/**
 * @param {Tax1099INT[]} lstTax1099INT the lstTax1099INT to set
 */
Tax1099Response.prototype.setLstTax1099INT = function(lstTax1099INT) {
  this.lstTax1099INT = lstTax1099INT;
};


/**
 * @return {Tax1099R[]} the lstTax1099R
 */
Tax1099Response.prototype.getLstTax1099R = function() {
  return this.lstTax1099R;
};
ChildAggregate.add(Tax1099Response, {required: false, order: 2, attributeType: Array, collectionEntryType: Tax1099R, readMethod: "getLstTax1099R", writeMethod: "setLstTax1099R"});


/**
 * @param {Tax1099R[]} lstTax1099R the lstTax1099R to set
 */
Tax1099Response.prototype.setLstTax1099R = function(lstTax1099R) {
  this.lstTax1099R = lstTax1099R;
};


/**
 * @return {Tax1099B[]} the lstTax1099B
 */
Tax1099Response.prototype.getLstTax1099B = function() {
  return this.lstTax1099B;
};
ChildAggregate.add(Tax1099Response, {required: false, order: 3, attributeType: Array, collectionEntryType: Tax1099B, readMethod: "getLstTax1099B", writeMethod: "setLstTax1099B"});


/**
 * @param {Tax1099B[]} lstTax1099B the lstTax1099B to set
 */
Tax1099Response.prototype.setLstTax1099B = function(lstTax1099B) {
  this.lstTax1099B = lstTax1099B;
};


/**
 * @return {Tax1099MISC[]} the lstTax1099MISC
 */
Tax1099Response.prototype.getLstTax1099MISC = function() {
  return this.lstTax1099MISC;
};
ChildAggregate.add(Tax1099Response, {required: false, order: 4, attributeType: Array, collectionEntryType: Tax1099MISC, readMethod: "getLstTax1099MISC", writeMethod: "setLstTax1099MISC"});


/**
 * @param {Tax1099MISC[]} lstTax1099MISC the lstTax1099MISC to set
 */
Tax1099Response.prototype.setLstTax1099MISC = function(lstTax1099MISC) {
  this.lstTax1099MISC = lstTax1099MISC;
};


/**
 * @return {Tax1099OID[]} the lstTax1099OID
 */
Tax1099Response.prototype.getLstTax1099OID = function() {
  return this.lstTax1099OID;
};
ChildAggregate.add(Tax1099Response, {required: false, order:5, attributeType: Array, collectionEntryType: Tax1099OID, readMethod: "getLstTax1099OID", writeMethod: "setLstTax1099OID"});


/**
 * @param {Tax1099OID[]} lstTax1099OID the lstTax1099OID to set
 */
Tax1099Response.prototype.setLstTax1099OID = function(lstTax1099OID) {
  this.lstTax1099OID = lstTax1099OID;
};




module.exports = Tax1099Response;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../common/T1099Response":"/Users/aolson/Developer/ofx4js/src/domain/data/common/T1099Response.js","./Tax1099B":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/Tax1099B.js","./Tax1099DIV":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/Tax1099DIV.js","./Tax1099INT":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/Tax1099INT.js","./Tax1099MISC":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/Tax1099MISC.js","./Tax1099OID":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/Tax1099OID.js","./Tax1099R":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/Tax1099R.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/Tax1099ResponseMessageSet.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";

var inherit = require("../../../util/inherit");

var MessageSetType = require("../MessageSetType");
var ResponseMessageSet = require("../ResponseMessageSet");
var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");
var Tax1099ResponseTransaction = require("./Tax1099ResponseTransaction");

/**
 * @class
 * @augments ResponseMessageSet
 */
function Tax1099ResponseMessageSet () {

  /**
   * @name Tax1099ResponseMessageSet#taxResponseTransaction
   * @type List<Tax1099ResponseTransaction>
   * @access private
   */
  this.taxResponseTransaction = null;
}

inherit(Tax1099ResponseMessageSet, "extends", ResponseMessageSet);


Aggregate.add("TAX1099MSGSRSV1", Tax1099ResponseMessageSet);


Tax1099ResponseMessageSet.prototype.getType = function() {
  return MessageSetType.tax1099;
};


/**
 * The taxResponseTransaction list.
 *
 * Most OFX files have a single statement response, except MT2OFX
 * which outputs OFX with multiple statement responses
 * in a single banking response message set.
 *
 * @return {Tax1099ResponseTransaction[]} The taxResponseTransaction list.
 */
Tax1099ResponseMessageSet.prototype.getTaxResponseTransaction = function() {
  return this.taxResponseTransaction;
};
ChildAggregate.add(Tax1099ResponseMessageSet, {order: 0, attributeType: Array, collectionEntryType: Tax1099ResponseTransaction, readMethod: "getTaxResponseTransaction", writeMethod: "setTaxResponseTransaction"});


/**
 * The taxResponseTransaction.
 *
 * @param {Tax1099ResponseTransaction[]} taxResponseTransaction The statement responses.
 */
Tax1099ResponseMessageSet.prototype.setTaxResponseTransaction = function(taxResponseTransaction) {
  this.taxResponseTransaction = taxResponseTransaction;
};


// Inherited.
Tax1099ResponseMessageSet.prototype.getResponseMessages = function() {
  return this.taxResponseTransaction;
};


/**
 * The first statement response.
 *
 * @return {Tax1099ResponseTransaction} the first bank statement response.
 * @deprecated Use getStatementResponses() because sometimes there are multiple responses
 */
Tax1099ResponseMessageSet.prototype.getStatementResponse = function() {
  return this.taxResponseTransaction === null || this.taxResponseTransaction.isEmpty() ? null : this.taxResponseTransaction.get(0);
};


Tax1099ResponseMessageSet.prototype.setTaxResponseTransaction = function(/*Tax1099ResponseTransaction*/ taxResponseTransaction) {
  this.taxResponseTransaction = taxResponseTransaction;
};




module.exports = Tax1099ResponseMessageSet;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../MessageSetType":"/Users/aolson/Developer/ofx4js/src/domain/data/MessageSetType.js","../ResponseMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/ResponseMessageSet.js","./Tax1099ResponseTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/Tax1099ResponseTransaction.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/Tax1099ResponseTransaction.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";

var inherit = require("../../../util/inherit");

var TransactionWrappedResponseMessage = require("../TransactionWrappedResponseMessage");
var Aggregate = require("../../../meta/Aggregate");
var ChildAggregate = require("../../../meta/ChildAggregate");
var Tax1099Response = require("./Tax1099Response");

/**
 * @class
 * @augments TransactionWrappedResponseMessage
 */
function Tax1099ResponseTransaction () {

  /**
   * @name Tax1099ResponseTransaction#tax1099Response
   * @type Tax1099Response
   * @access private
   */
  this.tax1099Response = null;
}

inherit(Tax1099ResponseTransaction, "extends", new TransactionWrappedResponseMessage(Tax1099Response));


Aggregate.add("TAX1099TRNRS", Tax1099ResponseTransaction);


/**
 * The tax1099Response.
 *
 * @return {Tax1099Response} The tax1099Response.
 */
Tax1099ResponseTransaction.prototype.getTax1099Response = function() {
  return this.tax1099Response;
};
ChildAggregate.add(Tax1099ResponseTransaction, {required:false, order: 2, attributeType: Tax1099Response, readMethod: "getTax1099Response", writeMethod: "setTax1099Response"});


/**
 * The tax1099Response.
 *
 * @param {Tax1099Response} tax1099Response The message.
 */
Tax1099ResponseTransaction.prototype.setTax1099Response = function(tax1099Response) {
  this.tax1099Response = tax1099Response;
};


// Inherited.
Tax1099ResponseTransaction.prototype.getWrappedMessage = function() {
  return this.getTax1099Response();
};




module.exports = Tax1099ResponseTransaction;

},{"../../../meta/Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","../../../meta/ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","../../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../TransactionWrappedResponseMessage":"/Users/aolson/Developer/ofx4js/src/domain/data/TransactionWrappedResponseMessage.js","./Tax1099Response":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/Tax1099Response.js"}],"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/index.js":[function(require,module,exports){
"use strict";

module.exports = {
  ExtDBInfo: require("./ExtDBInfo"),
  PayerAddress: require("./PayerAddress"),
  ProcDet: require("./ProcDet"),
  RecAddress: require("./RecAddress"),
  Tax1099B: require("./Tax1099B"),
  Tax1099DIV: require("./Tax1099DIV"),
  Tax1099INT: require("./Tax1099INT"),
  Tax1099MISC: require("./Tax1099MISC"),
  Tax1099OID: require("./Tax1099OID"),
  Tax1099R: require("./Tax1099R"),
  Tax1099Request: require("./Tax1099Request"),
  Tax1099RequestMessageSet: require("./Tax1099RequestMessageSet"),
  Tax1099RequestTransaction: require("./Tax1099RequestTransaction"),
  Tax1099Response: require("./Tax1099Response"),
  Tax1099ResponseMessageSet: require("./Tax1099ResponseMessageSet"),
  Tax1099ResponseTransaction: require("./Tax1099ResponseTransaction"),
};

},{"./ExtDBInfo":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/ExtDBInfo.js","./PayerAddress":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/PayerAddress.js","./ProcDet":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/ProcDet.js","./RecAddress":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/RecAddress.js","./Tax1099B":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/Tax1099B.js","./Tax1099DIV":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/Tax1099DIV.js","./Tax1099INT":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/Tax1099INT.js","./Tax1099MISC":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/Tax1099MISC.js","./Tax1099OID":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/Tax1099OID.js","./Tax1099R":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/Tax1099R.js","./Tax1099Request":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/Tax1099Request.js","./Tax1099RequestMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/Tax1099RequestMessageSet.js","./Tax1099RequestTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/Tax1099RequestTransaction.js","./Tax1099Response":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/Tax1099Response.js","./Tax1099ResponseMessageSet":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/Tax1099ResponseMessageSet.js","./Tax1099ResponseTransaction":"/Users/aolson/Developer/ofx4js/src/domain/data/tax1099/Tax1099ResponseTransaction.js"}],"/Users/aolson/Developer/ofx4js/src/domain/index.js":[function(require,module,exports){
"use strict";

module.exports = {
  data: require("./data/index"),
};

},{"./data/index":"/Users/aolson/Developer/ofx4js/src/domain/data/index.js"}],"/Users/aolson/Developer/ofx4js/src/io/AggregateAttribute.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var AggregateIntrospector = require("./AggregateIntrospector");

/**
 * A generic descriptor for an attribute of an OFX aggregate.
 *
 * @class
 */
function AggregateAttribute(type, info) {

  /**
   * @name AggregateAttribute#readMethod
   * @type Method
   * @access private
   */
  this.readMethod = null;

  /**
   * @name AggregateAttribute#writeMethod
   * @type Method
   * @access private
   */
  this.writeMethod = null;

  /**
   * @name AggregateAttribute#attributeType
   * @type Class
   * @access private
   */
  this.attributeType = null;

  /**
   * @name AggregateAttribute#collectionEntryType
   * @type Class
   * @access private
   */
  this.collectionEntryType = null;

  /**
   * @name AggregateAttribute#name
   * @type String
   * @access private
   */
  this.name = null;

  /**
   * @name AggregateAttribute#order
   * @type int
   * @access private
   */
  this.order = null;

  /**
   * @name AggregateAttribute#required
   * @type boolean
   * @access private
   */
  this.required = null;

  /**
   * @name AggregateAttribute#type
   * @type Type
   * @access private
   */
  this.type = type;

  /**
   * @name AggregateAttribute#toString_
   * @type String
   * @access private
   */
  this.toString_ = null;

  /**
   * @name AggregateAttribute#collection
   * @type boolean
   * @access private
   */
  this.collection = null;
  
  switch(type) {
    case AggregateAttribute.Type.CHILD_AGGREGATE:
      this.AggregateAttributeForChildAggregate(info);
      break;
      
    case AggregateAttribute.Type.ELEMENT:
      this.AggregateAttributeForElement(info);
      break;
      
    default:
      throw new Error("illegal invocation");
  }
}


var Type = AggregateAttribute.Type = {
  CHILD_AGGREGATE: 0,
  ELEMENT: 1
};


AggregateAttribute.prototype.AggregateAttributeForElement = function(elementInfo) {
  this.readMethod = elementInfo.readMethod;
  this.writeMethod = elementInfo.writeMethod;
  if (this.readMethod === null) {
    throw new Error("Illegal property '" + elementInfo.name + "' for aggregate: no read method.");
  }
  else if (this.writeMethod === null) {
    throw new Error("Illegal property '" + elementInfo.name + "' for aggregate: no write method.");
  }

  this.attributeType = elementInfo.attributeType;
  this.collectionEntryType = null;
  this.name = elementInfo.name;
  this.order = elementInfo.order;
  this.required = elementInfo.required;
  this.type = Type.ELEMENT;
  this.toString_ = "Element '" + this.name + "'";
  this.collection = false;

  //todo: validate known/supported element types here?
};


AggregateAttribute.prototype.AggregateAttributeForChildAggregate = function(childAggregate) {
  this.readMethod = childAggregate.readMethod;
  this.writeMethod = childAggregate.writeMethod;
  if (this.readMethod === null) {
    throw new Error("Illegal property '" + childAggregate.name + "' for aggregate: no read method.");
  }
  else if (this.writeMethod === null) {
    throw new Error("Illegal property '" + childAggregate.name + "' for aggregate: no write method.");
  }

  this.collection = (childAggregate.collectionEntryType !== null);
  if (this.collection) {
    this.name = null;
    this.collectionEntryType = childAggregate.collectionEntryType;
  }
  else if ("##not_specified##".equals(childAggregate.name)) {
    var aggregateInfo = AggregateIntrospector.getAggregateInfo(childAggregate.attributeType);
    if (aggregateInfo === null) {
      throw new Error("Illegal child aggregate type '" + childAggregate.attributeType + "': no aggregate information available.");
    }

    this.name = aggregateInfo.getName();
    if ("##not_specified##".equals(this.name)) {
      throw new Error("Illegal child aggregate type '" + childAggregate.attributeType + "': a child aggregate name must be specified.");
    }
    this.collectionEntryType = null;
  }
  else {
    this.name = childAggregate.name;
    this.collectionEntryType = null;
  }

  this.order = childAggregate.order();
  this.required = childAggregate.required();
  this.type = Type.CHILD_AGGREGATE;
  this.toString_ = "ChildAggregate '" + this.name + "'";
};


AggregateAttribute.prototype.get = function(/*Object*/ instance) {
  return this.readMethod.invoke(instance);
};


AggregateAttribute.prototype.set = function(/*Object*/ value, /*Object*/ instance) {
  if (this.collection) {
    var collection = this.get(instance);
    if (collection === null) {
      collection = [];
    }
    collection.push(value);
    value = collection;
  }

  this.writeMethod.invoke(instance, value);
};


AggregateAttribute.prototype.getAttributeType = function() {
  return this.attributeType;
};


AggregateAttribute.prototype.getCollectionEntryType = function() {
  return this.collectionEntryType;
};


AggregateAttribute.prototype.getName = function() {
  return this.name;
};


AggregateAttribute.prototype.isRequired = function() {
  return this.required;
};


AggregateAttribute.prototype.getOrder = function() {
  return this.order;
};


AggregateAttribute.prototype.getType = function() {
  return this.type;
};


AggregateAttribute.prototype.compareTo = function(/*AggregateAttribute*/ other) {
  return this.order - other.order;
};


AggregateAttribute.prototype.isCollection = function() {
  return this.collection;
};


// @Override
AggregateAttribute.prototype.toString = function() {
  return this.toString_;
};




module.exports = AggregateAttribute;

},{"./AggregateIntrospector":"/Users/aolson/Developer/ofx4js/src/io/AggregateIntrospector.js"}],"/Users/aolson/Developer/ofx4js/src/io/AggregateInfo.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var AggregateAttribute = require("./AggregateAttribute");

/**
 * Holder for meta information about an aggregate class.
 *
 * @class
 */
function AggregateInfo(name, clazz) {
  
  /**
   * @name AggregateInfo#clazz
   * @type Class
   * @access private
   */
  this.clazz = clazz;

  /**
   * @name AggregateInfo#name
   * @type String
   * @access private
   */
  this.name = name;

  /**
   * @name AggregateInfo#attributes
   * @type AggregateAttribute[]
   * @access private
   */
  this.attributes = null;

  /**
   * @name AggregateInfo#headers
   * @type object
   */
  this.headers = {};
}


AggregateInfo.prototype.addChildAggregate = function(childAggregateInfo) {
  var attribute = new AggregateAttribute(AggregateAttribute.Type.CHILD_AGGREGATE, childAggregateInfo);
  this.attributes.push(attribute);
};

AggregateInfo.prototype.addElement = function(elementInfo) {
  var attribute = new AggregateAttribute(AggregateAttribute.Type.ELEMENT, elementInfo);
  this.attributes.push(attribute);
};

AggregateInfo.prototype.addHeader = function(options) {
  console.assert(options.name);
  this.headers[options.name] = options;
};


/**
 * The name of the aggregate.
 *
 * @return {String} The name of the aggregate.
 */
AggregateInfo.prototype.getName = function() {
  return this.name;
};


/**
 * The attributes.
 *
 * @return {AggregateAttribute[]} The attributes.
 */
AggregateInfo.prototype.getAttributes = function() {
  return this.attributes;
};


/**
 * Get the attribute by the specified name.
 *
 * @param {String} name The name of the attribute.
 * @param {int} orderHint The order at which the attribute should come after in case there are more than one candidates.
 * @param {Class} [assignableTo=null] The class this attribute must be assignable to
 * @return {AggregateAttribute} The attribute by the specified name,
 * or if there are more than one by that name,
 * the first one after the specified order,
 * or if there are none then the first collection that
 * comes after the order hint, or the latest if there
 * are none that come after the order hint, or null.
 */
AggregateInfo.prototype.getAttribute = function(name, orderHint, assignableTo) {
  var candidates = [];
  var collectionBucket = null;
  for (var attribute in this.attributes) {
    if (name.equals(attribute.getName())) {
      candidates.add(attribute);
    }
    else if (attribute.isCollection()) {
      if (assignableTo !== null) {
        // Verify it's the right generic type.
        var entryType = attribute.getCollectionEntryType();
        if (entryType !== null && !entryType.isAssignableFrom(assignableTo)) { //ARO_TODO
          // Collection is of wrong type.
          continue;
        }
      }
      if (collectionBucket === null || collectionBucket.getOrder() < orderHint) {
        //the default is the first collection that comes after the order hint, or the latest if there are none that come after the order hint.
        collectionBucket = attribute;
      }
    }
  }

  if (!candidates.isEmpty()) {
    if (candidates.length === 1) {
      return candidates[0];
    }
    else {
      for (var candidate in candidates) {
        if (candidate.getOrder() >= orderHint) {
          return candidate;
        }
      }
    }
  }

  return collectionBucket;
};


/**
 * Whether this aggregate has headers.
 *
 * @return {boolean} Whether this aggregate has headers.
 */
AggregateInfo.prototype.hasHeaders = function() {
  return this.headers.length > 0;
};


AggregateInfo.prototype.getMethod = function(header, name) {
  console.assert(header[name]);
  var fcn = this.clazz[header[name]];
  console.assert(fcn && (typeof(fcn) === "function"));
  return fcn;
};

/**
 * Get the headers defined by the specific aggregate instance.
 *
 * @param {Object} instance The aggregate instance.
 * @return {Object} The headers.
 */
AggregateInfo.prototype.getHeaders = function(instance) {
  var headers = {};
  for (var name in this.headers) {
    var header = this.headers[name];
    var readMethod = this.getMethod(header, "readMethod");
    var headerValue = readMethod.call(instance);
    headers[header.name] = headerValue;
  }
  return headers;
};


/**
 * The type of the specified header.
 *
 * @param {String} name The header name.
 * @return {Class} The header type, or null if no header by the specified name exists.
 */
AggregateInfo.prototype.getHeaderType = function(name) {
  for(var header in this.headers) {
    if(header.name === name) {
      return header.attributeType;
    }
  }
  return null;
};


/**
 * Set the header value for the specified instance.
 *
 * @param {Object} instance The instance.
 * @param {String} name     The name of the header.
 * @param {Object} value    the value of the header.
 */
AggregateInfo.prototype.setHeader = function(instance, name, value) {
  if (this.headers[name]) {
    var header = this.headers[name];
    var writeMethod = this.getMethod(header, "writeMethod");
    writeMethod.call(instance, value);
  }
};




module.exports = AggregateInfo;

},{"./AggregateAttribute":"/Users/aolson/Developer/ofx4js/src/io/AggregateAttribute.js"}],"/Users/aolson/Developer/ofx4js/src/io/AggregateIntrospector.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var AggregateInfo = require("./AggregateInfo");


var AGGREGATE_CLASSES_BY_NAME = {};


/**
 * Introspector for aggregate information.
 *
 * @class
 */
var AggregateIntrospector = {};


/**
 * Get the aggregate meta information for the specified class.
 *
 * @param clazz the aggregate class.
 * @return {AggregateInfo} The aggregate meta information, or null if the class isn't an aggregate.
 */
AggregateIntrospector.getAggregateInfo = function(clazz) {
  return clazz.Aggregate;
};

/**
 * Find the aggregate class by name.
 *
 * @param {String} aggregateName The name of the aggregate.
 * @return The aggregate class.
 */
AggregateIntrospector.findAggregateByName = function(aggregateName) {
  return AGGREGATE_CLASSES_BY_NAME.get(aggregateName);
};



AggregateIntrospector.addAggregate = function(name, clazz) {
  console.assert(!(name in AGGREGATE_CLASSES_BY_NAME));
  AGGREGATE_CLASSES_BY_NAME[name] = clazz;
  console.assert(!clazz.Aggregate);
  clazz.Aggregate = new AggregateInfo(name, clazz);
};


AggregateIntrospector.addChildAggregate = function(clazz, options) {
  var aggregateInfo = AggregateIntrospector.getAggregateInfo(clazz);
  console.assert(aggregateInfo);
  if(aggregateInfo) {
    aggregateInfo.addChildAggregate(options);
  }
};


AggregateIntrospector.addElement = function(clazz, options) {
  var aggregateInfo = AggregateIntrospector.getAggregateInfo(clazz);
  console.assert(aggregateInfo);
  if(aggregateInfo) {
    aggregateInfo.addElement(options);
  }
};

AggregateIntrospector.addHeader = function(clazz, options) {
  var aggregateInfo = AggregateIntrospector.getAggregateInfo(clazz);
  console.assert(aggregateInfo);
  if(aggregateInfo) {
    aggregateInfo.addHeader(options);
  }
};


module.exports = AggregateIntrospector;

},{"./AggregateInfo":"/Users/aolson/Developer/ofx4js/src/io/AggregateInfo.js"}],"/Users/aolson/Developer/ofx4js/src/io/BaseOFXReader.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../util/inherit");
var DefaultHandler = require("./DefaultHandler");
var OFXReader = require("./OFXReader");
var OFXV2ContentHandler = require("./OFXV2ContentHandler");
var sax = require("sax");


/**
 * @type Log
 */
var LOG = function() { console.log.apply(console, arguments); };

/**
 * @type RegExp
 */
var OFX_2_PROCESSING_INSTRUCTION_PATTERN = /<\\?OFX ([^\\?]+)\\?>/;


/**
 * Base class for an OFX reader.  Parses the headers and determines whether we're parsing an
 * OFX v2 or OFX v1 element.  For OFX v2, uses a standard SAX library.
 *
 * @class
 */
function BaseOFXReader () {
  /**
   * @name BaseOFXReader#contentHandler
   * @type OFXHandler
   * @access private
   */
  this.contentHandler = new DefaultHandler();
}

inherit(BaseOFXReader, "implements", OFXReader);




/**
 * The content handler.
 *
 * @return {OFXHandler} The content handler.
 */
BaseOFXReader.prototype.getContentHandler = function() {
  return this.contentHandler;
};


/**
 * The content handler.
 *
 * @param {OFXHandler} handler The content handler.
 */
BaseOFXReader.prototype.setContentHandler = function(handler) {
  this.contentHandler = handler;
};


function arraysEqual(a1, a2) {
  if(a1.length !== a2.length) {
    return false;
  }
  for(var i=0; i<a1.length; i++) {
    if(a1[i] !== a2[i]) {
      return false;
    }
  }
  return true;
}


/**
 * Parse the reader, including the headers.
 *
 * @param {Reader} reader The reader to parse.
 */
BaseOFXReader.prototype.parse = function(reader) {
  var header = "";
  var firstElementStart = this.getFirstElementStart();
  var buffer = new Array(firstElementStart.length);
  reader.mark(firstElementStart.length);
  var ch = reader.read(buffer);
  while ((ch != -1) && (!arraysEqual(buffer, firstElementStart))) {
    if (!this.contains(buffer, '<')) {
      //if the buffer contains a '<', then we might already have marked the beginning.
      reader.mark(firstElementStart.length);
    }
    ch = reader.read();
    var shifted = this.shiftAndAppend(buffer, ch);
    header += shifted;
  }

  if (ch == -1) {
    throw new Error("Invalid OFX: no root <OFX> element!");
  }
  else {
    var matches = OFX_2_PROCESSING_INSTRUCTION_PATTERN.match(header);
    if (matches) {
      LOG("Processing OFX 2 header...");
      this.processOFXv2Headers(matches[1]);
      reader.reset();
      this.parseV2FromFirstElement(reader);
    }
    else {
      LOG("Processing OFX 1 headers...");
      this.processOFXv1Headers(header);
      reader.reset();
      this.parseV1FromFirstElement(reader);
    }
  }
};


/**
 * The first characters of the first OFX element, '<', 'O', 'F', 'X'
 *
 * @return {} The first characters of the OFX element.
 */
BaseOFXReader.prototype.getFirstElementStart = function() {
  return [ '<', 'O', 'F', 'X' ];
};


/**
 * Whether the specified buffer contains the specified character.
 *
 * @param {} buffer The buffer.
 * @param {} c The character to search for.
 * @return {boolean} Whether the specified buffer contains the specified character.
 */
BaseOFXReader.prototype.contains = function(buffer, /*char*/ c) {
  for (var ch in buffer) {
    if (ch === c) {
      return true;
    }
  }
  return false;
};


BaseOFXReader.prototype.shiftAndAppend = function(buffer, /*char*/ c) {
  var shifted = buffer[0];
  for (var i = 0; i + 1 < buffer.length; i++) {
    buffer[i] = buffer[i + 1];
  }
  buffer[buffer.length - 1] = c;
  return shifted;
};


/**
 * Parse an OFX version 1 stream from the first OFX element (defined by the {@link #getFirstElementStart() first element characters}).
 *
 * @param {Reader} reader The reader.
 */
BaseOFXReader.prototype.parseV1FromFirstElement = function(text) {
  var strict = false;
  var parser = sax.parser(strict);
  var handler = new OFXV2ContentHandler(this.getContentHandler());
  handler.install(parser);
  parser.write(text);
};


/**
 * Parse an OFX version 2 stream from the first OFX element (defined by the {@link #getFirstElementStart() first element characters}).
 *
 * @param {string} text The text.
 */
BaseOFXReader.prototype.parseV2FromFirstElement = function(text) {
  var strict = true;
  var parser = sax.parser(strict);
  var handler = new OFXV2ContentHandler(this.getContentHandler());
  handler.install(parser);
  parser.write(text);
};

/**
 * Process the given characters as OFX version 1 headers.
 *
 * @param {String} chars The characters to process.
 */
BaseOFXReader.prototype.processOFXv1Headers = function(chars) {
  var lines = chars.split(/(\n|\r\n)/);
  for(var line in lines) {
    var colonIndex = line.indexOf(':');
    if (colonIndex >= 0) {
      var name = line.substring(0, colonIndex);
      var value = line.length() > colonIndex ? line.substring(colonIndex + 1) : "";
      this.contentHandler.onHeader(name, value);
    }
  }
};

/**
 * Process the given characters as OFX version 2 headers.
 *
 * @param {String} chars The characters to process.
 */
BaseOFXReader.prototype.processOFXv2Headers = function(chars) {
  var nameValuePairs = chars.split("\\s+");
  for (var nameValuePair in nameValuePairs) {
    var equalsIndex = nameValuePair.indexOf('=');
    if (equalsIndex >= 0) {
      var name = nameValuePair.substring(0, equalsIndex);
      var value = nameValuePair.length() > equalsIndex ? nameValuePair.substring(equalsIndex + 1) : "";
      value = value.replace('"', ' ');
      value = value.replace('\'', ' ');
      value = value.trim();
      this.contentHandler.onHeader(name, value);
    }
  }
};




module.exports = BaseOFXReader;

},{"../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","./DefaultHandler":"/Users/aolson/Developer/ofx4js/src/io/DefaultHandler.js","./OFXReader":"/Users/aolson/Developer/ofx4js/src/io/OFXReader.js","./OFXV2ContentHandler":"/Users/aolson/Developer/ofx4js/src/io/OFXV2ContentHandler.js","sax":"/Users/aolson/Developer/ofx4js/node_modules/sax/lib/sax.js"}],"/Users/aolson/Developer/ofx4js/src/io/DefaultHandler.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../util/inherit");
var OFXHandler = require("./OFXHandler");

/**
 * Default (no-op) implementation of an OFX handler.
 *
 * @class
 */
function DefaultHandler () {
}

inherit(DefaultHandler, "implements", OFXHandler);




DefaultHandler.prototype.onHeader = function(/*name, value*/) {
};


DefaultHandler.prototype.onElement = function(/*name, value*/) {
};


DefaultHandler.prototype.startAggregate = function(/*aggregateName*/) {
};


DefaultHandler.prototype.endAggregate = function(/*aggregateName*/) {
};




module.exports = DefaultHandler;

},{"../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","./OFXHandler":"/Users/aolson/Developer/ofx4js/src/io/OFXHandler.js"}],"/Users/aolson/Developer/ofx4js/src/io/OFXAggregate.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";


/**
 * An OFX aggregate is just an aggregate of name-value pairs that identify the elements and element values of the aggregate.
 * The element values can strings or another (sub)aggregate.  The implementation of a
 *
 * @class
 */
function OFXAggregate() {
}

/**
 * The name of the OFX aggregate.
 *
 * @return {String} The name of the aggregate.
 */
OFXAggregate.prototype.getName = function() { throw new Error("not implemented"); };

/**
 * Whether this aggregate contains the specified element.
 *
 * @param {String} elementName The name of the element.
 * @return {boolean} Whether this aggregate contains the specified element.
 */
OFXAggregate.prototype.containsElement = function(/*elementName*/) { throw new Error("not implemented"); };

/**
 * The element names of this aggregate.
 *
 * @return {String[]} The element names of this aggregate.
 */
OFXAggregate.prototype.elementNames = function() { throw new Error("not implemented"); };

/**
 * The value of the element.  This will be either a string or another OFXAggregate.
 *
 * @param {String} elementName The name of the element.
 * @return {Object} The value of the specified element.
 */
OFXAggregate.prototype.getElementValue = function(/*elementName*/) { throw new Error("not implemented"); };


module.exports = OFXAggregate;

},{}],"/Users/aolson/Developer/ofx4js/src/io/OFXHandler.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * Handler for events during OFX parsing.
 *
 * @author Ryan Heaton
 */
function OFXHandler() {
}

/**
 * Handler an OFX header.
 *
 * @param {String} name The name of the header.
 * @param {String} value The value of the header.
 */
OFXHandler.prototype.onHeader = function(/*name, value*/) { throw new Error("not implemented"); };

/**
 * Handle a new OFX element.
 *
 * @param {String} name The name of the element.
 * @param {String} value The value of the element.
 */
OFXHandler.prototype.onElement = function(/*name, value*/) { throw new Error("not implemented"); };

/**
 * Handle the start of a new OFX aggregate.
 *
 * @param {String} aggregateName The name of the aggregate.
 */
OFXHandler.prototype.startAggregate = function(/*aggregateName*/) { throw new Error("not implemented"); };

/**
 * Handle the end of an OFX aggregate.
 *
 * @param {String} aggregateName The aggregate name.
 */
OFXHandler.prototype.endAggregate = function(/*aggregateName*/) { throw new Error("not implemented"); };


module.exports = OFXHandler;

},{}],"/Users/aolson/Developer/ofx4js/src/io/OFXParseEvent.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * An event during OFX parsing.
 *
 * @class
 */
function OFXParseEvent () {

  /**
   * @name OFXParseEvent#eventType
   * @type Type
   * @access private
   */
  this.eventType = null;

  /**
   * @name OFXParseEvent#eventValue
   * @type String
   * @access private
   */
  this.eventValue = null;
}





OFXParseEvent.Type = {

  CHARACTERS: 0,

  ELEMENT: 1
};

OFXParseEvent.prototype.OFXParseEvent = function(/*Type*/ eventType, /*String*/ eventValue) {
  this.eventType = eventType;
  this.eventValue = eventValue;
};


OFXParseEvent.prototype.getEventType = function() {
  return this.eventType;
};


OFXParseEvent.prototype.getEventValue = function() {
  return this.eventValue;
};




module.exports = OFXParseEvent;

},{}],"/Users/aolson/Developer/ofx4js/src/io/OFXReader.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../util/inherit");

/**
 * Basic interface for reading an OFX document.
 *
 * @author Ryan Heaton
 */
function OFXReader() {
}

/**
 * Set the handler for this OFX reader.
 *
 * @param {OFXHandler} handler The handler.
 */
OFXReader.prototype.setContentHandler = function(handler) { throw new Error("not implemented"); };

/**
 * Parse a stream.
 *
 * @param {InputStream or Reader} stream The stream or reader to parse.
 */
OFXReader.prototype.parse = function(stream) { throw new Error("not implemented"); };


module.exports = OFXReader;

},{"../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js"}],"/Users/aolson/Developer/ofx4js/src/io/OFXV2ContentHandler.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var Stack = require("../util/stack");
var OFXParseEvent = require("./OFXParseEvent");

//ARO_TODO
var LOG = function() { console.log.apply(console.log, arguments); };

/**
 * @class
 * @param {sax.parser} parser
 * @param {OFXHandler} ofxHandler
 */
function OFXV2ContentHandler(ofxHandler) {
  if (ofxHandler === null) {
    throw new Error("An OFX handler must be supplied.");
  }
  
  /**
   * @name OFXV2ContentHandler#eventStack
   * @type Stack<OFXParseEvent>
   * @access private
   */
  this.eventStack = new Stack();

  /**
   * @name OFXV2ContentHandler#ofxHandler
   * @type OFXHandler
   * @access private
   */
  this.ofxHandler = ofxHandler;

  /**
   * @name OFXV2ContentHandler#startedEvents
   * @type List<OFXParseEvent>
   * @access private
   */
  this.startedEvents = [];
}



OFXV2ContentHandler.prototype.install = function(parser) {
  parser.ontext = function(value) { this.ontext(value); };
  parser.onopentag = function(params) { this.onopentag(params); };
  parser.onclosetag = function(name) { this.onclosetag(name); };
}



// @Override
OFXV2ContentHandler.prototype.onopentag = function(params) {
  var qName = params.name;

  if (LOG) {
    LOG("START ELEMENT: " + qName);
  }

  if ((!this.eventStack.isEmpty()) && (this.eventStack.peek().getEventType() == OFXParseEvent.Type.ELEMENT) && (!this.isAlreadyStarted(this.eventStack.peek()))) {
    var eventValue = this.eventStack.peek().getEventValue();
    if (LOG) {
      LOG("Element " + qName + " is starting aggregate " + eventValue);
    }

    //the last element started was not ended; we are assuming we've started a new aggregate.
    this.ofxHandler.startAggregate(eventValue);
    this.startedEvents.add(this.eventStack.peek());
  }

  this.eventStack.push(new OFXParseEvent(OFXParseEvent.Type.ELEMENT, qName));
};


/**
 * Whether the specified element aggregate has already been started.
 *
 * @param {OFXParseEvent} event The event containing the start.
 * @return {boolean} Whether the specified element aggregate has already been started.
 */
OFXV2ContentHandler.prototype.isAlreadyStarted = function(event) {
  return this.startedEvents.contains(event);
};


// @Override
OFXV2ContentHandler.prototype.onclosetag = function(qName) {
  if (LOG) {
    LOG("END ELEMENT: " + qName);
  }

  var eventToFinish = this.eventStack.pop();
  if (eventToFinish.getEventType() == OFXParseEvent.Type.CHARACTERS) {
    var chars = eventToFinish.getEventValue().trim();

    if (this.eventStack.isEmpty()) {
      throw new Error("Illegal character data outside main OFX root element: \"" + chars + "\".");
    }
    else {
      var elementEvent = this.eventStack.pop();
      if (elementEvent.getEventType() != OFXParseEvent.Type.ELEMENT) {
        throw new Error("Illegal OFX event before characters \"" + chars + "\" (" + elementEvent.getEventType() + ")!");
      }
      else {
        var value = elementEvent.getEventValue();
        if (LOG) {
          LOG("Element " + value + " processed with value " + chars);
        }
        this.ofxHandler.onElement(value, chars);
      }
    }
  }
  else if (eventToFinish.getEventType() == OFXParseEvent.Type.ELEMENT) {
    //we're ending an aggregate (no character data on the stack).
    if (qName.equals(eventToFinish.getEventValue())) {
      //the last element on the stack is ours; we're ending an OFX aggregate.
      /*jshint -W004*/
      var value = eventToFinish.getEventValue();
      if (LOG) {
        LOG("Ending aggregate " + value);
      }
      this.ofxHandler.endAggregate(value);
      this.startedEvents.remove(eventToFinish);
    }
    else {
      throw new Error("Unexpected end tag: " + eventToFinish.getEventValue());
    }
  }
  else {
    throw new Error("Illegal OFX event: " + eventToFinish.getEventType());
  }
};


// @Override
OFXV2ContentHandler.prototype.ontext = function(value) {
  if (value.trim().length() > 0) {
    var event;
    if ((!this.eventStack.isEmpty()) && (this.eventStack.peek().getEventType() == OFXParseEvent.Type.CHARACTERS)) {
      //append the characters...
      event = new OFXParseEvent(OFXParseEvent.Type.CHARACTERS, this.eventStack.pop().getEventValue() + value);
    }
    else {
      event = new OFXParseEvent(OFXParseEvent.Type.CHARACTERS, value);
    }
    this.eventStack.push(event);
  }
};




module.exports = OFXV2ContentHandler;

},{"../util/stack":"/Users/aolson/Developer/ofx4js/src/util/stack.js","./OFXParseEvent":"/Users/aolson/Developer/ofx4js/src/io/OFXParseEvent.js"}],"/Users/aolson/Developer/ofx4js/src/io/OFXWriter.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * @class
 */
function OFXWriter() {
}

/**
 * Write the specified headers.
 *
 * @param {} headers The headers to be written.
 */
OFXWriter.prototype.writeHeaders = function(/*headers*/) { throw new Error("not implemented"); };

/**
 * Write the start of a new aggregate.
 *
 * @param {String} aggregateName The aggregate name.
 */
OFXWriter.prototype.writeStartAggregate = function(/*aggregateName*/) { throw new Error("not implemented"); };

/**
 * Write an element to the current aggregate.
 *
 * @param {String} name The name of the element.
 * @param {String} value The value of the element.
 */
OFXWriter.prototype.writeElement = function(/*name, value*/) { throw new Error("not implemented"); };

/**
 * Write the end of an aggregate.
 *
 * @param {String} aggregateName The aggregate name.
 * @throws IllegalArgumentException If the specified aggregate hasn't been started.
 */
OFXWriter.prototype.writeEndAggregate = function(/*aggregateName*/) { throw new Error("not implemented"); };

/**
 * Close this OFX writer.
 */
OFXWriter.prototype.close = function() { throw new Error("not implemented"); };


module.exports = OFXWriter;

},{}],"/Users/aolson/Developer/ofx4js/src/io/StringConversion.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

/**
 * Interface for converting to/from OFX strings.
 *
 * @class
 */
function StringConversion() {
}

/**
 * Convert the specified object to a string.
 *
 * @param {Object} value The value to convert to a string.
 * @return {String} The string.
 */
StringConversion.prototype.toString = function(/*value*/) { throw new Error("not implemented"); };

/**
 * Convert the specified value to an object of the specified type.
 *
 * @param {Class<E>} clazz The class.
 * @param {String} value The value.
 * @return {E} The converted value.
 * @throws OFXSyntaxException If there was something wrong with the syntax of the string.
 */
StringConversion.prototype.fromString = function(/*clazz, value*/) { throw new Error("not implemented"); };


module.exports = StringConversion;

},{}],"/Users/aolson/Developer/ofx4js/src/io/index.js":[function(require,module,exports){
"use strict";

module.exports = {
  AggregateAttribute: require("./AggregateAttribute"),
  AggregateInfo: require("./AggregateInfo"),
  AggregateIntrospector: require("./AggregateIntrospector"),
//  AggregateMarshaller: require("./AggregateMarshaller"),
//  //AggregateStackContentHandler: require("./AggregateStackContentHandler"),
//  //AggregateUnmarshaller: require("./AggregateUnmarshaller"),
  BaseOFXReader: require("./BaseOFXReader"),
  DefaultHandler: require("./DefaultHandler"),
//  //DefaultStringConversion: require("./DefaultStringConversion"),
  OFXAggregate: require("./OFXAggregate"),
  OFXHandler: require("./OFXHandler"),
  OFXParseEvent: require("./OFXParseEvent"),
  OFXReader: require("./OFXReader"),
  OFXV2ContentHandler: require("./OFXV2ContentHandler"),
  OFXWriter: require("./OFXWriter"),
  StringConversion: require("./StringConversion"),
  
  v1: {
    OFXV1Writer: require("./v1/OFXV1Writer"),
  },
  v2: {
    OFXV2Writer: require("./v2/OFXV2Writer"),
  },
};

},{"./AggregateAttribute":"/Users/aolson/Developer/ofx4js/src/io/AggregateAttribute.js","./AggregateInfo":"/Users/aolson/Developer/ofx4js/src/io/AggregateInfo.js","./AggregateIntrospector":"/Users/aolson/Developer/ofx4js/src/io/AggregateIntrospector.js","./BaseOFXReader":"/Users/aolson/Developer/ofx4js/src/io/BaseOFXReader.js","./DefaultHandler":"/Users/aolson/Developer/ofx4js/src/io/DefaultHandler.js","./OFXAggregate":"/Users/aolson/Developer/ofx4js/src/io/OFXAggregate.js","./OFXHandler":"/Users/aolson/Developer/ofx4js/src/io/OFXHandler.js","./OFXParseEvent":"/Users/aolson/Developer/ofx4js/src/io/OFXParseEvent.js","./OFXReader":"/Users/aolson/Developer/ofx4js/src/io/OFXReader.js","./OFXV2ContentHandler":"/Users/aolson/Developer/ofx4js/src/io/OFXV2ContentHandler.js","./OFXWriter":"/Users/aolson/Developer/ofx4js/src/io/OFXWriter.js","./StringConversion":"/Users/aolson/Developer/ofx4js/src/io/StringConversion.js","./v1/OFXV1Writer":"/Users/aolson/Developer/ofx4js/src/io/v1/OFXV1Writer.js","./v2/OFXV2Writer":"/Users/aolson/Developer/ofx4js/src/io/v2/OFXV2Writer.js"}],"/Users/aolson/Developer/ofx4js/src/io/v1/OFXV1Writer.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../util/inherit");
var OutputStreamWriter = require("../../util/OutputStreamWriter");
var OFXWriter = require("../OFXWriter");

/**
 * OFX writer to SGML, suitable for OFX versions < 2.0.
 *
 * @class
 */
function OFXV1Writer () {

  /**
   * @name OFXV1Writer#LINE_SEPARATOR
   * @type String
   */
  this.LINE_SEPARATOR = "\r\n";

  /**
   * @name OFXV1Writer#headersWritten
   * @type boolean
   * @access protected
   */
  this.headersWritten = false;

  /**
   * @name OFXV1Writer#writer
   * @type Writer
   * @access protected
   */
  this.writer = null;

  /**
   * @name OFXV1Writer#writeAttributesOnNewLine
   * @type boolean
   * @access private
   */
  this.writeAttributesOnNewLine = false;
}

inherit(OFXV1Writer, "implements", OFXWriter);




OFXV1Writer.prototype.OFXV1Writer = function(/*OutputStream*/ out) {
  this.writer = this.newWriter(out);
};


OFXV1Writer.prototype.OFXV1Writer = function(/*Writer*/ writer) {
  this.writer = writer;
};


OFXV1Writer.prototype.newWriter = function(/*OutputStream*/ out) {
  return new OutputStreamWriter(out, "ISO-8859-1");
};


OFXV1Writer.prototype.writeHeaders = function(/*object*/ headers) {
  if (this.headersWritten) {
    throw new Error("Headers have already been written!");
  }

  //write out the 1.0 headers
  this.println("OFXHEADER:100");
  this.println("DATA:OFXSGML");
  this.println("VERSION:102");

  this.print("SECURITY:");
  var security = headers["SECURITY"];
  if (security === null) {
    security = "NONE";
  }
  this.println(security);
  this.println("ENCODING:USASCII"); //too many ofx v1 servers don't read unicode...
  this.println("CHARSET:1252"); //windows-compatible.
  this.println("COMPRESSION:NONE");
  this.print("OLDFILEUID:");
  var olduid = headers["OLDFILEUID"];
  if (olduid === null) {
    olduid = "NONE";
  }
  this.println(olduid);
  this.print("NEWFILEUID:");
  var uid = headers["NEWFILEUID"];
  if (uid === null) {
    uid = "NONE";
  }
  this.println(uid);
  this.println();

  this.headersWritten = true;
};


OFXV1Writer.prototype.writeStartAggregate = function(/*String*/ aggregateName) {
  this.print('<');
  this.print(aggregateName);
  this.print('>');
  if (this.isWriteAttributesOnNewLine()) {
    this.println();
  }
};


OFXV1Writer.prototype.writeElement = function(/*String*/ name, /*String*/ value) {
  if ((value === null) || ("".equals(value))) {
    throw new Error("Illegal element value for element '" + name + "' (value must not be null or empty).");
  }

  //todo: optimize performance of the character escaping
  if (value.indexOf('&') >= 0) {
    value = value.replaceAll("\\&", "&amp;");
  }

  if (value.indexOf('<') >= 0) {
    value = value.replaceAll("<", "&lt;");
  }

  if (value.indexOf('>') >= 0) {
    value = value.replaceAll(">", "&gt;");
  }
  
  this.print('<');
  this.print(name);
  this.print('>');
  this.print(value);
  if (this.isWriteAttributesOnNewLine()) {
    this.println();
  }
};


OFXV1Writer.prototype.writeEndAggregate = function(/*String*/ aggregateName) {
  this.print("</");
  this.print(aggregateName);
  this.print('>');
  if (this.isWriteAttributesOnNewLine()) {
    this.println();
  }
};


OFXV1Writer.prototype.isWriteAttributesOnNewLine = function() {
  return this.writeAttributesOnNewLine;
};


OFXV1Writer.prototype.setWriteAttributesOnNewLine = function(/*boolean*/ writeAttributesOnNewLine) {
  this.writeAttributesOnNewLine = writeAttributesOnNewLine;
};


OFXV1Writer.prototype.close = function() {
  this.flush();
  this.writer.close();
};


OFXV1Writer.prototype.flush = function() {
  this.writer.flush();
};


OFXV1Writer.prototype.println = function(/*String*/ line) {
  this.print(line);
  this.println();
};


OFXV1Writer.prototype.println = function() {
  this.writer.write(this.LINE_SEPARATOR);
};


OFXV1Writer.prototype.print = function(/*String*/ line) {
  this.writer.write(line === null ? "null" : line);
};


OFXV1Writer.prototype.print = function(/*char*/ ch) {
  this.writer.write(ch);
};




module.exports = OFXV1Writer;

},{"../../util/OutputStreamWriter":"/Users/aolson/Developer/ofx4js/src/util/OutputStreamWriter.js","../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../OFXWriter":"/Users/aolson/Developer/ofx4js/src/io/OFXWriter.js"}],"/Users/aolson/Developer/ofx4js/src/io/v2/OFXV2Writer.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var inherit = require("../../util/inherit");

var OFXV1Writer = require("../v1/OFXV1Writer");
var OutputStreamWriter = require("../../util/OutputStreamWriter");

/**
 * OFX writer to XML, suitable for OFX version 2.0.
 *
 * @class
 */
function OFXV2Writer () {
  OFXV1Writer.apply(this, arguments);
}

inherit(OFXV2Writer, "extends", OFXV1Writer);



// @Override
OFXV2Writer.prototype.newWriter = function(/*OutputStream*/ out) {
  return new OutputStreamWriter(out, "UTF-8");
};


OFXV2Writer.prototype.writeHeaders = function(/*object*/ headers) {
  if (this.headersWritten) {
    throw new Error("Headers have already been written!");
  }

  //write out the XML PI
  this.print("<?xml version=\"1.0\" encoding=\"utf-8\" ?>");
  var security = headers.get("SECURITY");
  if (security === null) {
    security = "NONE";
  }
  var olduid = headers.get("OLDFILEUID");
  if (olduid === null) {
    olduid = "NONE";
  }
  // println(olduid);
  var uid = headers.get("NEWFILEUID");
  if (uid === null) {
    uid = "NONE";
  }

  this.print(String.format("<?OFX OFXHEADER=\"200\" VERSION=\"202\" SECURITY=\"%s\" OLDFILEUID=\"%s\" NEWFILEUID=\"%s\"?>", security, olduid, uid));
  this.headersWritten = true;
};


OFXV2Writer.prototype.writeElement = function(/*String*/ name, /*String*/ value) {
  OFXV1Writer.prototype.writeElement.call(this, name, value);
  this.print("</");
  this.print(name);
  this.print('>');
};


// @Override
OFXV2Writer.prototype.isWriteAttributesOnNewLine = function() {
  return false;
};




module.exports = OFXV2Writer;

},{"../../util/OutputStreamWriter":"/Users/aolson/Developer/ofx4js/src/util/OutputStreamWriter.js","../../util/inherit":"/Users/aolson/Developer/ofx4js/src/util/inherit.js","../v1/OFXV1Writer":"/Users/aolson/Developer/ofx4js/src/io/v1/OFXV1Writer.js"}],"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js":[function(require,module,exports){
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var AggregateIntrospector = require("../io/AggregateIntrospector");

var Aggregate = {};

Aggregate.add = function(name, clazz) {
  AggregateIntrospector.addAggregate(name, clazz);
};

module.exports = Aggregate;

},{"../io/AggregateIntrospector":"/Users/aolson/Developer/ofx4js/src/io/AggregateIntrospector.js"}],"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var AggregateIntrospector = require("../io/AggregateIntrospector");

var ChildAggregate = {};

ChildAggregate.add = function(clazz, options) {
  options.name = options.name || "##not_specified##";
  AggregateIntrospector.addChildAggregate(clazz, options);
};

module.exports = ChildAggregate;

},{"../io/AggregateIntrospector":"/Users/aolson/Developer/ofx4js/src/io/AggregateIntrospector.js"}],"/Users/aolson/Developer/ofx4js/src/meta/Element.js":[function(require,module,exports){
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";

var AggregateIntrospector = require("../io/AggregateIntrospector");

var Element = {};

Element.add = function(clazz, options) {
  AggregateIntrospector.addElement(clazz, options);
};

module.exports = Element;

},{"../io/AggregateIntrospector":"/Users/aolson/Developer/ofx4js/src/io/AggregateIntrospector.js"}],"/Users/aolson/Developer/ofx4js/src/meta/Header.js":[function(require,module,exports){
/*
 * Copyright 2008 Web Cohesion
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module.exports = function() {};

"use strict";

var AggregateIntrospector = require("../io/AggregateIntrospector");

var Header = {};

Header.add = function(clazz, options) {
  AggregateIntrospector.addHeader(clazz, options);
};

module.exports = Header;

},{"../io/AggregateIntrospector":"/Users/aolson/Developer/ofx4js/src/io/AggregateIntrospector.js"}],"/Users/aolson/Developer/ofx4js/src/meta/index.js":[function(require,module,exports){
"use strict";

module.exports = {
  Aggregate: require('./Aggregate'),
  ChildAggregate: require('./ChildAggregate'),
  Element: require('./Element'),
  Header: require('./Header'),
};

},{"./Aggregate":"/Users/aolson/Developer/ofx4js/src/meta/Aggregate.js","./ChildAggregate":"/Users/aolson/Developer/ofx4js/src/meta/ChildAggregate.js","./Element":"/Users/aolson/Developer/ofx4js/src/meta/Element.js","./Header":"/Users/aolson/Developer/ofx4js/src/meta/Header.js"}],"/Users/aolson/Developer/ofx4js/src/util/OutputStreamWriter.js":[function(require,module,exports){

},{}],"/Users/aolson/Developer/ofx4js/src/util/inherit.js":[function(require,module,exports){
"use strict";

function inherit(child, type, parent) {
  switch(type) {
    case 'extends':
      child.prototype = Object.create(parent);
      child.prototype.constructor = child;
      break;
      
    case 'implements':
      break;
      
    default:
      throw new Error("unknown inheritance type");
  }
}

module.exports = inherit;

},{}],"/Users/aolson/Developer/ofx4js/src/util/stack.js":[function(require,module,exports){
"use strict";

function Stack() {
  this.values = [];
}


Stack.prototype.push = function() {
  return Array.prototype.push.apply(this.values, arguments);
};


Stack.prototype.pop = function() {
  return Array.prototype.pop.apply(this.values, arguments);
};


Stack.prototype.peek = function() {
  if(this.values.length === 0) {
    return null;
  } else {
    return this.values[this.values.length - 1];
  }
};


Stack.prototype.isEmpty = function() {
  return this.values.length > 0;
};

module.exports = Stack;

},{}]},{},["./src/index.js"])


//# sourceMappingURL=ofx4js.js.map