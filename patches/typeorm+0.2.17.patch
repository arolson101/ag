diff --git a/node_modules/typeorm/.DS_Store b/node_modules/typeorm/.DS_Store
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/typeorm/driver/.DS_Store b/node_modules/typeorm/driver/.DS_Store
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/typeorm/driver/sqlite/SqliteDriver.js b/node_modules/typeorm/driver/sqlite/SqliteDriver.js
index 4d4bb98..5f83cd0 100644
--- a/node_modules/typeorm/driver/sqlite/SqliteDriver.js
+++ b/node_modules/typeorm/driver/sqlite/SqliteDriver.js
@@ -103,7 +103,7 @@ var SqliteDriver = /** @class */ (function (_super) {
      */
     SqliteDriver.prototype.loadDependencies = function () {
         try {
-            this.sqlite = PlatformTools_1.PlatformTools.load("sqlite3").verbose();
+            this.sqlite = require("sqlite3").verbose();
         }
         catch (e) {
             throw new DriverPackageNotInstalledError_1.DriverPackageNotInstalledError("SQLite", "sqlite3");
@@ -114,8 +114,8 @@ var SqliteDriver = /** @class */ (function (_super) {
      */
     SqliteDriver.prototype.createDatabaseDirectory = function (fullPath) {
         return new Promise(function (resolve, reject) {
-            var mkdirp = PlatformTools_1.PlatformTools.load("mkdirp");
-            var path = PlatformTools_1.PlatformTools.load("path");
+            var mkdirp = require("mkdirp");
+            var path = require("path");
             mkdirp(path.dirname(fullPath), function (err) { return err ? reject(err) : resolve(); });
         });
     };
diff --git a/node_modules/typeorm/platform/PlatformTools.js b/node_modules/typeorm/platform/PlatformTools.js
index 0305ed1..ced6996 100644
--- a/node_modules/typeorm/platform/PlatformTools.js
+++ b/node_modules/typeorm/platform/PlatformTools.js
@@ -39,77 +39,77 @@ var PlatformTools = /** @class */ (function () {
                 * mongodb
                 */
                 case "mongodb":
-                    return require("mongodb");
+                    throw new Error('driver loading disabled') // return require("mongodb");
                 /**
                 * mysql
                 */
                 case "mysql":
-                    return require("mysql");
+                    throw new Error('driver loading disabled') // return require("mysql");
                 case "mysql2":
-                    return require("mysql2");
+                    throw new Error('driver loading disabled') // return require("mysql2");
                 /**
                 * oracle
                 */
                 case "oracledb":
-                    return require("oracledb");
+                    throw new Error('driver loading disabled') // return require("oracledb");
                 /**
                 * postgres
                 */
                 case "pg":
-                    return require("pg");
+                    throw new Error('driver loading disabled') // return require("pg");
                 case "pg-native":
-                    return require("pg-native");
+                    throw new Error('driver loading disabled') // return require("pg-native");
                 case "pg-query-stream":
-                    return require("pg-query-stream");
+                    throw new Error('driver loading disabled') // return require("pg-query-stream");
                 /**
                 * redis
                 */
                 case "redis":
-                    return require("redis");
+                    throw new Error('driver loading disabled') // return require("redis");
                 /**
                  * ioredis
                  */
                 case "ioredis":
                 case "ioredis/cluster":
-                    return require("ioredis");
+                    throw new Error('driver loading disabled') // return require("ioredis");
                 /**
                 * sqlite
                 */
                 case "sqlite3":
-                    return require("sqlite3");
+                    throw new Error('driver loading disabled') // return require("sqlite3");
                 /**
                 * sql.js
                 */
                 case "sql.js":
-                    return require("sql.js");
+                    throw new Error('driver loading disabled') // return require("sql.js");
                 /**
                 * sqlserver
                 */
                 case "mssql":
-                    return require("mssql");
+                    throw new Error('driver loading disabled') // return require("mssql");
                 /**
                 * other modules
                 */
                 case "mkdirp":
-                    return require("mkdirp");
+                    throw new Error('driver loading disabled') // return require("mkdirp");
                 case "path":
-                    return require("path");
+                    throw new Error('driver loading disabled') // return require("path");
                 case "debug":
-                    return require("debug");
+                    throw new Error('driver loading disabled') // return require("debug");
                 case "app-root-path":
-                    return require("app-root-path");
+                    throw new Error('driver loading disabled') // return require("app-root-path");
                 case "glob":
-                    return require("glob");
+                    throw new Error('driver loading disabled') // return require("glob");
                 /**
                 * default
                 */
                 default:
-                    return require(name);
+                    throw new Error('driver loading disabled') // return require(name);
             }
         }
         catch (err) {
             if (!path.isAbsolute(name) && name.substr(0, 2) !== "./" && name.substr(0, 3) !== "../") {
-                return require(path.resolve(process.cwd() + "/node_modules/" + name));
+                throw new Error('dynamic loading disabled') // return require(path.resolve(process.cwd() + "/node_modules/" + name));
             }
             throw err;
         }
